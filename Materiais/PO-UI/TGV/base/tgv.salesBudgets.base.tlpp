#include 'tlpp-core.th'
#include 'tlpp-object.th'
#include 'tgv.salesbudgets.base.ch'
#include 'fwlibversion.ch'

using namespace tgv.util

Static existConvertStringToLine := FindFunction("tgv.util.convertStringToLine")
Static lGVBudFld := Nil

#DEFINE PROPERTY 1
#DEFINE FIELD 2
#DEFINE INCLUI 3
#DEFINE ALTERA 4
#DEFINE DELETE 5

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase
	Classe responsavel pela Inclusão, Alteração ou Exclusão de
	um Orçamento de Venda utilizando o padrão de dados do Portal Gestão de Vendas.
	@type class
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@see tgvbaseResourcesSalesManagement
/*/
//------------------------------------------------------------------------------

class tgvSalesBudgetsBase from tgvbaseResourcesSalesManagement
	public data cSalesBudgetID	as character

	public method new() as object
	public method fromExecAuto() as logical
	public method commitData() as logical
	public method updateSalesBudgetId()

	private method setHeader()
	private method setItems()
	private method setItem() as array

	protected method addMapFieldsHeader()
	protected method addMapFieldsItem()
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::new() as object
	Obtem uma nova instacia da classe tgvSalesBudgetsBase.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@return object, objeto do tgvSalesBudgetsBase utilizando herança da classe tgvbaseResourcesSalesManagement
	@see tgvbaseResourcesSalesManagement
/*/
//------------------------------------------------------------------------------
method new() as object class tgvSalesBudgetsBase
	_Super:New( "SCJ",  INCLUI)
	::oStatement := IIF(checkFWExecStat(), FwExecStatement():New( getQuery(::cBranch) ), FWPreparedStatement():New( getQuery(::cBranch) ))
return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::fromExecAuto(jSalesBudget as Json) as Logical
	Efetua a conversão dos dados do JSON recebido no padrão utilizado pelo
	MSExecAuto da Rotina.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
    @param  jSalesBudget, json, Dados do Orçamento de Vendas (Cab. e Itens)
	@return Logical, se houve sucesso retorna verdadeiro (.T.)
/*/
//------------------------------------------------------------------------------
method fromExecAuto(jSalesBudget as json) as logical class tgvSalesBudgetsBase
	Local aArea := FwGetArea() as Array
	Local lContinue := .T. as Logical
	Local cTypeOperation as Character

	::clean()

	If ::nOperation == DELETE
		If Empty( ::cSalesBudgetID )
			::cSalesBudgetID := ::getSalesId()
		Endif

		If Empty( ::cSalesBudgetID )
			::setErrorMessage( STR0001 ) // "Orçamento de Venda não localizado"
			lContinue := .F.
		Else
			aAdd(::aHeader, {"CJ_NUM", ::cSalesBudgetID, Nil})
		Endif
	Else
		If jSalesBudget == Nil
			lContinue := .F.
		Else
			::addMapFields()
			::setHeader(jSalesBudget, @cTypeOperation)
			::setItems(jSalesBudget, cTypeOperation)
		Endif
	Endif

	FwRestArea( aArea )
	aSize(aArea, 0)
return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::addMapFieldsHeader
	Adiciona no Hashmap de Cabeçalho todos os campos utilizados pelo Portal Gestão
	de Vendas no cabeçalho (SCJ) do orçamento de venda.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@see protected
/*/
//------------------------------------------------------------------------------
method addMapFieldsHeader() class tgvSalesBudgetsBase
	::oHashFieldsHeader := tHashMap():New()

    ::oHashFieldsHeader:Set("branchid"              , "CJ_FILIAL")
    ::oHashFieldsHeader:Set("budgetid"              , "CJ_NUM")
    ::oHashFieldsHeader:Set("externalid"            , "CJ_NUMEXT")
    ::oHashFieldsHeader:Set("prospectid"            , "CJ_PROSPE")
    ::oHashFieldsHeader:Set("prospectstore"         , "CJ_LOJPRO")
    ::oHashFieldsHeader:Set("paymentconditionid"    , "CJ_CONDPAG")
    ::oHashFieldsHeader:Set("issuedate"             , "CJ_EMISSAO")
    ::oHashFieldsHeader:Set("customerid"            , "CJ_CLIENTE")
    ::oHashFieldsHeader:Set("customerstore"         , "CJ_LOJA")
    ::oHashFieldsHeader:Set("customertype"          , "CJ_TIPOCLI")
    ::oHashFieldsHeader:Set("pricelistid"             , "CJ_TABELA")
    ::oHashFieldsHeader:Set("freight"               , "CJ_FRETE")
    ::oHashFieldsHeader:Set("insurance"             , "CJ_SEGURO")
    ::oHashFieldsHeader:Set("expenses"              , "CJ_DESPESA")
    ::oHashFieldsHeader:Set("discount"              , "CJ_DESC1")
    ::oHashFieldsHeader:Set("currencyid"            , "CJ_MOEDA")
    ::oHashFieldsHeader:Set("releasetype"           , "CJ_TIPLIB")
    ::oHashFieldsHeader:Set("freighttype"           , "CJ_TPFRETE")
    ::oHashFieldsHeader:Set("intermediaryid"        , "CJ_CODA1U")
	::oHashFieldsHeader:Set("purchaserpresence"     , "CJ_INDPRES")
    ::oHashFieldsHeader:Set("typeofoperation"       , "typeofoperation")
    ::oHashFieldsHeader:Set("sellerid"              , "sellerid")

	::setCustomFields( "000017", ::oHashFieldsHeader ) // SalesBudgets - Cabeçalho do Orçamento
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::addMapFieldsItem
	Adiciona no Hashmap de Items todos os campos utilizados pelo Portal Gestão de
	Vendas nos itens (SCK) do orçamento de vendas.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@see protected
/*/
//------------------------------------------------------------------------------
method addMapFieldsItem() class tgvSalesBudgetsBase
	::oHashFieldsItem := tHashMap():New()

    ::oHashFieldsItem:Set("itemid"      , "CK_ITEM")
	::oHashFieldsItem:Set("productid"   , "CK_PRODUTO")
	::oHashFieldsItem:Set("description" , "CK_DESCRI")
	::oHashFieldsItem:Set("quantity"    , "CK_QTDVEN")
	::oHashFieldsItem:Set("pricelist"   , "CK_PRUNIT")
	::oHashFieldsItem:Set("unitprice"   , "CK_PRCVEN")
	::oHashFieldsItem:Set("discount"    , "CK_DESCONT")
	::oHashFieldsItem:Set("isDeleted"   , "isDeleted")

    ::setCustomFields( "000018", ::oHashFieldsItem ) // SalesBudgetsItems - Itens do Orçamentos
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::setHeader
	Efetua a conversão dos campos informados no json do Orçamento de Venda em uma
	estrutura de Cabeçalhos do Orçamento de venda utilizado no MSExecAuto da rotina MATA415.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@param jSalesBudget, json, JSON contendo os dados do Orçamento de Venda
	@param cTypeOperation, character, Tipo de operação (enviado por referencia).
/*/
//------------------------------------------------------------------------------
method setHeader(jSalesBudget as json, cTypeOperation as character) class tgvSalesBudgetsBase
	Local aFieldsHeader as array
	Local jHeader		as json
	Local nField		as integer
	Local cField		as character
	Local xValue		as variant

	jHeader := jSalesBudget:GetJsonObject("header")
	aFieldsHeader := jHeader:GetNames()

	For nField := 1 To Len( aFieldsHeader )
		If ::oHashFieldsHeader:Get( aFieldsHeader[nField] , @cField )
			If cField $ "typeofoperation"
				cTypeOperation := jHeader:GetJsonObject(aFieldsHeader[nField])
            ElseIf cField $ "sellerid"
				::cSellerId := jHeader:GetJsonObject(aFieldsHeader[nField])
			Elseif cField == "CJ_NUMEXT"
				::cExternalId := jHeader:GetJsonObject(aFieldsHeader[nField])
				aAdd(::aHeader, {"CJ_NUMEXT", ::cExternalId, Nil})
			Elseif cField == "CJ_EMISSAO" .And. ::nOperation <> INCLUI
				Loop //Se diferente de inclusão não altera data de emissao.
			Else
				xValue := ConvertValue(jHeader:GetJsonObject(aFieldsHeader[nField]), GetSx3Cache(cField, "X3_TIPO"))
				If cField == "CJ_NUM"
					If Empty(xValue)
						::SetOperation(INCLUI)
						Loop
					Else
						::cSalesBudgetID := xValue
					Endif
				Endif
				If (cField == "CJ_PROSPE" .and. xValue == "") .or. (cField == "CJ_LOJPRO" .and. xValue == "")
					Loop			
				EndIf
				aAdd(::aHeader, {cField, xValue, Nil})
			Endif
		Endif
	Next
	
	If Empty(::cSalesBudgetID)
		::SetOperation(INCLUI)
	Endif

	::aHeader := FwVetByDic(::aHeader, "SCJ", .F.)

	aSize(aFieldsHeader, 0)
	FreeObj(jHeader)
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::setItems
	Efetua a conversão dos campos informados no json do Orçamento de Venda em uma
	estrutura de Items do Orçamento de venda utilizado no MSExecAuto da rotina MATA415.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@param jSalesBudget, json, JSON contendo os dados do Orçamento de Venda
	@param cTypeOperation, character, Tipo de operação do Orçamento de Venda
/*/
//------------------------------------------------------------------------------
method setItems(jSalesBudget as json, cTypeOperation as character) class tgvSalesBudgetsBase
	Local aItems			as array
	Local aItem				as array
	Local aItemsClone   	as array
	Local cBranchSCK		:= FwXFilial("SCK") as Character
	Local cAutDeleta		as character
	Local cLinPos			as character
	Local nAutdeleta		as numeric
	Local nItem				as integer
	Local nLinpos			as numeric
	Local aLinBkpPrcUnit	as Array 
	Local aLinBkpPrcVen		as Array
	Local aLinBkpDescont	as Array
	Local nLinposPrcUnit	as Numeric 
	Local nLinPosDescont	as Numeric
	Local nLinposPrcVen		as numeric

	aItems := jSalesBudget:GetJsonObject("items")

	For nItem := 1 To Len(aItems)
		aItem := ::setItem(aItems[nItem], cTypeOperation, cBranchSCK)
		aAdd(::aItems, aClone(aItem))
		aSize(aItem, 0)
	Next

	aItemsClone := aClone(::aItems)
	::aItems := FwVetByDic(::aItems, "SCK", .T.)

	If ::nOperation == ALTERA
		For nItem := 1 to Len(::aItems)
			nLinpos := aScan(aItemsClone[nItem], {|x| x[1] == "LINPOS"})
			nAutdeleta := aScan(aItemsClone[nItem], {|x| x[1] == "AUTDELETA"})
			If nLinpos > 0 .And. nAutdeleta > 0
				cLinPos := aItemsClone[nItem, nLinpos, 3]
				cAutDeleta := aItemsClone[nItem, nAutdeleta, 2]

				aAdd(::aItems[nItem], {"LINPOS"		, "CK_ITEM"	, cLinPos})
				aAdd(::aItems[nItem], {"AUTDELETA"	, cAutDeleta, NIL})
			EndIf
		Next
	EndIf

	If len(::aItems) > 0
		For nItem    := 1 to Len(::aItems)
			nLinposPrcVen  := aScan(::aItems[nItem], {|x| x[1] == "CK_PRCVEN"})
			nLinposPrcUnit := aScan(::aItems[nItem], {|x| x[1] == "CK_PRUNIT"})
			nLinPosDescont := aScan(::aItems[nItem], {|x| x[1] == "CK_DESCONT"})
			If nLinposPrcVen > 0 .And.  nLinposPrcVen < nLinposPrcUnit 
				aLinBkpPrcVen  := aClone(::aItems[nItem][nLinposPrcVen])
				aLinBkpPrcUnit := aClone(::aItems[nItem][nLinposPrcUnit])
				::aItems[nItem][nLinposPrcVen]  := aLinBkpPrcUnit
				If  nLinPosDescont <> 0
					aLinBkpDescont := aClone(::aItems[nItem][nLinPosDescont])
					::aItems[nItem][nLinposPrcUnit] := aLinBkpDescont
					::aItems[nItem][nLinPosDescont] := aLinBkpPrcVen					
				Else
					::aItems[nItem][nLinposPrcUnit] := aLinBkpPrcVen	
				EndIf 		
			EndIf 
		Next
	EndIf 

	aSize(aItemsClone, 0)
	aSize(aItems, 0)
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::setItem(jItem as json, cTypeOperation as character, cBranchSCK as character) as array
	Efetua a conversão dos campos informados no json de Item Orçamento de Venda em
	um array de um item.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
    @param jItem, json, Item do Orçamento
    @param cTypeOperation, character, Tipo de operação do Orçamento de Venda
    @param cBranchSCK, character, Filial do item do orçamento
	@return array, Item do Orçamento de Venda
/*/
//------------------------------------------------------------------------------
method setItem(jItem as json, cTypeOperation as character, cBranchSCK as character) as array class tgvSalesBudgetsBase
	Local aArea			:= FwGetArea() as array
	Local aFieldsItem 	as array
	Local aItem			:= {} as array
	Local cBudgetItem	as character
	Local cField		as character
	Local lAutdeleta	:= .F. as logical
	Local lNewItem		as logical
	Local nField		as integer
	Local xValue		as variant

	aFieldsItem := jItem:GetNames()
	aAdd(aItem, {"CK_OPER", cTypeOperation, Nil})

	For nField := 1 To Len(aFieldsItem)
		If ::oHashFieldsItem:Get( aFieldsItem[nField] , @cField )
			If cField == "CK_ITEM"
				lNewItem := .T.
				cBudgetItem := jItem:GetJsonObject(aFieldsItem[nField])
				If ::nOperation == ALTERA
                    DbSelectArea("SCK")
					SCK->(DbSetOrder(1)) // CK_FILIAL, CK_NUM, CK_ITEM, CK_PRODUTO
					If SCK->(DbSeek(cBranchSCK + ::cSalesBudgetID + cBudgetItem ))
						lNewItem := .F.
						aAdd(aItem, {"LINPOS", "CK_ITEM", cBudgetItem})
					Endif
				Endif

				If lNewItem
					aAdd(aItem, {"CK_ITEM", cBudgetItem, Nil})
				Endif
			ElseIf cField == "isDeleted" .And. ::nOperation == ALTERA
				lAutdeleta := jItem:GetJsonObject(aFieldsItem[nField])
			Else
				xValue := ConvertValue(jItem:GetJsonObject(aFieldsItem[nField]), GetSx3Cache(cField, "X3_TIPO"))
				If cField == "CK_DESCONT"
					If jItem:GetJsonObject(aFieldsItem[nField]) > 0
						aAdd(aItem, {cField, xValue, Nil})
					EndIf
				Else
					aAdd(aItem, {cField, xValue, Nil})
				EndIf
			Endif
		Endif
	Next

	If ::nOperation == ALTERA .And. !lNewItem
		If lAutdeleta
			aAdd(aItem, {"AUTDELETA", "S", Nil})
		Else
			aAdd(aItem, {"AUTDELETA", "N", Nil})
		EndIf
	EndIf

	FwRestArea(aArea)

	aSize(aFieldsItem, 0)
	aSize(aArea, 0)
return aItem

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::commitData() as logical
	Efetua a gravação de um Orçamento de venda
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@return logical, Se transação ocorreu com sucesso retorna verdadeiro (.T.)
/*/
//------------------------------------------------------------------------------
method commitData() as logical class tgvSalesBudgetsBase
	Local aArea     := FwGetArea() as array
	Local aMsgErro	as array
	Local lContinue	:= .T. as logical
	Local nItem		as integer
	Local cError    as character
	Local aGVBudFld as array

	private lMsErroAuto		:= .F. as Logical
	private lAutoErrNoFile	:= .T. as Logical

	If ::nOperation <> INCLUI
        DbSelectArea("SCJ")
		SCJ->(DbSetOrder(1)) // CJ_FILIAL, CJ_NUM, CJ_CLIENTE, CJ_LOJA
		If !SCJ->(DbSeek(::cBranch  + ::cSalesBudgetID))
			lContinue := .F.
			::setErrorMessage( STR0001, .T. ) // "Orçamento de Venda não localizado"
		Endif
	Endif

	If lContinue		
		checkExistBlock()
		IF lGVBudFld
			aGVBudFld := ExecBlock("GVBudFld", .F., .F., { ::aHeader, ::aItems, ::nOperation })
			::aHeader := IIF(ValType(aGVBudFld[1]) == 'A', aGVBudFld[1], ::aHeader )
			::aItems  := IIF(ValType(aGVBudFld[2]) == 'A', aGVBudFld[2], ::aItems  )
		EndIf
	
		MSExecAuto( {| x, y, z | MATA415( x, y, z ) }, ::aHeader, ::aItems, ::nOperation )

		If lMsErroAuto
			aMsgErro := GetAutoGRLog()
			For nItem := 1 To Len( aMsgErro )
				cError := StrTran( StrTran( aMsgErro[nItem], "<", "" ), "-", "" ) + (" ")
				If existConvertStringToLine
					cError := convertStringToLine(cError, .F.)
				EndIf
				::setErrorMessage( cError, .F. )
			Next
			lContinue := .F.
			aSize(aMsgErro, 0)
		EndIf
	Endif

	FwrestArea( aArea )
	aSize(aArea, 0)
	aSize(::aItems, 0)
	aSize(::aHeader, 0)
return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesBudgetsBase::updateSalesBudgetId
	Atualiza o código do Orçamento de venda
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
/*/
//------------------------------------------------------------------------------
method updateSalesBudgetId() Class tgvSalesBudgetsBase
	::cSalesBudgetID := ::getSalesId()
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} getQuery
	Obtem uma Query utilizada para buscar Orçamentos de vendas utilizado a
	Filial e Número Externo como chave.
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 27/01/2022
	@param cBranch, character, Código da Filial
	@return character, Query no padrão FWPreparedStatement
	@see FWPreparedStatement
/*/
//------------------------------------------------------------------------------
static function getQuery(cBranch as character) as character
	Local cQuerySCJ as character

	cQuerySCJ := " SELECT CJ_NUM SALESID FROM " + RetSqlName("SCJ") + " SCJ "
	cQuerySCJ += " WHERE SCJ.CJ_FILIAL = '" + cBranch + "' AND SCJ.CJ_NUMEXT = ? AND SCJ.D_E_L_E_T_ = ' ' "
	cQuerySCJ := ChangeQuery(cQuerySCJ)
return cQuerySCJ

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} checkFWExecStat
	Função utilizada para validar a data da LIB para utilização da classe FWExecStatement
	@type       Function
	@return     lCheckVerLib, lógico, se pode ser utilizado a classe FWExecStatement
	@author     Squad CRM/Faturamento
	@since      13/04/2022
	@version    12.1.33	
/*/
//-------------------------------------------------------------------------------------
Static Function checkFWExecStat()
	Static lCheckVerLib := Nil

	If lCheckVerLib == Nil
		lCheckVerLib := FWLibVersion() >= "20211116"
	EndIf
Return lCheckVerLib

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} checkExistBlock
	Função utilizada para popular as variaveis referente aos pontos de entradas
	@type       Function
	@return     Nil
	@author     Squad CRM/Faturamento
	@since      20/09/2022
	@version    12.1.33	
/*/
//-------------------------------------------------------------------------------------
Static Function checkExistBlock()
	If lGVBudFld == Nil 
    	lGVBudFld := ExistBlock("GVBudFld")
	EndIf
Return 
