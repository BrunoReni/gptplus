#include "tlpp-core.th"
#include "tlpp-object.th"
#include "tgv.salesordersbase.ch"
#include 'fwlibversion.ch'

using namespace tgv.util

Static existConvertStringToLine := FindFunction("tgv.util.convertStringToLine")
Static lGVOrdFld := Nil

#DEFINE PROPERTY 1 
#DEFINE FIELD 2
#DEFINE INCLUI 3
#DEFINE ALTERA 4
#DEFINE DELETE 5

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase
	Classe responsavel pela Inclusão, Alteração ou Exclusão de 
	um Pedido de Venda utilizando o padrão de dados do TOTVS Gestão de Vendas.
	@type class
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@see tgvbaseResourcesSalesManagement
/*/
//------------------------------------------------------------------------------
Class tgvSalesOrdersBase From tgvbaseResourcesSalesManagement
	public data cSalesOrderId	as character

	public method new() as object
	public method fromExecAuto() as logical
	public method commitData() as logical
	public method updateSalesOrderId()
	
	private method setHeader()
	private method setItems()
	private method setItem() as array
	
	protected method addMapFieldsHeader()
	protected method addMapFieldsItem()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::new() as Object
	Obtem uma nova instacia da classe tgvSalesOrdersBase.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@return object, objeto do tgvSalesOrdersBase utilizando herança da classe tgvbaseResourcesSalesManagement
	@see tgvbaseResourcesSalesManagement
/*/
//------------------------------------------------------------------------------
method new() as Object Class tgvSalesOrdersBase
	_Super:New( "SC5",  INCLUI)
	::oStatement := IIF(checkFWExecStat(), FwExecStatement():New( getQuery(::cBranch) ), FWPreparedStatement():New( getQuery(::cBranch) ))
return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::fromExecAuto(jSalesOrder as Json) as Logical
	Efetua a conversão dos dados do JSON recebido no padrão utilizado pelo 
	MSExecAuto da Rotina.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@return Logical, se houve sucesso retorna verdadeiro (.T.)
/*/
//------------------------------------------------------------------------------
method fromExecAuto(jSalesOrder as Json) as Logical Class tgvSalesOrdersBase
	Local aArea := FwGetArea() as Array
	Local lContinue := .T. as Logical
	Local cTypeOperation as Character
	
	::clean()

	If ::nOperation == DELETE
		If Empty( ::cSalesOrderId )
			::cSalesOrderId := ::getSalesId()
		Endif

		If Empty( ::cSalesOrderId )
			::setErrorMessage( STR0001 ) // "Pedido de venda não localizado"
			lContinue := .F.
		Else
			aAdd(::aHeader, {"C5_NUM", ::cSalesOrderId, Nil})
		Endif
	Else
		If jSalesOrder == Nil
			lContinue := .F.
		Else
			::addMapFields()
			::setHeader(jSalesOrder, @cTypeOperation)
			::setItems(jSalesOrder, cTypeOperation)
		Endif
	Endif

	FwrestArea( aArea )
	aSize(aArea, 0)
return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::addMapFieldsHeader
	Adiciona no Hashmap de Cabeçalho todos os campos utilizados pelo TOTVS Gestão
	de Vendas no cabeçalho (SC5) do pedido de venda.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@see protected
/*/
//------------------------------------------------------------------------------
method addMapFieldsHeader() Class tgvSalesOrdersBase
	::oHashFieldsHeader := tHashMap():New()
	::oHashFieldsHeader:Set("branchid"			, "C5_FILIAL")
	::oHashFieldsHeader:Set("orderid"			, "C5_NUM")
	::oHashFieldsHeader:Set("externalid"		, "C5_NUMEXT")
	::oHashFieldsHeader:Set("ordertype"			, "C5_TIPO")
	::oHashFieldsHeader:Set("pricelistid"		, "C5_TABELA")
	::oHashFieldsHeader:Set("paymentconditionid", "C5_CONDPAG")
	::oHashFieldsHeader:Set("issuedate"			, "C5_EMISSAO")
	::oHashFieldsHeader:Set("customerid"		, "C5_CLIENTE")
	::oHashFieldsHeader:Set("customerstore"		, "C5_LOJACLI")
	::oHashFieldsHeader:Set("carriercode"		, "C5_TRANSP")
	::oHashFieldsHeader:Set("sellerid"			, "C5_VEND1")
	::oHashFieldsHeader:Set("freighttype"		, "C5_TPFRETE")
	::oHashFieldsHeader:Set("freight"			, "C5_FRETE")
	::oHashFieldsHeader:Set("insurance"			, "C5_SEGURO")
	::oHashFieldsHeader:Set("expenses"			, "C5_DESPESA")
	::oHashFieldsHeader:Set("discount"			, "C5_DESC1")
	::oHashFieldsHeader:Set("currencyid"		, "C5_MOEDA")
	::oHashFieldsHeader:Set("releasetype"		, "C5_TIPLIB")
	::oHashFieldsHeader:Set("typeofoperation"	, "typeofoperation")
	::oHashFieldsHeader:Set("intermediaryid"	, "C5_CODA1U")
	::oHashFieldsHeader:Set("purchaserpresence"	, "C5_INDPRES")
	::oHashFieldsHeader:Set("notemessage"		, "C5_MENNOTA")
	::oHashFieldsHeader:Set("ordercomment"		, "C5_COMENT")

	::setCustomFields( "000009", ::oHashFieldsHeader ) // SalesOrders - Pedidos de Venda	
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::addMapFieldsItem
	Adiciona no Hashmap de Items todos os campos utilizados pelo TOTVS Gestão de
	Vendas nos itens (SC6) do pedido de vendas.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@see protected
/*/
//------------------------------------------------------------------------------
method addMapFieldsItem() Class tgvSalesOrdersBase
	::oHashFieldsItem := tHashMap():New()
	::oHashFieldsItem:Set("itemid"		, "C6_ITEM")
	::oHashFieldsItem:Set("productid"	, "C6_PRODUTO")
	::oHashFieldsItem:Set("description"	, "C6_DESCRI")
	::oHashFieldsItem:Set("quantity"	, "C6_QTDVEN")
	::oHashFieldsItem:Set("unitprice"	, "C6_PRCVEN")
	::oHashFieldsItem:Set("discount"	, "C6_DESCONT")
	::oHashFieldsItem:Set("pricelist"	, "C6_PRUNIT")
	::oHashFieldsItem:Set("customerorder","C6_PEDCLI")
	::oHashFieldsItem:Set("isDeleted"	, "isDeleted")

	::setCustomFields( "000010", ::oHashFieldsItem ) // SalesOrdersItems - Itens do pedido de Venda	
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::setHeader
	Efetua a conversão dos campos informados no json do Pedido de Venda em uma
	estrutura de Cabeçalhos do pedido de venda utilizado no MSExecAuto da rotina MATA410.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@param jSalesOrder, json, JSON contendo os dados do Pedido de Venda
	@param cTypeOperation, character, Tipo de operação (enviado por referencia).
/*/
//------------------------------------------------------------------------------
method setHeader(jSalesOrder as Json, cTypeOperation as Character) Class tgvSalesOrdersBase
	Local aFieldsHeader as Array
	Local jHeader		as Json
	Local nField		as Integer
	Local cField		as Character
	Local xValue		as variant

	jHeader := jSalesOrder:GetJsonObject("header")
	aFieldsHeader := jHeader:GetNames()

	For nField := 1 To Len( aFieldsHeader )
		If ::oHashFieldsHeader:Get( aFieldsHeader[nField] , @cField )
			If cField $ "typeofoperation"
				cTypeOperation := jHeader:GetJsonObject(aFieldsHeader[nField])
			Elseif cField == "C5_NUMEXT"
				::cExternalId := jHeader:GetJsonObject(aFieldsHeader[nField])
				aAdd(::aHeader, {"C5_NUMEXT", ::cExternalId, Nil})
			Elseif cField == "C5_EMISSAO" .And. ::nOperation <> INCLUI
				Loop //Se diferente de inclusão não altera data de emissao.
			Elseif (cField == "C5_CLIENTE" .OR. cField == "C5_LOJA").And. !Empty(::cSalesOrderId)
				Loop //Se diferente de inclusão não altera data de emissao.
			Else
				xValue := ConvertValue(jHeader:GetJsonObject(aFieldsHeader[nField]), GetSx3Cache(cField, "X3_TIPO"))
				If cField == "C5_NUM"
					If Empty(xValue)
						::SetOperation(INCLUI)
						Loop
					Else
						::cSalesOrderId := xValue
					Endif
				Elseif cField == "C5_VEND1"
					::cSellerId := xValue
				Endif

				aAdd(::aHeader, {cField, xValue, Nil})
			Endif
		Endif
	Next

	If Empty(::cSalesOrderId)
		::SetOperation(INCLUI)
	Endif

	If ::nOperation == INCLUI .And. Len(::aHeader) > 0 
		aAdd(::aHeader, {'C5_ORIGEM', 'TGV.SALESORDER', Nil})
	Endif

	::aHeader := FwVetByDic(::aHeader, "SC5", .F.)

	aSize(aFieldsHeader, 0)
	FreeObj(jHeader)
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::setItems
	Efetua a conversão dos campos informados no json do Pedido de Venda em uma
	estrutura de Items do pedido de venda utilizado no MSExecAuto da rotina MATA410.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@param jSalesOrder, json, JSON contendo os dados do Pedido de Venda
	@param cTypeOperation, character, Tipo de operação do Pedido de Venda
/*/
//------------------------------------------------------------------------------
method setItems(jSalesOrder as Json, cTypeOperation as Character) Class tgvSalesOrdersBase
	Local aItems		as Array
	Local aItem			as Array
	Local aItemsClone   as Array
	Local cBranchSC6	:= FwXFilial("SC6") as Character
	Local cAutDeleta	as Character
	Local cLinPos		as Character
	Local nAutdeleta	as Numeric
	Local nItem			as Integer
	Local nLinpos		as Numeric	
	Local aBkpPrcVen	as Array 
	Local aBkpDescont	as Array
	Local nPosPrcVen	as Numeric 
	Local nPosDescont	as Numeric

	aItems := jSalesOrder:GetJsonObject("items")

	For nItem := 1 To Len(aItems)
		aItem := ::setItem(aItems[nItem], cTypeOperation, cBranchSC6)
		aAdd(::aItems, aClone(aItem))
		aSize(aItem, 0)
	Next

	aItemsClone := aClone(::aItems)
	::aItems := FwVetByDic(::aItems, "SC6", .T.)

	If ::nOperation == ALTERA
		For nItem := 1 to Len(::aItems)
			nLinpos := aScan(aItemsClone[nItem], {|x| x[1] == "LINPOS"})
			nAutdeleta := aScan(aItemsClone[nItem], {|x| x[1] == "AUTDELETA"})
			If nLinpos > 0 .And. nAutdeleta > 0
				cLinPos := aItemsClone[nItem, nLinpos, 3]
				cAutDeleta := aItemsClone[nItem, nAutdeleta, 2]
				
				aAdd(::aItems[nItem], {"LINPOS"		, "C6_ITEM"	, cLinPos})
				aAdd(::aItems[nItem], {"AUTDELETA"	, cAutDeleta, NIL})
			EndIf

			nPosDescont := aScan(::aItems[nItem], {|x| x[1] == "C6_DESCONT"})
			If  nPosDescont <> 0
				aBkpDescont := aClone(::aItems[nItem][nPosDescont])
				If aBkpDescont[2] == 0 
					nPosPrcVen := aScan(::aItems[nItem], {|x| x[1] == "C6_PRCVEN"})
					If nPosPrcVen > 0 .And. nPosPrcVen < nPosDescont
						aBkpPrcVen := aClone(::aItems[nItem][nPosPrcVen])	
						::aItems[nItem][nPosPrcVen]  := aBkpDescont
						::aItems[nItem][nPosDescont] := aBkpPrcVen
					EndIf
				EndIf				
			EndIf 		

		Next
	EndIf

	aSize(aItemsClone, 0)
	aSize(aItems, 0)
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::setItem(jItem as Json, cTypeOperation as Character, cBranchSC6 as Character) as Array
	Efetua a conversão dos campos informados no json de Item Pedido de Venda em
	um array de um item.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@return array, Item do Pedido de Venda
/*/
//------------------------------------------------------------------------------
method setItem(jItem as Json, cTypeOperation as Character, cBranchSC6 as Character) as Array Class tgvSalesOrdersBase
	Local aArea			:= GetArea() as Array
	Local aFieldsItem 	as Array
	Local aItem			:= {} as Array
	Local cOrderItem	as Character
	Local cField		as Character
	Local lAutdeleta	:= .F. as Logical
	Local lNewItem		as Logical
	Local nField		as Integer
	Local xValue		as variant	

	aFieldsItem := jItem:GetNames()
	aAdd(aItem, {"C6_OPER", cTypeOperation, Nil})

	For nField := 1 To Len(aFieldsItem)
		If ::oHashFieldsItem:Get( aFieldsItem[nField] , @cField )
			If cField == "C6_ITEM"
				lNewItem := .T.
				cOrderItem := jItem:GetJsonObject(aFieldsItem[nField])
				If ::nOperation == ALTERA
					DbSelectArea("SC6")
					SC6->( DbSetOrder(1) ) // C6_FILIAL, C6_NUM, C6_ITEM, C6_PRODUTO
					If SC6->(DbSeek(cBranchSC6 + ::cSalesOrderId + cOrderItem ))
						lNewItem := .F.
						aAdd(aItem, {"LINPOS", "C6_ITEM", cOrderItem})
					Endif
				Endif

				If lNewItem
					aAdd(aItem, {"C6_ITEM", cOrderItem, Nil})
				Endif
			ElseIf cField == "isDeleted" .And. ::nOperation == ALTERA
				lAutdeleta := jItem:GetJsonObject(aFieldsItem[nField])
			Else
				xValue := ConvertValue(jItem:GetJsonObject(aFieldsItem[nField]), GetSx3Cache(cField, "X3_TIPO"))
				If cField == "C6_DESCONT" .And. ::nOperation == INCLUI
					If jItem:GetJsonObject(aFieldsItem[nField]) > 0 
						aAdd(aItem, {cField, xValue, Nil})
					EndIf
				Else
					aAdd(aItem, {cField, xValue, Nil})
				EndIf
			Endif
		Endif
	Next

	If ::nOperation == ALTERA .And. !lNewItem
		If lAutdeleta
			aAdd(aItem, {"AUTDELETA", "S", Nil})
		Else
			aAdd(aItem, {"AUTDELETA", "N", Nil})
		EndIf
	EndIf

	RestArea(aArea)

	aSize(aFieldsItem, 0)
	aSize(aArea, 0)
return aItem

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::commitData() as Logical
	Efetua a gravação de um Pedido de Venda.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@return logical, Se transação ocorreu com sucesso retorna verdadeiro (.T.)
/*/
//------------------------------------------------------------------------------
method commitData() as Logical Class tgvSalesOrdersBase
	Local aArea := FwGetArea() as Array
	Local aMsgErro	as Array
	Local lContinue	:= .T. as Logical
	Local nItem		as Integer
	Local cError    as character
	Local aGVOrdFld as Array

	private lMsErroAuto		:= .F. as Logical
	private lAutoErrNoFile	:= .T. as Logical

	If ::nOperation <> INCLUI
		DbSelectArea("SC5")
		SC5->(DbSetOrder(1)) // C5_FILIAL, C5_NUM
		If !SC5->( DbSeek( ::cBranch + ::cSalesOrderId ) )
			lContinue := .F.
			::setErrorMessage( STR0001, .T. ) // "Pedido de venda não localizado"
		Endif
	Endif

	If lContinue
		checkExistBlock()
		IF lGVOrdFld
			aGVOrdFld := ExecBlock("GVOrdFld", .F., .F., {::aHeader, ::aItems, ::nOperation })
			::aHeader := IIF(ValType(aGVOrdFld[1]) == 'A', aGVOrdFld[1], ::aHeader )
			::aItems  := IIF(ValType(aGVOrdFld[2]) == 'A', aGVOrdFld[2], ::aItems  )
		EndIf

		MSExecAuto( {| x, y, z | MATA410( x, y, z ) }, ::aHeader, ::aItems, ::nOperation )

		If lMsErroAuto
			aMsgErro := GetAutoGRLog()
			For nItem := 1 To Len( aMsgErro )
				cError := StrTran( StrTran( aMsgErro[nItem], "<", "" ), "-", "" ) + (" ")
				If existConvertStringToLine
					cError := convertStringToLine(cError, .F.)
				EndIf
				::setErrorMessage( cError, .F. )
			Next
			lContinue := .F.
			aSize(aMsgErro, 0)
		EndIf
	Endif
	
	FwrestArea( aArea )
	aSize(aArea, 0)
	aSize(::aItems, 0)
	aSize(::aHeader, 0)
return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvSalesOrdersBase::updateSalesOrderId
	Atualiza o código do Pedido de Venda
	@type			method
	@version		12.1.33
	@author			Debora Frias Constantino / Squad CRM & Faturamento
	@since			01/09/2021
/*/
//------------------------------------------------------------------------------
method updateSalesOrderId() Class tgvSalesOrdersBase
	::cSalesOrderId := ::getSalesId()
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} getQuery
	Obtem uma Query utilizada para buscar Pedidos de vendas utilizado a
	Filial e Número Externo como chave.
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@param cBranch, character, Código da Filial
	@return character, Query no padrão FWPreparedStatement
	@see FWPreparedStatement
/*/
//------------------------------------------------------------------------------
Static Function getQuery(cBranch as Character) as Character
	Local cQuerySC5 as Character

	cQuerySC5 := " SELECT C5_NUM SALESID FROM " + RetSqlName("SC5") + " SC5 "
	cQuerySC5 += " WHERE SC5.C5_FILIAL = '" + cBranch + "' AND SC5.C5_NUMEXT = ? AND SC5.D_E_L_E_T_ = ' ' "
	
	cQuerySC5 := ChangeQuery(cQuerySC5)
return cQuerySC5

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} checkFWExecStat
	Função utilizada para validar a data da LIB para utilização da classe FWExecStatement
	@type       Function
	@return     lCheckVerLib, lógico, se pode ser utilizado a classe FWExecStatement
	@author     Squad CRM/Faturamento
	@since      13/04/2022
	@version    12.1.33	
/*/
//-------------------------------------------------------------------------------------
Static Function checkFWExecStat()
	Static lCheckVerLib := Nil

	If lCheckVerLib == Nil
		lCheckVerLib := FWLibVersion() >= "20211116"
	EndIf
Return lCheckVerLib

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} checkExistBlock
	Função utilizada para popular as variaveis referente aos pontos de entrada
	@type       Function
	@return     Nil
	@author     Squad CRM/Faturamento
	@since      20/09/2022
	@version    12.1.33	
/*/
//-------------------------------------------------------------------------------------
Static Function checkExistBlock()
	If lGVOrdFld == Nil 
    	lGVOrdFld := ExistBlock("GVOrdFld")
	EndIf
Return 
