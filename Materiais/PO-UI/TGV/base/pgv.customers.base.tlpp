#include 'tlpp-core.th'
#include 'tlpp-object.th'
#include 'FWMVCDEF.CH'

namespace tgv.customer
using namespace tgv.util

#DEFINE FIELD 1
#DEFINE VALUE 2

Static __cPgvRisc   := SuperGetMv("MV_PGVRISC", .F., "")
Static __cPgvBlql   := SuperGetMv("MV_PGVBLQL", .F., "")
//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvCustomersBase
	Classe responsavel pela gravação do Cliente utilizando o padrão de
	dados do Portal Gestão de vendas
	@type class
	@version 12.1.2210
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 26/04/2023
/*/
//------------------------------------------------------------------------------
class pgvCustomersBase from tgvbaseResourcesSalesManagement
    public data cCustomerId	    as character
    public data cCustomerStore	as character

    public method new() as object
    public method fromExecAuto() as logical
    public method commitData() as logical
    private method setHeader()
    protected method addMapFieldsHeader()
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvCustomersBase::new() as object
	Cria uma nova instancia da classe pgvCustomersBase
	@type method
	@version 12.1.2210
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 26/04/2023
	@return object
/*/
//------------------------------------------------------------------------------
method new() as object class pgvCustomersBase
    _Super:New("SA1", MODEL_OPERATION_INSERT)
return self

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvCustomersBase::fromExecAuto(jCustomer as json) as logical
	Cria a estrutura utilizada na gravação do filtro
	@type method
	@version 12.1.2210
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 26/04/2023
	@param jCustomer
	@return logical
/*/
//------------------------------------------------------------------------------
method fromExecAuto(jCustomer as json) as logical class pgvCustomersBase
    Local lContinue := .T. as logical
    ::clean()

    If ::nOperation <> MODEL_OPERATION_DELETE
        If jCustomer == Nil
			lContinue := .F.
		Else
            ::addMapFields()
            ::setHeader(jCustomer)
        EndIf
    EndIf
return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvCustomersBase::addMapFieldsHeader
	Adiciona um Mapa de campos utilizando os dados da (SA1)
	@type method
	@version 12.1.2210
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 26/04/2023
/*/
//------------------------------------------------------------------------------
method addMapFieldsHeader() class pgvCustomersBase
	::oHashFieldsHeader := tHashMap():New()
    ::oHashFieldsHeader:set("code"                      ,"A1_COD") 
    ::oHashFieldsHeader:set("store"                     ,"A1_LOJA") 
    ::oHashFieldsHeader:set("name"                      ,"A1_NOME") 
    ::oHashFieldsHeader:set("fantasy"                   ,"A1_NREDUZ") 
    ::oHashFieldsHeader:set("municipalregistration"     ,"A1_INSCRM") 
    ::oHashFieldsHeader:set("estadualregistration"      ,"A1_INSCR") 
    ::oHashFieldsHeader:set("customertype"              ,"A1_TIPO") 
    ::oHashFieldsHeader:set("persontype"                ,"A1_PESSOA") 
    ::oHashFieldsHeader:set("cgc"                       ,"A1_CGC") 
    ::oHashFieldsHeader:set("citycode"                  ,"A1_COD_MUN") 
    ::oHashFieldsHeader:set("neighborhood"              ,"A1_BAIRRO") 
    ::oHashFieldsHeader:set("address"                   ,"A1_END") 
    ::oHashFieldsHeader:set("addresscomplement"         ,"A1_COMPLEM") 
    ::oHashFieldsHeader:set("zipcode"                   ,"A1_CEP") 
    ::oHashFieldsHeader:set("uf"                        ,"A1_EST") 
    ::oHashFieldsHeader:set("phone"                     ,"A1_TEL") 
    ::oHashFieldsHeader:set("email"                     ,"A1_EMAIL") 
    ::oHashFieldsHeader:set("contact"                   ,"A1_CONTATO")

return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvCustomersBase::setHeader(jCustomer as json) 
	Define um Cabeçalho considerando os campos mapeados
	@type method
	@version 12.1.2210
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 26/04/2023
	@param jCustomer, json, json com os dados do Cliente
/*/
//------------------------------------------------------------------------------
method setHeader(jCustomer as json) class pgvCustomersBase
    Local aFieldsHeader as array
    Local jHeader as json
    Local cField  as character
    Local nField as numeric
    Local xValue as variant

    jHeader :=jCustomer:getJsonObject("header")
    aFieldsHeader := jHeader:getNames()

    For nField := 1 To Len( aFieldsHeader )
        If ::oHashFieldsHeader:Get(aFieldsHeader[nField] , @cField)
            xValue := ConvertValue(jHeader:GetJsonObject(aFieldsHeader[nField]), GetSx3Cache(cField, "X3_TIPO"))
            
            If ::nOperation == MODEL_OPERATION_UPDATE 
                If cField == "A1_COD" .OR. cField == "A1_LOJA"
                    Loop
                EndIf
            Else
                If cField == "A1_COD"
                    ::cCustomerId := xValue
                EndIf
                If cField == "A1_LOJA"
                    ::cCustomerStore := xValue
                EndIf
            EndIf

            aAdd(::aHeader, {cField, xValue, Nil})
        EndIf
    Next

    If ::nOperation == MODEL_OPERATION_INSERT                                                                                                                                 
        If __cPgvBlql == '1' .OR. __cPgvBlql == '3'
            aAdd(::aHeader, {"A1_MSBLQL", '1', Nil})
        Else 
            aAdd(::aHeader, {"A1_MSBLQL", '2', Nil})
        EndIf
        If __cPgvRisc != ""
            aAdd(::aHeader, {"A1_RISCO", __cPgvRisc, Nil})
        EndIf
    EndIf 

    If ::nOperation == MODEL_OPERATION_INSERT
        aAdd(::aHeader, {"A1_VEND", getSellerFromFilter(.F., .F.), Nil})
    EndIf
    
    ::aHeader := FwVetByDic(::aHeader, "SA1", .F.)
	aSize(aFieldsHeader, 0)
	FwFreeObj(jHeader)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvCustomersBase::commitData() as logical
	Efetua a gravação do Cliente
	@type method
	@version 12.1.2210
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 26/04/2023
	@return lContinue, logical, retorna .T. em caso de sucesso
/*/
//------------------------------------------------------------------------------
method commitData() as logical class pgvCustomersBase
    Local aMsgErro   := {}   as array
    Local cError     := ''   as character
    Local lContinue  := .T.  as logical
    Local nField     := 1    as numeric
    Local oModel     := FWLoadModel('CRMA980') as object
    Local oModelSA1  as object

    oModel:SetOperation( ::nOperation )
	If oModel:Activate()
		If oModel:IsActive()
            lContinue := .T.
            oModelSA1 := oModel:GetModel("SA1MASTER")
            If oModel:getOperation() <> MODEL_OPERATION_DELETE
                For nField := 1 To Len(::aHeader)
                    If !oModelSA1:SetValue(::aHeader[nField, FIELD], ::aHeader[nField, VALUE])
                        lContinue := .F.
                        Exit
                    EndIf
                Next
            EndIf

            If !lContinue .Or. !( oModel:VldData() .And. oModel:CommitData() )
                lContinue := .F.
                cError := ""
                aMsgErro := oModel:GetErrorMessage()
                For nField := 1 To Len(aMsgErro)
                    If ValType(aMsgErro[nField]) == "C" .and. !Empty(aMsgErro[nField])
                        cError := convertStringToLine(StrTran( StrTran( aMsgErro[nField], "<", "" ), "-", "" ) + (" "), .f.)
                		::setErrorMessage(cError, .f.)
				        lContinue := .F.
                    EndIf
                Next
                aSize(aMsgErro, 0)
            Endif
        EndIf
        oModel:DeActivate()
		oModel:Destroy()
		FwFreeObj(oModelSA1)
    Endif
	FwFreeObj(oModel)
return lContinue
