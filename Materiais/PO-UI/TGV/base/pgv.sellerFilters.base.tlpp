#include 'tlpp-core.th'
#include 'tlpp-object.th'
#include 'FWMVCDEF.CH'
#include 'pgv.sellerfilters.base.ch'

#DEFINE FIELD 1
#DEFINE VALUE 2
#DEFINE FILTER_ISDELETED "isDeleted"
#DEFINE NOT_EDITABLE_FIELD "AQ4_VEND#AQ4_SCHEMA"

namespace totvs.protheus.backoffice.pgvSellerFilters
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase
	Classe responsavel pela gravação do filtro do Vendedor utilizando o padrão de
	dados do Portal Gestão de venddas
	@type class
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
/*/
//------------------------------------------------------------------------------
class pgvSellerFiltersBase from tgvbaseResourcesSalesManagement
	public data cUUID as character

	public method new() as object
	public method fromExecAuto() as logical
	public method commitData() as logical
	public method destroy()
	
	private method setHeader()
	private method setItems()
	private method setItem() as array

	protected method addMapFieldsHeader()
	protected method addMapFieldsItem()
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::new() as object
	Cria uma nova instancia da classe pgvSellerFiltersBase
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
	@return object, nova instancia da classe pgvSellerFiltersBase
/*/
//------------------------------------------------------------------------------
method new() as object class pgvSellerFiltersBase
	_Super:New( "AQ4", MODEL_OPERATION_INSERT)
return self

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::fromExecAuto(jFilter as json) as logical
	Cria a estrutura utilizada na gravação do filtro
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
	@param jFilter, json, Filtro do Vendendor
	@return logical, retorna verdadeiro se conseguir montar a estrutura do execauto
/*/
//------------------------------------------------------------------------------
method fromExecAuto(jFilter as json) as logical class pgvSellerFiltersBase

	::clean()
	If ::nOperation <> MODEL_OPERATION_DELETE
		::addMapFields()
		::setHeader(jFilter)
		::setItems(jFilter)
	Endif

return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::addMapFieldsHeader
	Adiciona um Mapa de campos utilizado no cabeçalho do filtro do vendedor (AQ4)
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
/*/
//------------------------------------------------------------------------------
method addMapFieldsHeader() class pgvSellerFiltersBase
	::oHashFieldsHeader := tHashMap():New()
	::oHashFieldsHeader:set("uuid"      , "AQ4_UUID")
	::oHashFieldsHeader:set("sellerid"  , "AQ4_VEND")
	::oHashFieldsHeader:set("schemaid"  , "AQ4_SCHEMA")
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::addMapFieldsItem
	Adiciona um Mapa de Campos utilizados nos itens do filtro do vendedor (AQ5)
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
/*/
//------------------------------------------------------------------------------
method addMapFieldsItem() class pgvSellerFiltersBase
	::oHashFieldsItem := tHashMap():New()
	::oHashFieldsItem:set("itemid"    , "AQ5_ITEM")
	::oHashFieldsItem:set("entityid"  , "AQ5_CODENT")
	::oHashFieldsItem:set("isDeleted" , FILTER_ISDELETED)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::setHeader(jItem as json) 
	Define um Cabeçalho do filtro considerando os campos mapeados
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
	@param jFilter, json, Filtro do Vendendor
/*/
//------------------------------------------------------------------------------
method setHeader(jFilter as json) class pgvSellerFiltersBase
	Local aFieldsHeader as array
	Local jHeader		as json
	Local nField		as integer
	Local cField		as character
	Local xValue		as variant

	jHeader := jFilter:getJsonObject("header")
	aFieldsHeader := jHeader:getNames()

	For nField := 1 To Len( aFieldsHeader )
		If ::oHashFieldsHeader:Get( aFieldsHeader[nField] , @cField )
			xValue := ConvertValue(jHeader:GetJsonObject(aFieldsHeader[nField]), GetSx3Cache(cField, "X3_TIPO"))
			If cField == "AQ4_UUID"
				If Empty(xValue)
					::SetOperation(MODEL_OPERATION_INSERT)
					Loop
				Else
					::cUUID := xValue
					Loop
				Endif
			Elseif cField $ NOT_EDITABLE_FIELD .and. ::nOperation <> MODEL_OPERATION_INSERT
				Loop
			Endif
			aAdd(::aHeader, {cField, xValue})
		Endif
	Next

	If Empty(::cUUID)
		::setOperation(MODEL_OPERATION_INSERT)
	Endif

	::aHeader := FwVetByDic(::aHeader, "AQ4", .F.)
	aSize(aFieldsHeader, 0)
	FwFreeObj(jHeader)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::setItems(jItem as json) 
	Define um item do filtro considerando os campos mapeados
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
	@param jFilter, json, Filtro do Vendendor
/*/
//------------------------------------------------------------------------------
method setItems(jFilter as Json) class pgvSellerFiltersBase
	Local aItems		as array
	Local aItem			as array
	Local aItemsClone   as array
	Local nItem			as integer
	local isDeleted		as logical

	aItems := jFilter:GetJsonObject("items")

	For nItem := 1 To Len(aItems)
		aItem := ::setItem(aItems[nItem])
		aAdd(::aItems, aClone(aItem))
		aSize(aItem, 0)
	Next

	aItemsClone := aClone(::aItems)
	::aItems := FwVetByDic(::aItems, "AQ5", .T.)

	If ::nOperation == MODEL_OPERATION_UPDATE
		For nItem := 1 to Len(::aItems)
			isDeleted := getValueByProperty(aItemsClone[nItem], FILTER_ISDELETED, .f.)
			aAdd(::aItems[nItem], {FILTER_ISDELETED	, isDeleted})
		Next
	EndIf

	aSize(aItemsClone, 0)
	aSize(aItems, 0)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::setItem(jItem as json) as array
	Define um Item do Filtro do Vendedor
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
	@param	jItem, json, Item do filtro do vendedor
	@return array, Item transformado em um Array de Campo e Valor
/*/
//------------------------------------------------------------------------------
method setItem(jItem as json) as array class pgvSellerFiltersBase
	Local aArea			:= FwGetArea() as array
	Local aFieldsItem 	as array
	Local aItem			:= {} as array
	Local cField		as character
	Local isDeleted		:= .F. as logical	
	Local nField		as integer

	aFieldsItem := jItem:GetNames()

	For nField := 1 To Len(aFieldsItem)
		If ::oHashFieldsItem:get( aFieldsItem[nField] , @cField )
			If cField == FILTER_ISDELETED .And. ::nOperation == MODEL_OPERATION_UPDATE
				isDeleted := jItem:GetJsonObject(aFieldsItem[nField])
				aAdd(aItem, {FILTER_ISDELETED, isDeleted})
			Else
				aAdd(aItem, {cField, ConvertValue(jItem:GetJsonObject(aFieldsItem[nField]), GetSx3Cache(cField, "X3_TIPO"))})
			Endif
		Endif
	Next

	FwRestArea(aArea)
	aSize(aFieldsItem, 0)
	aSize(aArea, 0)
return aItem

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::commitData() as logical
	Efetua a gravação do Filtro do Vendedor
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
	@return logical, se gravou o filtro retorna verdadeiro
/*/
//------------------------------------------------------------------------------
method commitData() as logical class pgvSellerFiltersBase
    local aMsgErro  := {} as array
    local cError    := '' as character
	local cItem		:= '0000' as character
	local lContinue := .f. as logical
    local nItem     as integer
    local nField    as integer
	Local oModel	:= FWLoadModel('PGVA005') as object
	Local oModelAQ4 as object
	Local oModelAQ5 as object
	Local isDeleted := .f. as logical
	Local isAddLine := .f. as logical

	oModel:SetOperation( ::nOperation )
	If oModel:Activate()
		If oModel:IsActive()
            lContinue := .t.
			oModelAQ4:= oModel:GetModel('AQ4MASTER')
			oModelAQ5:= oModel:GetModel('AQ5DETAIL')

			If oModel:GetOperation() <> MODEL_OPERATION_DELETE
                For nField := 1 To Len(::aHeader)
                    If !oModelAQ4:SetValue(::aHeader[nField, FIELD], ::aHeader[nField, VALUE])
                        lContinue := .F.
                        Exit
                    EndIf
                Next

                If lContinue
                    For nItem := 1 To Len(::aItems)
						isDeleted := getValueByProperty(::aItems[nItem], FILTER_ISDELETED, .f.)
						cItem := getValueByProperty(::aItems[nItem], 'AQ5_ITEM', Soma1(cItem))

						If !oModelAQ5:SeekLine({{"AQ5_ITEM", cItem}})
							If !isDeleted .or. oModel:GetOperation() == MODEL_OPERATION_INSERT
								isAddLine := .t.
							Endif
						Elseif oModel:GetOperation() == MODEL_OPERATION_INSERT
							::setErrorMessage(convertStringToLine(STR0002 + ' ' + cItem + ' ' + STR0003)) // "O Item xxxx já foi cadastrado para este filtro do vendedor"
							lContinue := .F.
						Endif

						If !isDeleted .and. lContinue
							If isAddLine
								oModelAQ5:AddLine()
							Endif
						
							For nField := 1 To Len(::aItems[nItem])
								If ::aItems[nItem, nField, FIELD] <> FILTER_ISDELETED .AND. !oModelAQ5:SetValue(::aItems[nItem, nField, FIELD], ::aItems[nItem, nField, VALUE])
									lContinue := .F.
									Exit
								EndIf
							Next
						Else
							oModelAQ5:DeleteLine()
						Endif

                        If !lContinue
                            Exit
                        Endif
                    Next
			    Endif
			EndIF

			If !lContinue .Or. !( oModel:VldData() .And. oModel:CommitData() )
                lContinue := .F.
                cError := ""
                aMsgErro := oModel:GetErrorMessage()
                For nItem := 1 To Len(aMsgErro)
                    If ValType(aMsgErro[nItem]) == "C" .and. !Empty(aMsgErro[nItem])
                        cError := convertStringToLine(StrTran( StrTran( aMsgErro[nItem], "<", "" ), "-", "" ) + (" "), .f.)
                		::setErrorMessage(cError, .f.)
                    EndIf
                Next

                aSize(aMsgErro, 0)
			Else
				If oModel:GetOperation() <> MODEL_OPERATION_DELETE
					::cUUID := AQ4->AQ4_UUID
				Endif
            Endif
        Endif

		oModel:Deactivate()
		oModel:Destroy()

		FwFreeObj(oModelAQ5)
		FwFreeObj(oModelAQ4)
    Endif
	FwFreeObj(oModel)
return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFiltersBase::destroy
	Elimina os dados da memoria do objeto pgvSellerFiltersBase
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
/*/
//------------------------------------------------------------------------------
method destroy() class pgvSellerFiltersBase
	::cError := ""
	::cUUID := ""
	
	If ::oHashFieldsHeader <> Nil 
		::oHashFieldsHeader:Clean()
		FwFreeObj(::oHashFieldsHeader)
	Endif

	If ::oHashFieldsItem <> Nil 
		::oHashFieldsItem:Clean()
		FwFreeObj(::oHashFieldsItem)
	Endif
	
	If !Empty(::aHeader)
		FwFreeObj(::aHeader)
		::aHeader := Nil
	Endif

	If !Empty(::aItems)
		FwFreeObj(::aItems)
		::aItems := Nil
	Endif
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} getValueByProperty
	Obter o valor de um propriedade especificado por parâmetro
	@type function
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 06/10/2022
	@param aItems, array, Array que será avaliado
	@param cProperty, character, Propriedade que será utilizada na busca
	@param defaultValue, variant, conteudo padrão caso a propriedade não seja localizada
	@return variant, valor da propriedade
/*/
//------------------------------------------------------------------------------
static function getValueByProperty(aItems as array, cProperty as character, defaultValue as variant) as variant
	Local nPosProperty := aScan(aItems, {|x| allTrim(x[1]) == cProperty}) as integer
return IIF (nPosProperty > 0, aItems[nPosProperty, 2], defaultValue )

	



