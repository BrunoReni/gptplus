#include "PROTHEUS.CH"
#include 'tlpp-core.th'

namespace totvs.protheus.backoffice.queueProcess

//------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess
	Disponibiliza os métodos para criacao de threads com a finalidade de 
    processar os registros incluídos em uma fila de processamento desenvolvida.
	@type class
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		05/09/2022
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
class queueProcess
    private data cGlobalVarPrefix           as character
    private data cIdThreads                 as character
    private data nMinimumThreads            as numeric
    private data nMaximumThreads            as numeric
    private data nIncrementThreads          as numeric
    private data cStartFunction             as character
    private data cExitFunction              as character
    private data cThreadFunction            as character
    private data cVarManualJobWorking       as character
    private data cSessionKey                as character
    private data nOrchestratorKey           as numeric
    private data nQuitKey                   as numeric
    private data nExecutorKey               as numeric
    private data nTimeoutThreads            as numeric
    private data cTimeoutOrchestratorThread as character
    private data cTimeoutExecutorThread     as character

    public  method new()                   constructor
    public  method hasThreadsWorking()     as logical
    public  method initManualJob()         as logical
    public  method finalizeManualJob()     as logical
    public  method executeExecutorThread() as logical
    public  method getGlobalVarPrefix()    as character
    public  method destroy()
    
    private method executeManualJob()          
    private method isOnLine()                  as logical
    private method executeOrchestratorThread() as logical
    private method quitThread()                as logical
    private method downThreads()
    private method rescueThreads()             as logical
    private method rescueOrchestratorThread()  as logical
    private method rescueExecutorThread()      as logical

    static  method setThreadStatus()       as character
    static  method getThreadStatus()       as character
    static  method delThreadStatus()       as logical

    static  method setLastHello()          as character
    static  method getLastHello()          as character
    static  method delLastHello()          as logical

endClass

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::new() as Object
	Obtem uma nova instancia da classe queueProcess
	@type		method
    @sample		queueProcess:new()
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@param		cGlobalVarPrefix	       , character , Prefixo das variaveis globais
    @param      cIdThreads                 , character , Id das threads criadas para o processamento da fila
    @param      nMinimumThreads            , numeric   , quantidade mínima de threads abertas para processamento
    @param      nMaximumThreads            , numeric   , quantidade máxima de threads abertas para processamento
    @param      nIncrementThreads          , numeric   , quantidade de threads a serem criadas ate chegar no maximo
    @param      cStartFunction             , character , funcao a ser executada ao iniciar cada thread
    @param      cExitFunction              , character , funcao a ser executada ao finalizar cada thread
    @param      cThreadFunction            , character , funcao a ser executada quando a thread for chamada
    @param      nOrchestratorKey           , numeric   , chave a ser informada para a thread chamada por ipcGo
                                                        indicando que a thread sera a orquestradora
    @param      nQuitKey                   , numeric   , chave a ser informada para a thread chamada por ipcGo
                                                        indicando que a thread devera ser encerrada
    @param      nExecutorKey               , numeric   , chave a ser informada para a thread chamada por ipcGo
                                                        indicando que a thread sera a executora dos registros
                                                        da fila
    @param      nTimeoutThreads            , character , Tempo em segundos de timeout das threads ociosas
    @param      cTimeoutOrchestratorThread , character , timeout para resgatar threads orquestradoras travadas
    @param      cTimeoutExecutorThread     , character , timeout para resgatar threads executoras travadas
	@since		05/09/2022
	@return		object	, Nova instancia da classe queueProcess
/*/
//----------------------------------------------------------------------------------------------------
method new( cGlobalVarPrefix           as character, ;
            cIdThreads                 as character, ;
            nMinimumThreads            as numeric  , ;
            nMaximumThreads            as numeric  , ;
            nIncrementThreads          as numeric  , ;
            cStartFunction             as character, ;
            cExitFunction              as character, ;
            cThreadFunction            as character, ;
            nOrchestratorKey           as numeric  , ;
            nQuitKey                   as numeric  , ;
            nExecutorKey               as numeric  , ;
            nTimeoutThreads            as numeric  , ;
            cTimeoutOrchestratorThread as character, ;
            cTimeoutExecutorThread     as character  ;
        ) class queueProcess
    
    default nMinimumThreads            := 2
    default nMaximumThreads            := 10
    default nIncrementThreads          := 2
    default nOrchestratorKey           := "ORCHESTRATOR"
    default nQuitKey                   := "QUIT"
    default nExecutorKey               := "EXECUTOR"
    default cTimeoutOrchestratorThread := "00:10:00"
    default cTimeoutExecutorThread     := "00:05:30"

    ::cGlobalVarPrefix           := cGlobalVarPrefix
    ::cIdThreads                 := cIdThreads
    ::nMinimumThreads            := nMinimumThreads
    ::nMaximumThreads            := nMaximumThreads
    ::nIncrementThreads          := nIncrementThreads
    ::cStartFunction             := cStartFunction
    ::cExitFunction              := cExitFunction
    ::cThreadFunction            := cThreadFunction
    ::nOrchestratorKey           := nOrchestratorKey
    ::nQuitKey                   := nQuitKey
    ::nExecutorKey               := nExecutorKey
    ::nTimeoutThreads            := nTimeoutThreads
    ::cTimeoutOrchestratorThread := cTimeoutOrchestratorThread
    ::cTimeoutExecutorThread     := cTimeoutExecutorThread

    ::cVarManualJobWorking := ::cGlobalVarPrefix + "MJWorking"
    ::cSessionKey          := cEmpAnt+CHR(255)+cFilAnt+CHR(255)

return Self

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::isOnline() as Logical
	Verifica e informa se o Manual Job está online
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		05/09/2022
    @param      lRescueThreads , Logical, diz se deve realizar a verificacao e recuperacao das threads
	@return		lIsOnline	  , Logical, indica se o Manual Job está online ou não
/*/
//----------------------------------------------------------------------------------------------------
method isOnline(lRescueThreads as logical) as logical class queueProcess

    Local lIsOnline        as logical
	Local cManualJobStatus as character

    default lRescueThreads := .F.

    cManualJobStatus := ""

	// manualJobStatus == ""  ===>>> significa ManualJob nao ativo, pois com a variavel global nao criada o GetGlbValue retorna ""
	// manualJobStatus == "1" ===>>> significa ManualJob Ativo
	// manualJobStatus == "0" ===>>> significa ManualJob em processo de fechamento de threads por timeout
	while (((cManualJobStatus := GetGlbValue(::cVarManualJobWorking)) == "0"))
        // Se estiver em processo de fechamento das threads, fica esperando finalizar para iniciar novas threads
		sleep(2000)
	end
	
    lIsOnline := (cManualJobStatus == "1")

    if lIsOnline .and. lRescueThreads
        ::rescueThreads()
    endIf

return lIsOnline

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::executeManualJob()
	Executa a função manualJob com os atributos da classe que foram informados e inicializa as threads
    do processamento da fila
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		06/09/2022
	@return		Nil	
/*/
//----------------------------------------------------------------------------------------------------
method executeManualJob() class queueProcess
    manualJob(	;
                ::cIdThreads        /*Nome do indentificador do job*/,;
                GetEnvServer()      /*Ambiente em que as threads serao criadas.*/,;
                "IPC"               /*Tipo do job. Mantenha como Ipc*/,;
                ::cStartFunction    /*Função que será chamada quando uma nova thread subir*/,;
                ::cThreadFunction   /*Função que será chamada toda vez que vc mandar um ipcgo para ela*/,;
                ::cExitFunction     /*Função que será invocada quando a thread cair pelo timeout dela*/,;
                ::cSessionKey       /*Não alterar. É o SessionKey*/,;
                60                  /*Tempo em segundos que a thread será reavaliada e irá cair.*/,;
                ::nMinimumThreads   /*Minimo de threads inicias. Vamos deixar 0 para que quando cair por timeout ele acabe*/,;
                ::nMaximumThreads   /*máximo de threads que ele vai subir*/,;
                ::nMinimumThreads   /*mínimo de threads livres*/,;
                ::nIncrementThreads /*incremento de threads livres*/;
            )
return nil

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::initManualJob()
	Verificar se o Manual Job está online, e caso nao esteja devera torna-lo on-line
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		06/09/2022
	@return		initiated, logical, indica se o manual foi iniciado ou nao, caso ja esteja iniciado	
/*/
//----------------------------------------------------------------------------------------------------
method initManualJob() as logical class queueProcess

    Local lInitiated as logical

    lInitiated := ::isOnline(.T.)
    if !lInitiated
        ::executeManualJob()
        putGlbValue(::cVarManualJobWorking, "1")
        ::executeOrchestratorThread()
        lInitiated := .T.
    endIf

return lInitiated

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::finalizeManualJob()
	Verificar se o Manual Job está online, e caso nao esteja, ira deixa-lo off-line
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		06/09/2022
	@return		lFinalized, logical, indica se o manualJob foi finalizado ou nao, caso nao esteja 
                                     inicializado
/*/
//----------------------------------------------------------------------------------------------------
method finalizeManualJob() as logical class queueProcess

    local lFinalized as logical
    local lInitiated as logical

    lInitiated := ::isOnline()
    lFinalized := .F.
    if lInitiated
        ::nMinimumThreads   := 0
        ::nMaximumThreads   := 0
        ::nMinimumThreads   := 0
        ::nIncrementThreads := 0
        ::executeManualJob()
        putGlbValue(::cVarManualJobWorking, "2")
        ::downThreads()
        clearGlbValue(::cVarManualJobWorking)
        lFinalized := .T.
    endIf

return lFinalized

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::executeOrchestratorThread()
	Solicita a execucao de uma thread orquestradora do processamento da fila
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		06/09/2022
	@return		lExecuting, logical, indica se a thread pode ser lancada e ficou executando
/*/
//----------------------------------------------------------------------------------------------------
method executeOrchestratorThread() as logical class queueProcess
    Local lExecuting as logical
    lExecuting := ipcGo( ::cIdThreads      /*id das threads do ManualJob*/                                                                 , ;
                        cEmpAnt            /*Empresa*/                                                                                     , ;
                        cFilAnt            /*Filial*/                                                                                      , ;
                        ::nOrchestratorKey /*Tipo de execucao da thread de acordo com os atributos orchestratorKey, quitKey e executorkey*/, ;
                        nil                /*Id do registro da fila a ser executado*/                                                      , ;
                        ::cGlobalVarPrefix /*prefixo das variaveis globais utilizados na instancia desta classe*/                          , ;
                        ::nTimeoutThreads  /*Tempo de timeout das threads*/)
return lExecuting

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::quitThread()
	Solicita a finalização de uma thread executora do processamento da fila
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		06/09/2022
	@return		lExecuting, logical, indica se a thread pode ser lancada e ficou executando a sua 
                                    respectiva finalizacao
/*/
//----------------------------------------------------------------------------------------------------
method quitThread() as logical class queueProcess
    Local lExecuting as logical
    lExecuting := ipcGo( ::cIdThreads       /*id das threads do ManualJob*/                                                                 , ;
                        nil                 /*Empresa*/                                                                                     , ;
                        nil                 /*Filial*/                                                                                      , ;
                        ::nQuitKey          /*Tipo de execucao da thread de acordo com os atributos orchestratorKey, quitKey e executorkey*/, ;
                        nil                 /*Id do registro da fila a ser executado*/                                                      , ;
                        ::cGlobalVarPrefix  /*prefixo das variaveis globais utilizados na instancia desta classe*/                          , ;
                        nil                 /*Tempo de timeout das threads*/)
return lExecuting

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::executeExecutorThread()
	Solicita a execucao da thread executora do processamento da fila para o id informado
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param      cIdItemQueue , character, id do registro da fila a ser executado 
	@since		06/09/2022
	@return		lExecuting   , logical  , indica se a thread pode ser lancada e ficou executando
/*/
//----------------------------------------------------------------------------------------------------
method executeExecutorThread(cIdItemQueue as character) as logical class queueProcess
    Local lExecuting as logical
    lExecuting := ipcGo( ::cIdThreads      /*id das threads do ManualJob*/                                                                 , ;
                        cEmpAnt            /*Empresa*/                                                                                     , ;
                        cFilAnt            /*Filial*/                                                                                      , ;
                        ::nExecutorKey     /*Tipo de execucao da thread de acordo com os atributos orchestratorKey, quitKey e executorkey*/, ;
                        cIdItemQueue       /*Id do registro da fila a ser executado*/                                                      , ;
                        ::cGlobalVarPrefix /*prefixo das variaveis globais utilizados na instancia desta classe*/                          , ;
                        nil                /*Tempo de timeout das threads*/)
return lExecuting

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::downThreads()
	Realiza a finalização das threads ativas abertas pelo ManualJob
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		06/09/2022
	@return		Nil
/*/
//----------------------------------------------------------------------------------------------------
method downThreads() class queueProcess

    Local lLoop           as logical
	Local nCounterThreads as numeric
	Local nThreadOfList   as integer
	Local aThreadsList    as array
	Local nQtThreads      as integer
	Local cThreadStatus   as character
	Local cIdThreadOfList as character
    Local cIdThreads      as character

	putGlbValue(::cVarManualJobWorking, "0")

    lLoop := .T.
	while lLoop
		aThreadsList    := GetUserInfoArray()
		nQtThreads      := Len(aThreadsList)
		nCounterThreads := 0
        cIdThreads      := UPPER(::cIdThreads)

		for nThreadOfList := 1 to nQtThreads
			if UPPER(aThreadsList[nThreadOfList][1]) == cIdThreads

                cIdThreadOfList := cValToChar(aThreadsList[nThreadOfList][3])
                cThreadStatus := queueProcess():getThreadStatus(::cGlobalVarPrefix, cIdThreadOfList)
				if !(cThreadStatus == "2")
					nCounterThreads++
				endIf

				if cThreadStatus == "0" .or. empty(cThreadStatus)
					::quitThread()
				endIf
			endIf
		next

		FWFreeObj(aThreadsList)
		if nCounterThreads == 0
			lLoop := .F.
		endIf
		sleep(1000)
	endDo

return nil

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::hasThreadsWorking()
	Verifica se existem threads executando algum item da fila
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		09/09/2022
	@return		lHasThreadsWorking, logical, indica se ha threads processando itens da fila ou nao
/*/
//----------------------------------------------------------------------------------------------------
method hasThreadsWorking() as logical class queueProcess

    Local lHasThreadsWorking as logical

    Local nThreadOfList      as integer
	Local aThreadsList       as array
	Local cThreadStatus      as character
	Local cIdThreadOfList    as character
    Local nQtThreads         as integer
    Local cIdThreads         as character

    lHasThreadsWorking := .F.
	aThreadsList       := GetUserInfoArray()
    nQtThreads         := len(aThreadsList)
    cIdThreads         := UPPER(::cIdThreads)
    

	for nThreadOfList := 1 to nQtThreads
		If aThreadsList[nThreadOfList][1] == cIdThreads // semaforo

            cIdThreadOfList := cValToChar(aThreadsList[nThreadOfList][3])
            cThreadStatus := queueProcess():getThreadStatus(::cGlobalVarPrefix, cIdThreadOfList)

			If cThreadStatus == "1"
				lHasThreadsWorking := .T.
				Exit
			EndIf
		EndIf
	next

	FwFreeObj(aThreadsList)

return lHasThreadsWorking

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::setThreadStatus()
	Realiza o preenchimento do status da thread que esta sendo executada no momento
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param      cGlobalVarPrefix, character, prefixo da variavel global que armazena o status da thread
    @param      cThreadStatus   , character, status que deve ser atribuido na variavel global da thread
	@since		14/09/2022
	@return		cThreadStatus, character, novo status que foi preenchido na variavel global da thread
/*/
//----------------------------------------------------------------------------------------------------
method setThreadStatus( cGlobalVarPrefix as character, ;
                        cThreadStatus as character     ) as character class queueProcess

    Local cVarStatus    as character

    cVarStatus := cGlobalVarPrefix + cValToChar(ThreadID())
    PutGlbValue(cVarStatus, cThreadStatus)

return cThreadStatus

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::getThreadStatus()
	Informa o status atual da thread que esta sendo executada no momento
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param      cGlobalVarPrefix, character, prefixo da variavel global que armazena o status da thread
    @param      cThreadId       , character, id da thread que tera o status registrado na memoria
	@since		14/09/2022
	@return		cThreadStatus   , character, status atual da thread que esta sendo executada no momento
/*/
//----------------------------------------------------------------------------------------------------
method getThreadStatus( cGlobalVarPrefix as character, ;
                        cThreadId        as character  ) as character class queueProcess

    Local cVarStatus    as character
    Local cThreadStatus as character

    default cThreadId := cValToChar(ThreadID())

    cVarStatus    := cGlobalVarPrefix + cThreadId
    cThreadStatus  := GetGlbValue(cVarStatus)

return cThreadStatus

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::delThreadStatus()
	Apaga a variavel que armazena o status atual da thread que esta sendo executada no momento
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param      cGlobalVarPrefix, character, prefixo da variavel global que armazena o status da thread
	@since		14/09/2022
	@return		lDeleted, logical, indica se a variavel foi excluida da memoria ou nao
/*/
//----------------------------------------------------------------------------------------------------
method delThreadStatus(cGlobalVarPrefix as character) as logical class queueProcess

    Local cVarStatus    as character
    Local lDeleted      as logical

    cVarStatus := cGlobalVarPrefix + cValToChar(ThreadID())
    lDeleted   := (ClearGlbValue(cVarStatus) > 0)

return lDeleted

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::getGlobalVarPrefix()
	Informa o conteudo do atributo cGlobalVarPrefix
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		14/09/2022
	@return		cGlobalVarPrefix, character, prefixo das variaveis globais do objeto desta classe
/*/
//----------------------------------------------------------------------------------------------------
method getGlobalVarPrefix() as character class queueProcess
return ::cGlobalVarPrefix

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::rescueThreads()
	Realiza a chamada do metodo para recuperar da thread orquestradora caso tenha caido e a chamada do
    metodo que finaliza as threads executoras que estiverem travadas ou processando por mais do que 
    1 hora
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		19/09/2022
	@return		lRescueNeeded, logical, indica se houve a necessidade de recuperacao das threads ou nao
/*/
//----------------------------------------------------------------------------------------------------
method rescueThreads() as logical class queueProcess
    local lRescueNeeded           as logical
    local lIsOrchestratorRunning  as logical
    Local nThreadOfList           as integer
	Local aThreadsList            as array
	Local cThreadStatus           as character
	Local cIdThreadOfList         as character
    Local nQtThreads              as integer
    Local aOrchestratorThreadData as array
    Local lRescued                as logical
    Local cIdThreads              as character

    lRescueNeeded          := .F.
    lIsOrchestratorRunning := .F.
	aThreadsList           := GetUserInfoArray()
    nQtThreads             := len(aThreadsList)
    cIdThreads             := UPPER(::cIdThreads)

	for nThreadOfList := 1 to nQtThreads
		if aThreadsList[nThreadOfList][1] == cIdThreads // semaforo

            cIdThreadOfList := cValToChar(aThreadsList[nThreadOfList][3])
            cThreadStatus := queueProcess():getThreadStatus(::cGlobalVarPrefix, cIdThreadOfList)

			if cThreadStatus == "1"
                lRescued := ::rescueExecutorThread(aThreadsList[nThreadOfList])
                if lRescued
                    lRescueNeeded := .T.
                endIf
			endIf

            if cThreadStatus == "2"
                lIsOrchestratorRunning  := .T.
                aOrchestratorThreadData := aThreadsList[nThreadOfList]
            endIf
            
		endIf
	next

    if !lIsOrchestratorRunning
        while !::executeOrchestratorThread()
        end Do
        lRescueNeeded := .T.
    else
        lRescued := ::rescueOrchestratorThread(aOrchestratorThreadData)
        if lRescued
            lRescueNeeded := .T.
        endIf
    endIf

	FwFreeObj(aThreadsList)

return lRescueNeeded

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::rescueOrchestratorThread()
	Realiza a recuperacao do travamento da thread executora 
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		19/09/2022
    @param      aOrchestratorThreadData , array  , dados da thread a ser verificada
	@return		lRescueNeeded           , logical, indica se houve a necessidade de recuperacao da thread
                                                  ou nao
/*/
//----------------------------------------------------------------------------------------------------
method rescueOrchestratorThread(aOrchestratorThreadData as array) as logical class queueProcess
    Local lRescueNeeded as logical
    Local cUserName     as character
    Local cComputerName as character
    Local cThreadId     as character
    Local cServerName   as character
    Local cLastHello    as character

    lRescueNeed := .F.

    cThreadId  := aOrchestratorThreadData[3]
    cLastHello := queueProcess():getLastHello(::cGlobalVarPrefix, AllTrim(cValToChar(cThreadId)))

    if (ElapTime(cLastHello, Time()) > ::cTimeoutOrchestratorThread) .Or. Empty(cLastHello)
        cUserName     := aOrchestratorThreadData[1]
        cComputerName := aOrchestratorThreadData[2]
        cServerName    := aOrchestratorThreadData[4]
        killUser(cUserName, cComputerName, cThreadId, cServerName)
        while !::executeOrchestratorThread()
        end Do
        lRescueNeeded := .T.
    endIf

    FWFreeObj(aOrchestratorThreadData)
return lRescueNeeded

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::rescueExecutorThread()
	Realiza a verificacao do travamento da thread executora 
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		19/09/2022
    @param      aExecutorThreadData , array  , dados da thread a ser verificada
	@return		lRescueNeeded       , logical, indica se houve a necessidade de recuperacao da thread
                                     ou nao
/*/
//----------------------------------------------------------------------------------------------------
method rescueExecutorThread(aExecutorThreadData as array) as logical class queueProcess
    Local lRescueNeeded as logical
    Local cUserName     as character
    Local cComputerName as character
    Local cThreadId     as character
    Local cServerName   as character
    Local cLastHello    as character

    lRescueNeed := .F.

    cThreadId  := aExecutorThreadData[3]
    cLastHello := queueProcess():getLastHello(::cGlobalVarPrefix, AllTrim(cValToChar(cThreadId)))
    
    if (ElapTime(cLastHello, Time()) > ::cTimeoutExecutorThread)
        cUserName     := aExecutorThreadData[1]
        cComputerName := aExecutorThreadData[2]
        cServerName   := aExecutorThreadData[4]
        killUser(cUserName, cComputerName, cThreadId, cServerName)
        lRescueNeeded := .T.
    endIf

    FWFreeObj(aExecutorThreadData)
return lRescueNeeded

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::setLastHello()
	Realiza o preenchimento da hora do ultimo check de processamento da thread
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param      cGlobalVarPrefix, character, prefixo da variavel global que armazena a hora do ultimo
                                            check de processamento da thread
	@since		19/09/2022
	@return		threadStatus, character, nova hora do ultimo check de processamento da thread
/*/
//----------------------------------------------------------------------------------------------------
method setLastHello(cGlobalVarPrefix as character) as character class queueProcess

    Local cVarStatus as character
    Local cLastHello as character

    cVarStatus := cGlobalVarPrefix + cValToChar(ThreadID()) + "LastHello"
    cLastHello := AllTrim(cValToChar(time()))
    PutGlbValue(cVarStatus, cLastHello)

return cLastHello

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::getLastHello()
	Informa a hora do ultimo check de processamento da thread
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param      cGlobalVarPrefix, character, prefixo da variavel global que armazena a hora do ultimo
                                            check de processamento da thread
    @param      cThreadId       , character, id da thread que deve ter o ultimo check a ser retornado
	@since		19/09/2022
	@return		cLastHello      , character, a hora do ultimo check de processamento da thread
/*/
//----------------------------------------------------------------------------------------------------
method getLastHello(    cGlobalVarPrefix as character, ;
                        cThreadId        as character) as character class queueProcess

    Local cVarLastHello as character
    Local cLastHello    as character

    default cThreadId := cValToChar(ThreadID())

    cVarLastHello := cGlobalVarPrefix + cThreadId + "LastHello"
    cLastHello    := GetGlbValue(cVarLastHello)

return cLastHello

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} queueProcess::delLastHello()
	Apaga a variavel que armazena  a hora do ultimo check de processamento da thread
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param      cGlobalVarPrefix, character, prefixo da variavel global que armazena a hora do ultimo
                                            check de processamento da thread
	@since		19/09/2022
	@return		lDeleted, logical, indica se a variavel foi excluida da memoria ou nao
/*/
//----------------------------------------------------------------------------------------------------
method delLastHello(cGlobalVarPrefix as character) as logical class queueProcess

    Local cVarLastHello as character
    Local lDeleted      as logical

    cVarLastHello := cGlobalVarPrefix + cValToChar(ThreadID()) + "LastHello"
    lDeleted   := (ClearGlbValue(cVarLastHello) > 0)

return lDeleted
