
#include "PROTHEUS.CH"
#include 'tlpp-core.th'

#DEFINE QUITKEY 3
#DEFINE QUEUEPROCESS 0

using namespace totvs.protheus.backoffice.salesQueueProcess
using namespace totvs.protheus.backoffice.queueProcess

//----------------------------------------------------------------------------------------------------
/*/	{Protheus.doc} salesThreadQueueStart
	Função para iniciar o ambiente pela empresa/filial informada na chamada da MANUALJOB
	@author Totvs
	@since 14/09/2023
	@version 12.1.33
	@param  cParam , character, Codigo da empresa e filial concatenadas por chr(255)
	@return .T.    , logic    , Sempre verdadeiro
/*/
//----------------------------------------------------------------------------------------------------
function salesThreadQueueStart(cParam as character)
	Local aParam   := STRTOKARR( cParam, chr(255) )
	Local cLEmp    := aParam[1]
	Local cLFil    := aParam[2]	

	RpcSetType(3)
	RpcSetEnv(cLEmp, cLFil, , , 'FAT')
Return .T.

//----------------------------------------------------------------------------------------------------
/*/	{Protheus.doc} salesThreadQueueExit - Função ao encerrar a thread da chamada da MANUALJOB
	@author Totvs
	@since 14/09/2022
	@version 12.1.33
	@return logico - sempre verdadeiro
/*/
//----------------------------------------------------------------------------------------------------
Function salesThreadQueueExit()
Return .T.

//--------------------------------------------------------------------------------------------------------------------
/*/	{Protheus.doc} salesThreadQueueFunction 
	Executa a thread de orchestração das filas dos registros de venda offline ou o processamento de um item da fila
	ou finaliza as threads
	@author Totvs
	@since 14/09/2022
	@param cEmp            , character, Codigo da Empresa em que a thread sera executada
	@param cFil            , character, Codigo da Filial em que a thread sera executada
	@param nTypeExecution  , numeric  , Tipo da execução thread que pode ser ORQHESTRAR, EXECUTAR ou FINALIZAR
	@param cKeyItemQueue   , character, Chave de identificacao do item da fila a ser processado
	@param cGlobalVarPrefix, character, Prefixo das variaveis globais utilizadas pelos objetos da classe queueProcess
	@param nTimeoutThreads , numeric  , Tempo em segundos de timeout das threads ociosas
	@version 1.0
	@return Sempre nil
/*/
//--------------------------------------------------------------------------------------------------------------------
function salesThreadQueueFunction(	cEmp             as character, ;
									cFil             as character, ;
									nTypeExecution   as numeric  , ;
									cKeyItemQueue    as character, ;
									cGlobalVarPrefix as character, ;
									nTimeoutThreads  as numeric    )
	Local oQueueProcessObject as object
	Local oQueueObjectFactory as object

	If nTypeExecution == QUITKEY
		queueProcess():delThreadStatus(cGlobalVarPrefix)
		QUIT
	Else
		// Deixar posicionado na filial informada nos parametros para realizar a execucao
		cFilAnt := cFil
		// Definir pelo objeto abaixo o tipo da thread -> Orquestradora ou Executora
		oQueueObjectFactory := salesQueueObjectsFactory():new(	;
																	nTypeExecution   , ;
																	cKeyItemQueue    , ;
																	cGlobalVarPrefix , ;
																	nTimeoutThreads    ;																	
																)
		oQueueProcessObject := oQueueObjectFactory:create()

		oQueueObjectFactory:destroy()
		FreeObj(oQueueObjectFactory)

		oQueueProcessObject:execute()
		FreeObj(oQueueProcessObject)
	EndIf

return nil

//----------------------------------------------------------------------------------------------------
/*/	{Protheus.doc} salesOfflineExecute 
	Funcao que inicia o processamento da fila de processamento off-line caso ela nao esteja no ar
	@author Totvs
	@since 14/09/2022
	@version 1.0
	@return Sempre nil
/*/
//----------------------------------------------------------------------------------------------------
function salesOfflineExecute()
	Local oQueueProcess       as object
	Local oQueueObjectFactory as object

	oQueueObjectFactory := salesQueueObjectsFactory():new(QUEUEPROCESS)
	oQueueProcess       := oQueueObjectFactory:create()

	oQueueObjectFactory:destroy()
	freeObj(oQueueObjectFactory)

	oQueueProcess:initManualJob()

	freeObj(oQueueProcess)
return nil
