#include "PROTHEUS.CH"
#include 'tlpp-core.th'

namespace totvs.protheus.backoffice.salesQueueProcess
using namespace totvs.protheus.backoffice.queueProcess

#DEFINE QUEUEPROCESS 0
#DEFINE ORCHESTRATOR 1
#DEFINE EXECUTOR     2
#DEFINE QUITKEY      3

//------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueObjectsFactory
	Classe responsavel pela criacao das classes necessarias para o processamento
	da fila de integracoes das vendas off-line do PGV
	@type class
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		08/09/2022
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
class salesQueueObjectsFactory
    private data nType            as numeric
    private data aMyTypes         as array
	private data cIdItemQueue     as character
	private data cGlobalVarPrefix as character 
	private data nTimeoutThreads  as numeric

    public  method new()         constructor
    public  method create()      as object
    public  method destroy()    
    private method isValidType() as logical
    static  method getMyTypes()  as array
endClass

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueObjectsFactory::new() as Object
	Obtem uma nova instancia da classe salesQueueObjectsFactory
	@type		method
	@sample		salesQueueObjectsFactory:new()
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@param		nType	        , character , Tipo da classe a ser criada
	@param      cIdItemQueue    , character , id do registro da fila a ser processado
	@param      cGlobalVarPrefix, character , Prefixo das variaveis globais
	@param      nTimeoutThreads , numeric   , Tempo em segundos de timeout das threads ociosas
	@since		08/09/2022
	@return		object	, Nova instancia da classe salesQueueObjectsFactory
/*/
//----------------------------------------------------------------------------------------------------
method new(	nType            as numeric  , ;
			cIdItemQueue     as character, ;  			  
			cGlobalVarPrefix as character, ;
			nTimeoutThreads  as numeric    ) class salesQueueObjectsFactory
    
    if (::isValidType(nType))
        ::nType := nType
    endIf

	::cIdItemQueue     := cIdItemQueue    
	::nTimeoutThreads  := nTimeoutThreads 
	::cGlobalVarPrefix := cGlobalVarPrefix

return Self

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueObjectsFactory::getMyTypes() as Object
	Obtem uma lista dos tipo possiveis de serem utilizados para a criacao dos objetos por meio desta 
	classe
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		08/09/2022
	@return		aListTypes, array	, Lista com as opcoes validas de tipos para os objetos criados por
	esta classe
/*/
//----------------------------------------------------------------------------------------------------
method getMyTypes() as array class salesQueueObjectsFactory
    
    Local aListTypes := {} as array

    AAdd(aListTypes, {"ORCHESTRATOR", ORCHESTRATOR})
    AAdd(aListTypes, {"EXECUTOR"    , EXECUTOR})
	AAdd(aListTypes, {"QUEUEPROCESS", QUEUEPROCESS})

return aListTypes

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueObjectsFactory::isValidType() as Object
	Valida se o tipo informado esta entre os itens da lista dos tipo possiveis de serem utilizados 
	para os objetos a serem criados por meio desta classe
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
    @param		nType	, character	, Tipo da classe a ser validado
	@since		08/09/2022
	@return		validType, logical	, Indica se o tipo informado é válido para a criação do objeto
/*/
//----------------------------------------------------------------------------------------------------
method isValidType(nType as numeric) as logical class salesQueueObjectsFactory

    Local lIsValidType as logical

    if empty(::aMyTypes)
        ::aMyTypes := salesQueueObjectsFactory():getMyTypes()
    endIf

    lIsValidType := (aScan(::aMyTypes, {| aMyType | aMyType[2] == nType}) > 0)

return lIsValidType

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueObjectsFactory::create() as Object
	Instancia o objeto da classe conforme o atributo do tipo
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		08/09/2022
	@return		oQueueObject, object	, instancia do objeto referente ao tipo do atributo type
/*/
//----------------------------------------------------------------------------------------------------
method create() as object class salesQueueObjectsFactory

    Local oQueueObject            as object
	Local oQueueProcess           as object
	Local cIdThreadsAndGlobalVars as character

    do case
        case ::nType == ORCHESTRATOR
			// Modificar o atributo nType para executar o metodo create e criar uma instancia do queueProcess
			// Para ser usado pelo objeto da classe salesQueueOrchestrator
			::nType := QUEUEPROCESS
			oQueueProcess := ::create()
            oQueueObject := salesQueueOrchestrator():new(::nTimeoutThreads, oQueueProcess)
			::nType := ORCHESTRATOR
        case ::nType == EXECUTOR
            oQueueObject := salesQueueExecutor():new(	::cIdItemQueue, ;
														::cGlobalVarPrefix)
		case ::nType == QUEUEPROCESS
			cIdThreadsAndGlobalVars := "SALESQUEUE" + cEmpAnt
			oQueueObject := queueProcess():new(cIdThreadsAndGlobalVars    /*cGlobalVarPrefix  as character*/, ;
												cIdThreadsAndGlobalVars    /*idThreads        as character*/, ;
												nil                        /*minimumThreads   as numeric  */, ;
												nil                        /*maximumThreads   as numeric  */, ;
												nil                        /*incrementThreads as numeric  */, ;
												"salesThreadQueueStart"    /*startFunction    as character*/, ;
												"salesThreadQueueExit"     /*exitFunction     as character*/, ;
												"salesThreadQueueFunction" /*threadFunction   as character*/, ;
												ORCHESTRATOR               /*orchestratorKey  as character*/, ;
												QUITKEY                    /*quitKey          as character*/, ;
												EXECUTOR                   /*executorKey      as character*/, ;
												60                         /*nTimeoutThreads   as numeric  */  ;
											)
    endCase

return oQueueObject

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueObjectsFactory::destroy()
	Realiza a finalização da existência da instância do objeto
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		14/09/2022
	@return		Nil
/*/
//----------------------------------------------------------------------------------------------------
method destroy() class salesQueueObjectsFactory
	FWFreeObj(::aMyTypes)
return nil
