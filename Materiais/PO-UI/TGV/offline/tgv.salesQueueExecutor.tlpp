#include "PROTHEUS.CH"
#include 'tlpp-core.th'
#include 'tgv.salesQueueExecutor.ch'

namespace totvs.protheus.backoffice.salesQueueProcess
using namespace totvs.protheus.backoffice.queueProcess
using namespace tgv.util

#DEFINE AGUARDANDO  "0"
#DEFINE PROCESSANDO "1"
#DEFINE SUCESSO     "2"
#DEFINE ERROR       "3"

//------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueExecutor
	Realiza o processamento de um item da fila de registros envidados pelo
    PGV off-line
	@type class
	@sample		salesQueueExecutor:new()
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		14/09/2022
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
class salesQueueExecutor
    private data cIdQueueItem           as character
	private data cGlobalVarPrefix       as character

    public  method new()               constructor
    public  method execute() 
    public  method destroy()
endClass

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueExecutor::new() as Object
	Obtem uma nova instancia da classe salesQueueExecutor
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@param		cIdQueueItem	    , character	, chave que identifica o item da fila a ser processado
	@param		cGlobalVarPrefix	, character , Prefixo das variaveis globais
	@since		14/09/2022
	@return		object	, Nova instancia da classe salesQueueExecutor
/*/
//----------------------------------------------------------------------------------------------------
method new(	cIdQueueItem     as character, ;
			cGlobalVarPrefix as character  ) class salesQueueExecutor
    ::cIdQueueItem     := cIdQueueItem
	::cGlobalVarPrefix := cGlobalVarPrefix
return Self

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} salesQueueExecutor::execute()
	Inicia o processamento do item da fila informado para este objeto
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		14/09/2022
	@return		nil
/*/
//----------------------------------------------------------------------------------------------------
method execute() class salesQueueExecutor
    Local aArea			:= FWGetArea() as array
	Local aAreaA1T		:= A1T->(FWGetArea()) as array
	Local cError		as character
	Local cErrorParse	as character
	Local jBody			as json
	Local lContinua		:= .t. as logical
	Local nOperation	as numeric
	Local cSource		as character
	Local oSalesBudgets	as object
	Local oSalesOrders	as object

	// Status da thread == "1" ====>>> Significa que a thread comecou o seu trabalho
	queueProcess():setThreadStatus(::cGlobalVarPrefix, "1")
	queueProcess():setLastHello(::cGlobalVarPrefix)

	DbSelectArea("A1T")
	A1T->(DbSetOrder(1)) // A1T_FILIAL, A1T_NUM

	if A1T->(DbSeek(::cIdQueueItem)) 
		if A1T->A1T_STATUS == AGUARDANDO
            oSalesOrders := tgvSalesOrdersBase():new()
		    oSalesBudgets := tgvSalesBudgetsBase():new()
			cSource := Alltrim(A1T->A1T_ROTINA)
			cError := ""

			if TGV002UpdateStatus(PROCESSANDO)
				jBody := JsonObject():New()
				cErrorParse := jBody:FromJson(A1T->A1T_JRECEB)
				if Empty(cErrorParse)
					nOperation := Val(A1T->A1T_TPOPER)
					jBody := jBody:GetJsonObject("json")
					if cSource == "MATA410"
						lContinua := jBody <> Nil .And. TG02SalesOrders(jBody, @cError, @nOperation, @oSalesOrders)
					elseIf cSource == "MATA415"
						lContinua := jBody <> Nil .And. TG02WriteSalesBudget(jBody, @cError, @nOperation, @oSalesBudgets)
					endIf
				else
					cError := STR0001	// "Falha ao converter campo JsonRecebido."
					lContinua := .F.
				endif
				FreeObj(jBody)
			else
				cError	:= STR0002	// "Falha ao alterar status do item da fila de processamento."
				lContinua := .F.
			endif

			if !lContinua
				TGV002UpdateStatus(ERROR, cError, CValToChar(nOperation))
			else
				TGV002UpdateStatus(SUCESSO,/*cError*/,CValToChar(nOperation))
			endIf

			UnLockByName(::cIdQueueItem, .F., .F.)
            oSalesBudgets:Destroy()
		    oSalesOrders:Destroy()
		endIf	
	endIf

	A1T->(DbCloseArea())

	FreeObj(oSalesOrders)
	FreeObj(oSalesBudgets)
	FreeObj(jBody)
	FwRestArea(aAreaA1T)
	FwRestArea(aArea)
	aSize(aAreaA1T, 0)
	aSize(aArea, 0)

	// Status da thread == "0" ====>>> Significa que a thread encerrou o seu trabalho e pode receber novas requisicoes
	queueProcess():setThreadStatus(::cGlobalVarPrefix, "0")
	queueProcess():delLastHello(::cGlobalVarPrefix)
return nil

