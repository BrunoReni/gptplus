#include "tlpp-core.th"
#include "tgv.products.controller.ch"

namespace tgv.products
using namespace tgv.util
Static lExistCheckDbUseArea := IIF(lExistCheckDbUseArea == NIL, FindFunction("tgv.util.checkDbUseArea"), lExistCheckDbUseArea)
Static lExistIsSellerFilterInDB := FindFunction("tgv.util.isSellerFilterInDB")
//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvProducts
	API para consulta de produtos (SB1) utilizada no TOTVS Gestão de Vendas
	@type		class
	@version	12.1.27
	@author		Squad CRM & Faturamento
	@since		27/08/2021
/*/
//------------------------------------------------------------------------------
Class tgvProducts
	Data jResponse  as Json
	Data nPage      as Numeric
	Data nPageSize  as Numeric
	Data oService   as Object

	Public Method new() as Object

	@Get("/api/tgv/products/sync")
	Public Method getProductsSync() as Logical

	@Get("/api/tgv/products/sync/diff/:dateSync")
	Public Method getProductsDiff() as Logical

	@Get("/api/tgv/products/")
	Public Method getProducts() as Logical

	@Get("/api/tgv/products/:priceListId/:customerId/:storeId")
	Public Method getProductsWithPriceList() as Logical
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvProducts::new() as Object
	Obtém uma nova instancia da classe tgvProducts
	@type		method
	@version	12.1.27
	@author		Squad CRM & Faturamento
	@since		15/10/2020
	@return		object, retorna uma nova instancia da classe.
/*/
//------------------------------------------------------------------------------
Method new() as Object Class tgvProducts
	::jResponse := JsonObject():new()
	::nPage     := 1
	::nPageSize := 10
	::oService  := ProductsService():getInstance()
return self

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvProducts::getProductsSync() as Logical
	Obtem uma lista de produtos utilizado na carga inicial do TOTVS Gestão de Vendas
	@type		method
	@version	12.1.27
	@author		Squad CRM & Faturamento
	@since		15/10/2020
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
Method getProductsSync() as Logical Class tgvProducts
	getPageAndPageSize(@::nPage, @::nPageSize)
	If lExistIsSellerFilterInDB .And. isSellerFilterInDB()
		::jResponse:fromJson(::oService:getProductsSync(::nPage, ::nPageSize, /*cDateSync*/))
	Else
		::jResponse:fromJson('{"items": [], "hasNext": false}')
	EndIf
	AnswerRest(::jResponse)
return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvProducts::getProductsDiff() as Logical
	Obtem uma lista de produtos modificados - Utilizado no SYNC do TOTVS Gestão de Vendas.
	@type		method
	@version	12.1.27
	@author		Squad CRM & Faturamento
	@since		15/10/2020
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
Method getProductsDiff() as Logical Class tgvProducts
	getPageAndPageSize(@::nPage, @::nPageSize)
	If  lExistIsSellerFilterInDB .And. isSellerFilterInDB()
		::jResponse:fromJson(::oService:getProductsSync(::nPage, ::nPageSize, GetSyncDate()))
	Else
		::jResponse:fromJson('{"items": [], "hasNext": false}')
	EndIf
	AnswerRest(::jResponse)
return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvProducts::getProducts() as Logical
	Obtem uma Lista de Produtos, possibilitando filtrar (QueryParam - FILTER) 
	os produtos e permitindo retornar todos	os campos ou somente os campos 
	especificados no QueryParam FIELDS.
    Observação: Ao utilizar o getProducts o campo DELETED não será retornado. 
	@type		method
	@version	12.1.33
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		03/08/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
Method getProducts() as Logical Class tgvProducts
	Local aItems		                                                      as Array
	Local aURLFilter	  := getFilterParam()                                 as Array
	Local cFields		  := getQueryParam('FIELDS')                          as Character
	Local cSort			  := getQueryParam('SORT')                            as Character
	Local lCheckDbUseArea := IIF(lExistCheckDbUseArea, checkDbUseArea(), .T.) as Logical
	Local cQuickFilter    := ""                                               as Character

	getPageAndPageSize(@::nPage, @::nPageSize)
	If lCheckDbUseArea
		cQuickFilter := getQueryParam('QUICKFILTER')
		::jResponse:fromJson(::oService:getProducts(::nPage					, ::nPageSize		, aURLFilter		, cFields		, ;
													cSort					, /*cPriceListId*/	, /*cCustomerId*/	, /*cStoreId*/	, ;
													/*lFilterPriceList*/	, cQuickFilter))
		aItems := ::jResponse:GetJsonObject( "items" )

		If Empty( aURLFilter ) .Or. ( !Empty( aItems ) .And. Len( aItems ) > 0 )
			AnswerRest( ::jResponse )
			aSize(aItems, 0)
		Else
			SetRestFault(404, STR0001 ) //"Produto nao localizado"
		Endif
	EndIf
	aSize(aURLFilter, 0)
return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvProducts::getProductsWithPriceList() as Logical
	Obtem uma Lista de Produtos já com o tratamento de preço, possibilitando 
	filtrar (QueryParam - FILTER) os produtos e permitindo retornar todos 
	os campos ou somente os campos especificados no QueryParam FIELDS.
    Observação: Ao utilizar o getProducts o campo DELETED não será retornado. 
	@type		method
	@version	12.1.33
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		04/08/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
Method getProductsWithPriceList() as Logical Class tgvProducts
	Local aItems		as Array
	Local aURLFilter	:= getFilterParam() as Array
	Local cFields		:= getQueryParam('FIELDS') as Character
	Local cSort			:= getQueryParam('SORT') as Character
	Local lCheckDbUseArea := IIF(lExistCheckDbUseArea, checkDbUseArea(), .T.)

	getPageAndPageSize(@::nPage, @::nPageSize)
	If lCheckDbUseArea
		::jResponse:fromJson(::oService:getProducts(::nPage, ::nPageSize, aURLFilter, cFields, cSort,;
		 GetPathParams("priceListId"), GetPathParams("customerId"), GetPathParams("storeId"),;
		 canFilterPriceList(getQueryParam('FILTERPRICELIST'))))
		aItems := ::jResponse:GetJsonObject( "items" )

		If Empty( aURLFilter ) .Or. ( !Empty( aItems ) .And. Len( aItems ) > 0 )
			AnswerRest( ::jResponse )
			aSize(aItems, 0)
		Else
			SetRestFault(404, STR0001 ) //"Produto nao localizado"
		Endif
	EndIf

	aSize(aURLFilter, 0)
return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} getFilterPriceList
	Avalia se utiliza filtro de Tabela de Preço
	@type function
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 08/06/2022
	@param cFilterPriceList, character, Filtra lista de preço
	@return logical, Filtra Lista de Preço?
/*/
//------------------------------------------------------------------------------
static function canFilterPriceList(cFilterPriceList as character) as Logical	
return IIF(Empty(cFilterPriceList) .or. Upper(cFilterPriceList) <> 'TRUE', .f., .t.)
