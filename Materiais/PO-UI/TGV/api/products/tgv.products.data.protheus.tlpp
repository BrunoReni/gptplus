#include "tlpp-core.th"

namespace tgv.products
using namespace tgv.util

#DEFINE LABEL            1
#DEFINE VALUE            2
#DEFINE FIELDQRY         2
// QuerystringOutOfSB1 - Operations
#DEFINE CHECKQUERYSTRING 1
#DEFINE ADDMAPFIELDS     2
#DEFINE SELECTMAPFIELDS  3
#DEFINE ADJUSTQUERY      4
#DEFINE ISINFILTER       5

Static __lPGVPRDQRY := ExistBlock("GVPRDQRY")

//------------------------------------------------------------------------------
/*/{Protheus.doc} ProductsProtheusData
	Efetua a consulta de produtos do Protheus.

	@type		Class
	@author		Squad CRM/Faturamento
	@since		15/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Class ProductsProtheusData from FWAdapterBaseV2
	Public Data cPriceListId as Character
	Public Data cCustomerId  as Character
	Public Data cStoreId     as Character

	Public Method New() as Object
	Public Method Get()
	Public Method RowToJson()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} ProductsProtheusData
	Efetua a consulta de produtos do Protheus.

	@sample		ProductsProtheusData():New("GET", .T.)
	@type		method
	@param		cVerbo	, Character	, Verbo que será utilizado na requisição
	@param		lList	, Logical	, Se irá listar o Json
	@author		Squad CRM/Faturamento
	@since		15/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New() as Object Class ProductsProtheusData
	_Super:New("GET", .T.)
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} Get
	Efetua a consulta de Produtos.

	@sample		oProductData:Get(1, 10, {}, 'code, description', '-code', Nil)
	@type		method
	@param		nPage		     , Numeric	    , Número da página que será retornada
	@param		nPageSize	     , Numeric	    , Quantidade de registros por página
	@param		aURLFilter	     , Array		, Lista de Filtros no padrão do FWAdapterBaseV2
	@param		cFields		     , Character	, Lista de campos que devem ser retornados
	@param		cSort		     , Character	, Ordernação do Response
	@param		cPriceListId     , Character	, Código da Tabela de Preço
	@param		cCustomerId	     , Character	, Código do Cliente
	@param		cStoreId	     , Character	, Loja do Cliente
	@param      lFilterPriceList , Logical      , Indica se a lista de produtos deve estar relacionada na tabela de preço informada
	@param      cQuickFilter     , Character    , Filtro rápido a ser aplicado na lista de produtos a ser retornada
	@author		Danilo Salve
	@since		03/08/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method Get(nPage as Numeric, nPageSize as Numeric, aURLFilter as Array, cFields as Character, cSort as Character,;
 cPriceListId as Character, cCustomerId as Character, cStoreId as Character, lFilterPriceList as Logical, cQuickFilter as Character) class ProductsProtheusData
	Local aArea	            := GetArea() as Array
	Local oFiltersOutOfSB1  := nil       as Json
	Local cOrderFields      := ""        as Character

	Default cQuickFilter := ""

	If !Empty( cPriceListId )
		::cPriceListId := cPriceListId
		::cCustomerId := cCustomerId
		::cStoreId := cStoreId
	Endif

	cOrderFields := "B1_FILIAL, B1_COD"
	oFiltersOutOfSB1 := QuerystringOutOfSB1(CHECKQUERYSTRING, {aURLFilter, cOrderFields}, oFiltersOutOfSB1)
	If oFiltersOutOfSB1 <> Nil
		lFilterPriceList := isTreteadInQueryString("pricetable", oFiltersOutOfSB1)
	EndIf

	AddMapFieldsSB1( self, .T., oFiltersOutOfSB1)

	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	oFiltersOutOfSB1 := QuerystringOutOfSB1(SELECTMAPFIELDS, {self}, oFiltersOutOfSB1)

	If !Empty( aURLFilter ) .And. Len( aURLFilter ) > 0
		::SetUrlFilter( aURLFilter )
	Endif

	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( GetQuerySB1(cPriceListId, lFilterPriceList, cQuickFilter, oFiltersOutOfSB1) )
	::SetWhere( getFilterSB1(/*cDateSync*/, cCustomerId, cStoreId, cPriceListId, .T., cQuickFilter) )
	::SetOrder( cOrderFields )

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf

	If ::Execute()
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize( aArea, 0 )
	FWFreeObj(oFiltersOutOfSB1)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} RowToJson
	Converte o retorno da consulta SQL em JSON

	@sample		oProductData:RowToJson( cAlias, aFields, .F.)
	@type		method
	@param		cAlias	, Character	, Alias da Consulta
	@param		aFields	, Array		, Campos (MapFields)
	@param		lEmpty	, Logical	, Vazio.
	@author		Danilo Salve
	@since		03/08/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
METHOD RowToJson( cAlias as Character, aFields as Array , lEmpty as Logical) CLASS ProductsProtheusData
	Local nLoop		as Integer
	Local cContent	as Character

	For nLoop := 1 to Len( aFields )
		If lEmpty
			cContent := ''
		Else
			If !Empty(::cPriceListId) .And. aFields[nLoop, LABEL] == "price"
				cContent := ::ValueToJson( aFields[nLoop, LABEL], MaTabPrVen(PADR(::cPriceListId, GetSX3Cache("DA0_CODTAB", "X3_TAMANHO")), (cAlias)->B1_COD, 1, ::cCustomerId, ::cStoreId) )
			Else
				cContent := ::ValueToJson( aFields[nLoop, LABEL], (cAlias)->( &(aFields[nLoop, VALUE]) )  )
			Endif
		EndIf
		Self:oJsonObj:setProp( aFields[nLoop, LABEL], cContent, lEmpty  )
	Next
Return Nil

//-------------------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapFieldsSB1
	Cria o Mapa de campos Protheus x API para os produtos.

	@sample		AddMapFieldsSB1( self, .F. )
	@type		Function
	@param		oSelf	        , Object	, Objeto com herança da classe FWAdapterBaseV2
	@param		isOnline        , Logical	, Se utiliza Sync (FALSE)
	@param      oFiltersOutOfSB1, Json      , Objeto do tratamento dos filtros de querystring fora da SB1 e tratados por esta API
	@author		Squad CRM/Faturamento
	@since		03/08/2021
	@version	12.1.33
/*/
//-------------------------------------------------------------------------------------------------------------------------------------
Function AddMapFieldsSB1(oSelf as Object, isOnline as Logical, oFiltersOutOfSB1 as Json)
	Local aInternalId	 := GetInternalId( { "B1_FILIAL", "B1_COD" } )
	Local lFixedId		 := (isOnline .And. !Empty(oSelf:cPriceListId)) .Or. (oFiltersOutOfSB1 <> Nil .And. "B1_COD" $ oFiltersOutOfSB1['orderFields'])
	Local lFixedBranchId := (oFiltersOutOfSB1 <> Nil .And. "B1_FILIAL" $ oFiltersOutOfSB1['orderFields'])

	If isOnline
		oSelf:AddMapFields("internalid"	   , "internalid", .T., .F.,	{ "internalid"	, 'C', aInternalId[1], 0 }, aInternalId[2]  )
	Else
		oSelf:AddMapFields("internalid"	   , "internalid", .T., .F.,	{ "internalid"	, 'C', aInternalId[1], 0 }, "' '"           )
		oSelf:AddMapFields("deleted"	   , "deleted"	 , .T., .F.,	{ "deleted"		, 'C', 1             , 0 }, "SB1.D_E_L_E_T_")
	Endif

	oSelf:AddMapFields("branchid"	       , "B1_FILIAL" , .T., lFixedBranchId ,{ "B1_FILIAL"	, 'C', GetFieldLength("B1_FILIAL") 	, 0                          }, "SB1.B1_FILIAL")
	oSelf:AddMapFields("code"		       , "B1_COD" 	 , .T., lFixedId       ,{ "B1_COD"	, 'C', GetFieldLength("B1_COD") 	, 0                          }, "SB1.B1_COD"   )
	oSelf:AddMapFields("description"       , "B1_DESC"	 , .T., .F.            ,{ "B1_DESC"	, 'C', GetFieldLength("B1_DESC")	, 0                          }                 )
	oSelf:AddMapFields("type"		       , "B1_TIPO"	 , .T., .F.            ,{ "B1_TIPO"	, 'C', GetFieldLength("B1_TIPO")	, 0                          }                 )
	oSelf:AddMapFields("price"		       , "B1_PRV1"	 , .T., .F.            ,{ "B1_PRV1"	, 'N', GetFieldLength("B1_PRV1")	, GetFieldDecimal("B1_PRV1") }                 )
	oSelf:AddMapFields("active"		       , "B1_ATIVO"	 , .T., .F.            ,{ "B1_ATIVO"	, 'C', GetFieldLength("B1_ATIVO")	, 0                          }                 )
	oSelf:AddMapFields("status"		       , "B1_MSBLQL" , .T., .F.            ,{ "B1_MSBLQL"	, 'C', GetFieldLength("B1_MSBLQL")	, 0                          }                 )
	oSelf:AddMapFields("standardwarehouse" , "B1_LOCPAD" , .T., .F.            ,{ "B1_LOCPAD"	, 'C', GetFieldLength("B1_LOCPAD")	, 0                          }                 )
	oSelf:AddMapFields("measureunit"       , "B1_UM"     , .T., .F.            ,{ "B1_UM"   	, 'C', GetFieldLength("B1_UM")  	, 0                          }                 )

	If oFiltersOutOfSB1 <> Nil
		oFiltersOutOfSB1 := QuerystringOutOfSB1(ADDMAPFIELDS, {oSelf}, oFiltersOutOfSB1)
	EndIf
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} getFilterSB1
	Obtem o filtro da SB1 utilizada no TOTVS Gestão de Vendas

	@sample		getFilterSB1('2020-12-10T13:56:03Z')
	@type		Function
	@param		cDateSync			, Character	, Data de sincronismo (STAMP)
	@param		cCliente			, Character	, Código do cliente
	@param		cLoja   			, Character	, Loja do cliente
	@param		cCodTab 			, Character	, Código do tabela de preco
	@param		lOnline 			, Logical	, Indica se é uma comunicação de um um client online ou nao
	@param      cQuickFilter        , Character    , Filtro rápido a ser aplicado na lista de produtos a ser retornada
	@return		Character			, Expressão utilizada na consulta
	@author		Danilo Salve
	@since		03/08/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Function getFilterSB1(cDateSync as Character, cCliente as Character, cLoja as Character, cCodTab as Character, lOnline as Logical, cQuickFilter as Character) as Character
	Local cWhere as Character

	Default cQuickFilter := ""
	Default cCliente     := ""
	Default cLoja 	     := ""
	Default cCodTab      := ""
	
	cWhere := " SB1.B1_FILIAL = '" + FwXFilial("SB1") + "'"

	If __lPGVPRDQRY
		cWhere += ExecBlock("GVPRDQRY", .F., .F., {cCliente, cLoja, cCodTab, lOnline})
	Endif
	If !Empty(cDateSync) .And. SubStr(cDateSync,1,1) != '-'
		cWhere += " AND SB1.S_T_A_M_P_ > " + ConvertTimeStamp( cDateSync, "value", "timestamp" )
	Else
		cWhere += " AND SB1.D_E_L_E_T_ = ' ' "
	EndIf
	If cQuickFilter == "HASSTOCK"
		cWhere += " AND (SB2.B2_QATU - SB2.B2_RESERVA - SB2.B2_QEMP - SB2.B2_QACLASS - SB2.B2_QEMPSA - SB2.B2_QEMPPRJ - SB2.B2_QTNP + SB2.B2_QNPT - SB2.B2_QEMPPRE) > 0 "
		cWhere += " AND SB2.D_E_L_E_T_ = ' ' "
	EndIf

return cWhere

//-------------------------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} GetQuerySB1
	Obtém a Query utilizada para buscar os produtos
	@type  Function
	@author Danilo Salve
	@since 08/06/2022
	@version 1.0
	@param      cCodTab          , character    , Código da Tabela de Preços
	@param      lFilterPriceList , Logical      , Indica se a lista de produtos deve estar relacionada na tabela de preço informada
	@param      cQuickFilter     , Character    , Filtro rápido a ser aplicado na lista de produtos a ser retornada
	@param      oFiltersOutOfSB1 , Json         , Objeto do tratamento dos filtros de querystring fora da SB1 e tratados por esta API
	@return character, expressão SQL
	@example getQuerySB1('001')
/*/
//-------------------------------------------------------------------------------------------------------------------------------------------
Function GetQuerySB1(cCodTab as character, lFilterPriceList as Logical, cQuickFilter as character, oFiltersOutOfSB1 as Json)
	Local cQuery            as character
	Local cSeller           as character
	Local lPriceTableFilter as logical

	Default cQuickFilter := ""

	cSeller := getSellerFromFilter(.F.,.T.)
	lPriceTableFilter := lFilterPriceList .And. Empty(cCodTab)

	cQuery := " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName('SB1') + " SB1 "	

	If lFilterPriceList
		If Empty(cCodTab)
			cQuery += "LEFT JOIN ( "
		Else
			cQuery += "INNER JOIN ( "
		EndIf

		cQuery += "			SELECT  "
		cQuery += "				DA1_FILIAL,  "
		cQuery += "				DA1_CODPRO,  "
		cQuery += "				DA1_CODTAB,  "
		cQuery += "				D_E_L_E_T_   "
		cQuery += "			FROM  "
		cQuery += "				" + RetSqlName("DA1") + " DA1 "
		cQuery += "			GROUP BY  "
		cQuery += "				DA1_FILIAL, "
		cQuery += "				DA1_CODPRO, "
		cQuery += "				DA1_CODTAB, "
		cQuery += "				D_E_L_E_T_ "
		cQuery += "			) DA1GROUP  "
		cQuery += "		ON	DA1GROUP.DA1_FILIAL = '" + FwXFilial("DA1") + "'"
		cQuery += "			AND DA1GROUP.DA1_CODPRO = SB1.B1_COD  "
		
		If !Empty(cCodTab)
			cQuery += "			AND DA1GROUP.DA1_CODTAB = '" + cCodTab + "'"
		EndIf
		
		cQuery += "			AND DA1GROUP.D_E_L_E_T_ = ' ' "
	Endif

	If cQuickFilter == "SALESONLASTTHREEMONTHS"
		cQuery += "INNER JOIN ( "
		cQuery += "			SELECT "
		cQuery += "				SC6.C6_PRODUTO "
		cQuery += "			FROM "
		cQuery += "				" + RetSqlName("SC5") + " SC5 INNER JOIN " + RetSqlName("SC6") + " SC6 "
		cQuery += "					ON SC5.C5_FILIAL = SC6.C6_FILIAL "
		cQuery += "					   AND SC5.C5_NUM = SC6.C6_NUM "
		cQuery += "			 WHERE "
		cQuery += "			 	SC5.D_E_L_E_T_ = ' ' AND"
		cQuery += "			 	SC6.D_E_L_E_T_ = ' ' AND "
		cQuery += "			 	SC5.C5_VEND1   = '" + cSeller + "' AND "
		cQuery += "			 	SC5.C5_EMISSAO >= '" + DToS(dDataBase - 90) + "' AND "
		cQuery += "			 	SC5.C5_FILIAL = '" + FWXFilial("SC5") + "' "
		cQuery += "			 GROUP BY "
		cQuery += "			 	SC6.C6_PRODUTO "
		cQuery += "			 ) SC5SC6GROUP "
		cQuery += "		ON SC5SC6GROUP.C6_PRODUTO = SB1.B1_COD "
	Endif

	If cQuickFilter == "HASSTOCK"
		cQuery += "INNER JOIN " + RetSqlName("SB2") + " SB2 "
		cQuery += "		ON	SB2.B2_FILIAL = SB1.B1_FILIAL "
		cQuery += "		    AND SB2.B2_COD = SB1.B1_COD "
		cQuery += "			AND SB2.B2_LOCAL = SB1.B1_LOCPAD "
	EndIf

	cQuery += " WHERE #QueryWhere# "

	If oFiltersOutOfSB1 <> Nil 
		oFiltersOutOfSB1 := QuerystringOutOfSB1(ADJUSTQUERY, {cQuery}, oFiltersOutOfSB1)
		If oFiltersOutOfSB1['finalQuery'] <> cQuery
			cQuery := oFiltersOutOfSB1['finalQuery']
		EndIf
	EndIf

Return cQuery

//---------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} QuerystringOutOfSB1
	Função geral de tratamento dos filtros de querystring que não estão definidos diretamente pela função AddMapFieldsSB1
	@type  Function
	@author Rafael Mota Previdi
	@since 08/01/2023
	@version 1.0
	@param operation       , Numeric, Código da operação a ser executada pela funcao
	@param aParameter      , Array  , Array com os parametros necessarios para cada operacao a ser executada
	@param oFiltersOutOfSB1, Json   , Objeto do tratamento dos filtros de querystring fora da SB1 e tratados por esta API
	@return oFiltersOutOfSB1, Object, Objeto Json com as informações do filtro conforme a operacao informada
/*/
//---------------------------------------------------------------------------------------------------------------------------
Static Function QuerystringOutOfSB1(operation as Numeric, aParameters as Array, oFiltersOutOfSB1 as Json) as Json
	Local aURLFilter         := {}  as Array
	Local aCoveredOutFilters := {}  as Array
	Local nCountFor          := 0   as Numeric
	Local nQtItemsFor        := 0   as Numeric
	Local oData              := Nil as Object 
	Local cFilter            := ""  as Character
	Local cField             := ""  as Character
	Local cDataType          := ""  as Character
	Local cQuery             := ""  as Character
	Local nPosOutFilter      := 0   as Numeric
	Local nCountMapFields    := 0   as Numeric
	Local cFields            := ""  as Character
	Local cOrderFields       := ""  as Character

	Do Case
		Case operation == CHECKQUERYSTRING

			aCoveredOutFilters := { ;
									{"pricetable", ; // 01 - filtro do querystring
									"DA1_CODTAB",  ; // 02 - campo correspondente na query
									"C"}           ; // 03 - Tipo do campo correspondente na query
								  }

			aURLFilter   := aParameters[1]
			cOrderFields := aParameters[2]
			nQtItemsFor  := Len(aCoveredOutFilters)

			For nCountFor := 1 To nQtItemsFor
				If !Empty(aURLFilter) .And. Len(aUrlFilter[1]) == 2 .And. (AScan(aURLFilter, {|filter| filter[1] == "FILTER" .And. aCoveredOutFilters[nCountFor][1] $ filter[2]} ) > 0)
					If oFiltersOutOfSB1 == Nil
						oFiltersOutOfSB1 := createOFiltersOutOfSB1()
						oFiltersOutOfSB1['orderFields'] := cOrderFields
					EndIf
					Aadd(oFiltersOutOfSB1['outFilters'],JsonObject():new())
					oFiltersOutOfSB1['outFilters'][Len(oFiltersOutOfSB1['outFilters'])]["filter"]   := aCoveredOutFilters[nCountFor][1]
					oFiltersOutOfSB1['outFilters'][Len(oFiltersOutOfSB1['outFilters'])]["field"]    := aCoveredOutFilters[nCountFor][2]
					oFiltersOutOfSB1['outFilters'][Len(oFiltersOutOfSB1['outFilters'])]["datatype"] := aCoveredOutFilters[nCountFor][3]
				EndIf
			Next

		Case operation == ADDMAPFIELDS
			oData        := aParameters[1]

			If oFiltersOutOfSB1 <> Nil
				nQtItemsFor := Len(oFiltersOutOfSB1['outFilters'])
				
				For nCountFor := 1 To nQtItemsFor
					cFilter   := oFiltersOutOfSB1['outFilters'][nCountFor]["filter"]
					cField    := oFiltersOutOfSB1['outFilters'][nCountFor]["field"]
					cDataType := oFiltersOutOfSB1['outFilters'][nCountFor]["datatype"]

					oData:AddMapFields(cFilter, cField, .T., .F., {cField, cDataType, GetFieldLength(cField), 0}, )
				Next
			EndIf

		Case operation == SELECTMAPFIELDS
			If oFiltersOutOfSB1 <> Nil
				oData := aParameters[1]
				cFields := oData:oJsonObj:cFields
				aEval(oData:oJsonObj:aMapFields, {|field| IIf(Empty(cFields) .Or. (field[LABEL] $ cFields .Or. field[FIELDQRY] $ oFiltersOutOfSB1['orderFields']), ;
																aAdd(oFiltersOutOfSB1['mapFields'],field[FIELDQRY]), ;
																.T.)})
			EndIf

		Case operation == ADJUSTQUERY
			oFiltersOutOfSB1['mainQuery']  := aParameters[1]
			oFiltersOutOfSB1['finalQuery'] := aParameters[1]

			If oFiltersOutOfSB1 <> Nil

				nQtItemsFor := Len(oFiltersOutOfSB1['mapFields'])

				cQuery := " SELECT "

				For nCountFor := 1 To nQtItemsFor
					If AScan(oFiltersOutOfSB1['outFilters'], {|outFilter| outFilter['field'] == oFiltersOutOfSB1['mapFields'][nCountFor]}) > 0
						cQuery += "' ' " + oFiltersOutOfSB1['mapFields'][nCountFor]
					Else
						cQuery += oFiltersOutOfSB1['mapFields'][nCountFor]
					EndIf
					If nCountFor < nQtItemsFor
						cQuery += ", "
					Else
						cQuery += " "
					EndIf
				Next

				cQuery += " FROM ( " + oFiltersOutOfSB1['mainQuery'] + " ) GBY GROUP BY	  "

				nQtItemsFor := Len(oFiltersOutOfSB1['outFilters'])
				nCountMapFields := Len(oFiltersOutOfSB1['mapFields'])
				
				For nCountFor := 1 To nQtItemsFor
					If (nPosOutFilter := aScan(oFiltersOutOfSB1['mapFields'], {|field| field == oFiltersOutOfSB1['outFilters'][nCountFor]['field']})) > 0
						aDel(oFiltersOutOfSB1['mapFields'], nPosOutFilter)
						aSize(oFiltersOutOfSB1['mapFields'], --nCountMapFields )
					Endif
				Next

				For nCountFor := 1 To nCountMapFields
					cQuery += oFiltersOutOfSB1['mapFields'][nCountFor]

					If nCountFor < nCountMapFields
						cQuery += ", "
					Else
						cQuery += " "
					EndIf
				Next

				oFiltersOutOfSB1['finalQuery'] := cQuery

			EndIf

	EndCase
Return oFiltersOutOfSB1

//---------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} createOFiltersOutOfSB1
	Função para criação do objeto oFiltersOutOfSB1 vazio
	@type  Function
	@author Rafael Mota Previdi
	@since 08/01/2023
	@version 1.0
	@return oFiltersOutOfSB1, Object, Objeto Json com as informações dos filtro que estao fora da tabela SB1
/*/
//---------------------------------------------------------------------------------------------------------------------------
Static Function createOFiltersOutOfSB1() as Json
	Local oFiltersOutOfSB1 as Json

	oFiltersOutOfSB1 := JsonOBject():New()
	oFiltersOutOfSB1['outFilters']    := {}
	oFiltersOutOfSB1['mapFields']     := {}
	oFiltersOutOfSB1['orderFields']   := {}
	oFiltersOutOfSB1['mainQuery']     := ""
	oFiltersOutOfSB1['finalQuery']    := ""
Return oFiltersOutOfSB1

//------------------------------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} isTreteadInQueryString
	Função para verificar se o atributo informado nos parametros esta no filtro de querystring e esta sendo considerado no objeto oFiltersOutOfSB1
	@type  Function
	@author Rafael Mota Previdi
	@since 16/01/2023
	@version 1.0
	@param attribute       , String, atributo a ser verificado se está no querystring e que não faz parte da SB1 e é tratado nesta API
	@param oFiltersOutOfSB1, Json  , Objeto do tratamento dos filtros de querystring fora da SB1 e tratados por esta API
	@return lIsInQueryString, Logical, Indica se o atributo a ser verificado se está no querystring, não faz parte da SB1 e é tratado nesta API
/*/
//-----------------------------------------------------------------------------------------------------------------------------------------------
Static Function isTreteadInQueryString(attribute as Character, oFiltersOutOfSB1 as Json) as Logical
	Local lIsInQueryString := .F. as Logical
	lIsInQueryString := oFiltersOutOfSB1 <> Nil .And. (aScan(oFiltersOutOfSB1['outFilters'],{|filter| filter['filter'] == attribute}) > 0)
Return lIsInQueryString

