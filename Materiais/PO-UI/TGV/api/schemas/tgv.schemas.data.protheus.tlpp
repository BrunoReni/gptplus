#include "tlpp-core.th"
#include "fwlibversion.ch"

namespace tgv.schemas
using namespace tgv.util

static lExistChargeSchemas := findFunction('chargeSchemas')

//------------------------------------------------------------------------------
/*/{Protheus.doc} SchemasProtheusData
    Disponibiliza um Objecto de Consulta de Schemas no Protheus.

    @author		Squad CRM & Faturamento
    @since		01/10/2020
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Class SchemasProtheusData
	PROTECTED DATA oMapFields as Object
	PROTECTED DATA oQryFields as Object

	PUBLIC Method New()
	PROTECTED Method GetAllSchemes()
	PRIVATE Method GetSchema()
	PRIVATE Method GetFieldsBySchema()
	PRIVATE Method RowToJson()
	PRIVATE Method SetMapFields()
	PRIVATE Method IsLoadedDefaultSchemas() as logical
	PRIVATE Method hasSchemas()         as logical
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} New
	Cria uma nova instancia do Objeto SchemasProtheusData.

	@author		Squad CRM & Faturamento
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New() Class SchemasProtheusData
	Local cQryFields := " SELECT A1W_PROPRI FROM " + RetSqlName("A1W") + " A1W WHERE A1W.A1W_FILIAL = '" + FwXFilial("A1W")
	cQryFields += "' AND A1W.A1W_SCHEMA = ? AND A1W.D_E_L_E_T_ = ' ' ORDER BY " + SqlOrder( A1W->( IndexKey(1) ) )

	cQryFields := ChangeQuery(cQryFields)
	::oQryFields := IIF(shemasFWExecStat(), FwExecStatement():New(cQryFields), FWPreparedStatement():New( cQryFields ))
	::SetMapFields()
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetAllSchemes
	Obtem todos os Schemas e Fields Cadastrados.

	@return		JSonObject, Retorna todos os Schemas.
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetAllSchemes() CLASS SchemasProtheusData
	Local aArea         := GetArea()
	Local aSchemas      := {}
	Local cSchemaAlias  := GetNextAlias()
	Local jResponse     := JsonObject():New()

	if ::IsLoadedDefaultSchemas()

		BeginSQL alias cSchemaAlias
		SELECT
			A1V_CODIGO, A1V_NOME, A1V_DESCRI, A1V_ENDGET , A1V_ENDDIF , A1V_POST , A1V_PUT , A1V_DELETE , A1V_IDFLD , A1V_DELFLD
		FROM
		%table:A1V% A1V
		WHERE
		A1V.A1V_FILIAL = %xfilial:A1V% AND
		A1V.A1V_MSBLQL = '2' AND
		A1V.%notDel%
		ORDER BY %Order:A1V%
		EndSql

		While (cSchemaAlias)->(!Eof())
			aAdd(aSchemas, ::GetSchema(cSchemaAlias))
			(cSchemaAlias)->(DbSkip())
		Enddo

		If Len(aSchemas) > 0
			jResponse['items'] := aSchemas
		Endif

		(cSchemaAlias)->(DbCloseArea())
	endIf

	RestArea(aArea)
	aSize(aArea, 0)
Return jResponse

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetAllSchemes
	Obtem todos os Schemas e Fields Cadastrados.

	@param		cAlias, Character, Alias com registro posicionado.
	@return		JSonObject, Retorna um Schema especifico, conforme Alias informado.
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetSchema( cAlias as Character ) CLASS SchemasProtheusData
	Local aStruct := (cAlias)->(DbStruct())
	Local jSchema := JsonObject():New()
	Local nField  as Numeric

	For nField := 1 To Len(aStruct)
		::RowToJson(cAlias, aStruct[nField, 1], jSchema)
	Next
	jSchema['fields']   := ::GetFieldsBySchema((cAlias)->A1V_CODIGO)
	jSchema['pageSize'] := '500'

	aSize(aStruct, 0)
Return jSchema

//------------------------------------------------------------------------------
/*/{Protheus.doc} RowToJson
	Converte o Valor do campo em um Atributo do Schema.

	@param		cAlias		, Character	, Alias com registro posicionado.
	@param		cQryField	, Character	, Campo utilizado na Query.
	@param		jSchema		, Json		, Estrutura do Schema
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method RowToJson(cAlias as Character, cQryField as Character, jSchema as Json) CLASS SchemasProtheusData
	Local cMapField as Character
	If ::oMapFields:Get(cQryField, @cMapField) .And. !Empty((cAlias)->&(cQryField))
		jSchema[cMapField] := RTrim((cAlias)->&(cQryField))
	Endif
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetFieldsBySchema
	Obtem todos os campos de um Schema especifico

	@param 		cSchema	, Character, Codigo do Schema
	@return   	Array	, Retorna todos os campos do Schema informado no parametro.
	@author		Danilo Salve
	@since		30/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetFieldsBySchema( cSchema as Character ) CLASS SchemasProtheusData
	Local aFields       := {}
	Local aArea         := GetArea()
	Local cAliasFields  := GetNextAlias()

	::oQryFields:SetString(1, cSchema)
	
	If shemasFWExecStat()
		::oQryFields:OpenAlias(cAliasFields)
	Else	
		MPSysOpenQuery(::oQryFields:GetFixQuery(), cAliasFields)
	EndIf

	While (cAliasFields)->(!Eof())
		aAdd(aFields, RTRIM((cAliasFields)->A1W_PROPRI))
		(cAliasFields)->(DbSkip())
	EndDo

	(cAliasFields)->(DbCloseArea())
	RestArea(aArea)
	aSize(aArea, 0)
Return aFields

//------------------------------------------------------------------------------
/*/{Protheus.doc} SetMapFields
	Define um HashMap com todos os campos utilizados no Schema.

	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method SetMapFields() CLASS SchemasProtheusData
	::oMapFields := tHashMap():New()
	::oMapFields:Set('A1V_CODIGO'   , 'code')
	::oMapFields:Set('A1V_NOME'     , 'name')
	::oMapFields:Set('A1V_DESCRI'   , 'description')
	::oMapFields:Set('A1V_ENDGET'   , 'getUrlApi')
	::oMapFields:Set('A1V_ENDDIF'   , 'diffUrlApi')
	::oMapFields:Set('A1V_POST'     , 'postUrlApi')
	::oMapFields:Set('A1V_PUT'      , 'patchUrlApi')
	::oMapFields:Set('A1V_DELETE'   , 'deleteUrlApi')
	::oMapFields:Set('A1V_IDFLD'    , 'idField')
	::oMapFields:Set('A1V_DELFLD'   , 'deletedField')
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} LoadDefaultSchemas
	Realizar a tentativa de carga automatica dos esquemas padrões do portal 
	gestao de vendas, caso isso nao tenha ocorrido antes. Caso ja tenham sido
	carregados antes eh informado que os esquemas ja estao carregados

	@author		Rafael Mota Previdi / Squad CRM/Faturamento
	@since		07/10/2022
	@version	12.1.33
	@return 	Logical, Se existem schemas retorna verdadeiro
/*/
//------------------------------------------------------------------------------
Method IsLoadedDefaultSchemas() as logical CLASS SchemasProtheusData
	Local lIsLoadedSchemas := .T.        as logical

	if !::hasSchemas() .and. lExistChargeSchemas
		lIsLoadedSchemas := chargeSchemas()
	endIf
Return lIsLoadedSchemas

//--------------------------------------------------------------------
/*/{Protheus.doc} hasSchemas
	Valida se já existem dados cadastros na tabela de Schemas.
	@type		function
	@author		Rafael Mota Previdi / CRM & Faturamento
	@since		07/10/2022
	@version	12.1.33
	@return 	Logical, Se existem schemas retorna verdadeiro
/*/
//--------------------------------------------------------------------
Method hasSchemas() as Logical CLASS SchemasProtheusData
	Local lHasSchemas := .T. as Logical

	If A1V->(EOF()) .And. A1V->(BOF())
		lHasSchemas := .F.
	Endif
Return lHasSchemas

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} shemasFWExecStat
	Função utilizada para validar a data da LIB para utilização da classe FWExecStatement
	@type       Function
	@return     lShemasVerLib, lógico, se pode ser utilizado a classe FWExecStatement
	@author     Squad CRM/Faturamento
	@since      13/04/2022
	@version    12.1.33
	
/*/
//-------------------------------------------------------------------------------------
Static Function shemasFWExecStat()
	Static lShemasVerLib := Nil

	If lShemasVerLib == Nil
		lShemasVerLib := FWLibVersion() >= "20211116"
	EndIf
Return lShemasVerLib
