#include "tlpp-core.th"

namespace tgv.customer
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} CustomerProtheusDataSync
	Efetua a consulta dos Clientes no Protheus.
	@type		class
	@sample		CustomerProtheusDataSync:New()
	@author		Danilo Salve
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
CLASS CustomerProtheusDataSync FROM FWAdapterBaseV2
	Public Data aCustomFields		as Array
	Public Data cCustomFields		as Character
	Public Data cSource				as Character
	Public Data isAdmin				as Logical
	Public Data lcanObfuscateField	as Logical
	Public Data oHashFieldsPD		as Object
	Public Data oHashStates			as Object
	Public Data nFields				as Numeric

	Public Method New() as Object
	Public Method Get()
	Public Method RowToJson()
	Public Method AddCustomFields()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} New
	Cria uma nova instancia do Objeto CustomerProtheusDataSync
	@type		method
	@sample		oData():New()
	@author		Squad CRM/Faturamento
	@since		07/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New() as Object CLASS CustomerProtheusDataSync
	_Super:New( "GET", .T. )

	::oHashFieldsPD := tHashMap():New()

	If ::oHashStates == Nil
		setStates(@::oHashStates)
	Endif
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} Get
	Obtem uma Lista de Clientes retornando um JSON respeitando a Quantidade de 
	registro por pagina, especificado no paramentro PageSize.
	@type		method
	@sample		oData:Get( 1, 10,'2020-09-30' )
	@param		nPage		, Numeric	, Número da página que será retornada
	@param		nPageSize	, Numeric	, Quantidade de registros por pagina
	@param		cData		, Character , Data de sincronismo
	@author		Danilo Salve
	@since		06/01/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method Get(nPage as Numeric, nPageSize as Numeric, cData as Character) CLASS CustomerProtheusDataSync
	Local aArea		 as Array
	Local cWhere  	 as Character
	Local cInnerJoin as Character
	Local cSeller 	:= getSellerFromFilter(.F., .T.)
	Local cConcate	:= IIF(AllTrim( Upper( TcGetDb() ) ) == "MSSQL","+","||")

	Default nPage		:= 1
	Default nPageSize	:= 10
	Default cData		:= ""

	aArea   := GetArea()
	AddMapFieldsSA1( self, .F. )

	cInnerJoin+=' INNER JOIN '+RetSqlName('AQ5')+' AQ5 '
	cInnerJoin+=' ON'
	cInnerJoin+=' SA1.A1_COD '+cConcate+' SA1.A1_LOJA = AQ5.AQ5_CODENT'
	cInnerJoin+=' INNER JOIN '+RetSqlName('AQ4')+' AQ4 '
	cInnerJoin+=' ON'
	cInnerJoin+=' AQ5.AQ5_UUID = AQ4.AQ4_UUID'
	cInnerJoin+=' AND AQ4.AQ4_FILIAL = AQ5.AQ5_FILIAL'
	cInnerJoin+=' AND AQ5.D_E_L_E_T_ = AQ4.D_E_L_E_T_'

	::AddCustomFields()
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( getQueryTGV("SA1", cInnerJoin) )

	cWhere := " SA1.A1_FILIAL      = '" + FwXFilial("SA1") + "'"
	cWhere += " AND AQ4.AQ4_FILIAL = '" + FwXFilial("AQ4") + "'"
	cWhere += " AND AQ4.AQ4_VEND   = '" + cSeller + "'"
	cWhere += " AND AQ4.AQ4_SCHEMA = '000002'"
	cWhere += " AND AQ4.AQ4_DATA   = '"+DTOS(Date())+"'"
	cWhere += " AND AQ4.D_E_L_E_T_ = ' '"
	
	If !Empty(cData) .And. SubStr(cData,1,1) != '-'
		cWhere += " AND SA1.S_T_A_M_P_ > " + ConvertTimeStamp( cData, "value", "timestamp" )
	Else
		cWhere += " AND SA1.D_E_L_E_T_ = ' '"
	EndIf

	::SetWhere( cWhere )
	::SetOrder('A1_FILIAL, A1_COD, A1_LOJA') // A1_FILIAL, A1_COD, A1_LOJA

	DbSelectArea("SYA")
	SYA->(DbSetOrder(1)) // YA_FILIAL, YA_CODGI
	
	If ::Execute()
		::FillGetResponse()
	EndIf

	FTPDUnload()
	::oHashFieldsPD:Clean()

	SYA->(DbCloseArea())
	RestArea( aArea )
	aSize( aArea, 0 )
	aSize(::aCustomFields, 0)
	FreeObj(::oHashFieldsPD)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} RowToJson
	Converte o retorno da consulta SQL em JSON	
	@type		method
	@sample		oData:RowToJson( cAlias, aFields, .F.)
	@param		cAlias	, Character	, Alias da Consulta
	@param		aFields	, Array		, Campos (MapFields)
	@param		lEmpty	, Logical	, Vazio.
	@author		Danilo Salve
	@since		22/12/2020
	@version	12.1.27 ou Superior
/*/
//------------------------------------------------------------------------------
METHOD RowToJson( cAlias as Character, aFields as Array , lEmpty as Logical) CLASS CustomerProtheusDataSync
	Default lEmpty := .F.
	ConvertResponseValues(aFields, cAlias, lEmpty, @Self )
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddCustomFields
	Metodo Auxiliar, deve carregar os Atributos utilizados na conversão dos valores.
	@type		Method
	@sample		oData:AddCustomFields()
	@author		Squad CRM & Faturamento
	@since		07/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
METHOD AddCustomFields() CLASS CustomerProtheusDataSync
	Local cFilialDA0 := FwXFilial("DA0") as Character
	Local cFilialSA4 := FwXFilial("SA4") as Character
	Local cFilialSE4 := FwXFilial("SE4") as Character
	Local cFilialSYA := FwXFilial("SYA") as Character

	Self:cSource:= "TGVCUSTOMERS"
	Self:isAdmin := FwIsAdmin()
	Self:aCustomFields := {}
	Self:nFields := Len(Self:oJsonObj:aMapFields)

	aAdd(Self:aCustomFields, {"id"							, {|| GetInternalIdQry((cAlias)->A1_FILIAL + (cAlias)->A1_COD + (cAlias)->A1_LOJA)}})
	aAdd(Self:aCustomFields, {"pricelistinternalid"			, {|| GetInternalIdQry(cFilialDA0 + (cAlias)->A1_TABELA)}})
	aAdd(Self:aCustomFields, {"carrierinternalid"			, {|| GetInternalIdQry(cFilialSA4 + (cAlias)->A1_TRANSP)}})
	aAdd(Self:aCustomFields, {"paymentconditioninternalid"	, {|| GetInternalIdQry(cFilialSE4 + (cAlias)->A1_COND)}})
	aAdd(Self:aCustomFields, {"ufdescription"				, {|| GetState((cAlias)->A1_EST, ::oHashStates)}})
	aAdd(Self:aCustomFields, {"countrydescription"			, {|| GetCountry(cFilialSYA, (cAlias)->A1_PAIS)}})

	Self:cCustomFields := "id#pricelistinternalid#carrierinternalid#paymentconditioninternalid#ufdescription#countrydescription"

	If !Self:isAdmin
		Self:oHashFieldsPD := setProtectedFields(Self:oJsonObj:aMapFields, Self:cSource)
	Endif

	Self:lcanObfuscateField := CanAccessProtectedData(Self:isAdmin)
Return Nil
