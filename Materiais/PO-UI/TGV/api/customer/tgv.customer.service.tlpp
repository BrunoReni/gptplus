#include 'tlpp-core.th'

namespace tgv.customer
using namespace tgv.util
static __instance as object

Static lExistFindMethod := FindFunction("tgv.util.findMethod")
Static lExistSaveCustomer
//------------------------------------------------------------------------------
/*/{Protheus.doc} CustomerService
	Disponibiliza um serviço de Clientes

	@sample		CustomerService
	@author		Danilo Salve
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Class CustomerService
	Data jResponse  as Json

	Public Method New() as Object
	Public Method getInstance() as Object
	Public Method getCustomersSync() as Json
	Public Method getCreditLimit() as Json
	Public Method getCustomers() as Json
	Public Method saveCustomer() 
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} New
	Disponibiliza uma nova intancia do serviço Clientes.

	@sample		CustomerService:New()
	@author		Danilo Salve
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New() as Object Class CustomerService
	::jResponse := JsonObject():New()
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetInstance
	Retorna uma instancia do serviço

	@sample		CustomerService:GetInstance()
	@author		Danilo Salve
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getInstance() as Object Class CustomerService
	If (__instance == Nil)
		__instance := CustomerService():New()
	EndIf
Return __instance

//------------------------------------------------------------------------------
/*/{Protheus.doc} getCustomers
	Efetua a consulta dos Clientes

	@sample		CustomerService:getCustomers(1, 10, '2021-01-06')
	@param      nPage,      Numerico, Numero da Página
	@param      nPageSize,  Numerico, Tamanho da página
	@param      cDate,      Character, Data de Sincronismo/Alteracao
	@author		Danilo Salve
	@since		06/01/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getCustomersSync(nPage as Numeric, nPageSize as Numeric, cDate as Character) as Json Class CustomerService
	Local oData := CustomerDataFactory():GetDataSync()

	Default nPage       := 1
	Default nPageSize   := 10
	Default cDate       := ""

	oData:Get(nPage, nPageSize, cDate)

	If oData:lOk
		::jResponse := oData:getJSONResponse()
	Else
		::jResponse := SetRestFault(oData:GetCode(), oData:GetMessage())
	EndIf

	oData:DeActivate()
	FreeObj( oData )
Return ::jResponse

//------------------------------------------------------------------------------
/*/{Protheus.doc} getCreditLimit
	Efetua a consulta dos Clientes

	@sample		CustomerService:getCreditLimit(cCustomerId)
	@param		cCustomerId,  Character,  Código do Cliente (A1_COD)
	@param		cCustomerStore , Character, Loja do Cliente (A1_LOJA)
	@author		Squad CRM & Faturamento - Danilo Salve / Felipe Monay
	@since		09/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getCreditLimit(cCustomerId as Character, cCustomerStore as character) as Json Class CustomerService
	Local oData := CustomerDataFactory():GetData()

	::jResponse := oData:GetCreditLimit( cCustomerId, cCustomerStore )

	oData:DeActivate()
	FreeObj( oData )
return ::jResponse
//------------------------------------------------------------------------------
/*/{Protheus.doc} getCustomers
	Efetua a consulta de Clientes - Utilizado quando o TOTVS Gestão Vendas
	estiver operando Online.

	@sample		oService:getCustomers(1, 10, {}, 'id, internalid', Nil, '-id' )
	@param		nPage		   , Numeric	, Número da página que será retornada
	@param		nPageSize	   , Numeric	, Quantidade de registros por pagina
	@param		aURLFilter	   , Array		, Lista de Filtros no padrão do FWAdapterBaseV2
	@param		cFields		   , Character	, Lista de campos que devem ser retornados
	@param		cSort		   , Character	, Ordernação do Response	
	@param		cCustomerId	   , Character	, Codigo do Cliente
	@param		cCustomerStore , Character	, Loja do Cliente
	@return		Json		   , Reposta da Consulta/Requisição
	@author		Danilo Salve
	@since		21/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method getCustomers(nPage as Numeric, nPageSize as Numeric, aURLFilter as Array, cFields as Character, cSort as Character, cCustomerId as Character, cCustomerStore as Character) as Json Class CustomerService
	Local oData := CustomerDataFactory():GetData()

	If !Empty(cCustomerId)
		oData:oJsonObj:lList := .F.
	Endif

	oData:Get(nPage, nPageSize, aURLFilter, cFields, cSort, cCustomerId, cCustomerStore)

	If oData:lOk
		::jResponse := oData:GetJSONResponse()
	Else
		::jResponse := SetRestFault(oData:GetCode(), oData:GetMessage())
	EndIf

	oData:DeActivate()
	FreeObj( oData )
Return ::jResponse

//------------------------------------------------------------------------------
	/*/{Protheus.doc} CustomerService::saveCustomer
	Efetua a gravação de um cliente
	@type		method
	@version	12.1.33
	@author		Eduardo Paro / Squad CRM & Faturamento
	@since		26/04/2023
	@param		jCustomer		, json		, json do cliente
	@param		nOperation		, numeric	, operação (3, 4 ou 5)
	@param		cCustomerId		, character	, A1_COD
	@param		cCustomerStore	, character	, A1_LOJA
/*/
//------------------------------------------------------------------------------
Method saveCustomer(jCustomer as Json, nOperation as Numeric, cCustomerId as Character, cCustomerStore as Character) Class CustomerService
	Local oData := CustomerDataFactory():GetData()
	
	If ( Empty( lExistSaveCustomer) )
		lExistSaveCustomer := IIF(lExistFindMethod, findMethod(oData, "saveCustomer"), .F.)
	EndIf

	If lExistSaveCustomer
		oData:saveCustomer(jCustomer, nOperation, cCustomerId, cCustomerStore)
	EndIf

	oData:DeActivate()
	FreeObj(oData)
Return Nil
