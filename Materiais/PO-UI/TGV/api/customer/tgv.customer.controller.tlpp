#include "tlpp-core.th"
#include "tgv.customer.controller.ch"

namespace tgv.customer
using namespace tgv.util
Static lExistIsSellerFilterInDB := FindFunction("tgv.util.isSellerFilterInDB")
Static lExistCheckDbUseArea     := FindFunction("tgv.util.checkDbUseArea")
Static lExistFindMethod     	:= FindFunction("tgv.util.findMethod")
Static lExistSaveCustomer
//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvCustomer
	API para consulta de Clientes.
	@type		Class
	@author		Danilo Salve
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Class tgvCustomer
	Data jResponse	      as Json
	Data nPage            as Numeric
	Data nPageSize        as Numeric
	Data oService         as Object

	Public Method new() as Object

	@Get("/api/tgv/customers/sync")
	Public Method getAllSync() as Logical	

	@Get("/api/tgv/customers/sync/diff/:dateSync")
	Public Method getDiffSync() as Logical

	@Get("/api/tgv/customers/creditlimit/:customerid/:customerstore")
	Public Method getCreditLimit() as Logical

	@Get("/api/tgv/customers/")
	Public Method getAll() as Logical

	@Get("/api/tgv/customers/:customerid/:customerstore")
	Public Method getById() as Logical

	@Post("/api/tgv/customers/")
	Public Method postCustomer() as Logical

	@Put("/api/tgv/customers/:customerid/:customerstore")
	Public Method putCustomer() as Logical

	@Delete("/api/tgv/customers/:customerid/:customerstore")
	Public Method deleteCustomer() as Logical
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvCustomer::new() as Object
	Cria uma nova instacia do objeto

	@type		method
	@sample     tgvCustomer:New()
	@author		Danilo Salve
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method new() as Object Class tgvCustomer
	::nPage		:= 1
	::nPageSize	:= 10
	::oService	:= CustomerService():getInstance()
	::jResponse	:= JsonObject():New()

	If ( Empty( lExistSaveCustomer) )
		lExistSaveCustomer := IIF(lExistFindMethod, findMethod(::oService, "saveCustomer"), .F.)
	EndIf	

Return self

//------------------------------------------------------------------------------
/*/{Protheus.doc}  tgvCustomer::getAllSync() as Logical
	Deve obter uma lista de clientes, utilizando o padrão de campos do PO-SYNC.	
	@type		method
	@sample     GET /api/tgv/customers/sync
	@author		Danilo Salve
	@since		29/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getAllSync() as Logical Class tgvCustomer
	getPageAndPageSize(@::nPage, @::nPageSize)
	If lExistIsSellerFilterInDB .And. IsSellerFilterInDB()
		::jResponse:fromJson(::oService:getCustomersSync(::nPage, ::nPageSize, /*cData*/))
	Else
		::jResponse:fromJson('{"items": [], "hasNext": false}')
	EndIf
	AnswerRest(::jResponse)
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc}  tgvCustomer::getDiffSync() as Logical
	Deve obter uma lista de clientes que foram modificados, filtrando pelo campo
	S_T_A_M_P_.	
	@type		method
	@sample     GET /api/tgv/customers/sync/diff/:dateSync
	@author		Danilo Salve
	@since		30/01/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getDiffSync() as Logical Class tgvCustomer
	getPageAndPageSize(@::nPage, @::nPageSize)
	If lExistIsSellerFilterInDB .And. IsSellerFilterInDB()
		::jResponse:fromJson(::oService:getCustomersSync(::nPage, ::nPageSize, GetSyncDate()))
	Else
		::jResponse:fromJson('{"items": [], "hasNext": false}')
	EndIf
	AnswerRest(::jResponse)
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc}  tgvCustomer::GetCustomerCreditLimit() as Logical
	Deve obter o limite de crédito do cliente.	
	@type		method
	@sample     GET /api/tgv/customers/diff/:dateSync
	@author     Danilo Salve
	@since      30/01/2020
	@version    12.1.27
/*/
//------------------------------------------------------------------------------
Method getCreditLimit() as Logical Class tgvCustomer
	oRest:setKeyHeaderResponse('Content-Type','application/json')
	::jResponse := ::oService:getCreditLimit(getPathParams('customerid'), getPathParams('customerstore'))
	oRest:setResponse(::jResponse:ToJson())
return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc}  tgvCustomer::getAll() as logical
	Obtem uma Lista de Clientes, possibilitando filtrar (QueryParam - FILTER) 
	os cliente e permitindo retornar todos	os campos ou somente os campos 
	especificados no QueryParam FIELDS.
	Observação: Ao utilizar o GETOnline o campo DELETED não será retornado.	
	@type		method
	@sample     GET /api/tgv/customers?FILTER=id eq '000001'&SORT='id'&FIELDS='internalid, name'
	@author		Danilo Salve
	@since		21/07/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getAll() as Logical Class tgvCustomer
	Local aURLFilter	:= getFilterParam() as Array
	Local cFields		:= getQueryParam('FIELDS') as Character
	Local cSort			:= getQueryParam('SORT') as Character

	GetPageAndPageSize(@::nPage, @::nPageSize)
	::jResponse:FromJson(::oService:getCustomers(::nPage, ::nPageSize, aURLFilter, cFields, cSort, /*customerId*/, /*customerStore*/))
	AnswerRest(::jResponse)
	
	aSize(aURLFilter, 0)
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc}  tgvCustomer::getById() as logical
	Deve obter um Cliente filtrando pelo Código e Loja.
	Obtem um Cliente filtrando pelo campo Filial e Codigo e Loja, considerando a 
	filial atual e o parametro cCustomerId da requisição, permitindo retornar todos
	os campos ou somente os campos especificados no QueryParam FIELDS.
	Observação: Ao utilizar o GETOnline o campo DELETED não será retornado.
	
	@type		method
	@sample     GET /api/tgv/customers/00000101?FIELDS='internalid, name'
	@author		Danilo Salve
	@since		21/07/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getById() as Logical Class tgvCustomer
	Local cFields		:= getQueryParam('FIELDS') as Character	

	oRest:setKeyHeaderResponse('Content-Type','application/json')
	::jResponse:FromJson(::oService:getCustomers(1, 10, {}, cFields, /*cSort*/, getPathParams('customerid'), getPathParams('customerstore')))

	If Empty(::jResponse["id"])
		SetRestFault(404, STR0001 ) //"Cliente nao encontrada"
	Else
		oRest:setResponse(::jResponse)
	EndIf
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvCustomer::postCustomer() as Logical
	Efetua a inclusão de um Cliente.
	@type		method
	@version	12.1.2210
	@author		Eduardo Paro / Squad CRM & Faturamento
	@since		03/05/2023
	@return		logical
/*/
//------------------------------------------------------------------------------
Method postCustomer() as Logical Class tgvCustomer
	Local jBody := GetRequestBody() as Json
	Local lCheckDbUseArea := IIF(lExistCheckDbUseArea, checkDbUseArea(), .T.)
	
	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	If lCheckDbUseArea .And. lExistSaveCustomer
		If jBody <> Nil
			::oService:saveCustomer(jBody, 3)
			FreeObj(jBody)
		Endif
	EndIf
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvCustomer::putCustomer() as Logical
	Efetua a alteração de um Cliente.
	@type		method
	@version	12.1.2210
	@author		Eduardo Paro / Squad CRM & Faturamento
	@since		03/05/2023
	@return		logical
/*/
//------------------------------------------------------------------------------
Method putCustomer() as Logical Class tgvCustomer
	Local jBody := GetRequestBody() as Json
	Local lCheckDbUseArea := IIF(lExistCheckDbUseArea, checkDbUseArea(), .T.)

	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	If lCheckDbUseArea .And. lExistSaveCustomer
		If jBody <> Nil
			::oService:saveCustomer(jBody, 4,  GetPathParams("customerid"),  GetPathParams("customerstore"))
			FreeObj(jBody)
		Endif
	EndIf
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvCustomer::deleteCustomer() as Logical
	Efetua a exclusão de um Cliente.
	@type		method
	@version	12.1.2210
	@author		Eduardo Paro / Squad CRM & Faturamento
	@since		03/05/2023
	@return		logical
/*/
//------------------------------------------------------------------------------
Method deleteCustomer() as Logical Class tgvCustomer
	Local lCheckDbUseArea := IIF(lExistCheckDbUseArea, checkDbUseArea(), .T.)
	
	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	If lCheckDbUseArea .And. lExistSaveCustomer
		::oService:saveCustomer(/*jBody*/, 5,  GetPathParams("customerid"),  GetPathParams("customerstore"))
	EndIf
Return .T.
