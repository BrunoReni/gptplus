#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'FWMVCDEF.CH'
#include 'PGV.SELLERFILTERS.CONTROLLER.CH'

namespace totvs.protheus.backoffice.pgvSellerFilters
using namespace tgv.util
Static lExistCanUseSellerFilter := FindFunction("tgv.util.canUseSellerFilter")

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters
    API para integração dos Filtros dos Vendedores - Utilizada no Portal Gestão de Vendas
    @type class
    @version 12.1.22010
    @author Danilo Salve / Squad CRM & Faturamento
    @since 30/09/2022
/*/
//--------------------------------------------------------------------------------------------
class pgvSellerFilters
	public data jResponse as json
	public data nPage as numeric
	public data nPageSize as numeric
	public data oService as object

	public method new() as object

	@Get("/api/pgv/sellerfilters/")
	public method getSellerFilters() as logical

	@Get("/api/pgv/sellerfilters/:uuid")
	public method getSellerFilterByUUID() as logical

	@Get("/api/pgv/sellerfilters/:uuid/items/")
	public method getItemsFromSellerFilter() as logical

	@Get("/api/pgv/sellerfilters/:uuid/items/:itemid")
	public method getItemsFromSellerFilterById() as logical

	@Post("/api/pgv/sellerfilters/")
	public method postSellerFilters() as logical
	
	@Put("/api/pgv/sellerfilters/:uuid")
	public method putSellerFilter() as logical

	@Delete("/api/pgv/sellerfilters/:uuid")
	public method deleteSellerFilter() as logical

	private method canUseSellerFilter() as logical
	private method isEmptyResponse() as logical
endClass

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::new() as object
    Cria uma nova instacia do objeto pgvSellerFilters
    @type method
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 30/09/2022
    @return object, nova instancia da API Filtros dos Vendedores
/*/
//---------------------------------------------------------------------------------------------
method new() as object class pgvSellerFilters
	::jResponse := jsonObject():new()
	::nPage     := 1
	::nPageSize := 10
	::oService  := SellerFiltersService():getInstance()
return Self

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::getSellerFilters() as logical
    Obtem uma lista de cabeçalhos de Filtros do Vendedor (AQ4)
    @type method
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 30/09/2022
    @return logical, retorna sempre verdadeiro
/*/
//---------------------------------------------------------------------------------------------
method getSellerFilters() as logical class pgvSellerFilters
	local aURLFilter	:= getFilterParam() as array
	local cFields		:= getQueryParam('FIELDS') as character
	local cSort			:= getQueryParam('SORT') as character

	If lExistCanUseSellerFilter .And. canUseSellerFilter(@oRest)
		getPageAndPageSize(@::nPage, @::nPageSize)
		::jResponse:fromJson(::oService:getSellerFilters(::nPage, ::nPageSize, /*cUUID*/,aURLFilter, cFields, cSort))
		AnswerRest(::jResponse)
	EndIf

	aSize(aURLFilter, 0)
return .T.

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::getSellerFilterByUUID() as logical
    Obtem o cabeçalho de um filtro do Vendedor (AQ4)
    @type method
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 30/09/2022
    @return logical, retorna sempre verdadeiro
/*/
//---------------------------------------------------------------------------------------------
method getSellerFilterByUUID() as logical class pgvSellerFilters
	local cFields	:= getQueryParam('FIELDS') as character

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	If lExistCanUseSellerFilter .And. canUseSellerFilter(@oRest)
		::jResponse:fromJson(::oService:getSellerFilters(1, 1,  getPathParams("uuid"), /*aURLFilter*/, cFields, /*cSort*/))

		if ::isEmptyResponse()
			setRestFault(404, FWhttpEncode(STR0001) ) // "Nenhum filtro localizado para o UUID informado"
		else
			oRest:setResponse(::jResponse)
		endIf
	EndIf

return .T.

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::getItemsFromSellerFilter() as logical
    Obtem uma lista de Itens um filtro do Vendedor (AQ5)
    @type method
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 30/09/2022
    @return logical, retorna sempre verdadeiro
/*/
//---------------------------------------------------------------------------------------------
method getItemsFromSellerFilter() as logical class pgvSellerFilters
	local aItems        := {} as array
	local aURLFilter	:= getFilterParam() as array
	local cFields       := getQueryParam('FIELDS') as character
	local cSort         := getQueryParam('SORT') as character

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	If lExistCanUseSellerFilter .And. canUseSellerFilter(@oRest)
		getPageAndPageSize(@::nPage, @::nPageSize)
		::jResponse:fromJson(::oService:getItemsFromSellerFilter(::nPage, ::nPageSize, getPathParams("uuid"), /*cItemID*/, aURLFilter, cFields, cSort))
		aItems := ::jResponse:getJsonObject( "items" )

		if ( !Empty( aItems ) .And. Len( aItems ) > 0 )
			oRest:setResponse(::jResponse)
		else
			setRestFault(404, FWhttpEncode(STR0002) ) // "Nenhum item localizado para o UUID informado"
		endIf
	EndIf

	aSize(aURLFilter, 0)
	aSize(aItems, 0)
return .t.

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::getItemsFromSellerFilterById() as logical
    Obtem um item especifico de um filtro do Vendedor (AQ5)
    @type method
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 30/09/2022
    @return logical, retorna sempre verdadeiro
/*/
//---------------------------------------------------------------------------------------------
method getItemsFromSellerFilterById() as logical class pgvSellerFilters
	local cFields	:= getQueryParam('FIELDS') as character

	oRest:setKeyHeaderResponse('Content-Type','application/json')
	If lExistCanUseSellerFilter .And. canUseSellerFilter(@oRest)
		::jResponse:fromJson(::oService:getItemsFromSellerFilter(::nPage, ::nPageSize, getPathParams("uuid"), getPathParams("itemid"), /*aURLFilter*/, cFields, /*cSort*/))

		if ::isEmptyResponse()
			setRestFault(404, FWhttpEncode(STR0003) ) // "O item informado não foi localizado para o UUID informado"
		else
			oRest:setResponse(::jResponse)
		endif
	EndIf

return .t.

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::postSellerFilters() as logical
	Efetua a inclusão de um filtro do Vendedor
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 05/10/2022
	@return logical, retorna sempre verdadeiro
/*/
//---------------------------------------------------------------------------------------------
method postSellerFilters() as logical class pgvSellerFilters
	local jBody := getRequestBody() as json

	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	If lExistCanUseSellerFilter .And. canUseSellerFilter(@oRest)
		if jBody <> Nil
			::oService:saveSellerFilter(jBody, MODEL_OPERATION_INSERT, /*cSalesBudgetId*/)
			FwFreeObj(jBody)
		endIf
	EndIf
return .t.

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::putSellerFilter() as logical
	Efetua a alteração de um filtro do Vendedor
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 05/10/2022
	@return logical, retorna sempre verdadeiro
/*/
//---------------------------------------------------------------------------------------------
method putSellerFilter() as logical class pgvSellerFilters
	local jBody := getRequestBody() as json

	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	If lExistCanUseSellerFilter .And. canUseSellerFilter(@oRest)
		if jBody <> Nil
			::oService:saveSellerFilter(jBody, MODEL_OPERATION_UPDATE, getPathParams("uuid"))
			FwFreeObj(jBody)
		endIf
	EndIf
return .t.
//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::deleteSellerFilter() as logical
	Efetua a exclusão de um filtro do Vendedor
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 05/10/2022
	@return logical, retorna sempre verdadeiro
/*/
//---------------------------------------------------------------------------------------------
method deleteSellerFilter() as logical class pgvSellerFilters
	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	If lExistCanUseSellerFilter .And. canUseSellerFilter(@oRest)
		::oService:saveSellerFilter(/*jBody*/, MODEL_OPERATION_DELETE, getPathParams("uuid"))
	EndIf
return .t.

//---------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvSellerFilters::isEmptyResponse() as logical
	Verifica se a Resposta possui todos os campos vazio.
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 05/10/2022
	@return logical, Se vazio retorna verdadeiro (.t.)
/*/
//---------------------------------------------------------------------------------------------
method isEmptyResponse() as logical class pgvSellerFilters
	local aProperties := ::jResponse:getNames() as array
	local nProperty as integer
	local isEmpty := .t.

	For nProperty := 1 to len(aProperties)
		If !Empty(::jResponse:getJsonObject(aProperties[nProperty]))
			isEmpty := .f.
			Exit
		Endif
	Next

	aSize(aProperties, 0)
return isEmpty
