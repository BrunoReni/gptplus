#include 'tlpp-core.th'
#include 'FWMVCDEF.CH'
#include 'PGV.SELLERFILTERS.DATA.CH'

namespace totvs.protheus.backoffice.pgvSellerFilters
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} SellerFiltersData    
    Classe responsavel por consultar, incluir, alterar e excluir um filtro do
    vendedor logado utilizando a API SellerFilters.
    @type class
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 03/10/2022
/*/
//------------------------------------------------------------------------------
class SellerFiltersData from FWAdapterBaseV2
	public method new() as object
	public method getSellerFilters()
	public method getItemsFromSellerFilter()
	public method saveSellerFilter()
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} SellerFiltersData::new() as object
	obtem uma nova instancia da classe SellerFiltersData
	@type method
	@version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 03/10/2022
	@return object, nova intancia da classe SellerFiltersData
/*/
//------------------------------------------------------------------------------
method new() as object class SellerFiltersData
  	_Super:New("GET", .T.)
return self

//----------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SellerFiltersData::getSellerFilters
    Obtem uma Lista ou um único filtro do Vendedor (AQ4)
    @type method
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 03/10/2022
    @param nPage, numeric, número da página
	@param nPageSize, numeric, Quantidade de registros por página
    @param cUUID, character, Código identificador UUID (AQ4_UUID) do filtro
	@param aURLFilter , array, Lista de Filtros no padrão do FWAdapterBaseV2
	@param cFields, character, Lista de campos que devem ser retornados
	@param cSort, character, Ordernação do Response
/*/
//----------------------------------------------------------------------------------------------------------------
method getSellerFilters(nPage as numeric, nPageSize as numeric, cUUID as character, aURLFilter as array, cFields as character, cSort as character) class SellerFiltersData
	Local aArea := getArea() as array
	local isAdmin := FwIsAdmin() as logical
	local cSeller := getSellerFromFilter(.F., .T.)
    local cWhere  := "" as character
	
	addMapHeader( self )
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( getQueryTGV("AQ4"))

    cWhere += " AQ4.AQ4_FILIAL = '" + FwxFilial("AQ4") + "' "
    cWhere += " AND AQ4.AQ4_VEND = '" + cSeller + "' "

    If !Empty( cUUID )
        cWhere += " AND AQ4.AQ4_UUID = '" + cUUID + "' "
    EndIf

    cWhere += " AND AQ4.D_E_L_E_T_  = ' ' "

	::SetWhere( cWhere )
	::SetOrder( " AQ4_FILIAL, AQ4_UUID " )

	If !Empty( aURLFilter ) .And. Len( aURLFilter ) > 0
		::SetUrlFilter( aURLFilter )
	EndIf

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf

	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	If canExecutewithUser(isAdmin, cSeller) .and. ::Execute()
		::FillGetResponse()
	EndIf

	restArea( aArea )
	aSize( aArea, 0 )
return nil

//----------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SellerFiltersData::getItemsFromSellerFilter
    Obtem uma Lista ou um único ITem de um filtro do Vendedor (AQ5)
    @type method
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 03/10/2022
    @param nPage, numeric, número da página
	@param nPageSize, numeric, Quantidade de registros por página
    @param cUUID, character, Código identificador UUID (AQ5_UUID) do filtro
	@param cItemId, character, Código do item do orçamento(AQ5_ITEM)
	@param aURLFilter , array, Lista de Filtros no padrão do FWAdapterBaseV2
	@param cFields, character, Lista de campos que devem ser retornados
	@param cSort, character, Ordernação do Response
/*/
//----------------------------------------------------------------------------------------------------------------
method getItemsFromSellerFilter(nPage as numeric, nPageSize as numeric, cUUID as character, cItemId as character, aURLFilter as array, cFields as character, cSort as character ) class SellerFiltersData
	Local aArea		:= getArea() as array
	local cWhere	:= "" as character
	
    addMapItem( self )
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( getQueryTGV("AQ5"))

    cWhere += " AQ5.AQ5_FILIAL = '" + FwxFilial("AQ5") + "' "
    cWhere += " AND AQ5.AQ5_UUID = '" + cUUID + "' "

    If !Empty( cItemId )
        cWhere += " AND AQ5.AQ5_ITEM = '" + cItemId + "' "
    EndIF

    cWhere += " AND AQ5.D_E_L_E_T_  = ' ' "

	::SetWhere( cWhere )
	::SetOrder( " AQ5_FILIAL, AQ5_UUID, AQ5_ITEM, AQ5_CODENT " )	

	If !Empty( aURLFilter ) .And. Len( aURLFilter ) > 0
		::SetUrlFilter( aURLFilter )
	EndIf

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf

	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	If ::Execute()
		::FillGetResponse()
	EndIf

	restArea( aArea )
	aSize( aArea, 0 )
return nil

//----------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SellerFiltersData::saveSellerFilter
	Deve efetuar a gravação de um filtro do Vendedor utilizando o JSON com o corpo do filtro e operação informada 
	nos parâmetros
	@type method
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 05/10/2022
	@param jSellerFilter, json, Dados do Filtro do Vendedor (Não informado caso exclusão)
	@param nOperation, numeric, Operação (3 - Inclusão, 4 - Alteração ou 5 - Exclusão)
	@param cUUID, character, Código identificador UUID (AQ4_UUID) do filtro
/*/
//----------------------------------------------------------------------------------------------------------------
method saveSellerFilter(jSellerFilter as json, nOperation as integer, cUUID as character) class SellerFiltersData
	local aArea			:= FwGetArea() as array
	local lContinue		:= .t. as logical
	local nStatusCode	:= 201 as numeric
	local oSellerFilter	:= pgvSellerFiltersBase():new() as object

	If oSellerFilter:setOperation( nOperation )
		If nOperation <> MODEL_OPERATION_INSERT
			dbSelectArea("AQ4")
			AQ4->(dbSetOrder(1)) // AQ4_FILIAL, AQ4_UUID
			If !AQ4->(dbSeek( FwXFilial('AQ4') + cUUID ))
				If nOperation == MODEL_OPERATION_UPDATE
					nOperation := MODEL_OPERATION_INSERT
					oSellerFilter:setOperation(MODEL_OPERATION_INSERT)
				Else
					oSellerFilter:setErrorMessage( STR0001, .T. ) // "Nenhum filtro localizado para o UUID informado"
					lContinue := .F.
					nStatusCode := 404
				Endif
			Else
				oSellerFilter:cUUID := cUUID
				oSellerFilter:cSellerId := AQ4->AQ4_VEND
				nStatusCode := 200
			Endif
		Endif

		If lContinue .And. oSellerFilter:fromExecAuto(jSellerFilter)
		    If oSellerFilter:commitData()
				oRest:setStatusCode( nStatusCode )
				oRest:setResponse( getSuccessResponse(nOperation, oSellerFilter:cUUID) )
			Else
				nStatusCode := 400
				lContinue := .F.
            Endif
		Endif
	Endif

	If !lContinue
		oRest:setStatusCode( nStatusCode )
		oRest:setResponse( getErrorResponse(nOperation, nStatusCode, oSellerFilter:getErrorMessage()) )
	Endif

	oSellerFilter:Destroy()
    FwFreeObj(oSellerFilter)
	FwrestArea( aArea )
	aSize( aArea, 0)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapHeader
	Cria o Mapa de campos Protheus x API (Filtros do Vendedor)
	@type function
	@version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 03/10/2022
	@param oSelf, object, objeto com herança da classe FWAdapterBaseV2
/*/
//------------------------------------------------------------------------------
static function addMapHeader( oSelf as Object )
	oSelf:AddMapFields( "branchid"      , "AQ4_FILIAL"  , .T., .F., { "AQ4_FILIAL"  , 'C', GetFieldLength("AQ4_FILIAL") , 0 } )
	oSelf:AddMapFields( "uuid"          , "AQ4_UUID"    , .T., .F., { "AQ4_UUID"    , 'C', GetFieldLength("AQ4_UUID")   , 0 } )
	oSelf:AddMapFields( "sellerid"      , "AQ4_VEND"    , .T., .F., { "AQ4_VEND"    , 'C', GetFieldLength("AQ4_VEND")   , 0 } )
	oSelf:AddMapFields( "schemaid"      , "AQ4_SCHEMA"  , .T., .F., { "AQ4_SCHEMA"  , 'C', GetFieldLength("AQ4_SCHEMA") , 0 } )
	oSelf:AddMapFields( "inclusiondate" , "AQ4_DATA"    , .T., .F., { "AQ4_DATA"    , 'D', GetFieldLength("AQ4_DATA")   , 0 } )
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} addMapItem
	Cria o Mapa de campos Protheus x API (Itens do filtro do Vendedor)
	@type function
	@version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 03/10/2022
	@param oSelf, object, objeto com herança da classe FWAdapterBaseV2
/*/
//------------------------------------------------------------------------------
static function addMapItem( oSelf as object )
	oSelf:AddMapFields( "branchid"  , "AQ5_FILIAL"  , .T., .F., { "AQ5_FILIAL"  , 'C', GetFieldLength("AQ5_FILIAL")	, 0 } )
	oSelf:AddMapFields( "uuid"      , "AQ5_UUID"    , .T., .F., { "AQ5_UUID"    , 'C', GetFieldLength("AQ5_UUID")   , 0 } )
	oSelf:AddMapFields( "itemid"    , "AQ5_ITEM"    , .T., .F., { "AQ5_ITEM"    , 'C', GetFieldLength("AQ5_ITEM")	, 0 } )
	oSelf:AddMapFields( "entityid"  , "AQ5_CODENT"  , .T., .F., { "AQ5_CODENT"  , 'C', GetFieldLength("AQ5_CODENT") , 0 } )
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} getSuccessResponse
	Obtem uma resposta de sucesso conforme operação informada
	@type function
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 07/10/2022
	@param nOperation, numeric, Operação (3 - Inclusão, 4 - Alteração ou 5 - Exclusão)
	@param cUUID, character, Código identificador UUID (AQ4_UUID) do filtro
	@return json, Objeto JSON com a messagem de sucesso formatada
/*/
//------------------------------------------------------------------------------
static function getSuccessResponse(nOperation as integer, cUUID as Character) as json
	local jResponse		:= jsonObject():New() as json
	local jSellerFilter	:= jsonObject():New() as json
	local aSellerFilters:= {} as array

	If nOperation == MODEL_OPERATION_INSERT
		jResponse['messageSuccess'] := FWHttpEncode( STR0002 ) // "Filtro incluído com sucesso."
	Elseif nOperation == MODEL_OPERATION_UPDATE
		jResponse['messageSuccess'] := FWHttpEncode( STR0003 ) // "Filtro alterado com sucesso."
	Elseif nOperation == MODEL_OPERATION_DELETE
		jResponse['messageSuccess'] := FWHttpEncode( STR0004 ) // "Filtro excluído com sucesso."
	Endif

	jResponse['status'] := "OK"

	If nOperation <> MODEL_OPERATION_DELETE
		jSellerFilter['uuid'] := cUUID
		aAdd(aSellerFilters, jSellerFilter)
		jResponse['items'] := aClone(aSellerFilters)
	Endif

	FreeObj(jSellerFilter)
	aSize(aSellerFilters, 0)
return jResponse

//------------------------------------------------------------------------------
/*/{Protheus.doc} getErrorResponse
	Obtem uma resposta de erro conforme operação informada
	@type function
	@version 12.1.2210
	@author Danilo Salve / Squad CRM & Faturamento
	@since 07/10/2022
	@param nOperation, numeric, Operação (3 - Inclusão, 4 - Alteração ou 5 - Exclusão)
	@param nCode, numeric, Código do Erro
	@param cError, character, Detalhe do erro
	@return json, Objeto JSON com o erro formatado
/*/
//------------------------------------------------------------------------------
static function getErrorResponse(nOperation as integer, nCode as integer, cError as character) as json
	local jResponse	:= jsonObject():New() as json

	jResponse['code'] := nCode
	jResponse['type'] := FWHttpEncode('error')

	If nOperation == MODEL_OPERATION_INSERT
		jResponse['message'] := FWHttpEncode( STR0005 ) // "Não foi possivel incluir o filtro do vendedor"
	Elseif nOperation == MODEL_OPERATION_UPDATE
		jResponse['message'] := FWHttpEncode( STR0006 ) // "Não foi possivel alterar o filtro do vendedor"
	Elseif nOperation == MODEL_OPERATION_DELETE
		jResponse['message'] := FWHttpEncode( STR0007 ) // "Não foi possivel excluir o filtro do vendedor"
	Endif

	jResponse['detailedMessage'] := FWHttpEncode(cError)

return jResponse
