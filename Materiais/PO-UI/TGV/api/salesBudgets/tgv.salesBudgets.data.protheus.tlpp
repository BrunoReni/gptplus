#include 'tlpp-core.th'
#INCLUDE 'FWMVCDEF.CH'
#include "tlpp-rest.th"
#include 'tgv.salesbudgets.data.protheus.ch'

namespace totvs.protheus.backoffice.tgvSalesBudgets
using namespace tgv.util

#DEFINE LABEL 1
#DEFINE VALUE 2
#DEFINE INCLUI 3
#DEFINE ALTERA 4
#DEFINE EXCLUI 5

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusData
	Efetua a consulta dos Orçamentos de vendas no Protheus.
	@type class
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@version 12.1.33
/*/
//------------------------------------------------------------------------------
class SalesBudgetsProtheusData from FWAdapterBaseV2
	public data lItems 				as logical
	public data internalIdLength	as numeric
	public data paymentIdLength		as numeric
	public data budgetinternalid	as numeric
	public data externalitemid		as numeric
	public data cBranchSE4			as character

	public method new() as Object
	public method getHeaders()
	public method getItems()
	public method RowToJson()
	Public Method saveSalesBudgets() as logical
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusData::new() as object
	obtem uma nova instancia da classe SalesBudgetsProtheusData
	@type method
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@return object, nova intancia da classe SalesBudgetsProtheusData
/*/
//------------------------------------------------------------------------------
method new() as object class SalesBudgetsProtheusData
	::cBranchSE4 := FwXFilial("SE4")
  	_Super:New("GET", .T.)
return Self

//----------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusData::getHeaders
	Obtem uma lista de Orçamentos de Vendas (SCJ).
	@type method
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@param nPage, numeric, número da página
	@param nPageSize, numeric, Quantidade de registros por página
	@param cCustomer, character, Código do cliente padrão do orçamento (MV_ORCLIPD)
	@param cStore, character, loja utilizada pelo cliente padrão do orçamento (MV_ORCLIPD)
	@param cSalesBudgetID, character, Código do Orçamento de Venda (CJ_NUM)
	@param cProduct, character, Código ou descrição do produto utilizado no filtro de Orçamentos x Produtos
	@param aURLFilter , array, Lista de Filtros no padrão do FWAdapterBaseV2
	@param cFields, character, Lista de campos que devem ser retornados
	@param cSort, character, Ordernação do Response
/*/
//----------------------------------------------------------------------------------------------------------------
method getHeaders(nPage as numeric, nPageSize as numeric, cCustomer as character, cStore as character, cSalesBudgetID as character, cProduct as character,;
 aURLFilter as array, cFields as character, cSort as character) class SalesBudgetsProtheusData
	Local aArea := getArea() as Array
	local isAdmin := FwIsAdmin() as logical
	local cSeller := getSellerFromFilter(isAdmin, .T.)

	::lItems := .f.
	addMapHeader( self, .F. )
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( getQueryHeader(.f., cSeller, cProduct, cCustomer, cStore, cSalesBudgetID))
	::SetWhere( getSalesBudgetsFilter(/*cDateSync*/, cSalesBudgetID))
	::SetOrder( "SCJ.CJ_FILIAL, SCJ.CJ_NUM, SCJ.CJ_CLIENTE, SCJ.CJ_LOJA " )

	If !Empty( aURLFilter ) .And. Len( aURLFilter ) > 0
		::SetUrlFilter( aURLFilter )
	Endif

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf

	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	If canExecutewithUser(isAdmin, cSeller) .and. ::Execute()
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize( aArea, 0 )
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusData::getItems
	Obtem uma lista de itens do Orçamentos de Vendas (SCK).
	@type method
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 03/03/2021
	@param nPage, numeric, número da página
	@param nPageSize, numeric, Quantidade de registros por página
	@param cCustomer, character, Código do cliente padrão do orçamento (MV_ORCLIPD)
	@param cStore, character, loja utilizada pelo cliente padrão do orçamento (MV_ORCLIPD)
	@param cSalesBudgetID, character, Código do Orçamento de Venda (CJ_NUM)
	@param cItemId, character, Código do item do orçamento(CK_ITEM)
	@param aURLFilter , array, Lista de Filtros no padrão do FWAdapterBaseV2
	@param cFields, character, Lista de campos que devem ser retornados
	@param cSort, character, Ordernação do Response
/*/
//------------------------------------------------------------------------------
method getItems(nPage as numeric, nPageSize as numeric, cCustomer as character, cStore as character, cSalesBudgetID as character,;
	 cItemId as character, aURLFilter as array, cFields as character, cSort as character ) class SalesBudgetsProtheusData
	Local aArea	:= getArea() as Array
	local isAdmin := FwIsAdmin() as logical
	local cSeller := getSellerFromFilter(isAdmin)

	::lItems := .t.
	addMapItem( self, .F. )
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( getQueryItems(cSeller, cCustomer, cStore) )
	::SetWhere( getSalesBudgetsFilter(/*cDateSync*/, cSalesBudgetID, cItemId) )
	::SetOrder( " CK_FILIAL, CK_NUM, CK_ITEM " )

	If !Empty( aURLFilter ) .And. Len( aURLFilter ) > 0
		::SetUrlFilter( aURLFilter )
	Endif

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf

	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	If canExecutewithUser(isAdmin, cSeller) .and. ::Execute()
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize( aArea, 0 )
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusData::RowToJson
	Efetua a conversão da consulta SQL em um objeto JSON
	@type method
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@param cAlias, character, Retorno da consulta
	@param aFields, array, Lista de Campos utilizados no retorno
	@param lEmpty, logical, Parametro reservado
/*/
//------------------------------------------------------------------------------
method RowToJson( cAlias as Character, aFields as Array, lEmpty as Logical) class SalesBudgetsProtheusData
	local nLoop		as integer
	local cContent	as character

	if (cAlias)->(!Eof()) .And. (cAlias)->(!Bof()) .or. ::oJsonObj:lList
		for nLoop := 1 to len( aFields )
			cContent := ::ValueToJson( aFields[nLoop, LABEL], (cAlias)->( &(aFields[nLoop, VALUE])))
			self:oJsonObj:setProp( aFields[nLoop, LABEL], cContent, lEmpty  )
		next

		if ::lItems
			if canConvertField(cAlias, 'CK_FILIAL') .and. canConvertField(cAlias, 'CK_NUM') .and. canConvertField(cAlias, 'CK_ITEM')
				self:oJsonObj:setProp( "internalid"	, rtrim((cAlias)->CK_FILIAL + (cAlias)->CK_NUM + (cAlias)->CK_ITEM) , .F. )
			endif

			if canConvertField(cAlias, 'CJ_FILIAL') .and. canConvertField(cAlias, 'CJ_NUM')
				self:oJsonObj:setProp( "budgetinternalid"	, rtrim((cAlias)->CJ_FILIAL + (cAlias)->CJ_NUM) , .F. )
			endif

			if canConvertField(cAlias, 'CJ_NUMEXT') .and. canConvertField(cAlias, 'CK_ITEM')
				self:oJsonObj:setProp( "externalitemid"	, rtrim((cAlias)->CJ_NUMEXT + (cAlias)->CK_ITEM) , .F. )
			endif
		else
			if canConvertField(cAlias, 'CJ_FILIAL') .and. canConvertField(cAlias, 'CJ_NUM')
				self:oJsonObj:setProp( "internalid"	, rtrim((cAlias)->CJ_FILIAL + (cAlias)->CJ_NUM) , .F. )
			endif

			if canConvertField(cAlias, 'CJ_CONDPAG')
				self:oJsonObj:setProp( "paymentinternalid"	, rtrim(::cBranchSE4 + (cAlias)->CJ_CONDPAG) , .F. )
			endif
		endif
	endIf
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapHeader
	Cria o Mapa de campos Protheus x API (Orçamento de vendas)
	@type function
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@param oSelf, object, objeto com herança da classe FWAdapterBaseV2
	@param isSync, logical, Utiliza versão do PO-SYNC
/*/
//------------------------------------------------------------------------------
function addMapHeader( oSelf as Object, isSync as Logical )
	Local aInternalId         	 := GetInternalId( { "CJ_FILIAL", "CJ_NUM" } )
	Local aPaymentInternalId  	 := GetInternalId( { "E4_FILIAL", "E4_CODIGO" } )

	if isSync
		oSelf:AddMapFields( "internalid", "internalid" 	, .T., .F., { "internalid"	, 'C', aInternalId[1] , 0 }, "' '")
		oSelf:AddMapFields( "deleted"	, "deleted"     , .T., .F., { "deleted"		, 'C', 1, 0 }, "SCJ.D_E_L_E_T_" )
		oSelf:AddMapFields( "STAMP"		, "STAMP"		, .T., .F., { "STAMP"		, 'C', 25, 0 }, getMaxStamp())
		oSelf:AddMapFields( "paymentinternalid" , "paymentinternalid" 	, .T., .F., { "paymentinternalid"	, 'C', aPaymentInternalId[1] , 0 }, "' '")
	Endif

	oSelf:AddMapFields( "branchid"          , "CJ_FILIAL"	, .T., .F., { "CJ_FILIAL"	, 'C', GetFieldLength("CJ_FILIAL")  , 0 } )
	oSelf:AddMapFields( "budgetid"          , "CJ_NUM"	    , .T., .F., { "CJ_NUM"	    , 'C', GetFieldLength("CJ_NUM")     , 0 } )
	oSelf:AddMapFields( "externalid"        , "CJ_NUMEXT"   , .T., .F., { "CJ_NUMEXT"   , 'C', GetFieldLength("CJ_NUMEXT")  , 0 } )
	oSelf:AddMapFields( "pricelistid"       , "CJ_TABELA"   , .T., .F., { "CJ_TABELA"	, 'C', GetFieldLength("CJ_TABELA")  , 0 } )
	oSelf:AddMapFields( "paymentconditionid", "CJ_CONDPAG"  , .T., .F., { "CJ_CONDPAG"	, 'C', GetFieldLength("CJ_CONDPAG") , 0 } )
	oSelf:AddMapFields( "customerid"		, "CJ_CLIENTE"  , .T., .F., { "CJ_CLIENTE"	, 'C', GetFieldLength("CJ_CLIENTE") , 0 } )
	oSelf:AddMapFields( "customerstore"		, "CJ_LOJA" 	, .T., .F., { "CJ_LOJA"		, 'C', GetFieldLength("CJ_LOJA") 	, 0 } )
	oSelf:AddMapFields( "prospectid"		, "CJ_PROSPE"  	, .T., .F., { "CJ_PROSPE"	, 'C', GetFieldLength("CJ_PROSPE")	, 0 } )
	oSelf:AddMapFields( "prospectstore"		, "CJ_LOJPRO" 	, .T., .F., { "CJ_LOJPRO"	, 'C', GetFieldLength("CJ_LOJPRO")	, 0 } )
	oSelf:AddMapFields( "issuedate"         , "CJ_EMISSAO"  , .T., .F., { "CJ_EMISSAO"	, 'D', GetFieldLength("CJ_EMISSAO") , 0 } )
	oSelf:AddMapFields( "freighttype"       , "CJ_TPFRETE"  , .T., .F., { "CJ_TPFRETE"	, 'C', GetFieldLength("TPFRETE") 	, 0 } )
	oSelf:AddMapFields( "freight"           , "CJ_FRETE"    , .T., .F., { "CJ_FRETE"	, 'N', GetFieldLength("CJ_FRETE")	, GetFieldDecimal("CJ_FRETE") } )
	oSelf:AddMapFields( "insurance"         , "CJ_SEGURO"   , .T., .F., { "CJ_SEGURO"	, 'N', GetFieldLength("CJ_SEGURO")	, GetFieldDecimal("CJ_SEGURO") } )
	oSelf:AddMapFields( "expenses"          , "CJ_DESPESA"  , .T., .F., { "CJ_DESPESA"	, 'N', GetFieldLength("CJ_DESPESA")	, GetFieldDecimal("CJ_DESPESA") } )
	oSelf:AddMapFields( "discount"          , "CJ_DESC1"    , .T., .F., { "CJ_DESC1"	, 'N', GetFieldLength("CJ_DESC1")	, GetFieldDecimal("CJ_DESC1") } )
	oSelf:AddMapFields( "currencyid"        , "CJ_MOEDA"    , .T., .F., { "CJ_MOEDA"    , 'N', GetFieldLength("CJ_MOEDA")	, GetFieldDecimal("CJ_MOEDA") } )
	oSelf:AddMapFields( "amount"            , "TOTAL"       , .T., .F., { "TOTAL"       , 'N', GetFieldLength("CK_VALOR")	, GetFieldDecimal("CK_VALOR") }, "TOTAL" )
	oSelf:AddMapFields( "releasetype"       , "CJ_TIPLIB"   , .T., .F., { "CJ_TIPLIB"   , 'C', GetFieldLength("CJ_TIPLIB")	, 0 } )
	oSelf:AddMapFields( "customertype"      , "CJ_TIPOCLI"  , .T., .F., { "CJ_TIPOCLI"  , 'C', GetFieldLength("CJ_TIPOCLI")	, 0 } )
	oSelf:AddMapFields( "status"            , "CJ_STATUS"   , .T., .F., { "CJ_STATUS"   , 'C', GetFieldLength("CJ_STATUS")	, 0 } )
	oSelf:AddMapFields( "businessproposal"  , "CJ_PROPOST"  , .T., .F., { "CJ_PROPOST"	, 'C', GetFieldLength("CJ_PROPOST")	, 0 } )
	if cPaisLoc == "BRA"
		oSelf:AddMapFields( "intermediaryid"	, "CJ_CODA1U"   , .T., .F., { "CJ_CODA1U"	, 'C', GetFieldLength("CJ_CODA1U")	, 0 } )
		oSelf:AddMapFields( "purchaserpresence"	, "CJ_INDPRES"	, .T., .F., { "CJ_INDPRES"	, 'C', GetFieldLength("CJ_INDPRES")	, 0 } )
	endIf
	oSelf:AddMapFields( "typeofoperation"	, "CK_OPER" 	, .T., .F., { "CK_OPER"		, 'C', GetFieldLength("CK_OPER")	, 0 }, "SCKOPER.CK_OPER" )

	aSize(aInternalId, 0)
	aSize(aPaymentInternalId, 0)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} addMapItem
	Cria o Mapa de campos Protheus x API (Itens do orçamento de vendas)
	@type function
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 03/03/2021
	@param oSelf, object, objeto com herança da classe FWAdapterBaseV2
	@param isSync, logical, Utiliza versão do PO-SYNC
/*/
//------------------------------------------------------------------------------
function addMapItem( oSelf as object, isSync as logical )
	Local aInternalId   := GetInternalId( { "CK_FILIAL", "CK_NUM", "CK_ITEM" } )
	Local aItemExtId	:= GetInternalId( { "CJ_NUMEXT", "CK_ITEM"} )
	Local aBudgetId     := GetInternalId( { "CJ_FILIAL", "CJ_NUM" } )

	if isSync
		oSelf:AddMapFields( "internalid"		, "internalid"		, .T., .F., { "internalid"		, 'C', aInternalId[1]   , 0 }, "' '")
		oSelf:AddMapFields( "budgetinternalid"	, "budgetinternalid", .T., .F., { "budgetinternalid", 'C', aBudgetId[1]		, 0 }, "' '")
		oSelf:AddMapFields( "externalitemid"	, "externalitemid"	, .T., .F., { "externalitemid"	, 'C', aItemExtId[1]    , 0 }, "' '")
		oSelf:AddMapFields( "deleted"			, "deleted"			, .T., .F., { "deleted"			, 'C', 1, 0 }, "SCK.D_E_L_E_T_" )
	Endif

	oSelf:AddMapFields( "externalid"		, "CJ_NUMEXT"		, .T., .F., { "CJ_NUMEXT"		, 'C', GetFieldLength("CJ_NUMEXT")	, 0 } )
	oSelf:AddMapFields( "branchid"			, "CK_FILIAL"		, .T., .F., { "CK_FILIAL"		, 'C', GetFieldLength("CK_FILIAL")	, 0 } )
	oSelf:AddMapFields( "branchheaderid"	, "CJ_FILIAL"		, .T., .F., { "CJ_FILIAL"		, 'C', GetFieldLength("CJ_FILIAL")	, 0 } )
	oSelf:AddMapFields( "budgetid"			, "CK_NUM"			, .T., .F., { "CK_NUM"			, 'C', GetFieldLength("CK_NUM")		, 0 } )
	oSelf:AddMapFields( "budgetheaderid"	, "CJ_NUM"			, .T., .F., { "CJ_NUM"			, 'C', GetFieldLength("CJ_NUM")		, 0 } )
	oSelf:AddMapFields( "itemid"			, "CK_ITEM"			, .T., .F., { "CK_ITEM"			, 'C', GetFieldLength("CK_ITEM")	, 0 } )
	oSelf:AddMapFields( "productid"			, "CK_PRODUTO"		, .T., .F., { "CK_PRODUTO"		, 'C', GetFieldLength("CK_PRODUTO")	, 0 } )
	oSelf:AddMapFields( "description"		, "CK_DESCRI"		, .T., .F., { "CK_DESCRI"		, 'C', GetFieldLength("CK_DESCRI")	, 0 } )
	oSelf:AddMapFields( "quantity"			, "CK_QTDVEN"		, .T., .F., { "CK_QTDVEN"		, 'N', GetFieldLength("CK_QTDVEN")	, GetFieldDecimal("CK_QTDVEN") } )
	oSelf:AddMapFields( "pricelist"			, "CK_PRUNIT"		, .T., .F., { "CK_PRUNIT"		, 'N', GetFieldLength("CK_PRUNIT")	, GetFieldDecimal("CK_PRUNIT") } )
	oSelf:AddMapFields( "unitprice"			, "CK_PRCVEN"		, .T., .F., { "CK_PRCVEN"		, 'N', GetFieldLength("CK_PRCVEN")	, GetFieldDecimal("CK_PRCVEN") } )
	oSelf:AddMapFields( "amount"			, "CK_VALOR"		, .T., .F., { "CK_VALOR"		, 'N', GetFieldLength("CK_VALOR")	, GetFieldDecimal("CK_VALOR")  } )
	oSelf:AddMapFields( "discount"			, "CK_DESCONT"		, .T., .F., { "CK_DESCONT"		, 'N', GetFieldLength("CK_DESCONT")	, GetFieldDecimal("CK_DESCONT") } )
	oSelf:AddMapFields( "discountamount"	, "CK_VALDESC"		, .T., .F., { "CK_VALDESC"		, 'N', GetFieldLength("CK_VALDESC")	, GetFieldDecimal("CK_VALDESC") } )
	oSelf:AddMapFields( "outflowtype"		, "CK_TES"			, .T., .F., { "CK_TES"			, 'C', GetFieldLength("CK_TES")		, 0 } )

	aSize(aInternalId, 0)
	aSize(aBudgetId, 0)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} getMaxStamp
	Monta a expressão SQL utilizado para retorna o status do Orçamento de Venda
	@type function
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@version 12.1.33
	@return characterm, Expressão utilizada na consulta
/*/
//------------------------------------------------------------------------------
static function getMaxStamp() as character
return " CASE WHEN SCJ.S_T_A_M_P_ < SCKSTAMP THEN SCKSTAMP ELSE SCJ.S_T_A_M_P_ END "

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} getQueryHeader
	Obtem um expressão SQL utilizada para filtrar Orçamentos de Vendas na tabela SCJ
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param isSync, logical, Utiliza versão do PO-SYNC
	@param cSeller, character, Código do Vendedor
	@param cFilterProduct, character, Código ou descrição do produto utilizado no filtro de Orçamentos x Produtos
	@param cCustomer, character, Código do Cliente padrão dos Orçamento (MV_ORCLIPD)
	@param cStore, character, Loja do Cliente Padrão do Orçamento (MV_ORCLIPD)
	@param cSalesBudgetID, character, Código do Orçamento
	@return character, expressão SQL utilizada para obter os registros do orçamentos de vendas
/*/
//---------------------------------------------------------------------------------------------
function getQueryHeader(isSync as logical, cSeller as character, cFilterProduct as character, cCustomer as character, cStore as character,;
	cSalesBudgetID as character) as character
	local cQuery	:= ""                                                     as character
	Local cTableSCK := RetSqlName("SCK")                                      as character
	Local cBranchSCK:= FwXFilial("SCK")                                       as character

	cQuery += " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName("SCJ") + " SCJ "

	// Join com os filtros de clientes
	If isSync
		cQuery +=' INNER JOIN '+RetSqlName('AQ5')+' AQ5 '
		cQuery +=' ON'
		cQuery +=' SCJ.CJ_NUM = AQ5.AQ5_CODENT'
		cQuery +=' INNER JOIN '+RetSqlName('AQ4')+' AQ4 '
		cQuery +=' ON'
		cQuery +=' AQ5.AQ5_UUID = AQ4.AQ4_UUID'
		cQuery +=' AND AQ5.AQ5_FILIAL = AQ4.AQ4_FILIAL'
		cQuery +=' AND AQ5.D_E_L_E_T_ = AQ4.D_E_L_E_T_'
	EndIf

	// Join com subquery para buscar o valor total do orcamento
	cQuery += " INNER JOIN ( "
	cQuery += " SELECT SCKTOTAL.CK_FILIAL, SCKTOTAL.CK_NUM, SUM(SCKTOTAL.CK_VALOR) TOTAL "
	cQuery += IIF(isSync, ", MAX(SCKTOTAL.S_T_A_M_P_) SCKSTAMP ", "")
	cQuery += " FROM " + cTableSCK + " SCKTOTAL "
	cQuery += " WHERE SCKTOTAL.CK_FILIAL = '" + cBranchSCK + "' AND "
	cQuery += IIF(Empty( cSalesBudgetID ), "", "SCKTOTAL.CK_NUM = '" + cSalesBudgetID + "' AND ")
	cQuery += " SCKTOTAL.D_E_L_E_T_ = ' ' "
	cQuery += " GROUP BY SCKTOTAL.CK_FILIAL, SCKTOTAL.CK_NUM ) SCKTOTAL ON "
	cQuery += " SCKTOTAL.CK_FILIAL = SCJ.CJ_FILIAL AND SCKTOTAL.CK_NUM = SCJ.CJ_NUM "

	// Join com subquery para buscar o codigo da operacao fiscal do primeiro item do orcamento
	cQuery += " INNER JOIN ( "
	cQuery += " SELECT SCKOPER.CK_FILIAL, SCKOPER.CK_NUM, SCKOPER.CK_OPER "
	If !isSync
		cQuery += ", MAX(SCKOPER.S_T_A_M_P_) S_T_A_M_P_ "
	Endif
	cQuery += " FROM " + RetSqlName("SCK") + " SCKOPER "
	cQuery += " 	INNER JOIN ( "
	cQuery += " 		SELECT SCKMIN.CK_FILIAL, SCKMIN.CK_NUM, MIN(SCKMIN.CK_ITEM) CK_ITEM "
	cQuery += " 		FROM " + RetSqlName("SCK") + " SCKMIN "
	cQuery += "			WHERE SCKMIN.CK_FILIAL = '" + FwXFilial("SCK") + "' AND SCKMIN.D_E_L_E_T_ = ' ' "
	cQuery += "			GROUP BY SCKMIN.CK_FILIAL, SCKMIN.CK_NUM "
	cQuery += "		) SCKMIN"
	cQuery += " 	ON SCKOPER.CK_FILIAL = SCKMIN.CK_FILIAL AND SCKOPER.CK_NUM = SCKMIN.CK_NUM AND SCKOPER.CK_ITEM = SCKMIN.CK_ITEM "

	If !isSync .Or. !Empty( cFilterProduct )		
		cQuery += " WHERE "
		If !Empty( cFilterProduct )
			cQuery += "SCKOPER.CK_PRODUTO LIKE '%" + cFilterProduct + "%' OR SCKOPER.CK_DESCRI LIKE '%" + cFilterProduct + "%'"
		Endif

		If !isSync
			cQuery += IIF(!Empty( cFilterProduct ), "AND", "")
			cQuery += " SCKOPER.D_E_L_E_T_ = ' ' "
		Endif
	Endif

	cQuery += " 	GROUP BY SCKOPER.CK_FILIAL, SCKOPER.CK_NUM, SCKOPER.CK_OPER	"
	cQuery += " ) SCKOPER "
	cQuery += " ON SCKOPER.CK_FILIAL = SCJ.CJ_FILIAL AND SCKOPER.CK_NUM = SCJ.CJ_NUM "

	// Join com subquery para filtrar os orcamentos pelo filtro de produto
	if !isSync .And. !Empty(cFilterProduct)
		cQuery += " INNER JOIN ( "
		cQuery += " SELECT CK_NUM "
		cQuery += " FROM " + cTableSCK + " SCK "
		cQuery += " WHERE SCK.CK_FILIAL = '" + cBranchSCK + "'"
		cQuery += " AND ( SCK.CK_PRODUTO LIKE '%" + cFilterProduct + "%' OR SCK.CK_DESCRI LIKE '%" + cFilterProduct + "%' ) "
		cQuery += " AND SCK.D_E_L_E_T_ = ' ' "
		cQuery += " GROUP BY CK_NUM "
		cQuery += " ) SCK ON "
		cQuery += " SCK.CK_NUM = SCJ.CJ_NUM "
	endif

	cQuery += getFilterSeller(cSeller, cCustomer, cStore)
	cQuery += " WHERE #QueryWhere#"

return cQuery

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} getQueryItems
	Obtem um expressão SQL utilizada para filtrar os itens do Orçamentos de Vendas na tabela SCK
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param cSeller, character, Código do Vendedor
	@param cCustomer, character, Código do cliente padrão do orçamento (MV_ORCLIPD)
	@param cStore, character, loja utilizada pelo cliente padrão do orçamento (MV_ORCLIPD)
	@param isSync, logical, Utiliza versão do PO-SYNC
	@return character, expressão SQL utilizada para obter os itens do orçamentos de vendas
/*/
//---------------------------------------------------------------------------------------------
function getQueryItems(cSeller as character, cCustomer as character, cStore as character, isSync as logical) as character
	local cQuery   := ""                                                     as character
	local cConcate := IIF(AllTrim( Upper( TcGetDb() ) ) == "MSSQL","+","||") as Character

	default isSync := .F.

	cQuery += " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName("SCJ") + " SCJ "
	cQuery += " INNER JOIN " + RetSqlName("SCK") + " SCK "
	cQuery += " ON SCJ.CJ_FILIAL = SCK.CK_FILIAL AND SCJ.CJ_NUM = SCK.CK_NUM AND SCK.D_E_L_E_T_ = ' ' "

	if isSync
		cQuery +=' INNER JOIN '+RetSqlName('AQ5')+' AQ5 '
		cQuery +=' ON'
		cQuery +=' SCK.CK_NUM '+cConcate+' SCK.CK_ITEM '+cConcate+' SCK.CK_PRODUTO = AQ5.AQ5_CODENT'
		cQuery +=' INNER JOIN '+RetSqlName('AQ4')+' AQ4 '
		cQuery +=' ON'
		cQuery +=' AQ5.AQ5_UUID = AQ4.AQ4_UUID'
		cQuery +=' AND AQ5.AQ5_FILIAL = AQ4.AQ4_FILIAL'
		cQuery +=' AND AQ5.D_E_L_E_T_ = AQ4.D_E_L_E_T_'
	endIf

	cQuery += getFilterSeller(cSeller, cCustomer, cStore)
	cQuery += " WHERE #QueryWhere#"
return cQuery

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} getFilterSeller
	obter filtro de Vendedor
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param cSeller, character, Código do Vendedor
	@param cCustomer, character, Código do cliente padrão do orçamento (MV_ORCLIPD)
	@param cStore, character, loja utilizada pelo cliente padrão do orçamento (MV_ORCLIPD)
/*/
//---------------------------------------------------------------------------------------------
static function getFilterSeller(cSeller as character, cCustomer as character, cStore as character) as character
	local cFilter := ""	as character
	
	if !Empty(cSeller)
		cFilter += " LEFT JOIN " + RetSqlName("SUS") + " SUS ON "
		cFilter += " SUS.US_FILIAL = '" + FwXFilial("SUS") + "' AND SUS.US_COD = SCJ.CJ_PROSPE AND SUS.US_LOJA = SCJ.CJ_LOJPRO "
		cFilter += " AND SUS.US_VEND = '" + cSeller + "' AND SUS.D_E_L_E_T_ = ' ' "
		cFilter += " INNER JOIN " + RetSqlName("SA1") + " SA1 ON "
		cFilter += " SA1.A1_FILIAL = '" + FwXFilial("SA1") + "' AND SA1.A1_COD = SCJ.CJ_CLIENTE AND SA1.A1_LOJA = SCJ.CJ_LOJA "
		cFilter += " AND ( SA1.A1_VEND = '" + cSeller + "'"
		cFilter += " OR ( SCJ.CJ_CLIENTE = '"+ cCustomer + "' AND SCJ.CJ_LOJA = '" + cStore + "' AND SCJ.CJ_PROSPE = SUS.US_COD AND SCJ.CJ_LOJPRO = SUS.US_LOJA)) "
		cFilter += " AND SA1.D_E_L_E_T_ = ' ' "
	endif
return cFilter

//------------------------------------------------------------------------------
/*/{Protheus.doc} getSalesBudgetsFilter
	obtem o filtro utilizado para filtrar os Orçamentos de Vendas (sem aURLFilter )
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 21/01/2022
	@param cDateSync, character, data de sincronismo
	@param cSalesBudgetID, character, Código do orçamento
	@param cItemId, character, Código do orçamento
	@return character, Expressão SQL utilizado para filtrar um Orçamento
/*/
//------------------------------------------------------------------------------
function getSalesBudgetsFilter(cDateSync as character, cSalesBudgetID as character, cItemId as character) as character
	local cFilter := " SCJ.CJ_FILIAL = '" + FwXFilial("SCJ") + "'" as character

	if !Empty(cSalesBudgetID)
		cFilter += " AND SCJ.CJ_NUM = '" + cSalesBudgetID + "' "
	Endif

	if !Empty(cItemId)
		cFilter += " AND SCK.CK_ITEM = '" + cItemId + "' "
	Endif

	If !Empty(cDateSync) .And. SubStr(cDateSync, 1, 1) != '-'
		cFilter += " AND SCK.S_T_A_M_P_ > " + ConvertTimeStamp( cDateSync, "value", "timestamp" )
	Else
		cFilter += " AND SCJ.D_E_L_E_T_ = ' ' "
	EndIf
return cFilter

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusData:saveSalesBudgets(jSalesBudget as Json, nOperation as Numeric, cSalesBudgetID as Character) as Logical
	Efetua a inclusão, altera ou Exclusão de um Pedido de Venda
	@type		method
	@version	12.1.33
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		11/08/2021
	@param		jSalesBudget	, json		, json do orçamento de venda
	@param		nOperation		, Numeric	, Operação (3 - Inclusão, 4 - Alteração ou 5 - Exclusão)
	@param		cSalesBudgetID	, Character	, Número do orçamento de venda (CJ_NUM)
	@return		logical, Se obteve sucesso na transação retorna verdadeiro.
/*/
//------------------------------------------------------------------------------
Method saveSalesBudgets(jSalesBudget as Json, nOperation as Numeric, cSalesBudgetID as Character) as Logical Class SalesBudgetsProtheusData
	Local aArea			:= FwGetArea() as array
	Local oSalesBudgets	:= tgvSalesBudgetsBase():new() as object
	Local lContinue		:= .T. as logical
	Local nStatusCode	:= 201 as numeric

	If oSalesBudgets:setOperation( nOperation )
		If nOperation <> INCLUI
			DbSelectArea("SCJ")
			SCJ->(DbSetOrder(1)) //CJ_FILIAL, CJ_NUM, CJ_CLIENTE, CJ_LOJA
			If !SCJ->( DbSeek( FwXFilial('SCJ') + cSalesBudgetID ))
				oSalesBudgets:setErrorMessage( STR0004, .T. ) // Orçamento não encontrado
				nStatusCode := 404
				lContinue := .F.
			Else
				oSalesBudgets:cSalesBudgetID := cSalesBudgetID
				oSalesBudgets:cExternalId := SCJ->CJ_NUMEXT

				If Empty(oSalesBudgets:cSellerId) .And. nOperation <> EXCLUI
					oSalesBudgets:cSellerId := getSellerFromJson(jSalesBudget, .T.)
				Else
					/* ==============================================================================
						 --- Explicacao sobre o uso da funcao getSellerFromFilter neste contexto ---

						Aqui neste caso precisamos obter o código do vendedor independente se ele eh
						adm ou nao.

						Por isso nao informamos se o usuario eh um administrador, pois mesmo
						sendo um administrador ele ainda eh um vendedor para o PGV. Com isso, vamos 
						obter o código do vendedor independente se ele eh um adm ou nao conforme eh
						necessario.

						Tambem nao informamos o parametro para nao tratar a msg de erro, pq o default 
						deste parametro eh .F. e ai nao serah tratada a mensgem de erro. Nao 
						precisamos disso nesta situacao.
					   ============================================================================== */
					oSalesBudgets:cSellerId := getSellerFromFilter()
				EndIf

				nStatusCode := 200
			Endif
		Endif

        If lContinue .And. oSalesBudgets:fromExecAuto(jSalesBudget)
            If oSalesBudgets:commitData()
				If nOperation == INCLUI .And. !Empty(oSalesBudgets:cExternalId)
					oSalesBudgets:updateSalesBudgetId()
				EndIf

				oRest:setStatusCode( nStatusCode )
				oRest:setResponse( getResponseSalesBudgets( nOperation, oSalesBudgets:cSalesBudgetID, oSalesBudgets:cExternalId, oSalesBudgets:cSellerId ) )
				NotifySeller(IIF(nOperation == INCLUI, oSalesBudgets:cSalesBudgetID, cSalesBudgetID), oSalesBudgets:cSellerId, nOperation, /*cError*/, oSalesBudgets:cExternalId, .F., "MATA415")
			Else
				SetRestFault(400, FWHttpEncode(oSalesBudgets:getErrorMessage()) )
				lContinue := .F.
            Endif
        Else
			nStatusCode := IIF(nStatusCode == 404, 404, 400)
            SetRestFault(nStatusCode, FWHttpEncode(oSalesBudgets:getErrorMessage()) )
			lContinue := .F.
        Endif
    Else
        SetRestFault(400, FWHttpEncode(oSalesBudgets:getErrorMessage()) )
		lContinue := .F.
    Endif

	If !lContinue
		NotifySeller(IIF(nOperation == INCLUI, '', cSalesBudgetID),;
		 oSalesBudgets:cSellerId, nOperation, oSalesBudgets:getErrorMessage(), IIF(nOperation == INCLUI, oSalesBudgets:cExternalId, SCJ->CJ_NUMEXT), .F., "MATA415")
	Endif

    oSalesBudgets:Destroy()
    FreeObj(oSalesBudgets)
	FwrestArea( aArea )
	aSize( aArea, 0)
Return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} getResponseSalesBudgets
	Obtem uma resposta de sucesso de acordo com a operação informada.
	@type		function
	@version	12.1.33
	@author		Débora Constantino / Squad CRM & Faturamento
	@since		28/01/2022
	@param		nOperation, numeric, Operação (3, 4 ou 5)
	@param		cSalesBudgetID, character, Código do orçamento
	@param		cExternalId, character, Código externo do orçamento
	@param		cSellerId, character, Código do vendedor
	@return 	json, resposta de sucesso da requisição
/*/
//------------------------------------------------------------------------------
static function getResponseSalesBudgets(nOperation as Numeric, cSalesBudgetID as Character, cExternalId as Character, cSellerId as Character) as json
	Local jResponse		:= JsonObject():New() as json
	Local jSalesBudgets	:= JsonObject():New() as json
	Local aSalesBudgets	:= {} as Array

	If nOperation == INCLUI
		jResponse['messageSuccess'] := FWHttpEncode(STR0001) // "Orçamento incluído com sucesso."
	Elseif nOperation == ALTERA
		jResponse['messageSuccess'] := FWHttpEncode(STR0002) // "Orçamento alterado com sucesso."
	Elseif nOperation == EXCLUI
		jResponse['messageSuccess'] := FWHttpEncode(STR0003) // "Orçamento excluído com sucesso."
	Endif

	jResponse['status'] := "OK"

	If nOperation <> EXCLUI
		jSalesBudgets['budgetid'] 	:= cSalesBudgetID
		jSalesBudgets['externalid'] := cExternalId
		jSalesBudgets['sellerid'] 	:= cSellerId
		aAdd(aSalesBudgets, jSalesBudgets)
		jResponse['items'] := aClone(aSalesBudgets)
	Endif

	FreeObj(jSalesBudgets)
	aSize(aSalesBudgets, 0)
Return jResponse
