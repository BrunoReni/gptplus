#include 'tlpp-core.th'

namespace totvs.protheus.backoffice.tgvSalesBudgets
using namespace tgv.util

static __instance as Object

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService
	disponibiliza um classe de serviços da API SalesBudgets (Orçamentos de Vendas)
	@type class
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
/*/
//------------------------------------------------------------------------------
class SalesBudgetsService
	data jResponse as json
	data cCustomerId as character
	data cStore as character

	public method new() as object
	public method getInstance() as object
	public method getHeaders() as json
	public method getItems() as json
	public method getHeadersSync() as json
	public method getItemsSync() as json
	public method getDefaultClient()
	Public Method saveSalesBudgets()
endclass

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService::new() as object
	Disponibiliza uma nova intancia do serviço SalesBudgets (Orçamentos de Vendas).
	@type method
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@return object, nova instancia da classe SalesBudgetsService
/*/
//--------------------------------------------------------------------------------------
method new() as object class SalesBudgetsService
	::jResponse := JsonObject():New()
return self

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService::getInstance() as object
	obtem uma instancia da classe SalesBudgetsService
	@type method
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@return object, instancia da classe SalesBudgetsService
/*/
//------------------------------------------------------------------------------
method getInstance() as object class SalesBudgetsService
	If (__instance == nil)
		__instance := SalesBudgetsService():new()
	Endif
return __instance

//------------------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService::GetHeaders(nPage as numeric, nPageSize as numeric,;
	cSalesBudgetId as character, cProduct as character, aURLFilter as array, cFields as character, cSort as character) as Json
	Obtem uma lista de Orçamentos de vendas (SCJ).
	@type method
	@version 12.1.33
	@author Squad CRM & Faturamento
	@since 02/03/2021
	@param nPage, numeric, Número da pagina
	@param nPageSize, numeric, Quantidade de registros por pagina
	@param cSalesBudgetId, character, Código do Orçamento
	@param cProduct, character, Código ou descrição do produto utilizado no filtro de Orçamentos x Produtos
	@param aURLFilter, array, Lista de Filtros no padrão do FWAdapterBaseV2
	@param cFields, character, Lista de campos que devem ser retornados
	@param cSort, character, Ordernação do Response
	@return json, resposta da requisição formatada em json
/*/
//------------------------------------------------------------------------------------------------------------------------------------
method getHeaders(nPage as numeric, nPageSize as numeric, cSalesBudgetId as character, cProduct as character, aURLFilter as array,;
 cFields as character, cSort as character) as Json class SalesBudgetsService
	Local oData := SalesBudgetsDataFactory():GetData()
	::jResponse := JsonObject():New()

	if Empty(cSalesBudgetId)
		oData:oJsonObj:lList := .T.
	else
		oData:oJsonObj:lList := .F.
	endif

	::getDefaultClient()
	oData:getHeaders(nPage, nPageSize, ::cCustomerId, ::cStore, cSalesBudgetId, cProduct, aURLFilter, cFields, cSort)

	If oData:lOk
		::jResponse := oData:GetJSONResponse()
	EndIf

	oData:DeActivate()
	FreeObj(oData)
return ::jResponse

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService::getItems(nPage as numeric, nPageSize as numeric,;
	cSalesBudgetId as character, cItemId as character, aURLFilter as array, cFields as character, cSort as character) as Json
	Obtem uma lista de itens do Orçamentos de vendas (SCK).
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 21/01/2022
	@param nPage, numeric, número da página
	@param nPageSize, numeric, Quantidade de registros por página
	@param cSalesBudgetId, character, Código do Orçamento de Venda (CJ_NUM)
	@param cItemId, character, Código do item do orçamento(CK_ITEM)
	@param aURLFilter , array, Lista de Filtros no padrão do FWAdapterBaseV2
	@param cFields, character, Lista de campos que devem ser retornados
	@param cSort, character, Ordernação do Response
	@return json, resposta da requisição formatada em json
/*/
//----------------------------------------------------------------------------------------------------------------------------
method getItems(nPage as numeric, nPageSize as numeric, cSalesBudgetId as character, cItemId as character, aURLFilter as array,;
 cFields as character, cSort as character) as Json class SalesBudgetsService
	Local oData := SalesBudgetsDataFactory():GetData()
	::jResponse := JsonObject():New()

	if Empty(cItemId)
		oData:oJsonObj:lList := .T.
	else
		oData:oJsonObj:lList := .F.
	endif

	::getDefaultClient()
	oData:getItems(nPage, nPageSize, ::cCustomerId, ::cStore, cSalesBudgetId, cItemId, aURLFilter, cFields, cSort)

	If oData:lOk
		::jResponse := oData:GetJSONResponse()
	EndIf

	oData:DeActivate()
	FreeObj(oData)
return ::jResponse

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService::getHeadersSync(nPage as numeric, nPageSize as numeric, cDateSync as character) as Json
	Obtem uma lista de Orçamentos de vendas (SCJ), seguindo o padrão de campos utilizados no PO-SYNC
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param nPage, numeric, Número da pagina
	@param nPageSize, numeric, Quantidade de registros por pagina
	@param cDateSync, character, Data de Sincronismo/Alteracao
	@return json, resposta da requisição formatada em json
/*/
//----------------------------------------------------------------------------------------------------------------------------
method getHeadersSync(nPage as Numeric, nPageSize as Numeric, cDateSync as Character) as Json class SalesBudgetsService
	Local oData := SalesBudgetsDataFactory():getDataSync()
	::jResponse := JsonObject():New()

	::getDefaultClient()
	oData:getHeaders(nPage, nPageSize, cDateSync, ::cCustomerId, ::cStore)

	If oData:lOk
		::jResponse := oData:GetJSONResponse()
	EndIf

	oData:DeActivate()
	FreeObj(oData)
return ::jResponse

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService::getItemsSync(nPage as numeric, nPageSize as numeric, cDateSync as character ) as Json
	Obtem uma lista de Itens do Orçamentos de vendas (SCK), seguindo o padrão de campos utilizados no PO-SYNC
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param nPage, numeric, Número da pagina
	@param nPageSize, numeric, Quantidade de registros por pagina
	@param cDateSync, character, Data de Sincronismo/Alteracao
	@return json, resposta da requisição formatada em json
/*/
//----------------------------------------------------------------------------------------------------------------------------
method getItemsSync(nPage as numeric, nPageSize as numeric, cDateSync as character) as Json class SalesBudgetsService
	Local oData := SalesBudgetsDataFactory():getDataSync()
	::jResponse := JsonObject():New()

	::getDefaultClient()
	oData:getItems(nPage, nPageSize, cDateSync, ::cCustomerId, ::cStore)

	If oData:lOk
		::jResponse := oData:getJSONResponse()
	EndIf

	oData:DeActivate()
	freeObj(oData)
return ::jResponse

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsService::getDefaultClient
	Obtem o cliente padrão utilizado no orçamento
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
//------------------------------------------------------------------------------
/*/
method getDefaultClient() class SalesBudgetsService
	local cOrCliPD := SuperGetMV("MV_ORCLIPD", .F., "00000101") as character
	local nTamCli := GetFieldLength("A1_COD")

	if Empty(::cCustomerId) .or. Empty(::cStore)
		::cCustomerId := SubStr(cOrCliPD, 1, nTamCli)
		::cStore := SubStr(cOrCliPD, nTamCli + 1, GetFieldLength("A1_LOJA"))
	endif
return nil

//------------------------------------------------------------------------------
	/*/{Protheus.doc} SalesBudgetsService:saveSalesBudgets
	Efetua a gravação de um orçamento de venda.
	@type		method
	@version	12.1.33
	@author		Débora Constantino / Squad CRM & Faturamento
	@since		28/01/2022
	@param		jSalesBudget	, json		, json do orçamento de venda
	@param		nOperation		, numeric	, operação (3, 4 ou 5)
	@param		cSalesBudgetId	, character	, Número do orçamento de venda (CJ_NUM)
/*/
//------------------------------------------------------------------------------
method saveSalesBudgets(jSalesBudget as Json, nOperation as Numeric, cSalesBudgetId as Character) Class SalesBudgetsService
	Local oData := SalesBudgetsDataFactory():GetData()
	
	oData:saveSalesBudgets(jSalesBudget, nOperation, cSalesBudgetId)

	oData:DeActivate()
	FreeObj(oData)
Return Nil
