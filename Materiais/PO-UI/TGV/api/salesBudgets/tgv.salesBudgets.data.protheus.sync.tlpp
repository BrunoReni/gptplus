#include 'tlpp-core.th'
#INCLUDE 'FWMVCDEF.CH'
#include "tlpp-rest.th"

namespace totvs.protheus.backoffice.tgvSalesBudgets
using namespace tgv.util

//-----------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusDataSync
	classe responsavel por consultar os Orçamentos de vendas, retornando o padrão utilizado pelo PO-SYNC.
	@type class
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 21/01/2022
/*/
//-----------------------------------------------------------------------------------------------------------
class SalesBudgetsProtheusDataSync from FWAdapterBaseV2
	public data aCustomFields		as array
	public data cCustomFields		as character
	public data cSource				as character
	public data isAdmin				as logical
	public data lcanObfuscateField	as logical
	public data oHashFieldsPD		as object
	public data nFields				as numeric
	public data lItems 				as logical
	public data cBranchSE4			as character

	public method new() as object
	public method getHeaders()
	public method getItems()
	public method RowToJson()
	public method addCustomFields()
EndClass

//--------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusDataSync::new() as object
	obtem uma nova instancia da classe SalesBudgetsProtheusDataSync
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 21/01/2022
	@return object, nova intancia da classe SalesBudgetsProtheusDataSync
/*/
//--------------------------------------------------------------------------------------------
method new() as object class SalesBudgetsProtheusDataSync
  	_Super:New("GET", .T.)
	::oHashFieldsPD := tHashMap():New()
	::cBranchSE4 := FwXFilial("SE4")
return self

//--------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusDataSync::GetHeaders
	Obtem uma lista de Orçamentos de Vendas (SCJ) retornando o padrão utilizando no po-sync
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param nPage, numeric, número da página
	@param nPageSize, numeric, Quantidade de registros por página
	@param cDataSync, character, data de sincronismo/modificação (S_T_A_M_P_)
	@param cCustomer, character, Código do cliente padrão do orçamento (MV_ORCLIPD)
	@param cStore, character, loja utilizada pelo cliente padrão do orçamento (MV_ORCLIPD)
/*/
//--------------------------------------------------------------------------------------------
method getHeaders(nPage as numeric, nPageSize as numeric, cDateSync as character, cCustomer as character, cStore as character) class SalesBudgetsProtheusDataSync
	local aArea 		:= GetArea()                     as array
	local cWhereSub 	                                 as character
	local cFieldsSub 	                                 as character
	local cWhere		:= getSalesBudgetsFilter()       as character
	Local cSeller 	    := getSellerFromFilter(.F., .T.) as Character

	addMapHeader( self, .T. )

	cWhere += " AND AQ4.AQ4_FILIAL = '" + FWXFilial("AQ4") + "'"
	cWhere += " AND AQ4.AQ4_VEND   = '" + cSeller + "'"
	cWhere += " AND AQ4.AQ4_SCHEMA = '000017'"
	cWhere += " AND AQ4.AQ4_DATA   = '"+DTOS(Date())+"'"
	cWhere += " AND AQ4.D_E_L_E_T_ = ' '"

	If !Empty(cDateSync) .And. SubStr(cDateSync, 1, 1) != '-'
		cWhereSub 	 :=  " WHERE SCJ.STAMP > " + ConvertTimeStamp( cDateSync, "value", "timestamp" )
		cFieldsSub := GetFieldsMap(Self:oJsonObj:AMAPFIELDS)
	EndIf

	::lItems := .F.
	::AddCustomFields()
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( buildQuerySCJ(::isAdmin, cCustomer, cStore, cFieldsSub, cWhereSub, @cSeller))
	::SetWhere( cWhere )
	::SetOrder( "SCJ.CJ_FILIAL, SCJ.CJ_NUM, SCJ.CJ_CLIENTE, SCJ.CJ_LOJA " )

	If ::Execute()
		::FillGetResponse()
	EndIf

	FTPDUnload()
	::oHashFieldsPD:Clean()

	RestArea( aArea )
	aSize( aArea, 0 )
	aSize(::aCustomFields, 0)
	FreeObj(::oHashFieldsPD)
return Nil

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusDataSync::getItems
	Obtem uma lista de Itens do Orçamentos de vendas (SCK) retornando o padrão utilizando no po-sync
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 21/01/2022
	@param nPage, numeric, número da página
	@param nPageSize, numeric, Quantidade de registros por página
	@param cDataSync, character, data de sincronismo/modificação (S_T_A_M_P_)
	@param cCustomer, character, Código do cliente padrão do orçamento (MV_ORCLIPD)
	@param cStore, character, loja utilizada pelo cliente padrão do orçamento (MV_ORCLIPD)
/*/
//----------------------------------------------------------------------------------------------------
method getItems(nPage as numeric, nPageSize as numeric, cDateSync as character, cCustomer as character, cStore as character ) class SalesBudgetsProtheusDataSync
	Local aArea   	 := GetArea()                        	as array
	Local lIsAdmin	 := FwIsAdmin()						 	as Logical
	Local cSellerAQ4 := getSellerFromFilter(.F., .F.)    	as character
	Local cSellerQry := getSellerFromFilter(lIsAdmin, .F.)	as character
	local cWhere	 := getSalesBudgetsFilter(cDateSync) 	as character

	addMapItem( self, .T. )
	::lItems := .T.
	::AddCustomFields()
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( getQueryItems(cSellerQry, cCustomer, cStore, .T.) )

	cWhere += " AND AQ4.AQ4_FILIAL = '" + FWXFilial("AQ4") + "'"
	cWhere += " AND AQ4.AQ4_VEND   = '" + cSellerAQ4 + "'"
	cWhere += " AND AQ4.AQ4_SCHEMA = '000018'"
	cWhere += " AND AQ4.AQ4_DATA   = '"+DTOS(Date())+"'"
	cWhere += " AND AQ4.D_E_L_E_T_ = ' '"
	::SetWhere( cWhere )
	
	::SetOrder( "CK_FILIAL, CK_NUM, CK_ITEM" )

	If ::Execute()
		::FillGetResponse()
	EndIf

	FTPDUnload()
	::oHashFieldsPD:Clean()

	RestArea( aArea )
	aSize( aArea, 0 )
	aSize(::aCustomFields, 0)
	FreeObj(::oHashFieldsPD)
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusDataSync::RowToJson
	Efetua a conversão da consulta SQL em um objeto JSON
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param cAlias, character, Retorno da consulta
	@param aFields, array, Lista de Campos utilizados no retorno
	@param lEmpty, logical, Parametro reservado
/*/
//------------------------------------------------------------------------------
method RowToJson( cAlias as character, aFields as array, lEmpty as logical) class SalesBudgetsProtheusDataSync
	Default lEmpty := .F.
	ConvertResponseValues(aFields, cAlias, lEmpty, @Self )
return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesBudgetsProtheusDataSync::addCustomFields
	Metodo Auxiliar, deve carregar os Atributos utilizados na conversão dos valores.
	@type method
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
/*/
//------------------------------------------------------------------------------
method addCustomFields() class SalesBudgetsProtheusDataSync
	Self:cSource:= "TGVSALESBUDGETS"
	Self:isAdmin := FwIsAdmin()
	Self:aCustomFields := {}
	Self:nFields := Len(Self:oJsonObj:aMapFields)

	If Self:lItems
		aAdd(Self:aCustomFields, {"internalid", {||GetInternalIdQry((cAlias)->CK_FILIAL + (cAlias)->CK_NUM + (cAlias)->CK_ITEM)}})
		aAdd(Self:aCustomFields, {"externalitemid", {||GetInternalIdQry((cAlias)->CJ_NUMEXT + (cAlias)->CK_ITEM)}})
		aAdd(Self:aCustomFields, {"budgetinternalid", {||GetInternalIdQry((cAlias)->CJ_FILIAL + (cAlias)->CJ_NUM)}})
		Self:cCustomFields := "internalid#externalitemid#budgetinternali"
	Else
		aAdd(Self:aCustomFields, {"internalid", {||GetInternalIdQry((cAlias)->CJ_FILIAL + (cAlias)->CJ_NUM)}})
		aAdd(Self:aCustomFields, {"paymentinternalid", {||GetInternalIdQry(::cBranchSE4 + (cAlias)->CJ_CONDPAG)}})
		Self:cCustomFields := "internalid#paymentinternalid"
	Endif

	If !Self:isAdmin
		Self:oHashFieldsPD := setProtectedFields(Self:oJsonObj:aMapFields, Self:cSource)
	Endif

	Self:lcanObfuscateField := CanAccessProtectedData(Self:isAdmin)
return Nil

//--------------------------------------------------------------------------------------
/*/{Protheus.doc} buildQuerySCJ
	Construi a Query utilizada na busca dos orçamentos de vendas na tabela SCJ
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/01/2022
	@param isAdmin, logical, usuario é administrador?
	@param cCustomer, character, código do cliente
	@param cStore, character, loja do cliente
	@param cWhereSub, character, clausula where adicional para subquery
	@param cFieldsSub, character, campos adicionais para subquery
	@param cSeller, character, Código do Vendedor
	@return character, Expressão SQL utilizada para filtrar os registros na tabela SCJ
/*/
//--------------------------------------------------------------------------------------
static function buildQuerySCJ(isAdmin as logical, cCustomer as character, cStore as character, cFieldsSub as character, cWhereSub as character, cSeller as character) as character
	local cQuery 	:= getQueryHeader(.t., cSeller := getSellerFromFilter(isAdmin, .F.), /*cFilterProduct*/, cCustomer, cStore) as character
	local cQueryAux	as character

	if !Empty(cFieldsSub) .and. !Empty(cWhereSub)
		cQueryAux := " SELECT " + cFieldsSub + "FROM ( "
		cQueryAux += cQuery
		cQueryAux += IIF(Empty(cWhereSub), "", " ) SCJ " + cWhereSub)
		cQuery := cQueryAux
	endif
return cQuery

