#include "tlpp-core.th"

namespace tgv.priceList
using namespace tgv.util

Static __lPGVPCLQRY := ExistBlock("GVPCLQRY")

//------------------------------------------------------------------------------
/*/{Protheus.doc} PriceListProtheusData
	Efetua a consulta de tabelas de preço Protheus.

	@author		Squad CRM/Faturamento
	@since		29/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Class PriceListProtheusData from FWAdapterBaseV2
	Public Data aCustomFields		as Array
	Public Data cCustomFields		as Character
	Public Data cSource				as Character
	Public Data isAdmin				as Logical
	Public Data lcanObfuscateField	as Logical
	Public Data lItems 				as Logical
	Public Data oHashFieldsPD		as Object
	Public Data nFields				as Numeric

	Public Method New() as Object
	Public Method GetHeader()
	Public Method GetItem()
	Public Method RowToJson()
	Public Method AddCustomFields()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} PriceListProtheusData
	Efetua a consulta de tabelas de preço Protheus.

	@sample		PriceListProtheusData():New("GET", .T.)
	@param		cVerbo	, Character	, Verbo que será utilizado na requisição
	@param		lList	, Logical	, Se irá listar o Json
	@author		Squad CRM/Faturamento
	@since		29/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New(cVerbo as Character, lList as Logical) as Object Class PriceListProtheusData
	Default cVerbo	:= "GET"
	Default lList	:= .T.
	_Super:New(cVerbo, lList)
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetHeader
	Efetua a consulta de tabelas de preço (apenas cabeçalho - DA0).

	@param		nPage		, Numeric	, Número da página que será retornada
	@param		nPageSize	, Numeric	, Quantidade de registros por página
	@param 		cDate		, Character	, Data de Sincronismo/Alteracao
	@author		Danilo Salve
	@since		21/01/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetHeader(nPage as Numeric, nPageSize as Numeric, cDate as Character) class PriceListProtheusData
	Local aArea 	as Array
	Local cWhere	as Character

	Default nPage   	:= 1
	Default nPageSize 	:= 10
	Default cDate		:= ""

	aArea := GetArea()

	AddMapHeader( self )

	::lItems := .F.
	::AddCustomFields()
	::setPage(nPage)
	::setPageSize(nPageSize)
	::SetQuery( getQueryTGV('DA0') )

	cWhere := " DA0.DA0_FILIAL = '" + FwXFilial("DA0") + "'"

	If __lPGVPCLQRY
		cWhere += ExecBlock("GVPCLQRY", .F., .F.)
	Endif

	If !Empty(cDate) .And. SubStr(cDate,1,1) != '-'
		cWhere += " AND DA0.S_T_A_M_P_ > " + ConvertTimeStamp( cDate, "value", "timestamp" )
	Else
		cWhere += " AND DA0.D_E_L_E_T_ = ' ' "
	EndIf

	::SetWhere( cWhere )
	::SetOrder("DA0_FILIAL, DA0_CODTAB") //"DA0_FILIAL+DA0_CODTAB"

	If ::Execute()
		::FillGetResponse()
	EndIf

	aSize(::aCustomFields, 0)
	RestArea( aArea )
	aSize( aArea, 0 )
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetItems
	Efetua a consulta de tabelas de preço (apenas itens - DA1).

	@param		nPage		, Numeric	, Número da página que deverá retornar
	@param		nPageSize	, Numeric	, Quantidade de registros por página
	@param 		cDate		, Character	, Data de Sincronismo/Alteracao
	@since		21/01/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetItem(nPage as Numeric, nPageSize as Numeric, cDate as Character) class PriceListProtheusData
	Local aArea		 as Array
	Local cWhere	 as Character
	Local cInnerJoin as Character
	Local cSeller 	:= getSellerFromFilter(.F., .T.)

	Default nPage		:= 1
	Default nPageSize	:= 10

	aArea := GetArea()

	AddMapItems( self )
	
	cInnerJoin+=' INNER JOIN '+RetSqlName('AQ5')+' AQ5 '
	cInnerJoin+=' ON'
	cInnerJoin+=' DA1.DA1_CODPRO = AQ5.AQ5_CODENT'
	cInnerJoin+=' INNER JOIN '+RetSqlName('AQ4')+' AQ4 '
	cInnerJoin+=' ON'
	cInnerJoin+=' AQ5.AQ5_UUID = AQ4.AQ4_UUID'
	cInnerJoin+=' AND AQ4.AQ4_FILIAL = AQ5.AQ5_FILIAL'
	cInnerJoin+=' AND AQ5.D_E_L_E_T_ = AQ4.D_E_L_E_T_'
	
	::lItems := .T.
	::AddCustomFields()
	::setPage(nPage)
	::setPageSize(nPageSize)
	::SetQuery( getQueryTGV('DA1', cInnerJoin) )
	
	cWhere := " DA1.DA1_FILIAL     = '" + FwXFilial("DA1") + "'"
	cWhere += " AND AQ4.AQ4_FILIAL = '" + FwXFilial("AQ4") + "'"
	cWhere += " AND AQ4.AQ4_VEND   = '" + cSeller + "'"
	cWhere += " AND AQ4.AQ4_SCHEMA = '000012'"
	cWhere += " AND AQ4.AQ4_DATA   = '"+DTOS(Date())+"'"
	cWhere += " AND AQ4.D_E_L_E_T_ = ' '"

	If !Empty(cDate) .And. SubStr(cDate,1,1) != '-'
		cWhere += " AND DA1.S_T_A_M_P_ > " + ConvertTimeStamp( cDate, "value", "timestamp" )
	Else
		cWhere += " AND DA1.D_E_L_E_T_ = ' ' "
	EndIf

	::SetWhere( cWhere )
	::SetOrder( "DA1_FILIAL, DA1_CODTAB, DA1_CODPRO, DA1_INDLOT, DA1_ITEM" )

	If ::Execute()
		DbSelectArea("SB1")
		SB1->(DbSetOrder(1))
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize(::aCustomFields, 0)
	aSize( aArea, 0 )
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} RowToJson
	Converte o retorno consulta da SQL em JSON

	@sample		PriceListProtheusData:RowToJson( cAlias, aFields, .F.)
	@param		cAlias	, Char		, Alias da Consulta
	@param		aFields	, Array		, Campos (aMapFields)
	@param		lEmpty	, Logical	, Vazio.
	@author		Danilo Salve
	@since		22/12/2020
	@version	12.1.27 ou Superior
/*/
//------------------------------------------------------------------------------
METHOD RowToJson( cAlias as Character, aFields as Array, lEmpty as Logical) CLASS PriceListProtheusData	
	Default lEmpty := .F.
	ConvertResponseValues(aFields, cAlias, lEmpty, @Self )
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddCustomFields
	Metodo Auxiliar, deve carregar os Atributos utilizados na conversão dos valores.

	@author		Squad CRM & Faturamento
	@since		01/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
METHOD AddCustomFields() CLASS PriceListProtheusData
	Local cFilialSB1 := FwxFilial("SB1")

	Self:cSource:= "TGVPRICELIST"
	Self:isAdmin := FwIsAdmin()
	Self:aCustomFields := {}
	Self:nFields := Len(Self:oJsonObj:aMapFields)
	
	If Self:lItems 
		aAdd(Self:aCustomFields, {"internalid"	, {||GetInternalIdQry( (cAlias)->DA1_FILIAL + (cAlias)->DA1_CODTAB + (cAlias)->DA1_ITEM  )}})
		aAdd(Self:aCustomFields, {"headerid"	, {||GetInternalIdQry( (cAlias)->DA1_FILIAL + (cAlias)->DA1_CODTAB )}})
		aAdd(Self:aCustomFields, {"baseprice"	, {||GetBasePrice( cFilialSB1, (cAlias)->DA1_CODPRO) }})
		Self:cCustomFields := "internalid#headerid#baseprice"
	Else
		aAdd(Self:aCustomFields, {"internalid"	, {||GetInternalIdQry( (cAlias)->DA0_FILIAL + (cAlias)->DA0_CODTAB  )}})
		Self:cCustomFields := "internalid"
	Endif

	Self:lcanObfuscateField := CanAccessProtectedData(Self:isAdmin)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapFieldsHeader
	Adiciona os campos utilizados no Header da Tabela de Preços (DA0)

	@param		oSelf	, Object	, Objeto PriceList
	@author		Squad CRM/Faturamento
	@since		29/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function AddMapHeader(oSelf as Object)
	Local aInternalId := GetInternalId( { "DA0_FILIAL", "DA0_CODTAB" } )

	oSelf:AddMapFields("internalid"			, "internalid"	, .T., .F.,	{ "internalid"	, 'C', aInternalId[1] , 0 }, "' '")
	oSelf:AddMapFields("branchid"			, "DA0_FILIAL"	, .T., .F.,	{ "DA0_FILIAL"	, 'C', GetFieldLength("DA0_FILIAL")	, 0 })
	oSelf:AddMapFields("code"				, "DA0_CODTAB"	, .T., .F.,	{ "DA0_CODTAB"	, 'C', GetFieldLength("DA0_CODTAB")	, 0 })
	oSelf:AddMapFields("description"		, "DA0_DESCRI"	, .T., .F.,	{ "DA0_DESCRI"	, 'C', GetFieldLength("DA0_DESCRI")	, 0 })
	oSelf:AddMapFields("status"				, "DA0_ATIVO"	, .T., .F.,	{ "DA0_ATIVO"	, 'C', GetFieldLength("DA0_ATIVO")	, 0 })
	oSelf:AddMapFields("inicialdate"		, "DA0_DATDE"	, .T., .F.,	{ "DA0_DATDE"	, 'D', GetFieldLength("DA0_DATDE")	, 0 })
	oSelf:AddMapFields("finaldate"			, "DA0_DATATE"	, .T., .F.,	{ "DA0_DATATE"	, 'D', GetFieldLength("DA0_DATATE")	, 0 })
	oSelf:AddMapFields("paymentcondition"	, "DA0_CONDPG"	, .T., .F.,	{ "DA0_CONDPG"	, 'C', GetFieldLength("DA0_CONDPG")	, 0 })
	oSelf:AddMapFields("deleted"			, "deleted"		, .T., .F.,	{ "deleted"		, 'C', 1, 0 }, "DA0.D_E_L_E_T_")

	aSize(aInternalId, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapFieldsItems
	Adiciona os campos utilizados nos Itens da Tabela de Preços (DA1)

	@param		oSelf	, Object	, Objeto PriceList
	@author		Squad CRM/Faturamento
	@since		29/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function AddMapItems(oSelf as Object)
	Local aInternalId   := GetInternalId( { "DA1_FILIAL", "DA1_CODTAB", "DA1_ITEM" } )
	Local aHeaderId   	:= GetInternalId( { "DA1_FILIAL", "DA1_CODTAB" } )

	oSelf:AddMapFields("internalid"		, "internalid"	, .T., .F., { "internalid"	, 'C', aInternalId[1]	, 0 }, "' '")
	oSelf:AddMapFields("headerid"		, "headerid"	, .T., .F., { "headerid"	, 'C', aHeaderId[1]		, 0 }, "' '")
	oSelf:AddMapFields("branchid"		, "DA1_FILIAL"	, .T., .F., { "DA1_FILIAL"	, 'C', GetFieldLength("DA1_FILIAL")	, 0 })
	oSelf:AddMapFields("pricelist"		, "DA1_CODTAB"	, .T., .F., { "DA1_CODTAB"	, 'C', GetFieldLength("DA1_CODTAB")	, 0 })
	oSelf:AddMapFields("item"			, "DA1_ITEM"	, .T., .F., { "DA1_ITEM"	, 'C', GetFieldLength("DA1_ITEM")	  , 0 })
	oSelf:AddMapFields("product"		, "DA1_CODPRO"	, .T., .F., { "DA1_CODPRO"	, 'C', GetFieldLength("DA1_CODPRO")	, 0 })
	oSelf:AddMapFields("baseprice"		, "B1_PRV1"		, .T., .F., { "B1_PRV1"		, 'N', GetFieldLength("DA1_PRCBAS")	, 2 }, "' '")
	oSelf:AddMapFields("salesprice"		, "DA1_PRCVEN"	, .T., .F., { "DA1_PRCVEN"	, 'N', GetFieldLength("DA1_PRCVEN")	, 2 })
	oSelf:AddMapFields("validity"		, "DA1_DATVIG"	, .T., .F., { "DA1_DATVIG"	, 'D', GetFieldLength("DA1_DATVIG")	, 0 })
	oSelf:AddMapFields("productgroup"	, "DA1_GRUPO"	, .T., .F., { "DA1_GRUPO"	, 'C', GetFieldLength("DA1_GRUPO")	, 0 })
	oSelf:AddMapFields("discountvalue"	, "DA1_VLRDES"	, .T., .F., { "DA1_VLRDES"	, 'N', GetFieldLength("DA1_VLRDES")	, 2 })
	oSelf:AddMapFields("state"			, "DA1_ESTADO"	, .T., .F., { "DA1_ESTADO"	, 'C', GetFieldLength("DA1_ESTADO")	, 0 })
	oSelf:AddMapFields("deleted"		, "deleted"		, .T., .F., { "deleted"		, 'C', 1, 0 }, "DA1.D_E_L_E_T_")

	aSize(aHeaderId, 0)
	aSize(aInternalId, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetBasePrice
	Obtem o preço base de um Produto

	@sample		GetBasePrice('01', 'PRODUTO00001')
	@param		cFilialSB1		, Character	, Filial da SB1
	@param		cCodigoProduto	, Character	, Código do Produto
	@return		Numeric			, Preço base (B1_PRV1) do Produto.
	@author		Danilo Salve
	@since		27/05/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function GetBasePrice(cFilialSB1 as Character, cCodigoProduto as Character) as Numeric
	Local aArea := GetArea()
	Local nBasePrice as Numeric	

	If SB1->(MsSeek(cFilialSB1 +  cCodigoProduto))
		nBasePrice := SB1->B1_PRV1
	Else
		nBasePrice := 0
	Endif

	RestArea(aArea)
	aSize(aArea, 0)
Return nBasePrice
