#include "tlpp-core.th"

namespace tgv.financialstatus
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} FinancialStatusProtheusData
	Efetua a consulta de status financeiro dos clientes no Protheus.

	@sample		FinancialStatusProtheusData:New()
	@author		Squad CRM/FAT
	@since		27/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
CLASS FinancialStatusProtheusData FROM FWAdapterBaseV2
	Public Method New() as Object
	Public Method GetAll()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} New
	Efetua a consulta de status financeiro dos clientes no Protheus.

	@sample		FinancialStatusProtheusData:New()
	@author		Squad CRM/FAT
	@since		27/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method New() as Object CLASS FinancialStatusProtheusData
	_Super:New( "GET", .T. )
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetAll
	Retorna os status financeiros do cliente

	@sample		FinancialStatusProtheusData:GetAll( 1, 10,,, 00000101  )
	@param		nPage		, Numeric	, N˙mero da p·gina que ser· retornada
	@param		nPageSize	, Numeric	, Quantidade de registros por p·gina
	@param		aURLFilter	, Array		, Lista de Filtros no padr„o do FWAdapterBaseV2
	@param		cFields		, Character	, Lista de campos que devem ser retornados
	@param		cCustomerId	, Character	, Codigo do Cliente (Codigo e Loja)
	@param		cSort		, Character	, OrdernaÁ„o do Response

	@author		Squad CRM/FAT
	@since		27/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method GetAll(nPage as Numeric, nPageSize as Numeric, aURLFilter as Array, cFields as Character, cCustomerId as Character,;
	cCustomerStore, cSort as Character) CLASS FinancialStatusProtheusData
	Local aArea 	AS ARRAY
	Local cWhere	AS Character

	Default nPage       := 1
	Default nPageSize   := 10

	aArea := GetArea()

	AddFields( self, .T. )

	::setPage(nPage)
	::setPageSize(nPageSize)
	::SetQuery( GetQuery(.T.) )

	If Empty( cCustomerId ) .And. Len( aURLFilter ) > 0 
		::SetUrlFilter( aURLFilter )
	Endif

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf
	
	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	cWhere := " SA1.A1_FILIAL = '" + FwXFilial("SA1") + "'"

	If !Empty( cCustomerId ) .And. !Empty( cCustomerStore )
		cWhere += getCustomerFilter(cCustomerId, cCustomerStore)        
    Endif

    cWhere += " AND SA1.D_E_L_E_T_ = ' '"

	::SetWhere( cWhere )
	::SetOrder( "A1_FILIAL,A1_COD,A1_LOJA" )  

	If ::Execute()
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize( aArea, 0 )
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddFields
	Cria o Mapa de campos Protheus x API.

	@sample		AddFields( self, .T. )
	@param		oSelf	, Object	, Objeto com heran√ßa da classe FWAdapterBaseV2
	@param		isOnline, Logical	, Adicionar campos no padr„o OnLine ou Sync
	@author		Squad CRM/FAT
	@since		27/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Function AddFields(oSelf as Object, isOnline as Logical)
	Local aInternalId   := GetInternalId( { "A1_FILIAL", "A1_COD", "A1_LOJA" } )
	Local lFixedId		:= !oSelf:oJsonObj:lList

	If isOnLine
	    oSelf:AddMapFields( "id"				, "id"				, .T., lFixedId, { "id"		, 'C', aInternalId[1] , 0 }, aInternalId[2])
    Else
	    oSelf:AddMapFields( "id"				, "id"				, .T., lFixedId, { "id"		, 'C', aInternalId[1] , 0 }, "' '")
        oSelf:AddMapFields( "deleted"			, "deleted"			, .T., .F., { "deleted"		, 'C', 1, 0 }, "SA1.D_E_L_E_T_" )        
    EndIf

	oSelf:AddMapFields( "branch"    , "A1_FILIAL" , .T., .F., { "A1_FILIAL" , 'C', GetFieldLength("A1_FILIAL")	, 0 })
	oSelf:AddMapFields( "code"      , "A1_COD"    , .T., .F., { "A1_COD"    , 'C', GetFieldLength("A1_COD")		, 0 })
	oSelf:AddMapFields( "store"     , "A1_LOJA"   , .T., .F., { "A1_LOJA"   , 'C', GetFieldLength("A1_LOJA")	, 0 })
	oSelf:AddMapFields( "oldestdue" , "E1_VENCORI", .T., .F., { "E1_VENCORI", 'D', GetFieldLength("E1_VENCORI")	, 0 })

	aSize(aInternalId, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
	Monta a Express√£o SQL utilizado para consultar o Saldo em aberto dos Clientes
	no contas a receber.

	@sample		GetQuery(.T.)
	@param		isOnline, Logical	, Retornar query para o padr„o Online ou Offline
	@return		cQuery	, Character	, Expressao SQL para consulta dos titulos a receber
	@author		Danilo Salve
	@since		18/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Function GetQuery(isOnline as Logical) as Character
	Local cQuery AS Character

	cQuery := " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName("SA1") + " SA1 "
	cQuery += " LEFT JOIN "
	cQuery += "   ( SELECT E1_CLIENTE, E1_LOJA, MIN(E1_VENCORI) E1_VENCORI"

	If !isOnline
		cQuery += ", MAX(S_T_A_M_P_) S_T_A_M_P_"
	EndIf

	cQuery += "   FROM " + RetSqlName("SE1") + " SE1 "
	cQuery += "   WHERE SE1.E1_FILIAL = '" + FWxFilial("SE1") + "' AND SE1.E1_STATUS = 'A' AND SE1.D_E_L_E_T_ = ' ' "
	cQuery += "   GROUP BY E1_CLIENTE, E1_LOJA) SE1 "
	cQuery += " ON SE1.E1_CLIENTE = SA1.A1_COD "
	cQuery += " AND SE1.E1_LOJA = SA1.A1_LOJA "
	cQuery += " WHERE #QueryWhere#"
Return cQuery

//------------------------------------------------------------------------------
/*/{Protheus.doc} getCustomerFilter
	Obtem um Express„o SQL para filtrar um Cliente por CÛdigo e Loja

	@type		function
	@sample		getCustomerFilter('FAT00101')
	@param		cCustomerId	, Character	, CÛdigo e Loja do Cliente
	@return		Character	, Filtro/Express„o SQL do Cliente
	@author		Danilo Salve
	@since		22/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Static Function getCustomerFilter(cCustomerId as Character, cCustomerStore as Character) as Character
	Local cWhere		as Character

	cWhere := " AND SA1.A1_COD = '" + cCustomerId
    cWhere += "' AND SA1.A1_LOJA = '"+ cCustomerStore +"'"
	
Return cWhere
