#include 'tlpp-core.th'

namespace tgv.notifications
static __instance as Object

//------------------------------------------------------------------------------
/*/{Protheus.doc} NotificationsService
	Disponibiliza um serviço de Notificações.

	@sample		NotificationsService()
	@author		Squad CRM & Faturamento
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Class NotificationsService
	Public Data jResponse as Json

	Public Method New() as Object
	Public Method GetInstance() as Object
	Public Method GetNotificationsSync() as Json
	Public Method GetNotifications() as Json
	Public Method RecordNotification() as Json
Endclass

//------------------------------------------------------------------------------
/*/{Protheus.doc} New
	Disponibiliza uma nova intancia do serviço Notificações.

	@sample		NotificationsService:New()
	@author		Squad CRM & Faturamento
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New() as Object Class NotificationsService
	::jResponse := JsonObject():New()
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetInstance
	Retorna uma instancia do serviço

	@sample		NotificationsService:GetInstance()
	@author		Squad CRM & Faturamento
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetInstance() as Object Class NotificationsService
	If (__instance == nil)
		__instance := NotificationsService():new()
	EndIf
Return __instance

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetNotificationsSync
	Efetua a consulta de Notificações - Utilizando em requisições utilizadas no 
	PO-SYNC

	@sample		oService:GetNotificationsSync(1, 10, '2021-01-21')
	@param		nPage		, Numeric	, Número da página que será retornada
	@param		nPageSize	, Numeric	, Quantidade de registros por pagina
	@param		cDateSync	, Character	, Data de Sincronismo/alteracao
	@return		Json		, Reposta da Consulta/Requisição
	@author		Danilo Salve
	@since		21/01/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetNotificationsSync(nPage as Numeric, nPageSize as Numeric, cDateSync as Character) as Json Class NotificationsService
	Local oData := NotificationsProtheusDataSync():New()

	oData:Get(nPage, nPageSize, cDateSync)

	If oData:lOk
		::jResponse := oData:GetJSONResponse()
	Else
		::jResponse := SetRestFault(oData:GetCode(), oData:GetMessage())
	EndIf

	oData:DeActivate()
	FreeObj(oData)
Return ::jResponse

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetNotifications
	Efetua a consulta de Notificações - Utilizado quando o TOTVS Gestão Vendas
	estiver operando Online.

	@sample		oService:GetNotifications(1, 10, {}, 'id, internalid', Nil, -id )
	@param		nPage		, Numeric	, Número da página que será retornada
	@param		nPageSize	, Numeric	, Quantidade de registros por pagina
	@param		aURLFilter	, Array		, Lista de Filtros no padrão do FWAdapterBaseV2
	@param		cFields		, Character	, Lista de campos que devem ser retornados
	@param		cId			, Character	, Codigo da Notificação
	@param		cSort		, Character	, Ordernação do Response
	@return		Json		, Reposta da Consulta/Requisição
	@author		Danilo Salve
	@since		21/01/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetNotifications(nPage as Numeric, nPageSize as Numeric, aURLFilter as Array, cFields as Character, cId as Character, cSort as Character) as Json Class NotificationsService
	Local oData := NotificationsDataFactory():GetData()	

	If !Empty(cId)
		oData:oJsonObj:lList := .F.
	Endif

	oData:Get(nPage, nPageSize, aURLFilter, cFields, cId, cSort)

	If oData:lOk
		::jResponse := oData:GetJSONResponse()
	Else
		::jResponse := SetRestFault(oData:GetCode(), oData:GetMessage())
	EndIf

	oData:DeActivate()
	FreeObj(oData)
Return ::jResponse

///------------------------------------------------------------------------------
/*/{Protheus.doc} RecordNotification
	Grava/Exclui a Notificão conforme o tipo de operação.

	@param		jBody			, Json		, Body da Requisição (Não utilizado no Delete)
	@param		cNotification	, Character	, Chave da Notificação (Codigo + Usuario)
	@param 		nOperation		, Numeric	, Tipo de Operação (3 - Inclusao, 4 - Alteracao e 5 - Exclusao)
	@param		cVerb			, Character	, Verbo Utilizado
	@return		Json			, Resposta da requisição
	@author		Danilo Salve
	@since		21/01/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method RecordNotification(jBody as Json, cNotification as Character, nOperation as Numeric, cVerb as Character) as Json Class NotificationsService
	Local oData as Object

	Default cNotification   := ""
	Default nOperation      := 3
	Default cVerb           := "POST"

	oData := NotificationsDataFactory():GetData()
	oData:CVERB := cVerb
	oData:oJsonObj:lList := .F.

	oData:RecordNotification(jBody, cNotification, nOperation)

	If oData:lOk
		::jResponse := oData:GetJSONResponse()
	Else
		::jResponse := SetRestFault(oData:GetCode(), oData:GetMessage())
	EndIf

	oData:DeActivate()
	FreeObj(oData)
Return ::JResponse
