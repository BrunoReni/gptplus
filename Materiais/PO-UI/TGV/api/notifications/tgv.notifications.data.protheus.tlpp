#include "tlpp-core.th"
#INCLUDE "FWMVCDEF.CH"
#include "tgv.notifications.data.protheus.ch"

namespace tgv.notifications
using namespace tgv.util

Static existConvertStringToLine := FindFunction("tgv.util.convertStringToLine")

//------------------------------------------------------------------------------
/*/{Protheus.doc} NotificationsProtheusData
	Retorna os dados das Notificações utilizando os dados do Servidor Protheus.
	@type		class
	@author		Squad CRM & Faturamento
	@since		01/10/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
CLASS NotificationsProtheusData FROM FWAdapterBaseV2
	Public Data oHashFields	as Object	

	Public method new() as Object
	Public method get()
	Public Method recordNotification()
	Public Method setHashFields()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} NotificationsProtheusData::new() as Object
	Obtem uma nova instancia da classe NotificationsProtheusData
	@type		method
	@version	12.1.27
	@author 	Squad CRM & Faturamento
	@since		01/10/2020
	@return 	Object, Nova instancia da classe NotificationsProtheusData
/*/
//------------------------------------------------------------------------------
Method new() as Object CLASS NotificationsProtheusData
	_Super:new( "GET", .T. )
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} NotificationsProtheusData::get
	Efetua a consulta de Notificações.
	@type		method
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		15/07/2021
	@param		nPage		, numeric	, Número da página que será retornada
	@param		nPageSize	, numeric	, Quantidade de registros por pagina
	@param		aURLFilter	, array		, Lista de Filtros no padrão do FWAdapterBaseV2
	@param		cFields		, character	, Lista de campos que devem ser retornados
	@param		cId			, character	, Id da notificação
	@param		cSort		, character	, Ordernação do Response
/*/
//------------------------------------------------------------------------------
Method get(nPage as Numeric, nPageSize as Numeric, aURLFilter as Array, cFields as Character, cId as Character, cSort as Character) CLASS NotificationsProtheusData
	Local aArea 	as Array
	Local cWhere	as Character

	aArea := GetArea()

	AddMapFieldsA1S( self, .T. )

	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( GetQueryA1S() )

	If Empty( cId ) .And. Len( aURLFilter ) > 0 
		::SetUrlFilter( aURLFilter )
	Endif

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf
	
	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	cWhere := " A1S.A1S_FILIAL = '" + FwXFilial("A1S") + "'"

	If !Empty( cId )
		cWhere += "AND A1S.A1S_CODIGO = '" + cId + "'"
	Endif

	cWhere += " AND A1S.A1S_CODUSR = '" + __cUserId + "' AND A1S.D_E_L_E_T_ = ' '"

	::SetWhere( cWhere )
	::SetOrder( "A1S_FILIAL, A1S_CODIGO, A1S_CODUSR" )

	If ::Execute()
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize( aArea, 0 )
Return Nil

/*/{Protheus.doc} NotificationsProtheusData::recordNotification
	Grava/Exclui a Notificão conforme o tipo de operação.
	@type		method
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		21/01/2021
	@param		jBody			, json		, Body da Requisição (Não utilizado no Delete)
	@param		cNotification	, character	, Chave da Notificação (Codigo + Usuario)
	@param		nOperation		, numeric	, Tipo de Operação (3 - Inclusao, 4 - Alteracao e 5 - Exclusao)
/*/
//------------------------------------------------------------------------------
Method recordNotification(jBody as Json, cNotification as Character, nOperation as Numeric, c) CLASS NotificationsProtheusData
	Local aArea		:= GetArea()
	Local aDados	:= {}
	Local aFields	:= {}
	Local cField	as Character
	Local nField	as Numeric

	Default nOperation := 3

	If nOperation <> 5
		aFields := jBody:GetNames()
		::setHashFields()

		For nField := 1 To Len(aFields)
			If ::oHashFields:get(aFields[nField], @cField)
				aAdd(aDados, {cField, jBody[aFields[nField]]})
			Endif
		Next
	Endif

	If nOperation == 3
		OperationsA1S(nOperation, aDados)
	Else
		DbSelectArea("A1S")
		A1S->(DbSetOrder(1))
		If A1S->(DbSeek(FwXFilial("A1S") + cNotification))
			OperationsA1S(nOperation, aDados)
		Else
			SetRestFault(404, STR0001 ) //"Notificacao nao encontrada"
		EndIf
		A1S->(DbCloseArea())
	Endif

	If nOperation <> 5
		::oHashFields:Clean()
	Endif

	FreeObj(::oHashFields)
	RestArea(aArea)
	aSize(aDados, 0)
	aSize(aArea, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} NotificationsProtheusData::setHashFields
    Define os campos utilizados na operação de Incluir e Alterar.
	@type		method
    @author		Danilo Salve
    @since		22/12/2020
    @version	12.1.27 ou Superior
/*/
//------------------------------------------------------------------------------
METHOD setHashFields() CLASS NotificationsProtheusData
	::oHashFields := tHashMap():new()

	::oHashFields:Set("title"               , "A1S_TITULO")
	::oHashFields:Set("description"         , "A1S_DESC")
	::oHashFields:Set("type"                , "A1S_TIPO")
	::oHashFields:Set("userid"              , "A1S_CODUSR")
	::oHashFields:Set("notificationstatus"  , "A1S_STATUS")
	::oHashFields:Set("movimentationstatus" , "A1S_MOV")
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} OperationsA1S
    Grava/Exclui a Notificão conforme o tipo de operação.
	@type		function
	@param 		nOperation	, Numeric	, Tipo de Operação (3 - Inclusao, 4 - Alteracao e 5 - Exclusao)
	@param		aDados		, Array		, Array de Campos e Conteudo que devem ser incluidos/alterados
    @author		Squad CRM & Faturamento
    @since		21/01/2021
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function OperationsA1S(nOpc as Numeric, aDados as Array) as Logical
	Local aMsgErro	:= {}
	Local cError	:= ""
	Local lRet		:= .T.
	Local cErrorAux as Character
	Local nError	as Numeric
	Local nX		as Numeric
	Local oModel	as Object
	Local oModelA1S	as Object

	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')

	nOpc := IIF(Empty(nOpc), 3, nOpc)

	oModel := FWLoadModel("TGVA001")
	oModelA1S:= oModel:GetModel("A1SMASTER")

	If nOpc == MODEL_OPERATION_INSERT
		oModel:SetOperation(MODEL_OPERATION_INSERT)
	Elseif nOpc == MODEL_OPERATION_UPDATE
		oModel:SetOperation(MODEL_OPERATION_UPDATE)
	Elseif nOpc == MODEL_OPERATION_DELETE
		oModel:SetOperation(MODEL_OPERATION_DELETE)
	Endif

	oModel:Activate()
	If oModel:IsActive()
		If oModel:GetOperation() <> MODEL_OPERATION_DELETE
			For nX := 1 To Len(aDados)
				If oModel:GetOperation() <> MODEL_OPERATION_INSERT .And. aDados[nX, 1] == "A1S_CODUSR"
					Loop
				Else
					If !oModelA1S:SetValue(aDados[nX,1], aDados[nX,2])
						lRet := .F.
						Exit
					EndIf
				Endif
			Next
		Endif
	Else
		lRet := .F.
	Endif

	If !lRet .Or. !( oModel:VldData() .And. oModel:CommitData() )
		aMsgErro := oModel:GetErrorMessage()
		For nError := 1 To Len(aMsgErro)
			If ValType(aMsgErro[nError]) == "C"
				cErrorAux := StrTran( StrTran( aMsgErro[nError], "<", "" ), "-", "" ) + (" ")
				If existConvertStringToLine
					cErrorAux := convertStringToLine(cErrorAux, .T.)
				EndIf
				cError += cErrorAux
			EndIf
		Next
		lRet := .F.
		SetRestFault(400, cError )
	Else
		If oModel:GetOperation() == MODEL_OPERATION_INSERT
			oRest:setResponse(SetNotificationResponse())
		ElseIf oModel:GetOperation() == MODEL_OPERATION_UPDATE
			oRest:setResponse(SetNotificationResponse())
		ElseIf oModel:GetOperation() == MODEL_OPERATION_DELETE
			oRest:setResponse('{ "message": "' + STR0002 +'"}') // Notificação excluída com sucesso.
		EndIf
	Endif

	oModel:DeActivate()
	FreeObj(oModelA1S)
	FreeObj(oModel)
	aSize(aMsgErro, 0)
Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapFieldsA1S
    Cria o Mapa de campos Protheus x API para as Notificações.
	@type		function
	@param		oSelf	, Object	, Objeto com herança da classe FWAdapterBaseV2
	@param		isOnline, Logical	, Adicionar campos no padrão OnLine ou Sync
    @author		Danilo Salve
    @since		15/07/2021
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Function AddMapFieldsA1S(oSelf as Object, isOnline as Logical)
    Local aInternalId	:= GetInternalId( { "A1S_FILIAL", "A1S_CODIGO" } )
	Local lFixedId		:= !oSelf:oJsonObj:lList
    
	If isOnline
		oSelf:AddMapFields("internalid"			, "internalid"		, .T., .F., { "internalid"  , 'C', aInternalId[1], 0 }, aInternalId[2])
	Else
		oSelf:AddMapFields("internalid"			, "internalid"		, .T., .F., { "internalid"  , 'C', aInternalId[1], 0 }, "' '")
		oSelf:AddMapFields("deleted"			, "deleted"			, .T., .F., { "deleted"     , 'C', 1, 0 }, "D_E_L_E_T_")
	Endif

	oSelf:AddMapFields("id"                    	, "A1S_CODIGO"		, .T., lFixedId, { "A1S_CODIGO"  , 'C', GetFieldLength("A1S_CODIGO") , 0 })
	oSelf:AddMapFields("title"                 	, "A1S_TITULO"		, .T., .F., { "A1S_TITULO"  , 'C', GetFieldLength("A1S_TITULO") , 0 })
	oSelf:AddMapFields("description"           	, "A1S_DESC"		, .T., .F., { "A1S_DESC"    , 'M', GetFieldLength("A1S_DESC")   , 0 })
	oSelf:AddMapFields("type"                  	, "A1S_TIPO"		, .T., .F., { "A1S_TIPO"    , 'C', GetFieldLength("A1S_TIPO")   , 0 })
	oSelf:AddMapFields("userid"                	, "A1S_CODUSR"		, .T., .F., { "A1S_CODUSR"  , 'C', GetFieldLength("A1S_CODUSR")	, 0 })
	oSelf:AddMapFields("notificationdate"      	, "A1S_DATA"		, .T., .F., { "A1S_DATA"    , 'D', GetFieldLength("A1S_DATA")   , 0 })
	oSelf:AddMapFields("notificationtime"      	, "A1S_HORA"		, .T., .F., { "A1S_HORA"    , 'C', GetFieldLength("A1S_HORA")   , 0 })
	oSelf:AddMapFields("notificationstatus"    	, "A1S_STATUS"		, .T., .F., { "A1S_STATUS"  , 'C', GetFieldLength("A1S_STATUS") , 0 })
	oSelf:AddMapFields("movimentationstatus"   	, "A1S_MOV"			, .T., .F., { "A1S_MOV"     , 'N', GetFieldLength("A1S_MOV")    , 0 })

Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
    Monta a expressão SQL para consulta das Notificações.
	@type		function
	@return		Character, Expressão SQL
    @author		Danilo Salve
    @since		15/07/2021
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Function GetQueryA1S() as Character
	Local cQuery AS CHARACTER

	cQuery := " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName("A1S") + " A1S "
	cQuery += " WHERE #QueryWhere#"

Return cQuery

//------------------------------------------------------------------------------
/*/{Protheus.doc} SetNotificationResponse
    Definir um JSON com os dados de uma notificação previamente posicionada.
	@type		function
	@return		Json, Objeto JSON com os dados da Notificação
    @author		Danilo Salve
    @since		16/07/2021
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function SetNotificationResponse() as Json 
	Local jResponse := JsonObject():new()

	jResponse['id'] := FWhttpEncode(A1S->A1S_CODIGO)
	jResponse['internalid'] := FwXFilial('A1S') + FWhttpEncode(A1S->A1S_CODIGO)
	jResponse['title'] := FWhttpEncode(Rtrim(A1S->A1S_TITULO))
	jResponse['description'] := FWhttpEncode(RTRIM(A1S->A1S_DESC))
	jResponse['type'] := A1S->A1S_TIPO
	jResponse['notificationstatus'] := A1S->A1S_STATUS
	jResponse['movimentationstatus'] := A1S->A1S_MOV
	jResponse['userid'] := FWhttpEncode(A1S->A1S_CODUSR)
	jResponse['notificationdate'] := FWhttpEncode(StrTran(FWTimeStamp(3, A1S->A1S_DATA, ""), "T", ""))
	jResponse['notificationtime'] := FWhttpEncode(A1S->A1S_HORA)
	jResponse['deleted'] := .F.

Return jResponse
