#include 'tlpp-core.th'
#include 'tlpp-rest.th'

#DEFINE SCHEMASC5 "000009"
#DEFINE SCHEMASC6 "000010"

Static lExistGVFLDC5 := ExistBlock("GVFLDC5")
Static lExistGVFLDC6 := ExistBlock("GVFLDC6")

namespace totvs.protheus.backoffice.pgvCustomFields

//----------------------------------------------------------------------------------------
/*/{Protheus.doc} pgvCustomFields
    API para integração de campos personalizados - Utilizada no Portal Gestão de Vendas
    @type       class
    @version    12.1.33
    @author     Danilo Salve / Squad CRM & Faturamento
    @since      18/04/2023
/*/
//----------------------------------------------------------------------------------------
class pgvCustomFields
	private data aFieldsSC5 as array
	private data aFieldsSC6 as array
	private data aFields    as array

	public method new ()                        as object
	@Get("/api/pgv/customFields/")
	public method getCustomFields()             as logical
	public method initHandleCustomFields()
	public method setAFieldsSC5()               as array 
	public method setAFieldsSC6()               as array
	public method getAFields()                  as array
	public method getAFieldsSC5()               as array
	public method getAFieldsSC6()               as array
	public method isValidField()                as logical
	
	private method handleCustomFields()         as json
	private method handleField()                as json
	private method toDynamicFormType()          as character
	private method toDynamicFormOptions()       as array
	private method handleDynamicFormGrid()
	private method handleWithMaxSizeOfNumeric()
endClass

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::new() as object
    obtem uma nova instancia da classe pgvCustomFields com os campos customizados a serem considerados no PGV
    @type       method
    @version    12.1.33
    @author     Rafael Previdi / Squad CRM & Faturamento
    @since      19/04/2023
    @return object, nova instancia da classe pgvCustomFields
/*/
//-------------------------------------------------------------------------------------------------------------
method new() as object class pgvCustomFields
	::aFieldsSC5 := {}
	::aFieldsSC6 := {}
	::aFields    := {}

	if lExistGVFLDC5
		::aFieldsSC5 := ExecBlock("GVFLDC5", .T., .T., {})
	endIf

	if lExistGVFLDC6
		::aFieldsSC6 := ExecBlock("GVFLDC6", .T., .T., {})
	endIf
return self

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} getCustomFields
	Metodo para retornar uma estrutura de dados referente aos de campos personalizados - Utilizada no Portal Gestão de Vendas
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 18/04/2023
	@return nulo
/*/
//----------------------------------------------------------------------------------------------------------------------------
method getCustomFields() as logical class pgvCustomFields
	local jResponse := jsonObject():new() as json

	::initHandleCustomFields()
	jResponse['items'] := aClone(::aFields)

	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	oRest:setStatusCode(200)
	oRest:setResponse(jResponse)

	FwFreeObj(jResponse)
return .t.

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} initHandleCustomFields
	Metodo executar os pontos de entrada referentes a lista dos campos customizados e realizar a busca dos seus respectivos
	dados
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 19/04/2023
	@return nulo
/*/
//----------------------------------------------------------------------------------------------------------------------------
method initHandleCustomFields() class pgvCustomFields

	if empty(::aFields)
		aAdd(::aFields, ::handleCustomFields(::aFieldsSC5, SCHEMASC5))
		aAdd(::aFields, ::handleCustomFields(::aFieldsSC6, SCHEMASC6))
	endIf

return nil

//---------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} handleCustomFields
	Efetua a transformação de uma lista de campos em uma estrutura compativel com um formulario dinamico.
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 18/04/2023
	@param aFields, array, Lista de Campos de um determinado schema.
	@param cSchema, character, Código do schema.
	@return json, Schema e lista de campos do schema.
/*/
//---------------------------------------------------------------------------------------------------------
method handleCustomFields(aFields as array, cSchema as character) as json class pgvCustomFields
	local aStruct   := {} as array
	local nField    := 0 as integer
	local jSchema   := jsonObject():New() as json
	local nQtFields := Len(aFields)
	local cField    := "" as character

	jSchema['schema'] := cSchema

	for nField := 1 to nQtFields
		cField := aFields[nField]

		if ::isValidField(cField, cSchema)
			aAdd(aStruct, ::handleField(cField))
		endif
	next
	jSchema['fields'] := aStruct

return jSchema

//----------------------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} isValidField
	Valida se o campo eh referente a tabela do schema e se o campo existe no SX3 para prosseguir o processamento ou se sera descartado.
	@type method
	@version 1.0
	@author Rafael Mota Previdi / Squad CRM & Faturamento
	@since 25/04/2023
	@param cField , character, X3_CAMPO - Campo que sera validado para ser adicionado na lista
	@param cSchema, character, schema referente ao campo da tabela que esta sera validado
	@return lIsValid, logical, indica se o campo e valido para o processamento ou nao.
/*/
//----------------------------------------------------------------------------------------------------------------------------------------
method isValidField(cField as character, cSchema as character) as logical class pgvCustomFields
	local lIsValid       := .T. as logical
	local cPrefixTable   := ""  as character

	default cField  := ""
	default cSchema := ""

	do case
		case cSchema == SCHEMASC5
			cPrefixTable := "C5_"
		case cSchema == SCHEMASC6
			cPrefixTable := "C6_"
	endcase

	if !(substr(cField, 1, 3) == cPrefixTable)
		lIsValid := .F.
	endif

	if lIsValid .And. Empty(FWSX3Util():GetFieldStruct( cField ))
		lIsValid := .F.
	endif

	if !X3USO(FwGetSx3Cache(cField, "X3_USADO"))
		lIsValid := .F.
	endif

	if FwGetSx3Cache(cField, "X3_CONTEXT") == 'V'
		lIsValid := .F.
	endif 

return lIsValid

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} handleField
	Transforma a estrutura de um campo Protheus em uma estrutura de campo compativel com um PoDynamicForm.
	@obs Não permitido campos do tipo Memo ou campo não usados.
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 18/04/2023
	@param cField, character, X3_CAMPO - Campo que será adicionado na lista
	@return json, Estrutura do Campo formatado para um formulario dinamico.
/*/
//---------------------------------------------------------------------------------------------
method handleField(cField as character) as json class pgvCustomFields
	local aArea := FwGetArea() as array
	local aAreaSX3 := SX3->(FwGetArea()) as array
	local cPicture as character
	local cOption as character
	local cType as character
	local jField := jsonObject():new() as json
	local nMaxLength as numeric
	local nDecimalLength as numeric

	dbSelectArea("SX3")
	SX3->(dbSetOrder(2))
	If SX3->(dbSeek( cField ))
		cOption := X3CBOX()
		nMaxLength := FwGetSx3Cache(cField, "X3_TAMANHO" )
		nDecimalLength := FwGetSx3Cache(cField, "X3_DECIMAL" )

		jField['property'] := Lower(cField)
		jField['label'] := RTrim(FWhttpEncode(FWX3Titulo( cField )))
		jField['help'] := FWhttpEncode(FWSX3Util():GetDescription( cField ))

		If Empty( cOption )
			cType := FWSX3Util():GetFieldType( cField )
			jField['type'] := FWhttpEncode(::toDynamicFormType( cType, nDecimalLength ))
			::handleDynamicFormGrid( nMaxLength, cType, @jField )
			If cType == 'C'
				jField['maxLength'] := nMaxLength
			ElseIf cType == 'N'
				cPicture := Upper( X3Picture( cField ) )
				If nDecimalLength > 0
					::handleWithMaxSizeOfNumeric( cPicture, @jField )
					jField['decimalsLength'] := nDecimalLength
				Else
					jField['maxLength'] := nMaxLength
				Endif
				jField['placeholder'] := FWhttpEncode(Alltrim(Transform(0, cPicture ) ))
			ElseIf cType == 'D'
				jField['format'] := FWhttpEncode('dd/mm/yyyy')
				jField['placeholder'] := FWhttpEncode(DToC(FirstYDate(Date())))
			Endif
			jField['noAutocomplete'] := .t.
		Else
			jField['gridSmColumns'] := 12
			jField['gridMdColumns'] := 6
			jField['gridLgColumns'] := 4
			jField['gridXlColumns'] := 4
			jField['forceOptionsComponentType'] := FWhttpEncode('ForceOptionComponentEnum.select')
			jField['options'] := ::toDynamicFormOptions( cOption, nMaxLength )
		Endif
		jField['disabled'] := IIF(Upper(FwGetSx3Cache(cField, "X3_VISUAL" )) == 'V', .T., .F.)
		jField['required'] := X3Obrigat( cField )
		jField['showRequired'] := .t.
		jField['clean'] := .t.
		jField['default'] := .f.
	EndIf

	FwRestArea( aArea )
	FwRestArea( aAreaSX3 )
	aSize(aArea, 0)
	aSize(aAreaSX3, 0)
return jField

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} toDynamicFormType
	Transforma um tipo de um campo protheus em um tipo utilizado em um formulario dinamico
	@obs Campos do tipo memo não serão utilizados.
	@type method
	@version  
	@author Danilo Salve / Squad CRM & Faturamento
	@since 18/04/2023
	@param cType, character, X3_TIPO - Tipo do Campo no dicionario de dados
	@param nDecimalLength, numeric, X3_DECIMAL - Quantidade de casas decimais no dicionario
	@return character, return_description
/*/
//---------------------------------------------------------------------------------------------
method toDynamicFormType(cType as character, nDecimalLength as numeric) as character class pgvCustomFields
	if cType == 'C'
		return 'String'
	elseif cType == 'N'
		return IIF(nDecimalLength == 0, 'Number', 'Currency')
	elseif cType == 'D'
		return 'Date'
	endif
return 'invalid type'

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} toDynamicFormOptions
	Transforma uma lista de opções de um campo (X3_CBOX) em uma lista de objetos utilizado em um Formulario dinamico.
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 18/04/2023
	@param cOption, character, X3_CBOX - Lista de opções de um combobox
	@param nMaxLength, numeric, Tamanho máximo do campo
	@return array, Lista de opções
/*/
//---------------------------------------------------------------------------------------------
method toDynamicFormOptions(cOption as character, nMaxLength as numeric) as array class pgvCustomFields
	local aOption   := retsx3box(cOption,,,nMaxLength) as array
	local aOptions  := {} as array
	local jOption        as json
	local nOption   := 0 as integer
	local nQtOption := Len(aOption)

	for nOption := 1 to nQtOption
		if !empty(aOption[nOption, 1])
			jOption:= jsonObject():New()
			jOption['value'] := FWhttpEncode(RTrim(aOption[nOption, 2]))
			jOption['label'] := FWhttpEncode(Rtrim(aOption[nOption, 3]))
			aAdd(aOptions, jOption)
		endif
	next
	
	aSize(aOption, 0)
return aOptions

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} handleDynamicFormGrid
	Obtem a largura dos campo no Grid de um Formulario dinamico considerando o tamanho maximo do campo.
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 18/04/2023
	@param nMaxLength, numeric, X3_TAMANHO - Tamanho do campo
	@param cType, character, X3_TIPO - Tipo do Campo no dicionario de dados
	@param jField, json, Estrutura do campo que será adicionado as novas propriedades
	@return nulo
/*/
//---------------------------------------------------------------------------------------------
method handleDynamicFormGrid( nMaxLength as numeric, cType as character, jField as json ) class pgvCustomFields
	jField['gridSmColumns'] := 12
	jField['gridMdColumns'] := 6
	if cType == 'C'
		if nMaxLength <= 20
			jField['gridLgColumns'] := 3
			jField['gridXlColumns'] := 2
		elseif nMaxLength > 20 .and. nMaxLength <= 30
			jField['gridLgColumns'] := 4
			jField['gridXlColumns'] := 3
		elseif nMaxLength > 30 .and. nMaxLength <= 40
			jField['gridLgColumns'] := 5
			jField['gridXlColumns'] := 4
		elseif nMaxLength > 40
			jField['gridLgColumns'] := 6
			jField['gridXlColumns'] := 6
		endif
	else
		jField['gridLgColumns']:= 3
		jField['gridXlColumns']:= 3
	endif
return nil

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} handleWithMaxSizeOfNumeric
	Obtem o tamanho maximo e a quantidade de digitos antes de virgula de um campo númerico
	considerando a mascara do campo.
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 18/04/2023
	@param cPicture, character, X3_PICTURE do campo
	@param jField, json, Estrutura do campo que será adicionado as novas propriedades
	@return nulo
/*/
//---------------------------------------------------------------------------------------------
method handleWithMaxSizeOfNumeric( cPicture as character, jField as json ) class pgvCustomFields
	local thousandMaxlength as numeric

	cPicture := Alltrim(StrTran(StrTran(cPicture, '@E', ''),'@R', ''))
	jField['maxLength'] := Len(cPicture)
	cPicture := StrTran(cPicture, ',', '')
	thousandMaxlength := At('.', cPicture)
	jField['thousandMaxlength'] := IIF(thousandMaxlength > 0, thousandMaxlength - 1, 0)
return nil

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} setAFieldsSC5
	Preenche o atributo aFieldsSC5 com o array informado no parametro.
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/04/2024
	@param aFieldsSC5, array, array contendo os nomes dos campos personalizados da tabela SC5 a serem contemplados no PGV.
	@return ::aFieldsSC5, array, array contendo os nomes dos campos personalizados da tabela SC5 a serem contemplados no PGV.
/*/
//----------------------------------------------------------------------------------------------------------------------------
method setAFieldsSC5( aFieldsSC5 as array ) as array class pgvCustomFields
	::aFieldsSC5 := aFieldsSC5
return ::aFieldsSC5

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} setAFieldsSC6
	Preenche o atributo aFieldsSC6 com o array informado no parametro.
	@type method
	@version 1.0
	@author Danilo Salve / Squad CRM & Faturamento
	@since 20/04/2024
	@param aFieldsSC6, array, array contendo os nomes dos campos personalizados da tabela SC6 a serem contemplados no PGV.
	@return ::aFieldsSC6, array, array contendo os nomes dos campos personalizados da tabela SC6 a serem contemplados no PGV.
/*/
//----------------------------------------------------------------------------------------------------------------------------
method setAFieldsSC6( aFieldsSC6 as array ) as array class pgvCustomFields
	::aFieldsSC6 := aFieldsSC6
return ::aFieldsSC6

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} getAFields
	Retorna o atributo aFields
	@type method
	@version 1.0
	@author Rafael Mota Previdi / Squad CRM & Faturamento
	@since 20/04/2024
	@return ::aFields, array, array contendo jsons referentes aos campos personalizados a serem contemplados no PGV.
/*/
//----------------------------------------------------------------------------------------------------------------------------
method getAFields() as array class pgvCustomFields
return ::aFields

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} getAFieldsSC5
	Retorna o atributo aFieldsSC5
	@type method
	@version 1.0
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 08/05/2023
	@return ::aFields, array, array contendo os campos referente a SC5.
/*/
//----------------------------------------------------------------------------------------------------------------------------
method getAFieldsSC5() as array class pgvCustomFields
return ::aFieldsSC5

//----------------------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} getAFieldsSC6
	Retorna o atributo aFieldsSC6
	@type method
	@version 1.0
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 08/05/2023
	@return ::aFields, array, array contendo os campos referente a SC6.
/*/
//----------------------------------------------------------------------------------------------------------------------------
method getAFieldsSC6() as array class pgvCustomFields
return ::aFieldsSC6
