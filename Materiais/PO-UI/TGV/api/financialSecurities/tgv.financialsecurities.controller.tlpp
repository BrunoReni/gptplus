#include 'tlpp-core.th'
#include "tlpp-rest.th"
#include "tgv.financialsecurities.controller.ch"

namespace tgv.financialsecurities
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvfinancialsecurities
	API para consulta de títulos a receber do TOTVS Gestão de Vendas.

	@author		Danilo Salve
	@since		18/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Class tgvfinancialsecurities
	Public Data jResposta  as Json
	Public Data nPage      as Numeric
	Public Data nPageSize  as Numeric
	Public Data oHashQuery as Object
	Public Data oService   as Object

	Public Method New() as Object
	Public Method GetQueryString() as Array
	Public Method AddQueryString()
	Public Method SetMapQueryString()

	@Get("/api/tgv/financialsecurities/")
	Public Method GetFinancialSecurities() as Logical

	@Get("api/tgv/financialsecurities/financialdefault/:customer/:store")
	Public Method GetFinancialDefault() as Logical
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvfinancialsecurities
	Cria uma nova instacia do objeto

	@sample		tgvfinancialsecurities:New()
	@author		Danilo Salve
	@since		18/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New() as Object Class tgvfinancialsecurities
	::nPage     := 1
	::nPageSize := 10
	::oService  := FinancialSecuritiesService():GetInstance()
	::jResposta := JsonObject():New()
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetFinancialSecurities - /api/tgv/financialsecurities/
	Efetua o GET de todos os registros

	@sample		tgvfinancialsecurities:GetFinancialSecurities()
	@author		Danilo Salve
	@since		18/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetFinancialSecurities() as Logical Class tgvfinancialsecurities
	getPageAndPageSize(@::nPage, @::nPageSize)
	::jResposta:fromJson(::oService:Get(::nPage, ::nPageSize, ::GetQueryString()))
	AnswerRest(::jResposta)
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetFinancialDefault - /api/tgv/financialsecurities/financialdefault/:customer
	Efetua o Calculo da inadimplencia de um cliente especifico

	@sample		tgvfinancialsecurities:GetFinancialDefault()
	@author		Danilo Salve
	@since		25/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetFinancialDefault() as Logical Class tgvfinancialsecurities
	Local jPath		:= oRest:GetPathParamsRequest()
	Local jError    := JsonObject():New()
	Local lValid	:= .F.
	Local cCustomerCode   	as Character
	Local cCustomerStore	as Character

	oRest:setKeyHeaderResponse('Content-Type','application/json')

	If( jPath != Nil)
		cCustomerCode  := jPath["customer"]
		cCustomerStore := jPath["store"]
		If Empty(cCustomerCode) .Or. Empty(cCustomerStore)
			lValid := .F.
		Else
			lValid := .T.
		EndIf
	Endif

	If lValid
		::JResposta := ::oService:GetDefault(cCustomerCode, cCustomerStore)
		oRest:setResponse(::JResposta:ToJson())
	Else
		jError['errorCode'] := 400
		jError['errorMessage'] := STR0001 //"Codigo do Cliente invalido"
		oRest:setStatusCode( 400 )
		oRest:setFault(jError:ToJson())
	Endif

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetQueryString
    Obtem todos os parametros enviados na requisição (Exceto Page e PageSize)

    @sample 	tgvfinancialsecurities:GetQueryString()
    @author		Danilo Salve
    @since		08/01/2020
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetQueryString() as Array Class tgvfinancialsecurities
	Local aQueryString  := {}
	Local aJsonName     as Array
	Local jQueryString  := oRest:getQueryRequest()
	Local nQueryString  as Numeric

	If ( jQueryString <> Nil )
		aJsonName := jQueryString:GetNames()
		::SetMapQueryString()
		For nQueryString := 1 To Len(aJsonName)
			::AddQueryString(@aQueryString, aJsonName[nQueryString])
		Next
		::oHashQuery:Clean()
		FreeObj(::oHashQuery)
	Endif

Return aQueryString

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddQueryString
	Adiciona em um Array o valor convertido do QueryParam.

	@sample		tgvfinancialsecurities:AddQueryString(@aQueryString, "customerid")
	@param		aQueryString, Array 	, Lista de campos convertido 
		(Deve ser enviado por referencia)
	@param		cField      , Character  , Campo informado no Param.
	@author		Danilo Salve
	@since		08/01/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method AddQueryString(aQueryString as Array, cField as Character) Class tgvfinancialsecurities
	Local cContent      as Character
	Local cWhere        as Character

	If ::oHashQuery:Get(cField, @cWhere)
		cContent := oRest:getQueryRequest():GetJsonText(cField)
		If cField $ "filter"
			cWhere := " AND ( LOWER(SE1.E1_NUM) LIKE '" + cContent  + "%'"
			cContent := ConvertDate(cContent)

			If !Empty(cContent)
				cWhere += " OR SE1.E1_VENCREA = '" + cContent  + "'"
				cWhere += " OR SE1.E1_EMISSAO = '" + cContent  + "'"
			Endif

			cWhere += ") "
		Else
			cWhere := " AND " + cWhere + " = '" + cContent + "'"
		Endif
		aAdd(aQueryString, cWhere)
	Endif
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} SetMapQueryString
	Cria um lista com os campos utilizados no Map do QueryParam

	@sample		tgvfinancialsecurities:SetMapQueryString()
	@author		Danilo Salve
	@since		08/01/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method SetMapQueryString() Class tgvfinancialsecurities
	::oHashQuery := tHashMap():New()

	::oHashQuery:Set("customerid"			      , "SE1.E1_CLIENTE")
	::oHashQuery:Set("customerstore"			  , "SE1.E1_LOJA")
	::oHashQuery:Set("filter"			          , "filter")
Return Nil

//----------------------------------------------------------------------------
/*/{Protheus.doc} ConvertDate
	Efetua a conversão da Data no formato yyyy-M-dd para o padrão Protheus.

	@sample 	ConverterData("2020-3-1")
	@param		cDate, Character, campo data no formato texto.
	@Return		Character, retorna o campo convertido no formato de data.
	@author		Danilo Salve
	@since		10/12/2020
	@version	12.1.27 ou Superior
/*/
//----------------------------------------------------------------------------
Static Function ConvertDate(cDate as Character) as Character
	Local aDate          as Array
	Local cConvertedDate as Character

	aDate := Separa(cDate, "-")
	If Len(aDate) == 3
		cConvertedDate := aDate[1] + StrZero(Val(aDate[2]),2) + StrZero(Val(aDate[3]),2)
	Endif

	aSize(aDate, 0)
Return cConvertedDate
