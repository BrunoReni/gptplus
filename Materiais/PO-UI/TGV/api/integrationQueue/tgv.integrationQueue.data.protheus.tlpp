#include 'tlpp-core.th'
#include 'FWMVCDEF.CH'
#include 'tgv.integrationqueue.data.protheus.ch'

namespace tgv.integrationQueue
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} IntegrationQueueProtheusData
	Disponibiliza os métodos para consulta e manutenção dos registros.
	@type class
	@sample		IntegrationQueueProtheusData:new()
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		08/12/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
CLASS IntegrationQueueProtheusData FROM FWAdapterBaseV2
	Public Data aCustomFields		as Array
	Public Data cCustomFields		as Character
	Public Data cSource				as Character
	Public Data isAdmin				as Logical
	Public Data lcanObfuscateField	as Logical
	Public Data oHashFieldsPD		as Object
	Public Data nFields				as Numeric

	Public Method new() as Object
	Public Method getQueue()
	Public Method writeOnQueue()
	Public Method rowToJson()
	Public Method addCustomFields()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} IntegrationQueueProtheusData::new(cVerbo as Character) as Object
	Obtem uma nova instancia da classe IntegrationQueueProtheusData
	@type		method
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@param		cVerbo	, Character	, Verbo que será utilizado na requisição
	@since		01/09/2021
	@return		object	, Nova instancia da classe IntegrationQueueProtheusData
/*/
//------------------------------------------------------------------------------
Method new(cVerbo as Character) as Object CLASS IntegrationQueueProtheusData
	_Super:new( "GET" , .T. )
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} IntegrationQueueProtheusData::getQueue
	Consulta a Fila de Registros para integração
	@type		method
	@param		nPage		, Numeric	, Número da página que será retornada
	@param		nPageSize	, Numeric	, Quantidade de registros por pagina
	@param		cData		, Character , Data de sincronismo
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		08/12/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method getQueue(nPage as Numeric, nPageSize as Numeric, cData as Character) CLASS IntegrationQueueProtheusData
	Local aArea		:= GetArea() as Array
	Local cWhere	as Character
	
	AddMapFields( self )
	
	::addCustomFields()
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( GetQuery() )

	cWhere := " A1T.A1T_FILIAL = '" + FwXFilial("A1T") + "'"

	If !Empty(cData) .And. SubStr(cData,1,1) != '-'
		cWhere += " AND A1T.S_T_A_M_P_ > " + ConvertTimeStamp( cData, "value", "timestamp" )
	Else
		cWhere += " AND A1T.D_E_L_E_T_ = ' '"
	EndIf

	::SetWhere( cWhere )
	::SetOrder( "A1T_FILIAL,A1T_STATUS,A1T_DTREC,A1T_HRREC" )

	If ::Execute()
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize( aArea, 0 )
	aSize(::aCustomFields, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
	Cria o Mapa de campos Protheus x API - Fila de Registros (A1T)

	@type		function
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@param		oSelf	, Object	, Objeto com herança da classe FWAdapterBaseV2
	@author		Danilo Salve
	@since		08/12/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function AddMapFields( oSelf as Object )
	Local aInternalId := GetInternalId( { "A1T_FILIAL", "A1T_NUM" } ) as Array

	oSelf:AddMapFields( "internalid"	, "internalid"	, .T., .F., { "internalid"	, 'C', aInternalId[1] , 0 }, "' '")
	oSelf:AddMapFields( "branchid"		, "A1T_FILIAL"	, .T., .F., { "A1T_FILIAL"	, 'C', GetFieldLength("A1T_FILIAL")	, 0 } )
	oSelf:AddMapFields( "id"			, "A1T_NUM"		, .T., .F., { "A1T_NUM"		, 'C', GetFieldLength("A1T_NUM")	, 0 } )
	oSelf:AddMapFields( "status"		, "A1T_STATUS"	, .T., .F., { "A1T_STATUS"	, 'C', GetFieldLength("A1T_STATUS")	, 0 } )
	oSelf:AddMapFields( "json"			, "A1T_JRECEB"	, .T., .F., { "A1T_JRECEB"	, 'M', GetFieldLength("A1T_JRECEB")	, 0 } )
	oSelf:AddMapFields( "jsonerror"		, "A1T_ERROR"	, .T., .F., { "A1T_ERROR"	, 'M', GetFieldLength("A1T_ERROR")	, 0 } )
	oSelf:AddMapFields( "source"		, "A1T_ROTINA"	, .T., .F., { "A1T_ROTINA"	, 'C', GetFieldLength("A1T_ROTINA")	, 0 } )
	oSelf:AddMapFields( "deleted"		, "deleted"		, .T., .F., { "deleted"		, 'C', 1, 0 }, "A1T.D_E_L_E_T_" )

	aSize(aInternalId, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
	Monta a expressão SQL para consulta da Fila de Registros.
	@type		function
	@return		Character, Expreesão SQL
	@author		Danilo Salve
	@since		08/12/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function GetQuery() as Character
	Local cQuery AS Character

	cQuery := " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName("A1T") + " A1T "
	cQuery += " WHERE #QueryWhere#"
Return cQuery

//------------------------------------------------------------------------------
/*/{Protheus.doc} IntegrationQueueProtheusData::writeOnQueue
	Inclui/Altera um Registro na Fila de Processamento
	@type		method
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		08/12/2020
	@param 		jBody		, json		, Objeto com o corpo da requisição
	@param 		cOperation	, character	, Tipo de Operação (3, 4, 5)
	@param 		cExternalId	, character	, Identificador externo da entidade
	@param 		cSource		, character	, Rotina responsavel por gravar o registro (MATA410/MATA415)
/*/
//------------------------------------------------------------------------------
Method writeOnQueue(jBody as Json, cOperation as Character, cExternalId as Character, cSource as Character) CLASS IntegrationQueueProtheusData
	Local aDados		:= {}
	Local cError		:= STR0001 // "Identificador do Registro não informado"
	Local nOperation	as Numeric
	Local nStatusCode	:= 400

	Default cOperation  := "3"
	Default cExternalID	:= ""
	Default cSource     := ""

	cExternalID := IIF(Empty(cExternalID), GetProperties(jBody, "id"), cExternalID)
	cSource := GetProperties(jBody, "source")

	oRest:setKeyHeaderResponse('Content-Type', 'application/json')

	If !Empty(cExternalId)

		DbSelectArea("A1T")
		A1T->(DbSetOrder(1))
		If A1T->(DbSeek(xFilial("A1T") + cExternalId))
			nOperation 	:= 4
			nStatusCode	:= 200
		Else
			nOperation	:= 3
			nStatusCode	:= 201
			aAdd(aDados, {"A1T_NUM"	, cExternalId	, Nil})
		Endif

		aAdd(aDados, {"A1T_STATUS"	, "0"				, Nil})
		aAdd(aDados, {"A1T_TPOPER"	, cOperation		, Nil})
		aAdd(aDados, {"A1T_DTREC"	, Date()			, Nil})
		aAdd(aDados, {"A1T_HRREC"	, Left(Time(), 5)	, Nil})
		aAdd(aDados, {"A1T_DTPROC"	, CtoD('  /  /    '), Nil})
		aAdd(aDados, {"A1T_HRPROC"	, ""				, Nil})
		If cOperation == "5"
			aAdd(aDados, {"A1T_JRECEB" , jBody:toJson()			, Nil})
		Elseif cOperation <> "5"
			aAdd(aDados, {"A1T_JRECEB" , oRest:getBodyRequest()	, Nil})
		EndIf
		aAdd(aDados, {"A1T_ERROR"	, ""				, Nil})
		aAdd(aDados, {"A1T_ROTINA"	, cSource			, Nil})

		If CommitA1T(nOperation, aDados, @cError)
			oRest:setStatusCode(nStatusCode)
			If cOperation == "5"
				oRest:setResponse(jBody:toJson())
			Else
				oRest:setResponse(oRest:getBodyRequest())
			Endif
		Else
			SetRestFault(400, cError )
		Endif
	Else
		SetRestFault(nStatusCode, cError)
	Endif

	aSize(aDados, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} IntegrationQueueProtheusData::rowToJson
	Converte o retorno consulta da SQL em JSON
	@type		method
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		01/09/2021
	@param		cAlias	, character	, Alias da Consulta SQL
	@param		aFields	, array		, Campos do MapFields
	@param		lEmpty	, logical	, É Vazio?
/*/	
//------------------------------------------------------------------------------
METHOD rowToJson( cAlias as Character, aFields as Array, lEmpty as logical) CLASS IntegrationQueueProtheusData
	Default lEmpty := .F.
	ConvertResponseValues(aFields, cAlias, lEmpty, @Self)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} CommitA1T
	Grava os dados da requisição na tabela de Fila de Pedidos/Orçamentos
	@type		function
	@version	12.1.27
	@author 	Danilo Salve / Squad CRM & Faturamento
	@since 		08/12/2020
	@param 		nOperation	, numeric	, Operacao ( 3 - Inclusao, 4 - Alteracao e 5 - Exclusao )
	@param 		aDados		, array		, Array na estrutura de ExecAuto com campos e valores.
	@param 		cError		, character	, Variavel que em caso de erro retorna o erro.
	@return 	logical	, Retorna se gravou o registro
/*/
//------------------------------------------------------------------------------
Static Function CommitA1T(nOperation as Numeric, aDados as Array, cError as Character) as Logical
	Local aMsgErro	:= {}
	Local lContinua	:= .T.
	Local lRetorno	:= .F.
	Local oModel	as Object
	Local oModelA1T	as Object
	Local nX		as Numeric

	Default aDados		:= {}

	oModel := FWLoadModel("TGVA002")
	oModelA1T:= oModel:GetModel("A1TMASTER")

	nOperation := IIF(Empty(nOperation), 3, nOperation)
	cError := IIF(Empty(cError), "", cError)

	Do Case
	Case nOperation == 3
		oModel:SetOperation(MODEL_OPERATION_INSERT)
	Case nOperation == 4
		oModel:SetOperation(MODEL_OPERATION_UPDATE)
	Case nOperation == 5
		oModel:SetOperation(MODEL_OPERATION_DELETE)
	Otherwise
		lContinua := .F.
	EndCase

	If lContinua
		oModel:Activate()

		If oModel:IsActive()
			If oModel:GetOperation() <> MODEL_OPERATION_DELETE
				For nX := 1 To Len(aDados)
					If !oModelA1T:SetValue(aDados[nX,1], aDados[nX,2])
						lContinua := .F.
						Exit
					EndIf
				Next
			Endif
		Else
			lContinua := .F.
		Endif

		If !lContinua .Or. !( oModel:VldData() .And. oModel:CommitData() )
			cError	:= ""
			aMsgErro := oModel:GetErrorMessage()
			For nX := 1 To Len(aMsgErro)
				If ValType(aMsgErro[nX]) == "C"
					cError += StrTran( StrTran( aMsgErro[nX], "<", "" ), "-", "" ) + (" ")
				EndIf
			Next
			lContinua := .F.
		Else
			salesOfflineExecute()
		Endif
	EndIf

	lRetorno := lContinua

	oModel:DeActivate()

	FreeObj(oModelA1T)
	FreeObj(oModel)
	aSize(aMsgErro, 0)

Return lRetorno

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetProperties
	Retorna o valor de a propriedade informada (id para external id e source para
	fonte que deverá executar o execauto).
	@type		function
	@param		jBody,	JsonObject , Corpo da requisiï¿½ï¿½o convertida em objeto JSON.
	@param		cProperty,	Character, Proprieda na qual o valor deverï¿½ ser retornado.
	@return		Character,	Retorna o valor da propriedade informada.
	@author		Danilo Salve
	@since		04/12/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------


Static Function GetProperties(jBody as Json, cProperty as Character) as Character
	Local cReturn as Character

	Default jBody := JsonObject():new()

	If cProperty == "id"
		If ValType(jBody:GetJsonObject("id")) == "C"
			cReturn := jBody:GetJsonObject("id")
		EndIf
	ElseIf cProperty == "source"
		If ValType(jBody:GetJsonObject("source")) == "C"
			cReturn := jBody:GetJsonObject("source")
		Endif
	EndIf

Return cReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} IntegrationQueueProtheusData::addCustomFields
	Metodo Auxiliar, deve carregar os Atributos utilizados na conversão dos valores.
	@type		method
	@version	12.1.27
	@author		Squad CRM & Faturamento
	@since		01/09/2021
/*/
//------------------------------------------------------------------------------
METHOD addCustomFields() CLASS IntegrationQueueProtheusData
	Self:isAdmin := FwIsAdmin()
	Self:aCustomFields := {}
	Self:nFields := Len(Self:oJsonObj:aMapFields)
	
	aAdd(Self:aCustomFields, {"internalid"	, {|| GetInternalIdQry((cAlias)->A1T_FILIAL + (cAlias)->A1T_NUM)}})

	Self:cCustomFields := "internalid"
Return Nil
