#include "tlpp-core.th"
#include "tgv.cardshome.data.protheus.ch"
#include "fwlibversion.ch"

Static __aPrepared  := {}

namespace tgv.cardsHome
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} CardsHomeProtheusData
	API para consulta dos Cards (Indicadores de Venda)
	@type		class
	@author		Squad CRM & Faturamento
	@since		06/01/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Class CardsHomeProtheusData
	Private Data aCards 			as Array
	Private Data aDatesSearched 	as Array
	Private Data cSeller 			as Character
	Private Data jTotalItems 		as Json
	Private Data jItemsToBeBilled 	as Json
	Private Data jPendingItems 		as Json
	Private Data jTotalCompleted 	as Json
	Private Data isAdmin 			as Logical

	Public Method New() as Object
	Public Method GetAll() as Character
	Private Method GetSeller() as Character
	Private Method BuildTotalItemsCard() as Json
	Private Method BuildItemsToBeBilledCard() as Json
	Private Method BuildPendingItemsCard() as Json
	Private Method BuildTotalCompletedCard() as Json
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} CardsHomeProtheusData::New() as Object
	Cria um novo objeto de Cards (Indicadores de Venda)
	@type		method
	@version	12.1.33
	@author		Squad CRM & Faturamento
	@since		06/01/2020
	@return 	object, Obtem uma nova instancia da classe CardsHomeProtheusData
/*/
//------------------------------------------------------------------------------
Method New() as Object Class CardsHomeProtheusData
	::aCards := {}
	::aDatesSearched := {}
	::isAdmin := FwIsAdmin()
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} CardsHomeProtheusData::GetSeller() as Character
	Obtém o Código do Vendedor.
	@type		method
	@version	12.1.33
	@author		Danilo Salve
	@since		07/01/2020
	@return 	character, Código do Vendedor
/*/
//------------------------------------------------------------------------------
Method GetSeller() as Character Class CardsHomeProtheusData
	Local cReturn as Character

	IF !::isAdmin
		cReturn := getSellerFromFilter(::isAdmin, .T.) //Retorna o codigo do Vendedor
	Else
		cReturn := ""
	Endif
Return cReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} CardsHomeProtheusData::GetAll(dInitialDate as Date, dFinalDate as Date) as Character
	Obtem todos os Cards de Indicadores de Venda TGV.
	@type		method
	@version	12.1.33
	@param		dInitialDAte, Date, Data Inicial utilizada para filtrar os registros
	@param		dFinalDate	, Date, Data Final utilizada para filtrar os registros
	@author		Squad CRM & Faturamento
	@since		06/01/2020
/*///------------------------------------------------------------------------------
Method GetAll(dInitialDate as Date, dFinalDate as Date) as Character Class CardsHomeProtheusData
	Local jResponse := JsonObject():New()
	Local cResponse := '' as character

	::cSeller := ::GetSeller()

	If canExecutewithUser(::isAdmin, ::cSeller)
		aAdd(::aDatesSearched, {FirstDate(dInitialDate), LastDate(dFinalDate)})

		aAdd(::aCards, ::BuildTotalItemsCard())
		aAdd(::aCards, ::BuildItemsToBeBilledCard())
		aAdd(::aCards, ::BuildPendingItemsCard())
		aAdd(::aCards, ::BuildTotalCompletedCard())

		jResponse['hasNext']  := .F.
		jResponse['items']    := ::aCards
		cResponse := jResponse:ToJson()

		FreeObj(jResponse)
		FreeObj(::jTotalItems)
		FreeObj(::jItemsToBeBilled)
		FreeObj(::jPendingItems)
		FreeObj(::jTotalCompleted)
	Endif

	aSize(::aDatesSearched, 0)
	aSize(::aCards, 0)
Return cResponse

//------------------------------------------------------------------------------
/*/{Protheus.doc} TotalItems
	Retorna a quantidade total de itens do Pedido de venda
	@type		function
	@param		aDatesSearched	, Array, Array de datas
	@param		cSeller			, Character, Código do Vendedor
	@return		Numerico, Quantidade Total de Itens do Pedido de vendas
	@author		Squad CRM & Faturamento
	@since		06/01/2020
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Static Function TotalItems(aDatesSearched as Array, cSeller as Character) as Numeric
	Local cQuery        as Character
	Local nPosPrepared  as Numeric
	Local cAliasSC6     := GetNextAlias()
	Local nTotal        := 0
	Local cBranchSC5 	:= FWxFilial("SC5")
	Local cInitialDate 	:= DTOS(aDatesSearched[1, 1])
	Local cFinalDate 	:= DTOS(aDatesSearched[1, 2])
	
	cQuery := " SELECT COUNT(C6_FILIAL) TOTAL "
	cQuery += " FROM " + RetSqlName("SC6") + " SC6 "
	cQuery += " INNER JOIN " + RetSqlName("SC5") + " SC5 ON SC5.C5_FILIAL = SC6.C6_FILIAL AND SC5.C5_NUM = SC6.C6_NUM "
	cQuery += " WHERE SC5.C5_FILIAL = ? "

	If !Empty(cSeller)
		cQuery += " AND SC5.C5_VEND1 = '" + cSeller + "' "
	Endif

	cQuery += " AND SC5.C5_EMISSAO >= ? "
	cQuery += " AND SC5.C5_EMISSAO <= ? "
	cQuery += " AND (SC6.C6_BLQ = ' ' OR SC6.C6_BLQ = 'S' OR SC6.C6_BLQ = 'N') "
	cQuery += " AND SC5.D_E_L_E_T_ = ' ' "
	cQuery += " AND SC6.D_E_L_E_T_ = ' ' "

	nPosPrepared := chargeAPrepared(cQuery)

	__aPrepared[nPosPrepared][1]:SetString(1, cBranchSC5)
	__aPrepared[nPosPrepared][1]:SetString(2, cInitialDate)
	__aPrepared[nPosPrepared][1]:SetString(3, cFinalDate)

	execQueryAPrepared(cAliasSC6, nPosPrepared)

	While (cAliasSC6)->(!Eof())
		nTotal +=  (cAliasSC6)->TOTAL
		(cAliasSC6) ->(DbSkip())
	EndDo

	(cAliasSC6)->(DBCloseArea())
Return nTotal

//------------------------------------------------------------------------------
/*/{Protheus.doc} TotalItemsWithoutSC9
	Retorna a quantidade total de itens do Pedido de venda sem liberação
	@type 		function
	@param		aDatesSearched	, Array, Array de datas
	@param		cSeller			, Character, Código do Vendedor
	@return		Numerico, Quantidade Total de Itens sem liberação
	@author		Squad CRM & Faturamento
	@since		06/01/2020
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Static Function TotalItemsWithoutSC9(aDatesSearched as Array, cSeller as Character) as Numeric
	Local cQuery        as Character
	Local nPosPrepared  as Numeric
	Local cAliasSC6     := GetNextAlias()
	Local nTotal        := 0
	Local cBranchSC5	:= FWxFilial("SC5")
	Local cInitialDate  := DTOS(aDatesSearched[1, 1])
	Local cFinalDate  	:= DTOS(aDatesSearched[1, 2])

	cQuery := " SELECT Count(C6_FILIAL) TOTAL "
	cQuery += " FROM " + RetSqlName("SC6")+ " SC6 "
	cQuery += " INNER JOIN " + RetSqlName("SC5") + " SC5 ON SC5.C5_FILIAL = SC6.C6_FILIAL AND SC5.C5_NUM = SC6.C6_NUM "
	cQuery += " LEFT JOIN " + RetSqlName("SC9") + " SC9 ON SC9.C9_FILIAL = SC6.C6_FILIAL AND SC9.C9_PEDIDO = SC6.C6_NUM AND SC9.C9_ITEM = SC6.C6_ITEM"
	cQuery += " WHERE SC5.C5_FILIAL = ? "

	If !Empty(cSeller)
		cQuery += " AND SC5.C5_VEND1 = '" + cSeller + "' "
	Endif

	cQuery += " AND SC5.C5_EMISSAO >= ? "
	cQuery += " AND SC5.C5_EMISSAO <= ? "
	cQuery += " AND (SC6.C6_BLQ = ' ' OR  SC6.C6_BLQ = 'N' OR  SC6.C6_BLQ = 'S') "
	cQuery += " AND C9_PEDIDO is Null "
	cQuery += " AND SC5.D_E_L_E_T_ = ' ' "
	cQuery += " AND SC6.D_E_L_E_T_ = ' ' "

	nPosPrepared := chargeAPrepared(cQuery)

	__aPrepared[nPosPrepared][1]:SetString(1, cBranchSC5)
	__aPrepared[nPosPrepared][1]:SetString(2, cInitialDate)
	__aPrepared[nPosPrepared][1]:SetString(3, cFinalDate)

	execQueryAPrepared(cAliasSC6, nPosPrepared)

	While (cAliasSC6)->(!Eof())
		nTotal +=  (cAliasSC6)->TOTAL
		(cAliasSC6) ->(DbSkip())
	EndDo

	(cAliasSC6)->(DBCloseArea())
Return nTotal

//------------------------------------------------------------------------------
/*/{Protheus.doc} TotalOrdersToBill
	Retorna a quantidade total de itens faturados
	@type 		function
	@param		aDatesSearched	, Array, Array de datas
	@param		cSeller			, Character, Código do Vendedor
	@return		Numerico, Quantidade Total de Itens faturados
	@author		Squad CRM & Faturamento
	@since		06/01/2020
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Static Function TotalOrdersToBill(aDatesSearched as Array, cSeller as Character) as Numeric
	Local cQuery        as Character
	Local nPosPrepared  as Numeric
	Local cAliasSC6     := GetNextAlias()
	Local nTotal        := 0
	Local cBranchSC5	:= FWxFilial("SC5")
	Local cInitialDate  := DTOS(aDatesSearched[1, 1])
	Local cFinalDate  	:= DTOS(aDatesSearched[1, 2])

	cQuery := " SELECT COUNT(C6_FILIAL) TOTAL "
	cQuery += " FROM " + RetSqlName("SC6") + " SC6 "
	cQuery += " INNER JOIN " + RetSqlName("SC5") + " SC5 ON SC5.C5_FILIAL = SC6.C6_FILIAL AND SC5.C5_NUM = SC6.C6_NUM  "
	cQuery += " INNER JOIN ( "
	cQuery += " SELECT C9_FILIAL, C9_PEDIDO, C9_ITEM, COUNT(1) TOTALSC9 "
	cQuery += " FROM " + RetSqlName("SC9")
	cQuery += " WHERE D_E_L_E_T_ = ' ' "
	cQuery += " AND C9_BLCRED = ' '  "
	cQuery += " AND C9_BLEST = ' '  "
	cQuery += " AND C9_BLWMS = ' '  "
	cQuery += " AND C9_NFISCAL = ' '  "
	cQuery += " GROUP BY C9_FILIAL, C9_PEDIDO, C9_ITEM "
	cQuery += " ) "
	cQuery += " SC9 ON SC9.C9_FILIAL = SC6.C6_FILIAL AND SC9.C9_PEDIDO = SC6.C6_NUM AND SC9.C9_ITEM = SC6.C6_ITEM  "
	cQuery += " WHERE SC5.C5_FILIAL = ? "

	If !Empty(cSeller)
		cQuery += " AND SC5.C5_VEND1 = '" + cSeller + "' "
	Endif

	cQuery += " AND SC5.C5_EMISSAO >= ? "
	cQuery += " AND SC5.C5_EMISSAO <= ? "
	cQuery += " AND SC5.D_E_L_E_T_ = ' '  "
	cQuery += " AND SC6.D_E_L_E_T_ = ' '  "

	nPosPrepared := chargeAPrepared(cQuery)

	__aPrepared[nPosPrepared][1]:SetString(1, cBranchSC5)
	__aPrepared[nPosPrepared][1]:SetString(2, cInitialDate)
	__aPrepared[nPosPrepared][1]:SetString(3, cFinalDate)

	execQueryAPrepared(cAliasSC6, nPosPrepared)

	While (cAliasSC6)->(!EOF())
		nTotal +=  (cAliasSC6)->TOTAL
		(cAliasSC6) ->(dbSkip())
	EndDo

	(cAliasSC6)->(DBCloseArea())
Return nTotal

//------------------------------------------------------------------------------
/*/{Protheus.doc} TotalPendingOrders
	Retorna a quantidade total de itens pendentes
	@type 		function
	@param		aDatesSearched	, Array, Array de datas
	@param		cSeller			, Character, Código do Vendedor
	@return		Numerico, Quantidade Total de Itens do Pedido de vendas
	@author		Squad CRM & Faturamento
	@since		06/01/2020
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Static Function TotalPendingOrders(aDatesSearched as Array, cSeller as Character) as Numeric
	Local cQuery        as Character
	Local nPosPrepared  as Numeric
	Local cAliasSC6     := GetNextAlias()
	Local nTotal        := 0
	Local cBranchSC5	:= FWxFilial("SC5")
	Local cInitialDate  := DTOS(aDatesSearched[1, 1])
	Local cFinalDate  	:= DTOS(aDatesSearched[1, 2])

	cQuery		:= " SELECT Count(C6_FILIAL) TOTAL "
	cQuery		+= " FROM " + RetSqlName("SC6") + " SC6 "
	cQuery		+= " INNER JOIN " + RetSqlName("SC5") + " SC5 ON SC5.C5_FILIAL = SC6.C6_FILIAL AND SC5.C5_NUM = SC6.C6_NUM  "
	cQuery		+= " INNER JOIN ( "
	cQuery		+= " SELECT C9_FILIAL, C9_PEDIDO, C9_ITEM, COUNT(1) TOTALSC9 "
	cQuery		+= " FROM  " + RetSqlName("SC9")
	cQuery		+= " WHERE D_E_L_E_T_ = ' ' "
	cQuery		+= " AND ((C9_BLCRED = '01' OR C9_BLCRED = '04' OR C9_BLCRED = '05' OR C9_BLCRED = '09' OR C9_BLCRED = '10' OR C9_BLCRED = 'ZZ') "
  	cQuery    	+= " OR (C9_BLEST = '02' OR C9_BLEST = '03' OR C9_BLEST = '10' OR C9_BLEST = 'ZZ')  "
	cQuery		+= " OR (C9_BLWMS = '01' OR C9_BLWMS = '02' OR C9_BLWMS = '03' OR C9_BLWMS = '05' OR C9_BLWMS = '06' OR C9_BLWMS = '07'))"
	cQuery		+= " AND C9_NFISCAL = '"+ Space(GetFieldLength("C9_NFISCAL")) +"'  "
	cQuery		+= " GROUP BY C9_FILIAL, C9_PEDIDO, C9_ITEM "
	cQuery		+= " ) "
	cQuery		+= " SC9 ON SC9.C9_FILIAL = SC6.C6_FILIAL AND SC9.C9_PEDIDO = SC6.C6_NUM AND SC9.C9_ITEM = SC6.C6_ITEM "
	cQuery		+= " WHERE SC5.C5_FILIAL = ? "

	If !Empty(cSeller)
		cQuery += " AND SC5.C5_VEND1 = '" + cSeller + "' "
	Endif

	cQuery		+= " AND SC5.C5_EMISSAO >= ? "
	cQuery		+= " AND SC5.C5_EMISSAO <= ? "
	cQuery		+= " AND SC5.D_E_L_E_T_ = ' ' "
	cQuery		+= " AND SC6.D_E_L_E_T_ = ' ' "

	nPosPrepared := chargeAPrepared(cQuery)

	__aPrepared[nPosPrepared][1]:SetString(1, cBranchSC5)
	__aPrepared[nPosPrepared][1]:SetString(2, cInitialDate)
	__aPrepared[nPosPrepared][1]:SetString(3, cFinalDate)

	execQueryAPrepared(cAliasSC6, nPosPrepared)

	While (cAliasSC6)->(!EOF())
		nTotal +=  (cAliasSC6)->TOTAL
		(cAliasSC6) ->(dbSkip())
	EndDo

	(cAliasSC6)->(DBCloseArea())
Return nTotal

//------------------------------------------------------------------------------
/*/{Protheus.doc} TotalItemsCompleted
	Retorna a quantidade total de itens finalizados
	@type 		function
	@param		aDatesSearched	, Array, Array de datas
	@param		cSeller			, Character, Código do Vendedor
	@return		Numerico, Quantidade Total de Itens do Pedido de vendas
	@author		Squad CRM & Faturamento
	@since		06/01/2020
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Static Function TotalItemsCompleted(aDatesSearched as Array, cSeller as Character) as Numeric
	Local cQuery        as Character
	Local nPosPrepared  as Numeric
	Local cAliasSC6     := GetNextAlias()
	Local nTotal        := 0
	Local cBranchSC5	:= FWxFilial("SC5")
	Local cInitialDate  := DTOS(aDatesSearched[1, 1])
	Local cFinalDate  	:= DTOS(aDatesSearched[1, 2])

	cQuery := " SELECT Count(C6_FILIAL) TOTAL "
	cQuery += " FROM " + RetSqlName("SC6") + " SC6 "
	cQuery += " INNER JOIN "+ RetSqlName("SC5") + " SC5 ON SC5.C5_FILIAL = SC6.C6_FILIAL AND SC5.C5_NUM = SC6.C6_NUM "
	cQuery += " INNER JOIN "+ RetSqlName("SC9") + " SC9 ON SC9.C9_FILIAL = SC6.C6_FILIAL AND SC9.C9_PEDIDO = SC6.C6_NUM AND SC9.C9_ITEM = SC6.C6_ITEM "
	cQuery += " WHERE SC5.C5_FILIAL = ? "

	If !Empty(cSeller)
		cQuery += " AND SC5.C5_VEND1 = '" + cSeller + "' "
	Endif

	cQuery += " AND SC5.C5_EMISSAO >= ? "
	cQuery += " AND SC5.C5_EMISSAO <= ? "
	cQuery += " AND C9_NFISCAL <> '"+ Space(GetFieldLength("C9_NFISCAL")) +"' "
	cQuery += " AND SC5.D_E_L_E_T_ = ' ' "
	cQuery += " AND SC6.D_E_L_E_T_ = ' ' "
	cQuery += " AND SC9.D_E_L_E_T_ = ' ' "

	nPosPrepared := chargeAPrepared(cQuery)

	__aPrepared[nPosPrepared][1]:SetString(1, cBranchSC5)
	__aPrepared[nPosPrepared][1]:SetString(2, cInitialDate)
	__aPrepared[nPosPrepared][1]:SetString(3, cFinalDate)
	
	execQueryAPrepared(cAliasSC6, nPosPrepared)

	While (cAliasSC6)->(!EOF())
		nTotal +=  (cAliasSC6)->TOTAL
		(cAliasSC6) ->(dbSkip())
	EndDo

	(cAliasSC6)->(DBCloseArea())
Return nTotal

//------------------------------------------------------------------------------
/*/{Protheus.doc} BuildTotalItemsCard
	Obtem as informações para o card de Total de Itens.
	@type 		method
	@return		JsonObject, Estrutura Json com o Total de Itens.
	@author		Squad CRM & Faturamento
	@since		14/06/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method BuildTotalItemsCard() as Json Class CardsHomeProtheusData
	::jTotalItems := JsonObject():New()

	::jTotalItems["titulo"]     := STR0001 //Total de Itens
	::jTotalItems["total"]      := TotalItems(::aDatesSearched, ::cSeller)
	::jTotalItems["tipo"]       := 0

Return ::jTotalItems

//------------------------------------------------------------------------------
/*/{Protheus.doc} BuildItemsToBeBilledCard
	Obtem as informações para o card de Total de Itens a Faturar.
	@type method
	@return		JsonObject, Estrutura Json com o Total de Itens a Faturar.
	@author		Squad CRM & Faturamento
	@since		14/06/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method BuildItemsToBeBilledCard() as Json Class CardsHomeProtheusData
	::jItemsToBeBilled := JsonObject():New()

	::jItemsToBeBilled["titulo"]    := STR0002 //Itens a Faturar
	::jItemsToBeBilled["total"]     := TotalOrdersToBill(::aDatesSearched, ::cSeller)
	::jItemsToBeBilled["tipo"]      := 0

Return ::jItemsToBeBilled

//------------------------------------------------------------------------------
/*/{Protheus.doc} BuildPendingItemsCard
	Obtem as informações para o card de Itens Pendentes.
	@type method
	@return		JsonObject, Estrutura Json com o Itens Pendentes.
	@author		Squad CRM & Faturamento
	@since		14/06/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method BuildPendingItemsCard() as Json Class CardsHomeProtheusData
	::jPendingItems := JsonObject():New()

	::jPendingItems["titulo"]   := STR0003 //Itens Pendentes
	::jPendingItems["total"]    := TotalPendingOrders(::aDatesSearched, ::cSeller) + TotalItemsWithoutSC9(::aDatesSearched, ::cSeller)
	::jPendingItems["tipo"]     := 1

Return ::jPendingItems

//------------------------------------------------------------------------------
/*/{Protheus.doc} BuildTotalCompletedCard
	Obtem as informações para o card de Total de Itens Finalizados.
	@type method
	@return		JsonObject, Estrutura Json com o Total de Itens Finalizados.
	@author		Squad CRM & Faturamento
	@since		14/06/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method BuildTotalCompletedCard() as Json Class CardsHomeProtheusData
	::jTotalCompleted := JsonObject():New()

	::jTotalCompleted["titulo"] := STR0004 //Itens Finalizados
	::jTotalCompleted["total"]  := TotalItemsCompleted(::aDatesSearched, ::cSeller)
	::jTotalCompleted["tipo"]   := 2

Return ::jTotalCompleted

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} cardsHomeFWExecStat
	Função utilizada para validar a data da LIB para utilização da classe FWExecStatement
	@type       Function
	@return     __cardsHomeVerLib, lógico, se pode ser utilizado a classe FWExecStatement
	@author     Squad CRM/Faturamento
	@since      11/04/2022
	@version    12.1.33
	
/*/
//-------------------------------------------------------------------------------------
Static Function cardsHomeFWExecStat()
	Static __cardsHomeVerLib := Nil

	If __cardsHomeVerLib == Nil
		__cardsHomeVerLib := FWLibVersion() >= "20211116"
	EndIf
Return __cardsHomeVerLib

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} chargeAPrepared
	Carrega o array __aPrepared com o objeto
	@type function
	@param      cQuery      , character, query a ser consultada/incluida no array __aPrepared
	@return		nPosPrepared, numeric  , posição do array com o objeto da query a ser utilizado.
	@author		Squad CRM & Faturamento
	@since		14/06/2021
	@version	12.1.33
/*/
//---------------------------------------------------------------------------------------------
Static Function chargeAPrepared(cQuery)
	Local oStatement 	 as Object 
	Local cMD5           as Character
	Local nPosPrepared   as Numeric

	cMD5 := MD5(cQuery)
	If (nPosPrepared := Ascan(__aPrepared,{|x| x[2] == cMD5})) == 0
		cQuery	:= ChangeQuery(cQuery)
		oStatement := IIf(cardsHomeFWExecStat(), FwExecStatement():New(cQuery), FWPreparedStatement():New(cQuery))
		Aadd(__aPrepared,{oStatement, cMD5})
		nPosPrepared := Len(__aPrepared)
	EndIf
Return nPosPrepared

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} execQueryAPrepared
	Executa a query contida na posicao indicada por parametro do array __aPrepared
	@type function
	@return     Nil
	@param		cAlias      , character, alias a ser utilizado para a workarea da query
	@param		nPosPrepared, numeric  , posição do array com o objeto da query a ser utilizado.
	@author		Squad CRM & Faturamento
	@since		14/06/2021
	@version	12.1.33
/*/
//---------------------------------------------------------------------------------------------
Static Function execQueryAPrepared(cAlias as Character, nPosPrepared as Numeric)
	If cardsHomeFWExecStat()
		__aPrepared[nPosPrepared][1]:OpenAlias(cAlias) 
	Else
		DbUseArea(.T.,"TOPCONN",TcGenQry(,,__aPrepared[nPosPrepared][1]:GetFixQuery()),cAlias,.T.,.T.)
	EndIf
Return Nil
