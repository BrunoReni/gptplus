#include 'tlpp-core.th'
#include 'tlpp-rest.th'

namespace tgv.schemafields
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} SchemaFieldsProtheusData
	Classe responsavel por efetuar a consulta dos Campos dos Schemas utilizados
	no TOTVS Gestão de Vendas.

	@sample		SchemaFieldsProtheusData:New()
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
CLASS SchemaFieldsProtheusData FROM FWAdapterBaseV2
	Public Data aCustomFields		as Array
	Public Data cCustomFields		as Character
	Public Data cSource				as Character
	Public Data isAdmin				as Logical
	Public Data lcanObfuscateField	as Logical
	Public Data oHashFieldsPD		as Object
	Public Data nFields				as Numeric

	Public Method New() as Object
	Public Method Get()
	Public Method RowToJson()
	Public Method AddCustomFields()
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} New
	Cria um nova instancia da classa SchemaFieldsProtheusData.

	@sample		SchemaFieldsProtheusData:New()
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method New() as Object CLASS SchemaFieldsProtheusData
	_Super:New( "GET", .T. )
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} Get
	Retorna todos os campos vinculados a um Schema Valido.

	@sample		SchemaFieldsProtheusData:Get( 1, 10, '2020-09-30' )
	@param		nPage		, Numeric	, Número da página que será retornada
	@param		nPageSize	, Numeric	, Quantidade de registros por pagina
	@param		cData		, Character , Data de sincronismo
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method Get(nPage as Numeric, nPageSize as Numeric, cData as Character) CLASS SchemaFieldsProtheusData
	Local aArea		as Array
	Local cWhere	as Character

	Default nPage		:= 1
	Default nPageSize	:= 10
	Default cData		:= ""

	aArea := GetArea()
	AddMapFields( self )

	::AddCustomFields()
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( GetQuery() )

	cWhere := " A1W.A1W_FILIAL = '" + FwXFilial("A1W") + "'"

	If !Empty(cData) .And. SubStr(cData,1,1) != '-'
		cWhere += " AND A1W.S_T_A_M_P_ > " + ConvertTimeStamp( cData, "value", "timestamp" )
	Else
		cWhere += " AND A1W.D_E_L_E_T_ = ' ' AND A1V.D_E_L_E_T_ = ' ' "
	EndIf

	::SetWhere( cWhere )
	::SetOrder( SqlOrder( A1W->( IndexKey(1) ) ) )

	If ::Execute()
		::FillGetResponse()
	EndIf

	RestArea( aArea )
	aSize( aArea, 0 )
	aSize(::aCustomFields, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} RowToJson
	Converte o retorno consulta SQL em JSON
	(Utilizado para converter o campo Delete Logico)

	@sample		SchemaFieldsProtheusData:RowToJson( cAlias, aFields, .F.)
	@param		cAlias	, Character	, Alias da Consulta
	@param		aFields	, Array		, Campos (MapFields)
	@param		lEmpty	, Logical	, Vazio.
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27 ou Superior
/*/
//------------------------------------------------------------------------------
METHOD RowToJson( cAlias as Character, aFields as Array, lEmpty as Logical) CLASS SchemaFieldsProtheusData
	Default lEmpty := .F.
	ConvertResponseValues(aFields, cAlias, lEmpty, @Self)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
	Cria o Mapa de campos Protheus x API

	@sample		AddMapFields( self )
	@param		oSelf	, Object	, Objeto com herança da classe FWAdapterBaseV2
	@author		Danilo Salve
	@since		31/03/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function AddMapFields( oSelf as Object )
	Local aInternalId  := GetInternalId({ 'A1W_FILIAL', 'A1W_SCHEMA', 'A1W_ITEM' })

	oSelf:AddMapFields( "internalid", "internalid"	, .T., .F., { "internalid"	, 'C', aInternalId[1]               , 0 }, "' '")
	oSelf:AddMapFields( "branch"	, "A1W_FILIAL"	, .T., .F., { "A1W_FILIAL"	, 'C', GetFieldLength("A1W_FILIAL")	, 0 } )
	oSelf:AddMapFields( "codeschema", "A1W_SCHEMA"	, .T., .F., { "A1W_SCHEMA"	, 'C', GetFieldLength("A1W_SCHEMA")	, 0 } )
	oSelf:AddMapFields( "itemid"	, "A1W_ITEM"	, .T., .F., { "A1W_ITEM"	, 'C', GetFieldLength("A1W_ITEM")	, 0 } )
	oSelf:AddMapFields( "nameschema", "A1V_NOME"	, .T., .F., { "A1V_NOME"	, 'C', GetFieldLength("A1V_NOME")	, 0 } )
	oSelf:AddMapFields( "field"		, "A1W_PROPRI"	, .T., .F., { "A1W_PROPRI"	, 'C', GetFieldLength("A1W_PROPRI")	, 0 } )
	oSelf:AddMapFields( "label"		, "A1W_LABEL"	, .T., .F., { "A1W_LABEL"	, 'C', GetFieldLength("A1W_LABEL")	, 0 } )
	oSelf:AddMapFields( "type"		, "A1W_TIPO"	, .T., .F., { "A1W_TIPO"	, 'C', GetFieldLength("A1W_TIPO")   , 0 } )
	oSelf:AddMapFields( "customized", "A1W_CUSTOM"	, .T., .F., { "A1W_CUSTOM"	, 'L', GetFieldLength("A1W_CUSTOM") , 0 } )
	oSelf:AddMapFields( "required"	, "A1W_OBRIGA"	, .T., .F., { "A1W_OBRIGA"	, 'L', GetFieldLength("A1W_OBRIGA") , 0 } )
	oSelf:AddMapFields( "visible"	, "A1W_VISIVE"	, .T., .F., { "A1W_VISIVE"	, 'L', GetFieldLength("A1W_VISIVE") , 0 } )
	oSelf:AddMapFields( "maxlength"	, "A1W_TAMMAX"	, .T., .F., { "A1W_TAMMAX"	, 'N', GetFieldLength("A1W_TAMMAX") , 0 } )
	oSelf:AddMapFields( "grid"		, "A1W_GRID"	, .T., .F., { "A1W_GRID"	, 'N', GetFieldLength("A1W_GRID")   , 0 } )
	oSelf:AddMapFields( "divider"	, "A1W_AGRUP"	, .T., .F., { "A1W_AGRUP"	, 'C', GetFieldLength("A1W_AGRUP")  , 0 } )
	oSelf:AddMapFields( "deleted"	, "deleted"		, .T., .F., { "deleted"		, 'C', 1, 0 }, "A1W.D_E_L_E_T_" )

	aSize(aInternalId, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
    Monta a Expressão SQL para consulta dos Campos

    @sample		GetQuery()
	@return		Character, Expressão SQL
    @author		Danilo Salve
    @since		31/03/2021
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Static Function GetQuery()
	Local cQuery AS CHARACTER

	cQuery := " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName("A1W") + " A1W "
	cQuery += " INNER JOIN  " + RetSqlName("A1V") + " A1V ON "
	cQuery += " A1W.A1W_FILIAL = A1V.A1V_FILIAL AND A1W.A1W_SCHEMA = A1V.A1V_CODIGO "
	cQuery += " WHERE #QueryWhere#"

Return cQuery

//------------------------------------------------------------------------------
/*/{Protheus.doc} AddCustomFields
	Metodo Auxiliar, deve carregar os Atributos utilizados na conversão dos valores.

	@author	Squad CRM & Faturamento
	@since	04/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
METHOD AddCustomFields() CLASS SchemaFieldsProtheusData
	Self:isAdmin := FwIsAdmin()
	Self:aCustomFields := {}
	Self:nFields := Len(Self:oJsonObj:aMapFields)

	aAdd(Self:aCustomFields, {"internalid"	, {|| GetInternalIdQry((cAlias)->A1W_FILIAL + (cAlias)->A1W_SCHEMA + (cAlias)->A1W_ITEM)}})

	Self:cCustomFields := "internalid"
Return Nil
