#include "tlpp-core.th"
#include "protheus.ch"
#include "tgv.versions.ch"

#define ALLVERSION_VERSION 1
#define ALLVERSION_SCHEMA  2
#define ALLVERSION_RELEASE 3

#define SCHEMA2UPD_SCHEMA  1
#define SCHEMA2UPD_VERSION 2

Static __queryStamp := nil as object

namespace tgv.versions

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions
    API para consulta do portal Gestão de vendas
    @type       class
    @version    12.1.33
    @author     Danilo Salve / Squad CRM & Faturamento
    @since      09/12/2021
/*/
//------------------------------------------------------------------------------
class tgvVersions
    public method new () as object
    @Get("/api/tgv/versions/")
	public method getVersionFE() as logical

    private method updateBEAutomaticaly() as logical
    private method updateSchemas() as logical
    private method verifyUpdateByVersion() as array
    private method verifyStampInTables() as logical
    private method createStampColumn() as logical
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::new() as object
    obtem uma nova instancia da classe tgvVersions
    @type       method
    @version    12.1.33
    @author     Danilo Salve / Squad CRM & Faturamento
    @since      09/12/2021
    @return object, nova instancia da classe tgvVersions
/*/
//------------------------------------------------------------------------------
method new() as object class tgvVersions
return self

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::getVersionFE() as logical
    Obtem a versão do portal Gestão de vendas
    @type       method
    @version    12.1.33
    @author     Danilo Salve / Squad CRM & Faturamento
    @since      09/12/2021
    @return     logical, retorna sempre verdadeiro
/*/
//------------------------------------------------------------------------------
method getVersionFE() as logical class tgvVersions
    local jResponse := JsonObject():New()
    jResponse['version'] := '1.4.8'

    FWLsPutAsyncInfo("LS006",RetCodUsr(),'05',"PGV")

    if !(::updateBEAutomaticaly(jResponse['version']))
        SetRestFault(503, FWHttpEncode(STR0001))   // #"Problema ao tentar realizar a atualização automática dos schemas. Por favor, caso o seu ambiente não esteja atualizado com a última expedição continua, realize esta atualização."
        return .t.
    endIf

    if !(::createStampColumn())
        SetRestFault(503, FWHttpEncode(STR0002))   // #"Algumas de suas tabelas podem não estar preparadas corretamente para o uso no Portal Gestão de Vendas. Por favor, caso o seu ambiente não esteja atualizado com a última expedição continua, realize esta atualização."
        return .t.
    endif
    
    oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
    oRest:setStatusCode(200)
    oRest:setResponse(jResponse)

    FreeObj(jResponse)
return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::updateBEAutomaticaly() as logical
    Realizar a atualização do Back-end caso seja necessario
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      29/03/2022
    @param      updatedPGVVersion, character, versao atual do PGV 
    @return     processed        , logical  , resultado do processamento com sucesso ou nao
/*/
//------------------------------------------------------------------------------
method updateBEAutomaticaly(updatedPGVVersion as character) as logical class tgvVersions

    local processed as logical
    local environmentPGVVersion as character
    local schemasToBeUpdated as array

    environmentPGVVersion := GetMV("MV_PGVVERS", .T., "")
    processed := .F.
    schemasToBeUpdated := {}

    if !(environmentPGVVersion == updatedPGVVersion)
        schemasToBeUpdated := ::verifyUpdateByVersion(updatedPGVVersion, environmentPGVVersion)
        Begin Transaction
            processed := ::updateSchemas(schemasToBeUpdated)
            if processed
                putMV("MV_PGVVERS", updatedPGVVersion)
            else
                DisarmTransaction()
            endIf
        End Transaction
    else
        processed := .T.
    endIf

    FWFreeObj(schemasToBeUpdated)
    ASize(schemasToBeUpdated, 0)

return processed

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::updateSchemas() as logical
    Realizar a atualização dos schemas informados no parametro
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      29/03/2022
    @param      schemasToBeUpdated, character, schemas a serem atualizados
    @return     processed         , logical  , resultado do processamento com sucesso ou nao
/*/
//------------------------------------------------------------------------------
method updateSchemas(schemasToBeUpdated as array) as logical class tgvVersions

    local processed as logical
    local schema as numeric
    local qtSchemas as numeric

    qtSchemas := Len(schemasToBeUpdated)
    processed := .T.

    for schema := 1 to qtSchemas
        deleteSchema_A1V_A1W(schemasToBeUpdated[schema][SCHEMA2UPD_SCHEMA])
        if !(updateSchema_A1V_A1W(schemasToBeUpdated[schema][SCHEMA2UPD_SCHEMA]))
            processed := .F.
            exit
        endIf
    next

return processed

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::verifyUpdateByVersion() as array
    Realizar a verificacao dos schemas que precisam ser atualizados durante a atualizacao de versao
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      29/03/2022
    @param      updatedPGVVersion    , character, versao atual do PGV 
    @param      environmentPGVVersion, character, versao que estava instalada no ambiente 
    @return     schemasToBeUpdated, array  , lista com os schemas a serem atualizados para estarem na versao atual
/*/
//------------------------------------------------------------------------------
method verifyUpdateByVersion(  updatedPGVVersion as character, environmentPGVVersion as character) ;
                                as array class tgvVersions

    local schemasToBeUpdated as array
    local auxHashMap as object
    local schemasVersion as array
    local allVersionsVsSchemas as array
    local version as numeric
    local qtVersions as numeric
    local schema as numeric
    local qtSchemas as numeric

    allVersionsVsSchemas := versionsVsSchemas()
    qtVersions := Len(allVersionsVsSchemas)
    auxHashMap := tHashMap():New()

    for version := 1 to qtVersions
        if allVersionsVsSchemas[version][ALLVERSION_VERSION] <= environmentPGVVersion
            loop
        endif

        schemasVersion := allVersionsVsSchemas[version][ALLVERSION_SCHEMA]
        qtSchemas := Len(schemasVersion)
        for schema := 1 to qtSchemas
            auxHashMap:Set(schemasVersion[schema], updatedPGVVersion)
        next

        FWFreeObj(schemasVersion)
        ASize(schemasVersion, 0)

    next

    auxHashMap:List(schemasToBeUpdated)
    
    auxHashMap:Clean()
    FWFreeObj(auxHashMap)
    FWFreeObj(allVersionsVsSchemas)
    ASize(allVersionsVsSchemas, 0)
    auxHashMap := Nil

return schemasToBeUpdated

//------------------------------------------------------------------------------
/*/{Protheus.doc} versionsVsSchemas() as object
    Funcao que informa por meio de um array os schemas que foram atualizados em cada versao
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      29/03/2022
    @return     allVersionsVsSchemas, array  , lista com todos schemas que devem ser atualizados em cada versao liberada
/*/
//------------------------------------------------------------------------------
static function versionsVsSchemas() as array
    local allVersionsVsSchemas as array
    allVersionsVsSchemas := {}
    
    AAdd(allVersionsVsSchemas, {"0.0.4", {}, "12.1.33" })
    AAdd(allVersionsVsSchemas, {"1.0.0", {  "PaymentConditions", ;
                                            "Carriers", ;
                                            "Products", ;
                                            "Prospects", ;
                                            "SalesBudgets", ;
                                            "SalesBudgetsItems", ;
                                            "Intermediaries"}, "12.1.33" })
     AAdd(allVersionsVsSchemas, {"1.1.0", {"SalesOrders"}, "12.1.33" })
     AAdd(allVersionsVsSchemas, {"1.2.0", {"SalesOrders"}, "12.1.33" })
	 AAdd(allVersionsVsSchemas, {"1.3.0", {"SalesOrdersItems"}, "12.1.33" })
     AAdd(allVersionsVsSchemas, {"1.4.1", {"IntegrationQueue"}, "12.1.2210" })
     AAdd(allVersionsVsSchemas, {"1.4.3", { "Prospects", ;
                                            "SalesBudgets"}, "12.1.2210" })
return allVersionsVsSchemas

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::createStampColumn() as logical
    Realizar a criação de campos S_T_A_M_P_ das tabelas no Back-end caso seja 
    necessario
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      10/08/2022
    @return     processed        , logical  ,   resultado do processamento com 
                                                sucesso ou nao
/*/
//------------------------------------------------------------------------------
method createStampColumn() as logical class tgvVersions

    local processed           as logical
    local tablesToBeprocessed as array

    tablesToBeprocessed := ListTablesPGV(.T. /*isBlind*/)
    processed := ::verifyStampInTables(@tablesToBeprocessed)

    FWFreeObj(tablesToBeprocessed)
    ASize(tablesToBeprocessed, 0)

return processed

//------------------------------------------------------------------------------
/*/{Protheus.doc} tgvVersions::verifyStampInTables() as logical
    Verificar no array de tabelas, qual delas está precisando da criação do
    campo S_T_A_M_P_
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      10/08/2022
    @param      tablesToBeprocessed ,Array  ,   Array com as tabelas a serem
                                                verificadas
    @return     processed        , logical  ,   resultado do processamento com 
                                                sucesso ou nao
/*/
//------------------------------------------------------------------------------
method verifyStampInTables(tablesToBeprocessed as array) as logical class tgvVersions

    local processed                 as logical
    local numTable                  as numeric
    local qtTablesToBeVerified      as numeric
    local queryStamp                as object
    local dataBaseName              as character

    dataBaseName := TcGetDb()
    qtTablesToBeVerified := Len(tablesToBeprocessed)
    processed := .T.

    if (qtTablesToBeVerified > 0)
        queryStamp := buildQueryStamp(dataBaseName)
        processed := .T.
        
        for numTable := 1 To qtTablesToBeVerified
            if processed ;
                .And. ;
               !hasStamp(TablesToBeProcessed[numTable][2], queryStamp, dataBaseName)
                processed := makeStampPGV(.T. /*isBlind*/, {TablesToBeProcessed[numTable]})
            endif
        next
    endIf

return processed

//------------------------------------------------------------------------------
/*/{Protheus.doc} buildQueryStamp() as object
    Criar e retornar o objeto do tipo FWExecStatement com a query para verificar
    se determinada tabela tem o campo S_T_A_M_P_ criado
    @type       static function
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      10/08/2022
    @param      dataBaseName      , character , banco de dado usado no Protheus  
    @return     queryStamp        , object    , objeto do tipo FWExecStatement
                                                com a query para verificar se
                                                o campo S_T_A_M_P_ existe nas
                                                tabelas do PGV
/*/
//------------------------------------------------------------------------------
static function buildQueryStamp(dataBaseName as character) as object
	local query      as character
    local metaTable  as character
    local queryStamp as object
    
    queryStamp := __queryStamp

    if empty(__queryStamp)
        metaTable := iif(dataBaseName == "ORACLE", "ALL_TAB_COLUMNS", "INFORMATION_SCHEMA.COLUMNS")
        query :=    "SELECT " + ;
                    "   COUNT(COLUMN_NAME) qtd " + CRLF + ;
                    "FROM " + CRLF + ;
                    "    " + metaTable + ;
                    "WHERE " + CRLF + ;
                    "   TABLE_NAME = ? " + CRLF + ;
                    "       AND " + CRLF + ;
                    "   COLUMN_NAME = " + IIF(dataBaseName == "POSTGRES", "'s_t_a_m_p_'","'S_T_A_M_P_'")
        query := ChangeQuery(query)
        queryStamp := FwExecStatement():New(query)
        __queryStamp := queryStamp
    endif
return queryStamp

//------------------------------------------------------------------------------
/*/{Protheus.doc} hasStamp(cTable as character, queryStamp as object) as logical
    Verificar se na tabela informada no parametro tem o campo S_T_A_M_P_
    @type       static function
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      10/08/2022
    @param      tableNamePGV , character , tabela do BD a ser verificada
    @param      queryStamp   , object    , objeto da classe FWExecStatement
    @param      dataBaseName , character , banco de dado usado no Protheus
    @return     hasStamp     , logical   , indica se a tabela tem ou nao o
                                           campo S_T_A_M_P_
/*/
//------------------------------------------------------------------------------
static function hasStamp(   tableNamePGV as character, ;
                            queryStamp   as object, ;
                            dataBaseName as character ) as logical
	local hasStamp  as logical
	local cAlias    as character

    hasStamp := .F.
	tableNamePGV := IIF(dataBaseName == "POSTGRES", lower(tableNamePGV), tableNamePGV)
	queryStamp:SetString(1, tableNamePGV)
	cAlias := queryStamp:OpenAlias()

	if !(cAlias)->(Eof())
		if (cAlias)->qtd > 0
			hasStamp := .T.
		endif
	endif

	(cAlias)->(DbCloseArea())
return hasStamp
