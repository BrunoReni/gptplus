#include 'protheus.ch'
#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'tgv.util.data.ch'

namespace tgv.util

#DEFINE KEY 3
#DEFINE DESCRIPTION 4

Static lIsAQ4AQ5InDB              as logical
Static lVerifiedAQ4AQ5InDB := .F. as logical
//------------------------------------------------------------------------------
/*/{Protheus.doc} SetStates
	Obtem uma lista de estados da tabela 12 do SX5 e define no oHashMap

	@type		function
	@sample		SetStates(@oHashStates)
	@param		oHashStates	, Object	, Lista (HashMap) de Estados
	@author		Squad CRM & Faturamento
	@since		22/07/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Function SetStates(oHashStates as Object)
	Local aStates	:= FWGetSX5("12")
	Local nState	as Integer

	oHashStates := tHashMap():New()

	For nState := 1 To Len(aStates)
		oHashStates:Set(RTrim(aStates[nState, KEY]), RTRIM(aStates[nState, DESCRIPTION]))
	Next

	aSize(aStates, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetState
	Obtem o nome do estado

	@type		function
	@sample		GetContry('SP', ::oHashMao)
	@param		cUf			, Character	, Codigo do Estado (UF)
	@param		oHashStates	, Object	, Lista (HashMap) de Estados
	@return		Character	, Nome do Estado
	@author		Squad CRM & Faturamento
	@since		07/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Function GetState(cUf as Character, oHashStates as Object) as Character
	Local cState as Character

	If !oHashStates:Get(cUf, @cState)
		cState := ""
	Endif

Return cState

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetCountry
	Obtem o nome do Pais

	@type		function
	@sample		GetContry('D MG 01', '105')
	@param		cBranchId	, Character	, Filial do País
	@param		cCountryId	, Character	, Código do País
	@return		Character	, Nome do Pais
	@author		Squad CRM & Faturamento
	@since		07/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Function GetCountry(cBranchId as Character, cCountryId as Character) as Character
	Local cCountryDescription := ""

	If !Empty(cCountryId) .And. cCountryId <> SYA->YA_CODGI
		If SYA->(MSSeek(cBranchId + cCountryId))
			cCountryDescription := SYA->YA_DESCR
		EndIf
	ElseIf cCountryId == SYA->YA_CODGI
		cCountryDescription := SYA->YA_DESCR
	Endif

Return cCountryDescription

//------------------------------------------------------------------------------
/*/{Protheus.doc} getQueryTGV
	Monta a Expressão SQL para consulta de Clientes

	@type		Function
	@sample		getQueryTGV()
	@param		cTable	    , Character	, Tabela
	@param		cInnerJoin	, Character	, INNER JOIN
	@type		function
	@return		Character, Expressão SQL
	@author		Danilo Salve
	@since		21/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Function getQueryTGV(cTable as Character, cInnerJoin as Character)
	Local cQuery AS CHARACTER

	cQuery := " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName(cTable) + " " + cTable
	
	If !Empty(cInnerJoin)
		cQuery +=" " + cInnerJoin + " "
	EndIf
	
	cQuery += " WHERE #QueryWhere#"
Return cQuery
//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} canUseSellerFilter() as logical
    Avalia se as tabelas AQ4 e AQ5 foram criadas no dicionado de dados e retorna erro caso
	não tenham sido criadas.
    @type		Function
	@sample		canUseSellerFilter()
	@param		oRest	, Object	, Objeto oRest
    @version 12.1.2210
    @author Danilo Salve / Squad CRM & Faturamento
    @since 30/09/2022
    @return logical, Retorna verdadeiro se as tabelas existirem no dicionario de dados
/*/
//---------------------------------------------------------------------------------------------
Function canUseSellerFilter(oRest as Object) as logical
	Local lCanUse	:= .F. as logical
	Local cError	as character

	If isSellerFilterInDB() 
		lCanUse := .T.
	Else
		oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
		oRest:setStatusCode( 503 )
		cError += '{"code": 503,'
		cError += '"type": "error",'
		cError += '"message": "' + FWHttpEncode( STR0004 ) + '",' // "Problema ao consultar Filtro do Vendedor"
		cError += '"detailedMessage": "' + FWHttpEncode( STR0005 ) + '"}'// "Uma ou mais tabelas utilizada pelo Filtro do Vendedor nao foram localizadas no dicionario de dados"
		oRest:setResponse( cError )
	Endif

Return lCanUse

//---------------------------------------------------------------------------------------------
/*/{Protheus.doc} isSellerFilterInDB() as logical
    Avalia se as tabelas AQ4 e AQ5 foram criadas no dicionado de dados.
    @type		Function
	@sample		isSellerFilterInDB()
    @version 12.1.2210
    @author Rafael Mota Previdi / Squad CRM & Faturamento
    @since 01/12/2022
    @return logical, Retorna verdadeiro se as tabelas existirem no dicionario de dados
/*/
//---------------------------------------------------------------------------------------------
Function isSellerFilterInDB() as logical
	If !lVerifiedAQ4AQ5InDB
		lIsAQ4AQ5InDB := .T.
		If !(AliasInDic("AQ4") .And. AliasInDic("AQ5"))
			lIsAQ4AQ5InDB := .F.
		EndIf
		lVerifiedAQ4AQ5InDB := .T.
	EndIf
Return lIsAQ4AQ5InDB

//----------------------------------------------------------------------------
/*/{Protheus.doc} GetFieldLength
	Retorna o Tamanho do Campo

	@type		Function
	@sample 	GetFieldLength("C5_NUM")
	@param		cField		, Character	, Campo do SX3 (X3_CAMPO)
	@return		Character	, Tamanho do campo no SX3 (X3_TAMANHO)
	@author		Danilo Salve
	@since		10/12/2020
	@version	12.1.27 ou Superior
/*/
//----------------------------------------------------------------------------
Function GetFieldLength(cField as Character) as Numeric
Return GetSx3Cache(cField, "X3_TAMANHO")

//----------------------------------------------------------------------------
/*/{Protheus.doc} GetFieldDecimal
	Retorna a Quantidade de Casas decimas de um campo

	@type		Function
	@sample		GetFieldDecimal("C5_NUM")
	@param		cField	, Character	, Campo do SX3 (X3_CAMPO)
	@return		Character,	Tamanho do campo no SX3 (X3_DECIMAL)
	@author		Danilo Salve
	@since		10/12/2020
	@version	12.1.27 ou Superior
/*/
//----------------------------------------------------------------------------
Function GetFieldDecimal(cField as Character) as Numeric
Return GetSx3Cache(cField, "X3_DECIMAL")

//----------------------------------------------------------------------------
/*/{Protheus.doc} GetFieldType
	Retorna o tipo do campo um campo

	@type		Function
	@sample		GetFieldType("C5_NUM")
	@param		cField		, Character	, Campo do SX3 (X3_CAMPO)
	@return		Character	, Tipo do campo informado no dicionario de dados
	@author		Danilo Salve
	@since		10/12/2020
	@version	12.1.27 ou Superior
/*/
//----------------------------------------------------------------------------
Function GetFieldType(cField as Character) as Character
Return GetSx3Cache(cField, "X3_TIPO")

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetFieldsMap
	Obtem todos os campos utilizados no Select

	@type		Function
	@sample		GetFieldsMap(aMapFields)
	@param		aMapFields	, Array, Lista de Campos adicionado no MapFields
	@return		Character	, Lista de Campos
	@author		Danilo Salve
	@since		25/02/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Function GetFieldsMap(aMapFields as Array) as Character
	Local cFields       := ""
	Local nLenMapFields := Len(aMapFields)
	Local nMapFields    as Numeric

	For nMapFields := 1 To nLenMapFields
		cFields += aMapFields[nMapFields, 2]
		If nMapFields <> nLenMapFields
			cFields += ", "
		Else
			cFields += " "
		Endif
	Next

Return cFields

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetInternalId
	Obtem um Array com os Campos utilizados no InternalId convertido para o BD
	Utilizado na aplicação e o tamanho total dos campos.

	@type		Function
	@sample		GetInternalId({"A1_FILIAL", "A1_COD"})
	@param		aFields	, Array	, Array de Campos
	@return		Array	, Campos convertidos e Soma do Tamanho dos campos.
	@author		Danilo Salve
	@since		29/09/2020
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Function GetInternalId(aFields as Array) as Array
	Local aInternalId	as Array
	Local nFields		as Numeric
	Local nLength		:= 0
	Local cFields		:= ""
	Local cConcate		:= IIF(AllTrim( Upper( TcGetDb() ) ) == "MSSQL","+","||")

	For nFields := 1 To Len(aFields)
		nLength += GetFieldLength(aFields[nFields])
		cFields += aFields[nFields] + IIF(Len(aFields) > nFields , cConcate,"")
	Next

	aInternalId := { nLength, cFields }

	aSize(aFields, 0)
Return aInternalId

//------------------------------------------------------------------------------
/*/{Protheus.doc} canConvertField
	Verifica se pode converter um campo.

	@type		Function
	@sample		GetInternalId({"A1_FILIAL", "A1_COD"})
	@param		cAlias	, Character	, Alias da Query
	@param		cField	, character	, Nome do campo
	@return		Logical	, Se verdadeiro code converter o campo
	@author		Danilo Salve
	@since		22/07/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Function canConvertField(cAlias as Character, cField as Character) as Logical
Return (cAlias)->(FieldPos(cField)) > 0 .And. !Empty((cAlias)->(&cField))

//----------------------------------------------------------------------------
/*/{Protheus.doc} ConvertValue
	Efetua a conversão de um valor para o valor fornecido no parametro type.
	@type function
	@version 12.1.27
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@param xValue, variant, Valor que deve ser convertido
	@param cType, character, tipo do campo que será convertido
	@return variant, retorna o valor convertido no formato correto.
	@sample ConvertValue("1", "C")
/*/
//----------------------------------------------------------------------------
Function ConvertValue(xValue as variant, cType as Character) as variant
	cType := IIF(Empty(cType), "C", cType)

	If ValType(xValue) <> cType
		Do Case
		Case cType == "C"
			xValue := xValue
		Case cType == "N"
			xValue := Val(xValue)
		Case cType == "D"
			xValue := ConvertDate(xValue)
		Endcase
	Endif
Return xValue

//----------------------------------------------------------------------------
/*/{Protheus.doc} ConvertDate
	Efetua a conversão da Data no formato yyyy-M-dd para o padrão Prothes.
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@param cDate, character, String no formato de data 'yyyy-M-dd
	@return date, retorna o string convertido no formato de data (DD/MM/AAAA).
	@sample ConvertDate("2020-3-1")
/*/
//----------------------------------------------------------------------------
Static Function ConvertDate(cDate as Character) as Date
	Local cYear		as Character
	Local cMonth	as Character
	Local cDay		as Character
	Local nPosMonth	as Numeric
	Local nPosDay	as Numeric

	nPosMonth := At( "-", cDate )
	nPosDay := At( "-", cDate, nPosMonth + 1 )
	cYear := Substr(cDate, 1, nPosMonth - 1)
	cMonth := StrZero( Val( Substr( cDate, nPosMonth + 1, ( nPosDay - 1 ) - nPosMonth )), 2)
	cDay := StrZero( Val( Substr( cDate, nPosDay + 1 )), 2)

Return SToD(cYear + cMonth + cDay )

//----------------------------------------------------------------------------
/*/{Protheus.doc} getSellerFromJson
	Obtem o código do Vendedor informado no JSON do Pedido ou Orçamento.
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 09/08/2021
	@param jBody, json, JSON utilizado na busca
	@param lDelete, logical, Exclusão
	@return character, Código do Vendedor
	@sample getSellerFromJson(jBody, .f.)
	@obs JSON informado deve estar de acordo com o padrão definido no TOTVS Gestão de Vendas
/*/
//----------------------------------------------------------------------------
Function getSellerFromJson(jBody as Json, lDelete as Logical) as Character
	Local cSeller	as Character
	Local jHeader	as Json

	If lDelete
		cSeller := jBody:GetJsonObject('sellerid')
	Else
		jHeader := jBody:GetJsonObject('header')
		cSeller := jHeader:GetJsonObject('sellerid')
	Endif

	FreeObj(jHeader)
Return cSeller

//----------------------------------------------------------------------------
/*/{Protheus.doc} hasStatusField
	Avalia se o campo de bloqueio existe em uma determinada tabela.
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 10/01/2022
	@param cAlias, character, Tabela
	@param cField, character, Campo que será verificado
	@return logical, se o campo existir retorna verdadeiro
/*/
//----------------------------------------------------------------------------
function hasStatusField(cAlias as character, cField as character) as logical
	local aArea		:= getArea() as Array
	local hasField	:= .F. as logical

	dbSelectArea( cAlias )
	if (cAlias)->(columnPos( cField )) > 0
    	hasField := .t.
	endIf

	(cAlias)->(dbCloseArea())

	restArea( aArea )
	aSize(aArea, 0)
return hasField

//----------------------------------------------------------------------------
/*/{Protheus.doc} convertStringToLine
	Transforma um string qualquer em um string com uma quebra de linha para 
	ser enviada em uma requisição http
	@type function
	@version 12.1.33
	@author Rafael Mota Previdi / Squad CRM & Faturamento
	@since 03/03/2022
	@param cString            , character, String a ser transformada
	@param lApplyFWHttpEncode , logical  , Indica se deve submeter a linha a funcao FWHttpEncode
	@return cLine , character, String tratada
/*/
//----------------------------------------------------------------------------
function convertStringToLine(cString as character, lApplyFWHttpEncode as logical) as character
	Local cLine as character
	cLine := cString + CRLF
	If lApplyFWHttpEncode
		cLine := FWHttpEncode(cLine)
	EndIf
return cLine

//----------------------------------------------------------------------------
/*/{Protheus.doc} getSellerFromFilter
	Obtem o código do Vendedor utilizado no filtro de dos registros
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 11/02/2022
	@param isAdmin, logical, Usuario é administrador?
	@param lShowError, logical, Exibir Erro quando vendedor não é localizado
	@return character, Código do Vendedor
/*/
//----------------------------------------------------------------------------
function getSellerFromFilter(isAdmin as logical, lShowError as logical) as character
	local cSeller := '' as character

	if !isAdmin
		cSeller := getSellerWithUserid()
		if Empty( cSeller ) .And. lShowError
			handleWithEmptySeller()
		endif
	endif
return cSeller

//----------------------------------------------------------------------------
/*/{Protheus.doc} handleWithEmptySeller
	Define uma mensagem de Erro caso vendedor esteja vazio
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 11/02/2022
/*/
//----------------------------------------------------------------------------
static function handleWithEmptySeller()
	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')
	oRest:setStatusCode(403)
	oRest:setResponse(getResponseFromSellerEmpty())
return nil

//----------------------------------------------------------------------------
/*/{Protheus.doc} getResponseFromSellerEmpty
	Obtem a mensagem de quando código de vendedor é vazio
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 11/02/2022
	@return character, string com o json utilizado no erro de vendedor
/*/
//----------------------------------------------------------------------------
static function getResponseFromSellerEmpty() as character
	local cResponse	as character

	cResponse := '{'
	cResponse += '"code": 403,'
	cResponse += '"type": "error",'
	cResponse += '"message": "' + FWHttpEncode( STR0001 ) + '",' // 'Usuário não relacionado a um Vendedor'
	cResponse += '"detailedMessage": "' + FWHttpEncode( STR0002 ) + '",' // 'Verifique o relacionamento do Usuário no Cadastro de Vendedores, para maiores informações consulte a página: https://tdn.totvs.com/x/Ro2zJg'
	cResponse += '"helpUrl": "https://tdn.totvs.com/x/Ro2zJg"'
	cResponse += '}'
return cResponse

//----------------------------------------------------------------------------
/*/{Protheus.doc} canExecutewithUser
	Verifica se pode executar a consulta para um usuario especifico
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 11/02/2022
	@param isAdmin, logical, usuario é administrador
	@param cSeller, character, código do vendedor
	@return logical, pode executar consulta
/*/
//----------------------------------------------------------------------------
function canExecutewithUser(isAdmin as logical, cSeller as character) as logical
return !Empty(cSeller) .or. isAdmin

//----------------------------------------------------------------------------
/*/{Protheus.doc} getSellerWithUserid
	Obtem o código do vendedor a partir do usuario conectado.
	@type function
	@version 12.1.33
	@author Danilo Salve / Squad CRM & Faturamento
	@since 04/03/2022
	@return character, Código do Vendedor
/*/
//----------------------------------------------------------------------------
function getSellerWithUserid() as character
	Local aArea	:= FwGetArea() as array
	local cSeller as character

	DbSelectArea("SA3")
	SA3->(DbSetOrder(7)) // A3_FILIAL, A3_CODUSR

	If SA3->(MSSeek(FwxFilial("SA3") + __cUserId))
		cSeller := SA3->A3_COD
	Endif

	SA3->(DbCloseArea())
	FwRestArea( aArea )
return cSeller

//----------------------------------------------------------------------------
/*/{Protheus.doc} checkDbUseArea
	Verifica se o Protheus não está executando o REFAZ EMPENHOS(MATA215) e se as tabelas estão sendo processadas em modo exclusivo.
	@type function
	@version 12.1.33
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 26/09/2022
	@return logico
/*/
//----------------------------------------------------------------------------
function checkDbUseArea()
	Local cLock := GetNextAlias()
	Local lRet := .F.

	DBUseArea(.T., 'TOPCONN', RetSQLName("SB1"), cLock, .T., .F.)
	If Select(cLock) > 0
		lRet:= .T.
		(cLock)->(dbCloseArea())
	Else
		SetRestFault(503, FWhttpEncode(STR0003))//'As tabelas necessarias para acessar essa rotina estão sendo processadas em modo exclusivo no Protheus. Por favor entre em contato com o Administrador do sistema.'
		lRet:= .F.
	EndIf

return lRet

//----------------------------------------------------------------------------
/*/{Protheus.doc} findMethod
	Verifica se o Metodo informado por parametro existe dentro da classe.
	@type function
	@version 12.1.2210 ou superior
	@author Eduardo Paro / Squad CRM & Faturamento
	@since 04/05/2023
	@return lRet, logico, .T. quando o metodo existe
	@param oService, Object, Objeto a ser percorrido
	@param cMethod, Character, metodo a ser procurado
/*/
//----------------------------------------------------------------------------
function findMethod(oService as Object, cMethod as Character)
	Local aMethods := ClassMethArr(oService, .T.)
	Local nPos := aScan(aMethods, {|x| ALLTRIM(UPPER(x[1])) == UPPER(cMethod)})
	Local lRet := .F.

	If !Empty(nPos)
		lRet := .T.
	EndIf

return lRet
