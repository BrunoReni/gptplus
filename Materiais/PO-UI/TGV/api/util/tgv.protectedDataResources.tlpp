#include "tlpp-core.th"
namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} setProtectedFields
    Retorna um PathParams informado na requisição

    @sample     setProtectedFields(aFields, "TGVAPIXXX")
    @param      aFields, Array      , Lista de Campos utilizados na API.
    @param      cSource, Caractere  , Nome do Recurso (API)
    @return     Objecto, Retorna um HashMap com o Map dos campos - Utilizado no
        Metodo RowToJson da API.
    @author		Danilo Salve
    @since		20/01/2021
    @version	12.1.27
/*/
//------------------------------------------------------------------------------
Function setProtectedFields(aFields as Array, cSource as Character) as Object
	Local aFieldsMap 	as Array
	Local aFieldsPD 	as Array
	Local cField		  as Character
	Local nField 		  as Numeric
	Local nPosAlias		as Numeric
	Local oHashFields := tHashMap():New()

	Default aFields := {}

  If !CanAccessProtectedData()
    For nField := 1 To Len(aFields)
      If aFields[nField,1] == aFields[nField,2] .And. !("id" $ aFields[nField,1] .Or. "deleted" $ aFields[nField,1])
        If Len(aFields[nField]) >= 6
          nPosAlias := At(".", aFields[nField, 6])
          If nPosAlias > 0
            cField := Substr(aFields[nField, 6], nPosAlias + 1 )
          Else
            cField := aFields[nField, 6]
          Endif
          oHashFields:Set(aFields[nField,1], cField)
        EndIf
      Elseif aFields[nField,1] != aFields[nField,2]
        oHashFields:Set(aFields[nField,1], aFields[nField,2])
      Endif
    Next

    oHashFields:List(@aFieldsMap)

    If Len(aFieldsMap) > 0
      aFieldsPD := {}
      For nField := 1 To Len(aFieldsMap)
        aAdd(aFieldsPD, aFieldsMap[nField, 2])
      Next
      FTPDLoad(/*cUser*/, /*aAlias*/, aFieldsPD, cSource)
      aSize(aFieldsMap, 0)
      aSize(aFieldsPD, 0)
    EndIf
  Endif
Return oHashFields

//------------------------------------------------------------------------
/*/{Protheus.doc} canObfuscateField
	Retorna se o campo pode ser ofuscado

	@param    oHashFields , ObjetoHash  , Objeto HashMap com De-Para de campos (MapFields)
	@param		cFieldMap   , Character		, Nome do Campo.
	@param		cField      , Character		, Nome do Campo na Query.
	@param    cSource     , Character 	, Nome do Recurso utilizado no setProtectedFields
  @param    isAdmin     , Logical     , Usuário é Administrador?
	@return 	Logical     , Campo pode ser ofuscado (.T.)
	@author 	Danilo Salve / Squad CRM & Faturamento
	@since 		27/01/2021
	@version 	12.1.27 ou Superior
/*/
//------------------------------------------------------------------------
Function canObfuscateField(oHashFields as Object, cFieldMap as Character, cField as Character, cSource as Character, isAdmin as Logical) as Logical
	Local lcanObfuscateField as Logical

	Default isAdmin   := FWIsAdmin()
  Default cFieldMap := ""
  Default cField    := ""

	If CanAccessProtectedData(isAdmin) .Or. oHashFields == Nil
		Return .F.
	Else
		lcanObfuscateField := oHashFields:Get(cFieldMap, @cField) .And. FTPDIsObfuscate(cField, cSource, .F.)
	Endif
Return lcanObfuscateField

//------------------------------------------------------------------------
/*/{Protheus.doc} CanAccessProtectedData
	Retorna se usuario pode Acessar/Visualizar dados protegidos/pessoais

  @param    isAdmin     , Logical     , Usuário é Administrador?
	@return 	Logical     , Retorna se usuario pode acessar dados Protegidos/Pessoais
	@author 	Danilo Salve / Squad CRM & Faturamento
	@since 		28/04/2021
	@version 	12.1.27
/*/
//------------------------------------------------------------------------
Function CanAccessProtectedData(isAdmin as Logical) as Logical
  Default isAdmin := FWIsAdmin()
Return isAdmin .Or. ( VerSenha(192) .And. VerSenha(193) )
