#include 'tlpp-core.th'
#INCLUDE 'FWMVCDEF.CH'
#include 'tlpp-rest.th'
#include 'tgv.salesOrders.data.protheus.ch'

namespace tgv.salesOrders
using namespace tgv.util

Static existConvertStringToLine := FindFunction("tgv.util.convertStringToLine")

#DEFINE SCHEMASC5 "000009"
#DEFINE SCHEMASC6 "000010"
#DEFINE INCLUI 3
#DEFINE ALTERA 4
#DEFINE EXCLUI 5

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesOrdersProtheusData
	Classe responsavel por consultar, incluir, alterar ou excluir um Pedido de Venda
	@type 		class
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		04/06/2021
/*/
//------------------------------------------------------------------------------
CLASS SalesOrdersProtheusData FROM FWAdapterBaseV2
	Public Method new() as Object
	Public Method getHeaders()
	Public Method getItems()
	Public Method getTotalSalesOrder()
	Public Method saveSalesOrders() as logical
EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesOrdersProtheusData::New() as Object
	Cria uma nova intancia da classe SalesOrdersProtheusData
	@type		method
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		29/09/2020
	@return		object, nova instancia da classe SalesOrdersProtheusData
/*/
//------------------------------------------------------------------------------
Method New() as Object CLASS SalesOrdersProtheusData
	_Super:New( "GET", .T. )
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesOrdersProtheusData::GetAllHeaders(nPage as Numeric, nPageSize as Numeric, cOrderId as Character, aURLFilter as Array, cFields as Character,;
 cSort as Character, cProductId as Character)
	Retorna todos os cabeçalhos de pedidos de vendas (SC5)
	@type		method
	@param		nPage		, Numeric	, Numero da pagina
	@param		nPageSize	, Numeric	, Tamanho da Pagina
	@param		cOrderId	, Character	, Número do Pedido de Venda (C5_NUM)
	@param		aURLFilter	, Array		, Lista de Filtros no padrão do FWAdapterBaseV2
	@param		cFields		, Character	, Lista de campos que devem ser retornados
	@param		cSort		, Character	, Ordernação do Response
	@param		cProductId	, Character	, Código do Produto
	@author		Squad CRM & Faturamento
	@since		04/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetHeaders(nPage as Numeric, nPageSize as Numeric, cOrderId as Character, aURLFilter as Array, cFields as Character,;
 cSort as Character, cProductId as Character) CLASS SalesOrdersProtheusData
	local aArea		:= GetArea() as Array
	local cWhere	as character
	local cSeller	as character
	local isAdmin	:= FWIsAdmin() as logical

	addMapSC5( self, .T. )

	cWhere := GetFilterSC5( cOrderId, .T., @cSeller, isAdmin, .t. )

	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( GetQuerySalesOrder(.F., .T., .T., .T., .T., .T., /*cFilterDiff*/, /*cQueryFields*/, .T., cProductId))
	::SetWhere( cWhere )
	::SetOrder( "C5_FILIAL, C5_NUM" )

	If !Empty( aURLFilter ) .And. Len( aURLFilter ) > 0 
		::SetUrlFilter( aURLFilter )
	Endif

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf
	
	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	If canExecutewithUser(isAdmin, cSeller) .and. ::Execute()
		::FillGetResponse()
	EndIf
	
	RestArea( aArea )
	aSize( aArea, 0 )
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesOrdersProtheusData::GetItems(nPage as Numeric, nPageSize as Numeric, cOrderId as Character, cItemId as Character, aURLFilter as Array, cFields as Character,;
 cSort as Character)
	Retorna todo os Itens de Pedidos de vendas
	@type		method
	@param		nPage		, Numeric	, Numero da pagina
	@param		nPageSize	, Numeric	, Tamanho da Pagina
	@param		cOrderId	, Character	, Código do Pedido de venda (C5_NUM)
	@param		cItemId		, Character	, Código do item (C6_ITEM)
	@param		aURLFilter	, Array		, Lista de Filtros no padrão do FWAdapterBaseV2
	@param		cFields		, Character	, Data de sincronismo
	@param		cSort		, Character	, Ordernação do Response
	@author		Squad CRM & Faturamento
	@since		04/06/2021
	@version	12.1.27
/*/
//------------------------------------------------------------------------------
Method GetItems(nPage as Numeric, nPageSize as Numeric, cOrderId as Character, cItemId as Character, aURLFilter as Array, cFields as Character,;
 cSort as Character ) CLASS SalesOrdersProtheusData
	local aArea 	:= GetArea() as Array
	local cWhere	as character
	local cSeller	as character
	local isAdmin	:= FWIsAdmin() as logical

	cWhere := GetFilterSC5( cOrderId, .T., @cSeller, isAdmin, .t. )

	If !Empty(cItemId)
		cWhere += " AND SC6.C6_ITEM = '" + cItemId + "'"
	Endif

	If !Empty( aURLFilter ) .And. Len( aURLFilter ) > 0 
		::SetUrlFilter( aURLFilter )
	Endif

	If !Empty( cSort )
		::SetOrderQuery( cSort )
	EndIf
	
	If !Empty( cFields )
		::SetFields( cFields )
	Endif

	addMapSC6( self , .T. )
	
	::setPage( nPage )
	::setPageSize( nPageSize )
	::SetQuery( GetQuerySalesOrder(.T., .F., .F., .F., .F., .F.,/*cFilterDiff*/, /*cQueryFields*/, .T. ))
	::SetWhere( cWhere )
	::SetOrder( "C6_FILIAL, C6_NUM, C6_ITEM, C6_PRODUTO" )

	If canExecutewithUser(isAdmin, cSeller) .and. ::Execute()
		::FillGetResponse()
	EndIf
	
	RestArea( aArea )
	aSize( aArea, 0 )
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesOrdersProtheusData::GetTotalSalesOrder
	Obtem o total do Pedido de Venda especificado na URI.
	@type		method
	@version	12.1.27
	@author		Squad CRM & Faturamento
	@since		26/01/2021
	@param		cOrderId, character, Código do Pedido de Venda (C5_NUM)
/*/
//------------------------------------------------------------------------------
Method GetTotalSalesOrder(cOrderId as Character) class SalesOrdersProtheusData
	Local aHeader   := {} as Array
	Local aItems	:= {} as Array
	Local aMsgErro	as Array
	Local cResponse	as Character
	Local nError	as Integer
	Local nTamErr	as Integer
	Local cError    as character

	Private oApiManager := Nil
	Private lMsErroAuto := .F.
	Private lAutoErrNoFile := .T.

	oApiManager := FWAPIManager():New("MATSIMP","1.000")
	oApiManager:SetApiAlias({"SC5", "items", "items"})
	oApiManager:Activate()

	SC5->(DbSetOrder(1)) // C5_FILIAL, C5_NUM
	If SC5->(DbSeek(FwXFilial("SC5") + cOrderId))
		If canChangeSalesOrder(cOrderId)
			aAdd(aHeader, {"C5_NUM", cOrderId, Nil})
			MSExecAuto({|a, b, c, d, e| MATA410(a, b, c, d, e)}, aHeader, {}, ALTERA, .F.) 
		Else
			headerBuilderSC5(@aHeader)
			lineBuilderSC6(cOrderId, @aItems)
			MSExecAuto({|a, b, c, d, e| MATA410(a, b, c, d, e)}, aHeader, aItems, INCLUI, .F.)
		EndIf

		If lMsErroAuto
			aMsgErro := GetAutoGRLog()
			cResponse := ""
			nTamErr	 := Len(aMsgErro)
			For nError := 1 To nTamErr
				cError := StrTran( StrTran( aMsgErro[nError], "<", "" ), "-", "" ) + (" ")
				If existConvertStringToLine
					cError := convertStringToLine(cError, .T.)
				EndIf
				cResponse += cError
			Next
			
			aSize(aMsgErro, 0)
			SetRestFault(400, cResponse ) 
		Else
			oRest:setResponse(oApiManager:ToObjectJson())
		EndIf
	Else
		SetRestFault(404, STR0001) // Pedido de venda nao encontrado.
	EndIf

	oApiManager:Destroy()
    aSize(aHeader, 0)
    aSize(aItems, 0)
Return Nil


//------------------------------------------------------------------------------
/*/{Protheus.doc} SalesOrdersProtheusData::saveSalesOrders(jSalesOrder as Json, nOperation as Numeric, cSalesOrdersId as Character) as Logical
	Efetua a inclusão, altera ou Exclusão de um Pedido de Venda
	@type		method
	@version	12.1.33
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		11/08/2021
	@param		jSalesOrder		, json		, json do pedido de venda
	@param		nOperation		, Numeric	, Operação (3 - Inclusão, 4 - Alteração ou 5 - Exclusão)
	@param		cSalesOrdersId	, Character	, Número do pedido de venda (C5_NUM)
	@return		logical, Se obteve sucesso na transação retorna verdadeiro.
/*/
//------------------------------------------------------------------------------
Method saveSalesOrders(jSalesOrder as Json, nOperation as Numeric, cSalesOrdersId as Character) as Logical Class SalesOrdersProtheusData
	Local aArea			:= FwGetArea() as Array
	Local oSalesOrders	:= tgvSalesOrdersBase():new() as Object
	Local lContinue		:= .T. as Logical
	Local nStatusCode	:= 201 as Numeric
	local isAdmin		:= FWIsAdmin() as logical

	If oSalesOrders:setOperation( nOperation )
		If nOperation <> INCLUI
			DbSelectArea("SC5")
			SC5->(DbSetOrder(1)) //C5_FILIAL, C5_NUM
			If !SC5->( DbSeek( FwXFilial('SC5') + cSalesOrdersId ))
				oSalesOrders:setErrorMessage( STR0001, .T. )
				oSalesOrders:cSellerId := getSellerFromFilter(isAdmin, .F.)
				nStatusCode := 404
				lContinue := .F.
			Else
				oSalesOrders:cSalesOrderId := cSalesOrdersId
				oSalesOrders:cExternalId := SC5->C5_NUMEXT
				
				If Empty(oSalesOrders:cSellerId := getSellerFromFilter(isAdmin, .F.))
					oSalesOrders:cSellerId := SC5->C5_VEND1
				EndIf

				nStatusCode := 200
			Endif
		Endif

        If lContinue .And. oSalesOrders:fromExecAuto(jSalesOrder)
            If oSalesOrders:commitData()
				If nOperation == INCLUI .And. !Empty(oSalesOrders:cExternalId)
					oSalesOrders:updateSalesOrderId()
				EndIf

				oRest:setStatusCode( nStatusCode )
				oRest:setResponse( getResponseSalesOrders( nOperation, oSalesOrders:cSalesOrderId, oSalesOrders:cExternalId, oSalesOrders:cSellerId ) )
				NotifySeller(IIF(nOperation == INCLUI, oSalesOrders:cSalesOrderId, cSalesOrdersId), oSalesOrders:cSellerId, nOperation, /*cError*/, oSalesOrders:cExternalId, .F., "MATA410")
			Else
				SetRestFault(400, FWHttpEncode(oSalesOrders:getErrorMessage()) )
				lContinue := .F.
            Endif
        Else
			nStatusCode := IIF(nStatusCode == 404, 404, 400)
            SetRestFault(nStatusCode, FWHttpEncode(oSalesOrders:getErrorMessage()) )
			lContinue := .F.
        Endif
    Endif
	
	If !lContinue
		NotifySeller(IIF(nOperation == INCLUI, '', cSalesOrdersId),;
		oSalesOrders:cSellerId, nOperation, oSalesOrders:getErrorMessage(), IIF(nOperation == INCLUI, oSalesOrders:cExternalId, SC5->C5_NUMEXT), .F., "MATA410")
	Endif	

    oSalesOrders:Destroy()
    FreeObj(oSalesOrders)
	FwrestArea( aArea )
	aSize( aArea, 0)
Return lContinue

//------------------------------------------------------------------------------
/*/{Protheus.doc} addMapSC5
	Adiciona uma lista de campos do cabeçalho do Pedidos de Venda.
	@type		function
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		29/09/2020
	@param 		oSelf	, object	, Objeto herdado da classe FWAdapterBaseV2
	@param 		isOnline, logical	, GET Online (.T.) / GET Sync (.F.)
/*/
//------------------------------------------------------------------------------
Function addMapSC5( oSelf as Object, isOnline as Logical)
	Local aInternalId			:= GetInternalId( { "C5_FILIAL", "C5_NUM" } )
	Local aCustomerId			:= GetInternalId( { "A1_COD", "A1_LOJA"} )
	Local aCustomerInternalId	:= GetInternalId( { "A1_FILIAL", "A1_COD", "A1_LOJA"} )
	Local aPaymentInternalId	:= GetInternalId( { "E4_FILIAL", "C5_CONDPAG" } )
	Local lFixedId				:= !oSelf:oJsonObj:lList

	If isOnline
		oSelf:AddMapFields( "internalid"		, "internalid"	, .T., .F., { "internalid"	, 'C', aInternalId[1] , 0 }, aInternalId[2])
	Else
		oSelf:AddMapFields( "internalid"		, "internalid"	, .T., .F., { "internalid"	, 'C', aInternalId[1] , 0 }, "' '")
		oSelf:AddMapFields( "deleted"			, "deleted"		, .T., .F., { "deleted"     , 'C', 1, 0 }, "SC5.D_E_L_E_T_" )
		oSelf:AddMapFields( "STAMP"				, "STAMP"		, .T., .F., { "STAMP"		, 'C', 25, 0 }, GetMaxStamp())
	Endif

	oSelf:AddMapFields( "externalid"		, "C5_NUMEXT"	, .T., .F., { "C5_NUMEXT"	, 'C', GetFieldLength("C5_NUMEXT")	, 0 } )
	oSelf:AddMapFields( "branchid"			, "C5_FILIAL"	, .T., .F., { "C5_FILIAL"	, 'C', GetFieldLength("C5_FILIAL")	, 0 }, "SC5.C5_FILIAL" )
	oSelf:AddMapFields( "orderid"			, "C5_NUM"		, .T., lFixedId, { "C5_NUM"	, 'C', GetFieldLength("C5_NUM")		, 0 }, "SC5.C5_NUM" )
	oSelf:AddMapFields( "ordertype"			, "C5_TIPO"		, .T., .F., { "C5_TIPO"		, 'C', GetFieldLength("C5_TIPO")    , 0 }, )
	oSelf:AddMapFields( "pricelistid"		, "C5_TABELA"	, .T., .F., { "C5_TABELA"	, 'C', GetFieldLength("C5_TABELA")  , 0 } )
	oSelf:AddMapFields( "paymentConditionid", "C5_CONDPAG"	, .T., .F., { "C5_CONDPAG"	, 'C', GetFieldLength("C5_CONDPAG") , 0 } )
	oSelf:AddMapFields( "paymentinternalid" , "paymentinternalid", .T., .F., { "paymentinternalid"	, 'C', aPaymentInternalId[1] , 0 },;
		aPaymentInternalId[2])
	oSelf:AddMapFields( "issuedate"			, "C5_EMISSAO"	, .T., .F., { "C5_EMISSAO"	, 'D', GetFieldLength("C5_EMISSAO") , 0 } )
	oSelf:AddMapFields( "customerinternalid", "customerinternalid" , .T., .F., { "customerinternalid"	, 'C', aCustomerInternalId[1] , 0 },;
		aCustomerInternalId[2] )
	oSelf:AddMapFields( "customerid"		, "customerid"	, .T., .F., { "customerid"	, 'C', aCustomerId[1] , 0 }, aCustomerId[2] )
	oSelf:AddMapFields( "customername"		, "A1_NOME"		, .T., .F., { "A1_NOME"		, 'C', GetFieldLength("A1_NOME")	, 0 } )
	oSelf:AddMapFields( "clientid"			, "A1_COD"		, .T., .F., { "A1_COD"		, 'C', GetFieldLength("A1_COD")		, 0 } )
	oSelf:AddMapFields( "storeid"			, "A1_LOJA"		, .T., .F., { "A1_LOJA"		, 'C', GetFieldLength("A1_LOJA")	, 0 } )
	oSelf:AddMapFields( "sellerid"			, "C5_VEND1"	, .T., .F., { "C5_VEND1"	, 'C', GetFieldLength("C5_VEND1")	, 0 } )
	oSelf:AddMapFields( "freighttype"		, "C5_TPFRETE"	, .T., .F., { "C5_TPFRETE"	, 'C', GetFieldLength("C5_TPFRETE")	, 0 } )
	oSelf:AddMapFields( "freight"			, "C5_FRETE"	, .T., .F., { "C5_FRETE"	, 'N', GetFieldLength("C5_FRETE")	,;
		GetFieldDecimal("C5_FRETE") } )
	oSelf:AddMapFields( "insurance"			, "C5_SEGURO"	, .T., .F., { "C5_SEGURO"	, 'N', GetFieldLength("C5_SEGURO")	,;
		GetFieldDecimal("C5_SEGURO") } )
	oSelf:AddMapFields( "expenses"			, "C5_DESPESA"	, .T., .F., { "C5_DESPESA"	, 'N', GetFieldLength("C5_DESPESA"),;
		GetFieldDecimal("C5_DESPESA") } )
	oSelf:AddMapFields( "discount"			, "C5_DESC1"	, .T., .F., { "C5_DESC1"	, 'N', GetFieldLength("C5_DESC1"),;
		GetFieldDecimal("C5_DESC1") } )
	oSelf:AddMapFields( "currencyid"		, "C5_MOEDA"	, .T., .F., { "C5_MOEDA"	, 'N', GetFieldLength("C5_MOEDA"),;
		GetFieldDecimal("C5_MOEDA") } )
	oSelf:AddMapFields( "amount"			, "TOTAL"		, .T., .F., { "TOTAL"		, 'N', GetFieldLength("C6_VALOR"),;
		GetFieldDecimal("C6_VALOR") }, "TOTAL" )
	oSelf:AddMapFields( "typeofoperation", "C6_OPER"		, .T., .F., { "C6_OPER"		, 'N', GetFieldLength("C6_OPER"),;
		GetFieldDecimal("C6_OPER") }, "SC6OPER.C6_OPER" )
	oSelf:AddMapFields( "status"			, "STATUSPV"	, .T., .F., { "STATUSPV"	, 'C', 2, 0 }, GetStatus())
	oSelf:AddMapFields( "carriercode"		, "C5_TRANSP"	, .T., .F., { "C5_TRANSP"	, 'C', GetFieldLength("C5_TRANSP")	, 0 } )
	oSelf:AddMapFields( "releasetype"		, "C5_TIPLIB"	, .T., .F., { "C5_TIPLIB"	, 'C', GetFieldLength("C5_TIPLIB")	, 0 } )
	oSelf:AddMapFields( "carriername"		, "A4_NOME"		, .T., .F., { "A4_NOME"		, 'C', GetFieldLength("A4_NOME")	, 0 } )
	oSelf:AddMapFields( "sellername"		, "A3_NOME"		, .T., .F., { "A3_NOME"		, 'C', GetFieldLength("A3_NOME")	, 0 } )
	oSelf:AddMapFields( "selleremail"		, "A3_EMAIL"	, .T., .F., { "A3_EMAIL"	, 'C', GetFieldLength("A3_EMAIL")	, 0 } )
	oSelf:AddMapFields( "amounttaxes"		, "amounttaxes"	, .T., .F., { "amounttaxes"	, 'N', GetFieldLength("C6_VALOR")	,;
		GetFieldDecimal("C6_VALOR") }, "0")
	oSelf:AddMapFields( "notemessage"	, "C5_MENNOTA"   , .T., .F., { "C5_MENNOTA"	, 'C', GetFieldLength("C5_MENNOTA")	, 0 } )

	If canAddCommentField()
		oSelf:AddMapFields( "ordercomment", "C5_COMENT", .T., .F., { "C5_COMENT", 'C', GetFieldLength("C5_COMENT"), 0 } )
	EndIf

	If canAddIntermediaryFields()
		oSelf:AddMapFields( "intermediaryid"	, "C5_CODA1U"   , .T., .F., { "C5_CODA1U"	, 'C', GetFieldLength("C5_CODA1U")	, 0 } )
		oSelf:AddMapFields( "purchaserpresence"	, "C5_INDPRES"	, .T., .F., { "C5_INDPRES"	, 'C', GetFieldLength("C5_INDPRES")	, 0 } )
	Endif


	AddMapCustomFields( SCHEMASC5, @oSelf)

	aSize(aInternalId, 0)
	aSize(aCustomerId, 0)
	aSize(aCustomerInternalId, 0)
	aSize(aPaymentInternalId, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} addMapSC6
	Adiciona uma lista de campos dos itens do Pedidos de Venda (SC6).
	@type		function
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		29/09/2020
	@param 		oSelf	, object	, Objeto herdado da classe FWAdapterBaseV2
	@param 		isOnline, logical	, GET Online (.T.) / GET Sync (.F.)
/*/
//------------------------------------------------------------------------------
Function addMapSC6( oSelf as Object, isOnline as Logical )
	Local aInternalId   := GetInternalId( { "C6_FILIAL", "C5_NUM", "C6_ITEM" } ) as Array
	Local aItemExtId	:= GetInternalId( { "C5_NUMEXT", "C6_ITEM"} ) as Array
	Local aOrderId      := GetInternalId( { "C5_FILIAL", "C5_NUM" } ) as Array

	If isOnline
		oSelf:AddMapFields( "internalid"		, "internalid"		, .T., .F., { "internalid"		, 'C', aInternalId[1]	, 0 }, aInternalId[2])
		oSelf:AddMapFields( "orderinternalid"	, "orderinternalid"	, .T., .F., { "orderinternalid"	, 'C', aOrderId[1]		, 0 }, aOrderId[2])
		oSelf:AddMapFields( "externalitemid"	, "externalitemid"	, .T., .F., { "externalitemid"	, 'C', aItemExtId[1]	, 0 }, aItemExtId[2])
	Else
		oSelf:AddMapFields( "internalid"		, "internalid"		, .T., .F., { "internalid"		, 'C', aInternalId[1]	, 0 }, "' '")
		oSelf:AddMapFields( "orderinternalid"	, "orderinternalid"	, .T., .F., { "orderinternalid"	, 'C', aOrderId[1]		, 0 }, "' '")
		oSelf:AddMapFields( "externalitemid"	, "externalitemid"	, .T., .F., { "externalitemid"	, 'C', aItemExtId[1]	, 0 }, "' '")
	Endif

	oSelf:AddMapFields( "externalid"			, "C5_NUMEXT"		, .T., .F., { "C5_NUMEXT"		, 'C', GetFieldLength("C5_NUMEXT")	, 0 }, "SC5.C5_NUMEXT" )
	oSelf:AddMapFields( "branchid"				, "C5_FILIAL"		, .T., .F., { "C5_FILIAL"		, 'C', GetFieldLength("C5_FILIAL")	, 0 }, "SC5.C5_FILIAL" )
	oSelf:AddMapFields( "orderid"				, "C5_NUM"			, .T., .T., { "C5_NUM"			, 'C', GetFieldLength("C5_NUM")		, 0 }, "SC5.C5_NUM" )
	oSelf:AddMapFields( "itemid"				, "C6_ITEM"			, .T., .F., { "C6_ITEM"			, 'C', GetFieldLength("C6_ITEM")	, 0 }, "SC6.C6_ITEM" )
	oSelf:AddMapFields( "productid"				, "C6_PRODUTO"		, .T., .F., { "C6_PRODUTO"		, 'C', GetFieldLength("C6_PRODUTO")	, 0 })
	oSelf:AddMapFields( "description"			, "C6_DESCRI"		, .T., .F., { "C6_DESCRI"		, 'C', GetFieldLength("C6_DESCRI")	, 0 })
	oSelf:AddMapFields( "quantity"				, "C6_QTDVEN"		, .T., .F., { "C6_QTDVEN"		, 'N', GetFieldLength("C6_QTDVEN")	,;
		GetFieldDecimal("C6_QTDVEN") } )
	oSelf:AddMapFields( "pricelist"				, "C6_PRUNIT"		, .T., .F., { "C6_PRUNIT"		, 'N', GetFieldLength("C6_PRUNIT")	,;
		GetFieldDecimal("C6_PRUNIT") } )
	oSelf:AddMapFields( "unitprice"				, "C6_PRCVEN"		, .T., .F., { "C6_PRCVEN"		, 'N', GetFieldLength("C6_PRCVEN")	,;
		GetFieldDecimal("C6_PRCVEN") } )
	oSelf:AddMapFields( "amount"				, "C6_VALOR"		, .T., .F., { "C6_VALOR"		, 'N', GetFieldLength("C6_VALOR")	,;
		GetFieldDecimal("C6_VALOR") } )
	oSelf:AddMapFields( "discount"				, "C6_DESCONT"		, .T., .F., { "C6_DESCONT"		, 'N', GetFieldLength("C6_DESCONT")	,;
		GetFieldDecimal("C6_DESCONT") } )
	oSelf:AddMapFields( "discountamount"		, "C6_VALDESC"		, .T., .F., { "C6_VALDESC"		, 'N', GetFieldLength("C6_VALDESC")	,;
		GetFieldDecimal("C6_VALDESC") } )
	oSelf:AddMapFields( "quantitydelivered"		, "C6_QTDENT"		, .T., .F., { "C6_QTDENT"		, 'N', GetFieldLength("C6_QTDENT")	,;
		GetFieldDecimal("C6_QTDENT") } )
	oSelf:AddMapFields( "blockstatus"			, "C6_BLQ"			, .T., .F., { "C6_BLQ"			, 'C', GetFieldLength("C6_BLQ")		, 0 } )
	oSelf:AddMapFields( "outflowtype"			, "C6_TES"			, .T., .F., { "C6_TES"			, 'C', GetFieldLength("C6_TES")		, 0 } )
	oSelf:AddMapFields( "fiscalcode"			, "C6_CF"			, .T., .F., { "C6_CF"			, 'C', GetFieldLength("C6_CF")		, 0 } )
	oSelf:AddMapFields( "customerorder"			, "C6_PEDCLI"		, .T., .F., { "C6_PEDCLI"	    , 'C', GetFieldLength("C6_PEDCLI")	, 0 } )
	oSelf:AddMapFields( "deleted"				, "deleted"			, .T., .F., { "deleted"			, 'C', 1, 0 }, "SC6.D_E_L_E_T_" )

	AddMapCustomFields( SCHEMASC6, @oSelf)

	aSize(aOrderId, 0)
	aSize(aItemExtId, 0)
	aSize(aInternalId, 0)
Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetQuerySalesOrder
	Monta a Expressão SQL para consulta dos Pedidos de venda
	@type		function
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		29/09/2020
	@param		lItems		, logical	, Adiciona uma junção com os itens do pedido de venda
	@param		lCustomers	, logical	, Adiciona uma junção com o cliente do pedido de venda
	@param		lTotal		, logical	, Adiciona uma junção com calculo total do Pedido
	@param		lCarriers	, logical	, Adiciona uma junção com as transportadoras
	@param		lSellers	, logical	, Adiciona uma junção com os vendedores
	@param		lConditions	, logical	, Adiciona uma junção com as Condições de Pagamento
	@param		cWhereDiff	, character	, Expressão SQL para busca de registros quando utilizando DIFF/SYNC
	@param		cQueryFields, character	, Campos utilizados no cabeçalho quando utilizando DIFF/SYNC
	@param 		isOnline	, logical	, GET Online (.T.) / GET Sync (.F.)
	@param		cProductId	, character	, Código do Produto
	@return		character, Expressao SQL para consulta de Pedidos ou Itens do Pedido
/*/
//------------------------------------------------------------------------------
Function GetQuerySalesOrder(lItems as Logical, lCustomers as Logical, lTotal as Logical, lCarriers as Logical, lSellers as Logical,;
	lConditions as Logical, cWhereDiff as Character, cQueryFields as Character, isOnline as Logical, cProductId as Character) as Character
	Local cQuery   := ""                                                     as Character
	Local cConcate := IIF(AllTrim( Upper( TcGetDb() ) ) == "MSSQL","+","||") as Character

	If !isOnline
		cQueryFields := IIF(Empty(cQueryFields), '*', cQueryFields)

		If !Empty(cWhereDiff)
			cQuery := " SELECT " + cQueryFields +"FROM ( "
		Endif
	EndIf
	
	cQuery += " SELECT #QueryFields#"
	cQuery += " FROM " + RetSqlName("SC5") + " SC5 "

	If lItems
		cQuery += " INNER JOIN " + RetSqlName("SC6") + " SC6 ON "
		cQuery += " SC6.C6_NUM = SC5.C5_NUM AND SC6.C6_FILIAL = SC5.C5_FILIAL "
		If isOnline
			cQuery += " AND SC6.D_E_L_E_T_ = ' ' "
		Else
			cQuery +=' INNER JOIN '+RetSqlName('AQ5')+' AQ5 '
			cQuery +=' ON'
			cQuery +=' SC6.C6_NUM '+cConcate+' SC6.C6_ITEM '+cConcate+' SC6.C6_PRODUTO = AQ5.AQ5_CODENT'
			cQuery +=' INNER JOIN '+RetSqlName('AQ4')+' AQ4 '
			cQuery +=' ON'
			cQuery +=' AQ5.AQ5_UUID = AQ4.AQ4_UUID'
			cQuery +=' AND AQ5.AQ5_FILIAL = AQ4.AQ4_FILIAL'
			cQuery +=' AND AQ5.D_E_L_E_T_ = AQ4.D_E_L_E_T_'
		EndIf
	Endif

	If lCustomers
		cQuery += " INNER JOIN " + RetSqlName("SA1") + " SA1 ON "
		cQuery += " A1_FILIAL = '" + FwXFilial("SA1") + "' AND C5_CLIENTE = A1_COD AND C5_LOJACLI = A1_LOJA AND SA1.D_E_L_E_T_ = ' ' "
	Endif

	If lConditions
		cQuery += " INNER JOIN " + RetSqlName("SE4") + " SE4 ON "
		cQuery += " E4_FILIAL = '" + FwXFilial("SE4") + "' AND C5_CONDPAG = E4_CODIGO AND SE4.D_E_L_E_T_ = ' ' "
	Endif

	If lCarriers
		cQuery += " LEFT JOIN " + RetSqlName("SA4") + " SA4 ON "
		cQuery += " SA4.A4_FILIAL = '" + FwXFilial("SA4") + "' AND SA4.A4_COD = SC5.C5_TRANSP AND SA4.D_E_L_E_T_ = ' ' "
	Endif

	If lSellers
		cQuery += " LEFT JOIN " + RetSqlName("SA3") + " SA3 ON "
		cQuery += " SA3.A3_FILIAL = '" + FwXFilial("SA3") + "' AND SC5.C5_VEND1 = SA3.A3_COD AND SA3.D_E_L_E_T_ = ' ' "
	Endif

	If lTotal
		If !isOnline
			cQuery +=' INNER JOIN '+RetSqlName('AQ5')+' AQ5 '
			cQuery +=' ON'
			cQuery +=' SC5.C5_NUM = AQ5.AQ5_CODENT'
			cQuery +=' INNER JOIN '+RetSqlName('AQ4')+' AQ4 '
			cQuery +=' ON'
			cQuery +=' AQ5.AQ5_UUID = AQ4.AQ4_UUID'
			cQuery +=' AND AQ5.AQ5_FILIAL = AQ4.AQ4_FILIAL'
			cQuery +=' AND AQ5.D_E_L_E_T_ = AQ4.D_E_L_E_T_'
		EndIf

		cQuery += " INNER JOIN ( "
		cQuery += " SELECT SC6OPER.C6_FILIAL, SC6OPER.C6_NUM, SC6OPER.C6_OPER"

		If !isOnline
			cQuery += ", MAX(SC6OPER.S_T_A_M_P_) S_T_A_M_P_ "
		Endif
		
		cQuery += " FROM " + RetSqlName("SC6") + " SC6OPER "
		cQuery += " 	INNER JOIN ( "
		cQuery += " 		SELECT SC6MIN.C6_FILIAL, SC6MIN.C6_NUM, MIN(SC6MIN.C6_ITEM) C6_ITEM "
		cQuery += " 		FROM " + RetSqlName("SC6") + " SC6MIN "
		cQuery += "			WHERE SC6MIN.C6_FILIAL = '" + FwXFilial("SC6") + "' AND SC6MIN.D_E_L_E_T_ = ' ' "
		cQuery += "			GROUP BY SC6MIN.C6_FILIAL, SC6MIN.C6_NUM "
		cQuery += "		) SC6MIN"
		cQuery += " 	ON SC6OPER.C6_FILIAL = SC6MIN.C6_FILIAL AND SC6OPER.C6_NUM = SC6MIN.C6_NUM AND SC6OPER.C6_ITEM = SC6MIN.C6_ITEM "

		If isOnline .Or. !Empty( cProductId )		
			cQuery += " WHERE "
			If !Empty( cProductId )
				cQuery += "SC6OPER.C6_PRODUTO LIKE '%" + cProductId + "%' OR SC6OPER.C6_DESCRI LIKE '%" + cProductId + "%'"
			Endif

			If isOnline
				cQuery += IIF(!Empty( cProductId ), "AND", "")
				cQuery += " SC6OPER.D_E_L_E_T_ = ' ' "
			Endif
		Endif

		cQuery += " 	GROUP BY SC6OPER.C6_FILIAL, SC6OPER.C6_NUM, SC6OPER.C6_OPER	"
		cQuery += " ) SC6OPER "
		cQuery += " ON SC6OPER.C6_FILIAL = SC5.C5_FILIAL AND SC6OPER.C6_NUM = SC5.C5_NUM "
		
		cQuery += " INNER JOIN "
		cQuery += " ( SELECT SC6TOTAL.C6_FILIAL, SC6TOTAL.C6_NUM, SUM(SC6TOTAL.C6_VALOR) TOTAL "
		cQuery += "	FROM " + RetSqlName("SC6") + " SC6TOTAL "
		cQuery += "	WHERE SC6TOTAL.D_E_L_E_T_ = ' ' "
		cQuery += "	GROUP BY SC6TOTAL.C6_FILIAL, SC6TOTAL.C6_NUM "
		cQuery += ") SC6TOTAL "
		cQuery += "	ON SC6TOTAL.C6_FILIAL = SC5.C5_FILIAL "
		cQuery += "	   AND SC6TOTAL.C6_NUM = SC5.C5_NUM "
		
	Endif

	cQuery += " WHERE #QueryWhere#"

	If !Empty(cWhereDiff)
		cQuery += " ) SC5 "
		cQuery += cWhereDiff
	Endif

Return cQuery

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetStatus
	Monta a expressão SQL utilizado para retorna o status do Pedido de Venda
	@type		function
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		01/10/2020
	@return		Character, Expressão CASE WHEN utilizado na consulta SQL.
/*/
//------------------------------------------------------------------------------
Static Function GetStatus() as Character
	Local cStatus 	as Character
	Local cNota		:= Space(GetFieldLength("C5_NOTA")) as Character
	Local cBql		:= Space(GetFieldLength("C5_BLQ")) as Character
	Local cLibOk	:= Space(GetFieldLength("C5_LIBEROK")) as Character

	cStatus := " CASE WHEN SC5.C5_LIBEROK = '" + cLibOk +"' AND SC5.C5_NOTA = '" + cNota + "' AND SC5.C5_BLQ = '" + cBql + "' THEN 'A' "
	cStatus += " ELSE CASE WHEN SC5.C5_NOTA <> '" + cNota + "' OR (SC5.C5_LIBEROK = 'E' AND SC5.C5_BLQ = '" + cBql + "') THEN 'E' "
	cStatus += " ELSE CASE WHEN SC5.C5_LIBEROK <> '" + cLibOk +"'  AND SC5.C5_NOTA = '" + cNota + "' AND SC5.C5_BLQ = '" + cBql + "' THEN 'L' "
	cStatus += " ELSE CASE WHEN SC5.C5_BLQ = '1' THEN 'BR' "
	cStatus += " ELSE CASE WHEN SC5.C5_BLQ = '2' THEN 'BV' "
	cStatus += " ELSE ' ' END END END END END "

Return cStatus

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetMaxStamp
	Monta a expressão SQL utilizado para retornar o STAMP do cabeçalho/item do pedido de venda
	@type		function
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		01/10/2020
	@return		Character, Expressão CASE WHEN utilizado na consulta SQL quando utilizado SYNC/DIFF
/*/
//------------------------------------------------------------------------------
Static Function GetMaxStamp() as Character
Return " CASE WHEN SC5.S_T_A_M_P_ < SC6OPER.S_T_A_M_P_ THEN SC6OPER.S_T_A_M_P_ ELSE SC5.S_T_A_M_P_ END "

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetFieldsMap
	Obtem todos os campos utilizados na clausula SELECT 
	@type		function
	@version	12.1.27
	@since		25/02/2021
	@author		Danilo Salve / Squad CRM & Faturamento
	@param		aMapFields  , Array , Lista de Campos adicionado no MapFields
	@return		Character   , Lista de Campos
/*/
//------------------------------------------------------------------------------
Static Function GetFieldsMap(aMapFields as Array) as Character
	Local cFields       := "" as Character
	Local nLenMapFields := Len(aMapFields) as Numeric
	Local nMapFields    as Numeric

	For nMapFields := 1 To nLenMapFields
		cFields += aMapFields[nMapFields, 2]
		If nMapFields <> nLenMapFields
			cFields += ", "
		Else
			cFields += " "
		Endif
	Next

Return cFields

//------------------------------------------------------------------------------
/*/{Protheus.doc} canAddIntermediaryFields
	Verifica se o campo C5_CODA1U foi criado no dicionario de dados.
	@type		function
	@since		04/06/2021
	@author		Danilo Salve / Squad CRM & Faturamento
	@version	12.1.27
	@return		Logical	, Verifica se pode adicionar os campos de intermediario financeiro.
/*/
//------------------------------------------------------------------------------
Static Function canAddIntermediaryFields() as Logical
	Local aArea		:= GetArea() as Array
	Local lReturn	:= .F. as Logical

	DbSelectArea("SC5")
	IF SC5->(ColumnPos("C5_CODA1U")) > 0 .and. cPaisLoc == "BRA"
    		lReturn := .T.
	Endif

	SC5->(DbCloseArea())

	RestArea(aArea)
	aSize(aArea, 0)
Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} canAddCommentField
	Verifica se o campo C5_COMENT foi criado no dicionario de dados.
	@type		function
	@since		04/07/2022
	@author		Eduardo Paro / Squad CRM & Faturamento
	@version	12.1.2210
	@return		Logical	, Verifica se pode adicionar o campo de comentario do pedido.
/*/
//------------------------------------------------------------------------------
Static Function canAddCommentField() as Logical
	Local aArea		:= GetArea() as Array
	Local lReturn	:= .F. as Logical

	DbSelectArea("SC5")
	IF SC5->(ColumnPos("C5_COMENT")) > 0
    	lReturn := .T.
	Endif

	SC5->(DbCloseArea())

	RestArea(aArea)
	aSize(aArea, 0)
Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} GetFilterSC5
	Obtem o filtro por pedido de venda.
	@type		function
	@since		26/07/2021
	@version	12.1.27
	@author		Danilo Salve / Squad CRM & Faturamento
	@param		cOrderId			, Character	, Número do pedido de venda
	@param		lCanFilterExcluded	, Logical	, adicionar clausula D_E_L_E_T_ = ' '
	@param 		lShowError, logical, Exibir Erro quando vendedor não é localizado
	@return		Character			, Expressão utilizada na consulta	
/*/
//------------------------------------------------------------------------------
Function GetFilterSC5( cOrderId as character, lCanFilterExcluded as logical, cSeller as character, isAdmin as Logical, lShowError as logical) as Character
	Local cWhere	as Character

	cWhere := " SC5.C5_FILIAL = '" + FwXFilial("SC5") + "'"

	If !Empty( cOrderId )
		cWhere += " AND SC5.C5_NUM = '" + cOrderId + "'"
	Endif

	cWhere += " AND SC5.C5_TIPO = 'N' "

	If !isAdmin
		If !Empty(cSeller := getSellerFromFilter(isAdmin, lShowError))
			cWhere += " AND SC5.C5_VEND1 = '" + cSeller + "' "
		EndIf
	EndIf

	If lCanFilterExcluded
		cWhere += " AND SC5.D_E_L_E_T_ = ' ' "
	Endif

Return cWhere

//------------------------------------------------------------------------------
/*/{Protheus.doc} getResponseSalesOrders
	Obtem uma resposta de sucesso de acordo com a operação informada.
	@type		function
	@version	12.1.33  
	@author		Danilo Salve / Squad CRM & Faturamento
	@since		11/08/2021
	@param		nOperation	, numeric, Operação (3, 4 ou 5)
	@return 	json, resposta de sucesso da requisição
/*/
//------------------------------------------------------------------------------
static function getResponseSalesOrders(nOperation as Numeric, cSalesOrderId as Character, cExternalId as Character, cSellerId as Character) as json
	Local jResponse		:= JsonObject():New() as json
	Local jSalesOrders	:= JsonObject():New() as json
	Local aSalesOrders	:= {} as Array

	If nOperation == INCLUI
		jResponse['messageSuccess'] := STR0002 // "Pedido de venda incluido com sucesso"
	Elseif nOperation == ALTERA
		jResponse['messageSuccess'] := STR0003 // "Pedido de venda alterado com sucesso"
	Elseif nOperation == EXCLUI
		jResponse['messageSuccess'] := STR0004 // "Pedido de venda excluido com sucesso"
	Endif

	jResponse['status'] := "OK"

	If nOperation <> EXCLUI
		jSalesOrders['orderid'] := cSalesOrderId
		jSalesOrders['externalid'] := cExternalId
		jSalesOrders['sellerid'] := cSellerId
		aAdd(aSalesOrders, jSalesOrders)
		jResponse['items'] := aClone(aSalesOrders)
	Endif

	FreeObj(jSalesOrders)
	aSize(aSalesOrders, 0)
Return jResponse

//------------------------------------------------------------------------------
/*/{Protheus.doc} canChangeSalesOrder
    Avalia se o pedido de venda pode ser alterado.
    @type       function
    @version    12.1.33
    @author     Lucas Panão / Squad CRM & Faturamento
    @since      23/09/2021
    @param      cOrderId, character, Número do Pedido de Venda
    @return     logical , Caso verdadeiro o pedido de venda pode ser alterado.
/*/
//------------------------------------------------------------------------------
static function canChangeSalesOrder(cOrderId as Character) as Logical
    Local aAreaSC5      as Array
	Local cFilialSC6    := FwxFilial('SC6')
	Local lReturn       := .T.
    Local cAltPed       := SuperGetMV("MV_ALTPED",,"N")

    If cAltPed == "N"
        aAreaSC5 := SC5->(GetArea())
        dbSelectArea("SC6")
        SC6->(dbSetOrder(1)) // C6_FILIAL, C6_NUM, C6_ITEM, C6_PRODUTO
        If SC6->(DbSeek(cFilialSC6 + cOrderId ))
            While SC6->C6_FILIAL == cFilialSC6  .AND. SC6->C6_NUM == cOrderId
                If SC6->C6_GRADE <> "S" .And. isSalesOrderClosed(SC6->C6_TES, SC6->C6_QTDENT, SC6->C6_QTDVEN, SC6->C6_NOTA)
                    lReturn := .F.
                    EXIT
                EndIf
                SC6->(dbSkip())
            EndDo
        EndIf
        SC6->(dbCloseArea())       
        RestArea(aAreaSC5)
        aSize(aAreaSC5, 0)
    Else
        lReturn := .T.
    Endif
Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} isSalesOrderClosed
    Avalia se o pedido de venda foi faturado por completo
    @type       function
    @version    12.1.33
    @author     Danilo Salve / Squad CRM & Faturamento
    @since      23/09/2021
    @param      cTes    , character, Tipo de Saida do item do pedido de venda
    @param      nQtdEnt , numeric, Quantidade já entregue do item
    @param      nQtdVen , numeric, Quantidade vendida do item
    @param      cNota   , character, Número na nota fiscal do item
    @return     logical, Caso verdadeiro o pedido foi faturado.
/*/
//------------------------------------------------------------------------------
static function isSalesOrderClosed(cTes as Character, nQtdEnt as Numeric, nQtdVen as Numeric, cNota as Character) as Logical
    Local aArea  := GetArea()
    Local lReturn   := .F.

    dbSelectArea("SF4")
    SF4->(dbSetOrder(1)) // F4_FILIAL, F4_CODIGO
	SF4->(dbSeek(FwXFilial("SF4") + cTes))	
    
    If ( nQtdEnt >= nQtdVen .And. SF4->F4_QTDZERO <> "1" ) .Or.;
        (nQtdEnt == nQtdVen .AND. SF4->F4_QTDZERO == "1" .AND. !Empty(cNota))
        lReturn := .T.
    EndIf

    SF4->(dbCloseArea())

    restArea(aArea)
    aSize(aArea, 0)
Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} headerBuilderSC5
    Monta o cabeçalho do Pedido de venda
    Observação: O Pedido de venda na tabela SC5 deve ser previamente posicionado
    @type       function
    @version    12.1.33
    @author     Lucas Panão / Squad CRM & Faturamento
    @since      23/09/2021
    @param      aHeader, array, Lista de campos do cabeçalho (Deve ser passado por referencia)
/*/
//------------------------------------------------------------------------------
Static Function headerBuilderSC5(aHeader as array)	
    aadd(aHeader, {"C5_TIPO"    , SC5->C5_TIPO   ,  Nil})
    aadd(aHeader, {"C5_CLIENTE" , SC5->C5_CLIENTE,  Nil})
    aadd(aHeader, {"C5_LOJACLI" , SC5->C5_LOJACLI,  Nil})
    aadd(aHeader, {"C5_CLIENT"  , SC5->C5_CLIENT ,  Nil})
    aadd(aHeader, {"C5_LOJAENT" , SC5->C5_LOJAENT,  Nil})
    aadd(aHeader, {"C5_TIPOCLI" , SC5->C5_TIPOCLI,  Nil})
    aadd(aHeader, {"C5_CONDPAG" , SC5->C5_CONDPAG,  Nil})
    aadd(aHeader, {"C5_DESC1"   , SC5->C5_DESC1  ,  Nil})
    aadd(aHeader, {"C5_DESC2"   , SC5->C5_DESC2  ,  Nil})
    aadd(aHeader, {"C5_DESC3"   , SC5->C5_DESC3  ,  Nil})
    aadd(aHeader, {"C5_DESC4"   , SC5->C5_DESC4  ,  Nil})
    aadd(aHeader, {"C5_MOEDA"   , SC5->C5_MOEDA  ,  Nil})
    aadd(aHeader, {"C5_FRETE"   , SC5->C5_FRETE  ,  Nil})
    aadd(aHeader, {"C5_SEGURO"  , SC5->C5_SEGURO ,  Nil})
    aadd(aHeader, {"C5_DESPESA" , SC5->C5_DESPESA,  Nil})

Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} lineBuilderSC6
    Monta os Itens do Pedido de venda
    @type       function
    @version    12.1.33
    @author     Lucas Panão / Squad CRM & Faturamento
    @since      23/09/2021
    @param      cOrderId, character, Número do Pedido de venda
    @param      aItems, array, Array de itens do pedido de venda (Deve ser passando por referencia)
/*/
//------------------------------------------------------------------------------
Static Function lineBuilderSC6(cOrderId as character, aItems as Array)
	Local aItem         := {} as array
	Local cFilialSC6    := FwxFilial('SC6') as character
	dbSelectArea("SC6")
	SC6->(dbSetOrder(1)) // C6_FILIAL, C6_NUM, C6_ITEM, C6_PRODUTO
	If SC6->(DbSeek(cFilialSC6 + cOrderId ))
		While SC6->C6_FILIAL == cFilialSC6  .AND. SC6->C6_NUM == cOrderId
			aItem := {}
			aadd(aItem, {"C6_ITEM"      , SC6->C6_ITEM      ,   Nil})
			aadd(aItem, {"C6_PRODUTO"   , SC6->C6_PRODUTO   ,   Nil})
			aadd(aItem, {"C6_QTDVEN"    , SC6->C6_QTDVEN    ,   Nil})
			aadd(aItem, {"C6_PRCVEN"    , SC6->C6_PRCVEN    ,   Nil})
			aadd(aItem, {"C6_VALDESC"   , SC6->C6_VALDESC   ,   Nil})
			aadd(aItem, {"C6_TES"       , SC6->C6_TES       ,   Nil})
			aadd(aItems, aItem)
            SC6->(DbSkip())
		EndDo
	EndIf
	SC6->(dbCloseArea())
Return Nil
