#include 'tlpp-core.th'
#include 'protheus.ch'
#include 'dashboard.userprofile.service.ch'

namespace dashboard.userProfile

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileService
	disponibiliza um serviço para validar a requisicao com as regras de negocios
	e visualizar, incluir e alterar e um perfil de usuário
	@type		class
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		22/12/2021
/*/
//------------------------------------------------------------------------------
class userProfileService
	private data _userProfileData     as object

    public method new()               as object
	public method validData()         as logical
	public method getUserProfile()    as character
	public method inputUserProfile()  as logical
	public method upsertUserProfile() as logical
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileService::new() as Object
	Disponibiliza uma nova intancia do serviço Perfil de Usuários.
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		22/12/2021
	@return		object, cria uma nova instancia da classe userProfileService
/*/
//------------------------------------------------------------------------------
Method new() as Object class userProfileService
	::_userProfileData := userProfileData():new()
Return Self

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileService::getUserProfile() as Object
	busca e retorna o Perfil de Usuários conforme chave informada nos parametros
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		27/12/2021
	@return		character, conteudo do perfil de usuario
/*/
//------------------------------------------------------------------------------
Method getUserProfile(	company     as character, ;
						branch      as character, ;
						id          as character, ;
						program     as character, ;
						task        as character, ;
						type        as character ) as character class userProfileService
	local userProfile    as Character 
	userProfile :=  ::_userProfileData:get(id, company, branch, program, task, type)
Return userProfile

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileService::inputUserProfile() as Logical
	efetua a inclusão de um perfil de usuário.
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		22/12/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
method inputUserProfile(	company     as character, ;
							branch      as character, ;
							id          as character, ;
							program     as character, ;
							task        as character, ;
							type        as character, ;
							userProfile as character, ;
							message     as character) as logical class userProfileService
    local lWrite as Logical
    
	lWrite := ::validData(id, userProfile, @message)
    if !lWrite
		return lWrite
	endif
	
	lWrite := ::_userProfileData:input(	company    , ;
										branch     , ;
										id         , ;
										program    , ;
										task       , ;
										type       , ;
										userProfile )
return lWrite

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileService::upsertUserProfile() as Logical
	Efetua a inclusão de um perfil de usuário.
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		22/12/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
method upsertUserProfile(	company     as character, ;
							branch      as character, ;
							id          as character, ;
							program     as character, ;
							task        as character, ;
							type        as character, ;
							userProfile as character, ;
							message     as character) as Logical class userProfileService
	local lWrite        as Logical
	local configProfile as character

	lWrite := ::validData(id, userProfile, @message)
    if !lWrite
		return lWrite
	endif

	configProfile :=  ::_userProfileData:get(	id      , ;
												company , ;
												branch  , ;
												program , ; 
												task    , ;
												type )

	if Empty(configProfile)
		lWrite := ::_userProfileData:input(	company     , ;
                							branch      , ;
                							id          , ;
                							program     , ;
                							task        , ;
                							type        , ;
                							userProfile )	
	else
		lWrite := ::_userProfileData:upsert(company     , ;
                							branch      , ;
                							id          , ;
                							program     , ;
                							task        , ;
                							type        , ;
                							userProfile )
	endif
return lWrite

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileService::validData() as Logical
	validacoes de dados anteriores a inclusao/alteracao de um perfil de usuário.
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		22/12/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
method validData(id, userProfile, message) as logical class userProfileService
	local isValid as logical
	isValid := .T.

	if Empty(id)
        message += EncodeUtf8(STR0001) + CRLF	//#"O id do perfil de usuário não foi preenchido na requisição."
		isValid := .F.
    endif

    if Empty(userProfile)
        message += EncodeUtf8(STR0002) + CRLF	//#"O perfil de usuário não foi preenchido na requisição."
		isValid := .F.
    endif
return isValid
