#include "tlpp-core.th"
#include "protheus.ch"
#include 'dashboard.userprofile.controller.ch'

namespace dashboard.userProfile
using namespace tgv.util

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController API para registro de perfis de usuário 
    no Dashboard de faturamento
    @type       class
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      22/12/2021
/*/
//------------------------------------------------------------------------------
class userProfileController
	private data oService                as object
	private data jPath                   as object
	private data jBody                   as object
	private data jResponse               as object
	private data id                      as character
	private data company                 as character
	private data branch                  as character
	private data program                 as character
	private data task                    as character
	private data type                    as character
	private data userProfile             as character
	private data obligatoryData          as array
	private data httpMessage             as character
	private data httpCode                as numeric
	private data isImplicitCompanyBranch as logical

	public method new () as object

	@Get("/api/dashboard/userProfile/:id")
	public method getUserProfile()    as logical
	@Put("/api/dashboard/userProfile/:id")
	public method putUserProfile()    as logical
	@Post("/api/dashboard/userProfile/")
	public method postUserProfile()   as logical

	private method request()
	private method get()
	private method upsert()
	private method init()
	private method getObligatoryData() as array
	private method nullTreatment()
	private method requestValidation() as logical
	private method inputDataValidation()
	private method responseHttp()
	private method reset()
endClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::new() as object
    Obtem uma nova instancia da classe userProfileController
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      22/12/2021
    @return object, nova instancia da classe userProfileController
/*/
//------------------------------------------------------------------------------
method new() as object class userProfileController
	::oService  := userProfileService():New()
return self

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::getUserProfile() as logical
    obtem o perfil de usuario conforme informado no pathparam e querystring
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      22/12/2021
    @return     logical, retorna sempre verdadeiro
/*/
//------------------------------------------------------------------------------
method getUserProfile() as logical class userProfileController
	::request("get")
return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::putUserProfile() as logical
    inclui/altera um perfil de usuario conforme informado no pathparam e no body
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      22/12/2021
    @return     logical, retorna sempre verdadeiro
/*/
//------------------------------------------------------------------------------
method putUserProfile() as logical class userProfileController
	::request("put")
return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::postUserProfile() as logical
    inclui um perfil de usuario conforme informado no pathparam e no body
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      22/12/2021
    @return     logical, retorna sempre verdadeiro
/*/
//------------------------------------------------------------------------------
method postUserProfile() as logical class userProfileController
	::request("post")
return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::request() as nil
    Metodo que gerencia os metodos das requisições do perfil de usuario
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      27/12/2021
    @return     nil, não tem retorno
/*/
//------------------------------------------------------------------------------
method request(requestMethod as character) class userProfileController
	::init(requestMethod)

	if ::requestValidation()
		Do Case
		Case requestMethod == "get"
			::get()
		Case requestMethod == "put"
			::upsert(.F.)
		Case requestMethod == "post"
			::upsert(.T.)
		End Case
	endIf

	if ::httpCode < 400
		::responseHttp(::httpMessage, ::httpCode)
	else
		SetRestFault(::httpCode, ::httpMessage)
	endIf

	::reset()
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::init() as Logical
	inicializacao dos atributos da classe para processamento da requisicao http
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		24/12/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
method init(requestMethod as character) class userProfileController
	::jResponse      := JsonObject():New()
	::jBody          := JsonObject():New()
	::jPath          := JsonObject():New()
	::obligatoryData := ::getObligatoryData(requestMethod)
	::jBody:fromJson(oRest:GetBodyRequest())

	oRest:setKeyHeaderResponse('Content-Type','application/json; charset=utf-8')

	if requestMethod $ "put|get"
		::id := getPathParams('id')
	elseIf requestMethod == "post"
		::id := ::nullTreatment(::jBody:GetJsonText("id"), "id")
	endIf

	if requestMethod $ "post|put"
		::isImplicitCompanyBranch     := switchStringToLogical(::nullTreatment(::jBody:GetJsonText("isImplicitCompanyBranch")     , "isImplicitCompanyBranch"))
		::company                     := ::nullTreatment(::jBody:GetJsonText("company")     , "company")
		::branch                      := ::nullTreatment(::jBody:GetJsonText("branch")      , "branch")
		::program                     := ::nullTreatment(::jBody:GetJsonText("program")     , "program")
		::task                        := ::nullTreatment(::jBody:GetJsonText("task")        , "task")
		::type                        := ::nullTreatment(::jBody:GetJsonText("type")        , "type")
		::userProfile                 := ::nullTreatment(::jBody:GetJsonText("userProfile") , "userProfile")
	elseIf requestMethod == "get"
        ::isImplicitCompanyBranch     := switchStringToLogical(::nullTreatment(oRest:getQueryRequest():GetJsonText("isImplicitCompanyBranch") , "isImplicitCompanyBranch"))
        ::company                     := ::nullTreatment(oRest:getQueryRequest():GetJsonText("company") , "company")
		::branch                      := ::nullTreatment(oRest:getQueryRequest():GetJsonText("branch")  , "branch")
		::program                     := ::nullTreatment(oRest:getQueryRequest():GetJsonText("program") , "program")
		::task                        := ::nullTreatment(oRest:getQueryRequest():GetJsonText("task")    , "task")
		::type                        := ::nullTreatment(oRest:getQueryRequest():GetJsonText("type")    , "type")
	endIf

return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::getObligatoryData() as Array
	prepara um array com os atributos necessarios nas requisicoes
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		24/12/2021
	@return		array, array com a lista dos dados e uma flag para validacao
/*/
//------------------------------------------------------------------------------
method getObligatoryData(requestMethod as character) as array class userProfileController
	local structureData as array

	structureData := {}

	if requestMethod == "post"
		AAdd(structureData, {"id"     , .F.})
	endIf
	AAdd(structureData, {"program"     , .F.})
	AAdd(structureData, {"task"        , .F.})
	AAdd(structureData, {"type"        , .F.})
	if (requestMethod $ "post|put")
		AAdd(structureData, {"userProfile" , .F.})
	endIf
return structureData

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::nullTreatment() as character
	método para tratar valor nulos obtidos no json do body.
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		22/12/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
method nullTreatment(value, attribute) class userProfileController
	if value == "null"
		if TYPE("self:" + attribute) == "C"
			value := ""
		else
			value := .F.
		endif
	else
		::inputDataValidation(attribute)
	endif
return value

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::inputDataValidation()
	avalia se o atributo enviado eh necessario no body ou queryparam e marca 
    como enviado se eh obrigatorio
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		24/12/2021
	@return		nil, sem retorno
/*/
//------------------------------------------------------------------------------
method inputDataValidation(attribute as character) class userProfileController
	local attributePosition as numeric

	// Indicar que o atributo veio no json
	attributePosition := AScan(::obligatoryData, { |attributeOfList| attributeOfList[1] == attribute })
	if !Empty(attributePosition)
		::obligatoryData[attributePosition,2] := .T.
	endIf
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::requestValidation() as logical
	validacao das questoes estruturais da requisicao, como envio dos atributos
    no body ou queryparam da requisicao, por exemplo.
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		24/12/2021
	@return		nil, sem retorno
/*/
//------------------------------------------------------------------------------
method requestValidation() as logical class userProfileController
	local attribute     as numeric
	local qttAttributes as numeric
	local isValid       as logical

	qttAttributes := Len(::obligatoryData)

	For attribute := 1 To qttAttributes
		if ::obligatoryData[attribute, 2] == .F.
			::httpMessage += iif(Empty(::httpMessage), EncodeUtf8(STR0001) + CRLF, "") + ::obligatoryData[attribute,1] + CRLF   //#"Dados necessários e não enviados na requisição: "
		endIf
	Next qttAttributes

	if Empty(::httpMessage)
		isValid := .T.
	else
		::httpCode := 400
		isValid := .F.
	endif
return isValid

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::get() as nil
    obter um perfil de usuário conforme a chave enviada no pathparam e 
    queryparam
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      23/12/2021
    @return     nil, não tem retorno
/*/
//------------------------------------------------------------------------------
method get() class userProfileController
	local srcUserProfile as character

	if (::isImplicitCompanyBranch)
		::company := cEmpAnt
		::branch  := cFilAnt
	EndIf

	srcUserProfile := ::oService:getUserProfile(::company, ;
		::branch, ;
		::id, ;
		::program, ;
		::task, ;
		::type, ;
		::userProfile )
	if empty(srcUserProfile)
		::httpMessage := EncodeUtf8(STR0002)    // #"Perfil de usuário não encontrado."
		::httpCode    := 404
	else
		::httpMessage := srcUserProfile
		::httpcode    := 200
	endif
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::upsert() as nil
    realizar o uspsert do perfil de usuario
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      23/12/2021
    @return     nil, não tem retorno
/*/
//------------------------------------------------------------------------------
method upsert(isPost as logical) class userProfileController
	local lWrite      as logical

	lWrite      := .F.

	if (::isImplicitCompanyBranch)
		::company := cEmpAnt
		::branch  := cFilAnt
	EndIf

	if isPost
		lWrite := ::oService:inputUserProfile(::company, ;
			::branch, ;
			::id, ;
			::program, ;
			::task, ;
			::type, ;
			::userProfile, ;
			@::httpMessage)
	else
		lWrite := ::oService:upsertUserProfile(::company, ;
			::branch, ;
			::id, ;
			::program, ;
			::task, ;
			::type, ;
			::userProfile, ;
			@::httpMessage)
	endIf

	if lWrite
		::jBody["id"] := ::id
		if (::isImplicitCompanyBranch)
			::jBody["company"] := cEmpAnt
			::jBody["branch"]  := cFilAnt
		EndIf
		::httpMessage := ::jBody:ToJson()
		::httpCode    := IIf(isPost, 201, 200)
	else
		::httpCode    := 400
		if Empty(::httpMessage)
			::httpMessage := EncodeUtf8(STR0003) + IIf(isPost, EncodeUtf8(STR0004), EncodeUtf8(STR0005)) + EncodeUtf8(STR0006)  //#"Falha na tentativa de " #"inclusão" #"alteração" #" do perfil de usuário."
		endIf
	endIf
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::responseHttp() as nil
    preparar a resposta http do método executado
    @type       method
    @version    12.1.33
    @author     Rafael Mota Previdi / Squad CRM & Faturamento
    @since      23/12/2021
    @return     nil, não tem retorno
/*/
//------------------------------------------------------------------------------
method responseHttp(message as character, code as numeric) class userProfileController
	::jResponse['items']       := {message}
	::jResponse['status-code'] := code

	AnswerRest( ::jResponse, .F. )
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} userProfileController::reset() as Logical
	reset dos atributos da classe
	@type		method
	@version	12.1.33
	@author		Rafael Mota Previdi / Squad CRM & Faturamento
	@since		22/12/2021
	@return		logical, Verdadeiro
/*/
//------------------------------------------------------------------------------
method reset() class userProfileController
	::isImplicitCompanyBranch := .F.
	::id                      := ""
	::program                 := ""
	::task                    := ""
	::type                    := ""
	::company                 := ""
	::branch                  := ""
	::userProfile             := ""
	::httpMessage             := ""
	::httpCode                := 0

	FreeObj(::jResponse)
	FreeObj(::jPath)
	FreeObj(::jBody)
	FreeObj(::obligatoryData)
return nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} switchStringToLogical() as Logical
	modifica uma string para valor lógico. 
	@type		function
	@version	12.1.33
	@author		Lucas Panão /  Squad CRM & Faturamento
	@since		06/01/2022
	@return		logical
/*/
//------------------------------------------------------------------------------

static function switchStringToLogical(xParam) as logical 
    return IIF( VALTYPE(xParam) == 'C' .and. !Empty(xParam) .and. xParam == "true", .T. , .F. )

