#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.per

#Define OutPutFieldsPER "totvs.protheus.backoffice.outputfields.per" 

/*/{Protheus.doc} PEROutputFields
	Realiza la creación de la estructura de campos para el paí­s Perú.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll

    public DATA lSerie2 as logical
	
	public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
    public Method FacturacionAnticipo()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method TPDOC()
	public Method SERIE2()
	public Method NUMORC()
	public Method TIPONF()
	public Method CODDOC()
	public Method MODCONS()
	public Method TIPREF()
	public Method NFREF()
	public Method SERREF()
	public Method MOTIVO()
	public Method SERIORI()
	public Method TPRENTA()

	public Method VALIDS()
	public Method WhenSeriePer()
	public Method ValidacionCamposAll()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "PER", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TPDOC", "F2_TABELA", "F2_SERIE2", "F2_NUMORC", "F2_TIPONF", "F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_TPDOC", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", ;
						"F2_REFTAXA", "F2_SERIE2", "F2_NUMORC", "F2_TIPONF", "F2_CODDOC", "F2_MODCONS", }

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:SERIE2()
		self:NUMORC()
		self:TIPONF()
		self:CODDOC()
		self:MODCONS()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TPDOC", "F2_TABELA", "F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		
		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_TPDOC", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:CODDOC()
		self:MODCONS()
	EndIf

Return

/*/{Protheus.doc} FacturacionAnticipo
	Agrega campos para el documento.
		Documento: Facturacion Anticipo
		Numero documento: 19
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionAnticipo(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TPDOC", "F2_TABELA", "F2_SERIE2", "F2_TIPONF", "F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_TPDOC", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", ;
						"F2_REFTAXA", "F2_SERIE2", "F2_TIPONF", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:SERIE2()
		self:TIPONF()
		self:CODDOC()
		self:MODCONS()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TPDOC", "F2_TIPOREM", "F2_LIQPROD", "F2_SERIE2", "F2_NUMORC", "F2_TIPONF", "F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_TPDOC", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", "F2_DIACTB", ;
						"F2_REFMOED", "F2_REFTAXA", "F2_SERIE2", "F2_NUMORC", "F2_TIPONF", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:SERIE2()
		self:NUMORC()
		self:TIPONF()
		self:CODDOC()
		self:MODCONS()
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", ;
						"F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODDOC()
		self:MODCONS()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TPDOC", "F2_SERIE2", "F2_TIPREF", "F2_NFREF", "F2_SERREF", "F2_MOTIVO", "F2_CODDOC", "F2_MODCONS" }

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_TPDOC", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", ;
						"F2_SERIE2", "F2_TIPREF", "F2_NFREF", "F2_SERREF", "F2_MOTIVO", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:SERIE2()
		self:CODDOC()
		self:MODCONS()
		self:TIPREF()
		self:NFREF()
		self:SERREF()
		self:MOTIVO()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_SERIE2", "F2_SERORI", "F2_TPDOC", "F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE2", "F2_SERORI", "F2_SERIE", "F2_TPDOC", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", ;
						"F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:SERIE2()
		self:CODDOC()
		self:MODCONS()
		self:SERIORI()
		self:WhenSeriePer()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_SERIE2", "F2_SERORI", "F2_TPDOC", "F2_TPRENTA", "F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE2", "F2_SERORI", "F2_SERIE", "F2_TPDOC", "F2_TPRENTA", "F2_DOC", ;
						"F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:SERIE2()
		self:CODDOC()
		self:MODCONS()
		self:SERIORI()
		self:TPRENTA()
		self:WhenSeriePer()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TPDOC", "F2_TPRENTA", "F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_TPDOC", "F2_TPRENTA", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TPDOC()
		self:CODDOC()
		self:MODCONS()
		self:TPRENTA()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", ;
						"F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODDOC()
		self:MODCONS()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODDOC", "F2_MODCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODDOC", "F2_MODCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODDOC()
		self:MODCONS()
	EndIf
    
Return

/*/{Protheus.doc} TPDOC
	Agrega propiedades para los campos F2_TPDOC.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPDOC(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TPDOC", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_TPDOC_PER()")
	EndIf

Return

/*/{Protheus.doc} SERIE2
	Agrega propiedades para los campos F2_SERIE2.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERIE2(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_SERIE2", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_SERIE2_PER()")
	EndIf

Return

/*/{Protheus.doc} NUMORC
	Agrega propiedades para los campos F2_NUMORC.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NUMORC(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_NUMORC", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_NUMORC_PER()")
	EndIf

Return

/*/{Protheus.doc} TIPONF
	Agrega propiedades para los campos F2_TIPONF.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPONF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TIPONF", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_TIPONF_PER()")
	EndIf

Return

/*/{Protheus.doc} CODDOC
	Agrega propiedades para los campos F2_CODDOC.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CODDOC(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_CODDOC", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_CODDOC_PER()")
	EndIf

Return

/*/{Protheus.doc} MODCONS
	Agrega propiedades para los campos F2_MODCONS.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method MODCONS(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_MODCONS", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_MODCONS_PER()")
	EndIf

Return

/*/{Protheus.doc} TIPREF
	Agrega propiedades para los campos F2_TIPREF.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPREF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TIPREF", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_TIPREF_PER()")
	EndIf

Return

/*/{Protheus.doc} NFREF
	Agrega propiedades para los campos F2_NFREF.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NFREF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_NFREF", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_NFREF_PER()")
	EndIf

Return

/*/{Protheus.doc} SERREF
	Agrega propiedades para los campos F2_SERREF.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERREF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_SERREF", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_SERREF_PER()")
	EndIf

Return

/*/{Protheus.doc} MOTIVO
	Agrega propiedades para los campos F2_MOTIVO.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method MOTIVO(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_MOTIVO", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_MOTIVO_PER()")
	EndIf

Return

/*/{Protheus.doc} SERIORI
	Agrega propiedades para los campos F2_SERORI.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERIORI(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		If self:oModel:HasField("F2_SERORI")
			self:SetModProperty("F2_SERORI", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_SERORI_PER()")
			self:SetModProperty("F2_SERORI", MODEL_FIELD_WHEN, ".F.")
		EndIf
	EndIf

Return

/*/{Protheus.doc} TPRENTA
	Agrega propiedades para los campos F2_TPRENTA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPRENTA(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TPRENTA", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_TPRENTA_PER()")
	EndIf
Return

/*/{Protheus.doc} ValidacionCamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ValidacionCamposAll(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_SERIE", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_SERIE_PER('" + StrZero(self:nNumDoc,2) + "')")

		self:SetModProperty("F2_DOC", MODEL_FIELD_VALID, OutPutFieldsPER + ".VF2_DOC_PER('" + StrZero(self:nNumDoc,2) + "', " + self:lToS(self:lAuto) + ")")
	EndIf

Return

/*/{Protheus.doc} VF2_SERIE_PER
	Función encargada de realizar las validaciones para el campo F2_SERIE para Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
	/*/
Function VF2_SERIE_PER(cNumDoc as character)
Local lValid := .T.	As logical

Default cNumDoc := ""

	lValid := VF2_SERIE(cNumDoc)
	
	lValid := lValid .and. LxExSer2()

Return lValid

/*/{Protheus.doc} VF2_DOC_PER
	Función encargada de realizar las validaciones para el campo F2_DOC para Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DOC_PER(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.

	lValid := VF2_DOC(cNumDoc, lAuto)

	lValid := lValid .and. ExistChav("SF2",M->F2_DOC+M->F2_SERIE) .and. CtrFolios(xFilial("SF2"),M->F2_SERIE,M->F2_ESPECIE,M->F2_DOC) .And. LXEXSER2()

Return lValid

/*/{Protheus.doc} VF2_TPDOC
	Función encargada de realizar las validaciones para el campo F2_TPDOC del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPDOC_PER()
Local lValid	As logical

	lValid := ExistCpo('CCL',M->F2_TPDOC,2)

Return lValid

/*/{Protheus.doc} VF2_SERIE2_PER
	Función encargada de realizar las validaciones para el campo F2_SERIE2 del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERIE2_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_NUMORC_PER
	Función encargada de realizar las validaciones para el campo F2_NUMORC del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NUMORC_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TIPONF_PER
	Función encargada de realizar las validaciones para el campo F2_TIPONF del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPONF_PER()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S051", M->F2_TIPONF,1,4)

Return lValid

/*/{Protheus.doc} VF2_CODDOC_PER
	Función encargada de realizar las validaciones para el campo F2_CODDOC del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CODDOC_PER()
Local lValid	As logical

	lValid := Vazio() .OR. ValidF3I("S054", M->F2_CODDOC, 1, 3)

Return lValid

/*/{Protheus.doc} VF2_MODCONS_PER
	Función encargada de realizar las validaciones para el campo F2_MODCONS del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MODCONS_PER()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S059", M->F2_MODCONS,1,3)

Return lValid

/*/{Protheus.doc} VF2_TIPREF_PER
	Función encargada de realizar las validaciones para el campo F2_TIPREF  del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPREF_PER()
Local lValid	As logical

	lValid := Vazio() .OR. ValidF3I("S010", M->F2_TIPREF,1,2)

Return lValid

/*/{Protheus.doc} VF2_NFREF_PER
	Función encargada de realizar las validaciones para el campo F2_NFREF del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NFREF_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_SERREF_PER
	Función encargada de realizar las validaciones para el campo F2_SERREF del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERREF_PER()
Local lValid	As logical

	lValid := IIF(!EMPTY(M->F2_SERREF),MT485VLDNF(M->F2_NFREF,M->F2_SERREF,M->F2_CLIENTE,M->F2_LOJA),.T.)

Return lValid

/*/{Protheus.doc} VF2_MOTIVO_PER
	Función encargada de realizar las validaciones para el campo F2_MOTIVO del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MOTIVO_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_SERORI_PER
	Función encargada de realizar las validaciones para el campo F2_SERORI del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERORI_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TPRENTA_PER
	Función encargada de realizar las validaciones para el campo F2_TPRENTA del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPRENTA_PER()
Local lValid := .T. 	As logical

	If FindFunction("ValTpDocPer")
		lValid := ValTpDocPer()
	EndIf

Return lValid

/*/{Protheus.doc} WhenSeriePer
	Agrega propiedades para los campos F2_SERIE.
	@type  Method
	@author raul.medina
	@since 
	@param
	@return 
	/*/
Method WhenSeriePer() Class OutPutFields
Local cWhen     := ""   As character

    If self:lSerie2
        cWhen := ".F."
        self:SetModProperty("F2_SERIE", MODEL_FIELD_WHEN, cWhen)
    EndIf

Return
