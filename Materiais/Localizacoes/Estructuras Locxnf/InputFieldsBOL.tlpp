#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'
#Include 'InputFieldsBOL.ch'

namespace totvs.protheus.backoffice.inputfields.bol

#Define	InputFieldsBOL "totvs.protheus.backoffice.inputfields.bol"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país Bolivia.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()

	public Method CamposPassage()
	public Method TIPCOMP()
	public Method CFDUSO()
	public Method FLFTEX()
	public Method RECIBO()
	public Method CamposAll()
	public Method Serie()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields
    _Super:New( "BOL", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Adición de campos a la view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)

		 aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR",  "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
		 				"F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

   		self:AlterOrder(aOrdFields)
	else
		self:CamposAll()
		self:Control()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
		self:FLFTEX()
		self:RECIBO()
	EndIf

Return

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    
	If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
		self:FLFTEX()
		self:RECIBO()
	EndIf

Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)

	Else
		self:CamposAll()
		self:Control()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
		self:FLFTEX()
		self:RECIBO()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", ;
						"F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
		self:FLFTEX()
		self:RECIBO()
	EndIf
    	
Return 

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf

Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_GERAPED", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR",  "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control( , .F.)
		self:CamposPassage( , .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_GERAPED", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_RECIBO"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_RECIBO"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
		self:RECIBO()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", ;
						"F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control( , .F.)
		self:CamposPassage( , .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NUMAUT", "F1_CODCTR", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", ;
						"F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS", "F1_FLFTEX", "F1_RECIBO"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
		self:FLFTEX()
		self:RECIBO()
	EndIf

Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_GERAPED", "F1_APRVDEV", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CamposPassage(lView)
		self:Serie(lView, "01")
		
		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", ;
						"F1_GERAPED", "F1_APRVDEV", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:CamposPassage( , .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CamposPassage(lView)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:CamposPassage( , .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_TIPCOMP", "F1_DTDIGIT", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CamposPassage(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA", "F1_TIPCOMP", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TIPNOTA", "F1_MODCONS", "F1_IDRGS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:CamposPassage()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return

/*/{Protheus.doc} Serie
	Agrega propiedades para el campo F1_SERIE
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Serie(lView As logical, cSF3 as Character) Class InputFields

Default lView	:= .F.
Default cSF3 := ""

    If lView
		If !Empty(cSF3)
			self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,cSF3)
		EndIf
    EndIf

Return

/*/{Protheus.doc} CamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CamposAll(lView As logical) Class InputFields
Local lCliente		As  logical

Default lView	:= .F.

    If !lView
		If AllTrim(str(self:nNumDoc)) $ "4|5|12|62|51|53|63"
        	lCliente := .T.
    	EndIf
		self:SetModProperty("F1_LOJA", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_LOJA_BOL(" + self:lToS(!lCliente) + ", '" + StrZero(self:nNumDoc,2) + "')")

		self:SetModProperty("F1_SERIE", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_SERIE_BOL('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} CamposPassage
	Agrega propiedades para los campos correspondientes a passage
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		lWhen - logico - Indica si el campo(s) puede ser editado.
	@return 
	/*/
Method CamposPassage(lView As logical, lWhen As logical) Class InputFields
Local lPassag	:= .F. As Logical
Local aFields   := {}   As Array

Default lView	:= .F.
Default lWhen	:= .T.

	lPassag := GetNewPar("MV_PASSBOL",.F.)

	If lPassag
		If lView
			aFields := {"F1_COMPANH", "F1_LOJCOMP", "F1_PASSAGE", "F1_DTPASSA"}
			self:AddFieldsAd(aFields)
		Else
			self:SetModProperty("F1_COMPANH", MODEL_FIELD_WHEN, InputFieldsBOL + ".WF1_COMPANH_BOL(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F1_LOJCOMP", MODEL_FIELD_WHEN, InputFieldsBOL + ".WF1_LOJCOMP_BOL(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F1_PASSAGE", MODEL_FIELD_WHEN, InputFieldsBOL + ".WF1_PASSAGE_BOL(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F1_DTPASSA", MODEL_FIELD_WHEN, InputFieldsBOL + ".WF1_DTPASSA_BOL(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F1_COMPANH", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_COMPANH_BOL()")
			self:SetModProperty("F1_LOJCOMP", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_LOJCOMP_BOL()")
			self:SetModProperty("F1_PASSAGE", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_PASSAGE_BOL()")
			self:SetModProperty("F1_DTPASSA", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_DTPASSA_BOL()")
		EndIf
	EndIf

Return

/*/{Protheus.doc} TIPCOMP
	Agrega propiedades para el campo F1_TIPCOMP
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		lWhen - logico - Indica si el campo(s) puede ser editado.
	@return 
	/*/
Method TIPCOMP(lView As logical, lWhen As logical) Class InputFields

Default lView	:= .F.
Default lWhen	:= .T.

	If !lView
		self:SetModProperty("F1_TIPCOMP", MODEL_FIELD_WHEN, InputFieldsBOL + ".WF1_TIPCOMP_BOL(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F1_TIPCOMP", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_TIPCOMP_BOL()")
	EndIf

Return

/*/{Protheus.doc} CFDUSO
	Agrega propiedades para los campos correspondientes al uso de CFD
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDUSO(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_TIPNOTA", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_TIPNOTA_BOL()")
		self:SetModProperty("F1_TIPNOTA", MODEL_FIELD_INIT, "") 
		self:SetModProperty("F1_MODCONS", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_MODCONS_BOL()")
		self:SetModProperty("F1_IDRGS", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_IDRGS_BOL()")
	EndIf
	
Return

/*/{Protheus.doc} FLFTEX
	Agrega propiedades para el campo F1_FLFTEX
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FLFTEX(lView As logical) Class InputFields
Local aCombo    := {} As array

Default lView	:= .F.

	If !lView
		aCombo := {"",STR0001} //"6=Autorizado"
		self:SetModProperty("F1_FLFTEX", MODEL_FIELD_VALUES, aCombo)
		self:SetModProperty("F1_FLFTEX", MODEL_FIELD_INIT, "") 
		self:SetModProperty("F1_FLFTEX", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_FLFTEX_BOL()")
	EndIf

Return

/*/{Protheus.doc} FLFTEX
	Agrega propiedades para el campo F1_FLFTEX
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RECIBO(lView As logical) Class InputFields
Local aValues    := {} As array

Default lView	:= .F.

	If !lView
		If self:oModel:HasField("F1_RECIBO")
			aValues := self:oModel:GetProperty("F1_RECIBO",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_RECIBO", MODEL_FIELD_VALUES, aValues)
			self:SetModProperty("F1_RECIBO", MODEL_FIELD_INIT, "") 
		EndIf
		self:SetModProperty("F1_RECIBO", MODEL_FIELD_VALID, InputFieldsBOL + ".VF1_RECIBO_BOL()")
	EndIf

Return

/*/{Protheus.doc} VF1_LOJA_BOL
	Función encargada de realizar las validaciones para el campo F1_LOJA del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		lFornece - logico - Indica si las validaciones son realizadas para un documento de proveedor.
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_LOJA_BOL(lFornece As logical, cNumDoc As character)
Local lValid	As logical
Local lCFDUso   As logical

Default lFornece	:= .F.
Default cNumDoc		:= ""

	lCFDUso := IIf(Alltrim(GetMv("MV_CFDUSO", .T., "1"))<>"0",.T.,.F.)
	lValid 	:= VF1_LOJA(lFornece, cNumDoc)
	If lValid .and. lCFDUso
		lValid	:= VldFacE()
	EndIf

Return lValid

/*/{Protheus.doc} VF1_SERIE_BOL
	Función encargada de realizar las validaciones para el campo F1_SERIE del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE_BOL(cNumDoc As character)
Local lValid	As logical
Local lCFDUso   As logical

Default cNumDoc		:= ""

	lCFDUso := IIf(Alltrim(GetMv("MV_CFDUSO", .T., "1"))<>"0",.T.,.F.)
	lValid 	:= VF1_SERIE(cNumDoc)
	If lValid .and. lCFDUso
		lValid	:= VldFacE()
	EndIf

Return lValid

/*/{Protheus.doc} VF1_COMPANH_BOL
	Función encargada de realizar las validaciones para el campo F1_COMPANH del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_COMPANH_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_LOJCOMP_BOL
	Función encargada de realizar las validaciones para el campo F1_LOJCOMP del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_LOJCOMP_BOL()
Local lValid	As logical

	lValid := Iif(!Empty(M->F1_COMPANH),ExistCpo("SA2",M->F1_COMPANH+M->F1_LOJCOMP),.T.)

Return lValid

/*/{Protheus.doc} VF1_PASSAGE_BOL
	Función encargada de realizar las validaciones para el campo F1_PASSAGE del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_PASSAGE_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_DTPASSA_BOL
	Función encargada de realizar las validaciones para el campo F1_DTPASSA del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DTPASSA_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIPCOMP_BOL
	Función encargada de realizar las validaciones para el campo F1_TIPCOMP del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPCOMP_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIPNOTA_BOL
	Función encargada de realizar las validaciones para el campo F1_TIPNOTA del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPNOTA_BOL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S008", M->F1_TIPNOTA,1,2)

Return lValid

/*/{Protheus.doc} VF1_MODCONS_BOL
	Función encargada de realizar las validaciones para el campo F1_MODCONS del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_MODCONS_BOL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S004", M->F1_MODCONS,1,3)

Return lValid

/*/{Protheus.doc} VF1_IDRGS_BOL
	Función encargada de realizar las validaciones para el campo F1_IDRGS del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_IDRGS_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_FLFTEX_BOL
	Función encargada de realizar las validaciones para el campo F1_FLFTEX del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FLFTEX_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_RECIBO_BOL
	Función encargada de realizar las validaciones para el campo F1_RECIBO del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_RECIBO_BOL()
Local lValid	As logical

	lValid := Pertence(" 12")

Return lValid

/*/{Protheus.doc} WF1_COMPANH_BOL
	Función encargada de realizar la función When para el campo F1_COMPANH .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_COMPANH_BOL(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_LOJCOMP_BOL
	Función encargada de realizar la función When para el campo F1_LOJCOMP .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_LOJCOMP_BOL(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet


/*/{Protheus.doc} WF1_PASSAGE_BOL
	Función encargada de realizar la función When para el campo F1_PASSAGE .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_PASSAGE_BOL(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_DTPASSA_BOL
	Función encargada de realizar la función When para el campo F1_DTPASSA .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_DTPASSA_BOL(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_TIPCOMP_BOL
	Función encargada de realizar la función When para el campo F1_TIPCOMP .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_TIPCOMP_BOL(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet
