#include "tlpp-object.th"
#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'
#include 'InputFieldsAll.ch'

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos de entrada.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFieldsAll From Fields

    public DATA cEspecie As character
    public DATA nNumDoc As character
    public DATA l103Class As logical //(lIntegracao .AND. nOpca==4 ) lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
    public DATA l103Visual As logical //!lInclui .AND. !l103Class
    public DATA cPais As character
	public DATA jsonClients As json

    public Method New() Constructor
	public Method AddModel()
    public Method AddFields()
	public Method AddModelProperties()
    public Method AddInputFields()
    public Method FechaDigit()
    public Method DevPedidoVenta()
    public Method ApruebaDevolucion()
    public Method VendedorDevoluciones()
    public Method SucursalOrig()
    public Method DIACTB()
	public Method Control()
	Public Method GetStructure()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto agregando los campos usados por todos los documentos de entrada.
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(cPais As character, lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFieldsAll

Default cPais := ""
Default lViewNoUs := .F.
Default lVirtual := .F.
Default lModel := .F.
Default lInsert := .F.
Default lEdit := .F.
Default lDelete := .F.
Default cEspecie := ""

    //Creación del objeto de acuerdo a la clase Fields
    _Super:New( "SF1", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete)

    self:cEspecie := cEspecie
    self:cPais := cPais
	//Creación de objeto json a partir del arreglo aFields para el uso de hasProperty.
    self:jsonClients := self:CreateJson({"4","5","12","51","53","62","63"})

Return self

/*/{Protheus.doc} AddModel
	Realiza la cración de la estructura de campos documentos de entrada.
	@type  Method
	@author raul.medina
	@since 
	@param
	@return 
	/*/
Method AddModel() Class InputFieldsAll

    self:oModel := FWFormStruct(1, 'SF1', , .F.)

    self:oModel:AddField(AllTrim(FWX3Titulo("A2_NOME")), AllTrim(FWX3Titulo("A2_NOME")),"cNome","C",GetSX3Cache("A2_NOME", "X3_TAMANHO"),/*nDec*/,/*valid*/,FWBuildFeature(STRUCT_FEATURE_WHEN,".F."),,,)
    
Return

/*/{Protheus.doc} AddFields
	Realiza la cración de la estructura de campos documentos de entrada.
	@type  Method
	@author raul.medina
	@since 
	@param
	@return 
	/*/
Method AddFields() Class InputFieldsAll
Local jsonFields as json
Local aFields As Array

    //Creación del objeto json para validar existencia en bloque de código en FWFormStruct
    aFields := {"F1_FORNECE","F1_LOJA","F1_SERIE","F1_DOC","F1_NATUREZ","F1_ESPECIE","F1_EMISSAO","F1_MOEDA","F1_TXMOEDA"}

    jsonFields := self:CreateJson(aFields)

    self:oView  := FWFormStruct(2, 'SF1', { | cField | jsonFields:hasProperty(AllTrim( cField )) }, .F., self:lVirtual )

    self:oView:AddField('cNome', '03', AllTrim(FWX3Titulo("A2_NOME")), AllTrim(FWX3Titulo("A2_NOME")), , 'GET', GetSX3Cache("A2_NOME", "X3_PICTURE"))
    
	aFields := {}
	If UsaSeqCor()
        aAdd(aFields, "F1_DIACTB")
    EndIf
    
	self:AddFieldsAd(aFields)

Return

/*/{Protheus.doc} AddModelProperties
	Realiza la asignación de propiedades de los campos.
	@type  Method
	@author raul.medina
	@since 
	@param nDoc - Numero del documento que serán agregados los campos.
	@return 
	/*/
Method AddModelProperties(nDoc As numeric) Class InputFieldsAll
Local cWhen         := ""   As character
Local cInit         := ""   As character
Local aValues       := {}   As array

	self:nNumDoc := nDoc
    If self:jsonClients:hasProperty(AllTrim(str(nDoc))) //"4","5","12","51","53","62","63"
        self:lClient := .T.
    EndIf

    If self:lClient
        //F1_FORNECE
        self:SetModProperty("F1_FORNECE", MODEL_FIELD_VALID, "VF1_FORNECE()")
        self:SetModProperty("F1_FORNECE", MODEL_FIELD_WHEN, "WF1_FORNECE()")
        self:SetModProperty("F1_FORNECE", MODEL_FIELD_TITULO, AllTrim(FWX3Titulo("F2_CLIENTE")))
        self:SetModProperty("F1_FORNECE", MODEL_FIELD_TAMANHO, GetSX3Cache("F2_CLIENTE", "X3_TAMANHO"))
        
        //F1_LOJA
        self:SetModProperty("F1_LOJA", MODEL_FIELD_VALID, "VF1_LOJA( , '" + StrZero(nDoc,2) + "')")
        self:SetModProperty("F1_LOJA", MODEL_FIELD_WHEN, "WF1_LOJA()")

        //cNome
        cInit := "Posicione('SA1',1,xFilial('SA1')+M->F1_FORNECE+M->F1_LOJA,'A1_NOME')"
        self:SetModProperty("cNome", MODEL_FIELD_TITULO, AllTrim(FWX3Titulo("A1_NOME")))
        self:SetModProperty("cNome", MODEL_FIELD_TAMANHO, GetSX3Cache("A1_NOME", "X3_TAMANHO"))
        self:SetModProperty("cNome", MODEL_FIELD_INIT, cInit)

    Else
        //F1_FORNECE
        self:SetModProperty("F1_FORNECE", MODEL_FIELD_VALID, "VF1_FORNECE(.T.)")
        self:SetModProperty("F1_FORNECE", MODEL_FIELD_WHEN, "WF1_FORNECE(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(nDoc == 64) + ")")

        //F1_LOJA
        self:SetModProperty("F1_LOJA", MODEL_FIELD_VALID, "VF1_LOJA(.T., '" + StrZero(nDoc,2) + "')")
        self:SetModProperty("F1_LOJA", MODEL_FIELD_WHEN, "WF1_LOJA(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(nDoc == 64) + ")")

        //cNome
        cInit := "Posicione('SA2',1,xFilial('SA2')+M->F1_FORNECE+M->F1_LOJA,'A2_NOME')"
        self:SetModProperty("cNome", MODEL_FIELD_INIT, cInit) 
    EndIf

    //F1_SERIE
    self:SetModProperty("F1_SERIE", MODEL_FIELD_VALID, "VF1_SERIE('" + StrZero(nDoc,2) + "')")
    self:SetModProperty("F1_SERIE", MODEL_FIELD_WHEN, "WF1_SERIE(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(nDoc == 64) + ")")

    //F1_DOC
    self:SetModProperty("F1_DOC", MODEL_FIELD_VALID, "VF1_DOC('" + StrZero(nDoc,2) + "', " + self:lToS(self:lAuto) + ")")
    self:SetModProperty("F1_DOC", MODEL_FIELD_WHEN, "WF1_DOC(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(nDoc == 64) + ")")

    //F1_NATUREZ
    self:SetModProperty("F1_NATUREZ", MODEL_FIELD_VALID, "VF1_NATUREZ()")
    self:SetModProperty("F1_NATUREZ", MODEL_FIELD_WHEN, "WF1_NATUREZ(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ")")

    //F1_ESPECIE
    cWhen   := ".F."
    self:SetModProperty("F1_ESPECIE", MODEL_FIELD_WHEN, cWhen)
    If self:lInsert
        cInit   := "'" + self:cEspecie + "'"
        self:SetModProperty("F1_ESPECIE", MODEL_FIELD_INIT, cInit)
    EndIf
	self:SetModProperty("F1_ESPECIE", MODEL_FIELD_VALID, "VF1_ESPECIE()")

    //F1_EMISSAO
    self:SetModProperty("F1_EMISSAO", MODEL_FIELD_VALID, "VF1_EMISSAO('" + StrZero(nDoc,2) + "')")
    self:SetModProperty("F1_EMISSAO", MODEL_FIELD_WHEN, "WF1_EMISSAO(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(nDoc == 64) + ", '" + StrZero(nDoc,2) + "')")
	self:SetModProperty("F1_EMISSAO", MODEL_FIELD_INIT, "") //Si se informa el inicializador ddatabase no realiza la actualización en pantalla cuando se actualiza M->F1_EMISSAO

    //F1_MOEDA
    self:SetModProperty("F1_MOEDA", MODEL_FIELD_VALID, "VF1_MOEDA()")
    self:SetModProperty("F1_MOEDA", MODEL_FIELD_WHEN, "WF1_MOEDA(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(nDoc == 64) + ")")
    aValues := self:GetMonedas()
    self:SetModProperty("F1_MOEDA", MVC_MODEL_VALUES, aValues) 
	self:SetModProperty("F1_MOEDA", MODEL_FIELD_INIT, "")
    
    //F1_TXMOEDA
    self:SetModProperty("F1_TXMOEDA", MODEL_FIELD_VALID, "VF1_TXMOEDA()")
    self:SetModProperty("F1_TXMOEDA", MODEL_FIELD_WHEN, "WF1_TXMOEDA(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ")")
    self:SetModProperty("F1_TXMOEDA", MODEL_FIELD_INIT, "") 

	self:DIACTB()

    Do Case
        Case nDoc == 4
			self:DevPedidoVenta()
            self:VendedorDevoluciones()
            self:NotaCreditoCliente()
        Case nDoc == 5
			self:FechaDigit()
            self:DevPedidoVenta()
            self:VendedorDevoluciones()
            self:NotaDebitoExterna()
        Case nDoc == 8
            self:NotaCreditoInterna()
        Case nDoc == 9
			self:FechaDigit()
            self:NotaDebitoProveedor()
        Case nDoc == 10
			self:FechaDigit()
            self:FacturaEntrada()
        Case nDoc == 12
			self:FechaDigit()
            self:FacturaEntradaBeneficiamento()
        Case nDoc == 13
			self:FechaDigit()
            self:FacturaGastosImp()
        Case nDoc == 14
			self:FechaDigit()
            self:FacturaConcTransp()
        Case nDoc == 20
			self:FechaDigit()
            self:FacturaAnticipo()
		Case nDoc == 23
			self:FechaDigit()
			self:NotaDebitoAjuste()
        Case nDoc == 51
			self:DevPedidoVenta()
            self:ApruebaDevolucion()
            self:RemitoDevolucionFormularioPropio()
        Case nDoc == 53
			self:FechaDigit()
            self:DevPedidoVenta()
            self:ApruebaDevolucion()
            self:RemitoDevolucionFormularioPropioNo()
        Case nDoc == 60
			self:FechaDigit()
            self:RemitoEntrada()
        Case nDoc == 62
			self:FechaDigit()
            self:RemitoEntradaBeneficiamento()
        Case nDoc == 63
            self:RetornoSimbolico()
        Case nDoc == 64
			self:FechaDigit()
            self:SucursalOrig()
            self:RemitoTransferenciaEntrada()
    EndCase

Return

/*/{Protheus.doc} AddFieldsInput
	Realiza la cración de la estructura de campos.
	@type  Method
	@author raul.medina
	@since 
	@param nDoc - Numero del documento que serán agregados los campos.
	@return 
	/*/
Method AddInputFields(nDoc As numeric) Class InputFieldsAll
Local cSF3          := ""   As character

    self:nNumDoc := nDoc
    If self:jsonClients:hasProperty(AllTrim(str(nDoc))) //"4","5","12","51","53","62","63"
        self:lClient := .T.
    EndIf

    If self:lClient
        //F1_FORNECE
		cSF3	:= AllTrim(GetSX3Cache("F2_CLIENTE", "X3_F3"))
        self:oView:SetProperty("F1_FORNECE",MVC_VIEW_LOOKUP,cSF3)
    EndIf

    self:oView:SetProperty("F1_NATUREZ",MVC_VIEW_LOOKUP,"SED")

    Do Case
        Case nDoc == 4
			self:DevPedidoVenta(.T.)
            self:VendedorDevoluciones(.T.)
            self:NotaCreditoCliente(.T.)
        Case nDoc == 5
			self:DevPedidoVenta(.T.)
            self:VendedorDevoluciones(.T.)
            self:NotaDebitoExterna(.T.)
        Case nDoc == 8
            self:NotaCreditoInterna(.T.)
        Case nDoc == 9
            self:NotaDebitoProveedor(.T.)
        Case nDoc == 10
            self:FacturaEntrada(.T.)
        Case nDoc == 12
            self:FacturaEntradaBeneficiamento(.T.)
        Case nDoc == 13
            self:FacturaGastosImp(.T.)
        Case nDoc == 14
            self:FacturaConcTransp(.T.)
        Case nDoc == 20
            self:FacturaAnticipo(.T.)
		Case nDoc == 23
			self:NotaDebitoAjuste(.T.)
        Case nDoc == 51
			self:DevPedidoVenta(.T.)
            self:RemitoDevolucionFormularioPropio(.T.)
        Case nDoc == 53
			self:DevPedidoVenta(.T.)
            self:RemitoDevolucionFormularioPropioNo(.T.)
        Case nDoc == 60
            self:RemitoEntrada(.T.)
        Case nDoc == 62
            self:RemitoEntradaBeneficiamento(.T.)
        Case nDoc == 63
            self:RetornoSimbolico(.T.)
        Case nDoc == 64
			self:SucursalOrig(.T.)
            self:RemitoTransferenciaEntrada(.T.)
    EndCase
    
Return

/*/{Protheus.doc} FechaDigit
	Agrega propiedades para los campos de IVA posdatado.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FechaDigit(lView As logical) Class InputFieldsAll
Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_DTDIGIT", MODEL_FIELD_WHEN, ".F.")
		self:SetModProperty("F1_DTDIGIT", MODEL_FIELD_VALID, "VF1_DTDIGIT()")
		self:SetModProperty("F1_DTDIGIT", MODEL_FIELD_INIT, "") 
	EndIf

Return

/*/{Protheus.doc} DevPedidoVenta
	Agrega propiedades para los campos de IVA posdatado.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method DevPedidoVenta(lView As logical) Class InputFieldsAll
Local lMT46205  := .F. As logical
Local aCombo    := {} As array
Local cInit     := "" As character

Default lView	:= .F.

    If lView
		lMT46205  := ExistBlock("MT46205")
		If lMT46205
        	self:oView:RemoveField("F1_GERAPED")
		EndIf
    Else
        self:SetModProperty("F1_GERAPED", MODEL_FIELD_VALID, "VF1_GERAPED()")
        self:SetModProperty("F1_GERAPED", MODEL_FIELD_WHEN, "WF1_GERAPED(" + self:lToS(self:l103Class) + ")")
        aCombo := {STR0001,STR0002}
        self:SetModProperty("F1_GERAPED", MODEL_FIELD_VALUES, aCombo)
        cInit := '"2"'
        self:SetModProperty("F1_GERAPED", MODEL_FIELD_INIT, cInit)
    EndIf

Return

/*/{Protheus.doc} ApruebaDevolucion
	Agrega propiedades para los campos F1_APRVDEV.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ApruebaDevolucion(lView As logical) Class InputFieldsAll
Local nAprovar	:=	GETMV("MV_APRVDEV",.F.,1) As numeric
Local cWhen     := "" As character
Local aCombo    := {} As array
Local cInit     := "" As character

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_APRVDEV", MODEL_FIELD_VALID, "VF1_APRVDEV()")
		cWhen := If(nAprovar == 2,'.T.','.F.')
		self:SetModProperty("F1_APRVDEV", MODEL_FIELD_WHEN, cWhen)
		aCombo := {STR0001,STR0002}
		self:SetModProperty("F1_APRVDEV", MODEL_FIELD_VALUES, aCombo)
		cInit := If(nAprovar==3,'1','2')
		self:SetModProperty("F1_APRVDEV", MODEL_FIELD_INIT, cInit) 
	EndIf

Return 

/*/{Protheus.doc} VendedorDevoluciones
	Agrega propiedades para los campos F1_VEND1.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method VendedorDevoluciones(lView As logical) Class InputFieldsAll
Local aFields As Array

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_VEND1", MODEL_FIELD_VALID, "VF1_VEND1()")
		self:SetModProperty("F1_VEND1", MODEL_FIELD_WHEN, "WF1_VEND1(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ")")
	Else
		aFields := {"F1_VEND1"}
		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		If self:oView:HasField("F1_VEND1")
    		self:oView:SetProperty("F1_VEND1",MVC_VIEW_LOOKUP,"SA3")
		EndIf
	EndIf
Return

/*/{Protheus.doc} SucursalOrig
	Agrega propiedades para los campos F1_FILORIG.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SucursalOrig(lView As logical) Class InputFieldsAll
Local aFields As Array

Default lView	:= .F.

    If self:lInsert
		If !lView
			self:SetModProperty("F1_FILORIG", MODEL_FIELD_TITULO, "Sucursal Orig.")
			self:SetModProperty("F1_FILORIG", MODEL_FIELD_TAMANHO, LEN(SM0->M0_CODFIL))
			self:SetModProperty("F1_FILORIG", MODEL_FIELD_VALID, "VF1_FILORIG()")
		Else
			aFields := {"F1_FILORIG"}
			//Adición de campos al model/view de la clase Fields
			self:AddFieldsAd(aFields)

			If self:oView:HasField("F1_FILORIG")
        		self:oView:SetProperty("F1_FILORIG", MVC_VIEW_LOOKUP, "SM0")
        		self:oView:SetProperty("F1_FILORIG", MVC_VIEW_PICT, "@!")
			EndIf
		EndIf
    EndIf

Return

/*/{Protheus.doc} DIACTB
	Agrega propiedades para los campos F1_DIACTB.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method DIACTB(lView As logical) Class InputFieldsAll

Default lView	:= .F.

	If !lView
    	self:SetModProperty("F1_DIACTB", MODEL_FIELD_VALID, "VF1_DIACTB()")
	EndIf

Return

/*/{Protheus.doc} Control
	Agrega propiedades para los campos correspondientes a passage
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Control(lView As logical, lWhen As logical) Class InputFieldsAll
Local lContrFol	:= .F. As Logical
Local aFields   := {}   As Array

Default lView	:= .F.
Default lWhen	:= .T.

	lContrFol := GetNewPar("MV_CTRLFOL",.F.)

	If lContrFol
		If lView
			aFields := {"F1_NUMAUT", "F1_CODCTR"}
			self:AddFieldsAd(aFields)
		Else
			self:SetModProperty("F1_NUMAUT", MODEL_FIELD_WHEN, "WF1_NUMAUT(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F1_CODCTR", MODEL_FIELD_WHEN, "WF1_CODCTR(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F1_NUMAUT", MODEL_FIELD_VALID, "VF1_NUMAUT()")
			self:SetModProperty("F1_CODCTR", MODEL_FIELD_VALID, "VF1_CODCTR()")
		EndIf
	EndIf

Return

/*/{Protheus.doc} InputFields
	Función encargada de generar el objeto para generación de estructura de campos de entrada.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
	/*/
Function InputFields(cPais As character, lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character)
Local cNameSpace    := ""   As character
Local oInputFields          As Object
Local cVersion 		:= ""	As character

	cVersion := GetRpoRelease()
	If !(cVersion >= "12.1.2210")
		lViewNoUs := .F.
	EndIf

    cNameSpace := "totvs.protheus.backoffice.inputfields." + LOWER(cPais)
	If !FindClass(cNameSpace+".InputFields")
		cNameSpace := "totvs.protheus.backoffice.inputfields"
	EndIf
    oInputFields := &(cNameSpace + ".InputFields():New(lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)")
    
Return oInputFields

/*/{Protheus.doc} VF1_FORNECE
	Función encargada de realizar las validaciones para el campo F1_FORNECE.
	@type  Function
	@author raul.medina
	@since 
	@param
		cPais - caracter - Indica el país para el cual se realizan las validaciones.
		lFornece - Logico - Indica si las validaciones son realizadas para un documento de proveedor.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FORNECE(lFornece As logical)
Local lValid	As logical

Default	lFornece := .F.


	If !lFornece
        lValid := Posicione('SA1',1,xFilial('SA1')+M->F1_FORNECE,'A1_COD') == M->F1_FORNECE
	Else
        lValid := Posicione('SA2',1,xFilial('SA2')+&(__ReadVar),'A2_COD') == &(__ReadVar)
	EndIf

    lValid := lValid .and. SetVar('F1_FORNECE') .and. LxA103VFold('NF_CODCLIFOR',M->F1_FORNECE)

    If lFornece
        lValid := lValid .and. AtuCliFor()
    EndIf

Return lValid

/*/{Protheus.doc} VF1_LOJA
	Función encargada de realizar las validaciones para el campo F1_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
		lFornece - Logico - Indica si las validaciones son realizadas para un documento de proveedor.
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_LOJA(lFornece As logical, cNumDoc As character)
Local lValid	As logical

Default	lFornece := .F.
Default	cNumDoc := ""

	If !lFornece
		lValid := ExistCpo('SA1',M->F1_FORNECE+M->F1_LOJA)
	Else
		lValid := ExistCpo('SA2',M->F1_FORNECE+M->F1_LOJA)
	EndIf

    lValid := lValid .and. SetVar('F1_LOJA') .AND. LxA103VFold('NF_LOJA',M->F1_LOJA) .AND. LocXVal('F1_LOJA')

    If lFornece
        lValid := lValid .and. VldForLoja('SA2')
    EndIf

    lValid := lValid .and. AtuCliFor()

Return lValid

/*/{Protheus.doc} VF1_SERIE
	Función encargada de realizar las validaciones para el campo F1_SERIE.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE(cNumDoc As character)
Local lValid	As logical

Default cNumDoc := ""

	lValid := MAFISREF("NF_SERIENF","MT100",M->F1_SERIE)
	lValid := lValid .and. AtuNumIt() .AND. LocXVal('F1_SERIE') .AND. LocxValNum()

Return lValid

/*/{Protheus.doc} VF1_DOC
	Función encargada de realizar las validaciones para el campo F1_DOC.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
		lAuto - logico - Indica si es una rutina automatica
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DOC(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc := ""
Default lAuto := .F.

	lValid := AtuNumIt()
	If !lAuto
		lValid := lValid .and. EnablePanel()
	EndIf
	lValid := lValid .and. LocXVal('F1_DOC')
	lValid := lValid .and. LocxValNum()

Return lValid

/*/{Protheus.doc} VF1_NATUREZ
	Función encargada de realizar las validaciones para el campo F1_NATUREZ.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_NATUREZ()
Local lValid	As logical

    lValid := Vazio() .Or. ExistCpo("SED")

    lValid := lValid .and. LocXVal('F1_NATUREZ')

Return lValid

/*/{Protheus.doc} F1_EMISSAO
	Función encargada de realizar las validaciones para el campo F1_EMISSAO.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_EMISSAO(cNumDoc As character)
Local lValid	As logical

Default cNumDoc := ""

	lValid := SetVar('F1_EMISSAO')
	lValid := lValid .and. (cNumDoc $ "05|09|10|12|13|14|20|53|60|62|64") .Or. M->F1_EMISSAO == dDataBase
	lValid := lValid .and. LocXVal('F1_EMISSAO')

Return lValid

/*/{Protheus.doc} VF1_MOEDA
	Función encargada de realizar las validaciones para el campo F1_MOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_MOEDA()
Local lValid	As logical

	lValid := MaFisRef("NF_MOEDA","MT100",M->F1_MOEDA)
	lValid := lValid .and. LocXVal('F1_MOEDA')

Return lValid

/*/{Protheus.doc} VF1_TXMOEDA
	Función encargada de realizar las validaciones para el campo F1_TXMOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TXMOEDA()
Local lValid	As logical

	lValid := Positivo() .and. LocXVal('F1_TXMOEDA')

Return lValid

/*/{Protheus.doc} VF1_ESPECIE
	Función encargada de realizar las validaciones para el campo F1_ESPECIE.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_ESPECIE()
Local lValid	As logical

	lValid := Vazio() .or. ExistCpo("SX5","42"+M->F1_ESPECIE)

Return lValid

/*/{Protheus.doc} VF1_DTDIGIT
	Función encargada de realizar las validaciones para el campo F1_DTDIGIT.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DTDIGIT()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_DIACTB
	Función encargada de realizar las validaciones para el campo F1_DIACTB.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DIACTB()
Local lValid	As logical

	lValid := ExistCPO("CVL")

Return lValid

/*/{Protheus.doc} VF1_GERAPED
	Función encargada de realizar las validaciones para el campo F1_GERAPED.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_GERAPED()
Local lValid	As logical

	lValid := Pertence('12')

Return lValid

/*/{Protheus.doc} VF1_APRVDEV
	Función encargada de realizar las validaciones para el campo F1_APRVDEV.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_APRVDEV()
Local lValid	As logical

	lValid := Pertence('12')

Return lValid

/*/{Protheus.doc} VF1_VEND1
	Función encargada de realizar las validaciones para el campo F1_VEND1.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_VEND1()
Local lValid	As logical

	lValid := VAZIO() .OR. EXISTCPO("SA3")

Return lValid

/*/{Protheus.doc} VF1_FILORIG
	Función encargada de realizar las validaciones para el campo F1_FILORIG.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FILORIG()
lOCAL lValid As logical

	lValid := NfTrfOri(M->F1_FILORIG)
	
Return lValid

/*/{Protheus.doc} VF1_NUMAUT
	Función encargada de realizar las validaciones para el campo F1_NUMAUT.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_NUMAUT()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_CODCTR
	Función encargada de realizar las validaciones para el campo F1_CODCTR.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CODCTR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} WF1_FORNECE
	Función encargada de realizar la función When para el campo F1_FORNECE.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_FORNECE(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.
Default lRemTrans := .F.

	lRet := !(l103Visual .Or. l103Class .Or. lRemTrans)

Return lRet

/*/{Protheus.doc} WF1_LOJA
	Función encargada de realizar la función When para el campo F1_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_LOJA(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.
Default lRemTrans := .F.

	lRet := !(l103Visual .Or. l103Class .Or. lRemTrans)

Return lRet

/*/{Protheus.doc} WF1_SERIE
	Función encargada de realizar la función When para el campo F1_SERIE.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_SERIE(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.
Default lRemTrans := .F.

	lRet := !(l103Visual .Or. l103Class .Or. lRemTrans) 

Return lRet

/*/{Protheus.doc} WF1_DOC
	Función encargada de realizar la función When para el campo F1_DOC.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_DOC(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.
Default lRemTrans := .F.

	lRet := !(l103Visual .Or. l103Class .Or. lRemTrans)

Return lRet

/*/{Protheus.doc} WF1_NATUREZ
	Función encargada de realizar la función When para el campo F1_NATUREZ.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_NATUREZ(l103Visual as logical, l103Class as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.

	lRet := !(l103Visual .Or. l103Class)

Return lRet

/*/{Protheus.doc} WF1_EMISSAO
	Función encargada de realizar la función When para el campo F1_EMISSAO.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_EMISSAO(l103Visual as logical, l103Class as logical, lRemTrans as logical, cDoc As character)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.
Default lRemTrans := .F.
Default cDoc := ""

	lRet := !(l103Visual .Or. l103Class .Or. lRemTrans) .and. !(cDoc $ "04|08|51|63")

Return lRet

/*/{Protheus.doc} WF1_MOEDA
	Función encargada de realizar la función When para el campo F1_MOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_MOEDA(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.
Default lRemTrans := .F.

	lRet := !(l103Visual .Or. l103Class .Or. lRemTrans)

Return lRet

/*/{Protheus.doc} WF1_TXMOEDA
	Función encargada de realizar la función When para el campo F1_TXMOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_TXMOEDA(l103Visual as logical, l103Class as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.

	lRet := !(l103Visual .Or. l103Class)

Return lRet

/*/{Protheus.doc} WF1_GERAPED
	Función encargada de realizar la función When para el campo F1_GERAPED.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_GERAPED(l103Class as logical)
Local lRet	:= .T. As logical

Default l103Class := .F.

	lRet := !l103Class

Return lRet

/*/{Protheus.doc} WF1_VEND1
	Función encargada de realizar la función When para el campo F1_VEND1.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_VEND1(l103Visual as logical, l103Class as logical)
Local lRet	:= .T. As logical

Default l103Visual := .F.
Default l103Class := .F.

	lRet := !(l103Visual .Or. l103Class)

Return lRet


/*/{Protheus.doc} WF1_NUMAUT
	Función encargada de realizar la función When para el campo F1_NUMAUT .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_NUMAUT(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_CODCTR
	Función encargada de realizar la función When para el campo F1_CODCTR .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_CODCTR(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet


/*/{Protheus.doc} GetStructure
	Obtiene estructura de campos de entrada (SF1)
	@author luis.samaniego
	@since 05/12/2022
	@param 	l103Class - Logical.
			l103Visual - Logical.
			lLocxAuto - Logical.
			cLocxNFPV - Character.
			lDocSp - Logical.
			lGerarCFD - Logical.
			lSerie2 - Logical.
			lAutoFact - Logical.
			aCfgNf - Array.
	@return aCposNF - Array - Campos de encabezado de documento (SF1).
	/*/
Method GetStructure(l103Class As Logical, l103Visual As Logical, lLocxAuto As Logical, cLocxNFPV As Character, lDocSp As Logical, lGerarCFD As Logical, lSerie2 As Logical, lAutoFact As Logical, aCfgNf As Array) Class InputFieldsAll
Local aCposNF As Array
Local nTipo As Numeric

Default l103Class  := .F.
Default l103Visual := .F.
Default lLocxAuto  := .F.
Default cLocxNFPV  := ""
Default lDocSp     := .F.
Default lGerarCFD  := .F.
Default lSerie2    := .F.
Default lAutoFact  := .F.
Default aCfgNf     := {}

	//Array aCfgNf
	nTipo := 1

	self:l103Class := l103Class
	self:l103Visual := l103Visual
	self:lAuto := lLocxAuto
	If self:cPais == "ARG"
		self:cPuntoVenta := cLocxNFPV
	EndIf
	If self:cPais == "COL"
		self:lDocSoporte := lDocSp
	EndIf
	If self:cPais == "MEX"
		self:lGerarCFD := lGerarCFD
	EndIf
	If self:cPais == "PER"
		self:lSerie2 := lSerie2
	EndIf
	If self:cPais == "PAR"
		self:lAutoFact := lAutoFact
	EndIf
	self:AddModel()
	self:AddModelProperties(aCfgNf[nTipo])
	self:AddFields()
	self:AddInputFields(aCfgNf[nTipo])
	aCposNF := Aclone(self:GetFields())

Return aCposNF
