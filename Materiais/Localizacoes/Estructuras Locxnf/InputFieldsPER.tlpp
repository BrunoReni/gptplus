#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.per

#Define	InputFieldsPER "totvs.protheus.backoffice.inputfields.per"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país Perú.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public DATA lSerie2 as logical

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
    public Method FacturaAnticipo()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()

    public Method WhenFornece()
    public Method Serie()
    public Method SeriOri()
    public Method WhenMonedas()
    public Method TPDOC()
    public Method TPRENTA()
    public Method TransElectronicaSig()
    public Method TIPOPE()
    public Method IMPRP()
	public Method ValidacionCamposAll()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields

    _Super:New( "PER", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie) 

Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
		self:TPDOC()
		self:TPRENTA()
		self:TIPOPE()
		self:IMPRP()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece( , .T.)
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
		self:TPDOC()
		self:TPRENTA()
		self:TIPOPE()
		self:IMPRP()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
		self:TPDOC()
		self:TPRENTA()
		self:TIPOPE()
		self:IMPRP()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TPDOC", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
		self:TPDOC()
		self:TPRENTA()
		self:TIPOPE()
		self:IMPRP()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaAnticipo
	Agrega campos para el documento.
		Documento: Factura de Anticipo.
		Numero documento: 20
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaAnticipo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_IMPRP", "F1_TPRENTA", "F1_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
		self:TPRENTA()
		self:TIPOPE()
		self:IMPRP()
	EndIf
	
Return

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
	EndIf
	
Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece( , .T.)
		self:Serie()
		self:WhenMonedas()
	EndIf  
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_TPDOC", "F1_MOTIVO", "F1_TIPREF", "F1_SERIE2"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_TPDOC", "F1_MOTIVO", "F1_TIPREF", "F1_SERIE2"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece( , .T.)
		self:Serie()
		self:WhenMonedas()
		self:TPDOC()
		self:TransElectronicaSig()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT", "F1_GERAPED", "F1_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_TPDOC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece( , .T.)
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
		self:TPDOC()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := { "F1_TPDOC", "F1_TPRENTA"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TPDOC", "F1_TPRENTA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:WhenMonedas()
		self:TPDOC()
		self:TPRENTA()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_SERORI", "F1_DTDIGIT", "F1_TPDOC", "F1_TPRENTA"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERORI", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_TPDOC", "F1_TPRENTA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:SeriOri()
		self:WhenMonedas()
		self:TPDOC()
	EndIf
	
Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece( , .T.)
		self:Serie()
		self:WhenMonedas()
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece( , .T.)
		self:Serie()
		self:WhenMonedas()
	EndIf 
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece( , .T.)
		self:Serie()
		self:WhenMonedas()
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:WhenFornece()
		self:Serie()
		self:WhenMonedas()
	EndIf
	
Return

/*/{Protheus.doc} WhenFornece
	Agrega propiedades para los campos de F1_FORNECE/F1_LOJA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenFornece(lView As logical, lCliente As logical) Class InputFields

Default lView	:= .F.
Default lCliente   := .F.
    
	If !lView
		self:SetModProperty("F1_FORNECE", MODEL_FIELD_WHEN, InputFieldsPER + ".WF1_FORNECE_PER(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ", " + self:lToS(lCliente) + ")")
		self:SetModProperty("F1_LOJA", MODEL_FIELD_WHEN, InputFieldsPER + ".WF1_LOJA_PER(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")
	EndIf

Return

/*/{Protheus.doc} Serie
	Agrega propiedades para el campo F1_SERIE
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Serie(lView As logical, cSF3 as Character) Class InputFields
Local cWhen     := ""   As character

Default lView	:= .F.
Default cSF3 := ""

    If lView
		If !Empty(cSF3)
			self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,cSF3)
		EndIf
	Else
		If self:lSerie2
			cWhen := ".F."
			self:SetModProperty("F1_SERIE", MODEL_FIELD_WHEN, cWhen)
		EndIf
    EndIf

Return

/*/{Protheus.doc} SeriOri
	Agrega propiedades para el campo F1_SERIORI
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SeriOri(lView As logical) Class InputFields
Local cValid    := ""   As character
Local cWhen     := ""   As character

Default lView	:= .F.

    If !lView
		If self:oModel:HasField("F1_SERORI")
			cValid := self:BlocToStr(self:oModel:GetProperty("F1_SERIE",MODEL_FIELD_VALID ))
			self:SetModProperty("F1_SERORI", MODEL_FIELD_VALID, cValid)
			cWhen := ".F."
			self:SetModProperty("F1_SERORI", MODEL_FIELD_WHEN, cWhen)
		EndIf 
	EndIf

Return

/*/{Protheus.doc} WhenMonedas
	Agrega propiedades para los campos de F1_MOEDA/F1_TXMOEDA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenMonedas(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_MOEDA", MODEL_FIELD_WHEN, InputFieldsPER + ".WF1_MOEDA_PER(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")

		//Verificar change
		self:SetModProperty("F1_TXMOEDA", MODEL_FIELD_WHEN, InputFieldsPER + ".WF1_TXMOEDA_PER(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ")")
	EndIf

Return

/*/{Protheus.doc} TPDOC
	Agrega propiedades para los campos de F1_TPDOC.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPDOC(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F1_TPDOC", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_TPDOC_PER()")
	EndIf

Return

/*/{Protheus.doc} TPRENTA
	Agrega propiedades para los campos de F1_TPRENTA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPRENTA(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F1_TPRENTA", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_TPRENTA_PER()")
	EndIf

Return

/*/{Protheus.doc} TransElectronicaSig
	Agrega propiedades para los campos de F1_MOEDA/F1_TXMOEDA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TransElectronicaSig(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_MOTIVO", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_MOTIVO_PER()")

		self:SetModProperty("F1_TIPREF", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_TIPREF_PER()")

		self:SetModProperty("F1_SERIE2", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_SERIE2_PER()")
	EndIf

Return

/*/{Protheus.doc} TIPOPE
	Agrega propiedades para los campos de F1_TPRENTA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPOPE(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F1_TIPOPE", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_TIPOPE_PER()")
	EndIf

Return

/*/{Protheus.doc} IMPRP
	Agrega propiedades para los campos de F1_IMPRP.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method IMPRP(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F1_IMPRP", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_IMPRP_PER()")
	EndIf

Return

/*/{Protheus.doc} ValidacionCamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ValidacionCamposAll(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_DOC", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_DOC_PER('" + StrZero(self:nNumDoc,2) + "', " + self:lToS(self:lAuto) + ")")

		self:SetModProperty("F1_SERIE", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_SERIE_PER('" + StrZero(self:nNumDoc,2) + "')")

		self:SetModProperty("F1_DIACTB", MODEL_FIELD_VALID, InputFieldsPER + ".VF1_DIACTB_PER()")
	EndIf

Return

/*/{Protheus.doc} VF1_DOC_PER
	Función encargada de realizar las validaciones para el campo F1_DOC del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
		lAuto - logico - Indica si es una rutina automatica
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DOC_PER(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.
	
	lValid := VF1_DOC(cNumDoc, lAuto) .and. CtrFolios(xFilial("SF1"),M->F1_SERIE,M->F1_ESPECIE,M->F1_DOC) .AND. LXEXSER2()

Return lValid

/*/{Protheus.doc} VF1_SERIE_PER
	Función encargada de realizar las validaciones para el campo F1_SERIE del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE_PER(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""
	
	lValid := VF1_SERIE(cNumDoc) .and. LxExSer2()                                                             

Return lValid

/*/{Protheus.doc} VF1_SERIE2_PER
	Función encargada de realizar las validaciones para el campo F1_SERIE2 del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE2_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TPDOC_PER
	Función encargada de realizar las validaciones para el campo F1_TPDOC del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPDOC_PER()
Local lValid	As logical

	lValid := ExistCpo('CCL',M->F1_TPDOC,2)

    If lValid .and. FindFunction("ValTpDocPer")
        lValid := ValTpDocPer()
    EndIf

Return lValid

/*/{Protheus.doc} VF1_IMPRP_PER
	Función encargada de realizar las validaciones para el campo F1_IMPRP del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_IMPRP_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TPRENTA_PER
	Función encargada de realizar las validaciones para el campo F1_TPRENTA del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPRENTA_PER()
Local lValid	As logical

	If FindFunction("ValTpDocPer")
        lValid := ValTpDocPer()
    EndIf

Return lValid

/*/{Protheus.doc} VF1_TIPOPE_PER
	Función encargada de realizar las validaciones para el campo F1_TIPOPE del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPOPE_PER()
Local lValid	As logical

	
    lValid := Vazio() .Or. ExistCpo("SX5","1B"+M->F1_TIPOPE)

Return lValid

/*/{Protheus.doc} VF1_MOTIVO_PER
	Función encargada de realizar las validaciones para el campo F1_MOTIVO del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_MOTIVO_PER()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIPREF_PER
	Función encargada de realizar las validaciones para el campo F1_TIPREF del país Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPREF_PER()
Local lValid	As logical

	lValid := Vazio() .OR. ValidF3I("S009", M->F1_TIPREF,1,2)

Return lValid

/*/{Protheus.doc} VF1_DIACTB_PER
	Función encargada de realizar las validaciones para el campo F1_DIACTB.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DIACTB_PER()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCPO("CVL")

Return lValid

/*/{Protheus.doc} WF1_FORNECE_PER
	Función encargada de realizar la función When para el campo F1_FORNECE.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
		lCliente - logico - Indica si el campo está siendo usado para documentos de clientes.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_FORNECE_PER(l103Visual as logical, l103Class as logical, lRemTrans as logical, lCliente As logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.
Default lCliente 	:= .F.

	lRet := WF1_FORNECE(l103Visual, l103Class, lRemTrans)

	If lRet .and. !lCliente
		lRet := LxWhenAdt()
	EndIf

Return lRet

/*/{Protheus.doc} WF1_LOJA_PER
	Función encargada de realizar la función When para el campo F1_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
		lCliente - logico - Indica si el campo está siendo usado para documentos de clientes.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_LOJA_PER(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.

	lRet := WF1_LOJA(l103Visual, l103Class, lRemTrans) .and. LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF1_MOEDA_PER
	Función encargada de realizar la función When para el campo F1_MOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_MOEDA_PER(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.

	lRet :=  WF1_MOEDA(l103Visual, l103Class, lRemTrans) .and. LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF1_TXMOEDA_PER
	Función encargada de realizar la función When para el campo F1_TXMOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_TXMOEDA_PER(l103Visual as logical, l103Class as logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.

	lRet :=  WF1_TXMOEDA(l103Visual, l103Class) .and. LxWhenAdt()

Return lRet
