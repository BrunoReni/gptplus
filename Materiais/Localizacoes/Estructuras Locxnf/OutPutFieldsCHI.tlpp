#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.chi

#Define OutputFieldsCHI "totvs.protheus.backoffice.outputfields.chi"

/*/{Protheus.doc} OutPutFields
	Realiza la creación de la estructura de campos para el paí­s .
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll

    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method ModalidadVenta()
	public Method Serie()
	public Method DocumentoReferencia()
	public Method NumeroCorrelativo()
	public Method FechaDigitacion()
EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TABELA", "F2_MODVEN"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_MODVEN"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ModalidadVenta()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TABELA"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TIPOREM", "F2_LIQPROD"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}
		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPREF", "F2_ESPREF", "F2_NFREF", "F2_SERREF", "F2_MOTIVO"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_TIPREF", "F2_ESPREF", "F2_NFREF", "F2_SERREF", "F2_MOTIVO"}
		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		Self:DocumentoReferencia()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf 

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTDIGIT", "F2_NUMCOR"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")
		self:FechaDigitacion(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_DTDIGIT", "F2_MOEDA", "F2_TXMOEDA", "F2_NUMCOR", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
		self:NumeroCorrelativo()
		self:FechaDigitacion()
	ENdIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return

/*/{Protheus.doc} ModalidadVenta
	Metodo para agregar propiedades al campo F2_MODVEN.
	@author luis.samaniego
	@since 12/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return 
	/*/
Method ModalidadVenta(lView As logical) Class OutPutFields
Local aCombo As Array

Default lView := .F.

	If !lView
		If self:oModel:HasField("F2_MODVEN")
			aCombo := self:oModel:GetProperty("F2_MODVEN",MVC_MODEL_VALUES)
			aadd(aCombo, "")
			self:SetModProperty("F2_MODVEN", MODEL_FIELD_VALUES, aCombo)
			self:SetModProperty("F2_MODVEN", MODEL_FIELD_INIT, "")
		EndIf
	EndIf
Return

/*/{Protheus.doc} Serie
	Metodo para agregar propiedades al campo F2_SERIE.
	@author luis.samaniego
	@since 12/10/2022
	@param 	lView - logical - .T. para actualizar View / .F. para actualizar Model.
			cF3   - Character - Código de consulta padrón (X3_F3).
	@return 
	/*/
Method Serie(lView As logical, cF3 As Character) Class OutPutFields
Default lView  := .F.
Default cF3    := ""

	If lView
		self:oView:SetProperty("F2_SERIE", MVC_VIEW_LOOKUP, cF3)
	Else
		self:SetModProperty("F2_SERIE", MODEL_FIELD_VALID, OutputFieldsCHI + ".VF2_SERIE_CHI('" + StrZero(self:nNumDoc,2) + "')")
	EndIf
Return

/*/{Protheus.doc} DocumentoReferencia
	Metodo para agregar propiedades a los campos F2_SERREF, F2_ESPREF, F2_TIPREF, F2_NFREF, F2_MOTIVO
	@author luis.samaniego
	@since 12/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return 
	/*/
Method DocumentoReferencia(lView As logical) Class OutPutFields
Local aCombo As Array
Default lView  := .F.

	If !lView
		If self:oModel:HasField("F2_ESPREF")
			aCombo := self:oModel:GetProperty("F2_ESPREF",MVC_MODEL_VALUES)
			aadd(aCombo, "")
			self:SetModProperty("F2_ESPREF", MODEL_FIELD_VALUES, aCombo)
			self:SetModProperty("F2_ESPREF", MODEL_FIELD_INIT, "")
		EndIf
		If self:oModel:HasField("F2_TIPREF")
			aCombo := self:oModel:GetProperty("F2_TIPREF",MVC_MODEL_VALUES)
			aadd(aCombo, "")
			self:SetModProperty("F2_TIPREF", MODEL_FIELD_VALUES, aCombo)
			self:SetModProperty("F2_TIPREF", MODEL_FIELD_INIT, "")
		EndIf
		self:SetModProperty("F2_SERREF", MODEL_FIELD_VALID, OutputFieldsCHI + ".VF2_SERREF_CHI()")
		self:SetModProperty("F2_TIPREF", MODEL_FIELD_VALID, OutputFieldsCHI + ".VF2_TIPREF_CHI()")
		self:SetModProperty("F2_ESPREF", MODEL_FIELD_VALID, OutputFieldsCHI + ".VF2_ESPREF_CHI()")
		self:SetModProperty("F2_NFREF", MODEL_FIELD_VALID, OutputFieldsCHI + ".VF2_NFREF_CHI()")
		self:SetModProperty("F2_MOTIVO", MODEL_FIELD_VALID, OutputFieldsCHI + ".VF2_MOTIVO_CHI()")
	EndIf
Return

/*/{Protheus.doc} NumeroCorrelativo
	Metodo para agregar propiedades al campo F2_NUMCOR.
	@author luis.samaniego
	@since 12/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return 
	/*/
Method NumeroCorrelativo(lView As logical) class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_NUMCOR", MODEL_FIELD_VALID, OutputFieldsCHI + ".VF2_NUMCOR_CHI()")
	EndIf

Return

/*/{Protheus.doc} FechaDigitacion
	Metodo para agregar propiedades al campo F2_DTDIGIT.
	@author luis.samaniego
	@since 14/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method FechaDigitacion(lView As logical) class OutPutFields
Default lView	:= .F.
Default lEdit	:= .F.

	If !lView
		self:SetModProperty("F2_DTDIGIT", MODEL_FIELD_WHEN, ".F.")
		If self:lInsert
			If self:oModel:HasField("F2_DTDIGIT")
				self:SetModProperty("F2_DTDIGIT", MODEL_FIELD_INIT, "dDatabase")
			EndIf
		EndIf
	EndIf
Return

/*/{Protheus.doc} VF2_SERIE_CHI
	Función para validaciones del campo F2_SERIE/Chile.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param cNumDoc - Character - Número de tipo de documento a validar.
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERIE_CHI(cNumDoc As Character)
Local lValid As logical

Default	cNumDoc := ""

	lValid := VF2_SERIE(cNumDoc)
	lValid := lValid .And. VldNumCor(M->F2_SERIE)

Return lValid

/*/{Protheus.doc} VF2_SERREF_CHI
	Función para validaciones del campo F2_SERREF.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERREF_CHI()
Local lValid As logical

	lValid := IIf(!Empty(M->F2_SERREF), MT485VLDNF(M->F2_NFREF, M->F2_SERREF, M->F2_CLIENTE, M->F2_LOJA, M->F2_ESPREF), .T.)

Return lValid

/*/{Protheus.doc} VF2_NUMCOR_CHI
	Función para validaciones del campo F2_NUMCOR.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NUMCOR_CHI()
Local lValid As logical
	
	lValid := CORR_VERIF(M->F2_DTDIGIT,M->F2_NUMCOR,.T.,'2',M->F2_ESPECIE)
	
Return lValid


/*/{Protheus.doc} VF2_TIPREF_CHI
	Función para validaciones del campo F2_TIPREF.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPREF_CHI()
Local lValid As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_ESPREF_CHI
	Función para validaciones del campo F2_ESPREF.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ESPREF_CHI()
Local lValid As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_NFREF_CHI
	Función para validaciones del campo F2_NFREF.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NFREF_CHI()
Local lValid As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_MOTIVO_CHI
	Función para validaciones del campo F2_MOTIVO.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MOTIVO_CHI()
Local lValid As logical

	lValid := .T.

Return lValid
