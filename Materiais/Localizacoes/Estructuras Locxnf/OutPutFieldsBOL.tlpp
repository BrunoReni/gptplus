#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'
#Include "OutPutFieldsBOL.ch"

namespace totvs.protheus.backoffice.outputfields.bol

#Define OutPutFieldsBOL "totvs.protheus.backoffice.outputfields.bol" 

/*/{Protheus.doc} OutPutFields
	Realiza la creación de la estructura de campos para el paí­s Bolivia.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll


    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method CamposAll()
	public Method CFDUSO()
	public Method FLFTEX()
	public Method TIPCOMP()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "BOL", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TIPCOMP", "F2_TABELA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NUMAUT", "F2_CODCTR", "F2_LIMEMIS", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", ;
						"F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control(, .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TIPCOMP", "F2_TABELA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NUMAUT", "F2_CODCTR", "F2_LIMEMIS", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", ;
						"F2_MOEDA", "F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control(, .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

		If lView
		aFields := {"F2_TIPCOMP", "F2_TIPOREM", "F2_LIQPROD", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", ;
						"F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPCOMP", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", ;
						"F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPCOMP", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NUMAUT", "F2_CODCTR", "F2_LIMEMIS", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", ;
						"F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control(, .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPCOMP", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NUMAUT", "F2_CODCTR", "F2_LIMEMIS", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", ;
						"F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf 

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPCOMP", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_FLFTEX"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NUMAUT", "F2_CODCTR", "F2_LIMEMIS", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", ;
						"F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_FLFTEX", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control()
		self:TIPCOMP()
		self:CFDUSO()
		self:FLFTEX()
	ENdIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPCOMP", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Control(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NUMAUT", "F2_CODCTR", "F2_LIMEMIS", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", ;
						"F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:Control(, .F.)
		self:TIPCOMP()
		self:CFDUSO()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPCOMP", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_TIPCOMP", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPCOMP", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_TIPCOMP", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_MODCONS", "F2_IDRGS", "F2_TPDOC", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:TIPCOMP()
		self:CFDUSO()
	EndIf
	
Return

/*/{Protheus.doc} CamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CamposAll(lView As logical) Class OutPutFields
Local lCliente		As  logical

Default lView	:= .F.

    If !lView
		If AllTrim(str(self:nNumDoc)) $ "1|2|3|19|21|50"
        	lCliente := .T.
    	EndIf
		self:SetModProperty("F2_LOJA", MODEL_FIELD_VALID, OutPutFieldsBOL + ".VF2_LOJA_BOL(" + self:lToS(!lCliente) + ", '" + StrZero(self:nNumDoc,2) + "')")

		self:SetModProperty("F2_SERIE", MODEL_FIELD_VALID, OutPutFieldsBOL + ".VF2_SERIE_BOL('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} TIPCOMP
	Agrega propiedades para el campo F2_TIPCOMP
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		lWhen - logico - Indica si el campo(s) puede ser editado.
	@return 
	/*/
Method TIPCOMP(lView As logical, lWhen As logical) Class OutPutFields

Default lView	:= .F.
Default lWhen	:= .T.

	If !lView
		self:SetModProperty("F2_TIPCOMP", MODEL_FIELD_WHEN, OutPutFieldsBOL + ".WF2_TIPCOMP_BOL(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F2_TIPCOMP", MODEL_FIELD_VALID, OutPutFieldsBOL + ".VF2_TIPCOMP_BOL()")
	EndIf

Return

/*/{Protheus.doc} CFDUSO
	Agrega propiedades para los campos correspondientes al uso de CFD
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDUSO(lView As logical) Class OutPutFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_MODCONS", MODEL_FIELD_VALID, OutPutFieldsBOL + ".VF2_MODCONS_BOL()")
		self:SetModProperty("F2_IDRGS", MODEL_FIELD_VALID, OutPutFieldsBOL + ".VF2_IDRGS_BOL()")
		self:SetModProperty("F2_TPDOC", MODEL_FIELD_VALID, OutPutFieldsBOL + ".VF2_TPDOC_BOL()")
		self:SetModProperty("F2_TPDOC", MODEL_FIELD_INIT, "") 
	EndIf
	
Return

/*/{Protheus.doc} FLFTEX
	Agrega propiedades para el campo F2_FLFTEX
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FLFTEX(lView As logical) Class OutPutFields
Local aCombo    := {} As array

Default lView	:= .F.

	If !lView
		aCombo := {"",STR0001} //"6=Autorizado"
		self:SetModProperty("F2_FLFTEX", MODEL_FIELD_VALUES, aCombo)
		self:SetModProperty("F2_FLFTEX", MODEL_FIELD_INIT, "") 
		self:SetModProperty("F2_FLFTEX", MODEL_FIELD_VALID, OutPutFieldsBOL + ".VF2_FLFTEX_BOL()")
	EndIf

Return

/*/{Protheus.doc} VF2_LOJA_BOL
	Función encargada de realizar las validaciones para el campo F2_LOJA del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		lFornece - logico - Indica si las validaciones son realizadas para un documento de proveedor.
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_LOJA_BOL(lFornece As logical, cNumDoc As character)
Local lValid	As logical
Local lCFDUso   As logical

Default lFornece	:= .F.
Default cNumDoc		:= ""

	lCFDUso := IIf(Alltrim(GetMv("MV_CFDUSO", .T., "1"))<>"0",.T.,.F.)
	lValid 	:= VF2_LOJA(lFornece, cNumDoc)
	If lValid .and. lCFDUso
		lValid	:= VldFacE()
	EndIf

Return lValid

/*/{Protheus.doc} VF2_SERIE_BOL
	Función encargada de realizar las validaciones para el campo F2_SERIE del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERIE_BOL(cNumDoc As character)
Local lValid	As logical
Local lCFDUso   As logical

Default cNumDoc		:= ""

	lCFDUso := IIf(Alltrim(GetMv("MV_CFDUSO", .T., "1"))<>"0",.T.,.F.)
	lValid 	:= VF2_SERIE(cNumDoc)
	If lValid .and. lCFDUso
		lValid	:= VldFacE()
	EndIf

Return lValid

/*/{Protheus.doc} VF2_TIPCOMP_BOL
	Función encargada de realizar las validaciones para el campo F2_TIPCOMP del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPCOMP_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_MODCONS_BOL
	Función encargada de realizar las validaciones para el campo F2_MODCONS del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MODCONS_BOL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S004", M->F2_MODCONS,1,3)

Return lValid

/*/{Protheus.doc} VF2_IDRGS_BOL
	Función encargada de realizar las validaciones para el campo F2_IDRGS del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_IDRGS_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TPDOC_BOL
	Función encargada de realizar las validaciones para el campo F2_TPDOC del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPDOC_BOL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S008", M->F2_TPDOC ,1,2)

Return lValid

/*/{Protheus.doc} VF2_FLFTEX_BOL
	Función encargada de realizar las validaciones para el campo F2_FLFTEX del país Bolivia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FLFTEX_BOL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} WF2_TIPCOMP_BOL
	Función encargada de realizar la función When para el campo F2_TIPCOMP .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_TIPCOMP_BOL(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet
