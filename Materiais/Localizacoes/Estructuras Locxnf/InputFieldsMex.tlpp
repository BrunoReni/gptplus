#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.mex

#Define	InputFieldsMEX "totvs.protheus.backoffice.inputfields.mex"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país México.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public DATA lGerarCFD As logical

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
    public Method FacturaAnticipo()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()

    public Method WhenFornece()
    public Method Serie()
    public Method WhenMonedas()
    public Method CFDMata101n()
    public Method CFDMata465n()
    public Method CFDFOL()
    public Method CFDExp()
    public Method CFDUso()
	public Method FormaPagoSAT()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields

    _Super:New( "MEX", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie) 

Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CFDMata101n(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()
		self:CFDMata101n()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CFDMata101n(lView)
		
		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece( , .T.)
		self:WhenMonedas()
		self:CFDMata101n()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CFDMata101n(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()
		self:CFDMata101n()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CFDMata101n(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()
		self:CFDMata101n()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaAnticipo
	Agrega campos para el documento.
		Documento: Factura de Anticipo.
		Numero documento: 20
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaAnticipo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:CFDMata101n(lView)

		//Se retira campo 
    	self:oView:RemoveField("F1_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_DIACTB", "F1_UUID", "F1_FECTIMB", "F1_TIMBRE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()
		self:CFDMata101n()
	EndIf

Return

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()
	EndIf
	
Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece( , .T.)
		self:WhenMonedas()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array
Local cCFDUso   := ""   As character
Local lCFDIExp          As logical 

Default lView	:= .F.

	cCFDUso := Alltrim(GetMv("MV_CFDUSO", .T., "1"))
	lCFDIExp := SuperGetMV("MV_CFDIEXP", .F., .F.)

    If lView
		aFields := {"F1_GERAPED"}
		
		If self:lGerarCFD
			aAdd(aFields, "F1_APROFOL")
			aAdd(aFields, "F1_CERTFOL")
		EndIf

		If cCFDUso <> "0"
			aAdd(aFields, "F1_UUID")
			aAdd(aFields, "F1_FECTIMB")
			aAdd(aFields, "F1_FECANTF")
			aAdd(aFields, "F1_TIMBRE")
			aAdd(aFields, "F1_RELSAT")
			aAdd(aFields, "F1_USOCFDI")
			aAdd(aFields, "F1_SERMAN")
			aAdd(aFields, "F1_DOCMAN")
			aAdd(aFields, "F1_UUIDREL")
			aAdd(aFields, "F1_TPDOC")
		EndIf

		If lCFDIExp
			aAdd(aFields, "F1_TIPOPE")
			aAdd(aFields, "F1_CVEPED")
			aAdd(aFields, "F1_CERORI")
			aAdd(aFields, "F1_NUMCER")
			aAdd(aFields, "F1_EXPCONF")
			aAdd(aFields, "F1_INCOTER")
			aAdd(aFields, "F1_SUBDIV")
			aAdd(aFields, "F1_OBSCE")
			aAdd(aFields, "F1_TCUSD")
			aAdd(aFields, "F1_TOTUSD")
			aAdd(aFields, "F1_IDTRIB")
			aAdd(aFields, "F1_RESIDE")
			aAdd(aFields, "F1_TRASLA")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_APROFOL", "F1_CERTFOL", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_UUID", "F1_FECTIMB", "F1_FECANTF", "F1_TIMBRE", "F1_TIPOPE", "F1_CVEPED", "F1_CERORI", ;
						"F1_NUMCER", "F1_EXPCONF", "F1_INCOTER", "F1_SUBDIV", "F1_OBSCE", "F1_TCUSD", "F1_TOTUSD", "F1_IDTRIB", "F1_RESIDE", "F1_TRASLA", ;
						"F1_RELSAT", "F1_USOCFDI", "F1_SERMAN", "F1_DOCMAN", "F1_UUIDREL", "F1_TPDOC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece( , .T.)
		self:WhenMonedas()
		self:CFDMata465n()
		If self:lGerarCFD
			self:CFDFOL()
		EndIf
		If cCFDUso <> "0"
			self:CFDUso()
			self:FormaPagoSAT()
		EndIf
		If lCFDIExp
			self:CFDExp()
		EndIf
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece( , .T.)
		self:WhenMonedas()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		If self:lGerarCFD
			aAdd(aFields, "F1_APROFOL")
			aAdd(aFields, "F1_CERTFOL")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_APROFOL", "F1_CERTFOL", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()
		If self:lGerarCFD
			self:CFDFOL()
		EndIf
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()
	EndIf

Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece( , .T.)
		self:WhenMonedas()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece( , .T.)
		self:WhenMonedas()
	EndIf

Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece( , .T.)
		self:WhenMonedas()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenFornece()
		self:WhenMonedas()

		self:SetModProperty("F1_SERIE", MODEL_FIELD_WHEN, InputFieldsMEX + ".WF1_SERIE_MEX(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")
	EndIf

Return


/*/{Protheus.doc} WhenFornece
	Agrega propiedades para los campos de F1_FORNECE/F1_LOJA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenFornece(lView As logical, lCliente As logical) Class InputFields

Default lView	:= .F.
Default lCliente   := .F.

	If !lView
		self:SetModProperty("F1_FORNECE", MODEL_FIELD_WHEN, InputFieldsMEX + ".WF1_FORNECE_MEX(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ", " + self:lToS(lCliente) + ")")
		
		self:SetModProperty("F1_LOJA", MODEL_FIELD_WHEN, InputFieldsMEX + ".WF1_LOJA_MEX(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")
	EndIf

Return

/*/{Protheus.doc} Serie
	Agrega propiedades para los campos de F1_SERIE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Serie(lView As logical, cSF3 as Character) Class InputFields

Default lView	:= .F.
Default cSF3 := ""

    If lView
		If !Empty(cSF3)
			self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,cSF3)
		EndIf
	EndIf

Return

/*/{Protheus.doc} WhenMonedas
	Agrega propiedades para los campos de F1_MOEDA/F1_TXMOEDA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenMonedas(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_MOEDA", MODEL_FIELD_WHEN, InputFieldsMEX + ".WF1_MOEDA_MEX(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")

		//Verificar change
		self:SetModProperty("F1_TXMOEDA", MODEL_FIELD_WHEN, InputFieldsMEX + ".WF1_TXMOEDA_MEX(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ")")
	EndIf

Return

/*/{Protheus.doc} CFDMata101n
	Agrega propiedades para los campos de F1_UUID/F1_FECTIMB/F1_TIMBRE para la rutina Mata101n.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDMata101n(lView As logical) Class InputFields
Local cWhen     := ""   As character

Default lView	:= .F.

	If lView
		If self:oView:HasField("F1_UUID")
			self:oView:SetProperty("F1_UUID",MVC_VIEW_LOOKUP,"UUID")
		EndIf
	Else
		cWhen := "VldWhen()"
		self:SetModProperty("F1_UUID", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_UUID_MEX(.T.)")
		self:SetModProperty("F1_UUID", MODEL_FIELD_WHEN, cWhen)

		self:SetModProperty("F1_FECTIMB", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_FECTIMB_MEX(.T.)")
		self:SetModProperty("F1_FECTIMB", MODEL_FIELD_WHEN, cWhen)

		self:SetModProperty("F1_TIMBRE", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_TIMBRE_MEX(.T.)")
		self:SetModProperty("F1_TIMBRE", MODEL_FIELD_WHEN, cWhen)
	EndIf

Return

/*/{Protheus.doc} CFDMata465n
	Agrega propiedades para los campos de F1_UUID/F1_FECTIMB/F1_FECANTF/F1_TIMBRE/ para la rutina Mata465n.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDMata465n(lView As logical) Class InputFields
Local cWhen     := ""   As character

Default lView	:= .F.

    If !lView
		cWhen := ".F."
		self:SetModProperty("F1_UUID", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_UUID_MEX()")
		self:SetModProperty("F1_UUID", MODEL_FIELD_WHEN, cWhen)
		self:SetModProperty("F1_UUID", MODEL_FIELD_VIRTUAL, .T.)

		self:SetModProperty("F1_FECTIMB", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_FECTIMB_MEX()")
		self:SetModProperty("F1_FECTIMB", MODEL_FIELD_WHEN, cWhen)
		self:SetModProperty("F1_FECTIMB", MODEL_FIELD_VIRTUAL, .T.)

		self:SetModProperty("F1_FECANTF", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_FECANTF_MEX()")
		self:SetModProperty("F1_FECANTF", MODEL_FIELD_WHEN, cWhen)
		self:SetModProperty("F1_FECANTF", MODEL_FIELD_VIRTUAL, .T.)

		self:SetModProperty("F1_TIMBRE", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_TIMBRE_MEX()")
		self:SetModProperty("F1_TIMBRE", MODEL_FIELD_WHEN, cWhen)
		self:SetModProperty("F1_TIMBRE", MODEL_FIELD_VIRTUAL, .T.)

		self:SetModProperty("F1_RELSAT", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_RELSAT_MEX()")

		self:SetModProperty("F1_USOCFDI", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_USOCFDI_MEX()")
	EndIf

Return

/*/{Protheus.doc} CFDFOL
	Agrega propiedades para los campos de F1_APROFOL/F1_CERTFOL.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDFOL(lView As logical) Class InputFields
Local cWhen     := ""   As character

Default lView	:= .F.

    If !lView
		cWhen := ".F."
		self:SetModProperty("F1_APROFOL", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_APROFOL_MEX()")
		self:SetModProperty("F1_APROFOL", MODEL_FIELD_WHEN, cWhen)
		self:SetModProperty("F1_CERTFOL", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_CERTFOL_MEX()")
		self:SetModProperty("F1_CERTFOL", MODEL_FIELD_WHEN, cWhen)
	EndIf

Return

/*/{Protheus.doc} CFDExp
	Agrega propiedades para los campos de exportación que dependen del parámetro MV_CFDIEXP.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDExp(lView As logical) Class InputFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_TIPOPE", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_TIPOPE_MEX()")
		If self:oModel:HasField("F1_TIPOPE")
			aValues := self:oModel:GetProperty("F1_TIPOPE",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_TIPOPE", MVC_MODEL_VALUES, aValues)
			self:SetModProperty("F1_TIPOPE", MODEL_FIELD_INIT, "") 
		EndIf
		self:SetModProperty("F1_CVEPED", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_CVEPED_MEX()")
		self:SetModProperty("F1_CERORI", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_CERORI_MEX()")
		If self:oModel:HasField("F1_CERORI")
			aValues := self:oModel:GetProperty("F1_CERORI",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_CERORI", MVC_MODEL_VALUES, aValues)
			self:SetModProperty("F1_CERORI", MODEL_FIELD_INIT, "")
		EndIf
		self:SetModProperty("F1_NUMCER", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_NUMCER_MEX()")
		self:SetModProperty("F1_EXPCONF", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_EXPCONF_MEX()")
		self:SetModProperty("F1_INCOTER", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_INCOTER_MEX()")
		self:SetModProperty("F1_SUBDIV", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_SUBDIV_MEX()")
		If self:oModel:HasField("F1_SUBDIV")
				aValues := self:oModel:GetProperty("F1_SUBDIV",MVC_MODEL_VALUES)
				aadd(aValues, "")
				self:SetModProperty("F1_SUBDIV", MVC_MODEL_VALUES, aValues)
				self:SetModProperty("F1_SUBDIV", MODEL_FIELD_INIT, "")
			EndIf
		self:SetModProperty("F1_OBSCE", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_OBSCE_MEX()")
		self:SetModProperty("F1_TCUSD", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_TCUSD_MEX()")
		self:SetModProperty("F1_TOTUSD", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_TOTUSD_MEX()")
		self:SetModProperty("F1_IDTRIB", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_IDTRIB_MEX()")
		self:SetModProperty("F1_RESIDE", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_RESIDE_MEX()")
		self:SetModProperty("F1_TRASLA", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_TRASLA_MEX()")
	EndIf

Return

/*/{Protheus.doc} CFDUso
	Agrega propiedades para los campos que dependen del parámetro MV_CFDUSO.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDUso(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_RELSAT", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_RELSAT_MEX()")
		self:SetModProperty("F1_USOCFDI", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_USOCFDI_MEX()")
		self:SetModProperty("F1_SERMAN", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_SERMAN_MEX()")
		self:SetModProperty("F1_DOCMAN", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_DOCMAN_MEX()")
		self:SetModProperty("F1_UUIDREL", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_UUIDREL_MEX()")
	EndIf
	
Return

/*/{Protheus.doc} FormaPagoSAT
	Agrega propiedades para el campo F1_TPDOC
	@author luis.samaniego
	@since 07/11/2022
	@version version
	@param 	lView - logico 	- Indica si debe realizar las actualizaciones de la view.
				Falso 		- Actualiza la parte del model.
				Verdadero 	- Actualiza la parte de la view.
	@return
	/*/
Method FormaPagoSAT(lView As logical) Class InputFields
Default lView	:= .F.

	 If !lView
		self:SetModProperty("F1_TPDOC", MODEL_FIELD_VALID, InputFieldsMEX + ".VF1_TPDOC_MEX()")
		self:SetModProperty("F1_TPDOC", MODEL_FIELD_WHEN, InputFieldsMEX + ".WF1_TPDOC_MEX()")
		self:SetModProperty("F1_TPDOC", MODEL_FIELD_INIT, "'99'")
	EndIf

Return

/*/{Protheus.doc} VF1_UUID_MEX
	Función encargada de realizar las validaciones para el campo F1_UUID del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
		lVal - logico - indica si debe se realizada la validación.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_UUID_MEX(lVal As logical)
Local lValid := .T.	As logical

Default lVal := .F.

    If lVal
        lValid := VldUUID()
    EndIf

Return lValid

/*/{Protheus.doc} VF1_FECTIMB_MEX
	Función encargada de realizar las validaciones para el campo F1_FECTIMB del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FECTIMB_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIMBRE_MEX
	Función encargada de realizar las validaciones para el campo F1_TIMBRE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIMBRE_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_APROFOL_MEX
	Función encargada de realizar las validaciones para el campo F1_APROFOL del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_APROFOL_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_CERTFOL_MEX
	Función encargada de realizar las validaciones para el campo F1_CERTFOL del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CERTFOL_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_FECANTF_MEX
	Función encargada de realizar las validaciones para el campo F1_FECANTF del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FECANTF_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_RELSAT_MEX
	Función encargada de realizar las validaciones para el campo F1_RELSAT del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_RELSAT_MEX()
Local lValid	As logical

    lValid := Vazio() .or. (ValidF3I("S012", M->F1_RELSAT,1,2) .and. ValRetSat(M->F1_RELSAT ,"F1_RELSAT"))

Return lValid

/*/{Protheus.doc} VF1_USOCFDI_MEX
	Función encargada de realizar las validaciones para el campo F1_USOCFDI del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_USOCFDI_MEX()
Local lValid	As logical

    lValid := Vazio() .or. (ValidF3I("S013", M->F1_USOCFDI,1,3) .and. ValRetSat(M->F1_USOCFDI,"F1_USOCFDI"))

Return lValid

/*/{Protheus.doc} VF1_SERMAN_MEX
	Función encargada de realizar las validaciones para el campo F1_SERMAN del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERMAN_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_DOCMAN_MEX
	Función encargada de realizar las validaciones para el campo F1_DOCMAN del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DOCMAN_MEX()
Local lValid	As logical

    lValid := LxVDocSus(M->F1_SERMAN, M->F1_DOCMAN)

Return lValid

/*/{Protheus.doc} VF1_UUIDREL_MEX
	Función encargada de realizar las validaciones para el campo F1_UUIDREL del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_UUIDREL_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIPOPE_MEX
	Función encargada de realizar las validaciones para el campo F1_TIPOPE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPOPE_MEX()
Local lValid	As logical

    lValid := Vazio() .Or. (Pertence('123') .And. ValTipoOpe(1))

Return lValid

/*/{Protheus.doc} VF1_CVEPED_MEX
	Función encargada de realizar las validaciones para el campo F1_CVEPED del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CVEPED_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_CERORI_MEX
	Función encargada de realizar las validaciones para el campo F1_CERORI del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CERORI_MEX()
Local lValid	As logical

    lValid := Vazio() .Or. Pertence('01')

Return lValid

/*/{Protheus.doc} VF1_NUMCER_MEX
	Función encargada de realizar las validaciones para el campo F1_NUMCER del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_NUMCER_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_EXPCONF_MEX
	Función encargada de realizar las validaciones para el campo F1_EXPCONF del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_EXPCONF_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_INCOTER_MEX
	Función encargada de realizar las validaciones para el campo F1_INCOTER del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_INCOTER_MEX()
Local lValid	As logical

    lValid := Vazio() .Or. ExistCpo('SYJ',M->F1_INCOTER)

Return lValid

/*/{Protheus.doc} VF1_SUBDIV_MEX
	Función encargada de realizar las validaciones para el campo F1_SUBDIV del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SUBDIV_MEX()
Local lValid	As logical

    lValid := Vazio() .Or. Pertence ('01')

Return lValid

/*/{Protheus.doc} VF1_OBSCE_MEX
	Función encargada de realizar las validaciones para el campo F1_OBSCE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_OBSCE_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TCUSD_MEX
	Función encargada de realizar las validaciones para el campo F1_TCUSD del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TCUSD_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TOTUSD_MEX
	Función encargada de realizar las validaciones para el campo F1_TOTUSD del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TOTUSD_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_IDTRIB_MEX
	Función encargada de realizar las validaciones para el campo F1_IDTRIB del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_IDTRIB_MEX()
Local lValid	As logical

    lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_RESIDE_MEX
	Función encargada de realizar las validaciones para el campo F1_RESIDE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_RESIDE_MEX()
Local lValid	As logical

    lValid := Vazio() .Or. ExistCPO("SYA", M->F1_RESIDE)

Return lValid

/*/{Protheus.doc} VF1_TRASLA_MEX
	Función encargada de realizar las validaciones para el campo F1_TRASLA del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TRASLA_MEX()
Local lValid	As logical

    lValid := Vazio() .Or. EXISTCPO('SX5','XM'+M->F1_TRASLA)

Return lValid

/*/{Protheus.doc} WF1_FORNECE_MEX
	Función encargada de realizar la función When para el campo F1_FORNECE.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
		lCliente - logico - Indica si el campo está siendo usado para documentos de clientes.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_FORNECE_MEX(l103Visual as logical, l103Class as logical, lRemTrans as logical, lCliente As logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.
Default lCliente 	:= .F.

	lRet := WF1_FORNECE(l103Visual, l103Class, lRemTrans)

	If lRet .and. !lCliente
		lRet := LxWhenAdt()
	EndIf

Return lRet

/*/{Protheus.doc} WF1_LOJA_MEX
	Función encargada de realizar la función When para el campo F1_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
		lCliente - logico - Indica si el campo está siendo usado para documentos de clientes.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_LOJA_MEX(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.

	lRet := WF1_LOJA(l103Visual, l103Class, lRemTrans) .and. LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF1_MOEDA_MEX
	Función encargada de realizar la función When para el campo F1_MOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_MOEDA_MEX(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.

	lRet :=  WF1_MOEDA(l103Visual, l103Class, lRemTrans) .and. LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF1_TXMOEDA_MEX
	Función encargada de realizar la función When para el campo F1_TXMOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_TXMOEDA_MEX(l103Visual as logical, l103Class as logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.

	lRet :=  WF1_TXMOEDA(l103Visual, l103Class) .and. LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF1_SERIE_MEX
	Función encargada de realizar la función When para el campo F1_SERIE.
	Usada en remitos de transferencia.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_SERIE_MEX(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	As logical
Local lAltSerie := SuperGetMV("MV_ALTSER",,.T.) As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.

	lRet := WF1_SERIE(l103Visual, l103Class, lRemTrans) .and. Iif(lAltSerie,.T.,Iif(!Empty(M->F1_SERIE),.F.,.T.))

Return lRet

/*/{Protheus.doc} VF1_TPDOC_MEX
	Función encargada de realizar las validaciones para el campo F1_TPDOC.
	@type  Function
	@author luis.samaniego
	@since 07/11/2022
	@param
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPDOC_MEX() As logical
Local lValid := .T.	As logical

	lValid := Vazio() .or. ValidF3I("S005", M->F1_TPDOC,1,2)

Return lValid

/*/{Protheus.doc} WF1_TPDOC_MEX
	unción encargada de realizar la función When para el campo F1_TPDOC.
	@type  Function
	@author luis.samaniego
	@since 07/11/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_TPDOC_MEX() As logical
Local lRet	As logical

	lRet := .T.

Return lRet
