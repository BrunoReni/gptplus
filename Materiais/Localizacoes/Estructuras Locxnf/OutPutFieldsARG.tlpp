#include "tlpp-core.th"
#include "tlpp-object.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.arg

#Define OutPutFieldsARG "totvs.protheus.backoffice.outputfields.arg" 

/*/{Protheus.doc} ARGOutputFields
	Realiza la creación de la estructura de campos para el paí­s Arg.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll

    public DATA cPuntoVenta As character

    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method FacturaElectronicaSalidas()
    public Method VentaAsistidaSalidas()
    public Method ImpuestosSalidas()
    public Method FacturaExportacionSalidas()
    public Method ConsultaComprobantesSalidas()
	public Method PV()
    public Method Rg1415()
    public Method TPNFEXP()
	public Method TRANSP()
    public Method CAI()
    public Method CAE()
    public Method CAEE()
    public Method TipoAjuste()
    public Method IVAPOS()
	public Method CANJE()
    public Method WhenSerieArg()
	public Method VEHICL()
	public Method ACOPLA()
	public Method Periodo()
	public Method SERIEF3_ARG()
	public Method WhenCodBar()
	public Method CODBAR()
	public Method ValidacionCamposAll()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "ARG", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_PV", "F2_RG1415", "F2_CC", "F2_TABELA", "F2_PROVENT", ;
					"F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_EMCAEE", "F2_CAEE", "F2_IDIOMA", "F2_INCOTER", ;
					"F2_PERMISS", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T.)
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_PV", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_PROVENT", ;
						"F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", "F2_EMCAEE", "F2_CAEE", "F2_IDIOMA", ;
						"F2_INCOTER", "F2_PERMISS", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PV()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:FacturaExportacionSalidas()
		self:Rg1415()
		self:CAEE()
		self:TRANSP()
		self:CANJE()
		self:WhenSerieArg()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_PV", "F2_RG1415", "F2_CC", "F2_TABELA", "F2_PROVENT", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", ;
					"F2_EMCAEE", "F2_CAEE", "F2_IDIOMA", "F2_INCOTER", "F2_PERMISS", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", ;
					"F2_ADIC7", "F2_CANJE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T.)
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_PV", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_PROVENT", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", ;
						"F2_REFMOED", "F2_REFTAXA", "F2_EMCAEE", "F2_CAEE", "F2_IDIOMA", "F2_INCOTER", "F2_PERMISS", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", ;
						"F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PV()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:FacturaExportacionSalidas()
		self:Rg1415()
		self:CAEE()
		self:TRANSP()
		self:CANJE()
		self:WhenSerieArg()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

		If lView
		aFields := {"F2_PV", "F2_RG1415", "F2_CC", "F2_TIPOREM", "F2_LIQPROD", ;
					"F2_VEHICL", "F2_ACOPLA", "F2_PROVENT", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", ;
					"F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE" }

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T., , "FVS")
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_PV", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", ;
						"F2_VEHICL", "F2_ACOPLA", "F2_PROVENT", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", ;
						"F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PV()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:Rg1415()
		self:TRANSP()
		self:CANJE()
		self:VEHICL()
		self:ACOPLA()
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_PV", "F2_RG1415", "F2_CC", "F2_PROVENT", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", ;
					"F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T., , "FVS")
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_PV", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_PROVENT", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", ;
						"F2_REFTAXA", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PV()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:Rg1415()
		self:TRANSP()
		self:CANJE()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_PV", "F2_RG1415", "F2_CC", "F2_PROVENT", "F2_FEFIDDE", ;
					"F2_FEFIHTA", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_EMCAEE", "F2_CAEE", "F2_IDIOMA", ;
					"F2_INCOTER", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE", "F2_TPAJUS", "F2_RECPOS", "F2_IVAPOS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T., , "FVS")
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_PV", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_PROVENT", "F2_FEFIDDE", ;
						"F2_FEFIHTA", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", "F2_EMCAEE", "F2_CAEE", ;
						"F2_IDIOMA", "F2_INCOTER", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE", "F2_TPAJUS", "F2_RECPOS", "F2_IVAPOS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PV()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:FacturaExportacionSalidas()
		self:Rg1415()
		self:CAEE()
		self:TipoAjuste()
		self:IVAPOS()
		self:TRANSP()
		self:CANJE()
		self:Periodo()
		self:WhenSerieArg()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODBAR", "F2_RG1415", "F2_CC", "F2_VENCAI", "F2_CAI", "F2_QTDEFOL", ;
					"F2_PROVENT", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_ADIC5", "F2_ADIC61", ;
					"F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T., , "FVS")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CODBAR", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_VENCAI", "F2_CAI", ;
						"F2_QTDEFOL", "F2_PROVENT", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", ;
						"F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:Rg1415( ,.T.)
		self:CAI()
		self:TRANSP()
		self:CANJE()
		self:WhenSerieArg()
		self:WhenCodBar()
		self:CODBAR()
	EndIf 

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array
Local cAgente   := GetNewPar("MV_AGENTE", "   ") As character

Default lView	:= .F.

    If lView
		aFields := {"F2_CODBAR", "F2_RG1415", "F2_CC", "F2_VENCAI", "F2_CAI", "F2_QTDEFOL", "F2_PROVENT", "F2_ZONGEO", "F2_CONCOBR", "F2_TPNFEXP", ;
					"F2_IMPNOCF", "F2_CAE", "F2_VCTOCAE", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_ADIC5", ;
					"F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE", "F2_MODCONS", "F2_CODAUT", "F2_VALCONS", "F2_TPAJUS"}

		If SubStr(cAgente,6,1) == "S"
			aAdd(aFields, "F2_VALSUSS")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T., , "FVS")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CODBAR", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_MOEDA", "F2_TXMOEDA", "F2_VALSUSS", "F2_VENCAI", "F2_CAI", "F2_QTDEFOL", "F2_PROVENT", "F2_ZONGEO", "F2_CONCOBR", "F2_TPNFEXP", ;
						"F2_IMPNOCF", "F2_CAE", "F2_VCTOCAE", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", ;
						"F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE", "F2_MODCONS", "F2_CODAUT", "F2_VALCONS", "F2_TPAJUS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:ConsultaComprobantesSalidas()
		self:Rg1415( ,.T.)
		self:TPNFEXP()
		self:CAI( , .T.)
		self:CAE()
		self:TipoAjuste()
		self:TRANSP()
		self:CANJE()
		self:WhenSerieArg()
		self:WhenCodBar()
		self:CODBAR()

		If SubStr(cAgente,6,1) == "S"
			self:SetModProperty("F2_VALSUSS", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_VALSUSS_ARG()")
		EndIf
	ENdIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_PV", "F2_RG1415", "F2_CC", "F2_PROVENT", "F2_ZONGEO", "F2_CONCOBR", "F2_TPNFEXP", "F2_IMPNOCF", "F2_CAE", "F2_VCTOCAE", ;
					"F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_EMCAEE", "F2_CAEE", "F2_IDIOMA", "F2_INCOTER", ;
					"F2_PERMISS", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE", "F2_TPAJUS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T., , "FVS")
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_PV", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_PROVENT", "F2_ZONGEO", "F2_CONCOBR", "F2_TPNFEXP", "F2_IMPNOCF", "F2_CAE", "F2_VCTOCAE", ;
						"F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", "F2_EMCAEE", "F2_CAEE", "F2_IDIOMA", ;
						"F2_INCOTER", "F2_PERMISS", "F2_PAISENT", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE", "F2_TPAJUS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PV()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:FacturaExportacionSalidas()
		self:Rg1415()
		self:TPNFEXP()
		self:CAE()
		self:CAEE()
		self:TipoAjuste()
		self:TRANSP()
		self:CANJE()
		self:WhenSerieArg()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := { "F2_PROVENT",  "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", ;
					"F2_ADIC7", "F2_CANJE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", ;
						"F2_PROVENT", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", "F2_ADIC5", "F2_ADIC61", ;
						"F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:TRANSP()
		self:CANJE()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_PV", "F2_RG1415", "F2_CC", "F2_PROVENT", "F2_TPVENT", "F2_FECDSE", "F2_FECHSE", ;
					"F2_TRANSP", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(.T., , "FVS")
		self:SERIEF3_ARG(.T.)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_PV", "F2_SERIE", "F2_DOC", "F2_RG1415", "F2_CC", "F2_NATUREZ", ;
						"F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_PROVENT", "F2_DIACTB", "F2_TPVENT", "F2_FECDSE", ;
						"F2_FECHSE", "F2_TRANSP", "F2_REFMOED", "F2_REFTAXA", "F2_ADIC5", "F2_ADIC61", "F2_ADIC62", "F2_ADIC7", "F2_CANJE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PV()
		self:FacturaElectronicaSalidas()
		self:VentaAsistidaSalidas()
		self:ImpuestosSalidas()
		self:Rg1415()
		self:TRANSP()
		self:CANJE()
	EndIf
	
Return

/*/{Protheus.doc} FacturaElectronicaSalidas
	Agrega propiedades para los campos de factura electronica.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaElectronicaSalidas(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TPVENT", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_TPVENT_ARG()")
		If self:oModel:HasField("F2_TPVENT")
			aValues := self:oModel:GetProperty("F2_TPVENT",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TPVENT", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_TPVENT", MODEL_FIELD_INIT, "")
		EndIf

		self:SetModProperty("F2_FECDSE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_FECDSE_ARG()")

		self:SetModProperty("F2_FECHSE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_FECHSE_ARG()")
	EndIf

Return

/*/{Protheus.doc} VentaAsistidaSalidas
	Agrega propiedades para los campos de venta asistida.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method VentaAsistidaSalidas(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_ADIC5", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_ADIC5_ARG()")

		self:SetModProperty("F2_ADIC61", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_ADIC61_ARG()")

		self:SetModProperty("F2_ADIC62", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_ADIC62_ARG()")

		self:SetModProperty("F2_ADIC7", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_ADIC7_ARG()")
	EndIf

Return

/*/{Protheus.doc} ImpuestosSalidas
	Agrega propiedades para los campos de impuestos
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ImpuestosSalidas(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_PROVENT", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_PROVENT_ARG()")

		self:SetModProperty("F2_ZONGEO", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_ZONGEO_ARG()")

		self:SetModProperty("F2_CONCOBR", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_CONCOBR_ARG()")

		self:SetModProperty("F2_IMPNOCF", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_IMPNOCF_ARG()")
	EndIf

Return

/*/{Protheus.doc} FacturaExportacionSalidas
	Agrega propiedades para los campos de factura de exportación
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaExportacionSalidas(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_IDIOMA", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_IDIOMA_ARG()")
		If self:oModel:HasField("F2_IDIOMA")
			aValues := self:oModel:GetProperty("F2_IDIOMA",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_IDIOMA", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_IDIOMA", MODEL_FIELD_INIT, "")
		EndIf 

		self:SetModProperty("F2_INCOTER", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_INCOTER_ARG()")

		self:SetModProperty("F2_PERMISS", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_PERMISS_ARG()")

		self:SetModProperty("F2_PAISENT", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_PAISENT_ARG()")

		self:SetModProperty("F2_NFEXPOR", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_NFEXPOR_ARG()")
	EndIf

Return

/*/{Protheus.doc} ConsultaComprobantesSalidas
	Agrega propiedades para los campos de consulta de comprobantes.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ConsultaComprobantesSalidas(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_MODCONS", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_MODCONS_ARG()")
		If self:oModel:HasField("F2_MODCONS")
			aValues := self:oModel:GetProperty("F2_MODCONS",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_MODCONS", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_MODCONS", MODEL_FIELD_INIT, "")
		EndIf
		
		self:SetModProperty("F2_CODAUT", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_CODAUT_ARG()")

		self:SetModProperty("F2_VALCONS", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_VALCONS_ARG()")
	EndIf

Return

/*/{Protheus.doc} Rg1415
	Agrega propiedades para los campos de la Rg1415.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		lEdit - logico 	- Indica si el campo se puede editar
		cSF3  - caracter- 
	@return 
	/*/
Method Rg1415(lView As logical, lEdit As logical, cSF3 As character) Class OutPutFields

Default lView	:= .F.
Default lEdit := .F.
Default cSF3  := ""

	If lView
		If self:oView:HasField("F2_CC")
			self:oView:SetProperty("F2_CC",MVC_VIEW_LOOKUP,cSF3)
		EndIf
	Else
		self:SetModProperty("F2_RG1415", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_RG1415_ARG()")
		self:SetModProperty("F2_CC", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_CC_ARG()")
		self:SetModProperty("F2_CC", MODEL_FIELD_WHEN, self:lTos(lEdit))
	EndIf

Return

/*/{Protheus.doc} TPNFEXP
	Agrega propiedades para los campos F2_TPNFEXP.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPNFEXP(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TPNFEXP", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_TPNFEXP_ARG()")
		If self:oModel:HasField("F2_TPNFEXP")
			aValues := self:oModel:GetProperty("F2_TPNFEXP",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TPNFEXP", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_TPNFEXP", MODEL_FIELD_INIT, "") 
		EndIf
	EndIf
Return

/*/{Protheus.doc} CAI
	Agrega propiedades para los campos del CAI.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
        lTipDoc - logico - indica si se asigna la validación adicional
        nTipDc - numerico - indica numero de documento  en la validación VldCAIE
	@return 
	/*/
Method CAI(lView As logical, lTipDoc As logical) Class OutPutFields
Local lCodBar := .F. As logical

Default lView	:= .F.
Default lTipDoc := .F.

	If !lView
		lCodBar := self:oModel:HasField("F2_CODBAR")

		self:SetModProperty("F2_VENCAI", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_VENCAI_ARG(" + self:lToS(lTipDoc) + ")") 
		self:SetModProperty("F2_VENCAI", MODEL_FIELD_WHEN, OutPutFieldsARG + ".WF2_VENCAI_ARG(" + self:lToS(lCodBar) + ")")

		self:SetModProperty("F2_CAI", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_CAI_ARG(" + self:lToS(lTipDoc) + ", '" + StrZero(self:nNumDoc,2) + "')") 
		self:SetModProperty("F2_CAI", MODEL_FIELD_WHEN, OutPutFieldsARG + ".WF2_CAI_ARG(" + self:lToS(lCodBar) + ")")

		self:SetModProperty("F2_QTDEFOL", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_QTDEFOL_ARG()")
	EndIf

Return

/*/{Protheus.doc} PV
	Agrega propiedades para los campos de F2_PV.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method PV(lView As logical) Class OutPutFields
Local cInit     := ""   As character

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_PV", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_PV_ARG()")
		cInit := "'" + self:cPuntoVenta + "'"
		self:SetModProperty("F2_PV", MODEL_FIELD_INIT, cInit) 
		self:SetModProperty("F2_PV", MODEL_FIELD_WHEN, ".F.")
	EndIf

Return

/*/{Protheus.doc} TRANSP
	Agrega propiedades para los campos de F2_TRANSP.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TRANSP(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TRANSP", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_TRANSP_ARG()")
	EndIf

Return

/*/{Protheus.doc} VEHICL
	Agrega propiedades para los campos de F2_VEHICL.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method VEHICL(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_VEHICL", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_VEHICL_ARG()")
	EndIf

Return

/*/{Protheus.doc} ACOPLA
	Agrega propiedades para los campos de F2_ACOPLA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ACOPLA(lView As logical) Class OutPutFields

Default lView	:= .F.

	If !lView
    	self:SetModProperty("F2_ACOPLA", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_ACOPLA_ARG()")
	EndIf

Return

/*/{Protheus.doc} Periodo()
	Agrega propiedades para los campos de F2_CAE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Periodo(lView As logical) Class OutPutFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_FEFIDDE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_FEFIDDE_ARG()")

		self:SetModProperty("F2_FEFIHTA", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_FEFIHTA_ARG()")
	EndIf

Return

/*/{Protheus.doc} CAE
	Agrega propiedades para los campos de F2_CAE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CAE(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_CAE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_CAE_ARG()")

		self:SetModProperty("F2_VCTOCAE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_VCTOCAE_ARG()")
	EndIf

Return

/*/{Protheus.doc} CAEE
	Agrega propiedades para los campos de F2_CAEE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CAEE(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_CAEE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_CAEE_ARG()")
		self:SetModProperty("F2_CAEE", MODEL_FIELD_WHEN, ".F.")

		self:SetModProperty("F2_EMCAEE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_EMCAEE_ARG()")
		self:SetModProperty("F2_EMCAEE", MODEL_FIELD_WHEN, ".F.")
	EndIf

Return

/*/{Protheus.doc} TipoAjuste
	Agrega propiedades para los campos F2_TPAJUS.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TipoAjuste(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TPAJUS", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_TPAJUS_ARG()")
	EndIf
    
Return

/*/{Protheus.doc} IVAPOS
	Agrega propiedades para los campos de IVA posdatado.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method IVAPOS(lView As logical) Class OutPutFields

Default lView	:= .F.

	If !lView
    	self:SetModProperty("F2_RECPOS", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_RECPOS_ARG()")
    	self:SetModProperty("F2_IVAPOS", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_IVAPOS_ARG()")
	EndIf

Return

/*/{Protheus.doc} CANJE
	Agrega propiedades para los campos F2_CANJE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CANJE(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_CANJE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_CANJE_ARG()")
		If self:oModel:HasField("F2_CANJE")
			aValues := self:oModel:GetProperty("F2_CANJE",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_CANJE", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_CANJE", MODEL_FIELD_INIT, "")
		EndIf
	EndIf
    
Return

/*/{Protheus.doc} WhenSerieArg
	Agrega propiedades para los campos F2_SERIE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenSerieArg(lView As logical) Class OutPutFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_SERIE", MODEL_FIELD_WHEN, OutPutFieldsARG + ".WF2_SERIE_ARG()")
	EndIf

Return

/*/{Protheus.doc} WhenCodBar
	Agrega propiedades para los campos F2_CLIENTE/F2_LOJA/F2_DOC/F2_SERIE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenCodBar(lView As logical) Class OutPutFields
Local lCodBar	:= .F.  As logical

Default lView	:= .F.

	If !lView
		lCodBar := self:oModel:HasField("F2_CODBAR")
	
		self:SetModProperty("F2_CLIENTE", MODEL_FIELD_WHEN, OutPutFieldsARG + ".WF2_CLIENTE_ARG(" + self:lToS(lCodBar) + ")")
		self:SetModProperty("F2_LOJA", MODEL_FIELD_WHEN, OutPutFieldsARG + ".WF2_LOJA_ARG(" + self:lToS(lCodBar) + ")")
	EndIf

Return

/*/{Protheus.doc} CODBAR
	Agrega propiedades  para el campo F2_CODBAR.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CODBAR(lView As logical) Class OutPutFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_CODBAR", MODEL_FIELD_VALID, "LocxchkCB(M->F2_CODBAR,.T.,M->F2_ESPECIE)")
	EndIf

Return

/*/{Protheus.doc} ValidacionCamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ValidacionCamposAll(lView As logical) Class OutPutFields

Default lView	:= .F.

	
	If !lView
		self:SetModProperty("F2_DOC", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_DOC_ARG('" + StrZero(self:nNumDoc,2) + "', " + self:lToS(self:lAuto) + ")")

		self:SetModProperty("F2_SERIE", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_SERIE_ARG('" + StrZero(self:nNumDoc,2) + "')")

		self:SetModProperty("F2_EMISSAO", MODEL_FIELD_VALID, OutPutFieldsARG + ".VF2_EMISSAO_ARG('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return


/*/{Protheus.doc} VF2_SERIE_ARG
	Función encargada de realizar las validaciones para el campo F2_SERIE para Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
	/*/
Function VF2_SERIE_ARG(cNumDoc as character)
Local lValid := .T.	As logical

Default	cNumDoc := ""

	lValid := VF2_SERIE(cNumDoc)
	
	If lValid .and. SF2->(ColumnPos("F2_CODBAR")) > 0
		lValid := LocxSERIE('SF2',M->F2_CODBAR,M->F2_SERIE)
	EndIf
	
	If cNumDoc $ "01|02|06|11|50|52|54"
		lValid := lValid .and. LNF2VldSer()
	EndIf

	lValid := lValid .and. GrvRG1415()

Return lValid

/*/{Protheus.doc} VF2_DOC_ARG
	Función encargada de realizar las validaciones para el campo F2_DOC.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DOC_ARG(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.

	lValid := VF2_DOC(cNumDoc, lAuto)

	If lValid .and. cNumDoc $ "07"
		lValid := lValid .and. AutNumCai(M->F2_ESPECIE)
	EndIf

	lValid := GrvRG1415()

Return lValid

/*/{Protheus.doc} VF2_EMISSAO_ARG
	Función encargada de realizar las validaciones para el campo F2_EMISSAO del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_EMISSAO_ARG(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""

	lValid := VF2_EMISSAO(cNumDoc)

	lValid := lValid .and. LocEmisPro()

Return lValid


/*/{Protheus.doc} VF2_RG1415_ARG
	Función encargada de realizar las validaciones para el campo F2_RG1415 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_RG1415_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_CC_ARG
	Función encargada de realizar las validaciones para el campo F2_CC del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CC_ARG()
Local lValid	As logical

	lValid := VldCC(M->F2_CLIENTE,M->F2_LOJA,M->F2_CC,M->F2_RG1415)

Return lValid

/*/{Protheus.doc} VF2_VENCAI_ARG
	Función encargada de realizar las validaciones para el campo F2_VENCAI del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_VENCAI_ARG(lTipDoc As logical)
Local lValid := .T.	As logical

Default lTipDoc := .F.

	If lTipDoc
		lValid := VenctoCAI(M->F2_EMISSAO,M->F2_VENCAI)
	EndIf

Return lValid

/*/{Protheus.doc} VF2_CAI_ARG
	Función encargada de realizar las validaciones para el campo F2_CAI del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
		lTipDoc - logico - indica si se asigna la validación adicional
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CAI_ARG(lTipDoc As logical, cNumDoc As character)
Local lValid := .T.	As logical
Local nTipDc	As numeric

Default lTipDoc := .F.
Default cNumDoc	:= ""

	If lTipDoc .and. TamSX3("F2_CAI")[1] == 15
		nTipDc := Iif(cNumDoc=="10",1,Iif(cNumDoc=="07",3,2))

		lValid := VldCAIE(alltrim(SA2->A2_CGC),Alltrim(M->F2_SERIE),nTipDc, Subs(Alltrim(M->F2_DOC),1,4),M->F2_CAI,M->F2_VENCAI)
	EndIf

Return lValid


/*/{Protheus.doc} VF2_QTDEFOL_ARG
	Función encargada de realizar las validaciones para el campo F2_QTDEFOL del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_QTDEFOL_ARG()
Local lValid	As logical

	lValid := NaoVazio()

Return lValid

/*/{Protheus.doc} VF2_PROVENT_ARG
	Función encargada de realizar las validaciones para el campo F2_PROVENT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_PROVENT_ARG()
Local lValid	As logical

	lValid := LocProvEnt()

Return lValid


/*/{Protheus.doc} VF2_ZONGEO_ARG
	Función encargada de realizar las validaciones para el campo F2_ZONGEO del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ZONGEO_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo("SX5","ZG"+M->F2_ZONGEO)

Return lValid

/*/{Protheus.doc} VF2_CONCOBR_ARG
	Función encargada de realizar las validaciones para el campo F2_CONCOBR del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CONCOBR_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo("SX5","CO"+M->F2_CONCOBR)

Return lValid

/*/{Protheus.doc} VF2_TPNFEXP_ARG
	Función encargada de realizar las validaciones para el campo F2_TPNFEXP del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPNFEXP_ARG()
Local lValid	As logical

	lValid := Pertence(' 12')

Return lValid

/*/{Protheus.doc} VF2_IMPNOCF_ARG
	Función encargada de realizar las validaciones para el campo F2_IMPNOCF del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_IMPNOCF_ARG()
Local lValid	As logical

	lValid := positivo()

Return lValid

/*/{Protheus.doc} VF2_CAE_ARG
	Función encargada de realizar las validaciones para el campo F2_CAE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CAE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_VCTOCAE_ARG
	Función encargada de realizar las validaciones para el campo F2_VCTOCAE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_VCTOCAE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_FEFIDDE_ARG
	Función encargada de realizar las validaciones para el campo F2_FEFIDDE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FEFIDDE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_FEFIHTA_ARG
	Función encargada de realizar las validaciones para el campo F2_FEFIHTA del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FEFIHTA_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TPVENT_ARG
	Función encargada de realizar las validaciones para el campo F2_TPVENT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPVENT_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. Pertence("124")

Return lValid

/*/{Protheus.doc} VF2_FECDSE_ARG
	Función encargada de realizar las validaciones para el campo F2_FECDSE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FECDSE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_FECHSE_ARG
	Función encargada de realizar las validaciones para el campo F2_FECHSE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FECHSE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TRANSP_ARG
	Función encargada de realizar las validaciones para el campo F2_TRANSP del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TRANSP_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_EMCAEE_ARG
	Función encargada de realizar las validaciones para el campo F2_EMCAEE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_EMCAEE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_CAEE_ARG
	Función encargada de realizar las validaciones para el campo F2_CAEE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CAEE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_IDIOMA_ARG
	Función encargada de realizar las validaciones para el campo F2_IDIOMA del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_IDIOMA_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. Pertence("123")

Return lValid

/*/{Protheus.doc} VF2_INCOTER_ARG
	Función encargada de realizar las validaciones para el campo F2_INCOTER del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_INCOTER_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo('SYJ',M->F2_INCOTER)

Return lValid

/*/{Protheus.doc} VF2_PERMISS_ARG
	Función encargada de realizar las validaciones para el campo F2_PERMISS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_PERMISS_ARG()
Local lValid	As logical
	
	lValid := .T.

Return lValid


/*/{Protheus.doc} VF2_PAISENT_ARG
	Función encargada de realizar las validaciones para el campo F2_PAISENT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_PAISENT_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo('SYA',M->F2_PAISENT)

Return lValid


/*/{Protheus.doc} VF2_NFEXPOR_ARG
	Función encargada de realizar las validaciones para el campo F2_NFEXPOR del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NFEXPOR_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_ADIC5_ARG
	Función encargada de realizar las validaciones para el campo F2_ADIC5 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ADIC5_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. EXISTCPO('SX5','XJ'+M->F2_ADIC5)

Return lValid

/*/{Protheus.doc} VF2_ADIC61_ARG
	Función encargada de realizar las validaciones para el campo F2_ADIC61 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ADIC61_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. EXISTCPO('SX5','OC'+M->F2_ADIC61)

Return lValid

/*/{Protheus.doc} VF2_ADIC62_ARG
	Función encargada de realizar las validaciones para el campo F2_ADIC62 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ADIC62_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_ADIC7_ARG
	Función encargada de realizar las validaciones para el campo F2_ADIC7 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ADIC7_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. EXISTCPO('SX5','XK'+M->F2_ADIC7)

Return lValid


/*/{Protheus.doc} VF2_CANJE_ARG
	Función encargada de realizar las validaciones para el campo F2_CANJE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CANJE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid


/*/{Protheus.doc} VF2_MODCONS_ARG
	Función encargada de realizar las validaciones para el campo F2_MODCONS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MODCONS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_CODAUT_ARG
	Función encargada de realizar las validaciones para el campo F2_CODAUT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CODAUT_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_VALCONS_ARG
	Función encargada de realizar las validaciones para el campo F2_VALCONS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_VALCONS_ARG()
Local lValid	As logical

	lValid := Afipcons()

Return lValid

/*/{Protheus.doc} VF2_TPAJUS_ARG
	Función encargada de realizar las validaciones para el campo F2_TPAJUS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPAJUS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_RECPOS_ARG
	Función encargada de realizar las validaciones para el campo F2_RECPOS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_RECPOS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_IVAPOS_ARG
	Función encargada de realizar las validaciones para el campo F2_IVAPOS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_IVAPOS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_VEHICL_ARG
	Función encargada de realizar las validaciones para el campo F2_VEHICL del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_VEHICL_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_ACOPLA_ARG
	Función encargada de realizar las validaciones para el campo F2_ACOPLA del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ACOPLA_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_PV_ARG
	Función encargada de realizar las validaciones para el campo F2_PV del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_PV_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_VALSUSS_ARG
	Función encargada de realizar las validaciones para el campo F2_VALSUSS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_VALSUSS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} WF2_SERIE_ARG
	Función encargada de realizar la función When para el campo F2_SERIE.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_SERIE_ARG()
Local lRet	As logical
Local lAltSerie := SuperGetMV("MV_ALTSER",,.T.) As logical

	lRet := Iif(lAltSerie,.T.,Iif(!Empty(M->F2_SERIE),.F.,.T.))

Return lRet

/*/{Protheus.doc} SERIEF3_ARG
	Agrega propiedades para el campo F2_SERIE
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERIEF3_ARG(lView As logical) Class OutPutFields

Default lView	:= .F.

	If lView
		self:oView:SetProperty("F2_SERIE",MVC_VIEW_LOOKUP,"X501PV")
	EndIf

Return

/*/{Protheus.doc} WF2_VENCAI_ARG
	Función encargada de realizar la función When para el campo F2_VENCAI.
	@type  Function
	@author raul.medina
	@since 
	@param
		lCodBar - logico - indica si existe el campo F2_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_VENCAI_ARG(lCodBar As logical)
Local lRet	:= .T. As logical

Default lCodBar := .F.

	If lCodBar
		lRet := Empty(M->F2_CODBAR)
	EndIf

Return lRet

/*/{Protheus.doc} WF2_CAI_ARG
	Función encargada de realizar la función When para el campo F2_CAI.
	@type  Function
	@author raul.medina
	@since 
	@param
		lCodBar - logico - indica si existe el campo F2_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_CAI_ARG(lCodBar As logical)
Local lRet	:= .T. As logical

Default lCodBar := .F.

	If lCodBar
		lRet := Empty(M->F2_CODBAR)
	EndIf

Return lRet

/*/{Protheus.doc} WF2_CLIENTE_ARG
	Función encargada de realizar la función When para el campo F2_CLIENTE.
	@type  Function
	@author raul.medina
	@since 
	@param
		lCodBar - logico - indica si existe el campo F2_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_CLIENTE_ARG(lCodBar As logical)
Local lRet	:= .T. As logical

Default lCodBar := .F.

	If lCodBar
		lRet := Empty(M->F2_CODBAR)
	EndIf

Return lRet

/*/{Protheus.doc} WF2_LOJA_ARG
	Función encargada de realizar la función When para el campo F2_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
		lCodBar - logico - indica si existe el campo F2_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_LOJA_ARG(lCodBar As logical)
Local lRet	:= .T. As logical

Default lCodBar := .F.

	If lCodBar
		lRet := Empty(M->F2_CODBAR)
	EndIf

Return lRet

