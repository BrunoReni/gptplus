#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.rus

#Define OutputFieldsRUS "totvs.protheus.backoffice.outputfields.rus"

/*/{Protheus.doc} OutPutFields
	Realiza la creación de la estructura de campos para el paí­s .
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll


    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method RealDate()
	public Method Currency()
	public Method ConventionalUnits()
	public Method Consignor()
	public Method ConsignorCode()
	public Method Consignee()
	public Method ConsigneeCode()
	public Method LegalContrCode()
	public Method TypeOfReturn()
	public Method Customer()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
		self:Customer()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

		If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_TIPOREM"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_TIPOREM", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
		self:Customer()
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
		self:Customer()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
		self:Customer()
	EndIf 

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
	ENdIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_DTSAIDA", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_DTSAIDA", "F2_MOEDA", "F2_TXMOEDA", "F2_REFTAXA", "CTO_SIMB", "F2_CONUNI", "F2_CNORVEN", "F2_CNEECLI", "F2_CNORCOD", "F2_CNEECOD", "F2_CNORBR", "F2_CNEEBR", "F2_CNTID", "F2_F5QUID", "F2_F5QDESC", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:RealDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignor()
		self:ConsignorCode()
		self:Consignee()
		self:ConsigneeCode()
		self:LegalContrCode()
		self:TypeOfReturn()
	EndIf
	
Return

/*/{Protheus.doc} RealDate
	Metodo para agregar propiedades al campo F2_DTSAIDA.
	@author luis.samaniego
	@since 26/10/2022
	@version version
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	/*/
Method RealDate(lView As logical) Class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_DTSAIDA", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_DTSAIDA_RUS()")
	EndIf
Return

/*/{Protheus.doc} VF2_DTSAIDA_RUS
	Función para validaciones del campo F2_DTSAIDA.
	@type  Function
	@author luis.samaniego
	@since 26/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DTSAIDA_RUS()
Local lValid As logical

	lValid  :=  LocXVal('F2_DTSAIDA')

Return lValid

/*/{Protheus.doc} Currency
	Metodo para agregar propiedades a los campos F2_MOEDA, F2_TXMOEDA, CTO_SIMB.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method Currency(lView As logical) Class OutPutFields
Local cInit As Character
Local cWhen As Character

Default lView := .F.

	If lView
		//F2_MOEDA
		self:oView:SetProperty("F2_MOEDA",MVC_VIEW_LOOKUP, "CTONUM")
		
		//CTO_SIMB
		self:oView:AddField('CTO_SIMB', '18', AllTrim(FWX3Titulo("CTO_SIMB")), AllTrim(FWX3Titulo("CTO_SIMB")), , 'GET', GetSX3Cache("CTO_SIMB", "X3_PICTURE"))

		//F2_REFMOED
		self:oView:RemoveField("F2_REFMOED")
	Else
		//F2_MOEDA
		cInit := ''
		self:SetModProperty("F2_MOEDA", MODEL_FIELD_INIT, cInit)
		self:SetModProperty("F2_MOEDA", MVC_MODEL_VALUES, {})
		self:SetModProperty("F2_MOEDA", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_MOEDA_RUS()")

		//CTO_SIMB
		self:oModel:AddField(AllTrim(FWX3Titulo("CTO_SIMB")), AllTrim(FWX3Titulo("CTO_SIMB")),"CTO_SIMB","C",GetSX3Cache("CTO_SIMB", "X3_TAMANHO"),/*nDec*/,/*valid*/,FWBuildFeature(STRUCT_FEATURE_WHEN,".F."),,,)
		cWhen := ".F."
		self:SetModProperty("CTO_SIMB", MODEL_FIELD_WHEN, cWhen)
		cInit := "Posicione('CTO', 1, xFilial('CTO')+StrZero(M->F2_MOEDA, TamSX3('CTO_MOEDA')[1]),'CTO_SIMB')"
		self:SetModProperty("CTO_SIMB", MODEL_FIELD_INIT, cInit)

		//F2_TXMOEDA
		self:SetModProperty("F2_TXMOEDA", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_TXMOEDA_RUS()")
	EndIf

Return

/*/{Protheus.doc} WF2_MOEDA_RUS
	Función encargada de realizar la función When para el campo F2_MOEDA.
	@type  Function
	@author luis.samaniego
	@since 12/11/2022
	@param param_name, param_type, param_descr
	@return  lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_MOEDA_RUS()
Local lRet  As logical

	lRet := RUXXTS05() .AND. EMPTY(M->F2_CNTID)

Return lRet

/*/{Protheus.doc} VF2_TXMOEDA_RUS
	Función para validaciones del campo F2_TXMOEDA.
	@type  Function
	@author luis.samaniego
	@since 26/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TXMOEDA_RUS()
Local lValid As logical

	lValid := VF2_TXMOEDA()
	lValid := lValid .And. EXCRT467N()

Return lValid

/*/{Protheus.doc} ConventionalUnits
	Metodo para agregar propiedades al campo F2_CONUNI.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method ConventionalUnits(lView As logical) Class OutPutFields
Local cInit  As Character

Default lView := .F.

	If !lView
		self:SetModProperty("F2_CONUNI", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CONUNI_RUS()")
		self:SetModProperty("F2_CONUNI", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CONUNI_RUS()")
		cInit := '"2"'
        self:SetModProperty("F2_CONUNI", MODEL_FIELD_INIT, cInit)
	EndIf
Return

/*/{Protheus.doc} VF2_CONUNI_RUS
	Función para validaciones del campo F2_CONUNI.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CONUNI_RUS()
Local lValid As logical

	lValid := Pertence('12')

Return lValid

/*/{Protheus.doc} WF2_CONUNI_RUS
	Función encargada de realizar la función When para el campo F2_CONUNI.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CONUNI_RUS()
Local lRet As logical

	lRet := RUXXTS05() .And. EMPTY(M->F2_CNTID)
	                       
Return lRet

/*/{Protheus.doc} Consignor
	Metodo para agregar propiedades al campo F2_CNORVEN.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method Consignor(lView As logical) Class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_CNORVEN", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CNORVEN_RUS()")
		self:SetModProperty("F2_CNORVEN", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNORVEN_RUS()")
		cInit := '"1"'
		self:SetModProperty("F2_CNORVEN", MODEL_FIELD_INIT, cInit)
	EndIf
Return

/*/{Protheus.doc} VF2_CNORVEN_RUS
	Función para validaciones del campo F2_CNORVEN.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CNORVEN_RUS()
Local lValid As logical

	lValid := Pertence('12')

Return lValid

/*/{Protheus.doc} WF2_CNORVEN_RUS
	Función encargada de realizar la función When para el campo F2_CNORVEN.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CNORVEN_RUS()
Local lRet As logical

	lRet := RUXXTS04("D2_COD")

Return lRet

/*/{Protheus.doc} Consignee
	Metodo para agregar propiedades al campo F2_CNEECLI.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method Consignee(lView As logical) Class OutPutFields
Local cInit  As Character

Default lView := .F.

	If !lView
		self:SetModProperty("F2_CNEECLI", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CNEECLI_RUS()")
		self:SetModProperty("F2_CNEECLI", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNEECLI_RUS()")
		cInit := '"1"'
		self:SetModProperty("F2_CNEECLI", MODEL_FIELD_INIT, cInit)
	EndIf
Return

/*/{Protheus.doc} VF2_CNEECLI_RUS
	Función para validaciones del campo F2_CNEECLI.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CNEECLI_RUS()
Local lValid As logical

	lValid := Pertence('12')

Return lValid

/*/{Protheus.doc} WF2_CNEECLI_RUS
	Función encargada de realizar la función When para el campo F2_CNEECLI.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CNEECLI_RUS()
Local lRet As logical

	lRet := RUXXTS04("D2_COD")

Return lRet

/*/{Protheus.doc} ConsignorCode
	Metodo para agregar propiedades al campo F2_CNORCOD.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method ConsignorCode(lView As logical) Class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_CNORCOD", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CNORCOD_RUS()")
		self:SetModProperty("F2_CNORCOD", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNORCOD_RUS()")
		self:SetModProperty("F2_CNORBR", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CNORBR_RUS()")
		self:SetModProperty("F2_CNORBR", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNORBR_RUS()")
	EndIf
Return

/*/{Protheus.doc} VF2_CNORCOD_RUS
	Función para validaciones del campo F2_CNORCOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CNORCOD_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA2", M->F2_CNORCOD + Alltrim(M->F2_CNORBR))

Return lValid

/*/{Protheus.doc} WF2_CNORCOD_RUS
	Función encargada de realizar la función When para el campo F2_CNORCOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CNORCOD_RUS()
Local lRet As logical

	lRet := M->F2_CNORVEN == "2"

Return lRet

/*/{Protheus.doc} VF2_CNORBR_RUS
	Función para validaciones del campo F2_CNORBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CNORBR_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA2", M->F2_CNORCOD + M->F2_CNORBR)

Return lValid

/*/{Protheus.doc} WF2_CNORBR_RUS
	Función encargada de realizar la función When para el campo F2_CNORBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CNORBR_RUS()
Local lRet As logical

	lRet := M->F2_CNORVEN == "2"

Return lRet

/*/{Protheus.doc} ConsigneeCode
	Metodo para agregar propiedades al campo F2_CNEECOD.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method ConsigneeCode(lView As logical) Class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_CNEECOD", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CNEECOD_RUS()")
		self:SetModProperty("F2_CNEECOD", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNEECOD_RUS()")
		self:SetModProperty("F2_CNEEBR", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CNEEBR_RUS()")
		self:SetModProperty("F2_CNEEBR", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNEEBR_RUS()")
	EndIf
Return

/*/{Protheus.doc} VF2_CNEECOD_RUS
	Función para validaciones del campo F2_CNEECOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CNEECOD_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA1", M->F2_CNEECOD + Alltrim(M->F2_CNEEBR))

Return lValid

/*/{Protheus.doc} WF2_CNEECOD_RUS
	Función encargada de realizar la función When para el campo F2_CNEECOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CNEECOD_RUS()
Local lRet As logical

	lRet := M->F2_CNEECLI == "2"

Return lRet

/*/{Protheus.doc} VF2_CNEEBR_RUS
	Función para validaciones del campo F2_CNEEBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CNEEBR_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA1", M->F2_CNEECOD + M->F2_CNEEBR)

Return lValid

/*/{Protheus.doc} WF2_CNEEBR_RUS
	Función encargada de realizar la función When para el campo F2_CNEEBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CNEEBR_RUS()
Local lRet As logical

	lRet := M->F2_CNEECLI == "2"

Return lRet

/*/{Protheus.doc} LegalContrCode
	Metodo para agregar propiedades al campo F2_CNTID, F2_F5QUID, F2_F5QDESC.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method LegalContrCode(lView As logical) Class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_CNTID", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CNTID_RUS()")
		self:SetModProperty("F2_CNTID", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNTID_RUS()")
		self:SetModProperty("F2_F5QUID", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNTID_RUS()")
		self:SetModProperty("F2_F5QDESC", MODEL_FIELD_WHEN, OutputFieldsRUS + ".WF2_CNTID_RUS()")
	EndIf
Return

/*/{Protheus.doc} VF2_CNTID_RUS
	Función para validaciones del campo F2_CNTID.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CNTID_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("F5Q", M->F2_CNTID,2) .And. LocXVal('F2_CNTID')

Return lValid

/*/{Protheus.doc} WF2_CNTID_RUS
	Función encargada de realizar la función When para el campo F2_CNTID.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function WF2_CNTID_RUS()
Local lRet As logical

	lRet := RUXXTS05()

Return lRet

/*/{Protheus.doc} TypeOfReturn
	Metodo para agregar propiedades al campo F2_TIPORET.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method TypeOfReturn(lView As logical) Class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_TIPORET", MODEL_FIELD_OBRIGAT, .T.)
	EndIf
Return

/*/{Protheus.doc} Customer
	Metodo para agregar propiedades al campo F2_CLIENTE
	@author luis.samaniego
	@since 12/11/2022
	@version version
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method Customer(lView As logical) Class OutPutFields
Default lView := .F.

	If !lView
		self:SetModProperty("F2_CLIENTE", MODEL_FIELD_VALID, OutputFieldsRUS + ".VF2_CLIENTE_RUS(" + self:lToS(self:lClient) + ")")
	EndIf
Return

/*/{Protheus.doc} VF2_CLIENTE_RUS
	Función para validaciones del campo F2_CLIENTE
	@type  Function
	@author luis.samaniego
	@since 12/11/2022
	@param lClient - Logical - .T. para cliente / .F. para proveedor
	@return return_var, return_type, return_description
	/*/
Function VF2_CLIENTE_RUS(lClient) As Logical
Local lValid As logical

Default lClient := .F.

	If lClient
		lValid := VF2_CLIENTE()
		If FindFunction("RU05XFN031")
			lValid := lValid .And. RU05XFN031(.T.)
		EndIf
	EndIf

Return lValid
