#include "tlpp-object.th"
#INCLUDE 'FWMVCDEF.CH'

/*/{Protheus.doc} Fields
	Clase con los metodos utilizados para tratamientos de las clases de creación de campos de entrada y salida.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class Fields
    public data cTable      As character
    public data lViewNoUs   As logical
    public data lVirtual    As logical
    public data lClient     As logical
    public data lModel      As logical
    public data lAuto       As logical
    public data lInsert     As logical
    public data lEdit       As logical
    public data lDelete     As logical
    public data oModel      As object
    public data oView       As object
    public data aFieldsInit As array

    public Method New() constructor
    public Method AddFields()
    public Method GetFields()
    public Method CreateJson()
    public Method AddFieldsAd()
    public Method BlocToStr()
    public Method SetModProperty()
    public Method AlterOrder()
    public Method GetMonedas()
    public Method GetModel()
    public Method SetModel()
    public Method GetView()
    public Method SetView()
    public Method lToS()
    public Method LxValid()
    public Method UserValid()
    public Method JsonFields()
    public Method jsonFile()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(cTable As character, lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical) Class Fields

    ::cTable     := cTable
    ::lViewNoUs  := lViewNoUs
    ::lVirtual   := lVirtual
    ::lModel     := lModel
    ::lInsert    := lInsert 
    ::lEdit      := lEdit
    ::lDelete    := lDelete
    ::aFieldsInit:= {}

Return Self

/*/{Protheus.doc} GetFields
	Función utilizada para regresar un arreglo preparado para la locxnf.
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return aFields - Arreglo con los campos
	/*/
Method GetFields() Class Fields
Local aFields   := {}   As array
Local nX        := 0    As numeric
Local cField    := ""   As character
Local lCombo    := .F.  As logical
Local aCombo    := {}   As Array
Local cPicture  := ""   As character
Local cContext  := ""   As character
Local lInit     := .F.  As logical
Local jsonFields        As json 

    //Array usado para informar campos que no se debe retirar el inicializador al visualizar/eliminar.
    AADD(self:aFieldsInit, "cNome")
    //Creación de objeto json a partir del arreglo aFieldsInit para el uso de hasProperty. 
    jsonFields := self:CreateJson(self:aFieldsInit)

    For nX := 1 To Len(self:oView:aFields)
        cField := self:oView:aFields[nX][1]
        aCombo := self:oModel:GetProperty(cField,MODEL_FIELD_VALUES)
        lCombo := ValType(aCombo) == "A" .and. Len(aCombo)>0
        cPicture := self:oView:GetProperty(cField,MVC_VIEW_PICT)
        cContext := IIf(self:oModel:GetProperty(cField,MODEL_FIELD_VIRTUAL),"V","R")
        lInit   := Iif(self:lInsert, .T., jsonFields:hasProperty(AllTrim( cField ))) 
        aAdd(aFields, {self:oModel:GetProperty(cField,MODEL_FIELD_TITULO ),; //Titulo
                        cField,; //Campo
                        Iif(!Empty(cPicture),cPicture,),; //Picture
                        self:oModel:GetProperty(cField,MODEL_FIELD_TAMANHO ),; //Tamaño
                        self:oModel:GetProperty(cField,MODEL_FIELD_DECIMAL ),; //Decimal
                        self:LxValid(cField),; //Valid
                        ,; //Usado //self:oModel:GetProperty(cCampo,)
                        self:oModel:GetProperty(cField,MODEL_FIELD_TIPO ),; //Tipo //
                        self:cTable,; //Arquivo
                        cContext,; //Context 
                        Iif(lInit,self:BlocToStr(self:oModel:GetProperty(cField,MODEL_FIELD_INIT )),),; //Contenido
                        ,; //Orden
                        self:oModel:GetProperty(cField,MODEL_FIELD_OBRIGAT ),; //Obligatorio *
                        ,; //ObjPai
                        ,; //Change *
                        self:oView:GetProperty(cField,MVC_VIEW_LOOKUP ),; //F3
                        self:BlocToStr(self:oModel:GetProperty(cField,MODEL_FIELD_WHEN)),; //When 
                        ,; //Top
                        ,; //Left
                        lCombo,; //lCombo
                        aCombo,; // Items
                        ,; //RetCpo 
                        }; //bInitPad
                )
    Next

Return aFields

/*/{Protheus.doc} LxValid
	Función utilizada para generar obetener la validación del campo y agregar la validación de usuario
	@type  Method
	@author raul.medina
	@since 
	@param 
        cField - Caracter - Campo a ser procesado
	@return cValid - Validación a ser usada en la locxnf
	/*/
Method LxValid(cField As Character) Class Fields
Local cValid    :=  "" As Character
Local cUserValid:=  "" As Character

Default cField := ""
    
    If !Empty(cField)
        cValid := self:BlocToStr(self:oModel:GetProperty(cField,MODEL_FIELD_VALID ))
        cUserValid := self:UserValid(cField)
        If !Empty(cUserValid)
            cValid += IIf(!Empty(cValid), " .and. ", "") + cUserValid
        EndIf
    EndIf

Return cValid

/*/{Protheus.doc} CreateJson
	Función utilizada para generar un objeto json utilizado para validar existencia de campos.
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return Json - Json con los campos
	/*/
Method CreateJson(aJson As Array) Class Fields
Local json              As json
Local nX        := 0    As numeric
Local cjson     := ""   As Character

    cjson := '{'
    For nX := 1 To Len(aJson)

        cjson += Iif(nX>1,',','') + '"' + aJson[nX] + '":""'
    Next
    cjson += '}'

    json := JsonObject():New()
    json:FromJson(cjson)

Return Json

/*/{Protheus.doc} AddFieldsAd
	Función utilizada agregar campos a los objetos de model y view de acuerdo al arreglo de campos recibido.
	@type  Method
	@author raul.medina
	@since 
	@param aFieldsAd - Campos a ser considerados para agregar
	@return 
	/*/
Method AddFieldsAd(aFieldsAd As Array) Class Fields
Local oView             As Object
Local aFields   := {}   As array
Local nX        := 0    As numeric
Local jsonFields        As json 

    //Creación de objeto json a partir del arreglo aFields para el uso de hasProperty.
    jsonFields := self:CreateJson(aFieldsAd)

    oView  := FWFormStruct(2, self:cTable, { | cField | jsonFields:hasProperty(AllTrim( cField )) }, self:lViewNoUs )

    aFields := oView:GetFields()
    For nX := 1 To Len(aFields)
        aadd(self:oView:aFields, aFields[nX])
    Next

Return

/*/{Protheus.doc} BlocToStr
	Función utilizada hacer la conversión de un bloque de código de validacion, when o Ini a string
	@type  Method
	@author raul.medina
	@since 
	@param bBloc: Bloque de código
	@return cValid - Validación en string.
	/*/
Method BlocToStr(bBloc As codeblock) Class Fields
Local cBloc     := ""   As Character
Local cValid    := ""   As Character
Local nInicio   := 0    As numeric
Local nFin      := 0    As numeric

Default bBloc := {||}

    If ValType(bBloc) == "B"
        cBloc := GetCbSource(bBloc)
    EndIf

    If !Empty(cBloc)

        nInicio := At(":=(", cBloc) + 2
        nFin    := RAt("),FWCloseCpo", cBloc)

        If nInicio > 0 .and. nFin > 0
            cValid  := Substr(cBloc, nInicio + 1, (nFin - 1) - (nInicio))
        EndIf
        
        cValid := AllTrim(cValid)
    EndIf

Return cValid

/*/{Protheus.doc} SetModProperty
	Función utilizada para realizar la asiganación de propiedades al model, 
    contiene tratamiento para asignación de de validacion, when o ini en formato de bloque de código.
	@type  Method
	@author raul.medina
	@since 
	@param cField: Campo al cual se le asigna la propiedad.
            nProperty: número de propiedad a ser asiganada, de acuerdo a propiedades de objeto en MVC.
            xProperty: Propiedad a ser asignada
	@return 
	/*/
Method SetModProperty(cField As character, nProperty As numeric, xProperty As variant) Class Fields
Default cField      := ""
Default nProperty   := 0


    If self:oModel:HasField(cField)
        Do Case
            Case nProperty == 7 //Valid
                self:oModel:SetProperty(cField,nProperty,FWBuildFeature(STRUCT_FEATURE_VALID,xProperty))
            Case nProperty == 8 //When
                self:oModel:SetProperty(cField,nProperty,FWBuildFeature(STRUCT_FEATURE_WHEN,xProperty))
            Case nProperty == 11 //Init
                self:oModel:SetProperty(cField,nProperty,FWBuildFeature(STRUCT_FEATURE_INIPAD,xProperty))
            Otherwise
                self:oModel:SetProperty(cField,nProperty,xProperty)
        EndCase
    EndIf
Return

/*/{Protheus.doc} AlterOrder
	Función utilizada para ordenar los campos de la view de acuerdo al arreglo recibido.
	@type  Method
	@author raul.medina
	@since 
	@param aFields - Arreglo con los campos
	@return 
	/*/
Method AlterOrder(aFields As array) Class Fields
Local nX            := 0
Local nOrder        := 0

Default aFields     := {} 

    For nX := 1 To Len(aFields)
        If self:oView:HasField(aFields[nX])
            nOrder ++
            self:oView:SetProperty(aFields[nX],MVC_VIEW_ORDEM, StrZero(nOrder,3))
        EndIf
    Next
    ASORT(self:oView:aFields, , , { | x,y | x[2] < y[2] } )

Return

/*/{Protheus.doc} GetMonedas
	Función utilizada para obtener el arreglo correspondiente a monedas.
	@type  Method
	@author raul.medina
	@since 
	@param aValues - Arreglo con las monedas
	@return 
	/*/
Method GetMonedas() Class Fields
Local aValues   := {}   As array
Local nX        := 0    As numeric

    For nX	:=	1 To MoedFin()
        If (!Empty(GetMV("MV_MOEDA"+Alltrim(STR(nX)))))
            If self:lModel
                AAdd(aValues,nX)
            Else
                AAdd(aValues,Alltrim(STR(nX))+"="+GetMV("MV_MOEDA"+Alltrim(STR(nX))))
            ENDIF
        Else
            Exit
        Endif
    Next

Return aValues

/*/{Protheus.doc} GetModel
	Función utilizada obtener el modelo.
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return oModel - Objeto de tipo FWFormStruct para el model
	/*/
Method GetModel() Class Fields

Return self:oModel

/*/{Protheus.doc} SetModel
	Función utilizada establecer el modelo.
	@type  Method
	@author raul.medina
	@since 
	@param oModelSet - Objeto de tipo FWFormStruct para el model
	@return 
	/*/
Method SetModel(oModelSet As object) Class Fields

    self:oModel := oModelSet

Return

/*/{Protheus.doc} GetView
	Función utilizada obtener la view.
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return oViewSet - Objeto de tipo FWFormStruct para la view.
	/*/
Method GetView() Class Fields

Return self:oView

/*/{Protheus.doc} SetView
	Función utilizada establecer la view.
	@type  Method
	@author raul.medina
	@since 
	@param oViewSet - Objeto de tipo FWFormStruct para la view.
	@return 
	/*/
Method SetView(oViewSet As object) Class Fields

    self:oView := oViewSet

Return

/*/{Protheus.doc} lToS
	Función utilizada hacer la conversión de una variable logica a string
	@type  Method
	@author raul.medina
	@since 
	@param lCondition - Variable logica
	@return cCondition -  string 
	/*/
Method lToS(lCondition As logical) Class Fields
Local cCondition := "" As character

    cCondition := Iif(lCondition, '.T.', '.F.')

Return cCondition

/*/{Protheus.doc} UserValid
	Función utilizada para obtener la validación de usuario de un campo
	@type  Method
	@author raul.medina
	@since 
	@param cField - Caracter - Campo para buscar validación de usuario
	@return cValid -  string - Validación de usuario para el campo
	/*/
Method UserValid(cField As character) Class Fields
Local cValid    := ""  As character

Default cField := ""

    If !Empty(cField)
        cValid := GetSx3Cache(cField,"X3_VLDUSER")
    EndIf

Return cValid

/*/{Protheus.doc} JsonFields
	
	@type  Method
	@author raul.medina
	@since 
	@param aFields - array - arreglo con la estructura de los campos
	@return ojson - json - Json con la estructura de campos
	/*/
Method JsonFields(aFields As Array) Class Fields
Local ojson             As json
Local nX        := 0    As numeric
Local nY        := 0    As numeric
Local nPos      := 0    As numeric
Local aJson     := {}   As array

Default aFields := {}

    ojson := JsonObject():new()

    For nX := 1 To Len(aFields)
        Aadd(aJson,JsonObject():new())
        For nY := 1 to Len(aFields[nX])
            nPos := Len(aJson)
            aJson[nPos]['title' ]       := aFields[nX][1]
            aJson[nPos]['field' ]       := aFields[nX][2]
            aJson[nPos]['pinctue' ]     := aFields[nX][3]
            aJson[nPos]['size' ]        := aFields[nX][4]
            aJson[nPos]['decimal' ]     := aFields[nX][5]
            aJson[nPos]['valid' ]       := aFields[nX][6]
            aJson[nPos]['use' ]         := aFields[nX][7]
            aJson[nPos]['type' ]        := aFields[nX][8]
            aJson[nPos]['file' ]        := aFields[nX][9]
            aJson[nPos]['context' ]     := aFields[nX][10]
            aJson[nPos]['content' ]     := aFields[nX][11]
            aJson[nPos]['order' ]       := aFields[nX][12]
            aJson[nPos]['required' ]    := aFields[nX][13]
            aJson[nPos]['ObjPai' ]      := aFields[nX][14]
            aJson[nPos]['change' ]      := aFields[nX][15]
            aJson[nPos]['f3' ]          := aFields[nX][16]
            aJson[nPos]['when' ]        := aFields[nX][17]
            aJson[nPos]['top' ]         := aFields[nX][18]
            aJson[nPos]['left' ]        := aFields[nX][19]
            aJson[nPos]['lCombo' ]      := aFields[nX][20]
            aJson[nPos]['items' ]       := aFields[nX][21]
            aJson[nPos]['RetCpo' ]      := aFields[nX][22]
            aJson[nPos]['bInitPad' ]    := aFields[nX][23]
        Next
    Next

    ojson:Set(aJson)

Return oJson

/*/{Protheus.doc} jsonFile
	
	@type  Method
	@author raul.medina
	@since 
	@param 
        ojson - json - Json con la estructura de campos
        cpath - caracter - ruta donde será guardado el archivo
        cFile - caracter - nombre del archivo
	@return 
	/*/
Method jsonFile(ojson As Json, cPath As character, cFile As character) Class Fields
Local nHandle       As numeric
Local cJson         As character

Default cPath   := ""
Default cFile   := ""


    nHandle := FCreate( cPath + cFile ) 
    If !(nHandle == -1 )
        cJson := ojson:toJson()
        FWrite( nHandle, cJson, Len(cJson) )
        FClose(nHandle)
    EndIf

Return
