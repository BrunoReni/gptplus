#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.par

#Define OutPutFieldsPAR "totvs.protheus.backoffice.outputfields.par" 

/*/{Protheus.doc} OutPutFields
	Realiza la creación de la estructura de campos para el paí­s Paraguay.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll


    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method SERIE2()
	public Method TIPONF()
	public Method NUMTIM() 
	public Method FacturaElectronicaNC()
	public Method MOTEMIR()
	public Method TPTRANS()
	public Method DOCEL()
	public Method Transporte()
	public Method TIPNOTA()
	public Method CamposAll()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "PAR", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_NUMTIM", "F2_TABELA", "F2_TIPNOTA", "F2_SERIE2", "F2_TIPONF", "F2_TPTRANS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_TIPNOTA", "F2_SERIE2", "F2_TIPONF", "F2_TPTRANS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
		self:SERIE2( , .F.)
		self:TIPONF()
		self:TPTRANS()
		self:TIPNOTA()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_NUMTIM", "F2_TABELA"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

		If lView
		aFields := {"F2_NUMTIM", "F2_TIPOREM", "F2_LIQPROD", "F2_TRANSP", "F2_VEICULO", "F2_FECDSE", "F2_FECHSE", "F2_INCOTER", "F2_TPRESFL", "F2_KM", "F2_SERIE2", "F2_TIPONF", "F2_MOTEMIR"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", "F2_TRANSP", "F2_VEICULO", "F2_FECDSE", "F2_FECHSE", "F2_INCOTER", "F2_TPRESFL", "F2_KM", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_SERIE2", "F2_TIPONF", "F2_MOTEMIR"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
		self:SERIE2( , .F.)
		self:TIPONF()
		self:MOTEMIR()
		self:Transporte()
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMTIM"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMTIM", "F2_SERIE2", "F2_TIPREF"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_SERIE2", "F2_TIPREF"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
		self:SERIE2( , .F.)
		self:FacturaElectronicaNC()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMTIM"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
	EndIf 

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMTIM", "F2_DOCEL"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_DOCEL"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
		self:DOCEL()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMTIM"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMTIM"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMTIM", "F2_TRANSP", "F2_VEICULO", "F2_FECDSE", "F2_FECHSE", "F2_INCOTER", "F2_TPRESFL", "F2_KM", "F2_SERIE2", "F2_TIPONF", "F2_MOTEMIR"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_NUMTIM", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_TRANSP", "F2_VEICULO", "F2_FECDSE", "F2_FECHSE", "F2_INCOTER", "F2_TPRESFL", "F2_KM", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_SERIE2", "F2_TIPONF", "F2_MOTEMIR"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:NUMTIM()
		self:SERIE2()
		self:TIPONF()
		self:MOTEMIR()
		self:Transporte()
	EndIf
	
Return


/*/{Protheus.doc} SERIE2
	Agrega propiedades para el campo F2_SERIE2
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		cWhen - caracter- When para indicar si el campo es editable
	@return 
	/*/
Method SERIE2(lView As logical, lWhen As logical) Class OutPutFields

Default lView	:= .F.
Default lWhen 	:= .T.

    If !lView

		self:SetModProperty("F2_SERIE2", MODEL_FIELD_WHEN, OutPutFieldsPAR + ".WF2_SERIE2_PAR(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F2_SERIE2", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_SERIE2_PAR()") 
    EndIf

Return

/*/{Protheus.doc} FacturaElectronicaNC()
	Agrega propiedades para los campos de la factura electronica en las notas de credito
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaElectronicaNC(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TIPREF", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_TIPREF_PAR()")
    EndIf

Return

/*/{Protheus.doc} TIPONF
	Agrega propiedades para el campo F2_TIPONF
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPONF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TIPONF", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_TIPONF_PAR()") 
    EndIf

Return

/*/{Protheus.doc} NUMTIM
	Agrega propiedades para el campo F2_NUMTIM
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NUMTIM(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_NUMTIM", MODEL_FIELD_WHEN, OutPutFieldsPAR + ".WF2_NUMTIM_PAR()") 
    EndIf

Return

/*/{Protheus.doc} MOTEMIR
	Agrega propiedades para el campo F2_MOTEMIR
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method MOTEMIR(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_MOTEMIR", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_MOTEMIR_PAR()") 
    EndIf

Return

/*/{Protheus.doc} TPTRANS
	Agrega propiedades para el campo F2_TPTRANS
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPTRANS(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TPTRANS", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_TPTRANS_PAR()") 
    EndIf

Return

/*/{Protheus.doc} DOCEL
	Agrega propiedades para el campo F2_DOCEL
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method DOCEL(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_DOCEL", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_DOCEL_PAR()") 
		If self:oModel:HasField("F2_DOCEL")
			aValues := self:oModel:GetProperty("F2_DOCEL",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_DOCEL", MVC_MODEL_VALUES, aValues) 
		EndIf 
		self:SetModProperty("F2_DOCEL", MODEL_FIELD_INIT, "2")
    EndIf

Return

/*/{Protheus.doc} Transporte
	Agrega propiedades para los campos de transporte de para remitos.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Transporte(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TRANSP", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_TRANSP_PAR()")
		self:SetModProperty("F2_VEICULO", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_VEICULO_PAR()")
		self:SetModProperty("F2_FECDSE", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_FECDSE_PAR()")
		self:SetModProperty("F2_FECHSE", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_FECHSE_PAR()")
		self:SetModProperty("F2_INCOTER", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_INCOTER_PAR()")
		self:SetModProperty("F2_TPRESFL", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_TPRESFL_PAR()")
		self:SetModProperty("F2_KM"		, MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_KM_PAR()")

    EndIf

Return

/*/{Protheus.doc} TIPNOTA
	Agrega propiedades para el campo F2_TIPNOTA
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPNOTA(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TIPNOTA", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_TIPNOTA_PAR()") 
		If self:oModel:HasField("F2_TIPNOTA")
			aValues := self:oModel:GetProperty("F2_TIPNOTA",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TIPNOTA", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_TIPNOTA", MODEL_FIELD_INIT, "")
		EndIf 
    EndIf

Return

/*/{Protheus.doc} CamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CamposAll(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_DOC", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_DOC_PAR('" + StrZero(self:nNumDoc,2) + "', " + self:lToS(self:lAuto) + ")")

		self:SetModProperty("F2_SERIE", MODEL_FIELD_VALID, OutPutFieldsPAR + ".VF2_SERIE_PAR('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} VF2_DOC_PAR
	Función encargada de realizar las validaciones para el campo F2_DOC del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
		lAuto - logico - Indica si es una rutina automatica
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DOC_PAR(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.
	
	lValid := VF2_DOC(cNumDoc, lAuto) .and. CtrFolios(xFilial("SF2"),M->F2_SERIE,M->F2_ESPECIE,M->F2_DOC) .AND. LXEXSER2()

Return lValid

/*/{Protheus.doc} VF2_SERIE_PAR
	Función encargada de realizar las validaciones para el campo F2_SERIE del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERIE_PAR(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""
	
	lValid := VF2_SERIE(cNumDoc) .and. LxExSer2()                                                             

Return lValid

/*/{Protheus.doc} VF2_SERIE2_PAR
	Función encargada de realizar las validaciones para el campo F2_SERIE2 del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERIE2_PAR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TIPREF_PAR
	Función encargada de realizar las validaciones para el campo F2_TIPREF del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPREF_PAR()
Local lValid	As logical

	lValid := Vazio() .OR. ValidF3I("S021", M->F2_TIPREF,1,1)

Return lValid

/*/{Protheus.doc} VF2_TIPNOTA_PAR
	Función encargada de realizar las validaciones para el campo F2_TIPNOTA del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPNOTA_PAR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TIPONF_PAR
	Función encargada de realizar las validaciones para el campo F2_TIPONF del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPONF_PAR()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S019", M->F2_TIPONF,1,1)

Return lValid

/*/{Protheus.doc} VF2_MOTEMIR_PAR
	Función encargada de realizar las validaciones para el campo F2_MOTEMIR del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MOTEMIR_PAR()
Local lValid	As logical

	lValid := Vazio() .OR. ValidF3I("S022", M->F2_MOTEMIR,1,2)

Return lValid

/*/{Protheus.doc} VF2_TPTRANS_PAR
	Función encargada de realizar las validaciones para el campo F2_TPTRANS del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPTRANS_PAR()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S016", M->F2_TPTRANS,1,2)

Return lValid

/*/{Protheus.doc} VF2_DOCEL_PAR
	Función encargada de realizar las validaciones para el campo F2_DOCEL del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DOCEL_PAR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TRANSP_PAR
	Función encargada de realizar las validaciones para el campo F2_TRANSP del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TRANSP_PAR()
Local lValid	As logical

	lValid := NAOVAZIO() .AND. ExistCpo("SA4",M->F2_TRANSP,1)

Return lValid

/*/{Protheus.doc} VF2_VEICULO_PAR
	Función encargada de realizar las validaciones para el campo F2_VEICULO del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_VEICULO_PAR()
Local lValid	As logical

	lValid := NAOVAZIO() .AND. ExistCpo("DA3",M->F2_VEICULO,1)

Return lValid

/*/{Protheus.doc} VF2_FECDSE_PAR
	Función encargada de realizar las validaciones para el campo F2_FECDSE del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FECDSE_PAR()
Local lValid	As logical

	lValid := NAOVAZIO()

Return lValid

/*/{Protheus.doc} VF2_FECHSE_PAR
	Función encargada de realizar las validaciones para el campo F2_FECHSE del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FECHSE_PAR()
Local lValid	As logical

	lValid := NAOVAZIO()

Return lValid

/*/{Protheus.doc} VF2_INCOTER_PAR
	Función encargada de realizar las validaciones para el campo F2_INCOTER del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_INCOTER_PAR()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S010", M->F2_INCOTER,1,3)

Return lValid

/*/{Protheus.doc} VF2_KM_PAR
	Función encargada de realizar las validaciones para el campo F2_TPRESFL del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_KM_PAR()
Local lValid := .T.	As logical

Return lValid

/*/{Protheus.doc} VF2_TPRESFL_PAR
	Función encargada de realizar las validaciones para el campo F2_TPRESFL del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPRESFL_PAR()
Local lValid	As logical

	lValid := Vazio() .OR. ValidF3I("S027", M->F2_TPRESFL,1,1)

Return lValid

/*/{Protheus.doc} WF2_NUMTIM_PAR
	Función encargada de realizar la función When para el campo F2_NUMTIM .
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_NUMTIM_PAR()
Local lRet	:= .F. As logical

Return lRet

/*/{Protheus.doc} WF2_SERIE2_PAR
	Función encargada de realizar la función When para el campo F2_SERIE2 .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - logical - 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_SERIE2_PAR(lWhen As logical)
Local lRet	:= .T. As logical

Default lWhen := .T.

	lRet := lWhen //!(funname() $ 'MATA467N/MATA462N/MATA465N')

Return lRet
