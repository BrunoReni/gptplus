#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.eua

#Define OutputFieldsEUA "totvs.protheus.backoffice.outputfields.eua"

/*/{Protheus.doc} OutPutFields
	Realiza la creación de la estructura de campos para el paí­s .
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll


    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method EntidadEntrega()
	public Method EntidadEmision()
	public Method TipoActividad()
	public Method TipoFlete()
EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TABELA", "F2_CODMUN", "F2_EST", "F2_PROVENT", "F2_ZONGEO", "F2_TPACTIV", "F2_TPFRETE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_CODMUN", "F2_EST", "F2_PROVENT", "F2_ZONGEO", "F2_TPACTIV", "F2_TPFRETE", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
		self:TipoActividad()
		self:TipoFlete()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TABELA", "F2_CODMUN", "F2_EST", "F2_PROVENT", "F2_ZONGEO", "F2_TPACTIV", "F2_TPFRETE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_CODMUN", "F2_EST", "F2_PROVENT", "F2_ZONGEO", "F2_TPACTIV", "F2_TPFRETE", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
		self:TipoActividad()
		self:TipoFlete()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TIPOREM"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODMUN", "F2_EST", "F2_PROVENT", "F2_ZONGEO", "F2_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_CODMUN", "F2_EST", "F2_PROVENT", "F2_ZONGEO", "F2_TPACTIV", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
		self:TipoActividad()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf 

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	ENdIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return

/*/{Protheus.doc} EntidadEntrega
	Metodo para agregar propiedades al campo F2_CODMUN, F2_EST.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			lWhen - logico - Indica si el campo(s) puede ser editado.
	@return
	/*/
Method EntidadEntrega(lView As logical, lWhen As logical) Class OutPutFields
Default lView := .F.
Default lWhen := .T.

	If !lView
		self:SetModProperty("F2_CODMUN", MODEL_FIELD_WHEN, OutputFieldsEUA + ".WF2_CODMUN_EUA()")
		self:SetModProperty("F2_CODMUN", MODEL_FIELD_VALID, OutputFieldsEUA + ".VF2_CODMUN_EUA()")
		self:SetModProperty("F2_EST", MODEL_FIELD_WHEN, OutputFieldsEUA + ".WF2_EST_EUA(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F2_EST", MODEL_FIELD_VALID, OutputFieldsEUA + ".VF2_EST_EUA()")
	EndIf
Return

/*/{Protheus.doc} VF2_CODMUN_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F2_CODMUN.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CODMUN_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("CC2", M->F2_CODMUN,3) .And. MaFisRef("NF_CODMUN","MT100",M->F2_CODMUN) .AND. LlnVal()
	
Return lValid

/*/{Protheus.doc} EntidadEmision
	Metodo para agregar propiedades a los campos F2_PROVENT, F2_ZONGEO.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			lWhen - logico - Indica si el campo(s) puede ser editado.
	@return 
	/*/
Method EntidadEmision(lView As logical, lWhen As logical) Class OutPutFields
Default lView := .F.
Default lWhen := .T.

	If !lView
		self:SetModProperty("F2_PROVENT", MODEL_FIELD_WHEN, OutputFieldsEUA + ".WF2_PROVENT_EUA()")
		self:SetModProperty("F2_PROVENT", MODEL_FIELD_VALID, OutputFieldsEUA + ".VF2_PROVENT_EUA()")
		self:SetModProperty("F2_ZONGEO", MODEL_FIELD_WHEN, OutputFieldsEUA + ".WF2_ZONGEO_EUA(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F2_ZONGEO", MODEL_FIELD_VALID, OutputFieldsEUA + ".VF2_ZONGEO_EUA()")
	EndIf
Return

/*/{Protheus.doc} VF2_EST_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F2_EST.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_EST_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("SX5","12"+M->F2_EST)

Return lValid

/*/{Protheus.doc} VF2_PROVENT_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F2_PROVENT.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_PROVENT_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("CC2",M->F2_PROVENT,3) .and. MaFisRef("NF_PROVENT","MT100",M->F2_PROVENT) .AND. LlnVal()

Return lValid

/*/{Protheus.doc} VF2_ZONGEO_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F2_ZONGEO.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ZONGEO_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("SX5","12"+M->F2_ZONGEO)

Return lValid

/*/{Protheus.doc} TipoActividad
	Metodo para agregar propiedades al campo F2_TPACTIV.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			lWhen - logico - Indica si el campo(s) puede ser editado.
	@return 
	/*/
Method TipoActividad(lView As logical, lWhen As logical) Class OutPutFields
Default lView := .F.
Default lWhen := .T.

	If !lView
		self:SetModProperty("F2_TPACTIV", MODEL_FIELD_WHEN, OutputFieldsEUA + ".WF2_TPACTIV_EUA(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F2_TPACTIV", MODEL_FIELD_VALID, OutputFieldsEUA + ".VF2_TPACTIV_EUA()")
	EndIf
Return

/*/{Protheus.doc} VF2_TPACTIV_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F2_TPACTIV.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPACTIV_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("CCN",M->F2_EST+M->F2_TPACTIV,1) .AND. MaFisRef("NF_TPACTIV","MT100",M->F2_TPACTIV)

Return lValid

/*/{Protheus.doc} WF2_CODMUN_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F2_CODMUN.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_CODMUN_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF2_EST_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F2_EST.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_EST_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF2_PROVENT_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F2_PROVENT.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_PROVENT_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF2_ZONGEO_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F2_ZONGEO.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_ZONGEO_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF2_TPACTIV_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F2_TPACTIV.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_TPACTIV_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} TipoFlete
	Metodo para agregar propiedades al campo F2_TPFRETE.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			lWhen - logico - Indica si el campo(s) puede ser editado.
	@return
	/*/
Method TipoFlete(lView As logical, lWhen As logical) Class OutPutFields
Local aValues As Array

Default lView := .F.
Default lWhen := .T.

	If !lView
		If self:oModel:HasField("F2_TPFRETE")
			aValues := self:oModel:GetProperty("F2_TPFRETE",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TPFRETE", MODEL_FIELD_VALUES, aValues)
			self:SetModProperty("F2_TPFRETE", MODEL_FIELD_INIT, "") 
		EndIf
		self:SetModProperty("F2_TPFRETE", MODEL_FIELD_WHEN, OutputFieldsEUA + ".WF2_TPFRETE_EUA(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F2_TPFRETE", MODEL_FIELD_VALID, OutputFieldsEUA + ".VF2_TPFRETE_EUA()")
	EndIf
	
Return

/*/{Protheus.doc} WF2_TPFRETE_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F2_TPFRETE.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_TPFRETE_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} VF2_TPFRETE_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F2_TPFRETE.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPFRETE_EUA()
Local lValid As logical

	lValid := Vazio() .Or. pertence("CFTS")

Return lValid
