#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.par

#Define	InputFieldsPAR "totvs.protheus.backoffice.inputfields.par"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país Paraguay.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

	public DATA lAutoFact as logical

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()

	public Method Serie()
	public Method SERIE2()
	public Method AUTOFAC()
	public Method DOCEL()
	public Method TIPNOTA()
	public Method TIPREF()
	public Method NUMTIM()
	public Method CamposAll()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields
    _Super:New( "PAR", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT", "F1_AUTOFAC", "F1_DOCEL", "F1_TIPNOTA"}

		//Adición de campos a la view de la clase Fields
		self:AddFieldsAd(aFields)
		If self:lAutoFact
			self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,"SERNF")
		EndIf

		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_AUTOFAC", "F1_DOCEL", "F1_TIPNOTA"}

   		self:AlterOrder(aOrdFields)
	else
		self:CamposAll()
		self:AUTOFAC( , Iif(self:lAutoFact,"1","2"))
		self:SERIE2( , .F.)
		self:DOCEL(  , , Iif(self:lAutoFact,".F.",".T."))
		self:TIPNOTA()
		self:NUMTIM()
	EndIf

Return

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    
	If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT", "F1_AUTOFAC", "F1_DOCEL"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_AUTOFAC", "F1_DOCEL"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:AUTOFAC( , "2")
		self:SERIE2( , .F.)
		self:DOCEL()
		self:NUMTIM()
	EndIf

Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT", "F1_AUTOFAC", "F1_DOCEL"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_AUTOFAC", "F1_DOCEL"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)

	Else
		self:CamposAll()
		self:AUTOFAC( , "2")
		self:SERIE2( , .F.)
		self:DOCEL()
		self:NUMTIM()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT", "F1_AUTOFAC", "F1_DOCEL"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_AUTOFAC", "F1_DOCEL"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:AUTOFAC( , "2")
		self:SERIE2( , .F.)
		self:DOCEL()
		self:NUMTIM()
	EndIf
    	
Return 

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2()
		self:NUMTIM()
	EndIf

Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2()
		self:NUMTIM()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_GERAPED", "F1_TIPREF"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_TIPREF"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:TIPREF()
		self:SERIE2( , .F.)
		self:NUMTIM()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT", "F1_GERAPED"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2( , .F.)
		self:NUMTIM()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2()
		self:NUMTIM()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT", "F1_DOCEL"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_DOCEL"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:DOCEL()
		self:SERIE2()
		self:NUMTIM()
	EndIf

Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")
		
		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2()
		self:NUMTIM()
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2()
		self:NUMTIM()
	EndIf
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2()
		self:NUMTIM()
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_NUMTIM", "F1_SERIE2", "F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_NUMTIM", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB",}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:CamposAll()
		self:SERIE2()
		self:NUMTIM()
	EndIf
	
Return

/*/{Protheus.doc} Serie
	Agrega propiedades para el campo F1_SERIE
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Serie(lView As logical, cSF3 as Character) Class InputFields

Default lView	:= .F.
Default cSF3 := ""

    If lView
		If !Empty(cSF3)
			self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,cSF3)
		EndIf
    EndIf

Return

/*/{Protheus.doc} SERIE2
	Agrega propiedades para el campo F1_SERIE2
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		cWhen - caracter- When para indicar si el campo es editable
	@return 
	/*/
Method SERIE2(lView As logical, lWhen As logical) Class InputFields

Default lView	:= .F.
Default lWhen	:= .T.

    If !lView
		self:SetModProperty("F1_SERIE2", MODEL_FIELD_WHEN, InputFieldsPAR + ".WF1_SERIE2_PAR(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F1_SERIE2", MODEL_FIELD_VALID, InputFieldsPAR + ".VF1_SERIE2_PAR()") 
    EndIf

Return

/*/{Protheus.doc} AUTOFAC
	Agrega propiedades para el campo F1_AUTOFAC
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		cInit - caracter- Inicializador estandar
	@return 
	/*/
Method AUTOFAC(lView As logical, cInit As Character) Class InputFields

Default lView	:= .F.
Default cInit	:= "2"

    If !lView
		self:SetModProperty("F1_AUTOFAC", MODEL_FIELD_WHEN, InputFieldsPAR + ".WF1_AUTOFAC_PAR()")
		self:SetModProperty("F1_AUTOFAC", MODEL_FIELD_INIT, cInit) 
		self:SetModProperty("F1_AUTOFAC", MODEL_FIELD_VALID, InputFieldsPAR + ".VF1_AUTOFAC_PAR()") 
    EndIf

Return

/*/{Protheus.doc} DOCEL
	Agrega propiedades para el campo F1_DOCEL
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		cInit - caracter- Inicializador estandar
		cWhen - caracter- When para indicar si el campo es editable
	@return 
	/*/
Method DOCEL(lView As logical, cInit As Character, cWhen As Character) Class InputFields
Local aValues   := {}   As array

Default lView	:= .F.
Default cInit	:= "2"
Default cWhen 	:= ""

    If !lView
		If !Empty(cWhen)
			self:SetModProperty("F1_DOCEL", MODEL_FIELD_WHEN, cWhen)
		EndIf
		self:SetModProperty("F1_DOCEL", MODEL_FIELD_INIT, cInit)
		self:SetModProperty("F1_DOCEL", MODEL_FIELD_VALID, InputFieldsPAR + ".VF1_DOCEL_PAR()")
		If self:oModel:HasField("F1_DOCEL")
			aValues := self:oModel:GetProperty("F1_DOCEL",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_DOCEL", MVC_MODEL_VALUES, aValues) 
		EndIf 
    EndIf

Return

/*/{Protheus.doc} TIPNOTA
	Agrega propiedades para el campo F1_TIPNOTA
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPNOTA(lView As logical) Class InputFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_TIPNOTA", MODEL_FIELD_VALID, InputFieldsPAR + ".VF1_TIPNOTA_PAR()") 
		If self:oModel:HasField("F1_TIPNOTA")
			aValues := self:oModel:GetProperty("F1_TIPNOTA",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_TIPNOTA", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F1_TIPNOTA", MODEL_FIELD_INIT, "")
		EndIf 
    EndIf

Return

/*/{Protheus.doc} TIPREF
	Agrega propiedades para el campo F1_TIPREF
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPREF(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_TIPREF", MODEL_FIELD_VALID, InputFieldsPAR + ".VF1_TIPREF_PAR()") 
    EndIf

Return

/*/{Protheus.doc} NUMTIM
	Agrega propiedades para el campo F1_NUMTIM
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NUMTIM(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_NUMTIM", MODEL_FIELD_WHEN, InputFieldsPAR + ".WF1_NUMTIM_PAR()") 
    EndIf

Return

/*/{Protheus.doc} CamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CamposAll(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_DOC", MODEL_FIELD_VALID, InputFieldsPAR + ".VF1_DOC_PAR('" + StrZero(self:nNumDoc,2) + "', " + self:lToS(self:lAuto) + ")")

		self:SetModProperty("F1_SERIE", MODEL_FIELD_VALID, InputFieldsPAR + ".VF1_SERIE_PAR('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} VF1_DOC_PAR
	Función encargada de realizar las validaciones para el campo F1_DOC del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
		lAuto - logico - Indica si es una rutina automatica
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DOC_PAR(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.
	
	lValid := VF1_DOC(cNumDoc, lAuto) .and. CtrFolios(xFilial("SF1"),M->F1_SERIE,M->F1_ESPECIE,M->F1_DOC) .AND. LXEXSER2()

Return lValid

/*/{Protheus.doc} VF1_SERIE_PAR
	Función encargada de realizar las validaciones para el campo F1_SERIE del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE_PAR(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""
	
	lValid := VF1_SERIE(cNumDoc) .and. LxExSer2()                                                             

Return lValid


/*/{Protheus.doc} VF1_AUTOFAC_PAR
	Función encargada de realizar las validaciones para el campo F1_AUTOFAC del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_AUTOFAC_PAR()
Local lValid	As logical

	lValid := Vazio() .Or. Pertence('12')

Return lValid

/*/{Protheus.doc} VF1_SERIE2_PAR
	Función encargada de realizar las validaciones para el campo F1_SERIE2 del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE2_PAR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_DOCEL_PAR
	Función encargada de realizar las validaciones para el campo F1_DOCEL del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DOCEL_PAR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIPNOTA_PAR
	Función encargada de realizar las validaciones para el campo F1_TIPNOTA del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPNOTA_PAR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIPREF_PAR
	Función encargada de realizar las validaciones para el campo F1_TIPREF del país Paraguay.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPREF_PAR()
Local lValid	As logical

	lValid := Vazio() .OR. ValidF3I("S021", M->F1_TIPREF,1,1)

Return lValid

/*/{Protheus.doc} WF1_AUTOFAC_PAR
	Función encargada de realizar la función When para el campo F1_AUTOFAC.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_AUTOFAC_PAR()
Local lRet	:= .F. As logical

	//lRet := If(TYPE('CA100FOR')=='C',!Empty(ca100For),.F.) se deja comentado ya que no debe poder editarse el campo.

Return lRet

/*/{Protheus.doc} WF1_SERIE2_PAR
	Función encargada de realizar la función When para el campo F1_SERIE2 .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_SERIE2_PAR(lWhen As logical)
Local lRet	:= .T. As logical

Default lWhen := .T.

	lRet := lWhen//!(funname() $ 'MATA462N/MATA465N')

Return lRet

/*/{Protheus.doc} WF1_NUMTIM_PAR
	Función encargada de realizar la función When para el campo F1_NUMTIM .
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_NUMTIM_PAR()
Local lRet	:= .F. As logical

Return lRet
