#Include 'tlpp-core.th'
#Include 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.rus

#Define InputFieldsRUS "totvs.protheus.backoffice.inputfields.rus"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país Rusia.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()

	public Method IssueDate()
	public Method Currency()
	public Method ConventionalUnits()
	public Method Consignor()
	public Method ConsignorCode()
	public Method Consignee()
	public Method ConsigneeCode()
	public Method LegalContrCode()
	public Method Serie()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields
    _Super:New( "", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos a la view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		 aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

   		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf

Return

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento.
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    
	If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf

Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)

	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
    	
Return 

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf

Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)
		self:Serie(lView, '01')

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:IssueDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)
		self:Serie(lView, '01')

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:IssueDate()
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf

Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)
		self:Serie(lView, '01')
		
		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)
		self:Serie(lView, '01')

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CONUNI", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Currency(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_CONUNI", "CTO_SIMB", "F1_TXMOEDA", "F1_CNORSUP", "F1_CNEEBUY", "F1_CNORCOD", "F1_CNEECOD", "F1_CNORBR", "F1_CNEEBR", "F1_CNTID", "F1_F5QUID", "F1_F5QDESC", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Currency()
		self:ConventionalUnits()
		self:Consignee()
		self:ConsigneeCode()
		self:Consignor()
		self:ConsignorCode()
		self:LegalContrCode()
	EndIf
	
Return


/*/{Protheus.doc} IssueDate
	Metodo para agregar propiedades al campo F1_EMISSAO.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method IssueDate(lView As logical) Class InputFields
Default lView := .F.

	If !lView
		self:SetModProperty("F1_EMISSAO", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_EMISSAO_RUS('" + StrZero(self:nNumDoc,2) + "')")
		self:SetModProperty("F1_EMISSAO", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_EMISSAO_RUS(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ", '" + StrZero(self:nNumDoc,2) + "')")
	EndIf
Return

/*/{Protheus.doc} VF1_EMISSAO_RUS
	Función para validaciones del campo F1_EMISSAO.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param cNumDoc - Character - Número de tipo de documento a validar.
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_EMISSAO_RUS(cNumDoc As character)
Local lValid As logical

Default cNumDoc	:= ""

	lValid := SetVar('F1_EMISSAO')
	lValid := lValid .and. (cNumDoc $ "04|05|09|10|12|13|14|20|53|60|62|64")
	lValid := lValid .and. LocXVal('F1_EMISSAO')

Return lValid

/*/{Protheus.doc} WF1_EMISSAO_RUS
	Función encargada de realizar la función When para el campo F1_EMISSAO.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param 
			l103Visual - !lInclui .AND. !l103Class
			l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
			lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_EMISSAO_RUS(l103Visual as logical, l103Class as logical, lRemTrans as logical, cDoc As character)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.
Default cDoc		:= ""

	lRet := !(l103Visual .Or. l103Class .Or. lRemTrans) .and. !(cDoc $ "08|51|63")

Return lRet

/*/{Protheus.doc} Currency
	Metodo para agregar propiedades a los campos F1_MOEDA, CTO_SIMB.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method Currency(lView As logical) Class InputFields
Local cInit As Character
Local cWhen As Character

Default lView := .F.

	If lView
		//F1_MOEDA
		self:oView:SetProperty("F1_MOEDA",MVC_VIEW_LOOKUP, "CTONUM")
		
		//CTO_SIMB
		self:oView:AddField('CTO_SIMB', '12', AllTrim(FWX3Titulo("CTO_SIMB")), AllTrim(FWX3Titulo("CTO_SIMB")), , 'GET', GetSX3Cache("CTO_SIMB", "X3_PICTURE"))
	Else
		//F1_MOEDA
		self:SetModProperty("F1_MOEDA", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_MOEDA_RUS(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")
		cInit := ''
		self:SetModProperty("F1_MOEDA", MODEL_FIELD_INIT, cInit)
		self:SetModProperty("F1_MOEDA", MVC_MODEL_VALUES, {})

		//CTO_SIMB
		self:oModel:AddField(AllTrim(FWX3Titulo("CTO_SIMB")), AllTrim(FWX3Titulo("CTO_SIMB")),"CTO_SIMB","C",GetSX3Cache("CTO_SIMB", "X3_TAMANHO"),/*nDec*/,/*valid*/,FWBuildFeature(STRUCT_FEATURE_WHEN,".F."),,,)
		cWhen := ".F."
		self:SetModProperty("CTO_SIMB", MODEL_FIELD_WHEN, cWhen)
		cInit := "Posicione('CTO', 1, xFilial('CTO')+StrZero(M->F1_MOEDA, TamSX3('CTO_MOEDA')[1]),'CTO_SIMB')"
		self:SetModProperty("CTO_SIMB", MODEL_FIELD_INIT, cInit)
	EndIf

Return

/*/{Protheus.doc} WF1_MOEDA_RUS
	Función encargada de realizar la función When para el campo F1_MOEDA.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param 
			l103Visual - !lInclui .AND. !l103Class
			l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
			lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_MOEDA_RUS(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet As logical

	lRet := WF1_MOEDA(l103Visual, l103Class, lRemTrans) .And. Empty(M->F1_CNTID) .And. RUXXTS05()

Return lRet

/*/{Protheus.doc} ConventionalUnits
	Metodo para agregar propiedades al campo F1_CONUNI.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method ConventionalUnits(lView As logical) Class InputFields
Local cInit  As Character

Default lView := .F.

	If !lView
		self:SetModProperty("F1_CONUNI", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CONUNI_RUS()")
		self:SetModProperty("F1_CONUNI", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CONUNI_RUS()")
		cInit := '"2"'
        self:SetModProperty("F1_CONUNI", MODEL_FIELD_INIT, cInit)
	EndIf
Return

/*/{Protheus.doc} VF1_CONUNI_RUS
	Función para validaciones del campo F1_CONUNI.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CONUNI_RUS()
Local lValid As logical

	lValid  :=  Pertence('12')

Return lValid

/*/{Protheus.doc} WF1_CONUNI_RUS
	Función encargada de realizar la función When para el campo F1_CONUNI.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CONUNI_RUS()
Local lRet As logical

	lRet := M->F1_MOEDA <> 1 .AND. RUXXTS05() .AND. Empty(M->F1_CNTID)

Return lRet

/*/{Protheus.doc} Consignee
	Metodo para agregar propiedades al campo F1_CNEEBUY.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method Consignee(lView As logical) Class InputFields
Local cInit  As Character

Default lView := .F.

	If !lView
		self:SetModProperty("F1_CNEEBUY", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CNEEBUY_RUS()")
		self:SetModProperty("F1_CNEEBUY", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNEEBUY_RUS()")
		cInit := '"1"'
		self:SetModProperty("F1_CNEEBUY", MODEL_FIELD_INIT, cInit)
	EndIf
Return

/*/{Protheus.doc} VF1_CNEEBUY_RUS
	Función para validaciones del campo F1_CNEEBUY.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CNEEBUY_RUS()
Local lValid As logical

	lValid := Pertence('12')

Return lValid

/*/{Protheus.doc} WF1_CNEEBUY_RUS
	Función encargada de realizar la función When para el campo F1_CNEEBUY.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CNEEBUY_RUS()
Local lRet As logical

	lRet := RUXXTS04("D1_COD")

Return lRet

/*/{Protheus.doc} Consignor
	Metodo para agregar propiedades al campo F1_CNORSUP.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method Consignor(lView As logical) Class InputFields
Default lView := .F.

	If !lView
		self:SetModProperty("F1_CNORSUP", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CNORSUP_RUS()")
		self:SetModProperty("F1_CNORSUP", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNORSUP_RUS()")
		cInit := '"1"'
		self:SetModProperty("F1_CNORSUP", MODEL_FIELD_INIT, cInit)
	EndIf
Return

/*/{Protheus.doc} VF1_CNORSUP_RUS
	Función para validaciones del campo F1_CNORSUP.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CNORSUP_RUS()
Local lValid As logical

	lValid := Pertence('12')

Return lValid

/*/{Protheus.doc} WF1_CNORSUP_RUS
	Función encargada de realizar la función When para el campo F1_CNORSUP.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CNORSUP_RUS()
Local lRet As logical

	lRet := RUXXTS04("D1_COD")

Return lRet

/*/{Protheus.doc} ConsignorCode
	Metodo para agregar propiedades al campo F1_CNORCOD.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method ConsignorCode(lView As logical) Class InputFields
Default lView := .F.

	If !lView
		self:SetModProperty("F1_CNORCOD", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CNORCOD_RUS()")
		self:SetModProperty("F1_CNORCOD", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNORCOD_RUS()")
		self:SetModProperty("F1_CNORBR", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CNORBR_RUS()")
		self:SetModProperty("F1_CNORBR", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNORBR_RUS()")
	EndIf
Return

/*/{Protheus.doc} VF1_CNORCOD_RUS
	Función para validaciones del campo F1_CNORCOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CNORCOD_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA2", M->F1_CNORCOD + Alltrim(M->F1_CNORBR))

Return lValid

/*/{Protheus.doc} WF1_CNORCOD_RUS
	Función encargada de realizar la función When para el campo F1_CNORCOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CNORCOD_RUS()
Local lRet As logical

	lRet := M->F1_CNORSUP == "2"

Return lRet

/*/{Protheus.doc} VF1_CNORBR_RUS
	Función para validaciones del campo F1_CNORBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CNORBR_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA2", M->F1_CNORCOD + M->F1_CNORBR)

Return lValid

/*/{Protheus.doc} WF1_CNORBR_RUS
	Función encargada de realizar la función When para el campo F1_CNORBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CNORBR_RUS()
Local lRet As logical

	lRet := M->F1_CNORSUP == "2"

Return lRet

/*/{Protheus.doc} ConsigneeCode
	Metodo para agregar propiedades al campo F1_CNEECOD.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method ConsigneeCode(lView As logical) Class InputFields
Default lView := .F.

	If !lView
		self:SetModProperty("F1_CNEECOD", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CNEECOD_RUS()")
		self:SetModProperty("F1_CNEECOD", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNEECOD_RUS()")
		self:SetModProperty("F1_CNEEBR", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CNEEBR_RUS()")
		self:SetModProperty("F1_CNEEBR", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNEEBR_RUS()")
	EndIf
Return

/*/{Protheus.doc} VF1_CNEECOD_RUS
	Función para validaciones del campo F1_CNEECOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CNEECOD_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA1", M->F1_CNEECOD + Alltrim(M->F1_CNEEBR))

Return lValid

/*/{Protheus.doc} WF1_CNEECOD_RUS
	Función encargada de realizar la función When para el campo F1_CNEECOD.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CNEECOD_RUS()
Local lRet As logical

	lRet := M->F1_CNEEBUY == "2"

Return lRet

/*/{Protheus.doc} VF1_CNEEBR_RUS
	Función para validaciones del campo F1_CNEEBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CNEEBR_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("SA1", M->F1_CNEECOD + M->F1_CNEEBR)

Return lValid

/*/{Protheus.doc} WF1_CNEEBR_RUS
	Función encargada de realizar la función When para el campo F1_CNEEBR.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CNEEBR_RUS()
Local lRet As logical

	lRet := M->F1_CNEEBUY == "2"

Return lRet

/*/{Protheus.doc} LegalContrCode
	Metodo para agregar propiedades al campo F1_CNTID.
	@author luis.samaniego
	@since 24/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method LegalContrCode(lView As logical) Class InputFields
Default lView := .F.

	If !lView
		self:SetModProperty("F1_CNTID", MODEL_FIELD_VALID, InputFieldsRUS + ".VF1_CNTID_RUS()")
		self:SetModProperty("F1_CNTID", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNTID_RUS()")
		self:SetModProperty("F1_F5QUID", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNTID_RUS()")
		self:SetModProperty("F1_F5QDESC", MODEL_FIELD_WHEN, InputFieldsRUS + ".WF1_CNTID_RUS()")
	EndIf
Return

/*/{Protheus.doc} VF1_CNTID_RUS
	Función para validaciones del campo F1_CNTID.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CNTID_RUS()
Local lValid As logical

	lValid := Vazio() .Or. ExistCpo("F5Q", M->F1_CNTID,2) .And. LocXVal('F1_CNTID')

Return lValid

/*/{Protheus.doc} WF1_CNTID_RUS
	Función encargada de realizar la función When para el campo F1_CNTID.
	@type  Function
	@author luis.samaniego
	@since 24/10/2022
	@param
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function WF1_CNTID_RUS()
Local lValid As logical

	lValid := RUXXTS05()

Return lValid

/*/{Protheus.doc} Serie
	Metodo para agregar propiedades al campo F1_SERIE.
	@author luis.samaniego
	@since 26/10/2022
	@param 	lView - logical - .T. para actualizar View / .F. para actualizar Model.
			cF3 - Character - Código de consulta padrón (X3_F3).
	@return
	/*/
Method Serie(lView As logical, cF3 as Character) Class InputFields
Default lView := .F.
Default cF3   := ""

	If lView
		self:oView:SetProperty("F1_SERIE", MVC_VIEW_LOOKUP, cF3)
	EndIf

Return
