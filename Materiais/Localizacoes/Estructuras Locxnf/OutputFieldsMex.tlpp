#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.mex

#Define OutPutFieldsMEX "totvs.protheus.backoffice.outputfields.mex" 

/*/{Protheus.doc} MEXOutputFields
	Realiza la creación de la estructura de campos para el paí­s Mex.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll

    public DATA lGerarCFD As logical

    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
    public Method FacturacionAnticipo()
    public Method FacturacionTraslado()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

    public Method TIMBRE()
    public Method CFD()
    public Method CFDExp()
    public Method CFDUso()
    public Method CONUNI()
    public Method TPCOMPL()
	public Method WhenAdt()
	public Method WhenSerieMex()
	public MEthod WhenDocMex()
	public Method FormaPagoSAT()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "MEX", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array
Local cCFDUso   := ""   As character
Local lCFDIExp          As logical 
Local cGlobal	:= ""   As character
Local lCfdi40			As logical 

Default lView	:= .F.

	cCFDUso := Alltrim(GetMv("MV_CFDUSO", .T., "1"))
	lCFDIExp := SuperGetMV("MV_CFDIEXP", .F., .F.)
	cGlobal := AllTrim(SuperGetMV("MV_NFGLOBA",.T.,""))
	lCfdi40 := SuperGetMV("MV_CFDI40",.F.,.F.)

    If lView
		aFields := {"F2_TABELA"}

		If self:lGerarCFD
			aAdd(aFields, "F2_APROFOL")
			aAdd(aFields, "F2_CERTFOL")
		EndIf

		If lCFDIExp
			aAdd(aFields, "F2_TIPOPE")
			aAdd(aFields, "F2_CVEPED")
			aAdd(aFields, "F2_CERORI")
			aAdd(aFields, "F2_NUMCER")
			aAdd(aFields, "F2_EXPCONF")
			aAdd(aFields, "F2_INCOTER")
			aAdd(aFields, "F2_SUBDIV")
			aAdd(aFields, "F2_OBSCE")
			aAdd(aFields, "F2_TCUSD")
			aAdd(aFields, "F2_TOTUSD")
			aAdd(aFields, "F2_IDTRIB")
			aAdd(aFields, "F2_RESIDE")
			aAdd(aFields, "F2_TRASLA")
			aAdd(aFields, "F2_CONUNI")
		EndIf

		If cCFDUso <> "0"
			aAdd(aFields, "F2_UUID")
			aAdd(aFields, "F2_FECTIMB")
			aAdd(aFields, "F2_FECANTF")
			aAdd(aFields, "F2_TIMBRE")
			aAdd(aFields, "F2_RELSAT")
			aAdd(aFields, "F2_USOCFDI")
			aAdd(aFields, "F2_SERMAN")
			aAdd(aFields, "F2_DOCMAN")
			aAdd(aFields, "F2_UUIDREL")
			aAdd(aFields, "F2_TPCOMPL")
			aAdd(aFields, "F2_TPDOC")
		EndIf

		//Validación de Factura Global
		If  cGlobal == "S" .And. cCFDUso <> "0".And. lCfdi40
			aAdd(aFields, "F2_GLOBAL")
			aAdd(aFields, "F2_IDCBAJA")
			aAdd(aFields, "F2_MODCONS")
			aAdd(aFields, "F2_PTOEMIS")
		Endif

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_APROFOL", "F2_CERTFOL", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", ;
						"F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_UUID", ;
						"F2_FECTIMB", "F2_FECANTF", "F2_TIMBRE", "F2_TIPOPE", "F2_CVEPED", "F2_CERORI", "F2_NUMCER", "F2_EXPCONF", "F2_INCOTER", "F2_SUBDIV", ;
						"F2_OBSCE", "F2_TCUSD", "F2_TOTUSD", "F2_IDTRIB", "F2_RESIDE", "F2_TRASLA", "F2_CONUNI", "F2_RELSAT", "F2_USOCFDI", "F2_SERMAN", "F2_DOCMAN", ;
						"F2_UUIDREL", "F2_TPCOMPL", "F2_TPDOC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		If cCFDUso <> "0"
			self:TIMBRE()
			self:CFDUso()
			self:TPCOMPL()
			self:FormaPagoSAT()
		EndIf
		If self:lGerarCFD
			self:CFD()
		EndIf
		If lCFDIExp
			self:CFDExp()
			self:CONUNI()
		EndIf
		self:WhenAdt()
	EndIf

Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TABELA"}

		If self:lGerarCFD
			aAdd(aFields, "F2_APROFOL")
			aAdd(aFields, "F2_CERTFOL")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		//Se retira campo 
    	self:oView:RemoveField("F2_NATUREZ")
		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_APROFOL", "F2_CERTFOL", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		If self:lGerarCFD
			self:CFD()
		EndIf
		self:WhenAdt( , .T.)
	EndIf

Return

/*/{Protheus.doc} FacturacionAnticipo
	Agrega campos para el documento.
		Documento: Facturacion Anticipo
		Numero documento: 19
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionAnticipo(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TABELA"}

		If self:lGerarCFD
			aAdd(aFields, "F2_APROFOL")
			aAdd(aFields, "F2_CERTFOL")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_APROFOL", "F2_CERTFOL", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		If self:lGerarCFD
    		self:CFD()
		EndIf
		self:WhenAdt()
	EndIf
    
Return

/*/{Protheus.doc} FacturacionTraslado
	Agrega campos para el documento.
		Documento: Facturacion Traslado
		Numero documento: 21
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionTraslado(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array
Local cCFDUso   := ""   As character
Local lCFDIExp          As logical 
Local lCfdi40           As Logical

Default lView	:= .F.

	cCFDUso := Alltrim(GetMv("MV_CFDUSO", .T., "1"))
	lCFDIExp := SuperGetMV("MV_CFDIEXP", .F., .F.)
	lCfdi40 := SuperGetMV("MV_CFDI40",.F.,.F.)

    If lView
		aFields := {"F2_TABELA"}

		If self:lGerarCFD
			aAdd(aFields, "F2_APROFOL")
			aAdd(aFields, "F2_CERTFOL")
		EndIf

		If lCFDIExp .And. lCfdi40
			aAdd(aFields, "F2_TIPOPE")
			aAdd(aFields, "F2_CVEPED")
			aAdd(aFields, "F2_CERORI")
			aAdd(aFields, "F2_NUMCER")
			aAdd(aFields, "F2_EXPCONF")
			aAdd(aFields, "F2_INCOTER")
			aAdd(aFields, "F2_SUBDIV")
			aAdd(aFields, "F2_OBSCE")
			aAdd(aFields, "F2_TCUSD")
			aAdd(aFields, "F2_TOTUSD")
			aAdd(aFields, "F2_IDTRIB")
			aAdd(aFields, "F2_RESIDE")
			aAdd(aFields, "F2_TRASLA")
			aAdd(aFields, "F2_CONUNI")
		EndIf

		If cCFDUso <> "0"
			aAdd(aFields, "F2_UUID")
			aAdd(aFields, "F2_FECTIMB")
			aAdd(aFields, "F2_FECANTF")
			aAdd(aFields, "F2_TIMBRE")
			aAdd(aFields, "F2_RELSAT")
			aAdd(aFields, "F2_USOCFDI")
			aAdd(aFields, "F2_SERMAN")
			aAdd(aFields, "F2_DOCMAN")
			aAdd(aFields, "F2_UUIDREL")
			aAdd(aFields, "F2_TPCOMPL")
			aAdd(aFields, "F2_TPDOC")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_APROFOL", "F2_CERTFOL", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", ;
						"F2_REFTAXA", "F2_UUID", "F2_FECTIMB", "F2_FECANTF", "F2_TIMBRE", "F2_TIPOPE", "F2_CVEPED", "F2_CERORI", "F2_NUMCER", "F2_EXPCONF", ;
						"F2_INCOTER", "F2_SUBDIV", "F2_OBSCE", "F2_TCUSD", "F2_TOTUSD", "F2_IDTRIB", "F2_RESIDE", "F2_TRASLA", "F2_CONUNI", "F2_RELSAT", ;
						"F2_USOCFDI", "F2_SERMAN", "F2_DOCMAN", "F2_UUIDREL", "F2_TPCOMPL", "F2_TPDOC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		If cCFDUso <> "0"
			self:TIMBRE()
			self:CFDUso()
			self:TPCOMPL()
			self:FormaPagoSAT()
		EndIf
		If self:lGerarCFD
			self:CFD()
		EndIf
		If lCFDIExp
			self:CFDExp()
			self:CONUNI()
		EndIf
		self:WhenAdt()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array
Local cCFDUso   := ""   As character
Local lCFDIExp          As logical 

Default lView	:= .F.

	cCFDUso := Alltrim(GetMv("MV_CFDUSO", .T., "1"))
	lCFDIExp := SuperGetMV("MV_CFDIEXP", .F., .F.)

    If lView
		aFields := {"F2_TIPOREM", "F2_LIQPROD"}

		If lCFDIExp
			aAdd(aFields, "F2_TIPOPE")
			aAdd(aFields, "F2_CVEPED")
			aAdd(aFields, "F2_CERORI")
			aAdd(aFields, "F2_NUMCER")
			aAdd(aFields, "F2_EXPCONF")
			aAdd(aFields, "F2_INCOTER")
			aAdd(aFields, "F2_SUBDIV")
			aAdd(aFields, "F2_OBSCE")
			aAdd(aFields, "F2_TCUSD")
			aAdd(aFields, "F2_TOTUSD")
			aAdd(aFields, "F2_IDTRIB")
			aAdd(aFields, "F2_RESIDE")
			aAdd(aFields, "F2_TRASLA")
		EndIf

		If cCFDUso <> "0"
			aAdd(aFields, "F2_RELSAT")
			aAdd(aFields, "F2_USOCFDI")
			aAdd(aFields, "F2_SERMAN")
			aAdd(aFields, "F2_DOCMAN")
			aAdd(aFields, "F2_UUIDREL")
			aAdd(aFields, "F2_TPDOC")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", ;
						"F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_TIPOPE", ;
						"F2_CVEPED", "F2_CERORI", "F2_NUMCER", "F2_EXPCONF", "F2_INCOTER", "F2_SUBDIV", "F2_OBSCE", "F2_TCUSD", "F2_TOTUSD", "F2_IDTRIB", ;
						"F2_RESIDE", "F2_TRASLA", "F2_RELSAT", "F2_USOCFDI", "F2_SERMAN", "F2_DOCMAN", "F2_UUIDREL", "F2_TPDOC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		If cCFDUso <> "0"
			self:CFDUso()
			self:FormaPagoSAT()
		EndIf
		If lCFDIExp
    		self:CFDExp()
		EndIf
		self:WhenAdt()
	EndIF

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", ;
						"F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenAdt( , .T.)
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array
Local cCFDUso   := ""   As character
Local lCFDIExp          As logical 

Default lView	:= .F.

	cCFDUso := Alltrim(GetMv("MV_CFDUSO", .T., "1"))
    lCFDIExp := SuperGetMV("MV_CFDIEXP", .F., .F.)

    If lView
		aFields := {}

		If self:lGerarCFD
			aAdd(aFields, "F2_APROFOL")
			aAdd(aFields, "F2_CERTFOL")
		EndIf

		If lCFDIExp
			aAdd(aFields, "F2_TIPOPE")
			aAdd(aFields, "F2_CVEPED")
			aAdd(aFields, "F2_CERORI")
			aAdd(aFields, "F2_NUMCER")
			aAdd(aFields, "F2_EXPCONF")
			aAdd(aFields, "F2_INCOTER")
			aAdd(aFields, "F2_SUBDIV")
			aAdd(aFields, "F2_OBSCE")
			aAdd(aFields, "F2_TCUSD")
			aAdd(aFields, "F2_TOTUSD")
			aAdd(aFields, "F2_IDTRIB")
			aAdd(aFields, "F2_RESIDE")
			aAdd(aFields, "F2_TRASLA")
		EndIf

		If cCFDUso <> "0"
			aAdd(aFields, "F2_UUID")
			aAdd(aFields, "F2_FECTIMB")
			aAdd(aFields, "F2_FECANTF")
			aAdd(aFields, "F2_TIMBRE")
			aAdd(aFields, "F2_RELSAT")
			aAdd(aFields, "F2_USOCFDI")
			aAdd(aFields, "F2_SERMAN")
			aAdd(aFields, "F2_DOCMAN")
			aAdd(aFields, "F2_UUIDREL")
			aAdd(aFields, "F2_TPDOC")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_APROFOL", "F2_CERTFOL", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", ;
						"F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_UUID", "F2_FECTIMB", ;
						"F2_FECANTF", "F2_TIMBRE", "F2_TIPOPE", "F2_CVEPED", "F2_CERORI", "F2_NUMCER", "F2_EXPCONF", "F2_INCOTER", "F2_SUBDIV", "F2_OBSCE", "F2_TCUSD", ;
						"F2_TOTUSD", "F2_IDTRIB", "F2_RESIDE", "F2_TRASLA", "F2_RELSAT", "F2_USOCFDI", "F2_SERMAN", "F2_DOCMAN", "F2_UUIDREL", "F2_TPDOC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		If cCFDUso <> "0"
			self:TIMBRE()
			self:CFDUso()
			self:FormaPagoSAT()
		EndIf
		If self:lGerarCFD
			self:CFD()
		EndIf
		If lCFDIExp
			self:CFDExp()
		EndIf
		self:WhenAdt()
		
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", ;
						"F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenAdt()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_UUID", "F2_FECTIMB", "F2_TIMBRE"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		If self:oView:HasField("F2_UUID")
			self:oView:SetProperty("F2_UUID",MVC_VIEW_LOOKUP,"UUID")
		EndIf

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", ;
						"F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_UUID", "F2_FECTIMB", "F2_TIMBRE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:TIMBRE( , .T.)
		self:WhenAdt( , .T.)
	EndIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		If self:lGerarCFD
			aAdd(aFields, "F2_APROFOL")
			aAdd(aFields, "F2_CERTFOL")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_APROFOL", "F2_CERTFOL", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		If self:lGerarCFD
			self:CFD()
		EndIf
		self:WhenAdt( , .T.)
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", ;
						"F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenAdt( , .T.)
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Se retira campo 
		self:oView:RemoveField("F2_NATUREZ")

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:WhenAdt( , .T.)
		self:WhenSerieMex()
		self:WhenDocMex()
	EndIf

Return

/*/{Protheus.doc} TIMBRE
	Agrega propiedades para los campos del timbre.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		lEdit - logico	- indica si es posible editar los campos
	@return 
	/*/
Method TIMBRE(lView As logical, lEdit As logical) Class OutPutFields

Default lView	:= .F.
Default lEdit := .F.

    If !lView
		self:SetModProperty("F2_UUID", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_UUID_MEX(" + self:lToS(lEdit)+ ")")
		self:SetModProperty("F2_FECTIMB", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_FECTIMB_MEX()")
		self:SetModProperty("F2_TIMBRE", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_TIMBRE_MEX()")
		If !lEdit 
			self:SetModProperty("F2_FECANTF", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_FECANTF_MEX()")
			self:SetModProperty("F2_UUID", MODEL_FIELD_WHEN, ".F.")
			self:SetModProperty("F2_FECTIMB", MODEL_FIELD_WHEN, ".F.")
			self:SetModProperty("F2_TIMBRE", MODEL_FIELD_WHEN, ".F.")
			self:SetModProperty("F2_FECANTF", MODEL_FIELD_WHEN, ".F.")
		else
			self:SetModProperty("F2_UUID", MODEL_FIELD_WHEN, "VldWhen(.T.)")
			self:SetModProperty("F2_FECTIMB", MODEL_FIELD_WHEN, "VldWhen(.T.)")
			self:SetModProperty("F2_TIMBRE", MODEL_FIELD_WHEN, "VldWhen(.T.)")
		EndIf
	EndIf

Return

/*/{Protheus.doc} CFD
	Agrega propiedades para los campos de cfd.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFD(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_APROFOL", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_APROFOL_MEX()")
		self:SetModProperty("F2_APROFOL", MODEL_FIELD_WHEN, ".F.")
		self:SetModProperty("F2_CERTFOL", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_CERTFOL_MEX()")
		self:SetModProperty("F2_CERTFOL", MODEL_FIELD_WHEN, ".F.")
	EndIf

Return

/*/{Protheus.doc} CFDExp
	Agrega propiedades para los campos de exportación que dependen del parámetro MV_CFDIEXP.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDExp(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TIPOPE", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_TIPOPE_MEX()")
		If self:oModel:HasField("F2_TIPOPE")
			aValues := self:oModel:GetProperty("F2_TIPOPE",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TIPOPE", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_TIPOPE", MODEL_FIELD_INIT, "") 
		EndIf
		self:SetModProperty("F2_CVEPED", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_CVEPED_MEX()")
		self:SetModProperty("F2_CERORI", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_CERORI_MEX()")
		If self:oModel:HasField("F2_CERORI")
			aValues := self:oModel:GetProperty("F2_CERORI",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_CERORI", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_CERORI", MODEL_FIELD_INIT, "") 
		EndIf
		self:SetModProperty("F2_NUMCER", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_NUMCER_MEX()")
		self:SetModProperty("F2_EXPCONF", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_EXPCONF_MEX()")
		self:SetModProperty("F2_INCOTER", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_INCOTER_MEX()")
		self:SetModProperty("F2_SUBDIV", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_SUBDIV_MEX()")
		If self:oModel:HasField("F2_SUBDIV")
			aValues := self:oModel:GetProperty("F2_SUBDIV",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_SUBDIV", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_SUBDIV", MODEL_FIELD_INIT, "") 
		EndIf
		self:SetModProperty("F2_OBSCE", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_OBSCE_MEX()")
		self:SetModProperty("F2_TCUSD", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_TCUSD_MEX()")
		self:SetModProperty("F2_TOTUSD", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_TOTUSD_MEX()")
		self:SetModProperty("F2_IDTRIB", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_IDTRIB_MEX()")
		self:SetModProperty("F2_RESIDE", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_RESIDE_MEX()")
		self:SetModProperty("F2_TRASLA", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_TRASLA_MEX()")
	EndIf

Return

/*/{Protheus.doc} CFDUso
	Agrega propiedades para los campos que dependen del parámetro MV_CFDUSO.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CFDUso(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_RELSAT", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_RELSAT_MEX(" + AllTrim(Str(self:nNumDoc)) + ")")
		self:SetModProperty("F2_USOCFDI", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_USOCFDI_MEX(" + AllTrim(Str(self:nNumDoc)) + ")")
		self:SetModProperty("F2_SERMAN", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_SERMAN_MEX()")
		self:SetModProperty("F2_DOCMAN", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_DOCMAN_MEX()")
		self:SetModProperty("F2_UUIDREL", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_UUIDREL_MEX(" + AllTrim(Str(self:nNumDoc)) + ")")
	EndIf

Return

/*/{Protheus.doc} CONUNI
	Agrega propiedades para el campo F2_CONUNI.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CONUNI(lView As logical) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_CONUNI", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_CONUNI_MEX()")
		If self:oModel:HasField("F2_CONUNI")
			aValues := self:oModel:GetProperty("F2_CONUNI",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_CONUNI", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F2_CONUNI", MODEL_FIELD_INIT, "") 
		EndIf
	EndIf

Return

/*/{Protheus.doc} TPCOMPL
	Agrega propiedades para el campo F2_TPCOMPL.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPCOMPL(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_TPCOMPL", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_TPCOMPL_MEX()")
	EndIf

Return

/*/{Protheus.doc} WhenAdt
	Agrega propiedades para los campos F2_CLIENTE/F2_LOJA/F2_MOEDA/F2_TXMOEDA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		lfornece -logico- Indica si es un proveedor
	@return 
	/*/
Method WhenAdt(lView As logical, lFornece As logical) Class OutPutFields

Default lView	:= .F.
Default lFornece   := .F.

    If !lView
		self:SetModProperty("F2_CLIENTE", MODEL_FIELD_WHEN, OutPutFieldsMEX + ".WF2_CLIENTE_MEX(" + self:lToS(lFornece) +")")

		self:SetModProperty("F2_LOJA", MODEL_FIELD_WHEN, OutPutFieldsMEX + ".WF2_LOJA_MEX()")

		self:SetModProperty("F2_MOEDA", MODEL_FIELD_WHEN, OutPutFieldsMEX + ".WF2_MOEDA_MEX()")

		self:SetModProperty("F2_TXMOEDA", MODEL_FIELD_WHEN, OutPutFieldsMEX + ".WF2_TXMOEDA_MEX()")
	EndIf

Return

/*/{Protheus.doc} WhenSerieMex
	Agrega propiedades para los campos F2_SERIE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenSerieMex(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_SERIE", MODEL_FIELD_WHEN, OutPutFieldsMEX + ".WF2_SERIE_MEX()")
	EndIf

Return

/*/{Protheus.doc} WhenDocMex
	Agrega propiedades para los campos F2_SERIE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenDocMex(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_DOC", MODEL_FIELD_WHEN, OutPutFieldsMEX + ".WF2_DOC_MEX()")
	EndIf

Return

/*/{Protheus.doc} FormaPagoSAT
	Agrega propiedades para el campo F2_TPDOC
	@author luis.samaniego
	@since 07/11/2022
	@version version
	@param 	lView - logico 	- Indica si debe realizar las actualizaciones de la view.
				Falso 		- Actualiza la parte del model.
				Verdadero 	- Actualiza la parte de la view.
	@return
	/*/
Method FormaPagoSAT(lView As logical) Class OutPutFields
Default lView	:= .F.

	 If !lView
		self:SetModProperty("F2_TPDOC", MODEL_FIELD_VALID, OutPutFieldsMEX + ".VF2_TPDOC_MEX()")
		self:SetModProperty("F2_TPDOC", MODEL_FIELD_WHEN, OutPutFieldsMEX + ".WF2_TPDOC_MEX()")
	EndIf

Return

/*/{Protheus.doc} VF2_UUID_MEX
	Función encargada de realizar las validaciones para el campo F2_UUID del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
		lVal - logico - indica si debe se realizada la validación. Documento 7
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_UUID_MEX(lVal As logical)
Local lValid := .T.	As logical

Default lVal := .F.

	If lVal
		lValid := VldUUID()
	EndIf

Return lValid

/*/{Protheus.doc} VF2_FECTIMB_MEX
	Función encargada de realizar las validaciones para el campo F2_FECTIMB del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FECTIMB_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_FECANTF_MEX
	Función encargada de realizar las validaciones para el campo F2_FECANTF del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_FECANTF_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TIMBRE_MEX
	Función encargada de realizar las validaciones para el campo F2_TIMBRE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIMBRE_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_APROFOL_MEX
	Función encargada de realizar las validaciones para el campo F2_APROFOL del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_APROFOL_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_CERTFOL_MEX
	Función encargada de realizar las validaciones para el campo F2_CERTFOL del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CERTFOL_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TIPOPE_MEX
	Función encargada de realizar las validaciones para el campo F2_TIPOPE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPOPE_MEX()
Local lValid	As logical

	lValid := Vazio() .Or. (Pertence('123') .And. ValTipoOpe(2))

Return lValid

/*/{Protheus.doc} VF2_CVEPED_MEX
	Función encargada de realizar las validaciones para el campo F2_CVEPED del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CVEPED_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_CERORI_MEX
	Función encargada de realizar las validaciones para el campo F2_CERORI del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CERORI_MEX()
Local lValid	As logical

	lValid := Vazio() .Or. Pertence ('01')

Return lValid

/*/{Protheus.doc} VF2_NUMCER_MEX
	Función encargada de realizar las validaciones para el campo F2_NUMCER del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NUMCER_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_EXPCONF_MEX
	Función encargada de realizar las validaciones para el campo F2_EXPCONF del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_EXPCONF_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_INCOTER_MEX
	Función encargada de realizar las validaciones para el campo F2_INCOTER del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_INCOTER_MEX()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo('SYJ',M->F2_INCOTER)

Return lValid

/*/{Protheus.doc} VF2_SUBDIV_MEX
	Función encargada de realizar las validaciones para el campo F2_SUBDIV del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SUBDIV_MEX()
Local lValid	As logical

	lValid := Vazio() .Or. Pertence ("01")

Return lValid

/*/{Protheus.doc} VF2_OBSCE_MEX
	Función encargada de realizar las validaciones para el campo F2_OBSCE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_OBSCE_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TCUSD_MEX
	Función encargada de realizar las validaciones para el campo F2_TCUSD del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TCUSD_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TOTUSD_MEX
	Función encargada de realizar las validaciones para el campo F2_TOTUSD del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TOTUSD_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_IDTRIB_MEX
	Función encargada de realizar las validaciones para el campo F2_IDTRIB del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_IDTRIB_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_RESIDE_MEX
	Función encargada de realizar las validaciones para el campo F2_RESIDE del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_RESIDE_MEX()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo("SYA", M->F2_RESIDE)

Return lValid

/*/{Protheus.doc} VF2_TRASLA_MEX
	Función encargada de realizar las validaciones para el campo F2_TRASLA del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TRASLA_MEX()
Local lValid	As logical

	lValid := Vazio() .Or. EXISTCPO('SX5','XM'+M->F2_TRASLA)

Return lValid

/*/{Protheus.doc} VF2_CONUNI_MEX
	Función encargada de realizar las validaciones para el campo F2_CONUNI del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CONUNI_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_RELSAT_MEX
	Función encargada de realizar las validaciones para el campo F2_RELSAT del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_RELSAT_MEX(nNFTipo As numeric)
Local lValid	As logical

Default nNFTipo := 0

	If nNFTipo == 21 .Or. nNFTipo == 1 .Or. nNFTipo == 2 .Or. nNFTipo == 50
        lValid := ValRetSat(M->F2_RELSAT ,"F2_RELSAT") .AND. ValidF3I("S012", M->F2_RELSAT,1,2)
    Else
        lValid := Vazio() .or. ValidF3I("S012", M->F2_RELSAT,1,2)
    EndIf

Return lValid

/*/{Protheus.doc} VF2_USOCFDI_MEX
	Función encargada de realizar las validaciones para el campo F2_USOCFDI del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_USOCFDI_MEX(nNFTipo As numeric)
Local lValid	As logical

Default nNFTipo := 0

    If nNFTipo == 21 .Or. nNFTipo == 50
        lValid := ValRetSat(M->F2_USOCFDI,"F2_USOCFDI")
    Else
        lValid := Vazio() .or. ValidF3I("S013", M->F2_USOCFDI,1,3)
    EndIf  

Return lValid

/*/{Protheus.doc} VF2_SERMAN_MEX
	Función encargada de realizar las validaciones para el campo F2_SERMAN del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERMAN_MEX()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_DOCMAN_MEX
	Función encargada de realizar las validaciones para el campo F2_DOCMAN del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DOCMAN_MEX()
Local lValid	As logical

	lValid := LxVDocSus(M->F2_SERMAN, M->F2_DOCMAN)

Return lValid

/*/{Protheus.doc} VF2_UUIDREL_MEX
	Función encargada de realizar las validaciones para el campo F2_UUIDREL del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_UUIDREL_MEX(nNFTipo As numeric)
Local lValid := .T.	As logical

Default nNFTipo := 0

	If nNFTipo == 21 .Or. nNFTipo == 50
        lValid := ValRetSat(M->F2_UUIDREL,"F2_UUIDREL")
    EndIf

Return lValid

/*/{Protheus.doc} VF2_TPCOMPL_MEX
	Función encargada de realizar las validaciones para el campo F2_TPCOMPL del país México.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPCOMPL_MEX()
Local lValid	As logical

	lValid := Pertence("SN")

Return lValid

/*/{Protheus.doc} WF2_CLIENTE_MEX
	Función encargada de realizar la función When para el campo F2_CLIENTE.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_CLIENTE_MEX(lFornece As logical)
Local lRet := .T.	As logical

Default := .F.

	If !lFornece
		lRet := LxWhenAdt()
	EndIf

Return lRet

/*/{Protheus.doc} WF2_LOJA_MEX
	Función encargada de realizar la función When para el campo F2_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_LOJA_MEX()
Local lRet	As logical

	lRet := LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF2_MOEDA_MEX
	Función encargada de realizar la función When para el campo F2_MOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_MOEDA_MEX()
Local lRet := .T.	As logical

	lRet := LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF2_TXMOEDA_MEX
	Función encargada de realizar la función When para el campo F2_TXMOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_TXMOEDA_MEX()
Local lRet	As logical

	lRet := LxWhenAdt()

Return lRet

/*/{Protheus.doc} WF2_SERIE_MEX
	Función encargada de realizar la función When para el campo F2_SERIE.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_SERIE_MEX()
Local lRet	As logical
Local lAltSerie := SuperGetMV("MV_ALTTSR",,.T.) As logical

	lRet := Iif(lAltSerie,.T.,Iif(!Empty(M->F2_SERIE),.F.,.T.))

Return lRet

/*/{Protheus.doc} WF2_DOC_MEX
	Función encargada de realizar la función When para el campo F2_DOC.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_DOC_MEX()
Local lRet	As logical
Local lAltSerie := SuperGetMV("MV_ALTTSR",,.T.) As logical

	lRet := Substr(cAcesso,50,1)=='S' .and. Iif(lAltSerie,.T.,Iif(!Empty(M->F2_DOC),.F.,.T.))

Return lRet

/*/{Protheus.doc} VF2_TPDOC_MEX
	Función encargada de realizar las validaciones para el campo F2_TPDOC.
	@type  Function
	@author luis.samaniego
	@since 07/11/2022
	@param
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPDOC_MEX() As logical
Local lValid := .T.	As logical

	lValid := Vazio() .or. ValidF3I("S005", M->F2_TPDOC,1,2)

Return lValid

/*/{Protheus.doc} WF2_TPDOC_MEX
	unción encargada de realizar la función When para el campo F2_TPDOC.
	@type  Function
	@author luis.samaniego
	@since 07/11/2022
	@param
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF2_TPDOC_MEX() As logical
Local lRet	As logical

	lRet := LxMxHab("F2",.T.)

Return lRet
