#include "tlpp-object.th"
#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

/*/{Protheus.doc} OutPutFieldsAll
	Realiza la cración de la estructura de campos de salida.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFieldsAll From Fields

    public DATA cEspecie As character
    public DATA nNumDoc As character
    public DATA l103Class As logical //(lIntegracao .AND. nOpca==4 ) lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
    public DATA l103Visual As logical //!lInclui .AND. !l103Class
	public DATA cPais	As character
	public DATA jsonClients As json

    public Method New() Constructor
    public Method AddModel()
	public Method AddFields()
    public Method AddModelProperties()
	public Method AddOutputFields()
	public Method F2_VEND()
	public Method TABELA()
	public Method TIPOREM()
	public Method LIQPROD()
	public Method SERIEF3()
	public Method WhenEmissao()
	public Method WhenDoc()
	public Method SucursalOrig()
	public Method Control()
	public Method DIACTB()
	public Method GetStructure()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto agregando los campos usados por todos los documentos de salida.
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(cPais As character, lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFieldsAll

Default cPais := ""
Default lViewNoUs := .F.
Default lVirtual := .F.
Default lModel := .F.
Default lInsert := .F.
Default lEdit := .F.
Default lDelete := .F.
Default cEspecie := ""

    //Creación del objeto de acuerdo a la clase Fields
    _Super:New( "SF2", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete)

    self:cEspecie := cEspecie
	self:cPais	:= cPais
	//Creación de objeto json a partir del arreglo aFields para el uso de hasProperty.
	self:jsonClients := self:CreateJson({"1","2","3","17","19","21","50"}) //"1","2","3","17","19","21","50"

Return self

/*/{Protheus.doc} AddModel
	Realiza la cración de la estructura de campos documentos de entrada.
	@type  Method
	@author raul.medina
	@since 
	@param
	@return 
	/*/
Method AddModel() Class OutPutFieldsAll

    self:oModel := FWFormStruct(1, 'SF2', , .F.)

    self:oModel:AddField(AllTrim(FWX3Titulo("A1_NOME")), AllTrim(FWX3Titulo("A1_NOME")),"cNome","C",GetSX3Cache("A1_NOME", "X3_TAMANHO"),/*nDec*/,/*valid*/,FWBuildFeature(STRUCT_FEATURE_WHEN,".F."),,,)
    
Return

/*/{Protheus.doc} AddFields
	Realiza la cración de la estructura de campos documentos de salida.
	@type  Method
	@author raul.medina
	@since 
	@param
	@return 
	/*/
Method AddFields() Class OutPutFieldsAll
Local jsonFields as json
Local aFields As Array

    //Creación del objeto json para validar existencia en bloque de código en FWFormStruct
    aFields := {"F2_CLIENTE","F2_LOJA","F2_SERIE","F2_DOC","F2_NATUREZ","F2_ESPECIE","F2_EMISSAO","F2_MOEDA","F2_TXMOEDA"}

    jsonFields := self:CreateJson(aFields)

    self:oView  := FWFormStruct(2, 'SF2', { | cField | jsonFields:hasProperty(AllTrim( cField )) }, .F., self:lVirtual )

    self:oView:AddField('cNome', '03', AllTrim(FWX3Titulo("A1_NOME")), AllTrim(FWX3Titulo("A2_NOME")), , 'GET', GetSX3Cache("A1_NOME", "X3_PICTURE"))

	aFields := {"F2_REFMOED","F2_REFTAXA"}
	If UsaSeqCor()
        aAdd(aFields, "F2_DIACTB")
    EndIf
    
	self:AddFieldsAd(aFields)

Return

/*/{Protheus.doc} AddModelProperties
	Realiza la asignación de propiedades de los campos.
	@type  Method
	@author raul.medina
	@since 
	@param nDoc - Numero del documento que serán agregados los campos.
	@return 
	/*/
Method AddModelProperties(nDoc As numeric) Class OutPutFieldsAll
Local aValues		:= {}	AS character
Local cInit         := ""   As character

	self:nNumDoc := nDoc
	If self:jsonClients:hasProperty(AllTrim(str(nDoc))) //"1","2","3","17","19","21","50"
        self:lClient := .T.
    EndIf

	If self:lClient
		//F2_CLIENTE
		self:SetModProperty("F2_CLIENTE", MODEL_FIELD_VALID, "VF2_CLIENTE()")
		
		//F2_LOJA
		self:SetModProperty("F2_LOJA", MODEL_FIELD_VALID, "VF2_LOJA( , '" + StrZero(nDoc,2) + "')")
		
		//cNome
        cInit := "Posicione('SA1',1,xFilial('SA1')+M->F2_CLIENTE+M->F2_LOJA,'A1_NOME')"
        self:SetModProperty("cNome", MODEL_FIELD_TITULO, AllTrim(FWX3Titulo("A1_NOME")))
        self:SetModProperty("cNome", MODEL_FIELD_TAMANHO, GetSX3Cache("A1_NOME", "X3_TAMANHO"))
        self:SetModProperty("cNome", MODEL_FIELD_INIT, cInit)
	else
		//F2_CLIENTE
		self:SetModProperty("F2_CLIENTE", MODEL_FIELD_VALID, "VF2_CLIENTE(.T.)")
        self:SetModProperty("F2_CLIENTE", MODEL_FIELD_TITULO, AllTrim(FWX3Titulo("F1_FORNECE")))
        self:SetModProperty("F2_CLIENTE", MODEL_FIELD_TAMANHO, GetSX3Cache("F1_FORNECE", "X3_TAMANHO"))

		//F2_LOJA
		self:SetModProperty("F2_LOJA", MODEL_FIELD_VALID, "VF2_LOJA(.T., '" + StrZero(nDoc,2) + "')")

		//cNome
        cInit := "Posicione('SA2',1,xFilial('SA2')+M->F2_CLIENTE+M->F2_LOJA,'A2_NOME')"
        self:SetModProperty("cNome", MODEL_FIELD_TITULO, AllTrim(FWX3Titulo("A2_NOME")))
        self:SetModProperty("cNome", MODEL_FIELD_TAMANHO, GetSX3Cache("A2_NOME", "X3_TAMANHO"))
        self:SetModProperty("cNome", MODEL_FIELD_INIT, cInit)
	EndIf

	//F2_SERIE
	self:SetModProperty("F2_SERIE", MODEL_FIELD_VALID, "VF2_SERIE('" + StrZero(nDoc,2) + "')")

	//F2_DOC
	self:SetModProperty("F2_DOC", MODEL_FIELD_VALID, "VF2_DOC('" + StrZero(nDoc,2) + "', " + self:lToS(self:lAuto) + ")")

	//F2_NATUREZ
	self:SetModProperty("F2_NATUREZ", MODEL_FIELD_VALID, "VF2_NATUREZ()")

	//F2_ESPECIE
	If self:lInsert
        cInit   := "'" + self:cEspecie + "'"
        self:SetModProperty("F2_ESPECIE", MODEL_FIELD_INIT, cInit)
    EndIf
	self:SetModProperty("F2_ESPECIE", MODEL_FIELD_WHEN, ".F.")
	self:SetModProperty("F2_ESPECIE", MODEL_FIELD_VALID, "VF2_ESPECIE()")

	//F2_EMISSAO
	self:SetModProperty("F2_EMISSAO", MODEL_FIELD_VALID, "VF2_EMISSAO('" + StrZero(nDoc,2) + "')")
	self:WhenEmissao( ,.F.)

	//F2_MOEDA
	self:SetModProperty("F2_MOEDA", MODEL_FIELD_VALID, "VF2_MOEDA()")
	aValues := self:GetMonedas()
    self:SetModProperty("F2_MOEDA", MVC_MODEL_VALUES, aValues) 
	self:SetModProperty("F2_MOEDA", MODEL_FIELD_INIT, "")

	//F2_TXMOEDA
	self:SetModProperty("F2_TXMOEDA", MODEL_FIELD_VALID, "VF2_TXMOEDA()")
	self:SetModProperty("F2_TXMOEDA", MODEL_FIELD_INIT, "") //Si se informa el inicializador no realiza la validación correctamente

	//F2_REFMOED
	self:SetModProperty("F2_REFMOED", MODEL_FIELD_VALID, "VF2_REFMOED()")
    self:SetModProperty("F2_REFMOED", MVC_MODEL_VALUES, aValues) 

	//F2_REFTAXA
	self:SetModProperty("F2_REFTAXA", MODEL_FIELD_VALID, "VF2_REFTAXA()")

	self:DIACTB()

	Do Case
        Case nDoc == 1
			self:F2_VEND()
			self:WhenEmissao()
			self:TABELA()
			self:WhenDoc()
			self:Facturacion()
        Case nDoc == 2
			self:F2_VEND()
			self:WhenEmissao()
			self:WhenDoc()
			self:NotaDebitoCliente()
        Case nDoc == 3
			self:F2_VEND()
			self:WhenEmissao( ,.T.)
			self:NotaCreditoExterna()
        Case nDoc == 6
			self:WhenDoc()
			self:NotaDebitoInterna()
        Case nDoc == 7
			self:WhenEmissao( ,.T.)
			self:NotaCreditoProveedor()
        Case nDoc == 11
			self:WhenEmissao()
			self:TABELA()
			self:WhenDoc()
			self:FacturacionBeneficiamiento()
		Case nDoc == 17
			self:F2_VEND()
			self:WhenEmissao()
			self:TABELA()
			self:WhenDoc()
			self:NotaVenta()
        Case nDoc == 19
			self:F2_VEND()
			self:WhenEmissao()
			self:TABELA()
			self:WhenDoc()
			self:FacturacionAnticipo()
        Case nDoc == 21
			self:F2_VEND()
			self:WhenEmissao()
			self:TABELA()
			self:FacturacionTraslado()
		Case nDoc == 22
			self:WhenEmissao( ,.T.)
			self:NotaCreditoAjuste()
        Case nDoc == 50
			self:F2_VEND()
			self:WhenEmissao()
			self:TIPOREM()
			self:LIQPROD()
			self:WhenDoc()
			self:RemitoSalida()
        Case nDoc == 52
			self:WhenEmissao()
			self:WhenDoc()
			self:RemitoSalidaBeneficiamento()
        Case nDoc == 54
			self:WhenEmissao()
			self:SucursalOrig()
			self:RemitoTransferenciaSalida()
        Case nDoc == 61
			self:WhenEmissao()
			self:WhenDoc()
			self:RemitoDevolucion()
    EndCase

Return

/*/{Protheus.doc} AddFieldsInput
	Realiza la cración de la estructura de campos para el país y número de documento.
	@type  Method
	@author raul.medina
	@since 
	@param nDoc - Numero del documento que serán agregados los campos.
	@return 
	/*/
Method AddOutPutFields(nDoc As numeric) Class OutPutFieldsAll
Local cSF3          := ""   As character

	self:nNumDoc := nDoc
	If self:jsonClients:hasProperty(AllTrim(str(nDoc))) //"1","2","3","17","19","21","50"
        self:lClient := .T.
    EndIf

	If !self:lClient
		//F2_CLIENTE
		cSF3	:= AllTrim(GetSX3Cache("F1_FORNECE", "X3_F3"))
		self:oView:SetProperty("F2_CLIENTE",MVC_VIEW_LOOKUP,cSF3)
	EndIf

	self:oView:SetProperty("F2_ESPECIE",MVC_VIEW_LOOKUP,"")

	self:oView:SetProperty("F2_NATUREZ",MVC_VIEW_LOOKUP,"SED")

	 Do Case
        Case nDoc == 1
			self:F2_VEND(.T.)
			self:SERIEF3(.T.)
			self:Facturacion(.T.)
        Case nDoc == 2
			self:F2_VEND(.T.)
			self:SERIEF3(.T.)
			self:NotaDebitoCliente(.T.)
        Case nDoc == 3
			self:F2_VEND(.T.)
			self:NotaCreditoExterna(.T.)
        Case nDoc == 6
			self:SERIEF3(.T.)
			self:NotaDebitoInterna(.T.)
        Case nDoc == 7
			self:NotaCreditoProveedor(.T.)
        Case nDoc == 11
			self:SERIEF3(.T.)
			self:FacturacionBeneficiamiento(.T.)
		Case nDoc == 17
			self:F2_VEND(.T.)
			self:SERIEF3(.T.)
			self:NotaVenta(.T.)
        Case nDoc == 19
			self:F2_VEND(.T.)
			self:SERIEF3(.T.)
			self:FacturacionAnticipo(.T.)
        Case nDoc == 21
			self:F2_VEND(.T.)
			self:SERIEF3(.T.)
			self:FacturacionTraslado(.T.)
		Case nDoc == 22
			self:SERIEF3(.T.)
			self:NotaCreditoAjuste(.T.)
        Case nDoc == 50
			self:F2_VEND(.T.)
			self:SERIEF3(.T.)
			self:RemitoSalida(.T.)
        Case nDoc == 52
			self:SERIEF3(.T.)
			self:RemitoSalidaBeneficiamento(.T.)
        Case nDoc == 54
			self:SERIEF3(.T.)
			self:SucursalOrig(.T.)
			self:RemitoTransferenciaSalida(.T.)
        Case nDoc == 61
			self:SERIEF3(.T.)
			self:RemitoDevolucion(.T.)
    EndCase

Return

/*/{Protheus.doc} F2_VEND
	Agrega propiedades para los campos F2_VEND
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method F2_VEND(lView As logical) Class OutPutFieldsAll
Local nX 		:= 0 As numeric
Local nCnVen	:= 0 As numeric
Local aFields	:= {} As array
Local cValid	:= "" As character

Default lView	:= .F.

	nCnVen := Fa440CntVen()

	If lView
		For nX := 1 to nCnVen
			aAdd(aFields, "F2_VEND"+AllTrim(Str(nX)))
		Next

		self:AddFieldsAd(aFields)
	Else

		For nX := 1 to nCnVen
			cValid := LocX3VALID("F2_VEND"+AllTrim(Str(nX)))
			If !Empty(cValid)
				cValid := "(" + cValid + ") .AND. "
			EndIf
			cValid += "NFComisTot(" + AllTrim(Str(nX)) + ")"
			self:SetModProperty("F2_VEND"+AllTrim(Str(nX)), MODEL_FIELD_VALID, cValid)
		Next
	EndIf

Return

/*/{Protheus.doc} SERIEF3
	Agrega propiedades para el campo F2_SERIE
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERIEF3(lView As logical) Class OutPutFieldsAll

Default lView	:= .F.
	
	If lView
		self:oView:SetProperty("F2_SERIE",MVC_VIEW_LOOKUP,"01")
	EndIf

Return

/*/{Protheus.doc} TABELA
	Agrega propiedades para el campo F2_TABELA
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TABELA(lView As logical) Class OutPutFieldsAll

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_TABELA", MODEL_FIELD_VALID, "VF2_TABELA()")
	EndIf

Return


/*/{Protheus.doc} TIPOREM
	Agrega propiedades para el campo F2_TIPOREM
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPOREM(lView As logical) Class OutPutFieldsAll
Local aValues   := {}   As array

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_TIPOREM", MODEL_FIELD_VALID, "VF2TIPOREM()")
		If self:oModel:HasField("F2_TIPOREM")
			aValues := self:oModel:GetProperty("F2_TIPOREM",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TIPOREM", MVC_MODEL_VALUES, aValues) 
		EndIf
	EndIf

Return

/*/{Protheus.doc} LIQPROD
	Agrega propiedades para el campo F2_LIQPROD
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method LIQPROD(lView As logical) Class OutPutFieldsAll

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_LIQPROD", MODEL_FIELD_VALID, "VF2_LIQPROD()")
	EndIf

Return

/*/{Protheus.doc} WhenEmissao
	Agrega propiedades para los campos F2_EMISSAO.
	@type  Method
	@author raul.medina
	@since 
	@param
		lEdit - logico	- Indica si el campo puede ser editado
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenEmissao(lView As logical, lEdit As logical) Class OutPutFieldsAll

Default lView	:= .F.
Default lEdit 	:= .F.

	If !lView
		self:SetModProperty("F2_EMISSAO", MODEL_FIELD_WHEN, self:lToS(lEdit))
		self:SetModProperty("F2_EMISSAO", MODEL_FIELD_INIT, "") //Si se informa el inicializador ddatabase no realiza la actualización en pantalla cuando se actualiza M->F2_EMISSAO
	EndIf

Return

/*/{Protheus.doc} WhenDoc
	Agrega propiedades para los campos F2_DOC.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenDoc(lView As logical) Class OutPutFieldsAll

Default lView	:= .F.

	If !lView
		self:SetModProperty("F2_DOC", MODEL_FIELD_WHEN, "WF2_DOC()")
	EndIf

Return

/*/{Protheus.doc} SucursalOrig
	Agrega propiedades para los campos F2_FILDEST.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SucursalOrig(lView As logical) Class OutPutFieldsAll
Local aValues   := {}   As array
Local aFields As Array

Default lView	:= .F.

    If self:lInsert
		If lView
			aFields := {"F2_FILDEST", "F2_GRPDEP", "F2_TIPORET"}

			//Adición de campos al model/view de la clase Fields
			self:AddFieldsAd(aFields)

			If self:oView:HasField("F2_FILDEST")
				self:oView:SetProperty("F2_FILDEST", MVC_VIEW_LOOKUP, "SM0")
				self:oView:SetProperty("F2_FILDEST", MVC_VIEW_PICT, "@!")
			EndIf
		Else
			self:SetModProperty("F2_FILDEST", MODEL_FIELD_TITULO, "Sucursal Dest.")
			self:SetModProperty("F2_FILDEST", MODEL_FIELD_TAMANHO, LEN(SM0->M0_CODFIL))
			self:SetModProperty("F2_FILDEST", MODEL_FIELD_VALID, "VF2_FILDEST()")
			self:SetModProperty("F2_CLIENTE", MODEL_FIELD_WHEN, ".F.")
			self:SetModProperty("F2_LOJA", MODEL_FIELD_WHEN, ".F.")

			self:SetModProperty("F2_TIPORET", MODEL_FIELD_VALID, "VF2_TIPORET()")
			If self:oModel:HasField("F2_TIPORET")
				aValues := self:oModel:GetProperty("F2_TIPORET",MVC_MODEL_VALUES)
				aadd(aValues, "")
				self:SetModProperty("F2_TIPORET", MVC_MODEL_VALUES, aValues) 
				self:SetModProperty("F2_TIPORET", MODEL_FIELD_INIT, "")
			EndIf 

			self:SetModProperty("F2_GRPDEP", MODEL_FIELD_VALID, "VF2_GRPDEP()")
		EndIf

    EndIf

Return

/*/{Protheus.doc} Control
	Agrega propiedades para los campos correspondientes a passage
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Control(lView As logical, lWhen As logical) Class OutPutFieldsAll
Local lContrFol	:= .F. As Logical
Local aFields   := {}   As Array

Default lView	:= .F.
Default lWhen	:= .T.

	lContrFol := GetNewPar("MV_CTRLFOL",.F.)

	If lContrFol
		If lView
			aFields := {"F2_NUMAUT", "F2_CODCTR", "F2_LIMEMIS"}
			self:AddFieldsAd(aFields)
		Else
			self:SetModProperty("F2_NUMAUT", MODEL_FIELD_WHEN, "WF2_NUMAUT(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F2_CODCTR", MODEL_FIELD_WHEN, "WF2_CODCTR(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F2_LIMEMIS", MODEL_FIELD_WHEN, "WF2_LIMEMIS(" + self:lToS(lWhen) + ")")
			self:SetModProperty("F2_NUMAUT", MODEL_FIELD_VALID, "VF2_NUMAUT()")
			self:SetModProperty("F2_CODCTR", MODEL_FIELD_VALID, "VF2_CODCTR()")
			self:SetModProperty("F2_LIMEMIS", MODEL_FIELD_VALID, "VF2_LIMEMIS()")
		EndIf
	EndIf

Return

/*/{Protheus.doc} DIACTB
	Agrega propiedades para los campos F2_DIACTB.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method DIACTB(lView As logical) Class OutPutFieldsAll

Default lView	:= .F.

	If !lView
    	self:SetModProperty("F2_DIACTB", MODEL_FIELD_VALID, "VF2_DIACTB()")
	EndIf

Return

/*/{Protheus.doc} OutputFields
	Función encargada de generar el objeto para generación de estructura de campos de entrada.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
	/*/
Function OutputFields(cPais As character, lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character)
Local cNameSpace        := ""   As character
Local oOutPutFieldsAll          As Object
Local cVersion 			:= ""	As character

	cVersion := GetRpoRelease()
	If !(cVersion >= "12.1.2210")
		lViewNoUs := .F.
	EndIf

	cNameSpace := "totvs.protheus.backoffice.outputfields." + LOWER(cPais)
	If !FindClass(cNameSpace+".OutputFields")
		cNameSpace := "totvs.protheus.backoffice.outputfields"
	EndIf
    oOutPutFieldsAll := &(cNameSpace + ".OutputFields():New(lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)")
    
Return oOutPutFieldsAll

/*/{Protheus.doc} VF2_CLIENTE
	Función encargada de realizar las validaciones para el campo F2_CLIENTE.
	@type  Function
	@author raul.medina
	@since 
	@param
		lFornece - Logico - Indica si las validaciones son realizadas para un documento de proveedor.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CLIENTE(lFornece As logical)
Local lValid	As logical

Default	lFornece := .F.

	If !lFornece
		lValid := Posicione('SA1',1,xFilial('SA1')+M->F2_CLIENTE,'A1_COD') == M->F2_CLIENTE
	Else
		lValid := Posicione('SA2',1,xFilial('SA2')+&(__ReadVar),'A2_COD') == &(__ReadVar)
	EndIf

	lValid := lValid .and. LxA103VFold('NF_CODCLIFOR',M->F2_CLIENTE)

Return lValid

/*/{Protheus.doc} VF2_LOJA
	Función encargada de realizar las validaciones para el campo F2_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
		lFornece - Logico - Indica si las validaciones son realizadas para un documento de proveedor.
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_LOJA(lFornece As logical, cNumDoc As character)
Local lValid	As logical

Default	lFornece 	:= .F.
Default	cNumDoc 	:= ""

	/*If !lFornece .and. Valtype(lForneceValid) <> "U" .and. lForneceValid
		lFornece := .T.
	EndIf*/

	lValid := Vazio() .or. VldF2Loj()

	If !lFornece
		lValid := lValid .and. ExistCpo('SA1',M->F2_CLIENTE+M->F2_LOJA)
	Else
		lValid := lValid .and. ExistCpo('SA2',M->F2_CLIENTE+M->F2_LOJA)
	EndIf

	lValid := lValid .and. AtuCliFor()
	lValid := lValid .and. LxA103VFold('NF_LOJA',M->F2_LOJA)
	lValid := lValid .and. LocXVal('F2_LOJA')

	If cNumDoc $ "06|07|61"
		lValid := lValid .and. Iif(Empty(M->F2_CLIENTE),.T.,ExistCpo('SA2',M->F2_CLIENTE+M->F2_LOJA))
	EndIf

	If cNumDoc == "54"
		lValid := lValid .and. NFGrpDep(M->F2_CLIENTE,M->F2_LOJA)
	EndIf

Return lValid

/*/{Protheus.doc} VF2_SERIE
	Función encargada de realizar las validaciones para el campo F2_SERIE.
	@type  Function
	@author raul.medina
	@since 
	@param
		cPais - caracter - Indica el país para el cual se realizan las validaciones.
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERIE(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""

	lValid := LocXVal('F2_SERIE')
	lValid := lValid .and. LocxValNum()

Return lValid

/*/{Protheus.doc} VF2_DOC
	Función encargada de realizar las validaciones para el campo F2_DOC.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
		lAuot 	- logico	- Indica si es un documento automatico
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DOC(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.

	lValid := AtuNumIt()
	If !lAuto
		lValid := lValid .and. EnablePanel()
	EndIf
	lValid := lValid .and. LocXVal('F2_DOC')
	lValid := lValid .and. LocxValNum()

Return lValid

/*/{Protheus.doc} VF2_NATUREZ
	Función encargada de realizar las validaciones para el campo F2_NATUREZ.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NATUREZ()
Local lValid	As logical


	lValid := Vazio() .Or. ExistCpo("SED")

Return lValid

/*/{Protheus.doc} VF2_EMISSAO
	Función encargada de realizar las validaciones para el campo F2_EMISSAO.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento  correspontiente al documento generado.
		Ejemlplo: NF-1
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_EMISSAO(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""

	lValid := SetVar('F2_EMISSAO')
	lValid := lValid .and. (cNumDoc $ "03|07") .Or. M->F2_EMISSAO == dDataBase
	lValid := lValid .and. LocXVal('F2_EMISSAO')

Return lValid

/*/{Protheus.doc} VF2_MOEDA
	Función encargada de realizar las validaciones para el campo F2_MOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MOEDA()
Local lValid	As logical

	//lValid := MaFisRef("NF_MOEDA","MT100",M->F2_MOEDA)
	lValid := LocXVal('F2_MOEDA')

Return lValid

/*/{Protheus.doc} VF2_TXMOEDA
	Función encargada de realizar las validaciones para el campo F2_TXMOEDA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TXMOEDA()
Local lValid	As logical

	lValid := Positivo() .And. A467TrcVal()
	lValid := lValid .and. LocXVal('F2_TXMOEDA')

Return lValid

/*/{Protheus.doc} F2_REFMOED
	Función encargada de realizar las validaciones para el campo F2_REFMOED.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_REFMOED()
Local lValid	As logical

	lValid := LocXVal('F2_REFMOED')

Return lValid

/*/{Protheus.doc} VF2_REFTAXA
	Función encargada de realizar las validaciones para el campo F2_REFTAXA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_REFTAXA()
Local lValid	As logical

	lValid := Positivo() .and. LocXVal('F2_REFTAXA')

Return lValid

/*/{Protheus.doc} VF2_ESPECIE
	Función encargada de realizar las validaciones para el campo F2_ESPECIE.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ESPECIE()
Local lValid	As logical

	lValid := Vazio().or.ExistCpo("SX5","42"+M->F2_ESPECIE)

Return lValid

/*/{Protheus.doc} VF2_TABELA
	Función encargada de realizar las validaciones para el campo F2_TABELA.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TABELA()
Local lValid	As logical

	lValid := FaVldTabPrc(M->F2_TABELA,M->F2_EMISSAO) .and. A467TrcVal()

Return lValid

/*/{Protheus.doc} VF2TIPOREM
	Función encargada de realizar las validaciones para el campo F2_TIPOREM.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/

Function VF2TIPOREM()
Local lValid := .T.	As logical

	lValid := Pertence("0A") .AND.  Iif (FindFunction("A410LiqPro"),A410LiqPro(),.T.)

Return lValid

/*/{Protheus.doc} VF2_LIQPROD
	Función encargada de realizar las validaciones para el campo F2_LIQPROD.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/

Function VF2_LIQPROD()
Local lValid	As logical

	lValid := Pertence("12") .AND. Iif (FindFunction("A410LiqPro"),A410LiqPro(),.T.)

Return lValid

/*/{Protheus.doc} VF2_FILDEST
	Función encargada de realizar las validaciones para el campo F2_FILDEST.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/

Function VF2_FILDEST()
Local lValid	As logical

	lValid := NfFilDest(M->F2_FILDEST) .AND. NFGrpDep(M->F2_CLIENTE,M->F2_LOJA) .AND. LocXVal('F2_LOJA')

Return lValid

/*/{Protheus.doc} VF2_GRPDEP
	Función encargada de realizar las validaciones para el campo F2_GRPDEP.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/

Function VF2_GRPDEP()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo("SX5","74"+M->F2_GRPDEP) .and. NFVldDep()

Return lValid

/*/{Protheus.doc} VF2_TIPORET
	Función encargada de realizar las validaciones para el campo F2_TIPORET.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/

Function VF2_TIPORET()
Local lValid	As logical

	lValid := Pertence('1|2| ')

Return lValid


/*/{Protheus.doc} VF2_NUMAUT
	Función encargada de realizar las validaciones para el campo F2_NUMAUT.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NUMAUT()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_CODCTR
	Función encargada de realizar las validaciones para el campo F2_CODCTR.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CODCTR()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_LIMEMIS
	Función encargada de realizar las validaciones para el campo F2_LIMEMIS.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_LIMEMIS()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} WF2_DOC
	Función encargada de realizar la función When para el campo F2_DOC.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_DOC()
Local lRet	:= .T. As logical

	lRet := Substr(cAcesso,50,1)=='S'

Return lRet

/*/{Protheus.doc} WF2_NUMAUT
	Función encargada de realizar la función When para el campo F2_NUMAUT .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_NUMAUT(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF2_CODCTR
	Función encargada de realizar la función When para el campo F2_CODCTR .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_CODCTR(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF2_LIMEMIS
	Función encargada de realizar la función When para el campo F2_LIMEMIS .
	@type  Function
	@author raul.medina
	@since 
	@param
		lWhen - Logico - Indica si el campo puede ser editado.
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_LIMEMIS(lWhen As logical)
Local lRet	:= .F. As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} VF1_DIACTB
	Función encargada de realizar las validaciones para el campo F1_DIACTB.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DIACTB()
Local lValid	As logical

	lValid := ExistCPO("CVL")

Return lValid

/*/{Protheus.doc} GetStructure
	Obtiene estructura de campos de entrada (SF2)
	@author luis.samaniego
	@since 05/12/2022
	@param 	l103Class - Logical.
			l103Visual - Logical.
			lLocxAuto - Logical.
			cLocxNFPV - Character.
			lGerarCFD - Logical.
			lSerie2 - Logical.
			aCfgNf - Array.
	@return aCposNF - Array - Campos de encabezado de documento (SF2).
	/*/
Method GetStructure(l103Class As Logical, l103Visual As Logical, lLocxAuto As Logical, cLocxNFPV As Character, lGerarCFD As Logical, lSerie2 As Logical, aCfgNf As Array) Class OutPutFieldsAll
Local aCposNF As Array
Local nTipo As Numeric

Default l103Class  := .F.
Default l103Visual := .F.
Default lLocxAuto  := .F.
Default cLocxNFPV  := ""
Default lGerarCFD  := .F.
Default lSerie2    := .F.
Default aCfgNf     := {}

	//Array aCfgNf
	nTipo := 1
	
	self:l103Class := l103Class
	self:l103Visual := l103Visual
	self:lAuto := lLocxAuto
	If self:cPais == "ARG"
		self:cPuntoVenta := cLocxNFPV
	EndIf
	If self:cPais == "MEX"
		self:lGerarCFD := lGerarCFD
	EndIf
	If self:cPais == "PER"
		self:lSerie2 := lSerie2
	EndIf
	self:AddModel()
	self:AddModelProperties(aCfgNf[nTipo])
	self:AddFields()
	self:AddOutPutFields(aCfgNf[nTipo])
	aCposNF := Aclone(self:GetFields())

Return aCposNF
