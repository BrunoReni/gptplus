#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.equ

#Define OutputFieldsEQU "totvs.protheus.backoffice.outputfields.equ" 



/*/{Protheus.doc} OutPutFields
	Realiza la creación de la estructura de campos para el paí­s .
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll


    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method NotaVenta()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()

	public Method NumAut()
	Public Method PtoEmis() 
	public Method ESTABL()
	public Method TPVENT()
	public Method TipOpe()
	public Method TpDoc()
	public Method Transp()
	public Method SERREF()
	public Method NFREF()
	public Method MOTIVO()
	Public Method WhenPtoEmis()
	public Method WhenEstabl()
	public Method ValidacionCamposAll()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "EQU", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TABELA", "F2_NUMAUT", "F2_PTOEMIS", "F2_ESTABL", "F2_TPVENT", "F2_TIPOPE", "F2_TPDOC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		//self:TipOpe(lView, "KM")

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED","F2_REFTAXA", "F2_NUMAUT", "F2_PTOEMIS", "F2_ESTABL", "F2_TPVENT", "F2_TIPOPE", "F2_TPDOC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:NumAut()
		self:PtoEmis()
		self:ESTABL()
		self:TPVENT()
		self:TipOpe()
		self:TpDoc()
		self:WhenPtoEmis()
		self:WhenEstabl()
		self:ValidacionCamposAll()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TABELA", "F2_NUMAUT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_NUMAUT"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:NumAut()
		self:ValidacionCamposAll()
	EndIf

Return

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion - Nota de Venta
		Numero documento: 17
		Modulo: Facturacion
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaVenta(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TABELA"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	else
		self:ValidacionCamposAll()
	EndIf
	
Return 


/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F2_TIPOREM", "F2_LIQPROD", "F2_PTOEMIS", "F2_ESTABL", "F2_TRANSP"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		If  self:oView:HasField("F2_TRANSP")
			self:Transp(lView, "SA4")
		ENDIF

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_PTOEMIS", "F2_ESTABL", "F2_TRANSP"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Transp()
		self:WhenPtoEmis()
		self:WhenEstabl()
		self:ValidacionCamposAll()
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	else
		self:ValidacionCamposAll()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_PTOEMIS", "F2_ESTABL", "F2_NFREF", "F2_SERREF", "F2_MOTIVO"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_PTOEMIS", "F2_ESTABL", "F2_NFREF", "F2_SERREF", "F2_MOTIVO"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:PtoEmis()
		self:WhenPtoEmis(,".T.")
		self:ESTABL()
		self:WhenEstabl(,".T.")
		self:SERREF()
		self:NFREF()
		self:MOTIVO()
		self:ValidacionCamposAll()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMAUT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_NUMAUT"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:NumAut()
		self:ValidacionCamposAll()
	EndIf 

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor (NCP)
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_NUMAUT", "F2_PTOEMIS", "F2_ESTABL"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_NUMAUT", "F2_PTOEMIS", "F2_ESTABL"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:NumAut()
		self:PtoEmis()
		self:ESTABL()
		self:WhenPtoEmis(,".T.")
		self:WhenEstabl(,".T.")
		self:ValidacionCamposAll()
	ENdIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna (NDI)
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	else
		self:ValidacionCamposAll()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_PTOEMIS", "F2_ESTABL", "F2_TRANSP"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		If  self:oView:HasField("F2_TRANSP")
			self:Transp(lView, "SA4")
		Endif

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_PTOEMIS", "F2_ESTABL", "F2_TRANSP"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:PtoEmis()
		self:ESTABL()
		self:Transp()
		self:WhenPtoEmis()
		self:WhenEstabl()
		self:ValidacionCamposAll()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia (RTS)
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_PTOEMIS", "F2_ESTABL", "F2_TRANSP"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_PTOEMIS", "F2_ESTABL", "F2_TRANSP"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:PtoEmis()
		self:ESTABL()
		self:Transp()
		self:WhenPtoEmis()
		self:WhenEstabl()
		self:ValidacionCamposAll()
	EndIf
	
Return

/*/{Protheus.doc} ValidacionCamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ValidacionCamposAll(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_DIACTB", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_DIACTB_EQU()")
		self:SetModProperty("F2_DIACTB", MODEL_FIELD_WHEN, OutputFieldsEQU + ".WF2_DIACTB_EQU()")
	EndIf

Return

/*/{Protheus.doc} NumAut
	Agrega propiedades para los campos F2_NUMAUT.
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NumAut(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_NUMAUT", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_NUMAUT_EQU()")
	EndIf

Return

/*/{Protheus.doc} PtoEmis
	Agrega propiedades para los campos F2_PTOEMIS.
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method PtoEmis(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_PTOEMIS", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_PTOEMIS_EQU()")
	EndIf

Return

/*/{Protheus.doc} WhenEstabl
	Agrega propiedades para el campo F2_ESTABL
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenEstabl(lView As logical, cWhen AS Character) Class OutPutFields

Default lView	:= .F.
Default cWhen	:= ".F."

    If !lView		
		self:SetModProperty("F2_ESTABL", MODEL_FIELD_WHEN, cWhen)
	EndIf
			
Return

/*/{Protheus.doc} WhePtoEmis
	Agrega propiedades para el campo F2_PTOEMIS
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenPtoEmis(lView As logical, cWhen As character) Class OutPutFields

Default lView	:= .F.
Default cWhen	:= ".F."

    If !lView
		self:SetModProperty("F2_PTOEMIS", MODEL_FIELD_WHEN, cWhen)
	EndIf

Return

/*/{Protheus.doc} ESTABL
	Agrega propiedades para los campos F2_ESTABL.
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ESTABL(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_ESTABL", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_ESTABL_EQU()")
	EndIf

Return

/*/{Protheus.doc} TPVENT
	Metodo para agregar propiedades al campo F2_TPVENT.
	@author laura.medina
	@since 15/10/2022
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		cInit - caracter- Inicializador estandar
	@return 
	/*/
Method TPVENT(lView As logical, cInit As Character) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.
Default cInit	:= ''

    If !lView
		//self:SetModProperty("F2_TPVENT", MODEL_FIELD_INIT, cInit) 
		self:SetModProperty("F2_TPVENT", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_TPVENT_EQU()")
		If self:oModel:HasField("F2_TPVENT")
			aValues := self:oModel:GetProperty("F2_TPVENT",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TPVENT", MVC_MODEL_VALUES, aValues) 
		EndIf    	
	EndIf

Return

/*/{Protheus.doc} TipOpe
	Metodo para agregar propiedades al campo F2_TIPOPE.
	@author laura.medina
	@since 16/10/2022
	@param 	lView - logical - .T. para actualizar View / .F. para actualizar Model.
			cX3_F3 - Character - Código de consulta padrón (X3_F3).
	@return
	/*/
Method TipOpe(lView As logical, cX3_F3 As Character, cInit As Character) class OutPutFields

Default lView  := .F.
Default cX3_F3 := ""
Default cInit  := ''

	 If !lView
		/*If !Empty(cX3_F3)
			self:oView:SetProperty("F2_TIPOPE", MVC_VIEW_LOOKUP, cX3_F3)
		Endif
	Else */
		self:SetModProperty("F2_TIPOPE", MODEL_FIELD_INIT, cInit)
		self:SetModProperty("F2_TIPOPE", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_TIPOPE_EQU()")
	EndIf

Return

/*/{Protheus.doc} TpDoc
	Metodo para agregar propiedades al campo F2_TPDOC.
	@author laura.medina
	@since 15/10/2022
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		cInit - caracter- Inicializador estandar
	@return 
	/*/
Method TPDOC(lView As logical, cInit As Character) Class OutPutFields
Local aValues   := {}   As array

Default lView	:= .F.
Default cInit	:= '2'

    If !lView
		self:SetModProperty("F2_TPDOC", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_TPDOC_EQU()")
		If self:oModel:HasField("F2_TPDOC")
			aValues := self:oModel:GetProperty("F2_TPDOC",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F2_TPDOC", MVC_MODEL_VALUES, aValues) 
		EndIf    	
	EndIf

Return

/*/{Protheus.doc} Transp
	Metodo para agregar propiedades al campo F2_TRANSP.
	@author laura.medina
	@since 16/10/2022
	@param 	lView - logical - .T. para actualizar View / .F. para actualizar Model.
			cX3_F3 - Character - Código de consulta padrón (X3_F3).
	@return
	/*/
Method Transp(lView As logical, cX3_F3 As Character) class OutPutFields
Default lView  := .F.
Default cX3_F3 := ""

	 If lView
		If !Empty(cX3_F3)
			self:oView:SetProperty("F2_TRANSP", MVC_VIEW_LOOKUP, cX3_F3)
		Endif
	Else
		self:SetModProperty("F2_TRANSP", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_TRANSP_EQU()")
	EndIf

Return

/*/{Protheus.doc} SERREF
	Agrega propiedades para los campos F2_SERREF.
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERREF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_SERREF", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_SERREF_EQU()")
	EndIf

Return

/*/{Protheus.doc} NFREF
	Agrega propiedades para los campos F2_NFREF.
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NFREF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_NFREF", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_NFREF_EQU()")
	EndIf

Return

/*/{Protheus.doc} MOTIVO
	Agrega propiedades para los campos F2_MOTIVO.
	@type  Method
	@author laura.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method MOTIVO(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_MOTIVO", MODEL_FIELD_VALID, OutputFieldsEQU + ".VF2_MOTIVO_EQU()")
	EndIf

Return

/*/{Protheus.doc} VF2_NUMAUT_EQU
	Función encargada de realizar las validaciones para el campo F2_NUMAUT del país Ecuador.
	@type  Function
	@author laura.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NUMAUT_EQU()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_PTOEMIS_EQU
	Función encargada de realizar las validaciones para el campo F2_PTOEMIS del país Ecuador.
	@type  Function
	@author laura.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_PTOEMIS_EQU()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_ESTABL_EQU
	Función encargada de realizar las validaciones para el campo F2_ESTABL del país Ecuador.
	@type  Function
	@author laura.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_ESTABL_EQU()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_TPVENT_EQU
	Función encargada de realizar las validaciones para el campo F2_TPVENT.
	@type  Function
	@author laura.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPVENT_EQU()
Local lValid	As logical

	lValid := .T.                                                                                

Return lValid

/*/{Protheus.doc} VF2_TIPOPE_EQU
	Función encargada de realizar las validaciones para el campo F2_TIPOPE.
	@type  Function
	@author laura.medina
	@since 16/10/2022
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPOPE_EQU()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo("SX5","KM"+M->F2_TIPOPE) 

Return lValid


/*/{Protheus.doc} VF2_TPDOC_EQU
	Función encargada de realizar las validaciones para el campo F2_TPDOC.
	@type  Function
	@author laura.medina
	@since 16/10/2022
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPDOC_EQU()
Local lValid	As logical

	lValid := IIF(M->F2_TPVENT=="1", Pertence("01/03"), Vazio()) 

Return lValid


/*/{Protheus.doc} VF2_TRANSP_EQU
	Función encargada de realizar las validaciones para el campo F2_TRANSP.
	@type  Function
	@author laura.medina
	@since 16/10/2022
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TRANSP_EQU()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_SERREF_EQU
	Función encargada de realizar las validaciones para el campo F2_SERREF del país Ecuador.
	@type  Function
	@author laura.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERREF_EQU()
Local lValid	As logical

	lValid := IIF(!EMPTY(M->F2_SERREF),MT485VLDNF(M->F2_NFREF,M->F2_SERREF,M->F2_CLIENTE,M->F2_LOJA),.T.)

Return lValid

/*/{Protheus.doc} VF2_NFREF_EQU
	Función encargada de realizar las validaciones para el campo F2_NFREF del país Ecuador.
	@type  Function
	@author laura.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_NFREF_EQU()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_MOTIVO_EQU
	Función encargada de realizar las validaciones para el campo F2_MOTIVO del país Perú.
	@type  Function
	@author laura.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MOTIVO_EQU()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_DIACTB_EQU
	Función encargada de realizar las validaciones para el campo F2_DIACTB.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_DIACTB_EQU()
Local lValid	As logical

	lValid := VldCodSeq()

Return lValid

/*/{Protheus.doc} WF2_DIACTB_EQU
	Función encargada de realizar la función When para el campo F2_DIACTB.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF2_DIACTB_EQU()
Local lRet	:= .T. As logical

	lRet :=  CtbWDia()

Return lRet
