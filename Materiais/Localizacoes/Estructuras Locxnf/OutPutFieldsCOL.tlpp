#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.outputfields.col

#Define OutPutFieldsCOL "totvs.protheus.backoffice.outputfields.col" 

/*/{Protheus.doc} COLOutputFields
	Realiza la creación de la estructura de campos para el paí­s COL.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class OutPutFields From OutPutFieldsAll

	public DATA lDocSoporte As logical

    public Method New() constructor
	public Method Facturacion()
	public Method FacturacionBeneficiamiento()
	public Method RemitoSalida()
	public Method RemitoSalidaBeneficiamento()
	public Method NotaDebitoCliente()
	public Method NotaCreditoExterna()
	public Method NotaCreditoProveedor()
	public Method NotaDebitoInterna()
	public Method RemitoDevolucion()
	public Method RemitoTransferenciaSalida()
	public Method NotaCreditoAjuste()

	public Method SERIE2()
    public Method CODMUN()
    public Method TPACTIV()
    public Method TRMPAC()
	public Method TIPREF()
	public Method MOTIVO()
	public Method UUIDREL()
	public Method TIPOPE()
	public Method ValidacionCamposAll()
	public Method TIPNOTA()
	public Method DocSoporte()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del paí­s
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class OutPutFields
    _Super:New( "COL", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} Facturacion
	Agrega campos para el documento.
		Documento: Facturacion
		Numero documento: 1
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Facturacion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TABELA", "F2_SERIE2", "F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC"}

		If !Empty(SuperGetMV("MV_PROVFE",,""))
			aAdd(aFields, "F2_UUIDREL")
			aAdd(aFields, "F2_TIPOPE")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_TABELA", "F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", ;
						"F2_SERIE2", "F2_UUIDREL", "F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC", "F2_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:SERIE2()
		self:TPACTIV()
		self:TRMPAC()
		self:UUIDREL()
		self:TIPOPE()
	EndIf
	
Return 

/*/{Protheus.doc} FacturacionBeneficiamiento
	Agrega campos para el documento.
		Documento: Facturacion Beneficiamiento
		Numero documento: 11
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturacionBeneficiamiento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TABELA", "F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC"}

		If !Empty(SuperGetMV("MV_PROVFE",,""))
			aAdd(aFields, "F2_TIPOPE")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_TABELA", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC", "F2_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:TRMPAC()
		self:TIPOPE()
	EndIf

Return

/*/{Protheus.doc} RemitoSalida
	Agrega campos para el documento.
		Documento: Facturacion de salida
		Numero documento: 50
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_TIPOREM", "F2_LIQPROD", "F2_SERIE2", "F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC"}

		If !Empty(SuperGetMV("MV_PROVFE",,""))
			aAdd(aFields, "F2_TIPOPE")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_VEND1", ;
						"F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_TIPOREM", "F2_LIQPROD", "F2_DIACTB", "F2_REFMOED", ;
						"F2_REFTAXA", "F2_SERIE2", "F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC", "F2_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:SERIE2()
		self:TPACTIV()
		self:TRMPAC()
		self:TIPOPE()
	EndIf

Return

/*/{Protheus.doc} RemitoSalidaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Salida Beneficiamento
		Numero documento: 52
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoSalidaBeneficiamento(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC"}

		If !Empty(SuperGetMV("MV_PROVFE",,""))
			aAdd(aFields, "F2_TIPOPE")
		EndIf
		
		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", ;
						"F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODMUN", "F2_TPACTIV", "F2_TRMPAC", "F2_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:TRMPAC()
		self:TIPOPE()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoCliente
	Agrega campos para el documento.
		Documento: Nota de Debito Cliente
		Numero documento: 2
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoCliente(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_SERIE2", "F2_TIPREF", "F2_MOTIVO", "F2_CODMUN", "F2_TPACTIV"}

		If !Empty(SuperGetMV("MV_PROVFE",,""))
			aAdd(aFields, "F2_TIPOPE")
		EndIf
		
		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_SERIE2", ;
						"F2_TIPREF", "F2_MOTIVO", "F2_CODMUN", "F2_TPACTIV", "F2_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:SERIE2()
		self:TPACTIV()
		self:TIPREF()
		self:MOTIVO()
		self:TIPOPE()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoExterna
	Agrega campos para el documento.
		Documento: Nota de Credito Externa
		Numero documento: 3
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoExterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_SERIE2", "F2_CODMUN", "F2_TPACTIV"}

		If !Empty(SuperGetMV("MV_PROVFE",,""))
			aAdd(aFields, "F2_TIPOPE")
		EndIf
		
		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE2", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_VEND1", "F2_VEND2", "F2_VEND3", "F2_VEND4", "F2_VEND5", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", ;
						"F2_CODMUN", "F2_TPACTIV", "F2_TIPOPE"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:SERIE2()
		self:TPACTIV()
		self:TIPOPE()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoProveedor
	Agrega campos para el documento.
		Documento: Nota de Credito Proveedor
		Numero documento: 7
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoProveedor(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_SERIE2", "F2_CODMUN", "F2_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE2", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODMUN", "F2_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:SERIE2()
		self:TPACTIV()
	EndIf

Return

/*/{Protheus.doc} NotaDebitoInterna
	Agrega campos para el documento.
		Documento: Nota de Debito Interna
		Numero documento: 6
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoInterna(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODMUN", "F2_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", ;
						"F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODMUN", "F2_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
	EndIf

Return

/*/{Protheus.doc} NotaCreditoAjuste
	Agrega campos para el documento.
		Documento: Nota Ajuste NCP
		Numero documento: 22
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoAjuste(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_SERIE2", "F2_CODMUN", "F2_TPACTIV", "F2_TIPNOTA"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE2", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", ;
						"F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODMUN", "F2_TPACTIV", "F2_TIPNOTA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:SERIE2()
		self:TPACTIV()
		self:TIPNOTA()
		self:DocSoporte()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucion
	Agrega campos para el documento.
		Documento: Remito de Devolucion
		Numero documento: 61
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucion(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODMUN", "F2_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", ;
						"F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODMUN", "F2_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
	EndIf

Return

/*/{Protheus.doc} RemitoTransferenciaSalida
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 54
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaSalida(lView As logical) Class OutPutFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F2_CODMUN", "F2_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F2_FILDEST", "F2_CLIENTE", "F2_LOJA", "cNome", "F2_SERIE", "F2_DOC", "F2_NATUREZ", "F2_GRPDEP", "F2_TIPORET", ;
						"F2_ESPECIE", "F2_EMISSAO", "F2_MOEDA", "F2_TXMOEDA", "F2_DIACTB", "F2_REFMOED", "F2_REFTAXA", "F2_CODMUN", "F2_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
	EndIf

Return

/*/{Protheus.doc} SERIE2
	Agrega propiedades para los campos F2_SERIE2.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERIE2(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_SERIE2", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_SERIE2_COL()")
	EndIf

Return

/*/{Protheus.doc} CODMUN
	Agrega propiedades para los campos F2_CODMUN.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CODMUN(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_CODMUN", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_CODMUN_COL()")
	EndIf

Return

/*/{Protheus.doc} TPACTIV
	Agrega propiedades para los campos F2_TPACTIV.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPACTIV(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_TPACTIV", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_TPACTIV_COL()")
	EndIf

Return

/*/{Protheus.doc} TIPREF
	Agrega propiedades para los campos F2_TIPREF.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPREF(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_TIPREF", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_TIPREF_COL()")
	EndIf

Return

/*/{Protheus.doc} TRMPAC
	Agrega propiedades para los campos F2_TRMPAC.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TRMPAC(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_TRMPAC", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_TRMPAC_COL()")
		self:SetModProperty("F2_TRMPAC", MODEL_FIELD_INIT, "")
	EndIf

Return

/*/{Protheus.doc} MOTIVO
	Agrega propiedades para los campos F2_MOTIVO.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method MOTIVO(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_MOTIVO", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_MOTIVO_COL()")
	EndIf

Return

/*/{Protheus.doc} UUIDREL
	Agrega propiedades para los campos F2_UUIDREL.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method UUIDREL(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_UUIDREL", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_UUIDREL_COL()")
	EndIf

Return

/*/{Protheus.doc} TIPOPE
	Agrega propiedades para los campos F2_TIPOPE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPOPE(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_TIPOPE", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_TIPOPE_COL()")
	EndIf

Return

/*/{Protheus.doc} TIPNOTA
	Agrega propiedades para los campos F2_TIPNOTA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPNOTA(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_TIPNOTA", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_TIPNOTA_COL()")
		self:SetModProperty("F2_TIPNOTA", MODEL_FIELD_OBRIGAT, .T.)
	EndIf

Return

/*/{Protheus.doc} DocSoporte
	Agrega propiedades para los campos F2_CLIENTE para documento soporte.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method DocSoporte(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F2_CLIENTE", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_CLIENTE_SOP()")
	EndIf    

Return

/*/{Protheus.doc} ValidacionCamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ValidacionCamposAll(lView As logical) Class OutPutFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F2_SERIE", MODEL_FIELD_VALID, OutPutFieldsCOL + ".VF2_SERIE_COL('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} VF2_SERIE_COL
	Función encargada de realizar las validaciones para el campo F2_SERIE para Perú.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
	/*/
Function VF2_SERIE_COL(cNumDoc as character)
Local lValid := .T.	As logical

Default cNumDoc := ""

	lValid := VF2_SERIE(cNumDoc)

	lValid := lValid .and. MAFISREF("NF_SERIENF","MT100",M->F2_SERIE) .and. LxExSer2()

Return lValid

/*/{Protheus.doc} VF2_TIPREF_COL
	Función encargada de realizar las validaciones para el campo F2_TIPREF del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPREF_COL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S004", M->F2_TIPREF,1,1)

Return lValid

/*/{Protheus.doc} VF2_MOTIVO_COL
	Función encargada de realizar las validaciones para el campo F2_MOTIVO del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_MOTIVO_COL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF2_SERIE2_COL
	Función encargada de realizar las validaciones para el campo F2_SERIE2 del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_SERIE2_COL()
Local lValid	As logical

	lValid := .T.

Return lValid


/*/{Protheus.doc} VF2_CODMUN_COL
	Función encargada de realizar las validaciones para el campo F2_CODMUN del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CODMUN_COL()
Local lValid	As logical

	lValid := ExistCpo("CC2",M->F2_CODMUN,3) .And. MaFisRef("NF_CODMUN","MT100",M->F2_CODMUN)

Return lValid

/*/{Protheus.doc} VF2_TPACTIV_COL
	Función encargada de realizar las validaciones para el campo F2_TPACTIV del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TPACTIV_COL()
Local lValid	As logical

	lValid := IIF(!EMPTY(M->F2_TPACTIV),ExistCpo("CCN",M->F2_TPACTIV,2) .AND. MaFisRef("NF_TPACTIV","MT100",M->F2_TPACTIV),Naovazio())

Return lValid

/*/{Protheus.doc} VF2_TRMPAC_COL
	Función encargada de realizar las validaciones para el campo F2_TRMPAC del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TRMPAC_COL()
Local lValid	As logical

	lValid := PERTENCE("12")

Return lValid

/*/{Protheus.doc} VF2_UUIDREL_COL
	Función encargada de realizar las validaciones para el campo F2_UUIDREL del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_UUIDREL_COL()
Local lValid	As logical

	lValid := M486VLDDR(M->F2_UUIDREL,.T.)

Return lValid

/*/{Protheus.doc} VF2_TIPOPE_COL
	Función encargada de realizar las validaciones para el campo F2_TIPOPE del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPOPE_COL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S017", M->F2_TIPOPE,1,2)

Return lValid

/*/{Protheus.doc} VF2_TIPNOTA_COL
	Función encargada de realizar las validaciones para el campo F2_TIPNOTA del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_TIPNOTA_COL()
Local lValid	As logical

	lValid := Pertence("12345") .and. NaoVazio()

Return lValid

/*/{Protheus.doc} VF2_CLIENTE_SOP
	Función encargada de realizar las validaciones para el campo F2_CLIENTE del país Colombia para documentos soporte.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF2_CLIENTE_SOP()
Local lValid	As logical

	lValid := VF2_CLIENTE(.T.) .and. LxVlCabCol()

Return lValid
