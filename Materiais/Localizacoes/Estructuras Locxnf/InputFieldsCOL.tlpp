#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.col

#Define	InputFieldsCOL "totvs.protheus.backoffice.inputfields.col"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país Colombia.
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public DATA lDocSoporte As logical

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()
	public Method NotaDebitoAjuste()

    public Method Serie()
    public Method TASARFT()
    public Method CODMUN()
    public Method TPACTIV()
    public Method TRMPAC()
    public Method DocSoporte()
	public Method TransferenciaElectronica()
	public Method TIPOPE()
	public Method SERIE2()
	public Method ValidacionCamposAll()
	public Method TIPNOTA()

EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields

    _Super:New( "COL", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie) 

    self:lDocSoporte := .F.

Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_TASARFT", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		If self:lDocSoporte
			self:DocSoporte(lView)
		EndIf

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_TASARFT", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:TASARFT()
		self:CODMUN()
		self:TPACTIV()
		self:TRMPAC()
		self:SERIE2()
		If self:lDocSoporte
			self:DocSoporte()
		EndIf
	EndIf

	
Return 

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:TRMPAC()
		self:SERIE2()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:TRMPAC()
		self:SERIE2()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV", "F1_TRMPAC"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:TRMPAC()
		self:SERIE2()
	EndIf
	
Return 

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_CODMUN"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:SERIE2()
	EndIf
	
Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CODMUN"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_MOTIVO", "F1_TIPREF", "F1_SERIE2", "F1_CODMUN", "F1_TPACTIV"}

		If !Empty(SuperGetMV("MV_PROVFE",,""))
			aAdd(aFields, "F1_TIPOPE")
		EndIf

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:serie(.T., "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_APROFOL", "F1_CERTFOL", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_MOTIVO", "F1_TIPREF", "F1_SERIE2", "F1_TIPOPE", "F1_CODMUN", "F1_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:TransferenciaElectronica()
		self:SERIE2()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_GERAPED", "F1_CODMUN", "F1_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:SERIE2()
	EndIf 
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODMUN", "F1_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(.T., "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_APROFOL", "F1_CERTFOL", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_CODMUN", "F1_TPACTIV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:SERIE2()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoAjuste
	Agrega campos para el documento.
		Documento: Nota Ajuste NDP
		Numero documento: 23
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoAjuste(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_SERIE2", "F1_DTDIGIT", "F1_CODMUN", "F1_TPACTIV", "F1_TIPNOTA"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:DocSoporte(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE2", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN", "F1_TPACTIV", "F1_TIPNOTA"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
		self:TPACTIV()
		self:SERIE2()
		self:TIPNOTA()
		self:DocSoporte()
	EndIf

Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_APRVDEV", "F1_CODMUN"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:serie(.T., "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", ;
						"F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB", "F1_CODMUN"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV", "F1_CODMUN"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB", "F1_CODMUN"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
	EndIf
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODMUN"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:serie(.T., "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:CODMUN()
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_CODMUN"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB", "F1_CODMUN"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
    	self:CODMUN()
	EndIf
	
Return

/*/{Protheus.doc} Serie
	Agrega propiedades para los campos de F1_SERIE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method Serie(lView As logical, cSF3 as Character) Class InputFields

Default lView	:= .F.
Default cSF3 := ""

    If lView
		If !Empty(cSF3)
			self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,cSF3)
		EndIf
	EndIf

Return

/*/{Protheus.doc} TASARFT
	Agrega propiedades para los campos F1_TASARFT.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TASARFT(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_TASARFT", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_TASARFT_COL()")
	EndIf

Return

/*/{Protheus.doc} CODMUN
	Agrega propiedades para los campos F1_CODMUN.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CODMUN(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F1_CODMUN", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_CODMUN_COL()")
	EndIf

Return

/*/{Protheus.doc} TPACTIV
	Agrega propiedades para los campos F1_TPACTIV.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPACTIV(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
    	self:SetModProperty("F1_TPACTIV", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_TPACTIV_COL()")
	EndIf

Return

/*/{Protheus.doc} TransferenciaElectronica
	Agrega propiedades para los campos referentes a la transferencia electronica.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TransferenciaElectronica(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_MOTIVO", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_MOTIVO_COL()")

		self:SetModProperty("F1_TIPREF", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_TIPREF_COL()")

		self:SetModProperty("F1_SERIE2", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_SERIE2_COL()")

		self:SetModProperty("F1_TIPOPE", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_TIPOPE_COL()")
	EndIf

Return


/*/{Protheus.doc} TRMPAC
	Agrega propiedades para los campos F1_TRMPAC.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TRMPAC(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_TRMPAC", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_TRMPAC_COL()")
		self:SetModProperty("F1_TRMPAC", MODEL_FIELD_INIT, "")
	EndIf

Return

/*/{Protheus.doc} SERIE2
	Agrega propiedades para los campos F1_SERIE2.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method SERIE2(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_SERIE2", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_SERIE2_COL()")
	EndIf

Return

/*/{Protheus.doc} TIPNOTA
	Agrega propiedades para los campos F1_TIPNOTA.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TIPNOTA(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_TIPNOTA", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_TIPNOTA_COL()")
		self:SetModProperty("F1_TIPNOTA", MODEL_FIELD_OBRIGAT, .T.)
	EndIf

Return

/*/{Protheus.doc} DocSoporte
	Agrega propiedades para los campos F1_FORNECE/F1_SERIE para documento soporte.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method DocSoporte(lView As logical) Class InputFields

Default lView	:= .F.

    If lView
		self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,"01")
	Else
    	self:SetModProperty("F1_FORNECE", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_FORNECE_SOP()")
	EndIf    

Return

/*/{Protheus.doc} ValidacionCamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ValidacionCamposAll(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_DOC", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_DOC_COL('" + StrZero(self:nNumDoc,2) + "', " + self:lToS(self:lAuto) + ")")

		self:SetModProperty("F1_SERIE", MODEL_FIELD_VALID, InputFieldsCOL + ".VF1_SERIE_COL('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} VF1_DOC_COL
	Función encargada de realizar las validaciones para el campo F1_DOC del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DOC_COL(cNumDoc As character, lAuto As logical)
Local lValid	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.
	
	lValid := VF1_DOC(cNumDoc, lAuto) .and. fValSerDoc()                                                                   

Return lValid

/*/{Protheus.doc} VF1_SERIE_COL
	Función encargada de realizar las validaciones para el campo F1_SERIE del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE_COL(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""
	
	lValid := VF1_SERIE(cNumDoc) .and. fValSerDoc()                                                                   

Return lValid

/*/{Protheus.doc} VF1_SERIE2_COL
	Función encargada de realizar las validaciones para el campo F1_SERIE2 del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE2_COL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TASARFT_COL
	Función encargada de realizar las validaciones para el campo F1_TASARFT del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TASARFT_COL()
Local lValid	As logical

	lValid := POSITIVO() .AND. (M->F1_TASARFT >= 0.000 .AND.  M->F1_TASARFT <= 1.000) .and. LocXVal('F1_TASARFT')

Return lValid

/*/{Protheus.doc} VF1_CODMUN_COL
	Función encargada de realizar las validaciones para el campo F1_CODMUN del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CODMUN_COL()
Local lValid	As logical

	lValid := ExistCpo("CC2",M->F1_CODMUN,3).And.MaFisRef("NF_CODMUN","MT100",M->F1_CODMUN)

Return lValid

/*/{Protheus.doc} VF1_TPACTIV_COL
	Función encargada de realizar las validaciones para el campo F1_TPACTIV del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPACTIV_COL()
Local lValid	As logical

	lValid := IIF(!EMPTY(M->F1_TPACTIV),ExistCpo("CCN",M->F1_TPACTIV,2) .AND. MaFisRef("NF_TPACTIV","MT100",M->F1_TPACTIV),Naovazio())

Return lValid

/*/{Protheus.doc} VF1_TRMPAC_COL
	Función encargada de realizar las validaciones para el campo F1_TRMPAC del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TRMPAC_COL()
Local lValid	As logical

	lValid := PERTENCE("12")

Return lValid

/*/{Protheus.doc} VF1_MOTIVO_COL
	Función encargada de realizar las validaciones para el campo F1_MOTIVO del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_MOTIVO_COL()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TIPREF_COL
	Función encargada de realizar las validaciones para el campo F1_TIPREF del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPREF_COL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S003", M->F1_TIPREF,1,1)

Return lValid

/*/{Protheus.doc} VF1_TIPOPE_COL
	Función encargada de realizar las validaciones para el campo F1_TIPOPE del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPOPE_COL()
Local lValid	As logical

	lValid := Vazio() .or. ValidF3I("S017", M->F1_TIPOPE,1,2)

Return lValid

/*/{Protheus.doc} VF1_TIPNOTA_COL
	Función encargada de realizar las validaciones para el campo F1_TIPNOTA del país Colombia.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPNOTA_COL()
Local lValid	As logical

	lValid := Pertence("12345") .and. NaoVazio()

Return lValid

/*/{Protheus.doc} VF1_FORNECE_SOP
	Función encargada de realizar las validaciones para el campo F1_FORNECE del país Colombia para documentos soporte.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FORNECE_SOP()
Local lValid	As logical

	lValid := VF1_FORNECE(.T.) .and. LxVlCabCol()

Return lValid
