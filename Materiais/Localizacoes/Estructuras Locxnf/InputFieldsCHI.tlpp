#Include 'tlpp-core.th'
#Include 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.chi

#Define InputFieldsCHI "totvs.protheus.backoffice.inputfields.chi"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país "".
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()

	public Method NumeroCorrelativo()
	public Method ReciboHonorario()
	public Method Serie()
	public Method MotivoDevolucion()
EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields
    _Super:New( "", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_DTDIGIT", "F1_NUMCOR", "F1_RECHON"}

		//Adición de campos a la view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_NUMCOR", "F1_DIACTB", "F1_RECHON"}

   		self:AlterOrder(aOrdFields)
	else
		self:NumeroCorrelativo()
		self:ReciboHonorario()
		self:Serie()
	EndIf

Return

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    
	If lView
		aFields := {"F1_DTDIGIT", "F1_NUMCOR", "F1_RECHON"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_NUMCOR", "F1_DIACTB", "F1_RECHON"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:NumeroCorrelativo()
		self:ReciboHonorario()
		self:Serie()
	EndIf

Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_NUMCOR", "F1_RECHON"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_NUMCOR", "F1_DIACTB", "F1_RECHON"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)

	Else
		self:NumeroCorrelativo()
		self:ReciboHonorario()
		self:Serie()
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_NUMCOR", "F1_RECHON"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_NUMCOR", "F1_DIACTB", "F1_RECHON"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:NumeroCorrelativo()
		self:ReciboHonorario()
		self:Serie()
	EndIf
    	
Return 

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
	EndIf

Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_MOTIVO", "F1_TIPREF"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_MOTIVO", "F1_TIPREF"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
		self:MotivoDevolucion()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED", "F1_RECHON"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB", "F1_RECHON"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ReciboHonorario()
		self:Serie()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_NUMCOR", "F1_RECHON"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_NUMCOR", "F1_DIACTB", "F1_RECHON"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:NumeroCorrelativo()
		self:ReciboHonorario()
		self:Serie()
	EndIf

Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")
		
		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "SDV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
	EndIf
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:Serie()
	EndIf
	
Return

/*/{Protheus.doc} NumeroCorrelativo
	Metodo para agregar propiedade al campo F1_NUMCO.
	@author luis.samaniego
	@since 11/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method NumeroCorrelativo(lView As logical) class InputFields
Default lView := .F.

	If !lView
		self:SetModProperty("F1_NUMCOR", MODEL_FIELD_VALID, InputFieldsCHI + ".VF1_NUMCOR_CHI()")
	EndIf

Return

/*/{Protheus.doc} ReciboHonorario
	Metodo para agregar propiedades al campo F1_RECHON.
	@author luis.samaniego
	@since 11/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method ReciboHonorario(lView As logical) class InputFields
Default lView := .F.

	If !lView
		self:SetModProperty("F1_RECHON", MODEL_FIELD_VALID, InputFieldsCHI + ".VF1_RECHON_CHI()")
		self:SetModProperty("F1_RECHON", MODEL_FIELD_WHEN, "2")
	EndIf

Return

/*/{Protheus.doc} Serie
	Metodo para agregar propiedades al campo F1_SERIE.
	@author luis.samaniego
	@since 11/10/2022
	@param 	lView - logical - .T. para actualizar View / .F. para actualizar Model.
			cF3   - Character - Código de consulta padrón (X3_F3).
	@return
	/*/
Method Serie(lView As logical, cF3 As Character) class InputFields
Default lView  := .F.
Default cF3    := ""

	If lView
		self:oView:SetProperty("F1_SERIE", MVC_VIEW_LOOKUP, cF3)
	Else
		self:SetModProperty("F1_SERIE", MODEL_FIELD_VALID, InputFieldsCHI + ".VF1_SERIE_CHI('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} MotivoDevolucion
	Metodo para agregar propiedades a los campos F1_TIPREF, F1_MOTIVO.
	@author luis.samaniego
	@since 11/10/2022
	@param lView - logical - .T. para actualizar View / .F. para actualizar Model.
	@return
	/*/
Method MotivoDevolucion(lView As logical) class InputFields
Local aCombo As Array

Default lView  := .F.

	If !lView
		self:SetModProperty("F1_TIPREF", MODEL_FIELD_VALID, InputFieldsCHI + ".VF1_TIPREF_CHI()")
		If self:oModel:HasField("F1_TIPREF")
			aCombo := self:oModel:GetProperty("F1_TIPREF",MVC_MODEL_VALUES)
			aadd(aCombo, "")
			self:SetModProperty("F1_TIPREF", MODEL_FIELD_VALUES, aCombo)
			self:SetModProperty("F1_TIPREF", MODEL_FIELD_INIT, "")
		EndIf
		self:SetModProperty("F1_MOTIVO", MODEL_FIELD_VALID, InputFieldsCHI + ".VF1_MOTIVO_CHI()")
	EndIf
Return

/*/{Protheus.doc} VF1_TIPREF_CHI
	Función para validaciones del campo F1_TIPREF.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TIPREF_CHI()
Local lValid As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_MOTIVO_CHI
	Función para validaciones del campo F1_MOTIVO.
	@type  Function
	@author luis.samaniego
	@since 12/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_MOTIVO_CHI()
Local lValid As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_NUMCOR_CHI
	Función para validaciones del campo F1_NUMCOR.
	@type  Function
	@author luis.samaniego
	@since 11/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_NUMCOR_CHI()
Local lValid As logical
	
	lValid := CORR_VERIF(M->F1_DTDIGIT,M->F1_NUMCOR,.T.,M->F1_RECHON)
	
Return lValid


/*/{Protheus.doc} VF1_RECHON_CHI
	Función para validaciones del campo F1_RECHON.
	@type  Function
	@author luis.samaniego
	@since 11/10/2022
	@param 
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_RECHON_CHI()
Local lValid As logical

	lValid := Pertence(" 12") 
	lValid := lValid .And. CORR_VERIF(M->F1_DTDIGIT,M->F1_NUMCOR,.T.,M->F1_RECHON)

Return lValid


/*/{Protheus.doc} VF1_SERIE_CHI
	Función para validaciones del campo F1_SERIE - País Chile.
	@type  Function
	@author luis.samaniego
	@since 11/10/2022
	@param cNumDoc - Character - Número de tipo de documento a validar.
	@return lValid - logical - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE_CHI(cNumDoc As Character)
Local lValid As logical

Default	cNumDoc := ""

	lValid := VF1_SERIE(cNumDoc)
	lValid := lValid .And. VldNumCor(M->F1_SERIE)

Return lValid
