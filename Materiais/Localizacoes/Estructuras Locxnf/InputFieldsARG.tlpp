#include "tlpp-core.th"
#include "tlpp-object.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.arg

#Define	InputFieldsARG "totvs.protheus.backoffice.inputfields.arg"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país "".
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public DATA cPuntoVenta As character

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()
    
    
    public Method FacturaElectronicaEntradas()
    public Method VentaAsistidaEntradas()
    public Method ImpuestosEntradas()
    public Method FacturaExportacionEntradas()
    public Method ConsultaComprobantesEntradas()
    public Method PuntoVenta()
    public Method SerieRg1415()
    public Method Rg1415()
    public Method TPNFEXP()
    public Method CAI()
    public Method CAE()
    public Method CAEE()
    public Method TipoAjuste()
    public Method IVAPOS()
    public Method PERMISS()
    public Method WhenSerie()
	public Method WhenCodBar()
	public Method ValidacionCamposAll()
	public Method CODBAR()


EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields
    _Super:New( "ARG", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array
Local cAgente   := GetNewPar("MV_AGENTE", "   ") As character
Local cPE33     := LocxPE(33) As character

Default lView	:= .F.

	If lView
		aFields := {"F1_CODBAR", "F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_ZONGEO", "F1_CONCOBR", "F1_IMPNOCF",; 
                "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_CAE", "F1_VCTOCAE", "F1_ADIC5", "F1_ADIC61",;
                "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

		If SubStr(cAgente,6,1) == "S"
			aAdd(aFields, "F1_VALSUSS")
		EndIf

		If Empty(cPE33)
			aAdd(aFields, "F1_NUMDES")
		EndIf

		//Adición de campos a la view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		 aOrdFields := {"F1_CODBAR", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", ;
                    "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA","F1_TXMOEDA","F1_VALSUSS", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_ZONGEO", ;
                    "F1_CONCOBR", "F1_IMPNOCF", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_CAE", "F1_VCTOCAE", "F1_NUMDES", ; 
                    "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

		If self:oView:HasField("F1_CC")
			self:oView:SetProperty("F1_CC",MVC_VIEW_LOOKUP,"")
		EndIf

   		self:AlterOrder(aOrdFields)
	else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:ConsultaComprobantesEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
		self:CAI( , .T.)
		self:CAE()
		self:WhenSerie()
		self:WhenCodBar()
		self:CODBAR()

		self:SetModProperty("F1_CC", MODEL_FIELD_VALID, ".T.")
		
		If Empty(cPE33)
			self:SetModProperty("F1_NUMDES", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_NUMDES_ARG()")
		EndIf

	EndIf

Return

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    
	If lView
		aFields := {"F1_CODBAR", "F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", ;
                	"F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		If self:oView:HasField("F1_CC")
			self:oView:SetProperty("F1_CC",MVC_VIEW_LOOKUP,"")
		EndIf

		//Orden de los campos para el documento
		aOrdFields := {"F1_CODBAR", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", ;
						"F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:ConsultaComprobantesEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
		self:CAI( , .F.)
		self:WhenSerie()
		self:WhenCodBar()
		self:CODBAR()

		self:SetModProperty("F1_CC", MODEL_FIELD_VALID, ".T.")
	EndIf

Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODBAR", "F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", ;
					"F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		If self:oView:HasField("F1_CC")
			self:oView:SetProperty("F1_CC",MVC_VIEW_LOOKUP,"")
		EndIf

		//Orden de los campos para el documento
		aOrdFields := {"F1_CODBAR", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", ;
						"F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)

	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:ConsultaComprobantesEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
		self:CAI( ,.T.)
		self:WhenSerie()
		self:WhenCodBar()
		self:CODBAR()

		self:SetModProperty("F1_CC", MODEL_FIELD_VALID, ".T.")
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODBAR", "F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", ;
					"F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)
		
		If self:oView:HasField("F1_CC")
			self:oView:SetProperty("F1_CC",MVC_VIEW_LOOKUP,"")
		EndIf

		//Orden de los campos para el documento
		aOrdFields := {"F1_CODBAR", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", ;
						"F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:ConsultaComprobantesEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
		self:CAI( , .T.)
		self:WhenSerie()
		self:WhenCodBar()
		self:CODBAR()

		self:SetModProperty("F1_CC", MODEL_FIELD_VALID, ".T.")
	EndIf
    	
Return 

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", ;
						"F1_ADIC7"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:TPNFEXP()
	EndIf

Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_DTDIGIT", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:TPNFEXP()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_PV", "F1_RG1415", "F1_CC", "F1_GERAPED", "F1_PROVENT", "F1_FEFIDDE", "F1_FEFIHTA", "F1_TPNFEXP", "F1_TPVENT", ;
					"F1_FECDSE", "F1_FECHSE", "F1_EMCAEE", "F1_CAEE", "F1_IDIOMA", "F1_INCOTER", "F1_PAISENT", "F1_NFEXPOR", "F1_ADIC5", "F1_ADIC61", ;
					"F1_ADIC62", "F1_ADIC7", "F1_TPAJUS", "F1_RECPOS", "F1_IVAPOS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)
		self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,"X501PV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_PV", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_PROVENT", "F1_FEFIDDE", "F1_FEFIHTA", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", ;
						"F1_FECDSE", "F1_FECHSE", "F1_EMCAEE", "F1_CAEE", "F1_IDIOMA", "F1_INCOTER", "F1_PAISENT", "F1_NFEXPOR", "F1_ADIC5", "F1_ADIC61", ;
						"F1_ADIC62", "F1_ADIC7", "F1_TPAJUS", "F1_RECPOS", "F1_IVAPOS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PuntoVenta()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:FacturaExportacionEntradas()
		self:Rg1415(lView, ".F.")
		self:TPNFEXP()
		self:CAE()
		self:CAEE()
		self:TipoAjuste()
		self:IVAPOS()
		self:WhenSerie()
		self:WhenCodBar()

		self:SetModProperty("F1_FEFIDDE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_FEFIDDE_ARG()")
    	self:SetModProperty("F1_FEFIHTA", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_FEFIHTA_ARG()")
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODBAR", "F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_GERAPED", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", ;
                	"F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_CODBAR", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", ;
						"F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
		self:CAI(  , .F.)
		self:WhenSerie()
		self:CODBAR()
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_PV", "F1_RG1415", "F1_CC", "F1_PROVENT", "F1_ZONGEO", "F1_CONCOBR", "F1_IMPNOCF", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", ;
					"F1_FECHSE", "F1_CAE", "F1_VCTOCAE", "F1_EMCAEE", "F1_CAEE", "F1_IDIOMA", "F1_INCOTER", "F1_PERMISS", "F1_PAISENT", "F1_NFEXPOR", ;
					"F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_TPAJUS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,"X501PV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_PV", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ",;
						"F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_PROVENT", "F1_ZONGEO", "F1_CONCOBR", "F1_IMPNOCF", "F1_TPNFEXP",; 
						"F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_CAE", "F1_VCTOCAE", "F1_EMCAEE", "F1_CAEE", "F1_IDIOMA", "F1_INCOTER", "F1_PERMISS",;
						"F1_PAISENT", "F1_NFEXPOR", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_TPAJUS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PuntoVenta()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:FacturaExportacionEntradas()
		self:PERMISS()
		self:Rg1415(lView, ".F.")
		self:TPNFEXP()
		self:CAE()
		self:CAEE()
		self:TipoAjuste()
		self:WhenSerie()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODBAR", "F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_ZONGEO", "F1_CONCOBR", "F1_IMPNOCF", ;
					"F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_CAE", "F1_VCTOCAE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7", ;
					"F1_MODCONS", "F1_CODAUT", "F1_VALCONS", "F1_TPAJUS"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_CODBAR", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", ;
						"F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_VENCAI", "F1_CAI", "F1_QTDEFOL", "F1_PROVENT", "F1_ZONGEO", ;
						"F1_CONCOBR", "F1_IMPNOCF", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_CAE", "F1_VCTOCAE", "F1_ADIC5", ;
						"F1_ADIC61", "F1_ADIC62", "F1_ADIC7", "F1_MODCONS", "F1_CODAUT", "F1_VALCONS", "F1_TPAJUS"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:ConsultaComprobantesEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
		self:CAI( , .T.)
		self:CAE()
		self:TipoAjuste()
		self:WhenSerie()
		self:WhenCodBar()
		self:CODBAR()
	EndIf

Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_PV", "F1_RG1415", "F1_CC", "F1_GERAPED", "F1_APRVDEV", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", ;
        	        "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)
		
		self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,"X501PV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_PV", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", ;
						"F1_ADIC62", "F1_ADIC7"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PuntoVenta()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:Rg1415(lView, ".F.")
		self:TPNFEXP()
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", ;
					"F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", ;
						"F1_ADIC62", "F1_ADIC7"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
	EndIf
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_PV", "F1_RG1415", "F1_CC", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		self:oView:SetProperty("F1_SERIE",MVC_VIEW_LOOKUP,"X501PV")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_PV", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_MOEDA", "F1_TXMOEDA", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:PuntoVenta()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:Rg1415(lView, ".F.")
		self:TPNFEXP()
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_RG1415", "F1_CC", "F1_DTDIGIT", "F1_PROVENT", "F1_TPNFEXP", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", ;
					"F1_ADIC62", "F1_ADIC7"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Rg1415(lView)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_RG1415", "F1_CC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", ;
						"F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_PROVENT", "F1_TPNFEXP", "F1_DIACTB", "F1_TPVENT", "F1_FECDSE", "F1_FECHSE", "F1_ADIC5", "F1_ADIC61", "F1_ADIC62", "F1_ADIC7"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:ValidacionCamposAll()
		self:ImpuestosEntradas()
		self:FacturaElectronicaEntradas()
		self:VentaAsistidaEntradas()
		self:Rg1415(lView, ".T.")
		self:TPNFEXP()
	EndIf
	
Return

/*/{Protheus.doc} FacturaElectronicaEntradas
	Agrega propiedades para los campos de factura electronica.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaElectronicaEntradas(lView As logical) Class InputFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_TPVENT", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_TPVENT_ARG()")
		If self:oModel:HasField("F1_TPVENT")
			aValues := self:oModel:GetProperty("F1_TPVENT",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_TPVENT", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F1_TPVENT", MODEL_FIELD_INIT, "")
		EndIf

		self:SetModProperty("F1_FECDSE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_FECDSE_ARG()")

		self:SetModProperty("F1_FECHSE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_FECHSE_ARG()")
	EndIf

Return

/*/{Protheus.doc} VentaAsistidaEntradas
	Agrega propiedades para los campos de venta asistida.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method VentaAsistidaEntradas(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_ADIC5", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_ADIC5_ARG()")

		self:SetModProperty("F1_ADIC61", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_ADIC61_ARG()")

		self:SetModProperty("F1_ADIC62", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_ADIC62_ARG()")

		self:SetModProperty("F1_ADIC7", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_ADIC7_ARG()")
	EndIf

Return

/*/{Protheus.doc} ImpuestosEntradas
	Agrega propiedades para los campos de impuestos
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ImpuestosEntradas(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_PROVENT", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_PROVENT_ARG()")

		self:SetModProperty("F1_ZONGEO", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_ZONGEO_ARG()")

		self:SetModProperty("F1_CONCOBR", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_CONCOBR_ARG()")

		self:SetModProperty("F1_IMPNOCF", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_IMPNOCF_ARG()")

		self:SetModProperty("F1_VALSUSS", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_VALSUSS_ARG()")
	EndIf
Return

/*/{Protheus.doc} FacturaExportacionEntradas
	Agrega propiedades para los campos de factura de exportación
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaExportacionEntradas(lView As logical) Class InputFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_IDIOMA", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_IDIOMA_ARG()")
		If self:oModel:HasField("F1_IDIOMA")
			aValues := self:oModel:GetProperty("F1_IDIOMA",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_IDIOMA", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F1_IDIOMA", MODEL_FIELD_INIT, "")
		EndIf 

		self:SetModProperty("F1_INCOTER", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_INCOTER_ARG()")

		self:SetModProperty("F1_PAISENT", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_PAISENT_ARG()")

		self:SetModProperty("F1_NFEXPOR", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_NFEXPOR_ARG()")
	EndIf

Return

/*/{Protheus.doc} ConsultaComprobantesEntradas
	Agrega propiedades para los campos de consulta de comprobantes.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ConsultaComprobantesEntradas(lView As logical) Class InputFields
Local aValues   := {}   As array

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_MODCONS", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_MODCONS_ARG()")
		If self:oModel:HasField("F1_MODCONS")
			aValues := self:oModel:GetProperty("F1_MODCONS",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_MODCONS", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F1_MODCONS", MODEL_FIELD_INIT, "")
		EndIf
		
		self:SetModProperty("F1_CODAUT", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_CODAUT_ARG()")

		self:SetModProperty("F1_VALCONS", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_VALCONS_ARG()")
	EndIf

Return

/*/{Protheus.doc} PuntoVenta
	Agrega propiedades para los campos del punto de venta
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method PuntoVenta(lView As logical) Class InputFields
Local cWhen     := ""   As character
Local cInit     := ""   As character

Default lView	:= .F.

    If !lView
		cWhen := ".F."
		self:SetModProperty("F1_PV", MODEL_FIELD_WHEN, cWhen)
		cInit := "'" + self:cPuntoVenta + "'"
		self:SetModProperty("F1_PV", MODEL_FIELD_INIT, cInit)
	EndIf 

Return

/*/{Protheus.doc} Rg1415
	Agrega propiedades para los campos de la Rg1415.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
		cWhenCC - Caracter When del campo F1_CC
	@return 
	/*/
Method Rg1415(lView As logical, cWhenCC As character) Class InputFields
Local cWhen     := ""   As character

Default lView	:= .F.
Default cWhenCC	:= ""

	If lView
		If self:oView:HasField("F1_CC")
			self:oView:SetProperty("F1_CC",MVC_VIEW_LOOKUP,"FVS")
		EndIf
	Else
		cWhen := ".T."
		self:SetModProperty("F1_RG1415", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_RG1415_ARG()")
		self:SetModProperty("F1_RG1415", MODEL_FIELD_WHEN, cWhen)
		self:SetModProperty("F1_CC", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_CC_ARG()")
		self:SetModProperty("F1_CC", MODEL_FIELD_WHEN, cWhenCC)
	EndIf

Return

/*/{Protheus.doc} TPNFEXP
	Agrega propiedades para los campos F1_TPNFEXP.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TPNFEXP(lView As logical) Class InputFields
Local aValues   := {}   As array

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_TPNFEXP", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_TPNFEXP_ARG()")
		If self:oModel:HasField("F1_TPNFEXP")
			aValues := self:oModel:GetProperty("F1_TPNFEXP",MVC_MODEL_VALUES)
			aadd(aValues, "")
			self:SetModProperty("F1_TPNFEXP", MVC_MODEL_VALUES, aValues) 
			self:SetModProperty("F1_TPNFEXP", MODEL_FIELD_INIT, "") 
		EndIf
	EndIf

Return

/*/{Protheus.doc} CAI
	Agrega propiedades para los campos del CAI.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
        lTipDoc - logico - indica si se asigna la validación adicional
	@return 
	/*/
Method CAI(lView As logical, lTipDoc As logical) Class InputFields
Local lCodBar := .F. As logical

Default lView	:= .F.
Default lTipDoc := .F.

	If !lView
		lCodBar := self:oModel:HasField("F1_CODBAR")

		self:SetModProperty("F1_VENCAI", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_VENCAI_ARG()")

		self:SetModProperty("F1_CAI", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_CAI_ARG(" + self:lToS(lTipDoc) + ", '" + StrZero(self:nNumDoc,2) + "')")

		self:SetModProperty("F1_QTDEFOL", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_QTDEFOL_ARG()")
	EndIf

Return

/*/{Protheus.doc} CAE
	Agrega propiedades para los campos de F1_CAE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CAE(lView As logical) Class InputFields

Default lView	:= .F.

    If !lView
		self:SetModProperty("F1_CAE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_CAE_ARG()")

		self:SetModProperty("F1_VCTOCAE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_VCTOCAE_ARG()")
	EndIf

Return

/*/{Protheus.doc} CAEE
	Agrega propiedades para los campos de F1_CAEE.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CAEE(lView As logical) Class InputFields
Local cWhen     := ""   As character

Default lView	:= .F.

    If !lView
		cWhen := ".F."
		self:SetModProperty("F1_CAEE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_EMCAEE_ARG()")
		self:SetModProperty("F1_CAEE", MODEL_FIELD_WHEN, cWhen)

		self:SetModProperty("F1_EMCAEE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_CAEE_ARG()")
		self:SetModProperty("F1_EMCAEE", MODEL_FIELD_WHEN, cWhen)
	EndIf

Return

/*/{Protheus.doc} TipoAjuste
	Agrega propiedades para los campos F1_TPAJUS.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method TipoAjuste(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
    	self:SetModProperty("F1_TPAJUS", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_TPAJUS_ARG()")
	EndIf
    
Return

/*/{Protheus.doc} IVAPOS
	Agrega propiedades para los campos de IVA posdatado.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method IVAPOS(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_RECPOS", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_RECPOS_ARG()")

		self:SetModProperty("F1_IVAPOS", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_IVAPOS_ARG()")
	EndIf

Return

/*/{Protheus.doc} PERMISS
	Agrega propiedades para los campos de F1_PERMISS.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method PERMISS(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
    	self:SetModProperty("F1_PERMISS", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_PERMISS_ARG()")
	EndIf

Return

/*/{Protheus.doc} WhenSerie
	Agrega propiedades para los campos de serie.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenSerie(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
    	self:SetModProperty("F1_SERIE", MODEL_FIELD_WHEN, InputFieldsARG + ".WF1_SERIE_ARG(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")
	EndIf

Return

/*/{Protheus.doc} WhenCodBar
	Agrega propiedades para los campos utilizados para el campo F1_CODBAR.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method WhenCodBar(lView As logical) Class InputFields
Local lCodBar	:= .F.  As logical

Default lView	:= .F.

	If !lView
		lCodBar := self:oModel:HasField("F1_CODBAR")

		self:SetModProperty("F1_FORNECE", MODEL_FIELD_WHEN, InputFieldsARG + ".WF1_FORNECE_ARG(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ", " + self:lToS(lCodBar) + ")")
		self:SetModProperty("F1_LOJA", MODEL_FIELD_WHEN, InputFieldsARG + ".WF1_LOJA_ARG(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ", " + self:lToS(lCodBar) + ")")
		self:SetModProperty("F1_VENCAI", MODEL_FIELD_WHEN, InputFieldsARG + ".WF1_VENCAI_ARG(" + self:lToS(lCodBar) + ")")
		self:SetModProperty("F1_CAI", MODEL_FIELD_WHEN, InputFieldsARG + ".WF1_CAI_ARG(" + self:lToS(lCodBar) + ")")
	EndIf

Return

/*/{Protheus.doc} ValidacionCamposAll
	Metodo usado para asignar validaciones a campos usados por todos los documentos, las funciones asignadas deberán 
	llamar a la función de validación estandar del campo.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method ValidacionCamposAll(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_DOC", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_DOC_ARG('" + StrZero(self:nNumDoc,2) + "', " + self:lToS(self:lAuto) + ")")

		self:SetModProperty("F1_SERIE", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_SERIE_ARG('" + StrZero(self:nNumDoc,2) + "')")

		self:SetModProperty("F1_EMISSAO", MODEL_FIELD_VALID, InputFieldsARG + ".VF1_EMISSAO_ARG('" + StrZero(self:nNumDoc,2) + "')")
	EndIf

Return

/*/{Protheus.doc} CODBAR
	Agrega propiedades  para el campo F1_CODBAR.
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method CODBAR(lView As logical) Class InputFields

Default lView	:= .F.

	If !lView
		self:SetModProperty("F1_CODBAR", MODEL_FIELD_VALID, "LocxchkCB(M->F1_CODBAR,.T.,M->F1_ESPECIE)")
		self:SetModProperty("F1_CODBAR", MODEL_FIELD_WHEN, InputFieldsARG + ".WF1_CODBAR_ARG(" + self:lToS(self:l103Visual) + ", " + self:lToS(self:l103Class) + ", " + self:lToS(self:nNumDoc == 64) + ")")
	EndIf

Return

/*/{Protheus.doc} VF1_SERIE_ARG
	Función encargada de realizar las validaciones para el campo F1_SERIE para Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_SERIE_ARG(cNumDoc as character)
Local lValid := .T.	As logical

Default	cNumDoc := ""
	
	lValid := VF1_SERIE(cNumDoc)

	If lValid .and. cNumDoc $ "04|08|51|63"
		lValid := LNF2VldSer()
	EndIf

	lValid := lValid .and. GrvRG1415()

Return lValid

/*/{Protheus.doc} VF1_DOC_ARG
	Función encargada de realizar las validaciones para el campo F1_DOC.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
		lAuto - logico - Indica si es una rutina automatica
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_DOC_ARG(cNumDoc As character, lAuto As logical)
Local lValid := .T.	As logical

Default cNumDoc	:= ""
Default lAuto	:= .F.

	lValid := VF1_DOC(cNumDoc, lAuto)
	
	If lValid .and. cNumDoc $ "05|09|10|12|13|14"
		lValid := AutNumCai(M->F1_ESPECIE)
	EndIf

	lValid := lValid .and. GrvRG1415()

Return lValid

/*/{Protheus.doc} VF1_EMISSAO_ARG
	Función encargada de realizar las validaciones para el campo F1_EMISSAO del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_EMISSAO_ARG(cNumDoc As character)
Local lValid	As logical

Default cNumDoc	:= ""

	lValid := VF1_EMISSAO(cNumDoc) .and. LocEmisPro()

Return lValid

/*/{Protheus.doc} VF1_RG1415_ARG
	Función encargada de realizar las validaciones para el campo F1_RG1415 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_RG1415_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_CC_ARG
	Función encargada de realizar las validaciones para el campo F1_CC del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CC_ARG()
Local lValid	As logical

	lValid := VldCC(M->F1_FORNECE,M->F1_LOJA,M->F1_CC,M->F1_RG1415)

Return lValid

/*/{Protheus.doc} VF1_VENCAI_ARG
	Función encargada de realizar las validaciones para el campo F1_VENCAI del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_VENCAI_ARG()
Local lValid	As logical

	lValid := VenctoCAI(M->F1_EMISSAO,M->F1_VENCAI)

Return lValid

/*/{Protheus.doc} VF1_CAI_ARG
	Función encargada de realizar las validaciones para el campo F1_CAI del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
		lTipDoc - logico - indica si se asigna la validación adicional
		cNumDoc - caracter - Numero de documento para el cual van a ser realizadas las validaciones.
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CAI_ARG(lTipDoc As logical, cNumDoc As character)
Local lValid := .T.	As logical
Local nTipDc	As numeric

Default lTipDoc := .F.
Default cNumDoc	:= ""

	If lTipDoc .and. TamSX3("F1_CAI")[1] == 15
		nTipDc := Iif(cNumDoc=="10",1,Iif(cNumDoc=="07",3,2))

		lValid := VldCAIE(alltrim(SA2->A2_CGC),Alltrim(M->F1_SERIE),nTipDc,Subs(Alltrim(M->F1_DOC),1,4),M->F1_CAI,M->F1_VENCAI)
	EndIf

Return lValid

/*/{Protheus.doc} VF1_QTDEFOL_ARG
	Función encargada de realizar las validaciones para el campo F1_QTDEFOL del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_QTDEFOL_ARG()
Local lValid	As logical

	lValid := NaoVazio()

Return lValid

/*/{Protheus.doc} VF1_PROVENT_ARG
	Función encargada de realizar las validaciones para el campo F1_PROVENT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_PROVENT_ARG()
Local lValid	As logical

	lValid := (Vazio() .or. M->F1_PROVENT="99" .or. ExistCpo("SX5","12"+M->F1_PROVENT)) .and. MAFISREF("NF_UFDEST","MT100",M->F1_PROVENT)
    
    lValid := lValid .and. LocProvEnt()

Return lValid

/*/{Protheus.doc} VF1_ZONGEO_ARG
	Función encargada de realizar las validaciones para el campo F1_ZONGEO del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_ZONGEO_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCPO("SX5","ZG"+M->F1_ZONGEO)

Return lValid

/*/{Protheus.doc} VF1_CONCOBR_ARG
	Función encargada de realizar las validaciones para el campo F1_CONCOBR del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CONCOBR_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCPO("SX5","CO"+M->F1_CONCOBR)

Return lValid

/*/{Protheus.doc} VF1_IMPNOCF_ARG
	Función encargada de realizar las validaciones para el campo F1_IMPNOCF del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_IMPNOCF_ARG()
Local lValid	As logical

	lValid := positivo()

Return lValid

/*/{Protheus.doc} VF1_TPNFEXP_ARG
	Función encargada de realizar las validaciones para el campo F1_TPNFEXP del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPNFEXP_ARG()
Local lValid	As logical

	lValid := Pertence(' 12')

Return lValid

/*/{Protheus.doc} VF1_TPVENT_ARG
	Función encargada de realizar las validaciones para el campo F1_TPVENT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPVENT_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. Pertence('BSA')

Return lValid

/*/{Protheus.doc} VF1_FECDSE_ARG
	Función encargada de realizar las validaciones para el campo F1_FECDSE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FECDSE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_FECHSE_ARG
	Función encargada de realizar las validaciones para el campo F1_FECHSE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FECHSE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_CAE_ARG
	Función encargada de realizar las validaciones para el campo F1_CAE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CAE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_VCTOCAE_ARG
	Función encargada de realizar las validaciones para el campo F1_VCTOCAE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_VCTOCAE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_ADIC5_ARG
	Función encargada de realizar las validaciones para el campo F1_ADIC5 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_ADIC5_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. EXISTCPO('SX5','XJ'+M->F1_ADIC5)

Return lValid

/*/{Protheus.doc} VF1_ADIC61_ARG
	Función encargada de realizar las validaciones para el campo F1_ADIC61 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_ADIC61_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. EXISTCPO('SX5','OC'+M->F1_ADIC61)

Return lValid

/*/{Protheus.doc} VF1_ADIC62_ARG
	Función encargada de realizar las validaciones para el campo F1_ADIC62 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_ADIC62_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_ADIC7_ARG
	Función encargada de realizar las validaciones para el campo F1_ADIC7 del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_ADIC7_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. EXISTCPO('SX5','XK'+M->F1_ADIC7)

Return lValid

/*/{Protheus.doc} VF1_MODCONS_ARG
	Función encargada de realizar las validaciones para el campo F1_MODCONS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_MODCONS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_CODAUT_ARG
	Función encargada de realizar las validaciones para el campo F1_CODAUT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CODAUT_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_VALCONS_ARG
	Función encargada de realizar las validaciones para el campo F1_VALCONS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_VALCONS_ARG()
Local lValid	As logical

	lValid := Afipcons()

Return lValid

/*/{Protheus.doc} VF1_VALSUSS_ARG
	Función encargada de realizar las validaciones para el campo F1_VALSUSS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_VALSUSS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_NUMDES_ARG
	Función encargada de realizar las validaciones para el campo F1_NUMDES del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_NUMDES_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_FEFIDDE_ARG
	Función encargada de realizar las validaciones para el campo F1_FEFIDDE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FEFIDDE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_FEFIHTA_ARG
	Función encargada de realizar las validaciones para el campo F1_FEFIHTA del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_FEFIHTA_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_EMCAEE_ARG
	Función encargada de realizar las validaciones para el campo F1_EMCAEE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_EMCAEE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_CAEE_ARG
	Función encargada de realizar las validaciones para el campo F1_CAEE del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CAEE_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_IDIOMA_ARG
	Función encargada de realizar las validaciones para el campo F1_IDIOMA del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_IDIOMA_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. Pertence("123")

Return lValid

/*/{Protheus.doc} VF1_INCOTER_ARG
	Función encargada de realizar las validaciones para el campo F1_INCOTER del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_INCOTER_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo('SYJ',M->F1_INCOTER)

Return lValid

/*/{Protheus.doc} VF1_PAISENT_ARG
	Función encargada de realizar las validaciones para el campo F1_PAISENT del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_PAISENT_ARG()
Local lValid	As logical

	lValid := Vazio() .Or. ExistCpo('SYA',M->F1_PAISENT)

Return lValid

/*/{Protheus.doc} VF1_NFEXPOR_ARG
	Función encargada de realizar las validaciones para el campo F1_NFEXPOR del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_NFEXPOR_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_TPAJUS_ARG
	Función encargada de realizar las validaciones para el campo F1_TPAJUS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPAJUS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_RECPOS_ARG
	Función encargada de realizar las validaciones para el campo F1_RECPOS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_RECPOS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_IVAPOS_ARG
	Función encargada de realizar las validaciones para el campo F1_IVAPOS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_IVAPOS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} VF1_PERMISS_ARG
	Función encargada de realizar las validaciones para el campo F1_PERMISS del país Argentina.
	@type  Function
	@author raul.medina
	@since 
	@param
	@return 
		lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_PERMISS_ARG()
Local lValid	As logical

	lValid := .T.

Return lValid

/*/{Protheus.doc} WF1_SERIE_ARG
	Función encargada de realizar la función When para el campo F1_SERIE.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_SERIE_ARG(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	As logical
Local lAltSerie := SuperGetMV("MV_ALTSER",,.T.) As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.

	lRet := WF1_SERIE(l103Visual, l103Class, lRemTrans) .and. Iif(lAltSerie,.T.,Iif(!Empty(M->F1_SERIE),.F.,.T.))

Return lRet

/*/{Protheus.doc} WF1_FORNECE_ARG
	Función encargada de realizar la función When para el campo F1_FORNECE.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
		lCodBar - logico - indica si existe el campo F1_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_FORNECE_ARG(l103Visual as logical, l103Class as logical, lRemTrans as logical, lCodBar As logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.
Default lCodBar 	:= .F.

	lRet := WF1_FORNECE(l103Visual, l103Class, lRemTrans)
	
	If lRet .and. lCodBar
		lRet := Empty(M->F1_CODBAR)
	EndIf

Return lRet

/*/{Protheus.doc} WF1_LOJA_ARG
	Función encargada de realizar la función When para el campo F1_LOJA.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
		lCodBar - logico - indica si existe el campo F1_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_LOJA_ARG(l103Visual as logical, l103Class as logical, lRemTrans as logical, lCodBar As logical)
Local lRet	:= .T. As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.
Default lCodBar 	:= .F.

	lRet := WF1_LOJA(l103Visual, l103Class, lRemTrans)

	If lRet .and. lCodBar
		lRet := Empty(M->F1_CODBAR)
	EndIf

Return lRet

/*/{Protheus.doc} F1_VENCAI_ARG
	Función encargada de realizar la función When para el campo F1_VENCAI.
	@type  Function
	@author raul.medina
	@since 
	@param
		lCodBar - logico - indica si existe el campo F1_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_VENCAI_ARG(lCodBar As logical)
Local lRet	:= .T. As logical

Default lCodBar := .F.

	If lCodBar
		lRet := Empty(M->F1_CODBAR)
	EndIf

Return lRet

/*/{Protheus.doc} WF1_CAI_ARG
	Función encargada de realizar la función When para el campo F1_CAI.
	@type  Function
	@author raul.medina
	@since 
	@param
		lCodBar - logico - indica si existe el campo F1_CODBAR 
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_CAI_ARG(lCodBar As logical)
Local lRet	:= .T. As logical

Default lCodBar := .F.

	If lCodBar
		lRet := Empty(M->F1_CODBAR)
	EndIf

Return lRet

/*/{Protheus.doc} WF1_CODBAR_ARG
	Función encargada de realizar la función When para el campo F1_CODBAR.
	@type  Function
	@author raul.medina
	@since 
	@param
		l103Visual - !lInclui .AND. !l103Class
		l103Class - (lIntegracao .AND. nOpca==4 ) -> lIntegracao - IF(GetMV("MV_EASY")=="S",.T.,.F.), nOpca 4- Cancelar
		lRemTrans - Indica si es un remito de transferencia - Documento 64
	@return 
		lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/

Function WF1_CODBAR_ARG(l103Visual as logical, l103Class as logical, lRemTrans as logical)
Local lRet	As logical

Default l103Visual 	:= .F.
Default l103Class	:= .F.
Default lRemTrans	:= .F.

	lRet := lRet := !(l103Visual .Or. l103Class .Or. lRemTrans)

Return lRet
