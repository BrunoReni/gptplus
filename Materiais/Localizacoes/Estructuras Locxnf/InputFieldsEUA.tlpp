#include "tlpp-core.th"
#INCLUDE 'FWMVCDEF.CH'

namespace totvs.protheus.backoffice.inputfields.eua

#Define InputFieldsEUA "totvs.protheus.backoffice.inputfields.eua"

/*/{Protheus.doc} InputFields
	Realiza la cración de la estructura de campos para el país "".
	@type  Class
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Class InputFields From InputFieldsAll

    public Method New() constructor
    public Method FacturaEntrada()
    public Method FacturaEntradaBeneficiamento()
    public Method FacturaGastosImp()
    public Method FacturaConcTransp()
	public Method RemitoEntrada()
    public Method RemitoEntradaBeneficiamento()
    public Method NotaCreditoCliente()
    public Method NotaDebitoExterna()
	public Method NotaCreditoInterna()
    public Method NotaDebitoProveedor()
    public Method RemitoDevolucionFormularioPropio()
    public Method RemitoDevolucionFormularioPropioNo()
    public Method RetornoSimbolico()
    public Method RemitoTransferenciaEntrada()

	public Method Serie()
	public Method EntidadEntrega()
	public Method EntidadEmision()
	public Method TipoActividad()
EndClass

/*/{Protheus.doc} New
	Realiza la cración del objeto para poder hacer uso de los metodos que agregan campos a la estructuras del país
	@type  Method
	@author raul.medina
	@since 
	@param 
	@return 
	/*/
Method New(lViewNoUs As logical, lVirtual As logical, lModel As logical, lInsert As logical, lEdit As logical, lDelete As logical, cEspecie As character) Class InputFields
    _Super:New( "", lViewNoUs, lVirtual, lModel, lInsert, lEdit, lDelete, cEspecie)
Return Self

/*/{Protheus.doc} FacturaEntrada
	Agrega campos para el documento.
		Documento: Factura Entrada
		Numero documento: 10
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_DTDIGIT"}

		//Adición de campos a la view de la clase Fields
		self:AddFieldsAd(aFields)

		 aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

   		self:AlterOrder(aOrdFields)
	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
	EndIf

Return

/*/{Protheus.doc} FacturaEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Factura Entrada de Beneficiamiento
		Numero documento: 12
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    
	If lView
		aFields := {"F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_DTDIGIT"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
	EndIf

Return 

/*/{Protheus.doc} FacturaGastosImp
	Agrega campos para el documento.
		Documento: Facturas Gast. Imp.
		Numero documento: 13
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaGastosImp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)

	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
	EndIf
	
Return 

/*/{Protheus.doc} FacturaConcTransp
	Agrega campos para el documento.
		Documento: Factura Conc. Transporte.
		Numero documento: 14
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method FacturaConcTransp(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
	EndIf
    	
Return 

/*/{Protheus.doc} RemitoEntrada
	Agrega campos para el documento.
		Documento: Remito de Entrada
		Numero documento: 60
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return 

/*/{Protheus.doc} RemitoEntradaBeneficiamento
	Agrega campos para el documento.
		Documento: Remito de Entrada de Beneficiamiento
		Numero documento: 62
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoEntradaBeneficiamento(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

	If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoCliente
	Agrega campos para el documento.
		Documento: Nota de Credito de cliente.
		Numero documento: 4
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoCliente(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_TPACTIV", "F1_GERAPED"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_CODMUN", "F1_EST", "F1_PROVENT", "F1_ZONGEO", "F1_TPACTIV", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	Else
		self:EntidadEntrega(, .F.)
		self:EntidadEmision(, .F.)
		self:TipoActividad()
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoExterna
	Agrega campos para el documento.
		Documento: Nota de debito externa.
		Numero documento: 5
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param 
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoExterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED"}

    	//Adición de campos al model/view de la clase Fields
    	self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_VEND1", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return 

/*/{Protheus.doc} NotaCreditoInterna
	Agrega campos para el documento.
		Documento: Nota de Credito Interna
		Numero documento: 8
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaCreditoInterna(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return 

/*/{Protheus.doc} NotaDebitoProveedor
	Agrega campos para el documento.
		Documento: Nota debito Proveedor
		Numero documento: 9
		Modulo: Compras
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method NotaDebitoProveedor(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf

Return 

/*/{Protheus.doc} RemitoDevolucionFormularioPropio
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio Si.
		Numero documento: 51
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropio(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")
		
		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return

/*/{Protheus.doc} RemitoDevolucionFormularioPropioNo
	Agrega campos para el documento.
		Documento: Remito de devolucion formulario propio no.
		Numero documento: 53
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoDevolucionFormularioPropioNo(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT", "F1_GERAPED", "F1_APRVDEV"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_GERAPED", "F1_APRVDEV", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return

/*/{Protheus.doc} RetornoSimbolico
	Agrega campos para el documento.
		Documento: Retorno simbolico.
		Numero documento: 63
		Modulo: Facturacion
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RetornoSimbolico(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)
		self:Serie(lView, "01")

		//Orden de los campos para el documento
		aOrdFields := {"F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return

/*/{Protheus.doc} RemitoTransferenciaEntrada
	Agrega campos para el documento.
		Documento: Remito de transferencia
		Numero documento: 64
		Modulo: Stock
	@type  Method
	@author raul.medina
	@since 
	@param
		lView - logico 	- Indica si debe realizar las actualizaciones de la view.
			Falso 		- Actualiza la parte del model.
			Verdadero 	- Actualiza la parte de la view.
	@return 
	/*/
Method RemitoTransferenciaEntrada(lView As logical) Class InputFields
Local aFields   := {}   As Array
Local aOrdFields:= {}   As Array

Default lView	:= .F.

    If lView
		aFields := {"F1_DTDIGIT"}

		//Adición de campos al model/view de la clase Fields
		self:AddFieldsAd(aFields)

		//Orden de los campos para el documento
		aOrdFields := {"F1_FILORIG", "F1_FORNECE", "F1_LOJA", "cNome", "F1_SERIE", "F1_DOC", "F1_NATUREZ", "F1_ESPECIE", "F1_EMISSAO", "F1_DTDIGIT", "F1_MOEDA", "F1_TXMOEDA", "F1_DIACTB"}

		//Metodo utilizado para realizar el ordenamiento de acuerdo al arreglo aOrdFields.
		self:AlterOrder(aOrdFields)
	EndIf
	
Return

/*/{Protheus.doc} Serie
	Metodo para agregar propiedades al campo F1_SERIE.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			cF3 - Character - Código de consulta padrón (X3_F3).
	@return 
	/*/
Method Serie(lView As logical, cF3 as Character) Class InputFields
Default lView := .F.
Default cF3   := ""

	If lView
		If !Empty(cF3)
			self:oView:SetProperty("F1_SERIE", MVC_VIEW_LOOKUP, cF3)
		EndIf
    EndIf

Return

/*/{Protheus.doc} EntidadEntrega
	Metodo para agregar propiedades al campo F1_CODMUN.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			lWhen - logico - Indica si el campo(s) puede ser editado.
	@return
	/*/
Method EntidadEntrega(lView As logical, lWhen As logical) Class InputFields
Default lView := .F.
Default lWhen := .T.

	If !lView
		self:SetModProperty("F1_CODMUN", MODEL_FIELD_WHEN, InputFieldsEUA + ".WF1_CODMUN_EUA()")
		self:SetModProperty("F1_CODMUN", MODEL_FIELD_VALID, InputFieldsEUA + ".VF1_CODMUN_EUA()")
		self:SetModProperty("F1_EST", MODEL_FIELD_WHEN, InputFieldsEUA + ".WF1_EST_EUA(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F1_EST", MODEL_FIELD_VALID, InputFieldsEUA + ".VF1_EST_EUA()")
	EndIf
Return

/*/{Protheus.doc} VF1_CODMUN_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F1_CODMUN.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_CODMUN_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("CC2", M->F1_CODMUN,3) .And. MaFisRef("NF_CODMUN","MT100",M->F1_CODMUN) .AND. LlnVal()
	
Return lValid

/*/{Protheus.doc} EntidadEmision
	Metodo para agregar propiedades a los campos F1_EST, F1_PROVENT, F1_ZONGEO.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			lWhen - logico - Indica si el campo(s) puede ser editado.
	@return 
	/*/
Method EntidadEmision(lView As logical, lWhen As logical) Class InputFields
Default lView := .F.
Default lWhen := .T.

	If !lView
		self:SetModProperty("F1_PROVENT", MODEL_FIELD_WHEN, InputFieldsEUA + ".WF1_PROVENT_EUA()")
		self:SetModProperty("F1_PROVENT", MODEL_FIELD_VALID, InputFieldsEUA + ".VF1_PROVENT_EUA()")
		self:SetModProperty("F1_ZONGEO", MODEL_FIELD_WHEN, InputFieldsEUA + ".WF1_ZONGEO_EUA(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F1_ZONGEO", MODEL_FIELD_VALID, InputFieldsEUA + ".VF1_ZONGEO_EUA()")
	EndIf
Return

/*/{Protheus.doc} VF1_EST_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F1_EST.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_EST_EUA()
Local lValid As logical

	lValid := ExistCpo("SX5","12"+M->F1_EST) .And. MaFisRef("NF_UFORIGEM","MT100",M->F1_EST)

Return lValid

/*/{Protheus.doc} VF1_PROVENT_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F1_PROVENT.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_PROVENT_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("CC2",M->F1_PROVENT,3) .and. MaFisRef("NF_PROVENT","MT100",M->F1_PROVENT) .AND. LlnVal()

Return lValid

/*/{Protheus.doc} VF1_ZONGEO_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F1_ZONGEO.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_ZONGEO_EUA()
Local lValid As logical

	lValid := Vazio() .or. ExistCpo("SX5","12"+M->F1_ZONGEO)

Return lValid

/*/{Protheus.doc} TipoActividad
	Metodo para agregar propiedades al campo F1_TPACTIV.
	@author luis.samaniego
	@since 18/10/2022
	@version version
	@param	lView - logico -Indica si debe realizar las actualizaciones de la view.
				Falso - Actualiza el model.
				Verdadero - Actualiza la view.
			lWhen - logico - Indica si el campo(s) puede ser editado.
	@return 
	/*/
Method TipoActividad(lView As logical, lWhen As logical) Class InputFields
Default lView := .F.
Default lWhen := .T.

	If !lView
		self:SetModProperty("F1_TPACTIV", MODEL_FIELD_WHEN, InputFieldsEUA + ".WF1_TPACTIV_EUA(" + self:lToS(lWhen) + ")")
		self:SetModProperty("F1_TPACTIV", MODEL_FIELD_VALID, InputFieldsEUA + ".VF1_TPACTIV_EUA()")
	EndIf
Return

/*/{Protheus.doc} VF1_TPACTIV_EUA
	Función encargada de realizar las validaciones (X3_VALID) para el campo F1_TPACTIV.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param 
	@return lValid -Logico - Devuelve el resultado de las validaciones.
	/*/
Function VF1_TPACTIV_EUA()
Local lValid As logical

	lValid := vazio() .or. ExistCpo("CCN",M->F1_EST+M->F1_TPACTIV,1) .AND. MaFisRef("NF_TPACTIV","MT100",M->F1_TPACTIV)

Return lValid

/*/{Protheus.doc} WF1_CODMUN_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F1_CODMUN.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_CODMUN_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_EST_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F1_EST.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_EST_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_PROVENT_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F1_PROVENT.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_PROVENT_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_ZONGEO_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F1_ZONGEO.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_ZONGEO_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet

/*/{Protheus.doc} WF1_TPACTIV_EUA
	Función encargada de realizar la función When (X3_WHEN) para el campo F1_TPACTIV.
	@type  Function
	@author luis.samaniego
	@since 18/10/2022
	@param lWhen - Logico - Indica si el campo puede ser editado.
	@return lRet -Logico - Devuelve el resultado de las funciones ejecutadas del when.
	/*/
Function WF1_TPACTIV_EUA(lWhen As logical)
Local lRet As logical

Default lWhen := .T.

	lRet := lWhen

Return lRet
