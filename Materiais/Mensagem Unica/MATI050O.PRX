#INCLUDE "TOTVS.CH"                            
#INCLUDE "FWADAPTEREAI.CH" 

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±º Funcao ³ IntegDef º Autor ³ Caio Murakami y Cruces º Data ³ 22/03/2012  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Desc.    ³ Funcao de integracao com o adapter EAI para recebimento e    º±±
±±º          ³ envio de informações do cadastro de transportadoras (SA4)    º±±
±±º          ³ utilizando o conceito de mensagem unica.                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Param.   ³ cXML - Variavel com conteudo xml para envio/recebimento.     º±±
±±º          ³ nTypeTrans - Tipo de transacao. (Envio/Recebimento)          º±±
±±º          ³ cTypeMessage - Tipo de mensagem. (Business Type, WhoIs, etc) º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Retorno  ³ aRet - Array contendo o resultado da execucao e a mensagem   º±±
±±º          ³        Xml de retorno.                                       º±±
±±º          ³ aRet[1] - (boolean) Indica o resultado da execução da função º±±
±±º          ³ aRet[2] - (caracter) Mensagem Xml para envio                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Uso      ³ MATA050                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/    
Function MATI050O( oEAIObEt, nTypeTrans, cTypeMessage )

	Local oFWEAIObj	        := FWEAIobj():NEW()
    Local cEvent      	    := "upsert"	//Evento da mensagem (upsert ou delete)
    Local cCNPJCPF          := ""       //Indica o tipo de documento de acordo com a pessoa (CPF ou CNPJ)
    Local cCodEst     	    := ""		//Codigo do estado na tabela do IBGE
    Local cCodMun   	    := ""		//Codigo do municipio na tabela do IBGE 
    Local cTel			    := ""
    //Local cStringTemp       := ""
    Local cValExtbkp	    := ""
    Local cOwnerMsg		    := "CARRIERS"
    Local cLogErro          := ""
    //-- Variaveis utilizadas no De/Para de códigos
    Local cValInt		    := "" 		//-- Codigo interno utilizado no De/Para de codigos - Tabela XXF
    Local cValExt		    := ""       //-- Codigo externo utilizada no De/Para de codigos - Tabela XXF
    Local cMarca		    := "" 		//-- Armazena a Marca (LOGIX,PROTHEUS,RM...) que enviou o XML
    Local cAlias		    := "SA4"    //-- Alias usado como referência no De/Para
    Local cCampo		    := "A4_COD" //-- Campo usado como referência no De/Para

    Local lRet              := .T.
    Local lExecAuto		    := .T.
    
    Local nX          	    := 0
    Local nCount            := 0
    Local nOpcx	 		    := 0			//Operacao realizado pelo usuario ( 3-Inclusao | 4-Alteracao | 5-Exclusao )

    Local aArea		        := FWGetArea()
    Local aAreaSA4	        := SA4->( FWGetArea() )    
    Local aCab			    := {}			//Array com os campos e os dados que serão gravados na MsExecAuto    
    Local aErroAuto         := {}

    Private lMsErroAuto     := .F.
	Private lAutoErrNoFile  := .T.
	Private lMsHelpAuto     := .T.

    //--------------------------------------
	//recebimento mensagem
	//--------------------------------------
	If nTypeTrans == TRANS_RECEIVE .And. ValType( oEAIObEt ) == 'O' 
		//--------------------------------------
		//chegada de mensagem de negocios
		//--------------------------------------
		If cTypeMessage == EAI_MESSAGE_BUSINESS

            cEvent := AllTrim(oEAIObEt:getEvent())
					
			If cEvent != NIL
				// evento
                cEvent := Upper(cEvent)			

                If ( FindFunction("CFGA070INT") )	
                    // produto
                    If oEAIObEt:getHeaderValue("ProductName") !=  nil .And. !Empty( oEAIObEt:getHeaderValue("ProductName") ) 
                        cMarca := oEAIObEt:getHeaderValue("ProductName")
                    EndIf
                    // codigo externo
                    If oEAIObEt:getPropValue("Code") != nil 
				   		cValExt := AllTrim( oEAIObEt:getPropValue("Code") )
				  	Endif						
				   
					cValInt := PadR(CFGA070INT( cMarca , cAlias , cCampo, cValExt ), TamSX3('A4_COD')[1]) 
					
					If Empty(cValInt)
						
						If Empty(Posicione('SX3',2,Padr('A4_COD' ,10),'X3_RELACAO'))
							cValExtbkp 	:= Padr( cValExt, TamSX3('A4_COD')[1])
							cValInt 	:= MATI050Num( Substr( cValExtbkp , 1, TamSX3('A4_COD')[1] ) ) 
							aAdd( aCab, { "A4_COD" , cValInt , Nil } )
				 		EndIf
					
					EndIf
				   
		  			SA4->(DbSetOrder(1))	//A4_FILIAL + A4_COD
				   
  					//Verifica o tipo de transacao (Upsert/Delete)
					If cEvent == "UPSERT" 
				
						If ( !Empty(cValInt) .And. SA4->( MsSeek( xFilial("SA4") + cValInt ) ) ) 
							aAdd( aCab, { "A4_COD", SA4->A4_COD, Nil } )
							nOpcx := 4
						Else
							//-- O campo A4_COD deve possuir inicializador padrão				
							nOpcx := 3
						EndIf    
					Else
						nOpcx := 5
						If ( !Empty(cValInt) .And. SA4->(MsSeek( xFilial("SA4") + cValInt ) ) )
			  				aAdd( aCab, { "A4_COD", SA4->A4_COD, Nil } )						
						Else
							lExecAuto	:= .F.
						EndIf					
					EndIf
					
				EndIf

			EndIf			

            //Nome da transportadora			
			If oEAIObEt:getPropValue("Name") != nil
				aAdd( aCab, { "A4_NOME", oEAIObEt:getPropValue("Name"), Nil } )
			EndIf

            //Nome reduzido da transportadora
			If oEAIObEt:getPropValue("ShortName") != nil
				aAdd( aCab, { "A4_NREDUZ", oEAIObEt:getPropValue("ShortName"), Nil } )
			EndIf	
						
			If oEAIObEt:getPropValue("Address") != Nil
                //Endereco
                If ( oEAIObEt:getPropValue("Address"):getPropValue("Address") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("Address"):getPropValue("Address") ) )
				    aAdd( aCab, { "A4_END", oEAIObEt:getPropValue("Address"):getPropValue("Address"), Nil } )
                EndIf
                //Complemento
			    If ( oEAIObEt:getPropValue("Address"):getPropValue("Complement") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("Address"):getPropValue("Complement") ) )
				    aAdd( aCab, { "A4_COMPLEM", oEAIObEt:getPropValue("Address"):getPropValue("Complement"), Nil } )
			    EndIf
                //Bairro
                If ( oEAIObEt:getPropValue("Address"):getPropValue("District") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("Address"):getPropValue("District") ) )
                    aAdd( aCab, { "A4_BAIRRO",  oEAIObEt:getPropValue("Address"):getPropValue("District"), Nil } )
                EndIf
                //Codigo da UF
                If ( oEAIObEt:getPropValue("Address"):getPropValue("Code") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("Address"):getPropValue("Code") ) )
                    aAdd( aCab, { "A4_EST", oEAIObEt:getPropValue("Address"):getPropValue("Code"), Nil } )
                    //Nome da cidade
                    If ( oEAIObEt:getPropValue("Address"):getPropValue("StateDescription") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("Address"):getPropValue("StateDescription") ) )
                        aAdd( aCab, { "A4_MUN",  oEAIObEt:getPropValue("Address"):getPropValue("StateDescription"), Nil } )
                    EndIf                     
                    //Codigo da cidade
                    /*cCodUF  := oEAIObEt:getPropValue("Address"):getPropValue("Code")
                    cMun    := oEAIObEt:getPropValue("Address"):getPropValue("StateDescription")
                    If !Empty(cCodUF) .And. !Empty(cMun)
                        cCodMun := Posicione("CC2",4,FWxFilial("CC2")+Padr(cCodUF,TamSX3('CC2_EST')[1])+Padr(cMun,TamSX3('CC2_MUN')[1]),"CC2_CODMUN")
                        aAdd( aCab, { "A4_COD_MUN", Padr( cCodMun, TamSX3("A4_COD_MUN")[1] ) , Nil } )
                    EndIf*/
                EndIf	
                
                //CEP
                If ( oEAIObEt:getPropValue("Address"):getPropValue("ZipCode") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("Address"):getPropValue("ZipCode") ) )
                    aAdd( aCab, { "A4_CEP", oEAIObEt:getPropValue("ZipCode"), Nil } )
                EndIf
			EndIf		
            
            If cPaisLoc $ "BRA"

                If oEAIObEt:getPropValue("GovernmentalInformation") != Nil

                    //fiscais
                    For nX := 1 To Len( oEAIObEt:getPropValue("GovernmentalInformation") )
                        cValGovern  := oEAIObEt:getPropValue("GovernmentalInformation")[nX]:getPropValue("Id")
                        If ( AllTrim( Upper( oEAIObEt:getPropValue("GovernmentalInformation")[nX]:getPropValue("Name") ) ) == "INSCRICAO ESTADUAL" )
                            aAdd( aCab, { "A4_INSEST", cValGovern, Nil } )
                        ElseIf ( AllTrim( Upper( oEAIObEt:getPropValue("GovernmentalInformation")[nX]:getPropValue("Name") ) ) $ "CPF/CNPJ" ) 
                            aAdd( aCab, { "A4_CGC", cValGovern, Nil } )
                        ElseIf ( AllTrim( Upper( oEAIObEt:getPropValue("GovernmentalInformation")[nX]:getPropValue("Name") ) ) $ "SUFRAMA" ) 
                            aAdd( aCab, { "A4_SUFRAMA", cValGovern, Nil } )
                        EndIf
                    Next nX

                EndIf

            EndIf

            If oEAIObEt:getPropValue("ListOfCommunicationInformation") != Nil
                For nX := 1 To Len( oEAIObEt:getPropValue("ListOfCommunicationInformation") )
                    //e-mail
                    If ( oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("Email") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("Email") ) )
                        aAdd( aCab, { "A4_EMAIL", oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("Email"), Nil } )
                    EndIf
                    //telefone
                    If ( oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("PhoneNumber") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("PhoneNumber") ) )
                        aAdd( aCab, { "A4_TEL", oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("PhoneNumber"), Nil } )
                    EndIf
                    //home page
                    If ( oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("HomePage") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("HomePage") ) )
                        aAdd( aCab, { "A4_HPAGE", oEAIObEt:getPropValue("ListOfCommunicationInformation")[nX]:getPropValue("HomePage"), Nil } )
                    EndIf
                Next
            EndIf            

            If oEAIObEt:getPropValue("ListOfContacts") != Nil
                For nX := 1 To Len( oEAIObEt:getPropValue("ListOfContacts") )
                    // contato
                    If ( oEAIObEt:getPropValue("ListOfContacts")[nX]:getPropValue("Email") != Nil ) .And. !( Empty( oEAIObEt:getPropValue("ListOfContacts")[nX]:getPropValue("Email") ) )
                        aAdd( aCab, { "A4_CONTATO", oEAIObEt:getPropValue("ListOfContacts")[nX]:getPropValue("ContactInformationName"), Nil } )
                    EndIf
                Next
            EndIf
			         	        	
         	//Inicia gravacao no banco
			Begin Transaction
			
				If lExecAuto 
				
					//-- Exclui o De/Para tabela XXF
					If nOpcx == 5
						cValInt := SA4->A4_COD
						CFGA070Mnt( , cAlias, cCampo, , cValInt, .T. )
					EndIf

                    aCab := FWVetByDic( aCab, "SA4" )
					
					MSExecAuto( { |x,y| MATA050(x,y) }, aCab, nOpcx )
			   EndIf
			   
				If ( lMsErroAuto )
					aErroAuto := GetAutoGRLog()
					
					For nCount := 1 To Len(aErroAuto)
						cLogErro += StrTran( StrTran( aErroAuto[nCount], "<", "" ), "-", "" ) + (" ") 
					Next nCount
					
					
					lRet := .F.
					cLogErro := EncodeUTF8( cLogErro )

                    oFWEAIObj:Activate()
					oFWEAIObj:setProp("ReturnContent")
					oFWEAIObj:getPropValue("ReturnContent"):setProp("Error", cLogErro)
					
					DisarmTransaction()
				Else
					
					cValInt := SA4->A4_COD	
					
					If CFGA070Mnt( cMarca, cAlias, cCampo, cValExt, cValInt ) 				
					    //Monta o JSON de retorno
						oFWEAIObj:Activate()
																							
						oFWEAIObj:setProp("ReturnContent")
													
						oFWEAIObj:getPropValue("ReturnContent"):setProp("ListOfInternalID",{},'InternalId',,.T.)
						oFWEAIObj:getPropValue("ReturnContent"):get("ListOfInternalID")[1]:setprop("Name",cOwnerMsg,,.T.)
						oFWEAIObj:getPropValue("ReturnContent"):get("ListOfInternalID")[1]:setprop("Origin",cValExt,,.T.)
						oFWEAIObj:getPropValue("ReturnContent"):get("ListOfInternalID")[1]:setprop("Destination",cValInt,,.T.)							
					EndIf 
					
									
				EndIf
				
			End Transaction			
		
		//EndIf
        
        //--------------------------------------
		//resposta da mensagem Unica TOTVS
		//--------------------------------------
		ElseIf cTypeMessage == EAI_MESSAGE_RESPONSE
            // verifica o produto
            If oEAIObEt:getHeaderValue("ProductName") !=  nil .And. !Empty( oEAIObEt:getHeaderValue("ProductName") )  .AND. ValType(cMarca) = "C" 
                cMarca := oEAIObEt:getHeaderValue("ProductName")
            Else
                lRet := .F.					
                oFWEAIObj:Activate()
                oFWEAIObj:setProp("ReturnContent")
                cLogErro := "Erro no retorno. O Product é obrigatório!"
                oFWEAIObj:getPropValue("ReturnContent"):setProp("Error", cLogErro)                                                                
            EndIf
            // verifica o codigo interno
            If oEAIObEt:getPropValue("ReturnContent"):getPropValue("ListOfInternalID")[1]:getPropValue("Origin") != nil 
                cValInt := oEAIObEt:getPropValue("ReturnContent"):getPropValue("ListOfInternalID")[1]:getPropValue("Origin")
            Else
                lRet := .F.						
                oFWEAIObj:Activate()
                oFWEAIObj:setProp("ReturnContent")
                cLogErro := "Erro no retorno. O OriginalInternalId é obrigatório!"
                oFWEAIObj:getPropValue("ReturnContent"):setProp("Error", cLogErro)																
            EndIf
            // verifica o codigo externo
            If oEAIObEt:getPropValue("ReturnContent"):getPropValue("ListOfInternalID")[1]:getPropValue("Destination") != nil
                cValExt := oEAIObEt:getPropValue("ReturnContent"):getPropValue("ListOfInternalID")[1]:getPropValue("Destination")
            Else
                lRet := .F.
                oFWEAIObj:Activate()
                oFWEAIObj:setProp("ReturnContent")
                cLogErro :=  "Erro no retorno. O DestinationInternalId é obrigatório"
                oFWEAIObj:getPropValue("ReturnContent"):setProp("Error", cLogErro)
            EndIf		

            If RTrim(cEvent) $ "UPSERT|DELETE"
		        //Atualiza o registro na tabela XXF (de/para)
				If !CFGA070Mnt(cMarca, cAlias, cField, cValExt, cValInt, (cEvent = "DELETE"),,,cOwnerMsg)
					cLogErro := "Não foi possível gravar na tabela De/Para. Evento :" +cEvent + CRLF
					lRet := .F.
				EndIf
			Else
				lRet := .F.						
				oFWEAIObj:Activate()
				oFWEAIObj:setProp("ReturnContent")
				cLogErro := "Evento do retorno inválido!"
				oFWEAIObj:getPropValue("ReturnContent"):setProp("Error", cLogErro)																
			EndIf			
        //--------------------------------------
	  	//whois
	  	//--------------------------------------
        ElseIf   cTypeMessage == EAI_MESSAGE_WHOIS
			oFWEAIObj := "1.000"
		EndIf   	

    ElseIf(nTypeTrans == TRANS_SEND)
	   
		If(!Inclui .And. !Altera)
			cEvent := "delete"
    	EndIf
        //Montagem da mensagem
		cDatAtu := Transform(dToS(dDataBase),"@R 9999-99-99")
  	
        //-- Retorna o código do estado conforme a sigla
        cCodEst := Tms120CdUf(SA4->A4_EST,'1')      
        
        //-- Codigo do municipio de acordo com IBGE ( 7 caracteres - Codigo do Estado + Codigo da codade )
        cCodMun := Alltrim(cCodEst) + AllTrim(SA4->A4_COD_MUN)

        oFWEAIObj:Activate()
		oFWEAIObj:setEvent(cEvent)
		
		oFWEAIObj:setprop("CompanyId", cEmpAnt)	
		oFWEAIObj:setprop("BranchId", cFilAnt)
		oFWEAIObj:setprop("CompanyInternalId", cEmpAnt + '|' + cFilAnt)
		oFWEAIObj:setprop("Code", Rtrim(SA4->A4_COD))
        oFWEAIObj:setprop("ShortName", Rtrim(SA4->A4_NREDUZ))
        oFWEAIObj:setprop("Name", Rtrim(SA4->A4_NOME))
        //Verifica se o campo A4_CGC contem um CPF ou CNPJ
        If ( Len( AllTrim( SA4->A4_CGC ) ) == 11 ) .And. ( !Empty(SA4->A4_CGC) )
            cCNPJCPF := "CPF"
        ElseIf ( Len( AllTrim(SA4->A4_CGC) ) > 11 )
            cCNPJCPF := "CNPJ"
        EndIf
        If  cPaisLoc $ "BRA"
			If !Empty(SA4->A4_INSEST) .Or. !Empty(SA4->A4_SUFRAMA) .Or. !Empty(SA4->A4_CGC) 
			
				oFWEAIObj:setprop('GovernmentalInformation',{},'Tax',,.T.)
				oFWEAIObj:get("GovernmentalInformation")[1]:setprop("Name"   	, "INSCRICAO ESTADUAL",,.T.)
				oFWEAIObj:get("GovernmentalInformation")[1]:setprop("Scope"     , "State",,.T.)
				oFWEAIObj:get("GovernmentalInformation")[1]:setprop("Id"       	, Rtrim(SA4->A4_INSEST),,.T.)
				
                oFWEAIObj:setprop('GovernmentalInformation',{},'Tax',,.T.)	        
				oFWEAIObj:get("GovernmentalInformation")[2]:setprop("Name"   	, "SUFRAMA",,.T.)
				oFWEAIObj:get("GovernmentalInformation")[2]:setprop("Scope"     , "Federal",,.T.)
				oFWEAIObj:get("GovernmentalInformation")[2]:setprop("Id"       	, Rtrim(SA4->A4_SUFRAMA),,.T.)		

                oFWEAIObj:setprop('GovernmentalInformation',{},'Tax',,.T.)
				oFWEAIObj:get("GovernmentalInformation")[3]:setprop("Name"   	, cCNPJCPF,,.T.)
				oFWEAIObj:get("GovernmentalInformation")[3]:setprop("Scope"     , "Federal",,.T.)
				oFWEAIObj:get("GovernmentalInformation")[3]:setprop("Id"       	, Rtrim(SA4->A4_CGC),,.T.)
            EndIf

            oAddress := oFWEAIObj:setprop("Address")
            oAddress:setprop("Address", trataEnd(SA4->A4_END, "L") )
            oAddress:setprop("Number", trataEnd(SA4->A4_END, "N") )
            oAddress:setprop("Complement",SA4->A4_COMPLEM)
            
            oAddress:setprop("City")   
            If !Empty(SA4->A4_MUN)    
                oAddress:getPropValue("City"):setprop("Code", SA4->A4_MUN )
                oAddress:getPropValue("City"):setprop("Description", Posicione( 'CC2', 1, xFilial('CC2') + SA4->A4_EST + SA4->A4_COD_MUN, 'CC2_MUN' ) )
            EndIf
            oAddress:setprop("District", Rtrim(SA4->A4_BAIRRO))
            If !Empty(SA4->A4_EST)
                oAddress:setprop("Code", AllTrim( SA4->A4_EST ) )
                oAddress:setprop("StateDescription", Rtrim(Posicione("SX5",1, xFilial("SX5") + "12" + SA4->A4_EST, "X5DESCRI()" )) )
            EndIf            
            oAddress:setprop("ZIPCode", Rtrim(SA4->A4_CEP))            
        EndIf
    
        If !Empty(SA4->A4_DDI)
            cTel := AllTrim(SA4->A4_DDI)
        Endif
        
        If !Empty(SA4->A4_DDD)
            If !Empty(cTel)
                cTel += AllTrim(SA4->A4_DDD)
            Else
                cTel := AllTrim(SA4->A4_DDD)
            Endif
        Endif
        
        If !Empty(cTel)
            cTel += AllTrim(SA4->A4_TEL)
        Else
            cTel := AllTrim(SA4->A4_TEL)
        Endif 	
		oFWEAIObj:setprop('ListOfCommunicationInformation',{},'CommunicationInformation',,.T.)
        oFWEAIObj:get("ListOfCommunicationInformation")[1]:setprop("PhoneNumber", cTel,,.T.)
        oFWEAIObj:get("ListOfCommunicationInformation")[1]:setprop("HomePage", _NoTags(Rtrim(SA4->A4_HPAGE)),,.T.)
        oFWEAIObj:get("ListOfCommunicationInformation")[1]:setprop("Email", _NoTags(Rtrim(SA4->A4_EMAIL)),,.T.)
	
		// Contato
		If !Empty(SA4->A4_CONTATO)
			oFWEAIObj:setprop('ListOfContacts',{},'Contact',,.T.)
			oFWEAIObj:get("ListOfContacts")[1]:setprop("ContactInformationName", _NoTags(Rtrim(SA4->A4_CONTATO)),,.T.)
        EndIf
    EndIf    
    
    aRet := { lRet, oFWEAIObj, cOwnerMsg } 

    //Restaura ambiente
    FWRestArea(aAreaSA4)
    FWRestArea(aArea)

Return aRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} MATI050Num

Veridica se o código truncado da transportadora, enviado por integração EAI
Não está em duplicidade com SA4, se estiver, atribui novo numero.

@sample		MATI050Num()

@param		cCarrier, Character, Código da Transportadora

@return		cCarrier, Character, Código da Transportadora

@author		SQUAD CRM/Faturamento
@since		11/08/2017
@version	12.1.17
/*/
//------------------------------------------------------------------------------
Static Function MATI050Num( cCarrier )
	Local aAreaNmSA4 := SA4->(GetArea())
	Default cCarrier := " "
	
	DbSelectArea( "SA4" )
	SA4->( DbSetOrder(1) ) //A4_FILIAL+A4_COD
	
	If SA4->(MsSeek(xFilial("SA4") + cCarrier ))
		cCarrier := AllTrim(GetSXEnum("SA4","A4_COD"))
	EndIf
	
	RestArea( aAreaNmSA4 )
Return( cCarrier )
