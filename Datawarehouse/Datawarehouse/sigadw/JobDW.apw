// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : 
// Fonte  : JobDW - Rotinas para o WebJob                
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 01.06.01 | 0548-Alan Candido |
// 27.09.05 | 0548-Alan Candido | Versão 3
// 23.11.07 | 0548-Alan Candido | BOPS 136453 - Tratamento de 'lock' durante processo de migração
// 18.01.08 | 0548-Alan Candido | BOPS 139342 - Implementação e adequação de código, 
//          |                   | em função de re-estruturação para compartilhamento de 
//          |                   | código.
// 10.04.08 | 0548-Alan Candido | BOPS 142154
//          |                   | Implementação de tratamento especifico para requisiçoes a partir do Flex
// 12.08.08 |0548-Alan Cândido  | BOPS 146580 
//          |                   | Ajuste de lay-out na apresentação de mensagens de erro
//          |                   | formato HTML.
// 14.08.08 |0548-Alan Cândido  | BOPS 149278 
//          |                   | Ajuste no tratamento da chave dwShowHeaders().
// 25.09.08 |0548-Alan Cândido  | BOPS 154605 (P9.12) e 154610 (P8.11)
//          |                   | . Tratamento especifico para ação AC_INTEGRATION_EXCEL,
//          |                   | de forma a não enviar cabeçalhos de páginas
// 25.11.08 |0548-Alan Candido  | FNC 00000007374/2008 (10) e 00000007385/2008 (8.11)
//          |                   | Ajustes nos procedimentos de atualização e validação de build
// 19.02.10 | 0548-Alan Candido | FNC 00000003657/2010 (9.12) e 00000001971/2010 (11)
//          |                   | Implementação de visual para P11 e adequação para o 'dashboard'
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "jobdw.ch"
#include "tbiconn.ch"



static function SigaDWPub()
   
	public oSigaDW := NIL        // Configurações do SigaDW  
	public oUserDW := NIL        // Configurações do SigaDW  
	public __SIGADWINST := nil
	public __DWErroCtrl := .f.   // Indica que o erro é controlado
	public __DWInitDB   := .f.               
	public __DWTopCon   := -1
	public __WebService := .f.     
	public __DWPrefixo  := ""
	public __DWIDTemp   := -1
return

function SigaDWStart(pcJobName, alSilence)
	local lFirstStart := .f., cAux, aMsg := {}
	local bLastError := ErrorBlock({|e| __webError(e)})
	local oLockCtrl, lOk := .t.
	local lUpdIndex := .f., lNeedUpd
	local oMigCtrl
	
	default alSilence := .f.
	
	//###TODO WORKAROUND para tratar cPaisLoc := "BRA"
	
	public __DWJobName  := pcJobName
		
	set exclusive off
	set talk off
	set scoreboard off
	set date brit
	set epoch to 1960
	set century on
	set cursor on
	set deleted on
    
	SigaDWPub()

	oMigCtrl := TDWFileIO():New(DwTempPath() + "\DWUPD"+dwInt2Hex(val(dtos(date())), 6)+".lck")
	
	if oMigCtrl:exists() .and. !oMigCtrl:Open(FO_EXCLUSIVE + FO_WRITE)
		oMigCtrl:close()
		oMigCtrl:erase()
	else
		oMigCtrl:close()
		oMigCtrl := nil

 		oLockCtrl := TDWFileIO():New(DwTempPath() + "\DW" + dwInt2Hex(val(dtos(date())), 6) + ".lck")
		if !oLockCtrl:exists()
			oLockCtrl:Create(FO_EXCLUSIVE + FO_WRITE)
		else	
			while !oLockCtrl:Open(FO_EXCLUSIVE + FO_WRITE)
				sleep(500)
			enddo                
		endif

		while !GlbLock()
			sleep(500)
		enddo
 	endif
  	
	DWLoadCfg() // carrrega as configurações do arquivo INI
   	
	begin sequence
 	  lFirstStart := GetGlbValue('DWFirstStart') != 'T'
		if valType(oMigCtrl) == "U" .and. lFirstStart
	    oMigCtrl := TDWFileIO():New(DwTempPath() + "\DWUPD"+dwInt2Hex(val(dtos(date())), 6)+".lck")
		  oMigCtrl:Create(FO_EXCLUSIVE + FO_WRITE)
			conout("")
			conout(replicate("=", 70))
			conout(padc(DWBuild(), 70))
			conout(replicate("-", 70))
			conout(padc(STR0001, 70))  //"P R I M E I R A    C A R G A"
			conout(replicate("-", 70))
			conout(padc(STR0002, 70))  //"Verificando as configurações"
			conout(replicate("-", 70))

			if DWOpenDB(.t.) 
			 			    
			    /*Recupera as mensagens de status de inicialização do DW.*/
				aMsg := DWGetStatus() 
				/*Exibe no console as mensagens de status.*/
		   		DWLog(DWConcatWSep(CRLF+" .", aMsg))
			
				oSigaDW := TSigaDW():New()
				if (oSigaDW:BuildDW() > DWLastBuild())
					conout('*****************************************')
					conout('*                                       *')
					conout('**   '+STR0027+'   **')
					conout('*                                       *')
					conout('*---------------------------------------*')
					conout('* '+STR0028+'     *')  //Versão do SIGADW desatualizada em
					conout('* '+STR0029+'    *')   //relação ao banco de dados corrente
					conout('*---------------------------------------*')
					conout('* '+ STR0030 + DWLastBuild() + "          *")  //"Versão do SIGADW "
					conout('* '+ STR0031 + oSigaDW:BuildDW() + "          *")  //"Versão da Base "
					conout('*---------------------------------------*')
 					oSigaDW := nil
 	 				return .f.
				endif
				
				lNeedUpd := empty(oSigaDW:BuildDW()) .or. (oSigaDW:BuildDW() < DWLastBuild())
				if lNeedUpd
					if empty(oSigaDW:BuildDW()) .and. DWUsrBuild() < 202061124
						conout('*****************************************')
						conout('*                                       *')
						conout('**   A    T    E    N    Ç    Ã    O   **')
						conout('*                                       *')
						conout('*---------------------------------------*')
						conout('* Antes de atualizar o SigaDW p/ o  re- *')
						conout('* lease 3.00.061101,você deve atualiza- *')
						conout('* lo para a ultima versão R3 disponivel *')
						conout('* Ultima versao R3 -> 2.02.061124       *')
						conout('*---------------------------------------*')
  					oSigaDW := nil
  					return .f.
					endif

					conout(replicate("-", 70))   
					DWBeforeUpdVersion(,oSigaDW:BuildDW(),@lUpdIndex)
					conout(replicate("-", 70))
					conout(padc(STR0009, 70))  //"Processo de preparação da atualização de versão completado com sucesso"
	
					conout(replicate("-", 70))
					conout(padc(STR0011, 70))  //"Verificando release da aplicação"

					conout(replicate("-", 70))
					DWUpdVersion(oSigaDW:BuildDW())
					conout(replicate("-", 70))
					conout(padc(STR0012, 70))  //"Processo de atualização de versão completado com sucesso"
					// atualiza o controle de versão
					oSigaDW:updBuildDW()		
				endif

				if DWResetCons()
					conout(replicate("-", 70))
					conout(padc(STR0013, 70))  //"Consultas serão inválidadas para posterior reconstrução"
					conout(replicate("-", 70))
					InvalidarConsultas()
					DWResetCons(.f.)
				endif
				conout(replicate("=", 70), "")

				InitDW_DB(.t.)

				PutGlbValue('DWFirstStart', 'T')
				oMigCtrl:close()
				oMigCtrl:erase()
				// Força o refresh no TopConnect
				DWRefreshAll()
			endif
		elseif DWOpenDB()
			oSigaDW := TSigaDW():New()
		endif
		if valType(oSigaDW) == "O"
			if TCCanOpen(TAB_BUILD)
				if !alSilence
					DWLog(STR0032)  //"Iniciando registro da lista de ações"
				endif
				oSigaDW:RegisterActions()
				oSigaDW:RegisterHelp()
			    createDirs()
				if !alSilence
					DWLog(STR0033)   //"Lista de ações registrada"
					DWLog(STR0014)  //"Inicialização concluída com sucesso"
				endif
			 else
				DWLog(STR0015 + STR0016)  //"Base de dados do SigaDW não disponivel." //"Verifique as configurações de acesso ao banco de dados."
			endif
		 else
			DWLog(STR0034)  //"Não foi possível inicializar o job do SigaDW"
		endif
	recover        
		oSigaDW := nil
		DWLog(STR0017)  //"Falha na inicialização do SigaDW"
		DWLog(STR0018 + DWIniFile(), ;  //"Arquivo de configuração "
          STR0019 + "..........: " + DWEmpresa() + "/" + DWFilial(), ;  //"Empresa/Filial"
		      STR0020 + "...........: " + DWTOPDB(), ;  //"Base de dados"
		      STR0021) //"SIGADW NÃO INICIALIZADO"
	end sequence

	ErrorBlock(bLastError)
	GlbUnlock()
  if valType(oLockCtrl) == "O"
		oLockCtrl:close()
	endif

return valType(oSigaDW) == "O"

/*
--------------------------------------------------------------------------------------
Finaliza o WebJob                        
Arg: 
Ret: 
--------------------------------------------------------------------------------------
*/                    
function SigaDWExit()
                     
	DWLog(STR0022) //"Finalizando SigaDW"

	if valType(oSigaDW) != "U"                         
		while ascan(oSigaDW:foTableList, { |x| valtype(x) == "O" } ) != 0
			aEval(oSigaDW:foTableList, { |x| DWFreeObj(x) } )
		enddo
		DWFreeObj(oSigaDW)
	endif             
	CloseDB()
	
return

/*
--------------------------------------------------------------------------------------
Processa as solicitaçõe do WebJob                        
Arg: 
Ret: 
--------------------------------------------------------------------------------------
*/                         
function SigaDWConnect()
	local cHtml, aBuffer := {}, nInd, aAux, nInitParam
	local aPostParms, cPostNameParm, cPostValueParm, cParmsValues := "", nPos
	local lOrigJava := upper(isNull(HttpPost->origem, isNull(HttpGet->origem, ""))) == "JAVA" .AND. !(HttpGet->Action == AC_QUERY_CFG_EXP)
  	local oWebApp := oSigaDW, oError 
	
	if valType(oSigaDW) == "O"
		errorBlock({|e| __webError(e)})
		getWebApp()
		oWebApp:LoadCfg()
		
		if oWebApp:LogReq() .or. dwShowHeaders()
			DWLog(HttpHeadIn->Command + " " + HttpHeadIn->CmdParms)
			if HttpHeadIn->Command == "POST"
				printParms({{ "HttpPost", HttpPost->APost }})
			endif
		endif

    if !(isNull(httpGet->_ow))
      httpGet->_ow := left(httpGet->_ow, 1)
    endif  
		
		// Controle da apresentação ou não de cabeçalhos e rodapés de página
		// Obs: como a maioria das páginas não devem ter cabeçalhos e rodapés
		//      o default é não apresentar, caso queira força a apresentação
		//      deve-se incluir o parâmetro showHeader=1 (CHKBOX_ON) na URL
		//      de chamada da página.
		// A ação AC_START_DW, foge a regra, sendo sempre apresentado os cabeçalhos
		if !isNull(HttpGet->Theme)
			oWebApp:Theme(HttpGet->Theme)
		elseif !isNull(HttpSession->Theme)
			oWebApp:Theme(HttpSession->Theme)
		else
			oWebApp:Theme(DWDefaultTheme())
		endif
		
		if !isNull(httpGet->miniHeader)
			HttpSession->MiniHeader := httpGet->miniHeader
			adjustDesktop()
		endif
		
		if isNull(HttpGet->Action) // ação default
			HttpGet->Action := AC_START_DW
		endif
		
		HttpSession->showHeader := oWebApp:ShowHeader(HttpGet->Action)
		HttpSession->showFooter := HttpSession->showHeader
		
		if valtype(HttpSession->DWList) == "A"
			oWebApp:foDWList := HttpSession->DWList[1]
		else
			HttpSession->DWList := { oWebApp:DWList() }
		endif
		if valtype(HttpSession->UserDW) == "A"
			oUserDW := HttpSession->UserDW[1]
			oUserDW:refresh()
		endif
		if HttpGet->action $ (AC_START_DW +"|"+AC_LOGOUT+"|"+AC_LOGIN) .AND. !(lower(HttpHeadIn->Main) == "h_m01showcons")
			HttpSession->SessionStarted := .t.
			// download de arquivos
    	elseif dwIsFlex() .and. HttpGet->action == AC_FLEX
			h_dwExecFlex()
			return ""
		elseif HttpGet->action == AC_EXEC_DOWNLOAD //####TODO log esta ação
			DWExecDownload(HttpGet->file, isNull(HttpGet->extensFile, "")=="XML", DwConvTo("L", HttpGet->forceDownload))
			return ""
			// upload de arquivo
		elseif HttpGet->action == AC_EXEC_UPLOAD //####TODO log esta ação
			DWExecUpload(HttpPost->edFilename, alltrim(httpPost->edDestDir), alltrim(httpPost->edDestFile), isNull(httpPost->edRefresh, CHKBOX_OFF) == CHKBOX_ON)
			return ""
			// verificação de processo
		elseif HttpGet->action == AC_VERIFY_PROCESS
			DWVerifyProcess(.f., HttpGet->ipc, HttpSession->afterProcess)
			//			HttpSession->afterProcess := nil
			return ""
			// verificação de listas de processos
		elseif HttpGet->action == AC_VERIFY_PROCESS_LIST
			DWVerifyProcess(.t., HttpGet->ipcList)
			return ""
			// notificação de usuários on-line
		elseif HttpGet->action == AC_ONLINE_NOTIFY
			if valType(oUserDW) == "O"
				oUserDW:onlineNotify()
			endif
			return ""
		elseif HttpGet->action == AC_WS_REQUEST
			if HttpSession->isDWSelected
				oWebApp:SelectDW(, HttpSession->CurrentDW)
			endif
			return DWProcWSRequest(HttpGet->cmd)
		elseif !empty(HttpGet->dwacesss)
			httpSession->ScreenHeight := 600
			HttpSession->Screen := array(SCREEN_SIZE)
  			HttpSession->Screen[SCREEN_WIDTH] := 850
	  		HttpSession->Screen[SCREEN_HEIGHT] := 600
			if (HttpGet->dwacesss) == "dwexecurl"
				aAux := {}
				aAdd(aAux, "http://"+getWebHost()) //host
				aAdd(aAux, HttpGet->dw) //dw
				oTUsers := InitTable(TAB_USER)
				if oTUsers:Seek(1, {oWebApp:UserURL()})
					aAdd(aAux, oTUsers:value("login")) //usuario
					aAdd(aAux, "URL") // senha
				else
					aAdd(aAux, 0) //usuario
					aAdd(aAux, "") // senha
				endif
			elseif (HttpGet->dwacesss) == "sgi"
				aAux := {}
				aAdd(aAux, "http://"+getWebHost()) //host
				aAdd(aAux, HttpGet->dw) //dw
				aAdd(aAux, httpget->user) //usuario
				aAdd(aAux, "SGI") // senha
			elseif (HttpGet->dwacesss) == "bsc"
				aAux := {}
				aAdd(aAux, "http://"+getWebHost()) //host
				aAdd(aAux, HttpGet->dw) //dw
				aAdd(aAux, httpget->user) //usuario
				aAdd(aAux, "BSC") // senha
			else
				aAux := dwToken(DWDECODEPARM(HttpGet->dwacesss), "!")
				aEval(aAux, {|x,i| aAux[i] := UrlDecode(x)}) 	      
			endif
			
			if lower(substr(aAux[1], 8))  == lower(getWebHost())
				if lower(HttpHeadIn->Main) == "h_m01showcons" .or. lower(HttpHeadIn->Main) == "w_sigadw3"
					HttpGet->action := AC_QUERY_EXEC
					HttpHeadIn->Main := "w_sigadw3"
					if !isnull(httpget->info)
						HttpGet->type := httpget->info
					endif
					//url de acesso-dw-usuario-hr corrente
					oUserDW := TDWUser():New()
					
					if oUserDW:Login(aAux[3], iif(isNull(HttpGet->loadpgdw, CHKBOX_OFF) == CHKBOX_OFF, "***"+aAux[4], "***PNL"))
					   
						HttpSession->UserDW := { oUserDW }
						HttpSession->isLogged := .t.
						DWList := oWebApp:DWList()     
						
						nPos := ascan(DWList:Items(), { |x| upper(aAux[2]) == upper(x[DW_NAME]) }) 
						
						if nPos > 0
							nOk := oUserDW:GetDWAcessPerm(DWList:Items()[nPos][DW_ID], "LOGIN")					    	
					    	//Mantém o ID do DW corrente, necessário para execução da consulta via dwacess (dwQryExec).
					    	HttpSession->CurrentDW := DWList:Items()[nPos][DW_ID]
						else
							nOK := .f.
						endif 
						
						if nOk
							oWebApp:SelectDW(aAux[2])
							HttpGet->IsSched := "off"
						else
							DWRaise(ERR_010, SOL_002, "Datawarehouse [ " + aAux[2] + " ]")
						endif  
						
					else
						DWRaise(ERR_001, SOL_002, STR0023) //"Usuário/senha inválidos ou não registrado como usuário Siga"
					endif 
					
					oCons:= initTable(TAB_CONSULTAS)
					HttpGet->modelo := isNull(HttpGet->modelo, "P")
					
					if !empty(HttpGet->consName)       
					
						if oCons:seek(5, { upper(HttpGet->modelo), HttpGet->consName } )
							HttpGet->id := oCons:value("id")
						endif    
						
					endif  
					
					if !oUserDW:GetQryAcessPerm(DWList:Items()[nPos][DW_ID], dwVal(HttpGet->id))
						DWRaise(ERR_001, SOL_002, STR0023) //"Usuário/senha inválidos ou não registrado como usuário Siga"
					endif 
					
				else
					DWRaise(ERR_011, SOL_002) //"Chamada de procedimento não liberado"
				endif
				
			else
				DWRaise(ERR_012, SOL_002) //"URL de chamada inválida"
			endif  
			
		elseif HttpGet->action == AC_OPEN_URL
			if isNull(HttpGet->fim, CHKBOX_OFF) == CHKBOX_ON
				return buildIFrame(, , , , TARGET_100_WINDOW, TARGET_100_WINDOW, .T., HttpGet->url)
			else                                                                                                              '
				oWebApp:buildHeader(aBuffer)
				
				// realiza procedimento especial para o download dos seguintes arquivos
				if lower(HttpGet->extensFile) $ ".zip.doc.xls.ppt"
					return DwConcat(aBuffer) + tagJS() + 'doLoad(' + makeAction(AC_OPEN_URL, {{"fim", CHKBOX_ON}, {"url", HttpGet->url}, {"extensFile", HttpGet->extensFile}}) + ', "_blank", null, "", ' + DwStr(TARGET_75_WINDOW) + ', ' + DwStr(TARGET_75_WINDOW) + ');doClose(false);</script>'
				else
					return DwConcat(aBuffer) + tagJS() + 'doLoad("' + HttpGet->url + '", "_blank", null, "", ' + DwStr(TARGET_75_WINDOW) + ', ' + DwStr(TARGET_75_WINDOW) + ');doClose(false);</script>'
				endif
			endif
		elseif HttpGet->action == AC_INTEGRATION_EXCEL
			HttpSession->SessionStarted := .t.
		elseif HttpGet->action == AC_BUILD_QUERY
			HttpSession->SessionStarted := .t.
		endif
		HttpCTType("text/html; charset=ISO-8859-1")
		
		if dwIsFlex() .and. !isNull(HttpGet->Aba)
			HttpGet->Aba := strTran(HttpGet->Aba, "%5F", "_")
		endif
		begin sequence
		if valType(HttpSession->SessionStarted) == "U"
			if valType(HttpHeadIn->Referer) == "C" .and. !(HttpGet->action == AC_QUERY_EXEC .OR. HttpGet->action == AC_QUERY_DEF)
				HttpGet->Action := AC_START_DW
				HttpSession->DWErrMsg := STR0035  //"Sessão expirada. Efetue login novamente para reestabelecer conexão"
			else
				HttpGet->Action := ""
			endif
		endif
		
		if oWebApp:validAction(HttpGet->action)
			if valType(oUserDW) == "O"
				oUserDW:onlineNotify()
			endif
			HttpSession->JSLib := {}
			HttpSession->CSSLib := {}
			oWebApp:execAction(HttpGet->action, BEFORE_ACTION, aBuffer)
			if HttpSession->isDWSelected
				oWebApp:SelectDW(, HttpSession->CurrentDW)
			endif
 			
			if(httpHeadIn->MAIN == "h_BIBYLearnMore")
		  		ExecInPage("BIBYLearnMore")	
			else
 			
			if lower(HttpGet->action) <> lower(AC_QUERY_GRAPH) .and.;
			   lower(HttpGet->action) <> lower(AC_INTEGRATION_EXCEL) .and.;
  			 !lOrigJava .and. !dwIsFlex()
				if oWebApp:ShowHeader(lower(HttpGet->action)) .AND. !(HttpGet->action == AC_DOWNLOAD)
					oWebApp:buildHeader(aBuffer)
				else
					oWebApp:buildCabec(aBuffer)
				endif
				aEval(aBuffer, { |x| HttpSend(x+CRLF) })
				aBuffer := {}
			endif
			
			oWebApp:execAction(HttpGet->action, EXEC_ACTION, aBuffer)
			
			if !lOrigJava .and. !dwIsFlex()
				aEval(aBuffer, { |x| HttpSend(x+CRLF) })
				aBuffer := {}
				
				if oWebApp:ShowFooter(lower(HttpGet->action))
					oWebApp:buildFooter(aBuffer)
					aEval(aBuffer, { |x| HttpSend(x+CRLF) })
					aBuffer := {}
				endif
				
					if(httpGet->Action!="startdw" .and. httpGet->Action != "logout")				
				oWebApp:execAction(HttpGet->action, AFTER_ACTION, aBuffer)
				// IFRAME para requisição dos dados sem refresh da página
			
				aAdd(aBuffer, '<div id="divAuxiliarBrowser" class="auxHiddenObjects"></div>')
				aAdd(aBuffer, '<iframe id="ifRequest" class="auxHiddenObjects"></iframe>')
				aAdd(aBuffer, "</body>")
				aAdd(aBuffer, "</html>")
		
				aEval(aBuffer, { |x| HttpSend(x+CRLF) })
				aBuffer := {}
			endif
				endif    
			endif
			
		elseif empty(HttpGet->Action)
			DWRaise(ERR_013, SOL_007, "")
		else
			DWRaise(ERR_004, SOL_002, dwStr(HttpGet->action))
		endif
		
	  oWebApp:clearError()
		end sequence
		
  	oError := oWebApp:error()
		if valType(oError) == "O"
			if oError:gencode == 60 .and. oError:subCode == 100
				// recupera os parâmetros do post
				aPostParms	:= HttpPost->APost
				// recupera o link atual contendo os seus respectivos parâmetors
				if valtype(HttpHeadIn->Referer) == "C"
					aOldParms := DwToken(HttpHeadIn->Referer, "&")
					nInitParam := 1
				else
					aOldParms := {}
					nInitParam := 0
				endif
				// adiciona os códigos de erro para serem utilizados como flag da ocorrência deste erro
				aAdd(aOldParms, "gencode=" + DwStr(oError:gencode))
				aAdd(aOldParms, "subCode=" + DwStr(oError:subCode))
				nInitParam =+ 2
				
				if !(HttpGet->Action == AC_LOGIN)
					// itera pelo atual link verificando possíveis alterações de parâmetros
					for nInd := nInitParam to len(aOldParms)
						// realiza o scan para verificar se no atual POST contêm mudanças de parâmetros
						cPostNameParm	:= ""
						cPostValueParm 	:= ""
						nPos := aScan(aPostParms, { |cParamName| DwToken(aOldParms[nInd], "=")[1] == cParamName } )
						if nPos > 0
							cPostNameParm 	:= aPostParms[nPos]
							cPostValueParm	:= &("HttpPost->" + cPostNameParm)
							aPostParms[nPos]:= NIL
						else
							aAux := DwToken(aOldParms[nInd], "=")
							cPostNameParm	:= aAux[1]
							if len(aAux) == 2
								cPostValueParm 	:= aAux[2]
							endif
						endif
						// adiciona o parâmetro no link refeito
						cParmsValues += iif(!empty(cParmsValues), "&", "") + cPostNameParm + "=" + iif(!empty(cPostValueParm), URLEncode(DwStr(cPostValueParm)), "")
					next
					
					// verifica por outros parâmetros do POST que não estavam no link atual
					for nInd := 1 to len(aPostParms)
						cPostNameParm	:= aPostParms[nInd]
						// verifica se no passo anterior o parâmetro já foi utilizado (e portanto apagado)
						if !empty(cPostNameParm)
							cPostValueParm := dwStr(&("HttpPost->" + cPostNameParm))
							cParmsValues += iif (!empty(cParmsValues), "&", "") + cPostNameParm + "=" + iif (!empty(cPostValueParm), URLEncode(cPostValueParm), "")
						endif
					next
				endif
				
				cParmsValues := aOldParms[1] + iif(!empty(cParmsValues), iif(at("?", aOldParms[1]) > 0, "&", "?") + cParmsValues, "")
				HttpSession->DWErrMsg := oError:Description
				if !DWIsFlex()
					aAdd(aBuffer, "<html>")
					aAdd(aBuffer, "<head>")
					if valType(HttpHeadIn->Referer) == "C"
						aAdd(aBuffer, '<meta http-equiv="Refresh" content="0;URL=' + cParmsValues + '">')
					endif
					aAdd(aBuffer, "<head>")
					aAdd(aBuffer, "</html>")
				else
					aAdd(aBuffer, "SIGADW_ERROR")
					aAdd(aBuffer, HttpSession->DWErrMsg)
				endif
			elseif empty(HttpGet->Action)
				oError:Description := strTran(oError:Description, CRLF, "<br>&nbsp;&nbsp;")
				aAdd(aBuffer, "<html>")
				aAdd(aBuffer, "<body>")
				aAdd(aBuffer, replicate('=', 70))
				aAdd(aBuffer, "<br><b>"+ DWBuild() + " - " + STR0036 + dtoc(date()) + STR0037 + time() + "<br>")  //" ocorrido em "  //" as "
				aAdd(aBuffer, replicate('=', 70))
				aAdd(aBuffer, "<br>"+STR0038+"<b><br>&nbsp;&nbsp;"+ oError:Description + "</b>")  //"Messagem:"
				aAdd(aBuffer, "</body>")
				aAdd(aBuffer, "</html>")
			else
				oError:Description := strTran(oError:Description, CRLF, "<br>&nbsp;&nbsp;")
				aAdd(aBuffer, "<div style='width:100%;text-align:left;margin:20px'>")
				aAdd(aBuffer, "<div style='width:100%;text-align:center;padding:5px;background-color:#ffc4c4;border-top:2px solid gray;border-bottom:2px solid gray'>")
				aAdd(aBuffer, "<big><big><b>" + DWBuild() + "</b></big></big><br>" + STR0039 + STR0036 + dtoc(date()) + STR0037 + time()) //"Log de erro"  //" ocorrido em "  //" as "
				aAdd(aBuffer, "</div><br>"+STR0040+"<b>" + str(oError:Severity,4,0) + "</b>")  //"Severidade:"
				aAdd(aBuffer, "<br>"+STR0041+"<b>" + str(oError:gencode,4,0) + "</b>")  //"Código de erro:"
				aAdd(aBuffer, "<br>"+STR0042+"<b>" + str(oError:subcode,4,0) + "</b>")  //"Sub-Código de erro:"
				aAdd(aBuffer, "<br>"+STR0043+"<b><br>&nbsp;&nbsp;"+ oError:Description + "</b>")  //"Mensagem de erro:"
				aAdd(aBuffer, "<br>"+STR0044+"<b>" + isEmpty(oError:Operation, "&nbsp;") +"</b>")  //"Operação:"
				aAdd(aBuffer, "<br>"+STR0045+"<b>" + isEmpty(oError:SubSystem, "&nbsp;") +"</b>")  //"Sub-Sistema:"
				aAdd(aBuffer, "<br>"+STR0046+"<b>" + isNull(oError:Args, "&nbsp;")+"</b>")  //"Parâmetros:"
				aAdd(aBuffer, "<hr>")
				aAdd(aBuffer, "<b>"+STR0047 + "</b>")  //"Pilha de execução"
				aAdd(aBuffer, "<blockquote>")
				aAdd(aBuffer, strTran(oError:ErrorStack, chr(10), "<br>"))
				aAdd(aBuffer, "</blockquote>")
				aAdd(aBuffer, "<hr>")
				aAdd(aBuffer, "<b>HttpHeadIn</b>")
				aAdd(aBuffer, "<blockquote>")
				for nInd := 1 to len(HttpHeadIn->AHeaders)
					aAdd(aBuffer, DWEncode(HttpHeadIn->AHeaders[nInd]) + "<br>")
				next
				aAdd(aBuffer, "</blockquote>")
				aAdd(aBuffer, "<hr>")
				aAdd(aBuffer, "<b>HttpGet</b>")
				aAdd(aBuffer, "<blockquote>")
				for nInd := 1 to len(HttpGet->AGets)
					aAdd(aBuffer, HttpGet->AGets[nInd]+": " + dwEncode(dwStr(&("HttpGet->"+HttpGet->AGets[nInd]))) + "<br>")
				next
				aAdd(aBuffer, "</blockquote>")
				aAdd(aBuffer, "<hr>")
				aAdd(aBuffer, "<b>HttpPost:</b>")
				aAdd(aBuffer, "<blockquote>")
				for nInd := 1 to len(HttpPost->APost)
					aAdd(aBuffer, HttpPost->APost[nInd]+": " + dwEncode(dwStr(&("HttpPost->"+HttpPost->APost[nInd]))) + "<br>")
				next
				aAdd(aBuffer, "</blockquote>")
				aAdd(aBuffer, "<hr>")
				aAdd(aBuffer, "<b>"+STR0048+"</b>")  //"Ambiente:"
				aAdd(aBuffer, "<blockquote>")
				aAdd(aBuffer, strTran(oError:ErrorEnv, chr(10), "<br>"))
				aAdd(aBuffer, "</blockquote>")
				aAdd(aBuffer, "<hr>")
				aAdd(aBuffer, "</div>")
			endif
			oWebApp:LogError(aBuffer, STR0049 + str(oError:gencode,4,0) + ":" + str(oError:subCode,4,0) + " - " + oError:Description)  //"DW Erro: "
		endif
		
		if isNull(Httpget->jscript, CHKBOX_OFF) == CHKBOX_ON
			aAdd(aBuffer, tagJS())
			aAdd(aBuffer, "if (getElement('divBrowser'))")
			aAdd(aBuffer, "{")
			aAdd(aBuffer, "  getElement('divAuxiliarBrowser', parent.document).innerHTML = getElement('divBrowser').innerHTML;")
			aAdd(aBuffer, "  if (getElement('divQBE')) {")
			aAdd(aBuffer, "  	parent.divQBE.innerHTML = getElement('divQBE').innerHTML;")
			aAdd(aBuffer, "	 }")
			aAdd(aBuffer, "  if (getElement('edSelPag', parent.document) && getElement('edSelPag', document))")
			aAdd(aBuffer, "    getElement('edSelPag', parent.document).value = getElement('edSelPag', document).value;")
			aAdd(aBuffer, "  getElement('divToolbar', parent.document).innerHTML = getElement('divToolbar', document).innerHTML;")
			aAdd(aBuffer, "  if (getElement('divToolbarInferior')) {")
			aAdd(aBuffer, "  	getElement('divToolbarInferior', parent.document).innerHTML = getElement('divToolbarInferior', document).innerHTML;")
			aAdd(aBuffer, "	 }")
			aAdd(aBuffer, "}")
			aAdd(aBuffer, "</script>")
		endif
		
		cHtml := ""
		aEval(aBuffer, { |x| cHtml += dwStr(x) + CRLF})
	else
		DWCloseSomeTables()
		ExUserException(STR0050)  //"Serviço SigaDW não inicializado"
	endif
	
	DWCloseSomeTables()
return cHtml

/*
--------------------------------------------------------------------------------------
Executa a verificação de diretorios necessarios para execução do DW
Caso nao exista cria os diretorios necessarios
Arg:
Ret:
--------------------------------------------------------------------------------------
*/
static function createDirs()
	WFForceDir(SigaDwDirFiles())
	WFForceDir(DwMetaPath())
	WFForceDir(DwExpFilesPath())
	WFForceDir(DwErrorPath())
	WFForceDir(DwLogsPath())
	WFForceDir(DwTempPath())
return

/*
--------------------------------------------------------------------------------------
Executa a verificação de diretorios necessarios para execução do DW
Caso nao exista cria os diretorios necessarios
Arg:
Ret:
--------------------------------------------------------------------------------------
*/
static function printParms(aaParms)
	local nInd, nInd2, cAux

	default aaParms := __DWParmList
	for nInd := 1 to len(aaParms)
		if valType(aaParms[nInd]) == "A" .and. valType(aaParms[nInd, 2]) == "A"
			conout(">>>>>> " + aaParms[nInd, 1])
			for nInd2 := 1 to len(aaParms[nInd, 2])
				cAux := aaParms[nInd, 1] + "->" + aaParms[nInd, 2, nInd2]
				conout(aaParms[nInd, 2, nInd2] + "=" + dWStr(&cAux))
			next
			conout("<<<<<<")
		endif
	next

return


