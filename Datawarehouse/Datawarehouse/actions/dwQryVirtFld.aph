<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryVrtFld - Exibição de campos virtuais de consultas ou cubos
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 20.12.05 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwCubManutConst.ch"
#include "dwVirtFlds.ch"
#include "dwQryVirtFld.ch"

Local oCons, oCubesList
Local oVirtFlds, aOperButtons := {}

Local cNome, cDescricao, cTipo, nTam, nNDec, cMascara, cExpressao, lIsSql, nId_expr

Local nID := DwVal(HttpGet->ID)
Local cNameColumn, nIDObj, cNextLink, cPreviousLink, aActionParams := {}, nOper
Local cObj := iif (!empty(HttpGet->Obj), HttpGet->Obj, DwGetProp(ID_TYPE_OBJ, ID_NAME_PRG_QRY))
Local lIsQuery := iif (cObj == "Q", .T., .F.)
Local aWhere, cTableName

Local lOperSubmit
Local cVirtFldsType := "N"
Local aButtons:= {}
Local cTitleObjName
Local nOwnerId
Local nOperation := OP_SUBMIT, lEdit := .T., lOk
Local aProcRow

DwSetProp(ID_TYPE_OBJ, cObj, ID_NAME_PRG_QRY)

if lIsQuery

	// trata o id da consulta
	// se a ação for a ação de editar sem ser por steps
	if DwVaL(HttpGet->Oper) == OP_REC_NO_STEPS
		nIDObj := DwVal(HttpGet->ID)	// recupera do get
		
		// trata a sessão aonde contêm o id da consulta
		DwSetProp(ID_ID_QUERY, DwStr(nIDObj), ID_NAME_PRG_QRY)
		DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_NO_STEPS), ID_NAME_PRG_QRY)
	else								// em outro caso recupera da session
		nIDObj := DwVal(DwGetProp(ID_ID_QUERY, ID_NAME_PRG_QRY))
	endif
	
	oCons := InitTable(TAB_CONSULTAS)
	if !oCons:Seek(1, { nIDObj } )
		dwRaise(ERR_005, SOL_003, nIDObj)
	endif
	
	nOwnerId	      := oCons:value("id")
	cTitleObjName 	:= oCons:value("nome")
	cNameColumn		:= "ID_CONS"
	aWhere 			:= { "TIPO='" + cVirtFldsType + "'", cNameColumn + "=" + DwStr(nIDObj) }
	oVirtFlds		:= InitTable(TAB_CALC)
	cTableName 		:= oVirtFlds:Tablename()
	cNextLink		:= AC_QRY_CUB_FILTER
	cPreviousLink	:= AC_QUERY_DEFCUBE
	aActionParams	:= { {"id", nIDObj}, {"ObjType", OBJ_QUERY}, {"Oper", OP_REC_STEPS} }
	nOper			:= DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)
	
	// code block para verificação para cada linha
	aProcRow := { |aaData| procRowsVisually(aaData, "id_virtual", 0, " > ") }
	
	// verifica privilégio para dar manutenção
	lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nIDObj)
else

	// trata o id do cubo
	// se a ação for a ação de editar sem ser por steps
	if DwVaL(HttpGet->Oper) == OP_REC_NO_STEPS
		nIDObj := DwVal(HttpGet->ID)	// recupera do get
		
		// trata a sessão aonde contêm o id do cubo
		DwSetProp(ID_ID_CUBE, DwStr(nIDObj), ID_NAME_PRG_CUB)
		DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_NO_STEPS), ID_NAME_PRG_CUB)
	else								// em outro caso recupera da session
		nIDObj := DwVal(DwGetProp(ID_ID_CUBE, ID_NAME_PRG_CUB))
	endif
	
	oCubesList := InitTable(TAB_CUBESLIST)
	oCubesList:Seek(1, { nIDObj })
	if !oCubesList:EoF() .AND. oCubeslist:value("id") == nIDObj
		cTitleObjName := oCubesList:value("nome")	
		nOwnerId      := oCubesList:value("id")
	else
		DwRaise(ERR_005, SOL_003, nIDObj)
	endif
	DWSetProp("IDCube", nIDObj, "h_dwcubeds")
	
	cNameColumn		:= "ID_CUBES"
	aWhere 		  	:= { cNameColumn + "=" + DwStr(nIDObj) }
	oVirtFlds		:= InitTable(TAB_FACTVIRTUAL)
	cTableName 		:= oVirtFlds:Tablename()
	cNextLink		:= AC_DIM_CUB_RECMAN
	cPreviousLink	:= AC_QRY_CUB_FILTER
	aActionParams	:= { {"id", nIDObj}, {"ObjType", OBJ_CUBE}, {"Oper", OP_REC_STEPS} }
	nOper			:= DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_CUB)
	
	// verifica privilégio para dar manutenção
	lEdit := oUserDW:GetCubMaintPerm(HttpSession->CurrentDW, nIDObj)
	
endif

if HttpGet->Action == AC_REC_VIRTFLD
	aFields := {}
	aButtons := {}
	HttpGet->Oper := DwVal(HttpGet->Oper)
	
	// ação de "anterior" na página de indicadores
	if HttpGet->Oper == OP_REC_STEPS
		nID := dwVal(HttpGet->ID)
	    lOperSubmit 		 := .F.
	    HttpSession->subOper := OP_REC_STEPS
	elseif HttpGet->Oper == OP_SUBMIT
		lOperSubmit := .t.
		aValues := oVirtFlds:fromPost(HttpPost->APost)
		nID := dwVal(HttpPost->edID)
		if !(HttpSession->subOper == OP_REC_NEW) .AND. oVirtFlds:seek(1, { dwVal(nID) })
			if HttpSession->subOper == OP_REC_STEPS .or. HttpSession->subOper == OP_REC_EDIT
				lOk := oVirtFlds:update(aValues)
			elseif HttpSession->subOper == OP_REC_DEL
				lOk := oVirtFlds:delete()
			endif
		else
			if (lOk := oVirtFlds:append(aValues))
				nID := oVirtFlds:value("id")
			endif
		endif
		
		if !lOk
			DWRaise(ERR_002, SOL_000, oVirtFlds:Msg(.t.))
		elseif lIsQuery
			oCons:update({{ "valida", .f. }, { "valgra", .f. }})
		endif
	else
		HttpSession->subOper := DwVal(HttpGet->oper)
	endif
	
	if oVirtFlds:seek(1, { nID })
		cNome 		:= oVirtFlds:value("nome")
		cDescricao  := oVirtFlds:value("descricao")
		cTipo		:= oVirtFlds:value("tipo")
		nTam		:= oVirtFlds:value("tam")
		nNDec		:= oVirtFlds:value("ndec")
		cMascara	:= oVirtFlds:value("mascara") 
		cExpressao	:= oVirtFlds:value("expressao")
		lIsSql		:= oVirtFlds:value("isSQL")
		nId_expr	:= oVirtFlds:value("id_expr")
		
		// exibe msg de que o usuário não possui permissão
		if !lEdit
			HttpSession->DWErrMsg := STR0001 + " " + iif (lIsQuery, STR0002, STR0003) //"Atenção: usuário não possui privilégio de manutenção"###" desta consulta."###" deste cubo."
			makeButton(aButtons, BT_CLOSE)
			nOperation := OP_NONE
		endif
	else
		cNome		:= ''
		cDescricao	:= ''
		cTipo		:= ''
		nTam		:= 0
		nNDec		:= 0
		cMascara	:= ''
		cExpressao	:= ''
		lIsSql		:= .F.
		nId_expr	:= 0
	endif
	
	makeHidden(aFields, 	'edID'   		  , nID)
	makeHidden(aFields, 	'ed'+cNameColumn, nIDObj)
	makeHidden(aFields, 	'edTipo'      , cVirtFldsType)
	makeKeyField(aFields,	'edNome'		  , STR0004, .T., 'C', 15, 0, , cNome) //'Nome'
	makeField(aFields, 		'edDescricao'	, STR0005, .T., 'C', 30, 0, , cDescricao) //'Descrição'
	makeField(aFields, 		'edTam'			  , STR0006, .T., 'N',  4, 0, , nTam) //'Tamanho'
	makeField(aFields, 		'edNDec'		  , STR0007, .T., 'N',  4, 0, , nNDec) //'Decimais'
	makeDotField(aFields, 'edMascara'   , STR0008, .F., 'C', 30, 0, , cMascara, , , .t.) //'Mascara'
	makeHidden(aFields, 	'edId_expr'		, nId_expr)
	makeDotField(aFields,	'edExpressao'	, "|"+STR0009, .T., "M", 10, 45,, cExpressao) //'Expressão'
	%>
	
	<%=tagJS()%>
		function edExpressao_dot(oSender) {
			<% if lEdit %>
				doEditExpression('<%= STR0009 %>', getElement('edId_expr').value, 0, 
		  			'edId_expr', 'edExpressao', '<%= IIF(lIsQuery,OBJ_VIRTFLD_QRY, OBJ_VIRTFLD_CUB) %>', '<%= nOwnerId %>', 
            			true, false) //'Expressão'
       		<% endif %>
		}
		
		function edMascara_dot(oSender)	
		{
	  	var oMask = getObject('edMascara', oSender.form);
	  	oMask.value = makeMask(getElement('edTipo', oSender.form).value, 
                             getElement('edTam', oSender.form).value,
                             getElement('edNDec', oSender.form).value);
		}
	</script>
	
	<%= tagJS() %>
		function frmVirt_valid(oSender) {
			var lRet = true;
			
			lRet = doValidField(getElement('edTam'), false,  "N", 4, 0, 1);
			
			if (lRet) {
				var lDis = getElement('edExpressao').disabled;
				getElement('edExpressao').disabled = false;
				lRet = doValidField(getElement('edExpressao'), true, "C", 4, 0, 1, 4, getElement('edExpressao'));
				getElement('edExpressao').disabled = lDis;
			}
			
			return lRet;
		}
	
	</script>
	
	<%= buildForm('frmVirt', STR0011 + '<small>' + cTitleObjName + '</small>', HttpGet->Action, nOperation, aButtons, aFields, lEdit) %> <% //'Campo Virtual ' %>
    <% if lOperSubmit %>
		<%= buildAutoAction(AC_QUERY_VIRTFLD) %>
	<% endif
	
else
	if DwVal(nOper) == OP_REC_STEPS
		if !empty(cNextLink)
			makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0012, STR0013, "bt_ocioso.gif", "doNext()", "left") //"próximo"###"Definição de Filtros"
		endif
		makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0014, STR0015, "bt_ocioso.gif", "doPrevious()", "left") //"anterior"###"Retorna para a definição de Alertas"
	endif
	makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0016, STR0017, "bt_ocioso.gif", "doClose()", "left") //"fechar"###"Retorna para a lista de Consultas"
	
	if lEdit
		makeOperAct(aOperButtons, STR0019, "ic_doc.gif"         , AC_DOCUMENTATION , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_INDVIRT } }, TARGET_90_WINDOW, .f.) /*"Documentação"*/
	endif

 %>

	<%=tagJS()%>
		function doNext() {
	 		doLoadHere(<%= iif (!empty(cNextLink), makeAction(cNextLink, aActionParams), '"#"') %>);
  			return false;
		}
	
		function doPrevious() {
      		doLoadHere(<%=makeAction(cPreviousLink, aActionParams)%>);
  			return false;
		}
	</script>
	
	<%= buildBrowse(STR0018 + ' <small>' + cTitleObjName + '</small>'     , .t., cTableName     ,  , , , , aWhere                                       , aButtons, 10, AC_REC_VIRTFLD  , AC_QUERY_VIRTFLD, aOperButtons, , , , , , lEdit, 										, , , aProcRow) %> <% /*'Campos Virtuais '*/%>
<% endif %>