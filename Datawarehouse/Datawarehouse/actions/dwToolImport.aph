<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwToolImport - Importação de arquivos de metadados
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 06.02.06 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwToolImport.ch"

Local nInd, nInd2, nInd3
Local aFields 	:= {}
Local aButtons	:= {}
Local oImpFile
Local aServers, oServer
Local aDimImp, oDim, oDimAttr, oDataSource, oScript, oScheduler
Local aCubImp, oCub, oCubAttr
Local aQryImp, oQry, oQryAttr, oQryFltr, oQryExpr
Local lShowMsgNoImport := .T.

if HttpGet->Action == AC_TOOLS_IMPORT .AND. DwVal(HttpGet->Oper) == OP_REC_NEW // Processo de importação
	oImpFile := TDWImportMeta():New(HttpPost->edFileImport)
	
	makeTitle(aFields, STR0001 + dtoc(date()) + " " + time() + STR0002 + oUserDW:UserName() + ; //"Arquivo gerado em "###" por "
	STR0003 + DWBuild() + " &copy; Microsiga Intelligence") //"<br>pela versão SigaDW "
	
	// ### CONEXÕES ###
	aServers := oImpFile:ImportServes()
	if !empty(aServers) .and. len(aServers) > 0
		lShowMsgNoImport := .F.
		makeH1(aFields, STR0004) //"CONEXÕES"
		for nInd := 1 to len(aServers)
			oServer := aServers[nInd]
			makeH2(aFields, oServer:Name())
			makeAttention(aFields, STR0005) //"Importando conexão"
			if oServer:Ignored()								// ignorada
				makeWarning(aFields, STR0006) //"Importação da Conexão ignorada."
			elseif oServer:Sucess()								// sucesso
				makeWarning(aFields, STR0007) //"Conexão adicionada com sucesso."
			else 												// insucesso
				makeWarning(aFields, STR0008) //"Erro ao adicionar a conexäo"
			endif
		next
	endif
	
	// ### DIMENSÕES ###
	aDimImp := oImpFile:ImportDims()
	if !empty(aDimImp) .and. len(aDimImp) > 0
		lShowMsgNoImport := .F.
		makeH1(aFields, STR0009) //"DIMENSÕES<br>Identificador (ordem)=campo-chave"
		for nInd := 1 to len(aDimImp)
			oDim := aDimImp[nInd]
			
			// título com o nome e descrição da dimensão
			makeH2(aFields, oDim:Name())
			
			makeAttention(aFields, STR0010) //"Importando dimensão"
			if oDim:Overrided()
				makeAttention(aFields, STR0011) //"Removendo dimensão já existente."
			endif
			
			// ERRO ao adionar dimensão
			if valType(oDim:Attributes()) == "A" .OR. valType(oDim:DataSources()) == "A"
				// atributos
				if valType(oDim:Attributes()) == "A" .AND. len(oDim:Attributes()) > 0
					makeSubTitle(aFields, STR0012) //"Adicionando os atributos"
					for nInd2 := 1 to len(oDim:Attributes())
						oDimAttr := oDim:Attributes()[nInd2]
						if oDimAttr:DimExist()
							makeText(aFields, oDimAttr:Name() + iif ( !(oDimAttr:KeySeq() == 0) .OR. oDimAttr:Classe() == "D", " (" + DwStr(oDimAttr:KeySeq()) + ")", "") )
						else
							makeWarning(aFields, STR0013 + oDimAttr:DimName() + STR0014) //"Dimensão ["###" inexistente. Atributo não importado."
						endif
					next
				else
					makeSubTitle(aFields, STR0015) //"Definição não possui atributos."
				endif
				
				// fonte de dados
				if valType(oDim:DataSources()) == "A" .AND. len(oDim:DataSources()) > 0
					makeSubTitle(aFields, STR0016) //"Adicionando as fontes de dados"
					for nInd2 := 1 to len(oDim:DataSources())
						
						// fonte de dados
						oDataSource := oDim:DataSources()[nInd2]
						if oDataSource:Sucess()
							makeText(aFields, oDataSource:Name())
							
							// scripts / roteiros
							if valType(oDataSource:Scripts()) == "A" .AND. len(oDataSource:Scripts()) > 0
								makeSubTitle(aFields, STR0017) //"Adicionando roteiros a fonte de dados"
								for nInd3 := 1 to len(oDataSource:Scripts())
									oScript := oDataSource:Scripts()[nInd3]
									if oScript:Sucess()
										makeText(aFields, oScript:Name() + iif(empty(oScript:Cpoorig()), "", "&nbsp;&lt;-&nbsp;" + oScript:Cpoorig()))
										if !empty(oScript:Expression())
											makeText(aFields, oScript:Expression())
										endif
									else
										makeWarning(aFields, STR0018 + oScript:Field() + "] " + STR0019) //"O campo ["###"inexistente."
										makeWarning(aFields, STR0020) //"Roteiro não pode ser importado."
									endif
								next
							endif
							
							// schedulers / agendamentos
							if valType(oDataSource:Schedulers()) == "A" .AND. len(oDataSource:Schedulers()) > 0
								makeSubTitle(aFields, STR0021) //"Adicionando agendamentos a fonte de dados"
								for nInd3 := 1 to len(oDataSource:Schedulers())
									oScheduler := oDataSource:Schedulers()[nInd3]
									if oScheduler:Sucess()
										makeText(aFields, STR0022 + oScheduler:DateBegin() + " " + oScheduler:HourBegin() + " T:" + oScheduler:DateEnd() + " " + oScheduler:HourEnd() + " ]") //"Agendamento [ I:"
									else
										makeWarning(aFields, STR0023) //"Agendamento não pode ser importado."
									endif
								next
							endif
							
						else
							makeWarning(aFields, STR0024 + oDataSource:Name() + "](" + oDataSource:TypeConn() + STR0025) //"A conexäo ["###") inexistente."
						endif
					next
				else
					makeSubTitle(aFields, STR0026) //"Definição não possui fonte de dado."
				endif
				
				// inicializando
				makeAttention(aFields, STR0027) //"Inicializando dimensão."
				
				// Dimensão adicionada com sucesso.
				makeWarning(aFields, STR0028) //"Dimensão adicionada com sucesso."
			else
				makeWarning(aFields, STR0029) //"Erro ao adicionar a dimensão."
			endif
		next
	endif
	
	// ### CUBOS ###
	aCubImp := oImpFile:ImportCubes()
	if !empty(aCubImp) .and. len(aCubImp) > 0
		lShowMsgNoImport := .F.
		makeH1(aFields, STR0030) //"CUBOS<br>Identificador (ordem)=campo-chave"
		
		for nInd := 1 to len(aCubImp)
			oCub := aCubImp[nInd]
			
			// título com o nome e descrição da dimensão
			makeH2(aFields, oCub:Name())
			
			makeAttention(aFields, STR0031) //"Importando cubo"
			if oCub:Overrided()
				makeAttention(aFields, STR0032) //"Removendo cubo já existente."
			endif
			
			// ERRO ao adicionar o cubo
			if valType(oCub:Attributes()) == "A" .OR. valType(oCub:DataSources()) == "A" .OR. valType(oCub:Attributes()) == "A"
				// atributos
				if valType(oCub:Attributes()) == "A" .AND. len(oCub:Attributes()) > 0
					makeSubTitle(aFields, STR0033) //"Adicionando os indicadores"
					for nInd2 := 1 to len(oCub:Attributes())
						oCubAttr := oCub:Attributes()[nInd2]
						makeText(aFields, oCubAttr:Name())
					next
				else
					makeSubTitle(aFields, STR0034) //"Definição não possui indicadores."
				endif
				
				// atributos virtuais
				if valType(oCub:VirtAttributes()) == "A" .AND. len(oCub:VirtAttributes()) > 0
					makeSubTitle(aFields, STR0035) //"Adicionando os indicadores virtuais"
					for nInd2 := 1 to len(oCub:VirtAttributes())
						makeText(aFields, oCub:VirtAttributes()[nInd2]:Name())
					next
				endif
				
				// fonte de dados
				if valType(oCub:DataSources()) == "A" .AND. len(oCub:DataSources()) > 0
					makeSubTitle(aFields, STR0016) //"Adicionando as fontes de dados"
					for nInd2 := 1 to len(oCub:DataSources())
						
						// fonte de dados
						oDataSource := oCub:DataSources()[nInd2]
						if oDataSource:Sucess()
							makeText(aFields, oDataSource:Name())
							
							// scripts / roteiros
							if valType(oDataSource:Scripts()) == "A" .AND. len(oDataSource:Scripts()) > 0
								makeSubTitle(aFields, STR0017) //"Adicionando roteiros a fonte de dados"
								for nInd3 := 1 to len(oDataSource:Scripts())
									oScript := oDataSource:Scripts()[nInd3]
									if oScript:Sucess()
										makeText(aFields, oScript:Name() + iif(empty(oScript:Cpoorig()), "", "&nbsp;&lt;-&nbsp;" + oScript:Cpoorig()))
										if !empty(oScript:Expression())
											makeText(aFields, oScript:Expression())
										endif
									else
										makeWarning(aFields, STR0018 + oScript:Field() + "] " + STR0019) //"O campo ["###"inexistente."
										makeWarning(aFields, STR0020) //"Roteiro não pode ser importado."
									endif
								next
							endif
							
							// schedulers / agendamentos
							if valType(oDataSource:Schedulers()) == "A" .AND. len(oDataSource:Schedulers()) > 0
								makeSubTitle(aFields, STR0021) //"Adicionando agendamentos a fonte de dados"
								for nInd3 := 1 to len(oDataSource:Schedulers())
									oScheduler := oDataSource:Schedulers()[nInd3]
									if oScheduler:Sucess()
										makeText(aFields, STR0022 + oScheduler:DateBegin() + " " + oScheduler:HourBegin() + " T:" + oScheduler:DateEnd() + " " + oScheduler:HourEnd() + " ]") //"Agendamento [ I:"
									else
										makeWarning(aFields, STR0023) //"Agendamento não pode ser importado."
									endif
								next
							endif
							
						else
							makeWarning(aFields, STR0024 + oDataSource:Name() + "](" + oDataSource:TypeConn() + STR0025) //"A conexäo ["###") inexistente."
						endif
					next
				else
					makeSubTitle(aFields, STR0026) //"Definição não possui fonte de dado."
				endif
				
				// inicializando
				makeAttention(aFields, STR0036) //"Inicializando cubo."
				
				// Dimensão adicionada com sucesso.
				makeWarning(aFields, STR0037) //"Cubo adicionado com sucesso."
			else
				makeWarning(aFields, STR0029) //"Erro ao adicionar a dimensão."
			endif
		next
	endif
	
	// ### CONSULTAS ###
	aQryImp := oImpFile:importQuerys()
	if !empty(aQryImp) .and. len(aQryImp) > 0
		lShowMsgNoImport := .F.
		makeH1(aFields, STR0038) //"CONSULTAS"
		for nInd := 1 to len(aQryImp)
			oQry := aQryImp[nInd]
			
			// título com o nome e descrição da dimensão
			makeH2(aFields, oQry:Name())
			
			makeAttention(aFields, STR0039) //"Importando consulta"
			if oQry:Overrided()
				makeAttention(aFields, STR0040) //"Removendo consulta ja existente."
			endif
			
			// cubo inexistente
			if oQry:CubeExist()
				// ERRO ao adicionar o cubo
				if oQry:Sucess()
					// Indicadores virtuais
					if valType(oQry:VirtIndicators()) == "A" .AND. len(oQry:VirtIndicators()) > 0
						makeSubTitle(aFields, STR0041) //"Indicadores virtuais"
						for nInd2 := 1 to len(oQry:VirtIndicators())
							oQryAttr := oQry:VirtIndicators()[nInd2]
							makeText(aFields, oQryAttr:Name())
						next
					endif
					
					// TABELAS
					if valType(oQry:Tables()) == "A" .AND. len(oQry:Tables()) > 0
						makeSubTitle(aFields, STR0042) //"Importando definições da tabela"
						for nInd2 := 1 to len(oQry:Tables())
							// importa todos os agregados para a tabela
							importAgregados(aFields, oQry:Tables()[nInd2])
						next
					endif
					
					// GRÁFICOS
					if valType(oQry:Graphics()) == "A" .AND. len(oQry:Graphics()) > 0
						makeSubTitle(aFields, STR0043) //"Importando definições do gráfico"
						for nInd2 := 1 to len(oQry:Graphics())
							// importa todos os agregados para o gráfico
							importAgregados(aFields, oQry:Graphics()[nInd2])
						next
					endif
					
					// FILTROS
					if valType(oQry:Filters()) == "A" .AND. len(oQry:Filters()) > 0
						makeSubTitle(aFields, STR0044) //"Importando filtros da consulta"
						for nInd2 := 1 to len(oQry:Filters())
							oQryFltr := oQry:Filters()[nInd2]
							makeText(aFields, oQryFltr:Name())
							for nInd3 := 1 to len(oQryFltr:Expressions())
								oQryExpr := oQryFltr:Expressions()[nInd3]
								if !oQryExpr:Sucess()
									makeWarning(aFields, STR0045 + oQryFltr:Name() + STR0046) //"o filtro [ "###" ] não pode ser importado."
								elseif !oQryExpr:IsSQL()
									if !oQryExpr:DimExist()
										makeWarning(aFields, STR0045 + oQryFltr:Name() + STR0047 + oQryExpr:DimName() + STR0048) //"o filtro [ "###" ] não pode ser importado, pois a dimensão ["###"] inexiste."
									elseif !oQryExpr:DimFldExist()
										makeWarning(aFields, STR0045 + oQryFltr:Name() + STR0049 + oQryExpr:DimName() + ":" + oQryExpr:DimFldName() + STR0048) //"o filtro [ "###" ] não pode ser importado, pois o campo ["###"] inexiste."
									endif
								endif
							next
						next
					endif
					
					// ALERTAS
					makeSubTitle(aFields, STR0050) //"Importando alertas da consulta"
					
					// sucesso
					makeWarning(aFields, STR0051) //"Consulta importada"
				else
					makeWarning(aFields, STR0052) //"Erro ao adicionar a consulta"
				endif
			else
				makeWarning(aFields, STR0053 + oQry:CubeName() + STR0054) //"Cubo ["###"] inexistente"
			endif
		next
	endif
	
	if lShowMsgNoImport
		aFields := {}
		makeH1(aFields, STR0055) //"O arquivo fornecido para importação não possui nenhuma entrada válida para importação"
	else
		makeWarning(aFields, STR0056) //"Processo de importação finalizado."
	endif
	
	// monta os botões necessários
	makeButton(aButtons, BT_FINALIZE, "", AC_TOOLS_IMPORT)
%>
	<%= buildForm("frmImp#", STR0057, AC_TOOLS_IMPORT, OP_NONE, aButtons, aFields, .T., , , ) %> <%= /*"Importação de arquivos de metadados"*/%>
	
<%else // página de entrada, 	seleção do arquivo de metadados
	makeTitle(aFields, STR0058) //"Selecione o arquivo com as definições a serem importadas"
	makeFileField(aFields, 'edFileImport', STR0059, .T.) //'Arquivo metadados'
	
	// monta os botões necessários
	makeButton(aButtons, BT_PROCESS)
	cHtml := buildForm("frmImp#", STR0057, AC_TOOLS_IMPORT, OP_REC_NEW, aButtons, aFields, .T., , , , , , , , , , "multipart/form-data") /*"Importação de arquivos de metadados"*/
%>	
	<%=cHtml%>
<% endif

return __Response

/*
--------------------------------------------------------------------------------------
Function auxiliar responsável por importar os valores dos agregados de uma tabela ou gráfico.
Agregados são os valores das Coordenada X e Y e os valores das medições/indicadores
Args: 	aaFields, array, contendo o array de buffer dos campos da página
		aoAgregados, array de objetos, contem os objtetos:
			- TDWImportAgdo() com os Agregados/Coordenada X
			- TDWImportAgdo() com os Agregados/Coordenada Y
			- TDWImportMeasure() com as Medições/Indicadores
Ret: Não utilizado
--------------------------------------------------------------------------------------
*/
static function importAgregados(aaFields, aoAgregados)
	
	Local oAgregs, oMeasures, oMeasure  
	Local nInd
	
	if (valType(aoAgregados:AgregY()) == "A" .AND. len(aoAgregados:AgregY()) > 0) .OR. ;
			(valType(aoAgregados:AgregX()) == "A" .AND. len(aoAgregados:AgregX()) > 0)
		// recupera os valores dos agregados para a coordenada X
		oAgregs := aoAgregados:AgregY()
		importAgdo(aaFields, oAgregs)
	 	
	 	// recupera os valores dos agregados para a coordenada Y
		oAgregs := aoAgregados:AgregX()
		importAgdo(aaFields, oAgregs)
	else
		makeWarning(aaFields, STR0061) //"Consulta não possui agregadores nos eixo X ou Y."
	endif
	
	// recupera os valores das medições e indicadores
	oMeasures := aoAgregados:Measures()
	if valType(oMeasures) == "A" .AND. len(oMeasures) > 0
		for nInd := 1 to len(oMeasures)
			oMeasure := oMeasures[nInd]
			makeText(aaFields, STR0062 + oMeasure:MeasureField() + " ]") //"Atributo ["
			if !oMeasure:IndExist()
				makeWarning(aaFields, STR0062 + oMeasure:MeasureField() + STR0063) //"Atributo ["###"] inexistente."
			endif
		next
	else
		makeWarning(aaFields, STR0064) //"Consulta não possui indicadores."
	endif

return

/*
--------------------------------------------------------------------------------------
Function auxiliar responsável por importar os valores de um agregado/coordenada.
Args: 	aaFields, array, contendo o array de buffer dos campos da página
		oAgregs, array de objetos, contendo os objtetos para um Agregado/Coordenada
Ret: Não utilizado
--------------------------------------------------------------------------------------
*/
static function importAgdo(aaFields, oAgregs)
	
	Local oAgreg
	Local nInd
	
	if valType(oAgregs) == "A" .AND. len(oAgregs) > 0
		for nInd := 1 to len(oAgregs)
			oAgreg := oAgregs[nInd]
			makeText(aaFields, STR0062 + oAgreg:DimName() + "->" + oAgreg:FieldName() + " ]") //"Atributo ["
			if oAgreg:DimExist()
				if !oAgreg:Sucess()
					makeWarning(aaFields, STR0062 + oAgreg:DimName() + "->" + oAgreg:FieldName() + STR0063) //"Atributo ["###"] inexistente."
				endif
			else
				makeWarning(aaFields, STR0013 + oAgreg:DimName() + STR0063) //"Dimensão ["###"] inexistente."
			endif
		next
	endif
return

%>