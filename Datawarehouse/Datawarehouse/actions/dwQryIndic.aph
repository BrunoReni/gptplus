<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryInd - Declaração de filtro com base nos indicadores para consultas
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 04.01.06 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "DWViewDataConst.ch"
#include "dwQryIndic.ch"

#define IND_ROWS 10

Local aFields 		:= {}
Local aRowWhere 	:= {}
Local aIndFltrData 	:= {}
Local nIDCons 		:= HttpGet->id_cons
Local nIDFilter 	:= DwGetProp(ID_FILTER_ID, ID_NAME_PRG_QRY)
Local cCookieID
Local oConsulta 	:= InitTable(TAB_CONSULTAS)
Local oCube
Local oCuboooo := InitTable(TAB_CUBESLIST)
Local oCubooooList := InitTable(TAB_FACTFIELDS)
Local oCubeInd
Local nInd1, nInd2
Local aFltrData
Local cCookieValues, cBaseValues
Local aCustomFlds := {}
Local aOperButtons := {}
Local nObjId
Local lEdit := .T.

nIDCons := DwVal(nIDCons)
// verifica se a consulta existe
if !oConsulta:Seek(1, { nIDCons })
	dwRaise(ERR_005, SOL_003, DwStr(nIDCons))
endif

oCube 	:= oSigaDW:OpenCube(oConsulta:value("id_cube"))
nObjId	:= oConsulta:value("id_cube")

// verifica se a ação é um restore dos dados da base de dados
if HttpGet->Action == AC_RESTORE_INDFLTR
	// recupera o array com os dados oriundos da base de dados na sessão
	aIndFltrData := getIndicCookieValue(DwGetProp(ID_FILTER_DATA, ID_NAME_PRG_QRY), oCube)
	aIndFltrData := DWToken(URLDecode(aIndFltrData), ";", .f.)
endif

// recupera da session os indicadores do cubo adicionando ao array aRowWhere
aRowWhere := DwGetProp(ID_FILTER_IND, ID_NAME_PRG_QRY)

// recupera o nome do cookie para os indicadores
cCookieID := makeIndCookieName()

// recupera o cookie para os indicadores
if !empty(&("HttpCookies->" + cCookieID))
	// verifica se não é um restore dos dados da base de dados
	if !(HttpGet->Action == AC_RESTORE_INDFLTR)
		// exibe os valores oriundos do cookie
		aIndFltrData := DWToken(URLDecode(&("HttpCookies->" + cCookieID)), ";", .f.)
	endif
endif

// gera o código html applet
MakeWhere(aFields, aRowWhere, "frm" + DWInt2Hex(DwVal(cCookieID), 6), aIndFltrData, IND_ROWS)

// constroi um campo customizado para colocar dentro de um form
makeCustomField(aCustomFlds, "iframeFilter", DwConcatWSep(CRLF, aFields))

// verifica privilégio para dar manutenção (CASO não seja administrador)
if !oUserDW:UserIsAdm()
	lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nIDCons)
	// exibe msg de que o usuário não possui permissão
	if !lEdit
		HttpSession->DWErrMsg := STR0001 //"Atenção: usuário não possui privilégio de manutenção desta consulta."
	endif
endif

if lEdit
	// botão salvar
	makeStepsToolbar(aOperButtons, BT_SUBMIT, STR0002, STR0003, "ic_save.gif", "js:doSave()", "left") //"salvar"###"Salva a Declaração de Filtro"
	
	// botão limpar
	makeStepsToolbar(aOperButtons, BT_SUBMIT, STR0004, STR0005, "ic_clean.gif", "js:doClean()", "left") //"limpar"###"Limpa a Declaração de Filtro"
	
	// botão restaurar
	makeStepsToolbar(aOperButtons, BT_SUBMIT, STR0006, STR0007, "ic_restore.gif", "js:doRestore()", "left") //"restaurar indicadores"###"Restaura Indicadores com dados da base de dados"
	
	// botão restaurar tudo
	makeStepsToolbar(aOperButtons, BT_SUBMIT, STR0008, STR0009, "ic_restore_all.gif", "js:doRestoreAll()", "left") //"restaurar TUDO"###"Restaura TUDO com dados da base de dados"
	
	// botão ver dados
	makeStepsToolbar(aOperButtons, BT_SUBMIT, STR0010, STR0011, "ic_show_data.gif", "js:doShowData()", "left") //"ver dados"###"Visualiza dados para uma condição específica"
endif

// botão sair
makeStepsToolbar(aOperButtons, BT_SUBMIT, STR0012, STR0013, "ic_exit.gif", "js:doClose()", "left") //"sair"###"Retorna para a lista de filtros"

// retorna o código HTML %>
<%= buildForm('frmInd', STR0014, AC_NONE, OP_NONE, {}, aCustomFlds, , , , , , , , , , aOperButtons) %> <% //"Indicadores" %>

<%=tagJS()%>
	
	function updAppletValues(nRow, nCol, cValue) {
		var cAppletName = document.applets[0].id;
		var poConn = getObject(cAppletName);
	 	var oTable = poConn.getComponent(); 
 		oTable.getDataModel().setValueAt(cValue, nRow, nCol);
	}
	
	function u_tableload() {
		<% // ### faz a atualização de dados selecionados na página de visualização de dados ###
		if !empty(DwGetProp(ID_SELECT_REC, ID_VIEW_NAMPRG))
			%>
			// ### faz a atualização de dados selecionados na página de visualização de dados ###
			// updAppletValues(nSelectRow, nSelectCol, cValue);
			updAppletValues(<%= DwGetProp(ID_SELECT_ROW, ID_VIEW_NAMPRG) %>, <%= DwGetProp(ID_SELECT_COL, ID_VIEW_NAMPRG) %>, "<%= DwGetProp(ID_SELECT_REC, ID_VIEW_NAMPRG) %>");
			<%
			DwSetProp(ID_SELECT_REC, NIL, ID_VIEW_NAMPRG)
			DwSetProp(ID_SELECT_ROW, NIL, ID_VIEW_NAMPRG)
			DwSetProp(ID_SELECT_COL, NIL, ID_VIEW_NAMPRG)
		endif
	
		// recupera o array contendo todos os valores selecionados através do filtro de dados
		aFilterValues := DwGetProp(ID_ARRVALUES, ID_VIEW_NAMPRG)
		if !empty(aFilterValues)		
			for nInd1 := 1 to len(aFilterValues)
				if !empty(aFilterValues[nInd1]) %>
					// ### faz a atualização de dados selecionados na página de visualização de dados ###
					// updAppletValues(nSelectRow, nSelectCol, cValue);
					updAppletValues(<%= DwGetProp(ID_SELECT_ROW, ID_VIEW_NAMPRG) %>, <%= nInd1 - 2 %>, "<%= aFilterValues[nInd1] %>");
				<% endif
			next
			// limpa o array com os valores recuperados da sessão
			DwSetProp(ID_ARRVALUES, NIL, ID_VIEW_NAMPRG)
		endif %>
	}
	
</script>

<%=tagJS()%>
	
	var update;
	var lWaiting = false;
	var cCookieVal = "";
	
	<% // recupera o cookie para os indicadores
	if !empty(&("HttpCookies->" + cCookieID)) %>
		cCookieVal = "<%= URLDecode(&('HttpCookies->' + cCookieID)) %>";
	<% endif %>
	
	function saveFilterContext() {
		var aValues = new Array();
		var oApplet = getObject(document.applets[0].id);
		prepTable(oApplet, aValues);
		gravaCookie("<%= cCookieID %>", aValues.join(";"), "<%= cCookieID %>");
		if (GetCookie("<%= cCookieID %>") != cCookieVal) {
			update = setTimeout("updateDeclaration()", 0);
			cCookieVal = GetCookie("<%= cCookieID %>");
		}
	}
	
	self.setInterval("saveFilterContext()", 1000);
	
	function updateDeclaration() {
		if (!lWaiting) {
			var iFrame = getElement("ifRequest");
			iFrame.onreadystatechange = handlerResponseData;
			iFrame.src = prepURL(<%= makeAction(AC_QRY_DESC_FLTR) %> + "&lIsExpr=false");
			lWaiting = true;
		
			function handlerResponseData() {
				clearTimeout(update);
				lWaiting = false;
				if (getElement("ifRequest").readyState == "complete") {
					if (getElement("divText", document.ifRequest)) {
						getElement("divText", parent.document.frames["ifDescFiltro"]).innerHTML = getElement("divText", document.ifRequest).innerHTML;
					}
				}
			}
		}
	}
	
	var cTableName = "<%= nObjId %>";
	
	function doShowData() {
		var cAppletName = document.applets[0].id;
		var poConn = getObject(cAppletName);
	 	var oTable = poConn.getComponent(); 
 		var oCell = oTable.getCurrentCell();
	 	if (oCell) {
		 	var oCol = oTable.getColumn(oCell.getColumn());
			
			if (oCol) {
				// recupera o valor da coluna        linha selecionada		campo/coluna selecionado
				var cColValue = oTable.getValueAt(oTable.getSelectedRow(), oTable.getCurrentCell().getColumn()).toString()
				doLoad(<%= makeAction(AC_QUERY_DATA) %> + "&ColName=" + oCol.fieldname + "&ColValue=" + cColValue + "&ObjType=<%= OBJ_CUBE %>" + "&ID=" + cTableName + "&SelectRow=" + oTable.getSelectedRow() + "&SelectCol=" + oTable.getCurrentCell().getColumn() + "&RefreshPage=window.opener", "_window", this, "WinVerDado", <%= TARGET_75_WINDOW %>, <%= TARGET_75_WINDOW %>, 0, 0);
				window['Table'] = oTable;
			}
		} else {
			alert("<%= STR0015 %>"); //"Para utilizar esta função, é necessário selecionar uma célula do formulário de filtro."
		}
	}
	
	function doSave() {
		parent.window.location = <%= makeAction(AC_SAVE_FLTR_DECL, { { "id", DwStr(nIDFilter) } }) %>;
	}
	
	function doClean() {
		parent.window.location = <%= makeAction(AC_CLEAN_FLTR_DEC, { { "id", DwStr(nIDFilter) } }) %>;
	}
	
	function doRestore() {
		window.location = <%= makeAction(AC_RESTORE_INDFLTR, { { "id_cons", DwStr(nIDCons) } }) %>;
	}
	
	function doRestoreAll() {
		parent.window.location = <%= makeAction(AC_RESTORE_ALL, { { "id", DwStr(nIDFilter) } }) %>;
	}
	
</script>

<%

/*
--------------------------------------------------------------------------------------
Recupera um nome para o cookie responsável pela manutenção dos dados dos indicadores
de um filtro específico/applet. Formato: ID DA CONSULTA + ID DO FILTRO
Args:
--------------------------------------------------------------------------------------
*/
function makeIndCookieName()
return "WIND" + DwStr(DwGetProp(ID_ID_QUERY, ID_NAME_PRG_QRY)) + DwStr(DwGetProp(ID_FILTER_ID, ID_NAME_PRG_QRY))

/*
--------------------------------------------------------------------------------------
Recupera os dados dos indicadores de um filtro a partir do array gerado pelo método
Expressao() do objeto Filtro
Args: aaFltrData, array, contém com os dados no formato do objeto filtro
      aoCube, obejto, contém o objeto Cubo do qual serão recuperados os indicadores
      anRows, quantidade padrão de linhas/registros do applet a serem exibidos
--------------------------------------------------------------------------------------
*/
function getExprIndic(aaFltrData, aoCube, anRows)
    
    Local aIndic
	Local aRowWhere		:= {}
	Local aIndFltrData
	Local nInd1, nInd2
	Local nRows, nCols
	Local oCubeInd := aoCube:GetIndicadores()

	default anRows := IND_ROWS
    
	// recupera o cubo, itera pelos indicadores do cubo adicionando ao array aRowWhere
	
	aIndic := aoCube:GetIndicadores()
	
	// recupera o cubo, itera pelos indicadores do cubo adicionando ao array aRowWhere
	for nInd1 := 1 to len(oCubeInd)
		//					descrição		 		nome				id
		aAdd(aRowWhere, { oCubeInd[nInd1][5], oCubeInd[nInd1][2], oCubeInd[nInd1][1] } )
	next
	
	// "completa" o array que conterá os resultados com o número
	// de linhas a serem exibidas (anRows) e com o número de colunas a serem exibidas (len(aRowWhere))
	aIndFltrData := array(anRows)
	nCols := len(aRowWhere)
	for nInd1 := 1 to len(aIndFltrData)
		aIndFltrData[nInd1] := {}
			for nInd2 := 1 to len(aRowWhere)
			aAdd(aIndFltrData[nInd1], "")
		next
	next
	
	if valType(aaFltrData) == "A"
		for nInd1 := 1 to len(aaFltrData)
			if left(aaFltrData[nInd1][7], 1) == "I"
				// recupera os valores oriundos da base de dados específica
				// 		número da linha/seq
				nRows := aaFltrData[nInd1][8]
				
				// 							id do campo a ser exibido		coluna/id_field
				nCols := aScan(aRowWhere, { |aElem| DwVal(aElem[3]) == DwVal(aaFltrData[nInd1][2]) })
				
				if valType(nCols) == "N" .and. nCols > 0
					// 											valor do campo
					aIndFltrData[nRows][nCols] := URLDecode(aaFltrData[nInd1][5])
				endif
			endif
		next
	endif
	
return aIndFltrData

/*
--------------------------------------------------------------------------------------
Recupera os dados no formato de cookie para os indicadores a partir do array gerado pelo método
Expressao() do objeto Filtro
Args: aaFltrData, array, contém com os dados no formato do objeto filtro
      aoCube, obejto, contém o objeto Cubo do qual serão recuperados os indicadores
      anRows, quantidade padrão de linhas/registros do applet a serem exibidos
--------------------------------------------------------------------------------------
*/
function getIndicCookieValue(aaFltrData, aoCube, anRows)
	
	Local aIndFltrData
	Local nInd1
	
	aIndFltrData := getExprIndic(aaFltrData, aoCube, anRows)
	
	// itera pelo array contendo os dados da base de dados, colocando no formato para compará-los aos do cookie
	for nInd1 := 1 to len(aIndFltrData)
		aIndFltrData[nInd1] := DwConcatWSep(",", aIndFltrData[nInd1])
	next
	
return DwConcatWSep(';', aIndFltrData)

%>