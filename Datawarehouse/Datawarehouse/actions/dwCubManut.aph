<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwCubManut - Manutenção de Cubos
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 24.11.05 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwCubManutConst.ch"
#include "dwCubManut.ch"
						
local oDS 			:= initTable(TAB_CUBESLIST)
local lOperSubmit 	:= .f., lClose := .F.
local aOperButtons 	:= {}
local aFields, aValues
local nID 			:= dwVal(HttpGet->ID)
local cNome, cDescricao, lNotificar, lOk, nOper := OP_SUBMIT
local aButtons := {}, cbPrepRow

if HttpGet->Action == AC_REC_MANUT
	aFields := {}
	
	
	HttpGet->Oper := DwVal(HttpGet->Oper)
	
	// ação de "anterior" na página de indicadores
	if HttpGet->Oper == OP_REC_STEPS
		nID := dwVal(HttpGet->ID)
	    lOperSubmit 		 := .F.
	    lClose				 := .F.
	    HttpSession->subOper := OP_REC_STEPS
	elseif HttpGet->Oper == OP_SUBMIT
		lOperSubmit := .t.
		aValues := oDS:fromPost(HttpPost->APost)
		nID := dwVal(HttpPost->edID)
		
		if oDS:seek(1, { dwVal(nID) })
			if HttpSession->subOper == OP_REC_STEPS .or. HttpSession->subOper == OP_REC_EDIT
				lOk := oDS:update(aValues)
				if HttpSession->subOper == OP_REC_EDIT
					lClose := .T.
				endif
			elseif HttpSession->subOper == OP_REC_DEL .and. oDS:seek(1, { dwVal(nID) }) 
				lOk := oDS:delete()
				lClose := .T.
			endif
		else
			if (lOk := oDS:append(aValues))
				nID := oDS:value("id")
			endif
		endif
		
		if !lOk
			DWRaise(ERR_002, SOL_000, oDS:Msg(.t.))
		endif

		if !(HttpSession->subOper == OP_REC_DEL)
			oDS:update({ {"dt_process", ctod("  /  /  ")}, {"hr_process",""} })
			DWWaitJob(JOB_INITCUBE, { oDS:Value("id") },, .T. )
			oDS:Refresh(.t.)
		endif
	else
		HttpSession->subOper := HttpGet->Oper
	endif

	if oDS:seek(1, { dwVal(nID) })
		cNome      := oDS:value("nome")
		cDescricao := oDS:value("descricao")
		lNotificar := oDS:value("notificar")
		
		// verifica privilégio para dar manutenção (CASO não seja administrador)
		if !oUserDW:UserIsAdm()
			lEdit := oUserDW:GetCubMaintPerm(HttpSession->CurrentDW, nID)
			nOper := OP_SUBMIT
			// exibe msg de que o usuário não possui permissão
			if !lEdit
				HttpSession->DWErrMsg := STR0002 //"Atenção: usuário não possui privilégio de manutenção deste cubo."
				makeButton(aButtons, BT_CANCEL)
				nOper := OP_NONE
			endif
		endif
	else
		cNome      := ''
		cDescricao := ''
		lNotificar := .f.
	endif	    
	
	
	//Exibe o ID do cubo apenas durante a edição
 	If  HttpSession->subOper == OP_REC_EDIT
    	makeShow(aFields, 'edID', 'ID' , alltrim ( str (nID) ) ) 
	Else 
		makeHidden(aFields, 'edID' , nID)
	EndIf
		
	
	makeKeyField(aFields, 'edNome'    , STR0003          , .T., 'C', 15, 0,,cNome) //'Nome'
	makeField(aFields, 'edDescricao'  , STR0004     , .T., 'C', 40, 0,,cDescricao) //'Descrição'
	makeField(aFields, 'edNotificar'  , STR0006     , .T., 'L',  1, 0,,lNotificar) //'Notificar'
	
	if HttpGet->Oper == OP_REC_STEPS .OR. dwVal(HttpGet->subOper) == OP_REC_NEW .OR. dwVal(HttpSession->subOper) == OP_REC_NEW
	    makeButton(aButtons, BT_SUBMIT, STR0019) //###"próximo"
	endif
	%>
	<%= buildForm('frmCubo', STR0007, HttpGet->Action, nOper, aButtons, aFields) %> <%= /*'Cubos' */%>
	<% if lOperSubmit %>
    	<% if lClose %>
  			<%= buildAutoClose() %>
  		<% else %>
  			<% 
  			DwSetProp(ID_TYPE_OPER, OP_REC_STEPS, ID_NAME_PRG_CUB)
  			DwSetProp(ID_ID_CUBE, nID, ID_NAME_PRG_CUB)
  			%>
  			<%= buildAutoAction(AC_CUB_IND, , , .F.) %>
  		<% endif %>
	<% endif %>
<% else
	makeOperAct(aOperButtons, STR0008, "ic_cub_ind.gif"     , AC_CUB_IND       , { {"oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW ) //"Indicadores"
  	makeOperAct(aOperButtons, STR0016, "ic_cub_filter.gif"  , AC_QRY_CUB_FILTER, { {"oper", OP_REC_NO_STEPS}, {"ObjType", OBJ_CUBE} }, TARGET_75_WINDOW ) //"Filtros"
  	makeOperAct(aOperButtons, STR0009, "ic_cub_virtflds.gif", AC_QUERY_VIRTFLD , { {"oper", OP_REC_NO_STEPS}, {"Obj" , OBJ_CUBE} }, TARGET_75_WINDOW ) //"Campos Virtuais"
  	makeOperAct(aOperButtons, STR0010, "ic_cub_dim.gif"     , AC_DIM_CUB_RECMAN, { {"oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW ) //"Dimensões"
  	makeOperAct(aOperButtons, STR0011, "ic_cub_ds.gif"      , AC_DSN_CUB_RECMAN, { {"oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW ) //"Fonte de dados"
  	makeOperAct(aOperButtons, STR0012, "ic_show_data.gif"   , AC_SHOW_DATA     , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_CUBE } }, TARGET_75_WINDOW) //"Navegação nos dados"
  	makeOperAct(aOperButtons, STR0014, "ic_analisar.gif"    , AC_ANALISAR_FRAG , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_CUBE } }, TARGET_75_WINDOW) /*"Analisar fragmentação"*/
  	makeOperAct(aOperButtons, STR0015, "page_export.gif"    , AC_EXPORT_DATA   , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_CUBE }, { "tipo", EX_CUBE} }, TARGET_75_WINDOW) /* "Exportar"*/
	makeOperAct(aOperButtons, STR0017, "ic_doc.gif"         , AC_DOCUMENTATION , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_CUBE }, { "tipo", EX_CUBE} }, TARGET_90_WINDOW) /*"Documentação"*/
	makeOperAct(aOperButtons, STR0018, "ic_schema.gif"      , AC_SHOW_SCHEMA   , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_CUBE }, { "tipo", EX_CUBE } }, TARGET_75_WINDOW) /*"Esquema"*/
	
 	// cria o codeblock para verificar privilégio de acesso a cada cubo (CASO não seja administrador)
 	if !oUserDW:UserIsAdm()
			cbPrepRow := { |aData| prepRow(aData) }
	endif
    
    %>
    <%= buildBrowse(STR0013, .t., oDS:Tablename(), , , , cbPrepRow, , , , , , aOperButtons, , , , , , iif (oUserDW:UserIsAdm(), .T., .F.)) %> <%= /*"Cubos"*/ %>
    <%=tagJS()%>
    <%=makeCubeInfo()%>
    function u_operActIsEnable(aaButtonsList, anID)
    {                         
      var oCube = { id: 0, lDim: false, lData: false, lInd: false };
      for (var i = 0; i < aCubes.length; i++)
      {
        if (aCubes[i].id == anID)
        {
          oCube = aCubes[i];
          break;
        }    
      }                
      aaButtonsList[1] = oCube.lInd && oCube.lDim; //filtro
      aaButtonsList[2] = oCube.lInd; //campos virtuais
      aaButtonsList[3] = oCube.lInd; //dimensões
      aaButtonsList[4] = oCube.lInd && oCube.lDim; //fonte de dados
      aaButtonsList[5] = oCube.lData ; //navegação
      aaButtonsList[6] = oCube.lData; //flagmentação
      aaButtonsList[7] = oCube.lData; //exportação
      
      return true;
    }
    </script>
<% endif

return __Response

static function makeCubeInfo()
  local aBuffer := {}
  local oQuery := initQuery(SEL_FACT_INFO)
  local nOldID, nDim, nInd

  oQuery:open()             
  
  aAdd(aBuffer, "var aCubes = new Array();")
  while !oQuery:eof()                                   
    nOldID := oQuery:value("id")
    nDim := 0
    nInd := 0
    while !oQuery:eof() .and. nOldID == oQuery:value("id")
      nDim += oQuery:value("dim")
      nInd += oQuery:value("ind")
      oQuery:_Next()
    enddo
    aAdd(aBuffer, "aCubes.push({ id: " + dwStr(nOldID) + ", "+;
                  "lDim: "  +iif(nDim <> 0, "true", "false") + ", "+;
                  "lData: " +iif(nDim <> 0 .and. nInd <> 0, "true", "false") + ", "+;
                  "lInd: "  +iif(nInd <> 0, "true", "false") + "});")
  enddo
  
  oQuery:close()
  
return dwConcatWSep(CRLF, aBuffer)

// function que recebe os dados de uma linha da base de dados e verifica se o usuário tem privilégio de acessar o cubo
static function prepRow(aaData)
	
	// recupera o id do cubo
	Local nCubeId := aaData[1]
	
	// verifica se usuário pode acessar o cubo
return oUserDW:GetCubAcessPerm(HttpSession->CurrentDW, nCubeId)

%>