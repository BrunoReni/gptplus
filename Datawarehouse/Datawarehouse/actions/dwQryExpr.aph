<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryExpr - Realiza a chamada de expressão para consultas
	// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 23.12.05 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwQryExpr.ch"

private aFields 		:= {}
private cExpressao, nExprID
private aButtons		:= {}
private cType			:= iif (!empty(HttpGet->ObjType), HttpGet->ObjType, HttpPost->ObjType)
private nObjID
private nQryID			:= DwVal(iif (!empty(HttpGet->id_cons), HttpGet->id_cons, HttpPost->id_cons))
private nCubID			:= DwVal(iif (!empty(HttpGet->id_cube), HttpGet->id_cube, HttpPost->id_cube))
private nIDFilter		:= DwVal(iif (!empty(HttpGet->id_filter), HttpGet->id_filter, HttpPost->edId))
private oObjWhere
private nIDExpr
private nOper 	   		:= OP_SUBMIT
private aOperButtons 	:= {}
private lEdit 			:= .T.
private cObjKey

// verifica qual é o tipo de objeto para o qual será definido filtros
if cType == OBJ_QUERY
	initFltrQuery()
elseif cType == OBJ_CUBE
	initFltrCube()
endif

if DwVal(HttpGet->Oper) == OP_SUBMIT
	if oObjWhere:Seek(1, { DwVal(HttpPost->edId) }) .and. !oObjWhere:Update({ { "id_expr", DwVal(HttpPost->edId_expr) } })
		DWRaise(ERR_002, SOL_000, oObjWhere:Msg(.t.))
	endif
	nIDExpr 	:= oObjWhere:value("id")
	cExpressao 	:= oObjWhere:value("expressao")
	nExprID		:= oObjWhere:value("id_expr")
	nOper		:= OP_NONE
else
	oObjWhere:Seek(1, { nIDFilter } )
	while !oObjWhere:EoF() .and. oObjWhere:value("id") == nIDFilter .and. oObjWhere:value(cObjKey) == nObjID
		nIDExpr 	:= oObjWhere:value("id")
		cExpressao 	:= oObjWhere:value("expressao")
		nExprID		:= oObjWhere:value("id_expr")
		
		oObjWhere:_Next()
	enddo
endif

makeHidden(aFields		, 'id_cons'		, nObjID)
makeHidden(aFields		, 'id_cube'		, nCubID)
makeHidden(aFields		, 'edId'		, nIDFilter)
makeHidden(aFields		, 'headers'		, CHKBOX_OFF)
makeDotField(aFields	, 'edExpressao'	, STR0001, .T., "M", 7, 14, , cExpressao) //'Expressão'

nExprID := iif (empty(nExprID), 0, nExprID)
makeHidden(aFields		, 'edId_expr'	, DwStr(nExprID))
%>

<%=tagJS()%>

	function edExpressao_dot(oSender) {			
		var cURL = <%= makeAction(AC_EDT_EXPRESSION, { { "objID", nCubID }, { "obj", cType }, { "options", "0001"}, { "isSQL", CHKBOX_ON }, { "chg", CHKBOX_OFF }, { "caption", "" }, { "id_expr", -1}, { "id_base", -1 } , { "targetID", ""}, { "targetText", ""} }) %>;
		cURL = prepParam(cURL, 'caption', STR0002); //"Manutenção de Expressões"
		cURL = prepParam(cURL, 'id_expr', getElement('edId_expr').value);
		cURL = prepParam(cURL, 'id_base', 0);
		cURL = prepParam(cURL, 'targetID', 'edId_expr');
		cURL = prepParam(cURL, 'targetText', 'edExpressao');
		cURL = prepParam(cURL, 'obj', '<%= OBJ_QUERY %>');
		cURL = prepParam(cURL, 'objID', '<%= nCubID %>');
		doLoad(cURL, '_window', document, 'expressao', <%= DwStr(TARGET_90_WINDOW) %>, <%= DwStr(TARGET_90_WINDOW) %>, 0, 0);
	}

	function updateDeclaration() {
		var iFrame = getElement("ifRequest", parent.document);
		iFrame.onreadystatechange = handlerResponseData;
		iFrame.src = prepURL(<%= makeAction(AC_QRY_DESC_FLTR) %> + "&lIsExpr=true");
		
		function handlerResponseData() {
			if (iFrame.readyState == "complete") {
				if (getElement("divText", iFrame.document)) {
					getElement("divText", parent.document.frames["ifDescFiltro"]).innerHTML = getElement("divText", iFrame).innerHTML;
				}
			}
		}
	}
	
	function doClean() {
		parent.window.location = <%= makeAction(AC_CLEAN_FLTR_DEC, { { "id", DwStr(nIDFilter) } }) %>
	}
	
</script>

<%
if nOper == OP_NONE
	makeButton(aButtons, BT_PREVIOUS)
endif

// botão limpar
if lEdit
	makeStepsToolbar(aOperButtons, BT_SUBMIT, STR0004, STR0005, "ic_clean.gif", "js:doClean()", "left") //"limpar"###"Limpa a Declaração de Filtro"
endif

if !empty(cExpressao)
	makeButton(aButtons, BT_PREVIOUS, , AC_QRY_CUB_FILTER, , { { "id", DwStr(nIDFilter), { "ObjType", OBJ_QUERY } } })
endif

/* só exibe o botão para editar a expressão se for antes do submit */ %>
<%= buildForm('frmExpr', STR0001, HttpGet->Action, nOper, aButtons, aFields, iif (nOper == OP_NONE, .F., .T.), , , , , , , , , aOperButtons) %> <% /*'Expressão'*/%>

<% if lEdit .AND. nOper == OP_NONE %>
	<%=tagJS()%>
		updateDeclaration();
	</script>
	<%= buildAutoClose(.F.) %>
<% endif%>

<%

static function initFltrQuery()
	Local oObj 	:= initTable(TAB_CONSULTAS)
	
	// troca o id genérico pelo id da consulta
	nObjID		:= nQryID
	
	// inicializa a tabela de filtros específica para consultas
	oObjWhere 	:= initTable(TAB_WHERE)
	
	// chave da tabela específica para os filtros da consulta
	cObjKey 	:= "id_cons"
	
	// verifica/valida a consulta assoaciada a este action
	if !oObj:Seek(1, { nObjID } )
		DwRaise(ERR_005, SOL_003, nObjID)
	endif
	
	// verifica privilégio para dar manutenção (CASO não seja administrador)
	if !oUserDW:UserIsAdm()
		lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nObjID)
		// exibe msg de que o usuário não possui permissão
		if !lEdit
			HttpSession->DWErrMsg := STR0003 //"Atenção: usuário não possui privilégio de manutenção desta consulta."
			nOper := OP_NONE
		endif
	endif
return

static function initFltrCube()
	Local oObj	:= oSigaDW:Cubes():CubeList()

	// troca o id genérico pelo id da consulta
	nObjID		:= nCubID
	
	// inicializa a tabela de filtros específica para cubos
	oObjWhere	:= InitTable(TAB_FACT_WHERE)
	
	// chave da tabela específica para os filtros do cubo
	cObjKey 	:= "id_cube"
	
	// verifica/valida o cubo assoaciado a este action
	if !oObj:Seek(1, { nIdObj } )
		dwRaise(ERR_005, SOL_003, nIdObj)
	endif
	
	// verifica privilégio para dar manutenção no cubo (CASO não seja administrador)
	if !oUserDW:UserIsAdm()
		// exibe msg de que o usuário não possui permissão
		if oUserDW:GetCubMaintPerm(HttpSession->CurrentDW, nIdObj) == .F.
			dwRaise(ERR_005, SOL_004, STR0003) //"Atenção: usuário não possui privilégio de manutenção deste cubo."
		endif
	endif
return

%>