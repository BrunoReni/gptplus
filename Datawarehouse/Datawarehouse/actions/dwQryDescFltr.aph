<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryDescFltr - Descrição da Declaração de filtro para consultas
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 04.01.06 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwQryDescFltr.ch"

Local aFields 		:= {}
Local cDescr		:= ""
Local oConsWhere	:= initTable(TAB_WHERE)
Local oDesc, cObjType, nObjId, nObjFieldId, cHTML := ""

// recupera o id do filtro da sessão
Local nIDFilter	:= DwGetProp(ID_FILTER_ID, ID_NAME_PRG_QRY)
nIDFilter := iif (!empty(nIDFilter), DwVal(nIDFilter), 0)

if HttpGet->Action == AC_QRY_DESC_FIELD
	cHTML += "<div id='divDescription' class='divDescription'>" + CRLF
	
	cObjType 	:= HttpGet->objType
	nObjId 		:= DwVal(HttpGet->objId)
	nObjFieldId := DwVal(HttpGet->objFieldId)
	if cObjType == OBJ_DIMENSION
		// recupera informações sobre a dimensão
	    oDesc := InitTable(TAB_DIMENSAO)
	    oDesc:Seek(1, { nObjId })
	    if !oDesc:EoF() .and. oDesc:value("id") == nObjId
	    	cHTML += makeAttention(NIL, STR0005) + CRLF //###"Dimensão"
	    	cHTML += makeShow(NIL, 'edNome', STR0006, oDesc:value("nome")) + CRLF //###"Nome"
	    	cHTML += makeShow(NIL, 'edDescricao', STR0007, oDesc:value("descricao")) + CRLF //###"Descrição"
	    	cHTML += CRLF
	    endif
	    
	    // recupera informações sobre o campo
		oDesc := InitTable(TAB_DIM_FIELDS)
		oDesc:Seek(1, { nObjFieldId })
		if !oDesc:EoF() .and. oDesc:value("id") == nObjFieldId
			cHTML += makeAttention(NIL, "Campo") + CRLF
	    	cHTML += makeShow(NIL, 'edNome', STR0006, oDesc:value("nome")) + CRLF //###"Nome"
	    	cHTML += makeShow(NIL, 'edDescricao', STR0007, oDesc:value("descricao")) + CRLF //###"Descrição"
			cHTML += makeField(NIL, 'edVisible', STR0008, .F., 'L', 1, 0,, oDesc:value("visible")) + CRLF //###"Vísivel"
			cHTML += makeShow(NIL, 'edTipo', STR0009, oDesc:value("tipo")) + CRLF //###"Tipo"
			cHTML += makeShow(NIL, 'edTam', STR0010, DwStr(oDesc:value("tam"))) + CRLF //###"Tamanho"
			cHTML += makeShow(NIL, 'edNDec', STR0011, DwStr(oDesc:value("ndec"))) + CRLF //###"Decimais"
			cHTML += makeShow(NIL, 'edMascara', STR0012, oDesc:value("mascara")) + CRLF //###"Máscara"
		endif
	elseif cObjType == OBJ_CUBE
		// recupera informações sobre o campo
		oDesc := InitTable(TAB_FACTFIELDS)
		oDesc:Seek(1, { nObjFieldId })
		if !oDesc:EoF() .and. oDesc:value("id") == nObjFieldId
			makeAttention(aFields, "Campo")
	    	makeShow(aFields, 'edNome', STR0006, oDesc:value("nome")) //###"Nome"
	    	makeShow(aFields, 'edDescricao', STR0007, oDesc:value("descricao")) //###"Descrição"
			makeField(aFields, 'edVisible', STR0008, .F., 'L', 1, 0,, oDesc:value("visible")) //###"Vísivel"
			makeShow(aFields, 'edTipo', STR0009, oDesc:value("tipo")) //###"Tipo"
			makeShow(aFields, 'edTam', STR0010, DwStr(oDesc:value("tam"))) //###"Tamanho"
			makeShow(aFields, 'edNDec', STR0011, DwStr(oDesc:value("ndec"))) //###"Decimais"
			makeShow(aFields, 'edMascara', STR0012, oDesc:value("mascara")) //###"Máscara"
		endif
	endif
	
	cHTML += "</div>" + CRLF %>
	
	<%= cHTML %>
<% else
	// recuperar descrições do applet
	// verifica se o filtro existe
	oConsWhere:Seek(1, { nIDFilter })
	
	if !oConsWhere:EoF() .and. oConsWhere:value("id") == nIDFilter
		// recupera a descrição do filtro
		cDescr += ' <span class="declarFilter">' + oConsWhere:value("descricao") + ": ( </span>"
		
		if !empty(HttpGet->lIsExpr) .and. HttpGet->lIsExpr == "false"
			// recupera valores de cookies
			cDescr += retrieveCookies()
		else
			// recupera a descrição do expressão
			cDescr += oConsWhere:value("expressao")
		endif
				
		cDescr += '<LAYER class="declarFilter"> )</LAYER>'
		
	else
		// erro: não conseguiu pegar o id do filtro da sessão ou o 
		makeSubTitle(aFields, STR0001 + DWMntErr(.T., ERR_005)) //"Erro "
		
	endif
	
	makeText(aFields, cDescr)
	%>
	<%= buildForm('frmDescFilter', STR0002, AC_NONE, , , aFields, .f., , , , , , , , "divText")%> <% /*'Declarações do Filtro'*/ %>
<% endif %>

<%= tagJS()%>
	function u_bodyonload() {
		setAllInputReadOnly()
	}
	
	function showIndDescription(anFieldId) {
		showDescription(0, anFieldId, "<%= OBJ_CUBE %>");
	}
	
	function showDimFieldDescription(anObjId, anFieldId) {
		showDescription(anObjId, anFieldId, "<%= OBJ_DIMENSION %>");
	}
	                                                         
	// função JavaScript para requisição de uma ação através de IFRAME
	function showDescription(anObjId, anFieldId, acObjType) {
		var acAction = <%= makeAction(AC_QRY_DESC_FIELD) %> + "&objId=" + anObjId + "&objFieldId=" + anFieldId + "&objType=" + acObjType;
		showWait();
		var iFrame = document.getElementById("ifRequest");
		
		// função JavaScript para tratar a resposta de uma requisição/ação através do IFRAME
		iFrame.onreadystatechange = handlerResponseData;
		iFrame.src = prepURL(acAction + "&jscript=<%= CHKBOX_ON %>");
		function handlerResponseData() {
			if (document.getElementById("ifRequest").readyState == "complete") {
				document.getElementById("divText").innerHTML = parent.document.ifRequest.document.getElementById('divDescription').innerHTML;
				hideWait();
			}
		}
	}
	
</script>

<%
function retrieveCookies(aaFields, alFormat)

	Local nInd, nInd1, nInd2, nInd3, nInd4
	Local aListFields, aRowsDimData, aRowValues, aColValues
	Local aSession
	Local cSql := "", cSqlOr, cSqlAnd, cOper
	Local cOperE := ' <span class="operAnd">' + STR0003 + '</span> ' //' E '
	Local bAndPar := { |cValue | ' <span class="operAnd">' + cValue + '</span> ' }
	Local cOperOU := ' <span class="operOr">' + STR0004 + '</span> ' //' OU '
	Local bOrPar := { |cValue | ' <span class="operOr">' + cValue + '</span> ' }
	Local aRowsIndData, aIndFields
	Local cCookieIndID, cIDCons, cCookieDimID
	Local cDescElement
	
	default alFormat := .F.
	
	// se não for para formatar a descrição
	if !alFormat
		cOperE 	:= STR0003 //' E '
		bAndPar := { |cValue | cValue }
		cOperOU := STR0004 //' OU '
		bOrPar 	:= { |cValue | cValue }
	endif
	
	// recupera o nome do cookie para os indicadores
	cCookieIndID := makeIndCookieName()
	
	// recupera o cookie dos indicadores
	if !empty(&("HttpCookies->" + cCookieIndID))
 		
		// recupera o indicadores
		aIndFields := DwGetProp(ID_FILTER_IND, ID_NAME_PRG_QRY)
		
		// recupera os dados do cookie para os indicadores
		aRowsIndData := DWToken(URLDecode(&("HttpCookies->" + cCookieIndID)), ";", .F.)
		if valType(aRowsIndData) == "A"
			cSql := ""
			cSqlOr := ""
			// itera pelos dados contidos no array
			for nInd2 := 1 to len(aRowsIndData)
				// tokeniza os dados para separar os dados em linhas de dados
				aRowValues := DwToken(aRowsIndData[nInd2], "','", .T.)
				
				// itera pelos dados contidos no array
				for nInd3 := 1 to len(aRowValues)
					// tokeniza os dados para separar os dados em colunas de dados
					aColValues := DwToken(aRowValues[nInd3], ",")
					
					cSqlAnd := ""
					// itera pelos dados das colunas contidos no array
					for nInd4 := 1 to len(aColValues)
						if !empty(aColValues[nInd4])
							if !empty(cSqlAnd)
								cSqlAnd += cOperE
							endif
							cDescElement := '<a href="#" onMouseOver="showIndDescription(' + DwStr(aIndFields[nInd4][3]) + ');">' + aIndFields[nInd4][1] + '</a>'
							cSqlAnd += QBE2Html(aIndFields[nInd4][1], valType(aColValues[nInd4]), { DwStr(aColValues[nInd4]) }, cDescElement, NIL, NIL, NIL)
							if !(valType(aaFields) == "U")
								// id_dim, id_field, cFieldname, tipo, exp_qbe, caption , alias, seq
								aAdd(aaFields, { 0, aIndFields[nInd4][3], aIndFields[nInd4][2], valType(aColValues[nInd4]), DwStr(aColValues[nInd4]), aIndFields[nInd4][2], aIndFields[nInd4][1], nInd2 })
							endif
						endif
					next
					
				next

				if !empty(cSqlAnd)
					if !empty(cSqlOr)
						cSqlOr += cOperOU
					endif
					cSqlOr += eval(bOrPar, '(') + cSqlAnd + eval(bOrPar, ')')
				endif 
				
			next

			if !empty(cSqlOr)
				if !empty(cSql)
					cSql += cOperE
				endif
				cSql += eval(bAndPar, '(') + cSqlOr + eval(bAndPar, ')')
			end

		endif
		
	endif
	
	// recupera o array com as dimensões da sessão
	if !empty(DwGetProp(ID_FILTER_DIM, ID_NAME_PRG_QRY))
	
		aSession := DwGetProp(ID_FILTER_DIM, ID_NAME_PRG_QRY)
		
		// iterar pelo array que contem as dimensões e seus campos
  		for nInd1 := 1 to len(aSession)
			
			// recupera o nome do cookie
			cCookieDimID := makeDimCookieName(aSession[nInd1][1])
			
			aListFields := aSession[nInd1][2]
			
			// verifica o cookie para a dimensão específica
			if !empty(&("HttpCookies->" + cCookieDimID))
				
				// recupera os dados do cookie para a dimensão específica
				aRowsDimData := DWToken(URLDecode(&("HttpCookies->" + cCookieDimID)), ";", .f.)
				
				if valType(aRowsDimData) == "A"
					
					cSqlOr := ""
					// itera pelos dados contidos no array
					for nInd2 := 1 to len(aRowsDimData)
						// tokeniza os dados para separar os dados em linhas de dados
						aRowValues := DwToken(aRowsDimData[nInd2], "','", .T.)
						
						// itera pelos dados contidos no array
						for nInd3 := 1 to len(aRowValues)
							
							// tokeniza os dados para separar os dados em colunas de dados
							aColValues := DwToken(aRowValues[nInd3], ",")
							
							cSqlAnd := ""
							// itera pelos dados das colunas contidos no array
							for nInd4 := 1 to len(aColValues)
								if !empty(aColValues[nInd4])
									if !empty(cSqlAnd)
										cSqlAnd += cOperE
									endif
									
									cDescElement := '<a href="#" onMouseOver="showDimFieldDescription(' + DwStr(aSession[nInd1][1]) + ', ' + DwStr(aListFields[nInd4][2]) + ');">' + aListFields[nInd4][1] + '</a>'
									cSqlAnd += QBE2Html(aListFields[nInd4][1], valType(aColValues[nInd4]), { DwStr(aColValues[nInd4]) }, cDescElement, NIL, NIL, NIL)
									if !(valType(aaFields) == "U")
										// id_dim, id_field, cFieldname, tipo, exp_qbe, caption , alias, seq
										aAdd(aaFields, { aSession[nInd1][1], aListFields[nInd4][2], aListFields[nInd4][1], valType(aColValues[nInd4]), DwStr(aColValues[nInd4]), aListFields[nInd4][2], aListFields[nInd4][1], nInd2 })
									endif
								endif
							next
							
							if !empty(cSqlAnd)
								if !empty(cSqlOr)
									cSqlOr += cOperOU
								endif
								cSqlOr += eval(bOrPar, '(') + cSqlAnd + eval(bOrPar, ')')
							endif
							
						next
						
					next
					
					if !empty(cSqlOr)
						if !empty(cSql)
							cSql += cOperE
						endif
						cSql += eval(bAndPar, '(') + cSqlOr + eval(bAndPar, ')')
					end 
				endif
			endif
		next
		
	endif
	
Return cSql
%>