<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryExec - Apresentação da consulta
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 27.01.05 | 0548-Alan Candido | Versão 3  
// 10.04.08 | 0548-Alan Candido | BOPS 142154
//          |                   | Ajuste na apresentação de string de tradução
// 05.05.08 |0548-Alan Cândido  | BOPS 145242 - correção de DD "all" ao abrir todos os niveis e 
//          |                   | fechar algum nivel anterior
// 16.05.08 |0548-Alan Cândido  | BOPS 145995
//          |                   | Limpeza do drill histórico, quando acionado "drill all"
//          |                   | Exportação de consultas com DD, quando acionado "drill all"
// 05.08.08 |0548-Alan Cândido  | BOPS 151288
//          |                   | Ao executar a construção de consulta, ocorria erro de JS.
// 12.08.08 |0548-Alan Cândido  | BOPS 146580 (habilitado pelo define DWCACHE)
//          |                   | Implementação de novo sistema de leitura da consulta (uso de cache).
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQryExec.ch"

local oConsulta		:= Nil
local nIDCons		:= iIf ( ! Empty( HTTPGet->ID ), DwVal( HTTPGet->ID ), DwVal( HTTPPost->ID ) )
Local nType 		:= iIf ( ! Empty( HTTPGet->type ), DwVal( HTTPGet->type ), DwVal( HTTPGet->type ) )
local nInd     		:= 0
local nDD   		:= 0
local nLenInd  		:= 0
local oUser_DSK 	:= InitTable(TAB_USER_DSKTOP) 
Local lDesktop		:= .F.   
Local nUserID		:= oUserDW:UserID()
    
//Verifica se a consulta está sendo executada pelo desktop.     
If( !isNull( HTTPGet->source ) .and. HTTPGet->source == "desktop" )
   lDesktop := .T. 
EndIf
     
//Inicializa parametros de execução.
If ( isNull( HTTPGET->ID ) )
	nIDCons := dwVal( dwGetProp("ID_CONS") )
	nType 	:= dwVal( dwGetProp("TYPE") )
else 
	dwsetProp("ID_CONS"	, cBIStr( nIDCons ) )
	dwsetProp("TYPE"	, cBIStr( nType ) )  
EndIf
 
//Instancia o objeto da consulta. 
#ifdef DWCACHE
	oConsulta := dwNewCons(nIDCons, nType)
#else
	oConsulta := TConsulta():New(nIDCons, nType)
#endif
      

//Executa a consulta solicitada pelo desktop. 
if ( lDesktop )
	#ifdef DWCACHE
		dwDelCons(oConsulta:id(), oConsulta:_type())
	#else
		oConsulta:clearCache(.t.)
	#endif	
	 %>
		<%= tagJS() %>
			doLoad(<%= makeAction(AC_QUERY_EXEC, { {"id", cBIStr( nIDCons ) }, {"oper", OP_REC_NO_STEPS}, {"type", cBIStr( nType ) } }) %>, "_blank", null, null, <%= TARGET_90_WINDOW %>, <%= TARGET_90_WINDOW %>);
			window.close();
		</script>
	<% 	return
endif
        

// verifica pelo privilégio de acesso do usuário (dwacess refere-se as chamadas via Remote e URL/link estático, as quais já possuem verificação de privilégio de acesso do usuário)
If empty(HttpGet->dwacesss) .AND. !(oUserDW:GetQryAcessPerm(HttpSession->CurrentDW, oConsulta:ID()))
	HttpSend("ERROR: " + STR0004 + ": " + oConsulta:Desc() + " (" + oConsulta:Name() + ")") //###"Usuário não possui privilégio de acesso à consulta"
	conout("ERROR: " + STR0004 + ": " + oConsulta:Desc() + " (" + oConsulta:Name() + ")") //###"Usuário não possui privilégio de acesso à consulta"
	DwRaise(ERR_002, SOL_005)
EndIf

if !empty(httpGet->DD) .and. httpGet->DD == "*all*
	HttpGet->DL := dwVal(HttpGet->DL)
 	aEval(oConsulta:dimFieldsY(), { |x| x:DrillDown(.f.) })	
  	oConsulta:dimFieldsY()[HttpGet->DL]:DrillDown(.t.)  
  	oConsulta:clearDrillHist()
	//HttpGet->DL := HttpGet->DL - 1

	for nInd := 1 to HttpGet->DL
		httpGet->DD := httpGet->DD + "!" + "*all*
	next
		
	if aScan(oConsulta:DrillHist(), {|aElem| aElem[1] == HttpGet->DL .AND. aElem[2] == httpGet->DD}) == 0
		oConsulta:DrillParms(HttpGet->DL, URLDecode(httpGet->DD))
	else
		oConsulta:DrillParms(HttpGet->DL, URLDecode(httpGet->DD), , .T.)
	endif
#ifdef DWCACHE	
#else
	oConsulta:UpdCache()
#endif
	
	httpGet->DD := NIL
	httpGet->DL := NIL
	
elseif !empty(httpGet->DU) // Drill Up - fecha um drilldown na tabela, tem que tirar o attributo do drill params
	HttpGet->DL := dwVal(HttpGet->DL) - 1
	oConsulta:DrillParms(HttpGet->DL, URLDecode(httpGet->DU), , .T.)
#ifdef DWCACHE	
#else
	oConsulta:UpdCache()
#endif
	// verifica se é para esconder as colunas de drilldown (-1 é equivalente a esconder)
	If !(oSigaDW:WidthColDD() == -1)
		return ""
	EndIf
	
elseif !empty(httpGet->DR) // Drill Restore - abre um drilldown anteriormente aberto na tabela, só é necessário atualizar a lista de drillparams pois os dados/html já estão na tela
	HttpGet->DL := dwVal(HttpGet->DL) - 1
	oConsulta:DrillParms(HttpGet->DL, URLDecode(httpGet->DR))
#ifdef DWCACHE	
#else
	oConsulta:UpdCache()
#endif
	return ""
endif

if oConsulta:IsValid()
	if isNull(httpPost->ctrlExec, CHKBOX_OFF) == CHKBOX_ON
		oConsulta:updFromPost()
	endif
	if !isNull(httpGet->axisY) .or. !isNull(httpGet->axisX)
		oConsulta:updFromGet()
	endif
	if !isNull(httpGet->hideAtt) .and. !empty(httpGet->hideAtt)
		oConsulta:hideAtt(httpGet->hideAtt)
	endif
	
	if !empty(isNull(httpGet->Acao, ""))
  		if httpGet->Acao == "savecfg"
			oConsulta:AttWidth(dwToken(HttpGet->AttW, ","))
			oConsulta:IndWidth(dwToken(HttpGet->IndW, ","))
			oConsulta:PanWidth(dwVal(HttpGet->PanW))
			oConsulta:doSave()
	  	elseif httpGet->Acao == "restorecfg"
			nDD := oConsulta:DrillOrig()
			oConsulta:doLoad(.f.)      
			oConsulta:DrillLevel(nDD)
			oConsulta:AttWidth({})
			oConsulta:IndWidth({})
			oConsulta:PanWidth(0)
			oConsulta:ShowAllAtt()
			oConsulta:doSave()
	  	else
	 		nLenInd := len(oConsulta:Indicadores())
	 		// retira indicadores adicionados por serem utilizados em campos virtuais
			aEval(oConsulta:Indicadores(), {|xElem,i| iif(xElem:Ordem() < 0, nLenInd--, NIL)})
			%>
			<%= showQueryPage(oConsulta, httpGet->Acao, len(oConsulta:DimFieldsY()), nLenInd)%>
 		<% endif
	else 
		DWPainelQuery(.f., nIDCons, nType, oConsulta)
	endif
/*Verifica se foi solicitada a construção da consulta [ID=0].*/	
elseif (oConsulta:ID() == 0) 
%>
	<%=buildAutoAction(AC_QUERY_EXEC,, STR0005 /*"A consulta solicitada não está definida no datawarehouse."*/ )%>
<%
Else
%>
	<%=buildAutoAction("js:buildQuery(cParams)", {{ "id", oConsulta:ID()} , { "type", oConsulta:_Type() }}, STR0001 + "<br>" + STR0002)%> <%= /*"Iniciando processo de sumarização." # "Favor aguardar..."*/%>
	<%=tagJS()%>
	function buildQuery(acParams)
	{                                       
		<%if oConsulta:IsWrong()%>
			var oDiv = getElement("divWarningSrv");
			oDiv.innerHTML = "<%=STR0003%>" //###"A definição contem erros.<br>Favor revisar a definição, incluindo filtros, alertas e campos virtuais.";
		<%else%>
 			doLoad(prepParam(acParams, "action", '<%=AC_BUILD_QUERY%>'), "_window", null, "winAcomp");
 		<%endif%>
	}
	</script>
<%
endif
%>