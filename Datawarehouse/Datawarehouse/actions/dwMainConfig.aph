<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwMainConfig - Configuração de DW
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 25.11.05 | 0548-Alan Candido | Versão 3
// 31.10.08 | 0548-Alan Candido | FNC 00000004062/2008 (8.11) e 00000004221/2008 (9.12)
//          |                   | Implementação da seleção da conexão para sincronização
//          |                   | de usuários.
// 09.12.08 | 0548-Alan Candido | FNC 00000149278/811 (8.11) e 00000149278/912 (9.12)
//          |                   | Tradução de strings
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwMainConfig.ch"

local lSendMail := .f.,lAutoClose := .f., lRename := .f.
local aFields := {}, cOldName, cSched := ""
local aIconeList := dwComboOptions(DW_ICONES)
local aTabComp, aTabGroup := {}
local aAux, aUsers, cMsgClose := nil
local oConexao := oSigaDW:Connections()
local aConexoes := {}

if DwVal(HttpGet->oper) == OP_SUBMIT
	oSigaDW:Notify({ HttpPost->edNotifyName, HttpPost->edNotifyMail})
	oSigaDW:RecLimit(dwVal(HttpPost->edRecLimit))
	oSigaDW:RowColor(HttpPost->edRowColor)
	oSigaDW:ShowFilter(HttpPost->edShowFilter)
	oSigaDW:UsePanels(HttpPost->edUsePanels)
	oSigaDW:ShowPageNav(HttpPost->edShowPageNav)
	oSigaDW:UserURL(dwval(HTTPPOST->edUserURL))
	oSigaDW:QueryRefresh(dwval(HTTPPOST->edQueryRefresh))
	if dwVal(HttpPost->edBlocked) != oSigaDW:Blocked() .or. ;
		!(HttpPost->edLiberacao == oSigaDW:LiberacaoPrevista()) 
  	lSendMail := .t.
	endif
	oSigaDW:Blocked(dwVal(HttpPost->edBlocked))
	oSigaDW:LiberacaoPrevista(HttpPost->edLiberacao)
	oSigaDW:NotifyUsers(HttpPost->edNotifyUsers == "2")
	oSigaDW:ShowMsg(HttpPost->edShowMsg == "2")
	oSigaDW:LogAct(HttpPost->edLogAct == "2")
	oSigaDW:LogImpExp(HttpPost->edLogImpExp == "2")
	oSigaDW:EnablePaging(HttpPost->edEnablePaging == "2")
	oSigaDW:ExpNotify(HttpPost->edExport == "2")
	oSigaDW:UsrProtheus(HttpPost->edImpUsr == "2")
	oSigaDW:UsrOnline(HttpPost->edUsrOnline == "2") 	
	//Configuração de exibição de QBE em todos os browsers.
	oSigaDW:ShowQbe(HttpPost->edShowQbe == "2")  
	//Configuração de execução automárica de filtros nos browsers.
	oSigaDW:AutoQbe(HttpPost->edAutoQbe) 
	//Configuração de exibição de data de atualização do cubo nas consultas
	oSigaDW:ShowCubeUpdate(HttpPost->edShowCubeUpdate == "2")

	oSigaDW:TypeCon(HttpPost->edTypeCon == "2")

	//Configuração de exibição dos indicadores da montagem da consulta em ordem alfabética.
	oSigaDW:sortMeasure(HttpPost->edSortMeasure == "2")
			
	lSendMail := lSendMail .and. oSigaDW:NotifyUsers()	
	oSigaDW:Excel(HttpPost->edExcel)
	oSigaDW:UsrConnector(dwVal(HttpPost->edId_connect))
	oSigaDW:WidthColDD( iif(DwVal(HttpPost->edWidthColDD) == 0, DwVal(HttpPost->edDefWidthColDD), DwVal(HttpPost->edWidthColDD)) )
	oSigaDW:SaveCfg() 
	oSigaDW:Log(STR0001) //"Configurações/parâmetros modificados"
	if lSendMail                   
		sendMail()
		oSigaDW:Log(STR0002) //"Usuário notificados que o DW esta em manutenção"
		cMsgClose := STR0002
	endif       
	if !(upper(oSigaDW:DWCurr()[DW_NAME]) == upper(HttpPost->edNome)) .or. ;
	   !(oSigaDW:DWCurr()[DW_DESC] == HttpPost->edDescricao) .or. ;
	   !(oSigaDW:DWCurr()[DW_ICONE] == HttpPost->edIcone)
		cOldName := oSigaDW:DWCurr()[DW_NAME] + "-" + oSigaDW:DWCurr()[DW_DESC]
		if oSigaDW:RenameDW(HttpPost->edNome, HttpPost->edDescricao, HttpPost->edIcone)
			oSigaDW:SelectDW(HttpPost->edNome)
			oSigaDW:Log(DWConcatWSep(" ", { DWFormat(STR0003, {cOldName, oSigaDW:DWCurr()[DW_NAME] + "-" + oSigaDW:DWCurr()[DW_DESC] })}) ) //"Datawarehouse renomeado de <b>[@X]</b> para <b>[@x]</b>"
			lRename := .t.
		else
			DWRaise(ERR_002, SOL_000, STR0004) //"Já existe um <i>Datawarehouse</i> com este nome"
		endif 
	endif
	lAutoClose := .t.
endif

aTabComp := {}
makeSubTitle(aTabComp, STR0005) //"Identificação"
makeField(aTabComp, 'edNome'     , STR0006    , .T., 'C', 15, 0,,oSigaDW:DWCurr()[DW_NAME], .t.) //'Nome'
makeField(aTabComp, 'edDescricao', STR0007    , .T., 'C', 50, 0,,oSigaDW:DWCurr()[DW_DESC]) //'Descrição'
makeCombo(aTabComp, 'edIcone'    , STR0008    , .T., aIconeList,,oSigaDW:DWCurr()[DW_ICONE]) //'Icone'
// cria a aba tabeladas
makeChildTabbed(aTabGroup, "abaIdentificacao", STR0005, aTabComp) //"Identificação"

aTabComp := {}
makeSubTitle(aTabComp, STR0009) //"Em caso de erro notificar"
makeField(aTabComp, "edNotifyName", STR0006, .T., "C", 30, 0,, oSigaDW:Notify()[1]) //"Nome"
makeDotField(aTabComp, 	'edNotifyMail', STR0011	, .T., "C", 255, 0,,oSigaDW:Notify()[2],,  "doSendTestMail()", .T.) //"e-Mail"  
// cria a aba tabelada
makeChildTabbed(aTabGroup, "abaNotificaErro", STR0012, aTabComp) //"Erro"

aTabComp := {}
makeSubTitle(aTabComp, STR0013) //"Visualização de dados e outros"
makeField(aTabComp, "edRecLimit", STR0014, .f., "N", 3, 0,, oSigaDW:RecLimit()) //"Máx. Registros por página (seleção)"

aAux := DwDetail(TAB_USER, "U", {|| {allTrim(nome) + " (" + allTrim(login) + ")", id, nome}},"tipo" , 2, -1)
aAux := aSort(aAux,,, { |x,y| x[1] < y[1]})
aUsers := { { "", STR0060 } } //###"Não definido"
aEval(aAux, {|aElem| aAdd(aUsers, aElem)})
makeCombo(aTabComp, "edUserURL", STR0056, .f., aUsers,, oSigaDW:UserURL()) //"Usuário para acesso via URL"
makeField(aTabComp, "edQueryRefresh", STR0059, .f., "N", 5, 0,, oSigaDW:QueryRefresh()) //"Tempo de atualização da consulta (em minutos)"
makeRadioField(aTabComp, "edShowQbe", STR0074 , .f., ,iif(oSigaDW:showQbe(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Exibir QBE em browser"###"Não"###"Sim"
makeCombo(aTabComp, "edAutoQbe",  STR0075, .f., ; 		//"Aplicar filtro QBE automaticamente:"
							  { { STR0076, "0" }, ;		//"Não aplicar"
					  	   		{ STR0077, "1" },; 		//"Aplicar"
					  	   		{ STR0078, "2" } }, ,;	//"Aplicar e Apresentar opções de pesquisa aberta"
					  	   		 oSigaDW:AutoQbe())      
makeRadioField(aTabComp, "edShowCubeUpdate", STR0085 , .f., ,iif(oSigaDW:showCubeUpdate(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Exibir na consulta a data de atualização do cubo"
makeRadioField(aTabComp, "edSortMeasure", STR0086, .F., ,iif(oSigaDW:sortMeasure(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Ordenar indicadores na montagem das consultas"

// cria a aba tabelada
makeChildTabbed(aTabGroup, "abaDados", STR0018, aTabComp) //"Visualização"

aTabComp := {}
makeSubTitle(aTabComp, STR0019) //"Propriedades 'Tabela' (Consulta)"
makeCombo(aTabComp, "edShowFilter", STR0021, .f., ; //"Filtros/Seleção"
					{ { STR0022, "0" }, ; //"Não apresentar"
					  { STR0023, "1" },; //"Apresentar filtro, se não aplicado"
					  { STR0024, "2" } }, , oSigaDW:ShowFilter()) //"Apresentar seleção, se não houver filtro"
makeCombo(aTabComp, "edRowColor", STR0025, .f., ; //"Cor de linha"
					{ { STR0026, "1" }, ; //"Única"
					  { STR0027, "2" } }, , oSigaDW:RowColor()) //"Alternada"
makeCombo(aTabComp, "edUsePanels", STR0028, .f., ; //"Usar painel"
					{ { STR0029, "0" }, ; //"Simples"
					  { STR0030, "1" } }, , oSigaDW:UsePanels()) //"Duplo"
makeCombo(aTabComp, "edExcel", STR0031, .f., ; //"Integração Excel"
					{ { STR0032, "0" }, ; //"Não habilitar"
					  { STR0033, "1" }, ;  //"Habilitar, por consulta"
					  { STR0034, "2" } }, , oSigaDW:Excel()) //"Habilitar, todas as consultas"
makeCombo(aTabComp, "edShowPageNav", STR0070, .f., ; //"Apresentar navegação"
					{ { STR0038, PAGE_NAV_NAO }, ; //"Não"
					  { STR0071, PAGE_NAV_SIM } }, , oSigaDW:ShowPageNav()) //"Sim, no rodapé da consulta"
 
If !(isFirefox())
	makeRadioField(aTabComp, "edWidthColDD", STR0080, .f., , iif(oSigaDW:WidthColDD() > 0, "", DwStr(oSigaDW:WidthColDD())), { { STR0081, "0" }, { STR0082, "-1" }, { STR0083 + ": " + makeField(NIL, "edDefWidthColDD", "", .F., 'N', 5, 0, , iif(oSigaDW:WidthColDD() > 0, DwStr(oSigaDW:WidthColDD()), ""), .F.), "" } } ) //###"Tamanho das colunas de DrillDown"###"Automático"###"Esconder"###"Definir"
	evtField(aTabComp, "edWidthColDD", "onClick")
EndIf

makeRadioField(aTabComp, "edTypeCon", STR0087, .f., ,iif(oSigaDW:TypeCon(), "2", "1"), { { STR0088, "1" }, { STR0089, "2" } } ) // "Largura das colunas determinado pelo tamanho:" // "Do Maior conteúdo contido nas colunas. (Default) " // " Dos Indicadores e com base na Descrição."

// cria a aba tabelada
makeChildTabbed(aTabGroup, "abaProprTabela", STR0035, aTabComp) //"Tabela"

aTabComp := {}
makeSubTitle(aTabComp, STR0036 + "<small><small>"+STR0054 + "</small></small>") //"DW em manutenção"##"(Esta configuração afetara todos os datawarehouses)"
makeCombo(aTabComp, "edBlocked", STR0037, .f., ; //"Permitir acesso"
					{ { STR0055, "0" }, ;    //"A todo"
					  { STR0039, "1" }, ;    //"Acesso somente a administradores"
					  { STR0040, "2" } }, , oSigaDW:Blocked()) //"Acesso somente ao usuário DWADMIN"
makeField(aTabComp, "edLiberacao", STR0041, .f., "C", 30, 0,, oSigaDW:LiberacaoPrevista()) //"Previsão de liberação"
makeRadioField(aTabComp, "edNotifyUsers", STR0042, .f., ,iif(oSigaDW:NotifyUsers(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } }) //"Notificar Usuários"###"Não"###"Sim"
// cria a aba tabelada
makeChildTabbed(aTabGroup, "abaDwManut", STR0044, aTabComp) //"Manutenção"

aTabComp := {}
makeSubTitle(aTabComp, STR0045) //"Opções"      

makeRadioField(aTabComp, "edShowMsg", STR0046, .f., ,iif(oSigaDW:ShowMsg(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Exibir mensagens"###"Não"###"Sim"
makeRadioField(aTabComp, "edLogAct", STR0047, .f., ,iif(oSigaDW:LogAct(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Log ações de usuários"###"Não"###"Sim"
makeRadioField(aTabComp, "edLogImpExp", STR0072, .f., ,iif(oSigaDW:LogImpExp(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Log de Importação/Exportações"###"Não"###"Sim"
makeRadioField(aTabComp, "edExport", STR0049, .f., ,iif(oSigaDW:ExpNotify(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Notificar exportações"###"Não"###"Sim"
makeRadioField(aTabComp, "edUsrOnline", STR0057, .f., ,iif(oSigaDW:UsrOnLine(), "2", "1"), { { STR0038, "1" }, { STR0043+"*", "2" } } ) //"Monitorar usuários on-line"###"Não"###"Sim"

makeAttention(aTabComp, "*"+STR0058) //"O correto monitoramento é enfluenciado pelo tempo-limite da sessão (SessionTimeOut)"

makeRadioField(aTabComp, "edImpUsr", STR0052, .f., ,iif(oSigaDW:UsrProtheus(), "2", "1"), { { STR0038, "1" }, { STR0043, "2" } } ) //"Usa cadastro de usuário do Protheus"###"Não"###"Sim"
makeField(aTabComp, "edSched"      , STR0053, .F., 'C', 15, 0,,"*******") //		#"Agendar sincronização"
evtField(aTabComp, "edSched"       , "_dot")     

// lista de conexões (SOMENTE SX)
aAdd(aConexoes, { "(localhost)", -1 })
aAdd(aConexoes, { "-SX", 0})
oConexao := oSigaDW:Connections()
oConexao:Seek(2)

while !oConexao:Eof() .and. oConexao:value("id_dw") == oSigaDW:DWCurrID()
  if oConexao:value("TIPO") == TC_AP_SX
    aAdd(aConexoes, { oConexao:value("nome"), oConexao:value("id") })
	endif
	oConexao:_Next()
enddo
makeCombo(aTabComp, "edId_connect", STR0079, .F., aConexoes,, oSigaDW:UsrConnector()) 

// cria a aba tabelada
makeChildTabbed(aTabGroup, "abaGeneral", STR0045, aTabComp) //"Opções"

// cria a aba principal contendo as abas acima criadas
makeTabbedPane(aFields, "abaMainConfig", aTabGroup)

%>
<%= buildForm('frmConfigDW', STR0050, AC_REC_MANUT, OP_SUBMIT, , aFields) %> <%=/*'Configuração'*/ %>

<% if lRename %>
	<%=buildAutoAction(AC_START_DW,,STR0051)%> <%= /*"Favor efetuar o login novamente"*/ %>
<% elseif lAutoClose %>
	<%= buildAutoClose(, cMsgClose) %>
<% endif %>

<%= tagJS() %>
function frmConfigDW_valid(oSender) {
	var returno = true;
	
	if (getElement("edWidthColDD")[2].checked) {
		if (getElement("edDefWidthColDD", oSender).value == "" || !(getElement("edDefWidthColDD", oSender).value > 0)) {
			alert("<%= STR0084 %>"); //###"Por favor, defina um valor válido para o tamanho das colunas de Drilldown"
			getElement("edDefWidthColDD", oSender).focus();
			returno = false;
		}
	}
	
	return returno;
}

function u_bodyonload() {
	initAba();
	<% If oSigaDW:WidthColDD() < 0.1 %>
		enableElement(getElement("edDefWidthColDD"), true);
	<% EndIf %>
}

function edWidthColDD_onClick(aoRadio) {
	if (aoRadio.value == "") {
		enableElement(getElement("edDefWidthColDD"), false);
		getElement("edDefWidthColDD").focus();
	} else {
		enableElement(getElement("edDefWidthColDD"), true);
	}
}

function edSched_dot()
{
	doLoad(<%=makeAction(AC_IMP_USR_SCHED, { { "obj", OBJ_USER }, { "id_dsn", oSigaDW:DsnUsrSiga() } })%>, "_window")
}
//Envia e-mail para validação da conta cadastrada para o recebimento de notificações. 
function doSendTestMail()
{      
	var lResult = confirm("<%=STR0073%>"); //'Deseja enviar e-mail de teste?' 
	var oNome 	= getElement('edNotifyName');
	var oMail 	= getElement('edNotifyMail');           
           
    //Valida o endereço de e-mail.                                 
	if (!(validMail(oMail.value))){
		defineFieldMessage(oMail, getMailValidMsg());   
		oMail.focus();
		return;
	 }else{
		if (oMail.msgError != null){
			//Elimina a mensagem de erro criada para o campo. 
			oMail.msgError = null; 			
			//Define cor de borda e fundo customizada.       		 
			oMail.style.borderColor 	= '#000000';//Borda Preta.
			oMail.style.backgroundColor = '#F4F4F4';//Fundo ZebraOn.
		} 	 
	 }
			
	if (lResult){	
  	      showWait();     	      
 	      //Envia uma requisição e recebe a reposta através da divAuxiliarBrowser.
 	      doRequestData(prepURL(<%=makeAction(AC_TEST_MAIL) %> +"&user="+oNome.value+"&mail="+oMail.value ), getElement('divAuxiliarBrowser'), hideWait);
	}
}  
</script>
<%

return __Response

static function sendMail()
	local aText := {}
	local cSubject, cDest := ""
	local oTabUser := oUserDW:Table()

	aAdd(aText, STR0061) //###"Sr. Usuário"
	aAdd(aText, "")
	aAdd(aText, STR0062 + " http://" + getWebHost() + ",") //###"Comunicamos que o SIGADW, acessado através da URL
	if oSigaDW:Blocked() == 0
		cSubject := STR0068 //###"Acesso ao SIGADW liberado"
		aAdd(aText, STR0063) //###"encontra-se a disposição."
	else
		cSubject := STR0069 //###"Acesso ao SIGADW com restrições"
		aAdd(aText, STR0064 + " " + oSigaDW:LiberacaoPrevista()) //###"encontra-se em manutenção, com previsão de liberação do acesso"
		aAdd(aText, "")
		aAdd(aText, STR0065) //###"Grato pela compreensão."
	endif
	aAdd(aText, "")
	aAdd(aText, "")
	aAdd(aText, "")
	aAdd(aText, STR0066) //###"Atenciosamente,"
	aAdd(aText, "")
	aAdd(aText, "")
	aAdd(aText, STR0067) //###"Administração do SIGADW"

	oTabUser:SavePos()
	oTabUser:goTop()
	
	while !oTabUser:eof()
		if oTabUser:value("tipo") == "U"
			if oSigaDW:Blocked() == 0 .or. ;
				(oSigaDW:Blocked() == 1 .and. !oTabUser:value("admin")) .or. ;
				(oSigaDW:Blocked() == 2 )
				cDest := cDest + oTabUser:value("email", .t.) + ";"
			endif
		endif
		oTabUser:_next()
	enddo

	oTabUser:RestPos()   
	DWStartJob(JOB_SENDMAIL, { cSubject, dwConcatWSep("<br>"+CRLF, aText), , ,,,,cDest })
return