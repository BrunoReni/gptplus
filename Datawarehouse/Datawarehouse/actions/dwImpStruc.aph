<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwImpStruc - Importação de estruturas de arquivos
// ---------+---------------------+------------------------------------------------------
// Data     | Autor               | Descricao
// ---------+---------------------+------------------------------------------------------
// 26.10.05 | 0548-Alan Candido   | Versão 3   
// --------------------------------------------------------------------------------------
// 01.07.08 | 3174-Valdiney GOMES | Alteração na js function searchElements para que os
//          |                     | resultados da pesquisa realizada no textfield "edViewName"									
//          |                     | respeite o tipo definido no combobox "edViewType"
// 05.05.09 | 0548-Alan Candido   | FNC 00000009956/2009
//          |                     | Adequação de processo de importação de estruturas 
//          |                     | para uso em ODBC genérico
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "DWDimManutConst.ch"
#include "dwCubManutConst.ch"
#include "dwImpStruc.ch"

// indices de acesso a HttpSession->DWImpStruc
#define ID_SIZE         16 // tamanho do array HttpSession->DWImpStruc
#define ID_OBJ           1
#define ID_ID_OBJ        2
#define ID_TIPO          3
#define ID_SERVIDOR      4
#define ID_TIPOCONEXAO   5
#define ID_TIPOBANCO     6
#define ID_ALIAS         7
#define ID_AMBIENTE      8
#define ID_EMPRESA       9
#define ID_FIL          10
#define ID_CAMINHO      11
#define ID_ALIASTAB     12
#define ID_ALIASTYPE    13
#define ID_LISTFIELDS   14
#define ID_SELECTFIELDS 15
#define ID_ISTOPCONN    16

local oDS := oSigaDW:Connections()
local oObj, oAtt, cCaptionObj, cTitle := STR0001 //'Importação de estrutura'
local aFields := {}, aField
local aConexoes := {}, aButtons := {}
local cTipoOld := "", cAux, cJS
local cServidor, cTipoConexao, cTipoBanco, cAlias, cTipo
local cAmbiente, cEmpresa, cFil, cCaminho
local cAliasTab := "", cTitulotab := ""
local aParms, aRetJob, aItens := {}, aODBC := {}
local nInd, lListaCpos := .f.
local aTipoCpo, cMask, cIcone
local aCols := {}, aBefFields := {}
local aDirectory, nIDConnect, cIndHex

if valtype(HttpSession->DWImpStruc) == "U"
	HttpSession->DWImpStruc := array(ID_SIZE)
endif

HttpGet->dw_step := dwVal(HttpGet->dw_step)

if HttpGet->dw_step == 0
	HttpSession->DWImpStruc[ID_ID_OBJ] := dwVal(HttpGet->Id)
	HttpSession->DWImpStruc[ID_OBJ] := HttpGet->Obj
endif

HttpSession->dw_step := HttpGet->dw_step + 1

if HttpSession->DWImpStruc[ID_OBJ] == "dim"
	oObj := initTable(TAB_DIMENSAO)
	cCaptionObj := STR0002 //"Dimensão"
else
	oObj := initTable(TAB_CUBESLIST)
	cCaptionObj := STR0003 //"Cubo"
endif

if !oObj:Seek(1, { HttpSession->DWImpStruc[ID_ID_OBJ] } )
	dwRaise(ERR_005, SOL_003, cCaptionObj + ' ID=' + dwStr(HttpSession->DWImpStruc[ID_ID_OBJ]))
endif

makeShow(aFields, 'edObjDesc',cCaptionObj, oObj:value("nome") + '-' + oObj:value("descricao"))

if HttpGet->dw_step == 0 // inicio do processo
	oDS:seek(2)

	aAdd(aConexoes, { STR0004, 0}) //"Informe manual"

	while !oDS:Eof() .and. oDS:value("id_dw") == oSigaDW:DWCurrID()
		if !(cTipoOld == oDS:value("TIPO"))
			cTipoOld := oDS:value("TIPO")
			if cTipoOld == TC_AP_DIRETO
				aAdd(aConexoes, { STR0005, 0}) //"-Direto"
			elseif cTipoOld == TC_TOP_CONNECT
				aAdd(aConexoes, {"-Top-Connect", 0})
			else
				aAdd(aConexoes, { "-SX", 0})
			endif
		endif
		aAdd(aConexoes, { oDS:value("nome"), oDS:value("id") })
		oDS:_Next()
	enddo			
              
	makeCombo(aFields, 'edConector', STR0006  , .T., aConexoes,,'') //'Conexão'   
	
elseif HttpGet->dw_step == 1 // preenche ou confirma os dados da conexão   

	HttpPost->edConector := dwVal(HttpPost->edConector)
	nIDConnect := iif (!(DwVal(HttpPost->edConector) == 0), DwVal(HttpPost->edConector), DwVal(HttpGet->edConector))
   
	if nIDConnect == 0
		makeShow(aFields, 'edConectorSel',STR0007, STR0004) //"Conector"###"Informe manual"
		cServidor   := ''
		cTipoConexao:= ''
		cTipoBanco  := ''
		cAlias      := ''
		cTipo       := ''
		cAmbiente   := ''
		cEmpresa    := ''
		cFil        := ''
		cCaminho	:= ''
		makeCombo(aFields, 'edTipo'  , STR0008  , .T.,; //'Tipo Conexão'
			 { { "Top-Connect", TC_TOP_CONNECT } , ;
			   { "SX", TC_AP_SX } ,;
			   { STR0009, TC_AP_DIRETO } ; //"Direto"
			 } ,,"")
	else  
	
		if !oDS:seek(1, { nIDConnect })
			dwRaise(ERR_005, SOL_003, 'Conector ID=' + dwStr(nIDConnect))
		endif
		cServidor   := oDS:value("server")
		cTipoConexao:= oDS:value("conex_srv")
		cTipoBanco  := oDS:value("banco_srv")
		cAlias      := oDS:value("alias")
		cTipo       := oDS:value("tipo")
		cAmbiente   := oDS:value("ambiente")
		cEmpresa    := oDS:value("empresa")
		cFil        := oDS:value("filial")
		cCaminho	:= oDS:value("caminho")
        
		// Atualiza a Dimensao com a conexao selecionada
		oObj:update({{"impCon", nIdConnect}})

		makeHidden(aFields, 'edTipo'      , cTipo)
		makeShow(aFields, 'edConectorSel',STR0007, oDS:value("nome")+'-'+oDS:value("descricao")) //"Conector"
		
    endif

	makeHidden(aFields, 'edIDConector', nIDConnect)
	makeField(aFields, 'edServidor'   , STR0010, HttpPost->edConector <> 0, 'C', 50, 0,,cServidor) //'Servidor/Porta'
   
	if cTipo == TC_TOP_CONNECT .or. empty(cTipo)
		aTipoConexao := dwComboOptions(TIPO_CONEXAO)
		aTipoBanco := dwComboOptions(TIPO_BANCO)
		makeCombo(aFields, 'edTipoConexao', STR0008, HttpPost->edConector <> 0, aTipoConexao,,cTipoConexao) //'Tipo Conexão'
		makeCombo(aFields, 'edTipoBanco'  , STR0011, HttpPost->edConector <> 0, aTipoBanco,,cTipoBanco) //'Tipo banco'
		makeField(aFields, 'edAlias'      , STR0012, HttpPost->edConector <> 0, 'C', 20, 0,,cAlias) //'Alias'
	endif  
	
	if cTipo == TC_AP_SX  .or. cTipo == TC_AP_DIRETO .or. empty(cTipo)
		makeField(aFields, 'edAmbiente', STR0013, HttpPost->edConector <> 0, 'C', 20, 0,,cAmbiente) //'Ambiente'
		makeField(aFields, 'edEmpresa' , STR0014, HttpPost->edConector <> 0, 'C',  2, 0,,cEmpresa) //'Empresa'

#ifdef VER_P10
		makeField(aFields, 'edFil'     , STR0015, HttpPost->edConector <> 0, 'C',  2, 0,,cFil) //'Filial'
#else 
		makeField(aFields, 'edFil'     , STR0015, HttpPost->edConector <> 0, 'C',  12, 0,,cFil) //'Filial'
#endif

	endif    
	
	if cTipo == TC_AP_DIRETO .or. empty(cTipo)
		makeField(aFields, 'edCaminho', STR0016       , HttpPost->edConector <> 0, 'C', 30, 0,,cCaminho) //'Caminho'
	endif
	    	
	makeField(aFields, 'edAliasTab', iif(cTipo == TC_AP_DIRETO, STR0056 /*'Nome do arquivo'*/, STR0017 /*'Alias Tabela'*/), .F., 'C', 20, 0,,cAliasTab) 			
	  
	If !( cTipo == TC_AP_DIRETO .or. cTipo = TC_TOP_CONNECT )
		makeField(aFields, 'edTituloTab', STR0018 /*'Titulo Tabela'*/ , .F., 'C', 20, 0,, cTituloTab) 		
	EndIf     

	// substitui o botão "anterior" por este que redirecionará para o dw_step 0
	makeButton(aButtons, BT_PREVIOUS, , AC_IMPORT_STRUC, , { { "obj", HttpSession->DWImpStruc[ID_OBJ] }, { "id", DwStr(HttpSession->DWImpStruc[ID_ID_OBJ]) }, { "dw_step", --HttpGet->dw_step }, {  "edConector", HttpPost->edIDConector } })
	
elseif HttpGet->dw_step == 2 // obtem a lista de tabelas
	
	cTitle := STR0019 //"Selecione uma tabela"
	
	HttpSession->DWImpStruc[ID_TIPO    ] := HttpPost->edTipo
	HttpSession->DWImpStruc[ID_SERVIDOR] := HttpPost->edServidor
	
	if HttpPost->edTipo == TC_TOP_CONNECT  
	
		HttpSession->DWImpStruc[ID_TIPOCONEXAO] := HttpPost->edTipoConexao
		HttpSession->DWImpStruc[ID_TIPOBANCO  ] := HttpPost->edTipoBanco
		HttpSession->DWImpStruc[ID_ALIAS      ] := HttpPost->edAlias

		aParms := {}
		aAdd(aParms, 1)
		aAdd(aParms, HttpPost->edServidor)
		aAdd(aParms, HttpPost->edTipoConexao)
		aAdd(aParms, HttpPost->edTipoBanco)
		aAdd(aParms, HttpPost->edAlias)  
		
		if empty(HttpPost->edAliasTab)
			aAdd(aParms, NIL)       	
		else
			aAdd(aParms, { 1, HttpPost->edAliasTab } )
		endif
			
		aRetJob := DWWaitJob(JOB_BASETOP, aParms)

		if valType(aRetJob) == "A" .AND. len(aRetJob) > 0
		
			for nInd := 1 to len(aRetJob)   
			                             
				if aRetJob[nInd, 1] == DBO_TABLE
					cIcone := iif(aRetJob[nInd,4],"table_tc.gif","table.gif")
				else
					cIcone := "view.gif"
				endif   
				
				aAdd(aItens, makeListItem(AC_IMPORT_STRUC, aRetJob[nInd,2], aRetJob[nInd,3], cIcone, { {"dw_step", 3}, {"alias", aRetJob[nInd,2]}, {"type", aRetJob[nInd, 1]}, { "tc", aRetJob[nInd,4] }}))
			next
		elseif HttpSession->DWImpStruc[ID_TIPOBANCO] == "ODBC"  
		/*"Conexão ODBC"*/                      
		/*"Em função das conexões ODBC serem genéricas, não foi possível obter os dados necessários para recuperar os atributos."*/ 
		/*"Favor complementar o comando abaixo.*/
        makeWarning(aODBC, STR0057 + "<br><blockquote>" + STR0058 + " " + STR0059 + "</blockquote>") 
        makeShow(aODBC   , "edSelect" , STR0060 /*"Comando"*/    , "select * from")
		    makeField(aODBC  , "edFrom"   , STR0061 /*"Complemento"*/, .t., "C", 30, 0,,cAlias)
        makeWarning(aODBC, STR0062 /*"Observação*/+"<br><blockquote>" + ;
                           STR0063 /*"Devido a variedade de mecanismos e desenvolvedores de conexões ODBC, consulte a documentação disponibilizada pelo fornecedor ou em fontes confiáveis, para obter informações tais como:"*/ + ;
                           "<li>" + STR0064 /*"Limitações"*/+"</li><li>" + STR0065 /*"Formatos"*/+"</li><li>" + STR0066 /*"Exceções*/+"</li><li>" + STR0067 /*"Procedimentos para acesso (leitura)*/+"</li><li>" + STR0068 /*"E outras informações relevantes*/+"</li></blockquote>")
		endif
		
	elseif HttpPost->EdTipo == TC_AP_SX 
	
		HttpSession->DWImpStruc[ID_AMBIENTE] := HttpPost->edAmbiente
		HttpSession->DWImpStruc[ID_EMPRESA ] := HttpPost->edEmpresa
		HttpSession->DWImpStruc[ID_FIL     ] := HttpPost->edFil
		HttpSession->DWImpStruc[ID_CAMINHO ] := HttpPost->edCaminho

		aParms := {}
		aAdd(aParms, HttpPost->edServidor)
		aAdd(aParms, HttpPost->edAmbiente)
		aAdd(aParms, HttpPost->edEmpresa)
		aAdd(aParms, HttpPost->edFil)
		aAdd(aParms, "SX2")
		aAdd(aParms, { "X2_CHAVE", "X2_ARQUIVO", "X2_NOME" })
		
		if empty(HttpPost->edAliasTab)
			aAdd(aParms, { 0, "" })
		else
			aAdd(aParms, { 1, HttpPost->edAliasTab } )
		endif 
		
		if empty(HttpPost->edTituloTab)
			aAdd(aParms, NIL)
		else
			aAdd(aParms, upper(DWStr(HttpPost->edTituloTab,.t.))+" $ upper(X2_NOME)" ) //filter
		endif
			
		aRetJob := DWWaitJob(JOB_IMPORTSIGA, aParms)
		
		if valType(aRetJob) == "A"
			for nInd := 1 to len(aRetJob)
				aAdd(aItens, makeListItem(AC_IMPORT_STRUC, aRetJob[nInd,1], aRetJob[nInd,3], "table.gif", { {"dw_step", 3}, {"alias", aRetJob[nInd,1]}, {"type", DBO_TABLE}}))
			next
		endif
		
	elseif HttpPost->EdTipo == TC_AP_DIRETO	
	
		HttpSession->DWImpStruc[ID_AMBIENTE] := HttpPost->edAmbiente
		HttpSession->DWImpStruc[ID_EMPRESA ] := HttpPost->edEmpresa
		HttpSession->DWImpStruc[ID_FIL     ] := HttpPost->edFil
		HttpSession->DWImpStruc[ID_CAMINHO ] := HttpPost->edCaminho	
 
		cCaminho := isNull(HttpPost->edCaminho, "")  
		
		if empty(cCaminho)
			cCaminho := isNull(HttpGet->Dir, "")
		else
			cCaminho :=	dwFixPath(cCaminho)
		endIf
		
		aParms := {}
		aAdd(aParms, 11)     				//Tipo 11 - Recupera a lista de arquivos
		aAdd(aParms, HttpPost->edServidor)  //Server
		aAdd(aParms, HttpPost->edAmbiente)  //Environment
		aAdd(aParms, cCaminho)        		//Path  
		aAdd(aParms, "")		            //Table 
		aAdd(aParms, "")					//Empresa
		aAdd(aParms, "")					//Filial
		aAdd(aParms, HttpPost->edAliasTab)	//Filter
				
		aDirectory := DWWaitJob(JOB_BASEDIR, aParms)
        
		if len(aDirectory) == 0
			aDirectory := { { "<b><big>" + STR0020 + "</big></b>", 0, "", "" } } //" inexistente"
		else
			for nInd := 1 to len(aDirectory)
				aAdd(aItens, makeListItem(AC_IMPORT_STRUC, aDirectory[nInd,1], DwStr(aDirectory[nInd,3]), "table.gif", { {"dw_step", 3}, {"alias", cCaminho + aDirectory[nInd,1]}, {"type", DBO_TABLE}}))
			next
		endif
		
	else
		dwRaise(ERR_003, SOL_002)
		
	endif
	
elseif HttpGet->dw_step == 3 // obtem a lista de campos
	
	cTitle := STR0021 //"Selecione os campos"
	if HttpSession->DWImpStruc[ID_TIPO] == TC_TOP_CONNECT .and. HttpSession->DWImpStruc[ID_TIPOBANCO] == "ODBC"
    HttpSession->DWImpStruc[ID_ALIASTAB] := HttpPost->edFrom
    HttpSession->DWImpStruc[ID_ISTOPCONN] := .f.
	else
    HttpSession->DWImpStruc[ID_ALIASTAB] := HttpGet->alias
    HttpSession->DWImpStruc[ID_ALIASTYPE] := HttpGet->type
    HttpSession->DWImpStruc[ID_ISTOPCONN] := HttpGet->tc == CHKBOX_ON
  endif
   
	if HttpSession->DWImpStruc[ID_TIPO] == TC_TOP_CONNECT
		aParms := {}
		aAdd(aParms, 2)
		aAdd(aParms, HttpSession->DWImpStruc[ID_SERVIDOR])
		aAdd(aParms, HttpSession->DWImpStruc[ID_TIPOCONEXAO])
		aAdd(aParms, HttpSession->DWImpStruc[ID_TIPOBANCO])
		aAdd(aParms, HttpSession->DWImpStruc[ID_ALIAS])
		aAdd(aParms, HttpSession->DWImpStruc[ID_ALIASTAB])
		aAdd(aParms, HttpSession->DWImpStruc[ID_ISTOPCONN]) //####TODO Verificar a indicação de tabela Top ou não
			
		aRetJob := DWWaitJob(JOB_BASETOP, aParms)
		asort(aRetJob, , , { |x, y| x[2] < y[2] } )
		lListaCpos := valtype(aRetJob) == "A"
		
	elseif HttpSession->DWImpStruc[ID_TIPO] == TC_AP_SX
		aParms := {}
		cAlias := HttpGet->Alias
		
		if !empty(cAlias)
			aAdd(aParms, HttpSession->DWImpStruc[ID_SERVIDOR])
			aAdd(aParms, HttpSession->DWImpStruc[ID_AMBIENTE])
			aAdd(aParms, HttpSession->DWImpStruc[ID_EMPRESA ])
			aAdd(aParms, HttpSession->DWImpStruc[ID_FIL     ])
			aAdd(aParms, "SX3")

			#ifdef SPANISH
				aAdd(aParms, { "X3_ORDEM", "X3_CAMPO", "X3_DESCSPA", "X3_TIPO", "X3_TAMANHO", "X3_DECIMAL", "X3_PICTURE"})
			#else
				#ifdef ENGLISH
					aAdd(aParms, { "X3_ORDEM", "X3_CAMPO", "X3_DESCENG", "X3_TIPO", "X3_TAMANHO", "X3_DECIMAL", "X3_PICTURE"})
				#else
					aAdd(aParms, { "X3_ORDEM", "X3_CAMPO", "X3_DESCRIC", "X3_TIPO", "X3_TAMANHO", "X3_DECIMAL", "X3_PICTURE"})
				#endif
			#endif			
			
			aAdd(aParms, { 1, cAlias } )				
			aRetJob := DWWaitJob(JOB_IMPORTSIGA, aParms)
		else
			aRetJob := nil
		endif
		lListaCpos := valtype(aRetJob) == "A"    
			
	elseif HttpSession->DWImpStruc[ID_TIPO] == TC_AP_DIRETO
		cAlias := HttpGet->Alias
		
		if !empty(cAlias)
			aParms := {}
			aAdd(aParms, 111)        									//Tipo	
			aAdd(aParms, HttpSession->DWImpStruc[ID_SERVIDOR])          //Servidor
			aAdd(aParms, HttpSession->DWImpStruc[ID_AMBIENTE])          //Environment
			aAdd(aParms, ParsePath(strTran(cAlias, "/", "\"), "PATH") )  //Path
			aAdd(aParms, ParsePath(strTran(cAlias, "/", "\"), "FILE"))	//Table				
			aAdd(aParms, nil)           								//Empresa 
			aAdd(aParms, nil)                                           //Filial
						
			aRetJob := DWWaitJob(JOB_BASEDIR, aParms)
			lListaCpos := valtype(aRetJob) == "A" .and. len(aRetJob) > 0
		else
			aRetJob := nil
		endif  
		
	endif
	
	makeShow(aFields, "edAliasTab", iif(HttpSession->DWImpStruc[ID_ALIASTYPE] == DBO_TABLE, STR0022, STR0023), HttpSession->DWImpStruc[ID_ALIASTAB]) //"Tabela"###"Visão"
  
  if lListaCpos                    
    
    //Exibe tipos de campos diferentes para dimensões e cubos
    If(HttpSession->DWImpStruc[ID_OBJ] == "dim")
        makeCombo(aBefFields, "edViewType", STR0024, .t., {{STR0025, "A"},{STR0026, "C"}, {STR0027, "N"}, {STR0028, "D"}, {STR0029, "O"}},,) //"Tipo de campo"###"Todos"###"Caracter"###"Numérico"###"Data"###"Outros"
    Else
       	makeCombo(aBefFields, "edViewType", STR0024, .t., {{STR0027, "N"}},,) //"Tipo de campo"###"Numérico"###
    EndIf
    
    evtField(aBefFields , "edViewType" , "onchange",,.t.)
    makeField(aBefFields, "edViewName", STR0054, "", "C", 30, 0,,"") //"Nome contem"
    evtField(aBefFields , "edViewName" , "onkeypress")
    evtField(aBefFields , "edViewName" , "onkeyup")

    aTipoCpo := dwComboOptions(ADVPL_EXT_FIELD_TYPES)
    makeEditCol(aCols, EDT_SHOW     , 'edID'       , STR0044, .t., 'C',  4, 0) //"#Seq."
    makeEditCol(aCols, EDT_CHECKBOX , 'edCheck'    , space(2),.f., 'L',  1, 0)
    makeEditCol(aCols, EDT_SHOW     , 'edNome'     , STR0037, .t., 'C', 15, 0) //"Nome"
    makeEditCol(aCols, EDT_SHOW     , 'edDescricao', STR0038, .t., 'C', 28, 0) //"Titulo"
    makeEditCol(aCols, EDT_SHOW     , 'edType'     , STR0039, .t., 'C', 15, 0) //"Tipo"
    makeEditCol(aCols, EDT_SHOW     , 'edTam'      , STR0040, .t., 'N',  5, 0) //"Tamanho"
    makeEditCol(aCols, EDT_SHOW     , 'edNDec'     , STR0041, .f., 'N',  5, 0) //"Decimais"

		HttpSession->DWImpStruc[ID_LISTFIELDS] := aRetJob
		
	  aTipoCpo := dwComboOptions(ADVPL_EXT_FIELD_TYPES)
    for nInd := 1 to len(aRetJob)
			aField := aRetJob[nInd]
			if (nPos := ascan(aTipoCpo, { |x| x[2] == aField[4]} )) > 0
				cAux := aTipoCpo[nPos][1]
			else  
				cAux := "("+STR0034+")" //"*Tipo não suportado"
			endif
      aAdd(aItens, { nInd, .f., aField[2], aField[3], cAux, aField[5], aField[6]})
		next
	endif
elseif HttpGet->dw_step == 4 // permite ajustes na lista de campos
	cTitle := STR0052 + "<small>" + STR0053 + "</small>" //"Efetue ajustes"###", se necessário"

	//Exibe tipos de campos diferentes para dimensões e cubos
	If(HttpSession->DWImpStruc[ID_OBJ] == "dim")
		aTipoCpo := dwComboOptions(ADVPL_EXT_FIELD_TYPES)
	Else
	   	aTipoCpo := {{STR0036, "?"},{STR0027, "N"}} //Numérico
	EndIf 
		
	makeEditCol(aCols, EDT_SHOW     , 'edID'       , STR0044, .t., 'C',  4, 0) //"#Seq."
	makeEditCol(aCols, EDT_EDIT     , 'edNome'     , STR0037, .t., 'C', 15, 0) //"Nome"
	makeEditCol(aCols, EDT_EDIT     , 'edDescricao', STR0038, .t., 'C', 30, 0) //"Titulo"
	makeEditCol(aCols, EDT_COMBO    , 'edType'     , STR0039, .t., 'P', 20, 0, aTipoCpo) //"Tipo"
	makeEditCol(aCols, EDT_EDIT     , 'edTam'      , STR0040, .t., 'N',  5, 0) //"Tamanho"
	makeEditCol(aCols, EDT_EDIT     , 'edNDec'     , STR0041, .f., 'N',  5, 0) //"Decimais"
	makeEditCol(aCols, EDT_EDIT     , 'edMascara'  , STR0042, .f., 'C', 30, 0, , .T., .F., .F.) //"Mascara"
	makeEditCol(aCols, EDT_CHECKBOX , 'edVisivel'  , STR0043, .f., 'L',  1, 0) //"Visivel"
	
	aRetJob := HttpSession->DWImpStruc[ID_LISTFIELDS]
	HttpSession->DWImpStruc[ID_SELECTFIELDS] := {}
	for nInd := 1 to len(aRetJob)
		cAux := "httpPost->edCheck" + dwInt2Hex(nInd, 4)
		if isNull(&(cAux), CHKBOX_OFF) == CHKBOX_ON
			aAdd(HttpSession->DWImpStruc[ID_SELECTFIELDS], nInd)
		endif
	next
	
	cJS := tagJS()
	for nInd := 1 to len(HttpSession->DWImpStruc[ID_SELECTFIELDS])
		aField := aRetJob[HttpSession->DWImpStruc[ID_SELECTFIELDS,nInd]]
		
		cJS += "function edMascara" + dwInt2Hex(nInd, 4) + "_dot(oSender)	{" + CRLF
		cJS += "	var oMask = getElement('edMascara" + dwInt2Hex(nInd, 4) + "',oSender.form);" + CRLF
		cJS += "	oMask.value = makeMask(getElement('edType" + dwInt2Hex(nInd, 4) + "', oSender.form).value, oSender.form.all['edTam" + dwInt2Hex(nInd, 4) + "'].value, getElement('edNDec" + dwInt2Hex(nInd, 4) + "',oSender.form).value);" + CRLF
		cJS += "}" + CRLF
         
        /*Alimenta o array de itens com os valores selecionados.
          O campo NOME é apresentado no formato em que será gravado, sempre em caixa alta.*/ 
		if HttpSession->DWImpStruc[ID_TIPO] == TC_AP_SX
		   aAdd(aItens, { aField[1], Upper(aField[2]), aField[3], aField[4], aField[5], aField[6], aField[7], .t.})  
		else
		   aAdd(aItens, { aField[1], Upper(aField[2]), aField[3], aField[4], aField[5], aField[6], cMask, .t.})
		endif
	next

	cJS += "</script>" 

elseif HttpGet->dw_step == 5 // grava a lista de atributos e prerara para seleção de chave
	if HttpSession->DWImpStruc[ID_OBJ] == "dim"
		oAtt := initTable(TAB_DIM_FIELDS)
	else
		oAtt := initTable(TAB_FACTFIELDS)
	endif                 
	HttpPost->_RowCount := dwVal(HttpPost->_RowCount)
	for nInd := 1 to HttpPost->_RowCount
		aValues := {}
		cIndHex := dwInt2Hex(nInd, 4)
		aAdd(aValues, { "nome"     , Upper(&("HttpPost->edNome" + cIndHex)) }) /*O campo NOME sempre será gravado em caixa alta.*/
		aAdd(aValues, { "descricao", &("HttpPost->edDescricao" + cIndHex) })
		aAdd(aValues, { "visible"  , &("HttpPost->edVisivel" + cIndHex)==CHKBOX_ON })
		aAdd(aValues, { "tipo"     , &("HttpPost->edType" + cIndHex) })
		aAdd(aValues, { "tam"      , dwVal(&("HttpPost->edTam" + cIndHex)) })
		aAdd(aValues, { "ndec"     , dwVal(&("HttpPost->edNDec" + cIndHex)) })
		aAdd(aValues, { "mascara"  , &("HttpPost->edMascara" + cIndHex) })
		aAdd(aValues, { "keyseq"   , 0 })      
		
		if isNull(aValues[1,2])
			loop
		endif
		
		if HttpSession->DWImpStruc[ID_OBJ] == "dim"
			aAdd(aValues, { "id_dim"   , HttpSession->DWImpStruc[ID_ID_OBJ] })
		else
			aAdd(aValues, { "id_cubes" , HttpSession->DWImpStruc[ID_ID_OBJ] })
			aAdd(aValues, { "virtual"  , .f. })
			aAdd(aValues, { "classe"   , "A" })
		endif

		if !oAtt:Seek(2, { HttpSession->DWImpStruc[ID_ID_OBJ], &("HttpPost->edNome" + cIndHex) }, .f.) ;
		   .and. !oAtt:append(aValues)
			dwRaise(ERR_002, SOL_001, oAtt:Msg())
		endif
	next
	
	if HttpSession->DWImpStruc[ID_OBJ] == "dim"
		// se tiver pelo menos um campo com chave primária atualiza a estrutura da dimensão
		if oAtt:Seek(4, {HttpSession->DWImpStruc[ID_ID_OBJ], 1})
			DWWaitJob(JOB_INITDIM, { HttpSession->DWImpStruc[ID_ID_OBJ] },, .T. )
		endif
	endif
	
endif
%>

<%if HttpGet->dw_step == 2%>

	<%= tagJS() %>
	function doPrevious() {
		doLoadHere(<%= makeAction(AC_IMPORT_STRUC, { { "obj", HttpSession->DWImpStruc[ID_OBJ] }, { "id", DwStr(HttpSession->DWImpStruc[ID_ID_OBJ]) }, { "dw_step", --HttpGet->dw_step }, {  "edConector", HttpPost->edIDConector } })%>);
    return false;
	}
	</script>

  <%if len(aODBC) > 0%>
	  <%=buildForm("frmODBC", cTitle,AC_IMPORT_STRUC, OP_STEP, aButtons, aODBC)%>
  <%else%>
		<%		
			makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0046, STR0047, "bt_ocioso.gif", "doPrevious()", "left") //"anterior"###"Retorna para a seleção da conexão"
			makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0048, STR0049 + iif (HttpSession->DWImpStruc[ID_OBJ] == "dim", STR0050, STR0051), "bt_ocioso.gif", "doClose()", "left") //"cancel"###"Retorna para a lista de "###"Atributos"###"Indicadores"
		%>
  	<%=buildList(cTitle, aItens, LIST_LIST, , aButtons)%>
	<%endif%>
<%elseif HttpGet->dw_step == 3%>
	<%=tagJS()%>
	function edViewType_onchange(oSender)
	{
		var cTarget = oSender.value;
		var re;
		
		switch (cTarget)
		{
			case "C": 
				re = /<%=STR0026%>/gi ; //"caracter"
				break;
			case "N": 
				re = /<%=STR0027%>/gi ; //"numérico"
				break;
			case "D": 
				re = /<%=STR0028%>/gi ; //"data"
				break;
			case "O": 
				re = /\*/i;
				break;
			default: 
				re = new RegExp("", "gi");
		}
		
	  searchElements(oSender.form, re, false)
	}
	
	function searchElements(aoForm, aRe, alName)
	{                      
	 	var aElements = getElement('frmImportStructbrowse').getElementsByTagName("TR");
		var blnFindFields = false;
	  	var nTargetCol = alName?2:4;	
		
		var nIndex  = document.getElementById("edViewType").selectedIndex 
		var cFilter = document.getElementById("edViewType").options[nIndex].text;
	 	
		for (var i=1; i < aElements.length; i++) {
			
			var cText   = aElements[i].cells(nTargetCol).childNodes(0).value;
		   	var lMark   = aElements[i].cells(1).childNodes(0).checked;
	   		var cType 	= aElements[i].cells(4).childNodes(0).value;   
	   		var cAll    = '<%=allTrim(STR0025)%>'  //Todos 
	   		var cOther  = '<%=allTrim(STR0029)%>'  //Outros	 	       				
			  									
			if ((lMark || cText.match(aRe)) && ((cType == cFilter) || (cFilter == cAll) || (cFilter == cOther)) )
			{
				showElement(aElements[i]);
				blnFindFields = true;
			} else {
				hideElement(aElements[i]);
			}
		}
		defineMessage(blnFindFields?"":'<%=STR0055%>');
	}
	                                       
	function edViewName_search(oSender, acTarget)
	{     
	  if (acTarget)
	    var re = new RegExp(acTarget, 'gi')
	  else
	    var re = new RegExp('', 'gi')
		searchElements(oSender.form, re, true);
	}
	
	function edViewName_onkeypress(oSender)
	{                                          
		if (!((event.keyCode == 27) || (event.keyCode == 13)))
			edViewName_search(oSender, oSender.value + String.fromCharCode(event.keyCode));
	}
	
	function edViewName_onkeyup(oSender)
	{   
		if (event.keyCode == 8)
			edViewName_search(oSender, oSender.value);
	
	}    
	
	</script>
	<%=buildFormBrowse('frmImportStruct', cTitle, AC_IMPORT_STRUC, OP_STEP, aButtons, aCols, aItens,,,,aBefFields)%>
<%elseif HttpGet->dw_step == 4 %>
	<%= cJS %>
	<%=buildFormBrowse('frmImportStruct', cTitle, AC_IMPORT_STRUC, OP_STEP, aButtons, aCols, aItens)%>
<%elseif HttpGet->dw_step == 5%>
	<%=buildAutoClose(.T.)%>
<%else%>
	<%=buildForm('frmImportStruct', cTitle, AC_IMPORT_STRUC, OP_STEP, aButtons, aFields)%>
<%endif%>