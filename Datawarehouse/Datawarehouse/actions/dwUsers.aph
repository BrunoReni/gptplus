<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwUsers - Manutenção de Usuários
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 28.11.05 |2481-Paulo R Vieira| Versão 3
// 09.12.08 | 0548-Alan Candido | FNC 00000149278/811 (8.11) e 00000149278/912 (9.12)
//          |                   | Tradução de strings
// 16.12.08 | 0548-Alan Candido | FNC 00000010242/2008 (8.11) 00000010247/2008 (9.12)
//          |                   | Correção em identificador de string de tradução
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwUsers.ch"

Local oUser, oGroups	:= InitTable(TAB_USER)
Local aFields	:= {}, aButtons := {}
Local nID 		:= DwVal(HttpGet->ID)
Local cLogin, cNome, nGrupo, cEmail, cCargo, lAdmin, lAtivo 
local lUsSiga, cPainel, lImpSiga, cImpSigUser, cShowPageNav
Local aGroups := {}, aUsers := {}
Local lOperOK	:= .F.
local cTitle := STR0011 /*"Manutenção de Usuários"*/
local aAux := {}
local nRecLimit	:= 0
local lPublica	:= .F.  /*Indica a existência de consulta pública para o usuário.*/
Local oPriv
Local nIdGroup 	:= 0
Local aDWs 		:= {}
Local nI		:= 0 

if oSigaDW:UsrOnLine()
	cTitle += ", <small>" + STR0020 + "</small>" /*"monitoramento de usuários on-line ATIVADO"*/
else
	cTitle += ", <small>" + STR0021 + "</small>" /*"monitoramento de usuários on-line NÃO ATIVADO"*/
endif                                                                      

// carga dos grupos
oGroups:Seek(2, { "G" })
while !oGroups:Eof() .and. (oGroups:value("tipo") == "G")
	aAdd(aGroups, { oGroups:value("nome"), oGroups:value("id") })
	oGroups:_Next()
enddo

// carga dos usuários
oGroups:Seek(2, { "U" })
aAdd(aUsers, { STR0013 , 0 }) //"ninguem"
while !oGroups:Eof() .and. (oGroups:value("tipo") == "U")
  if !(oGroups:value("id") == nID) .and. !oGroups:value("Admin")
		aAdd(aUsers, { oGroups:value("nome"), oGroups:value("id") })
	endif
	oGroups:_Next()
enddo

if HttpGet->Action == AC_REC_MANUT .OR. HttpGet->Action == AC_DW_USER
	nID := DwVal(HttpGet->ID)
	
	oUser := initTable(TAB_USER)
	
	HttpGet->Oper := DwVal(HttpGet->Oper)
	if HttpGet->Oper == OP_SUBMIT
		nID := DwVal(HttpPost->edID)
		
		if HttpSession->subOper == OP_REC_EDIT .and. oUser:seek(1, { nID })
			if !empty(HttpPost->edSenha)
				HttpPost->edSenha := dwCripto(pswencript(HttpPost->edSenha), PASSWORD_SIZE, 0)
			else
				if oUser:seek(1, { nID })
					HttpPost->edSenha := oUser:value("senha")
        		endif
			endif
			aAux := oUser:fromPost(HttpPost->APost)
			aAdd(aAux, { "impsiga", oUser:value("impsiga") })
			nIdGroup := oUser:value("ID_GRUPO")
			lOperOK := oUser:update(aAux)
			if lOperOK
				// Se o grupo for alterado, deleta os privilegios cadastrados para o usuário, 
				// assumindo os privilégios do grupo
				If !(nIdGroup == DWVal(HttpPost->edID_Grupo) )
					oPriv := InitTable(TAB_USER_PRIV)
					// Deleta os registros já existentes na tabela de privilégios
					if oPriv:seek(2, { nID  })
						while oPriv:value("ID_USER") == nID
							oPriv:delete()
							oPriv:_Next()
						enddo
					endif
				EndIf			
			EndIf
			if oUser:value("id") == oUserDW:UserID()
				oUserDW:refresh()
			endif			
		elseif HttpSession->subOper == OP_REC_DEL .and. oUser:seek(1, { nID })
		   	oConsulta := initTable(TAB_CONSULTAS) 			
			oConsulta:seek(7, { nID, "U"}) 
            
			/*Idenfifica se o usuário possui alguma consulta marcada como pública*/
			while !oConsulta:eof() .and. oConsulta:value("id_user") == nID .and. oConsulta:value("tipo") == "U"
				if ( lPublica := oConsulta:value("publica") )
					oConsulta:fcMsg := STR0029 /*O usuário não pode ser removido pois possue consultas públicas em seu perfil.*/
					exit  
				endIf      	                   	
           		oConsulta:_Next()
			enddo    
			 
			/*Caso haja consultas públicas, não permite a exclusão do usuário*/         
			if !( lPublica )			 	
   			   oConsulta:seek(7, { nID, "U"}) 
			 	
				while !oConsulta:eof() .and. oConsulta:value("id_user") == nID .and. oConsulta:value("tipo") == "U"
	           		oConsulta:delete()
	           		oConsulta:_Next()
				enddo
				lOperOK	:= oUser:delete() 
			else				
		   		lOperOK := .F. 
			endif					
		else
			HttpPost->edID := NIL 
			HttpPost->edSenha := dwCripto(pswencript(HttpPost->edSenha), PASSWORD_SIZE, 0)
			aAux := oUser:fromPost(HttpPost->APost)
			aAdd(aAux, {"folderMenu", .T.})			
			if lOperOK := oUser:append(aAux)
				nID := oUser:value("id")
			endif
		endif

		if !lOperOK               
			DwRaise( ERR_002, SOL_000, iif(lPublica, oConsulta:Msg(.T.), oUser:Msg(.T.)) )			
		else
			HttpPost->edCopiarPriv := dwVal(HttpPost->edCopiarPriv)
			if HttpPost->edCopiarPriv <> 0
				oUserDW:copyPriv(HttpPost->edCopiarPriv, nID)
			endif
		endif
	else
		HttpSession->subOper := HttpGet->Oper
		
	endif
	
	if oUser:seek(1, { nID })
		cLogin 	:= oUser:value("login")
		cNome   := oUser:value("nome") 
		nGrupo	:= oUser:value("id_grupo")
		cEmail	:= oUser:value("email")
		cCargo	:= oUser:value("cargo")
		lAdmin	:= oUser:value("admin")
		lAtivo	:= oUser:value("ativo")
		lUsSiga	:= oUser:value("us_siga")
		cPainel := oUser:value("usePanel")
		cShowPageNav := oUser:value("shPageNav")
		lImpSiga := oUser:value("impsiga")
		cImpSigUser := oUser:value("impsiguser")
		nRecLimit := oUser:value("recLimit")
	else
		cLogin	:= ""
		cNome		:= ""
		nGrupo	:= 0
		cEmail	:= ""
		cCargo	:= ""
		lAdmin	:= .F.
		lAtivo	:= .F.
		lUsSiga	:= .F.
		cPainel := ""
		cShowPageNav := ""
		lImpSiga := .F.
		cImpSigUser := ""
		nRecLimit := 0
	endif
	
	makeHidden(aFields, 'edID', nID)
	if !lImpSiga
		if oUserDW:UserIsAdm()			
			makeKeyField(aFields,	'edLogin', STR0001, .T., 'C', 25, 0, , cLogin, .T.) //'Login'
		endif
	else                      
		if oUserDW:UserIsAdm()
			makeShow(aFields,	'edLogin', STR0001, cLogin) //'Login'
			makeShow(aFields,	'edImpSigUser', STR0022, strTran(cImpSigUser, '"', "'")) //'Login do Usuário Siga'
		endif
	endif
	makePassword(aFields,		'edSenha', STR0002, empty(cLogin), 'C', 20, 0, , '') //'Senha'
	makeField(aFields, 			'edNome', 		STR0003, 	.T., 'C', 30, 0, , cNome) //'Nome'
	if oUserDW:UserIsAdm()
		makeHidden(aFields,		'edTipo',		"U")
		makeCombo(aFields,		'edId_grupo',	STR0004,	.T., aGroups, 	, nGrupo) //'Grupo'
	endif
	makeField(aFields,	 		'edEmail', 		STR0005,	.T., 'C', 60, 0, , cEmail) //'Email'
	if oUserDW:UserIsAdm()
		makeField(aFields,	 	'edCargo', 		STR0006,	.T., 'C', 30, 0, , cCargo) //'Cargo'
		makeField(aFields, 		'edAdmin', 		STR0007, 	.T., 'L',  1, 0, , lAdmin) //'Admin'
		makeField(aFields, 		'edAtivo',		STR0008, 	.T., 'L',  1, 0, , lAtivo) //'Ativo'
 		makeField(aFields, 		'edUs_siga',	STR0009, 	.T., 'L',  1, 0, , lUsSiga) //'Usuário Siga'
 		makeCombo(aFields,		'edCopiarPriv',	STR0012,	.F., aUsers, , 0) //"Copiar privilégios"
	else
		makeHidden(aFields, 	'edAdmin', 		lAdmin) //'Admin'
		makeHidden(aFields, 	'edAtivo',		lAtivo) //'Ativo'
		makeHidden(aFields, 	'edUs_siga',	lUsSiga) //'Usuário Siga'
	endif
	makeCombo(aFields,  	"edUsePanel"  , STR0014, .f., ; //"Usar painel"
					{ { STR0019 + "(" + iif(oSigaDW:UsePanels()==PAN_SIMPLES, STR0015, STR0016) +")", ""} , ; //"Padrão"
					  { STR0015, PAN_SIMPLES }, ; //"Simples"
					  { STR0016, PAN_DUPLO } }, , cPainel) //"Duplo"
					  
	makeField(aFields, "edRecLimit", STR0023, .f., "N", 2, 0,, nRecLimit) //"Máx. Registros por página"

	makeCombo(aFields,  	"edShPageNav", STR0026, .f., ; //"Apresentar navegação"
					{ { STR0019 /*"Padrão" */ + "(" + iif(oSigaDW:showPageNav()==PAGE_NAV_SIM, STR0030 /*"Sim, no rodapé da consulta"*/, STR0031 /*"Não"*/) +")", ""} , ; 
					  { STR0031 /*"Não"*/, PAGE_NAV_NAO }, ; 
					  { STR0030 /*"Sim, no rodapé da consulta"*/, PAGE_NAV_SIM } }, , cShowPageNav) 

	%>
	<%= buildForm("frmUsers", STR0010, HttpGet->Action, OP_SUBMIT, , aFields) %> <%= /*"Usuário"*/ %>
	
	<% if HttpGet->Oper == OP_SUBMIT %>
		<%oUserDW:RecLimit(dwVal(HttpPost->edRecLimit))%>
  		<%=buildAutoClose()%>
	<% endif %>
	
<% else
	makeItemToolbar(aButtons, STR0017, STR0018, "ic_import.gif", ;
		"js:doLoad("+ makeAction(AC_USER_IMPORT)+", '_window', null, 'winDWImp', " + DwStr(TARGET_75_WINDOW) + "," + DwStr(TARGET_75_WINDOW)+")", "right") /*"Importar"###"Importa os usuários do SigaAdv"*/
%>
  <%= buildBrowse(cTitle, .T., TAB_USER, , , , { |aaData| prepRow(aaData)} , { "TIPO='U'" }, , , , , , , , , aButtons) %>
<% endif %>
   

<%=tagJS()%>


function edEmail_valid(poField)
{            
	var lRet = validMail(poField.value); 
		
	if (!(lRet))
	{		
		defineFieldMessage(poField, getMailValidMsg());   
  	}		
	return lRet;
}  

function edLogin_valid(poField, cValid, pcFieldType)
{
	var lRet = true;
	
	if (!validUser(poField.value, cValid, (pcFieldType == "B") )) 
   { 
   		lRet = false;
   		defineFieldMessage(poField, "O nome do usuário contém caracteres inválidos.");  	
	} 	
	 
	return lRet;
}  

function validUser(AValue, ACheckOK, ANotSpaces) 
{ 
	var lRet = true; 
	
	if (ANotSpaces)
	{
		if (AValue.indexOf(" ") != -1)
			return (false);
	}
	for (i = 0;  i < AValue.length;  i++) 
	{
   	if (ACheckOK.indexOf(AValue.charAt(i)) == -1) 
	   { 
			lRet = false; 
			break; 
		} 
	} 
	return (lRet);
} 

function doValidUser(poField, plRequired,  pcFieldType, pnFieldLen, pnDecimals, pxMinValue, pxMaxValue, poFieldMsg) 
{   
	var lRet = true;
	var cValid = null;
  
  	defineFieldMessage(poField, null);
  
	cValid =          "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	cValid = cValid + "0123456789_.@-";
	poField.value = poField.value.toUpperCase();

	try 
	{ 
    eval("edLogin_valid(poField, cValid, pcFieldType)");
	} catch (err) { };                     

	if (retrieveFieldMessage(poField))
	{
		if (poFieldMsg) {
			defineFieldError(poFieldMsg);
		} else {
			defineFieldError(poField);
		}
	}

  return (retrieveFieldMessage(poField)?false:true); 
} 

/*
 * Função abaixo criada somente para validação de usuário.]
 * Ao Adicionar ou dar manuteção em um usuário.
 */
function checkKeyForUser(oSender, aEvent)
{
	var lErro = false;
	var lRet = true;
	
	var nKeyCode = oBw.ie?event.keyCode:aEvent.which;
	var cKeyChar = String.fromCharCode(nKeyCode);
	var cSpcChars = '\'(!&#*%()\"=[]{}/?:><,;`´';

  if ( (nKeyCode > 31) && (
      ((nKeyCode == 32) || (nKeyCode == 45) ||
			(cSpcChars.indexOf(cKeyChar) > -1))))
		lErro = true;

	if (oBw.ie)
	{
	  if (lErro)
  	{                                           
	    event.returnValue = false;
	  } else
  	{
	    var x = String.fromCharCode(event.keyCode);
  	  x = x.toUpperCase()
	    event.keyCode = x.charCodeAt(0);
	  }   
	} else
	{
	  if (lErro)
	  { } 
	  else if (!(cKeyChar.toUpperCase() ==  cKeyChar))
	  {
      var evt = document.createEvent("KeyboardEvent");
      evt.initKeyEvent(                                                                                      
                 "keypress",        //  in DOMString typeArg,                                                           
                  true,             //  in boolean canBubbleArg,                                                        
                  true,             //  in boolean cancelableArg,                                                       
                  null,             //  in nsIDOMAbstractView viewArg,  Specifies UIEvent.view. This value may be null.     
                  false,            //  in boolean ctrlKeyArg,                                                               
                  false,            //  in boolean altKeyArg,                                                        
                  false,            //  in boolean shiftKeyArg,                                                      
                  false,            //  in boolean metaKeyArg,                                                       
                   0,               //  in unsigned long keyCodeArg,                                                      
                   cKeyChar.toUpperCase().charCodeAt(0));              //  in unsigned long charCodeArg);
      oSender.dispatchEvent(evt);
			lErro = true;
	  }
	  
	}
	
	if (lErro)
	{
		if (!(getColor(oSender) == "silver"))
		{
			window['timeOutObject'] = oSender;
			window['timeOutColor'] = getColor(oSender);
			setColor(oSender, "silver");
			window['timeOutControl'] = setInterval("doResetColor()", 750);
		}  
	                  
	}
	return !lErro;
}


</script>
 
           
<%
return __Response

static function prepRow(aaData)
	local aAux, cIcone := "ic_user_offline", cHint := ""

  if oSigaDW:UsrOnLine()                                      
    cHint := STR0024 //###"off-line"
		if !empty(aaData[17])
			aAux := dwToken(aaData[17], " ", .f.)
			if len(aAux) == 2
				if DWElapSecs(stod(aAux[1]), aAux[2], date(), time()) < 210 // 3 minutos e meio
					cIcone := "ic_user_online"
					cHint := STR0025 //###"on-line"
				endif
			endif
		endif
	endif
	
	if aaData[22]
		cIcone += "_mp"
		cHint += "(MP)"
	endif
	
	aaData[2] := tagImage(cIcone+".gif", 14, 15, cHint,,,,,,.f.) + ' ' + aaData[2]
	
return .t.
%>