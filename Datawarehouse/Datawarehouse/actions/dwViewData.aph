<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : 
// Fonte  : dwViewData.aph - Visualiza dados ou página de filtros para visualizar dados
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 11.01.06 |2481-Paulo R Vieira| Versão 3
// 14.11.07 |0548-Alan Candido  | BOPS 135941 - ajuste na ordenação, quando existe apenas
//          |                   |   uma coluna (campo) selecinado.            
// 09/05/08 |0548-Alan Candido  | BOPS 145481
//          |                   |   Ajuste de lay-out
// 11.06.08 | 0548-Alan Candido | BOPS 147407
//          |                   | Ajuste no lay-out, não apresentando indicadores com agregação 
//          |                   | de percentual e incluido a identificação da agregação utilizada
//          |                   | no indicador
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwViewDataConst.ch"
#include "dwViewData.ch"

// Primeira página como 'Tabela de dados' = 1
#define PAGE_DATATABLE 	"1"

// Primeira página como 'Filtro' = 2
#define PAGE_FILTERDATA	"2"

Local cColName		:= dwStr(iif (!empty(HttpGet->ColName), HttpGet->ColName, iif (!empty(HttpPost->ColName), HttpPost->ColName, DwGetProp(ID_SELECT_COLNAME, ID_VIEW_NAMPRG))))
Local cColValue		:= dwStr(iif (!empty(HttpGet->ColValue), HttpGet->ColValue, HttpPost->ColValue))
Local cColValType
Local cTableName
Local cSelectRow	:= dwStr(iif (!empty(HttpGet->SelectRow), HttpGet->SelectRow, HttpPost->SelectRow))
Local cSelectCol	:= dwStr(iif (!empty(HttpGet->SelectCol), HttpGet->SelectCol, HttpPost->SelectCol))
Local cRefreshPage:= dwStr(iif (!empty(HttpGet->RefreshPage), HttpGet->RefreshPage, iif (!empty(HttpPost->RefreshPage), HttpPost->RefreshPage, "window.opener")))
Local aWhere		:= {}
Local aToolBar		:= {}
Local bAddChkBox
Local cWhere, aBaseFields, aFields := {}, oTable
Local nInd, nInd2, aQuery, nQueryType := DwVal(isNull(httpget->type, HttpGet->TypeCons))
Local nPos
Local cJoinValue, aSessFldValue := {}
Local oTableFields, cFieldID, cFieldDesc, aShowFields
Local aFilterValues
Local aColNames		:= {}
Local nID	:= DwVal(HttpGet->ID)
Local aOrderFields	:= {}
Local cObjName, aBaseKeyFields, nIndice, nBaseIndice, cObjType := HttpGet->ObjType
Local nIndiceCaption, nIndiceType, nIndiceTam, nIndiceDec
Local aSelectedCheckBox
Local cEventBrowse := ''
Local FIELDS_SEP 	:= chr(255), FIELD_VALUE_SEP := chr(254), cFields
Local aAux
Local cPagingEnabled
Local oQuery
Local lDistinctRecords := .F.
Local lPagingEnabled, lHiddenButtons := .f., lCanClear := .f.
Local cQryValuesLabel := ID_ARRVALUES + DwStr(nID) + DwStr(nQueryType)
local nLenAux, oElem
local aButtons := {}

// recupera os dados selecionados pelo usuário
aSelectedCheckBox := checkSelectedBoxes()

// verifica se é uma Dimensão, um Cubo ou uma consulta
if valtype(cObjType) == "U"
	cObjType := dwGetProp("ObjType")
	nID := dwGetProp("id")
else
	dwSetProp("ObjType", cObjType)
	dwSetProp("id", nID)
endif                       

cEventBrowse := "&ID=" + DwStr(nID) + "&ColName=" + cColName + "&ColValue=" + cColValue ;
						+ "&SelectRow=" + cSelectRow + "&SelectCol=" + cSelectCol ;
							+ "&RefreshPage=" + cRefreshPage + "&TypeCons=" + dwStr(nQueryType) ;
								+ "&ObjType=" + cObjType   

if cObjType == OBJ_DIMENSION
	oTableFields 		:= oSigaDW:OpenDim(nID)
	cTableName	 		:= oTableFields:tablename()
	cObjName	    	:= oTableFields:Descricao()
	aBaseFields  		:= oTableFields:Fields()
	aBaseKeyFields  	:= oTableFields:Indexes()
  	oTableFields:close()
	nIndice				:= 1
	nBaseIndice   		:= 4
	nIndiceCaption 		:= 9
	nIndiceType			:= 2
	nIndiceTam			:= 3
	nIndiceDec			:= 4
	lDistinctRecords 	:= !empty(cColName)
elseif cObjType == OBJ_CUBE
	oTableFields 	:= oSigaDW:OpenCube(nID)
	cTableName	 	:= DWCubeName(nID)
	cObjName	 	:= oTableFields:Name()
	aBaseFields  	:= oTableFields:GetIndicadores()
	aBaseKeyFields  := oTableFields:Fact():Indexes()
  	oTableFields:close()
  	nIndice		    := 2
	nBaseIndice     := 2
	nIndiceCaption  := 5
	nIndiceType		:= 7
	nIndiceTam		:= 3
	nIndiceDec		:= 4
	lDistinctRecords := !empty(cColName)
elseif cObjType == OBJ_QUERY
	lDistinctRecords:= .T.
	if nQueryType == 0
		nQueryType := dwGetProp("consType")
		cColName := iif(empty(dwGetProp("colName")), cColName, dwGetProp("colName"))
	else
		dwSetProp("consType", nQueryType)
		dwSetProp("colName", cColName)
	endif
	oQuery		  	:= TConsulta():New(nID, nQueryType)
	oQuery:FieldList(.T.)
	cTableName	 	:= oQuery:Workfile()
	cObjName	 	:= oQuery:Desc()
	aBaseFields		:= {}
	
  	if empty(cColName)
    	// lista de agregações que são ignoradas na montagem de filtros para seleção
    	aAggIgn := { AGG_FORMULA, AGG_PAR, AGG_PARTOT, AGG_PARGLOB, AGG_ACUMPERC, AGG_ACUMHISTPERC }

		// recupera os campos utilizados no eixo Y dessa consulta
		aEval(oQuery:DimFieldsY(), { |oElem| aAdd(aBaseFields, { oElem:Alias(), oElem:Tipo(), DwVal(oElem:Tam()), oElem:NDec(), oElem:Desc() }) } )
	
		// recupera os campos utilizados no eixo X dessa consulta
		aEval(oQuery:DimFieldsX(), { |oElem| aAdd(aBaseFields, { oElem:Alias(), oElem:Tipo(), DwVal(oElem:Tam()), oElem:NDec(), oElem:Desc() }) } )
	
		// recupera os campos utilizados no eixo dos indicadores dessa consulta  
		aAux := oQuery:Indicadores()
		nLenAux := len(aAux)
		for nInd := 1 to nLenAux
			oElem := aAux[nInd]
			if oElem:Ordem() < 0 .or. ascan(aAggIgn, { |x| x == oElem:aggFunc()}) > 0
			else
				aAdd(aBaseFields, { oElem:Alias(), oElem:Tipo(), DwVal(oElem:Tam()), oElem:NDec(), oElem:AggTit() })
			endif
		next
	else
		// recupera os campos utilizados nos eixos consulta
		aEval(oQuery:DimFields(), { |oElem| iif(oElem:Alias() == cColName, aAdd(aBaseFields, { oElem:Alias(), oElem:Tipo(), DwVal(oElem:Tam()), oElem:NDec(), oElem:Desc() }), nil) } )
		// recupera os campos utilizados no eixo dos indicadores dessa consulta
		aEval(oQuery:Indicadores(), { |oElem| iif(oElem:Ordem() < 0 .and. !(oElem:Alias() == cColName), NIL, aAdd(aBaseFields, { oElem:Alias(), oElem:Tipo(), DwVal(oElem:Tam()), oElem:NDec(), oElem:Desc() })) } )
	endif
			
	// define as chaves primárias
	aBaseKeyFields 	:= aBaseFields
	
	nIndice			:= 1
	nBaseIndice := 1
	nIndiceType		:= 2
	nIndiceTam 		:= 3
	nIndiceDec 		:= 4
	nIndiceCaption 	:= 5
endif

// Primeira página como dados da consulta OU a ação é de exibição de dados OU a ação é a de submissão da seleção de dados
if (HttpGet->Action == AC_QUERY_DATA .OR. HttpGet->Action == AC_SHOW_DATA .OR. HttpGet->Action == AC_SELECT_DATA) ;
		.and. !(HttpGet->Action == AC_FILTER_DATA)
	                        
	// recupera o array contendo todos os valores selecionados através do filtro de dados
	aFilterValues := DwGetProp(cQryValuesLabel, ID_VIEW_NAMPRG)
	if !empty(aFilterValues) .and. HttpGet->Action == AC_QUERY_DATA
		for nInd := 1 to len(aFilterValues)
			if !empty(aFilterValues[nInd][2])
				aAdd(aWhere, QBE2Sql(aFilterValues[nInd][1], valType(aFilterValues[nInd][2]), {aFilterValues[nInd][2]}, aFilterValues[nInd][1], NIL, NIL, NIL))
	   		endif
		next
	endif
	               
	dwSetProp(VIEWDATA_TARGETFIELD, httpGet->targetField, ID_VIEW_NAMPRG)
	if !empty(cColValue)
		// constroi a claúsula where
		nInd := aScan(aBaseFields, {|x| x[1] == cColName})
		aAdd(aWhere, QBE2Sql(cColName, aBaseFields[nInd, nIndiceType], {cColValue}, aBaseFields[nInd, nIndiceCaption], NIL, NIL, NIL))
	endif
	
	if !empty(cColName)
		// botão ok
		makeStepsToolbar(aToolBar, BT_JAVA_SCRIPT, STR0001, STR0002, "bt_ocioso.gif", "doOK(this.form)", "left") //"ok"###"Retorna para o filtro com as opções selecionadas"
	endif
	
	// botão Fechar
	makeStepsToolbar(aToolBar, BT_JAVA_SCRIPT, STR0005, STR0006, "bt_ocioso.gif", "doClose(false)", "left") //"Fechar"###"Retorna para o filtro"

	// recupera os campos da tabela
	aShowFields := {}
	for nInd := 1 to len(aBaseFields)
		if empty(cColName)
			if len(aBaseFields[nInd]) >= FLD_TITLE .AND. len(aBaseFields[nInd]) >= FLD_VISIBLE
				aAdd(aShowFields, { aBaseFields[nInd][FLD_NAME], aBaseFields[nInd][FLD_TYPE], aBaseFields[nInd][FLD_LEN], aBaseFields[nInd][FLD_DEC], aBaseFields[nInd][FLD_TITLE], aBaseFields[nInd][FLD_VISIBLE] } )
			else
				aAdd(aShowFields, {aBaseFields[nInd][2], "C", aBaseFields[nInd][3], aBaseFields[nInd][4], aBaseFields[nInd][5], .t.})
			endif
		elseif aBaseFields[nInd][nIndice] == cColName
			if len(aBaseFields[nInd]) >= FLD_TITLE .AND. len(aBaseFields[nInd]) >= FLD_VISIBLE
				aShowFields := { { aBaseFields[nInd][FLD_NAME], aBaseFields[nInd][FLD_TYPE], aBaseFields[nInd][FLD_LEN], aBaseFields[nInd][FLD_DEC], aBaseFields[nInd][FLD_TITLE], aBaseFields[nInd][FLD_VISIBLE] } }
			elseif len(aBaseFields[nInd]) >= 9
				aShowFields := { {aBaseFields[nInd][2], "C", aBaseFields[nInd][3], aBaseFields[nInd][4], aBaseFields[nInd][5], aBaseFields[nInd][9]} }
			else
				aShowFields := { {aBaseFields[nInd][nIndice], aBaseFields[nInd][nIndiceType], aBaseFields[nInd][nIndiceTam], aBaseFields[nInd][nIndiceDec], aBaseFields[nInd][nIndiceCaption], .T.} }
			endif
			
			cColValType := aBaseFields[nInd][nIndiceType]
			exit
		endif
	next
	
	// se o nome de uma coluna tiver sido escolhida para visualização de dados, define a coluna como campo de ordenação
	if !empty(cColName)
		aOrderFields := { { cColName, .T. } }
	else
		// verifica se o nome da coluna é vazio, se for incrementa o array de ordenação com os indexes da tabela
		for nInd := 1 to len(aBaseKeyFields)
			aEval(aBaseKeyFields[nInd][4], { |x| aadd(aOrderFields, { x, .T. } ) } )
		next
	endif
	
	// recebe como parâmetro o array de campos e um array com o id da linha
	if !empty(cColName)
		bAddChkBox		:= { |aBuffer, aPar| prepColCheckBox(aBuffer, aPar, cColName, cColValType, aSelectedCheckBox) }
	endif
	
	if (dwVal(HttpGet->oper) == OP_SUBMIT) %> 
		<%=tagjs()%>
			if (!('<%= DwGetProp(VIEWDATA_SELECTCHCK, ID_VIEW_NAMPRG) %>' == '')) {
				//Campo no qual será exibido o resultado da seleção.              
			    var oTarget = window.opener.document.getElementById('<%=DwGetProp(VIEWDATA_TARGETFIELD, ID_VIEW_NAMPRG)%>');
			    //Valores selecionados e armazenados na sessão.
			    var sessionSelected = ('<%=DwGetProp(VIEWDATA_SELECTCHCK, ID_VIEW_NAMPRG)%>');		                   
				//Alimenta o campo de destino com os valores selecionados.
			    oTarget.value = sessionSelected.replace(new RegExp('\\-','gi'), '\\-'); 			    	    
				
				<%if cObjType == OBJ_QUERY%>
					oTarget.form.submit()
				<%endif%>		        		
			}
			
			//Verifica se deve ou não forçar o reflesh da página que chamou o pop up.
			<%if HttpGet->Action == AC_QUERY_DATA%>  
		   		doClose();
		 	<%else%> 
				doClose(false);
			<%endif%>
			
       	</script>     	
		<% return
	endIf 	        
	
	// salva os registros selecionados pelo usúario na sessão
	if !(HttpGet->Action == AC_SELECT_DATA)
  		lPagingEnabled := oUserDW:EnablePaging()
  		oUserDW:EnablePaging(ENABLE_PAGING_TRUE)
		%>
		<%=	buildBrowse(STR0007 + cObjName + "]", .F., cTableName, aShowFields, aOrderFields, , , aWhere, aToolBar, oSigaDW:RecLimit(), , HttpGet->Action, , , bAddChkBox, .F., aButtons , DwVal(HttpGet->NumMaxReg), , cEventBrowse, , lDistinctRecords) /*"Visualizando dados da tabela [" */%>
		<%
		oUserDW:EnablePaging(lPagingEnabled)
	endif %>    
	
	<%=tagJS()%>		
		function u_controlBrowseRequest(acAction, aoTarget) {
			showWait();
			doActionFlex(acAction, aoTarget, endRequestData);
		}
		
		function endRequestData() {
			hideWait();
		}
		
		function doActionFlex(acAction, aoTarget, aOnComplete) {
			var cActnParam = "";
			
			acAction = prepParam(acAction, "flexTime", new Date().getTime().toString(16));
			
			cActnParam = prepParam("", "includedParam", escape(u_includeParam()));
			cActnParam = prepParam(cActnParam, "removedParam", escape(u_removedParam()));
			cActnParam = cActnParam.substr(1);
			doRequestData(acAction, aoTarget, aOnComplete, "POST", cActnParam);
		}
		
		/** 
        Inclui parâmetro adicional (includedParam) na chamado da função doRequestData.       
		*/
		function u_includeParam()  {
			var oForm = document.forms[0];			
			return escape(getCkbSelected(oForm));
		}               
  		/** 
        Inclui parâmetro adicional (includedParam) na chamado da função doRequestData.       
		*/
		function u_removedParam()  {
			var oForm = document.forms[0];			
			return escape(getCkbUnchecked(oForm));
		}
  		/** 
        Confirma a escolha dos itens.      
		*/                
		function doOK(aoForm)
		{    
			doActionFlex(document.location.href, document, function() {
				document.location.href = prepParam(document.location.href, "oper", "<%=OP_SUBMIT%>");
   			});
 		}  		
		/**   
		Recupera os itens selecionados na página atual.
	 	*/ 
		function getCkbSelected(aoForm) 		
    	{    	
			var ckbsLenght = aoForm.ckbSelected.length;
			var ckbsJoinVal = new Array();
			if (ckbsLenght > 0) 
			{
				for (i = 0; i < ckbsLenght; i++) 
					if (aoForm.ckbSelected[i].checked)
						ckbsJoinVal.push(aoForm.ckbSelected[i].value);
			} else if (aoForm.ckbSelected)
			{
				if (aoForm.ckbSelected.checked)
					ckbsJoinVal.push(aoForm.ckbSelected.value);
			}
			return ckbsJoinVal.join("|");
		}  		  
		/**   
		Recupera os itens não selecionados na página atual.
	 	*/ 
		function getCkbUnchecked(aoForm) 		
    	{    	
			var ckbsLenght = aoForm.ckbSelected.length;
			var ckbsJoinVal = new Array();
			if (ckbsLenght > 0) 
			{
				for (i = 0; i < ckbsLenght; i++) 
					if (!(aoForm.ckbSelected[i].checked))
						ckbsJoinVal.push(aoForm.ckbSelected[i].value);
			} else if (aoForm.ckbSelected)
			{
				if (!(aoForm.ckbSelected.checked))
					ckbsJoinVal.push(aoForm.ckbSelected.value);
			}
			return ckbsJoinVal.join("|");
		}  
				        
				       
		function doSubmit(aoForm) {
			var aElem = aoForm.elements;
			var component;
			var nradio = -1;
			var cRet;
			var oTarget = window.opener.document.getElementById('<%=DwGetProp(VIEWDATA_TARGETFIELD, ID_VIEW_NAMPRG)%>');
			for (i = 0; i < aElem.length; i++) 
			{
				component = aElem[i];
				if (component.type == "radio") 
				{
					nradio++;
					if (component.checked)
					{
						switch(nradio)
						{
							case 0 :
								cRet = '""';
								break;
							case 1 :
								cRet = '<>' + aElem[i+1].value;
								break;							
							case 2 :
								cRet = '..' + aElem[i+1].value + '..';
								break;
							case 3 :
								cRet = '..' + aElem[i+1].value;
								break;
							case 4 :
								cRet = aElem[i+1].value + '..';
								break;
							case 5 :
								cRet = '>' + aElem[i+1].value;
								break;
							case 6 :
								cRet = '>=' + aElem[i+1].value;
								break;
							case 7 :
								cRet = aElem[i+1].value;
								break;
							case 8 :
								cRet = '<=' + aElem[i+1].value;
								break;
							case 9 :
								cRet = '<' + aElem[i+1].value;
								break;
							case 10 : 
								cRet = aElem[i+1].value + '/../..';
								break;
							case 11 :
								cRet = '../' + aElem[i+1].value + '/..';
								break;
							case 12 :
								cRet = '../../' + aElem[i+1].value;
								break;
							case 13 :
								cRet = aElem[i+1].value;
								break;
							case 14 :
								cRet = aElem[i+1].value + '-' + aElem[i+2].value;
								break;
							case 15 : 
								cRet = aElem[i+1].value + '/' + aElem[i+2].value + '/..';
								break;
							case 16 :
								cRet = aElem[i+1].value + '/../' + aElem[i+2].value;
								break;
							case 17 : 
								cRet = '../' + aElem[i+1].value + '/' + aElem[i+2].value;
								break;
						}
						oTarget.value = cRet;
						window.close();
					}
				}
			} 			
		}
			
</script> 
<% // Primeira página como 'Filtro'
elseif HttpGet->Action == AC_FILTER_DATA
	
	// recupera o array contendo todos os valores selecionados para esta página na sessão
	if !empty(DwGetProp(cQryValuesLabel, ID_VIEW_NAMPRG))
		aSessFldValue := DwGetProp(cQryValuesLabel, ID_VIEW_NAMPRG)
	else
		aSessFldValue := array(len(aBaseFields))
		if len(aBaseFields) > 0
			aSessFldValue[1] := { "", "" }
		endif
	endif
	
	if isNull(HttpGet->originFilter, CHKBOX_OFF) == CHKBOX_OFF
		lHiddenButtons := .t.	
	endif
	if isNull(HttpGet->canClear, CHKBOX_OFF) == CHKBOX_ON
    	lCanClear := .t.
	  	aButtons := {}
    	makeButton(aButtons, BT_JAVA_SCRIPT, STR0013, "doClear()") //###"Limpar"
  	endif

	// constrói um campo de texto para cada campo da base de dados ou para o campo específico passado como parâmetro
	for nInd := 1 to len(aBaseFields)
		
		if (cObjType == OBJ_QUERY ;
			.OR. ;
				(cObjType == OBJ_DIMENSION .AND. !(valType(aBaseFields[nInd][FLD_GET]) == "B" .or. valType(aBaseFields[nInd][FLD_SET]) == "B")) .and. ;
				!(aBaseFields[nInd][nIndice] == "ID" .OR. aBaseFields[nInd][nIndice] == "R_E_C_N_O_")) ;
			.OR. ;
				(cObjType == OBJ_CUBE .AND. !(aBaseFields[nInd][nIndice] == "ID" .OR. aBaseFields[nInd][nIndice] == "R_E_C_N_O_"))
			
	  
			if len(aSessFldValue) >= nInd
				if !(valType(aSessFldValue[nInd]) == "A")
					aSessFldValue[nInd] := { "", "" }
				endif
			else
				aAdd(aSessFldValue, { "", "" })
			endif
			
			// verifica se o campo da iteração é o mesmo do campo o qual foi selecionado o valor
			if aBaseFields[nInd][nIndice] == iif(!empty(DwGetProp(ID_SELECT_COLNAME, ID_VIEW_NAMPRG)), DwGetProp(ID_SELECT_COLNAME, ID_VIEW_NAMPRG), cColName)
				// verifica se existe algum valor selecionado na página de visualização de dados
				aSessFldValue[nInd] := { iif(!empty(DwGetProp(ID_SELECT_COLNAME, ID_VIEW_NAMPRG)), DwGetProp(ID_SELECT_COLNAME, ID_VIEW_NAMPRG), cColName), DwGetProp(ID_SELECT_REC, ID_VIEW_NAMPRG) }
				// descarta o valor da sessão (já foi usado)
				DwSetProp(ID_SELECT_COLNAME	,  NIL, ID_VIEW_NAMPRG)
				DwSetProp(ID_SELECT_REC		,  NIL, ID_VIEW_NAMPRG)
			endif
			
			// verifica se o campo no index [indice] contiver valores não nulos no post
			cJoinValue := ""
			if !empty(&("HttpPost->ed" + aBaseFields[nInd][nIndice]))
				if empty(aSessFldValue[nInd][1]) .OR. aBaseFields[nInd][nIndice] == aSessFldValue[nInd][1]
					// adiciona o nome e o valor do campo ao array que será definido na sessão
					aSessFldValue[nInd] := { aBaseFields[nInd][nIndice], &("HttpPost->ed" + aBaseFields[nInd][nIndice]) }
					cJoinValue := &("HttpPost->ed" + aBaseFields[nInd][nIndice])
				endif				
			// se o campo não tiver valor no post
			// verficia se o campo tiver valores na session para o campo no index [indice]
			else
				// ação de submit e como não tem valor no post será ação de limpeza da sessão OU se houver mudanças no campos da consultas
				if DwVal(HttpGet->Oper) == OP_SUBMIT
					// apaga os valores da session
					aSessFldValue[nInd] := { "", "" }
			   	else
					cJoinValue := aSessFldValue[nInd][2]
				endif
			endif           

			//Os campos serão criados com o tipo forçado 'C'(Caracter). 
			//As | não serão desconsideradas durante da validação dos campos, originalmente, numéricos.           

			makeDotField(aFields, 'ed' + aBaseFields[nInd][nIndice], ;				// nome do campo (ed + CAMPO)
										aBaseFields[nInd][nIndiceCaption], ; 		// título/caption descritivo do campo
										.F., ;								   		// .T.=obrig/.F.= não obrig
										'C', ;										// tipo do campo
										aBaseFields[nInd][nIndiceTam] * 10, ;		// tamanho do campo
										aBaseFields[nInd][nIndiceDec], ;			// casas decimais do campo
										,cJoinValue, , ;							// acHotKey, axValue, alKey
							'doShowData("' + aBaseFields[nInd][nIndice] + '")', ;	// acJSFuncName - nome da tag html que contém o valor a ser visualizado
										.T., ;										// InputEnabled Inserção de dados permitida 
										.F.)                                        // ShowKbe Exibição de auxílio QBE 
										
		endif
		
	next

	// define o array contendo todos os valores para esta página na sessão
	DwSetProp(cQryValuesLabel, aSessFldValue, ID_VIEW_NAMPRG)
    
	// recupera o array contendo todos os valores selecionados para esta página na sessão
	if cObjType == OBJ_QUERY .and. !empty(aSessFldValue)
		cFields := ""
		for nInd := 1 to len(aSessFldValue)
			if !empty(aSessFldValue[nInd][1]) .and. !empty(aSessFldValue[nInd][2])
				if !empty(cFields)
					cFields += FIELDS_SEP
				endif
				nPos := ascan(aSessFldValue, { |x| x[1] == aBaseKeyFields[nInd][nIndice] })
				if nPos <> 0
					cFields += aBaseKeyFields[nPos, nIndice] + FIELD_VALUE_SEP + aBaseKeyFields[nPos, nIndiceType] + FIELD_VALUE_SEP + aBaseKeyFields[nPos, nIndiceCaption] + FIELD_VALUE_SEP + DwStr(aSessFldValue[nInd][2])
				endif
			endif
		next
		if DwVal(HttpGet->Oper) == OP_SUBMIT
			&("HttpSession->AutoFilter" + DwStr(nID)) := cFields
		endif
	endif
      


	// campos necessários para a query
	makeHidden(aFields, 'ColName'		, cColName)
	if !empty(cColValue)
		makeHidden(aFields, 'ColValue'	, cColValue)
	endif
	makeHidden(aFields, 'TableName'		, cTableName)
	makeHidden(aFields, 'SelectRow'		, cSelectRow)
	makeHidden(aFields, 'RefreshPage'	, cRefreshPage)

  	aURLParams := {}
  	aAdd(aURLParams, { "ID", nID })
  	aAdd(aURLParams, { "ObjType", HttpGet->ObjType })
  	aAdd(aURLParams, { "TypeCons", nQueryType})
  	aAdd(aURLParams, { "canClear", httpGet->canClear })

	aAdd(aURLParams, {"originFilter", HttpGet->originFilter})

	%>
	<%= buildForm("frmFltrFlds", STR0010, AC_FILTER_DATA, OP_SUBMIT, aButtons, aFields, .t. , , , , , , , !empty(aButtons), , , , , , aURLParams) %> <%=/*"Restrição por conteúdo"*/%>
	<% 	// fecha a janela e faz um refresh na página que abriu ela
   		if DwVal(HttpGet->Oper) == OP_SUBMIT
   			if !(cObjType == OBJ_QUERY)
   				DwSetProp(ID_SELECT_ROW, cSelectRow, ID_VIEW_NAMPRG)
   			endif  
   			// controle de sessão
   			DwSetProp(VIEWDATA_SELECTCHCK, NIL, ID_VIEW_NAMPRG)             
		endif
endif %>

<%=tagJS()%>
<%if lHiddenButtons%>
function u_bodyonload()
{                        
	var aButtons = getElementsByTag('BUTTON', getElement('frmFltrFlds'));
	for (var nInd = 0; nInd < aButtons.length; nInd++)
	{
			if ((aButtons[nInd].hasChildNodes()) && !(aButtons[nInd].value == '...') && (aButtons[nInd].onclick.toString().indexOf("doClear()") == -1))
				hideElement(aButtons[nInd]);
	}
}
<%endif%>         
<%if lCanClear%>
function doClear()
{
 	var oForm = getElement('frmFltrFlds');
  	var aElem = oForm.elements;
	for (i = 0; i < aElem.length; i++) 
	{
		if (aElem[i].type == "text") 
		  aElem[i].value = "";
	}
	
	                                      
  oForm.action = prepParam(oForm.action, "originFilter", "0")
  oForm.submit();
}
<%endif%>
function doShowData(acColName) 
{
//<%if cRefreshPage == "NOREFRESH"%>
//	doLoad(<%= makeAction(AC_SHOW_DATA) %> + "&originFilter=0&ID=<%= nId %>&ObjType=<%= cObjType%>&TypeCons=<%= nQueryType %>&ColName=" + acColName + "&ColValue=" + getElement("ed"+acColName).value + "&targetField=ed"+acColName+"&refreshpage=NOREFRESH", "_window", this, "DWShowData", <%= TARGET_75_WINDOW %>, <%= TARGET_75_WINDOW %>, 0, 0);
//<%else%>
	doLoad(<%= makeAction(AC_SHOW_DATA) %> + "&originFilter=0&ID=<%= nId %>&ObjType=<%= cObjType%>&TypeCons=<%= nQueryType %>&ColName=" + acColName + "&ColValue=" + getElement("ed"+acColName).value + "&targetField=ed"+acColName, "_window", this, "DWShowData", <%= TARGET_75_WINDOW %>, <%= TARGET_75_WINDOW %>, 0, 0);
//<%endif%>
}   

</script> 
<%
/*
--------------------------------------------------------------------------------------
Função responsável por adicionar um checkbox à cada linha de registros da buildBrowse().
Esta função é utilizada no code block (bAddChkBox) passado a buildBrowse().
Args: aaBuffer, array, contem o buffer de campos utilizados na tela
	  aaPar, array, contem os valores para xcada registro
	  acColName, caracter, descrição da coluna utilizada para filtro dos dados
--------------------------------------------------------------------------------------
*/ 
static function prepColCheckBox(aaBuffer, aaPar, acColName, acColValType, aaSelectedCheckBox)
	Local nInd1, nInd2
	Local cChboxValue, lChboxSelected := .F.
	Local aRowValues

	// processamento de registros de linha
	if valType(aaPar) == "A" .and. !valType(aaPar[1]) == "U"
		
		// recupera o array contendo os valores para um determinado registro
		aRowValues := aaPar[1]
		for nInd1 := 1 to len(aRowValues)
			// aRowValues[nInd1][1] é o nome do campo do registro
			// aRowValues[nInd1][2] é o valor do registro
			lChboxSelected := .f.
			if aRowValues[nInd1][1] == acColName
				// Verifica se o valor do registro é '' e preenche com {VAZIO}
				if dwStr(aRowValues[nInd1][2]) == ''
					cChboxValue := "{VAZIO}"
				else   
					cChboxValue := DwStr(DWConvTo(acColValType, aRowValues[nInd1][2])) 
				end if     
				
				for nInd2 := 1 to len(aaSelectedCheckBox)  	   								
					if aaSelectedCheckBox[nInd2] == cChboxValue
						lChboxSelected := .t.
						exit
					endif
				next
			endif
			aRowValues[nInd1][2] := makeHCheckField(NIL, "ckbSelected", "", .F., .T., , cChboxValue, lChboxSelected) + cChboxValue
			
		next
	endif       
	
return

/*
--------------------------------------------------------------------------------------
Função responsável por recuperar os valores selecionados nos checkboxs de visualização dos dados
Args: 
Ret:  array, contem os campos selecionados
--------------------------------------------------------------------------------------
*/ 
static function checkSelectedBoxes()
	Local cCkbSelected        
	Local cCkbUnselected
	Local aSelectedCheckBox
	Local nInd
	
	If empty(HTTPPost->includedParam) .AND. empty(HTTPPost->removedParam) .AND. !(dwVal(HttpGet->oper) == OP_SUBMIT)
		DwSetProp(VIEWDATA_SELECTCHCK, nil, ID_VIEW_NAMPRG)
		return {}
	EndIf
	
	// recupera da session os valores dos checkboxes selecionados anteriormente e se existirem decodifica os valores
	cCkbSelected := DwGetProp(VIEWDATA_SELECTCHCK, ID_VIEW_NAMPRG)
	cCkbSelected := iif (!empty(cCkbSelected), (cCkbSelected), "")
	if !empty(cCkbSelected)
		cCkbSelected += "|"
	endif
	
	cCkbSelected += iif (!empty(HTTPPost->includedParam), "|" + URLDecode(HTTPPost->includedParam) + "|", "")
	cCkbUnselected = iif (!empty(HTTPPost->removedParam), "|" + URLDecode(HTTPPost->removedParam) + "|", "")
	aSelectedCheckBox := DwToken(cCkbSelected, "|", .f.)     
	     
	// exclui algum item duplicado dos valores selecionados pelo usuário através dos checkboxes
	for nInd := 1 to len(aSelectedCheckBox)
		aSelectedCheckBox[nInd] := DwStr(aSelectedCheckBox[nInd])
	next
	DplItems(aSelectedCheckBox, .T.)
	      
	//Elimina os itens excluídos.
	for nInd := 1 to len (aSelectedCheckBox)
		if ( "|" + (DwStr(aSelectedCheckBox[nInd]) + "|") $ cCkbUnselected )
		   aDel(aSelectedCheckBox, nInd)		
		endif
	next 

	// concatena os checkboxes selecionados
	cCkbSelected := DwConcatWSep("|", aSelectedCheckBox)   		              
		
	// controle de sessão
	DwSetProp(VIEWDATA_SELECTCHCK, cCkbSelected, ID_VIEW_NAMPRG) 

	// codifica os elementos já rearranjados
	cCkbSelected := URLEncode(cCkbSelected)
return aSelectedCheckBox 
%>       