<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwOpenDW - Abertura do SigaDW
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 28.09.05 | 0548-Alan Candido | Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwBuildAba.ch"

#define MENU_NAVEG		"MENU_NAVEG_LINK"
#define PRG_NAME		"dwBuildAba.aph"

Local aBuffer := {}, aAbas := {}
Local cJSAbaInit := "", cJS := ""

if isNull(HttpGet->ws, "") == ""
	if isNull(HttpGet->isPrinting, CHKBOX_OFF) == CHKBOX_OFF
		if oUserDW:UserIsAdm()
			aAbas := buildAdminEnv()
		else
			aAbas := buildUserEnv()
		endif
		if isNull(HttpGet->buildMenu, CHKBOX_ON) == CHKBOX_ON
			cJSAbaInit := buildNaveg(aBuffer, aAbas, HttpSession->CurrentAba, HttpSession->FolderMenu)
			aEval(aBuffer, { |x| HttpSend(x+CRLF) })
		endif
	endif

	aBuffer := {}
	oSigaDW:buildBeginBody(aBuffer)

	aAdd(aBuffer, h_dwProcAba())

	oSigaDW:buildEndBody(aBuffer)

	// ser for menu do tipo árvore
	if isNull(HttpGet->isPrinting, CHKBOX_OFF) == CHKBOX_OFF .and. !dwIsFlex()
		if !HttpSession->FolderMenu
			cJS += tagJS()
			cJS += cJSAbaInit + CRLF
			cJS += '</script>' + CRLF
		endif
	endif
else
	cJS := ""
endif

return cJS

static function buildUserEnv()
    
	local aAbas := {}, aAbaCur, cTemp := ""
	
	makeAba(aAbas, STR0029, "desktopWorkspace" ) //"Área de Trabalho"
	makeAba(aAbas, STR0030, "desktopMaintenance") //"Manutenção de Consultas de Usuário"
	
	if HttpSession->CurrentAba[1] == "desktopWorkspace"
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0029, nil, {{"aba", "desktopWorkspace"}}) + cTemp) //"Área de Trabalho"
		
		// ser for menu do tipo árvore
		if !HttpSession->FolderMenu
			HttpSession->FolderMenu := .T.
		endif
	elseif HttpSession->CurrentAba[1] == "desktopMaintenance" .OR. HttpSession->CurrentAba[1] == "querys"
		if empty(HttpSession->CurrentAba[2])
			if oUserDW:UserIsAdm()
				HttpSession->CurrentAba[2] := "querys_predef"
			else
				HttpSession->CurrentAba[2] := "querys_users"
			endif
		endif
		
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0030, nil, {{"aba", "desktopMaintenance"}})) //"Manutenção de Consultas de Usuário"
		
		if HttpSession->FolderMenu
			aAbaCur := aAbas[2, ABA_ABAS]
		 	buildQuerysMenu(aAbaCur)
		endif
	endif
	
	// ser for menu do tipo árvore
	if !HttpSession->FolderMenu
		aAbaCur:= aAbas[2, ABA_ABAS]
		buildQuerysMenu(aAbaCur)
	endif
	
return aAbas

static function buildAdminEnv()
	
	local aAbas := {}, aAbaCur, cTemp := ""
	
	makeAba(aAbas, STR0001, "main") //"Principal"
	makeAba(aAbas, STR0002, "definitions") //"Definições"    
	makeAba(aAbas, STR0003, "querys") //"Consultas"
	makeAba(aAbas, STR0004, "tools") //"Ferramentas"
	makeAba(aAbas, STR0005, "apoio") //"Apoio"
	makeAba(aAbas, STR0006, "users") //"Usuários"
	
	if HttpSession->CurrentAba[1] == 'main'
		if empty(HttpSession->CurrentAba[2])
			HttpSession->CurrentAba[2] := "main_log"
			cTemp := "|" + STR0008 //"Log"
		endif
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0001, nil, {{"aba", "main"}}) + cTemp) //"Principal"
		
		if HttpSession->FolderMenu
			aAbaCur := aAbas[1, ABA_ABAS]
		 	buildMainMenu(aAbaCur)
		endif
		
	elseif HttpSession->CurrentAba[1] == 'definitions'
		if empty(HttpSession->CurrentAba[2])
			HttpSession->CurrentAba[2] := "definitions_dimensions"
		endif
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0002, nil, {{"aba", "definitions"}})) //"Definições"
		
		if HttpSession->FolderMenu
			aAbaCur := aAbas[1, ABA_ABAS]
		 	buildDefinitionsMenu(aAbaCur)
		endif
		
	elseif HttpSession->CurrentAba[1] == 'querys'
		if empty(HttpSession->CurrentAba[2])
			HttpSession->CurrentAba[2] := 'querys_predef'
		endif
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0003, nil, {{"aba", "querys"}})) //"Consultas"
		
		if HttpSession->FolderMenu
			aAbaCur := aAbas[1, ABA_ABAS]
		 	buildQuerysMenu(aAbaCur)
		endif
		
	elseif HttpSession->CurrentAba[1] == "tools"
		if empty(HttpSession->CurrentAba[2])
			HttpSession->CurrentAba[2] := 'tools_metall'
			cTemp := "|" + STR0018 + "|" //"Meta Dados"
		endif
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0004, nil, {{"aba", "tools"}}) + cTemp) //"Ferramentas"
		
		if HttpSession->FolderMenu
			aAbaCur := aAbas[1, ABA_ABAS]
		 	buildToolsMenu(aAbaCur)
		endif
		
	elseif HttpSession->CurrentAba[1] == 'apoio'
		if empty(HttpSession->CurrentAba[2])
			HttpSession->CurrentAba[2] := "apoio_periodo"
		endif
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0005, nil, {{"aba", "apoio"}})) //"Apoio"
		
		if HttpSession->FolderMenu
			aAbaCur := aAbas[1, ABA_ABAS]
		 	buildSuportMenu(aAbaCur)
		endif
		
	elseif HttpSession->CurrentAba[1] == 'users'
		if empty(HttpSession->CurrentAba[2])
			HttpSession->CurrentAba[2] := 'users_groups'
		endif
		// define o link de navegação
		addNavegMenu('<a href=' + makeAction(AC_SELECT_DW) + '>' + STR0007 + '</a>', .T.) //'Home'
		addNavegMenu(tagLink(AC_SELECT_ABA, STR0006, nil, {{"aba", "users"}})) //"Usuários"
		
		if HttpSession->FolderMenu
			aAbaCur := aAbas[1, ABA_ABAS]
		 	buildUsersMenu(aAbaCur)
		endif
		
	else
		dwRaise(ERR_003, SOL_002, HttpSession->CurrentAba[1])
		
	endif
	
	// ser for menu do tipo árvore
	if !HttpSession->FolderMenu	
		aAbaCur := aAbas[1, ABA_ABAS]
		buildMainMenu(aAbaCur)
		
		aAbaCur := aAbas[2, ABA_ABAS]
		buildDefinitionsMenu(aAbaCur)
		
		aAbaCur:= aAbas[3, ABA_ABAS]
		buildQuerysMenu(aAbaCur)
		
		aAbaCur := aAbas[4, ABA_ABAS]
		buildToolsMenu(aAbaCur)
	
		aAbaCur := aAbas[5, ABA_ABAS]
		buildSuportMenu(aAbaCur)
		
		aAbaCur:= aAbas[6, ABA_ABAS]
		buildUsersMenu(aAbaCur)
	endif
	
return aAbas

/*
--------------------------------------------------------------------------------------
Função responsável por construir o menu de Principal
Args: aaAbaCur, array, contém o array contendo as abas
Ret.:
--------------------------------------------------------------------------------------
*/
static function buildMainMenu(aaAbaCur)

	makeAba(aaAbaCur, STR0008, ; //"Log"
				{ { STR0009, "main_log" } , ; //"Aplicativo"
				  { STR0010,  "main_action" } } ) //"Usuário"
	makeAba(aaAbaCur, STR0011, "main_scheduler") //"Agendamento"
	makeAba(aaAbaCur, STR0012, "main_process") //"Processo"
	makeAba(aaAbaCur, STR0013, "main_config") //"Configuração"
	makeAba(aaAbaCur, STR0014, "main_mensagens") //"Mensagens"
	
return

/*
--------------------------------------------------------------------------------------
Função responsável por construir o menu de Denições
Args: aaAbaCur, array, contém o array contendo as abas
Ret.:
--------------------------------------------------------------------------------------
*/
static function buildDefinitionsMenu(aaAbaCur)
	
	makeAba(aaAbaCur, STR0015, "definitions_dimensions") //"Dimensões"
	makeAba(aaAbaCur, STR0016, "definitions_cubes") //"Cubos"
	
return

/*
--------------------------------------------------------------------------------------
Função responsável por construir o menu de Consultas
Args: aaAbaCur, array, contém o array contendo as abas
Ret.:
--------------------------------------------------------------------------------------
*/
static function buildQuerysMenu(aaAbaCur)

	if oUserDW:UserIsAdm()
		makeAba(aaAbaCur, STR0017, "querys_predef") //"Pré-Definidas"
	endif
	makeAba(aaAbaCur, STR0006, "querys_users") //"Usuários"
	
return

/*
--------------------------------------------------------------------------------------
Função responsável por construir o menu de Ferramentas
Args: aaAbaCur, array, contém o array contendo as abas
Ret.:
--------------------------------------------------------------------------------------
*/
static function buildToolsMenu(aaAbaCur)
	
	makeAba(aaAbaCur, STR0018, ; //"Meta Dados"
								{ 	{ STR0019, "tools_metall" }, ; //"Tudo"
									{ STR0015, "tools_metdim" }, ; //"Dimensões"
									{ STR0016, "tools_metcub" }, ; //"Cubos"
									{ STR0003, "tools_metqry" } ; //"Consultas"
								} )
	
	makeAba(aaAbaCur, STR0020, "tools_importacao") //"Importação"
	
	makeAba(aaAbaCur, STR0021, ; //"Limpeza"
							{ 	{ STR0019, "tools_clnall" }, ; //"Tudo"
								{ STR0015, "tools_clndim" }, ; //"Dimensões"
								{ STR0016, "tools_clncub" }, ; //"Cubos"
								{ STR0022, "tools_clnqry" } ; //"Consulta"
							} )

	if oSigaDW:HaveDimEmpFil()
		makeAba(aaAbaCur, STR0031, ; //"Sinc. SigaMat"
						{ { STR0032, "tools_sigamat" }, ; //"Empresas/Filiais"
						  { STR0033, "tools_comp" } ;  //"Compartilhamentos"
 						} )
	endif	
return

/*
--------------------------------------------------------------------------------------
Função responsável por construir o menu de Apoio
Args: aaAbaCur, array, contém o array contendo as abas
Ret.:
--------------------------------------------------------------------------------------
*/
static function buildSuportMenu(aaAbaCur)

	makeAba(aaAbaCur, STR0023, "apoio_periodo") //"Períodos"
	
	makeAba(aaAbaCur, STR0024, ; //"Conexões"
	                        { 	{ STR0025          , "apoio_conexao_all" }, ; //"Todas"
	                           	{ "Top Connect"    , "apoio_conexao_top" }, ;
	                            { "Protheus-SX"    , "apoio_conexao_sx" }, ;
	                            { STR0026, "apoio_conexao_direto" } ; //"Protheus-Direto"
							} )
return

/*
--------------------------------------------------------------------------------------
Função responsável por construir o menu de Usuários
Args: aaAbaCur, array, contém o array contendo as abas
Ret.:
--------------------------------------------------------------------------------------
*/
static function buildUsersMenu(aaAbaCur)
	
	makeAba(aaAbaCur, STR0027, "users_groups") //"Grupos"
	makeAba(aaAbaCur, STR0006, "users_users") //"Usuários"
	makeAba(aaAbaCur, STR0028, "users_priv") //"Privilégios"
	
return

/*
--------------------------------------------------------------------------------------
Função responsável por definir mais um nível de menu de navegação por links OU inicializar
um novo menu (através do argumento alOverride, que deverá estar com .T.)
Args:	acValue, string, contém o valor a ser acrescentado ao menu
		alOverride, lógico, inicializa/sobrescreve o menu
		alInvert, lógico, inverte a posição aonde o argumento acValue será acrescentado
Ret.:
--------------------------------------------------------------------------------------
*/
function addNavegMenu(acValue, alOverride, alInvert)
	default alOverride 	:= .F.
	default alInvert	:= .F.

	if !alOverride
		if !alInvert
			DwSetProp(MENU_NAVEG, getNavegMenu() + "|" + acValue, PRG_NAME)
		else
			DwSetProp(MENU_NAVEG, acValue + "|" + getNavegMenu(), PRG_NAME)
		endif
	else
		DwSetProp(MENU_NAVEG, acValue, PRG_NAME)
	endif
return

/*
--------------------------------------------------------------------------------------
Função responsável por recupera o menu de navegação por links
Args:
Ret.: string, texto o link de navegação
--------------------------------------------------------------------------------------
*/
function getNavegMenu()
	Local cRet := DwGetProp(MENU_NAVEG, PRG_NAME)
return iif (!empty(cRet), cRet, "")

/*
--------------------------------------------------------------------------------------
Função responsável por criar o menu de navegação por links
Args: alVerifDpl, lógico, verifica itens duplicados
Ret.:
--------------------------------------------------------------------------------------
*/
function makeNavegMenu(alVerifDpl)
	
	Local aAux := DwToken(getNavegMenu(), '|')
	
	default alVerifDpl := .T.
	
	// verifica itens duplicados
	if alVerifDpl
		DplItems(aAux, .T., , .T.)
	endif
	
	// sobrescre o link de navegação
	addNavegMenu(DwConcatWSep(" > ", aAux), .T.)
	
return
%>