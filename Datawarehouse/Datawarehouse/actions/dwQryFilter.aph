<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwCubFilter - Exibição de filtros para cubos ou consultas
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 26.07.06 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwCubManutConst.ch"
#include "dwQueryManu.ch"
#include "dwQryFilter.ch"

private aExprParams
private nOperation := OP_SUBMIT, lEdit := .T.
private cType := HttpGet->ObjType
private nIdObj, oObj, oWhere
private nIdFilter
private lOK := .T., lOperSubmit, lBackList := .F.
private nOper, nSubOper
private aFields := {}, aButtons := {}, aOperButtons := {}
private cNome, cDescricao, cTipo, lVirtual, nIdVirtual
private cNextAction, cPreviousAction
private aActionParams
private aObjWhere
private aFuncButtons 	:= {}
private aProcRow
private lWizard

HttpSession->subOper	:= nOper := iif (!empty(HttpGet->oper), DwVaL(HttpGet->oper), DwVaL(HttpGet->suboper))
nSubOper				:= DwVaL(HttpGet->suboper)

// verifica qual é o tipo de objeto para o qual será definido filtros
if cType == OBJ_QUERY
	initFltrQuery()
elseif cType == OBJ_CUBE
	initFltrCube()
endif

aActionParams	:= { {"ObjId", DwStr(nIdObj)}, {"ObjType", cType} }

if nOper == OP_REC_NEW .OR. nOper == OP_REC_EDIT .OR. nOper == OP_REC_DEL .OR. nOper == OP_SUBMIT
	nIdFilter := iif (!empty(HttpGet->ID), dwVal(HttpGet->ID), HttpPost->edID)
	
	// ação de "anterior" na página de indicadores
	if nOper == OP_REC_STEPS
	    lOperSubmit	:= .F.
	    lBackList	:= .F.
	    nOper 		:= OP_REC_STEPS
	elseif nOper == OP_SUBMIT
		lOperSubmit := .t.
		
		aValues := oWhere:fromPost(HttpPost->APost)
		
		if nSubOper == OP_REC_NEW
			if (lOK := oWhere:append(aValues))
				nIdFilter := oWhere:value("id")
			endif
		else  
			//Ao editar o filtro
			if oWhere:seek(1, { dwVal(nIdFilter) })
				if nSubOper == OP_REC_STEPS .or. nSubOper == OP_REC_EDIT
					if nSubOper == OP_REC_EDIT
						lBackList := .T.
					endif
					lOK := oWhere:update(aValues)					    		

            		//Verifica se o filtro está sendo alterado para obrigatório. 
			        If ( oWhere:value("tipo") == FILTER_SECURE ) 
					    					   
						oWhereCond := InitTable(TAB_WHERE_COND)
						
						If oWhereCond:Seek(2, { dwVal(nIdFilter)} )
				   			While ( !oWhereCond:EOF() .AND. oWhereCond:value("id_where") == dwVal(nIdFilter) )	   			
				   			
				   			    //Remove os prompts existentes nas expressões do filtro. 
				   			   	oWhereCond:Update( {{"qbe", strTran(oWhereCond:value("qbe"), ":") }} )
				   		   
				   				oWhereCond:_Next()
				   			EndDo				   			
					    EndIf 
				    EndIf  
					
					
				elseif nSubOper == OP_REC_DEL
					lOK := oWhere:delete()
					lBackList := .T.
				endif
			else
				dwRaise(ERR_005, SOL_003, nIdFilter)
			endif
		endif
		
		if !lOK          	
			DWRaise(ERR_002, SOL_000, oWhere:Msg(.t.))
		endif

		if !(cType == OBJ_CUBE)
			invalCons(oWhere:value("id_cons"), .f., .f.)
		endif
	endif
    
	if oWhere:seek(1, { dwVal(nIdFilter) })
		cNome       := oWhere:value("nome")
		cDescricao  := oWhere:value("descricao")
		cTipo		:= oWhere:value("tipo")
		lVirtual	:= oWhere:value("virtual")
		nIdVirtual	:= oWhere:value("id_virtual") 
	else
		cNome       := ''
		cDescricao  := ''
		cTipo		:= '0'
		lVirtual	:= .F.
		nIdVirtual	:= 0
	endif
	
	makeHidden(aFields, 	'edID'			, nIdFilter)
	makeKeyField(aFields, 	'edNome'		, STR0001	, .T., "C", 15, 0, , cNome) //'Nome'
	makeField(aFields, 		'edDescricao'	, STR0002	, .T., "C", 15, 0, , cDescricao) //'Descrição'
	

	if cType == OBJ_QUERY
		makeHidden(aFields	, 'edId_cons'	, nIdObj)
		makeCombo(aFields	, 'edTipo'		, STR0003	, .T., { { "", "" }, { STR0004, 0 }, { STR0005, 1 }, { STR0006, 2 } }, , cTipo) //'Tipo de Filtro'###"Opcional"###"Obrigatório"###"Segmento"
	else
		makeHidden(aFields	, 'edId_cube'	, nIdObj)
		makeHidden(aFields	, 'edTipo'		, cTipo)  
	endif
	
	makeHidden(aFields	, 'edVirtual'	, lVirtual)
	makeHidden(aFields	, 'edId_virtual', nIdVirtual)
	
	%>
	<%= buildForm('frmQuery', STR0008, HttpGet->Action, nOperation, aButtons, aFields, lEdit, , , , , , , , , , , , , aActionParams) %> <% //'Filtro' %>
    <% if lOperSubmit
    	aAdd(aActionParams, { "id", nIdFilter })
    	if lBackList %>
  			<%= buildAutoAction(HttpGet->Action, aActionParams) %>
  		<% else %>                                                 
  			<%= buildAutoAction(AC_QUERY_DECLFLTR, aActionParams,,.f.,,,0.85,0.75) %>
  		<% endif
	endif
	
else    
            
	// define o icone de editar expressão para cada filtro
	aExprParams := aClone(aActionParams)
	aAdd(aExprParams, {"oper", DwStr(OP_REC_NO_STEPS)})
	aAdd(aExprParams, {"Close", CHKBOX_ON})
 	
	makeOperAct(aOperButtons, STR0009, "ic_query_filter_expr.gif", AC_QUERY_DECLFLTR, aExprParams, TARGET_90_BLANK, .f., , .T.) //"Definir expressão"
		
	if lWizard
		makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0012, STR0013, "bt_ocioso.gif", "doNext()", "left") //"próximo"###"Definição de Campos Virtuais"
		makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0014, STR0015, "bt_ocioso.gif", "doPrevious()", "left") //"anterior"###"Retorna para a definição da Consulta"
	endif
	makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0016, STR0017, "bt_ocioso.gif", "doClose()", "left") //"fechar"###"Retorna para a lista de Consultas"
	%>
	
    <%= buildBrowse(STR0018 + " <small>" + oObj:value("nome") + "</small>", .T., oWhere:Tablename(), , , , , aObjWhere, aButtons, 10, HttpGet->Action, HttpGet->Action, aOperButtons, , , , aFuncButtons, , lEdit, , aActionParams, , aProcRow) %> <% /*"Filtros "*/%>
<% endif %>

<%=tagJS()%>
	
	function doDefineValues() {
		doLoad(<%= makeAction(AC_QRY_FLTR_VALUE, { { "id_cons", DwStr(nIDObj) } }) %>, "_window", this, "WinPattValues", <%= TARGET_75_WINDOW %>, <%= TARGET_50_WINDOW %>);
		return false;
	}
	
	function doNext() {
 		doLoadHere(<%= cNextAction %>);
    return false;
	}
	
	function doPrevious() {
  		doLoadHere(<%= cPreviousAction %>);
    return false;
	}
</script>
<%
static function initFltrQuery()
	nIdObj 	:= DwVal(iif (!empty(HttpGet->ID_CONS), HttpGet->ID_CONS, iif (!empty(HttpPost->edId_cons), HttpPost->edId_cons, iif (!empty(HttpGet->ObjId), HttpGet->ObjId, HttpGet->Id))))
	oObj 	:= InitTable(TAB_CONSULTAS)
	oWhere	:= InitTable(TAB_WHERE)
	
	if !oObj:Seek(1, { nIdObj } )
		dwRaise(ERR_005, SOL_003, nIdObj)
	endif
	
	aObjWhere := { "ID_CONS=" + DwStr(nIdObj)}
	
	// define a funcionalidade para valores padrão
	makeItemToolbar(aFuncButtons, STR0010, STR0011, "ic_query_value.gif", 'js:doDefineValues();', "right") //"valores padrão"###"Definir valores obrigatórios"
	
	// code block para verificação para cada linha
	aProcRow := { |aaData| procRowsVisually(aaData, "virtual", .T.) }
	
	// verifica se a operação é igual a operação simples de alteração
	if !(nOper == OP_REC_NO_STEPS)
		lWizard			:= isNull(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY), OP_NONE) == OP_REC_STEPS
	endif
	
	// verifica privilégio para dar manutenção (CASO não seja administrador)
	lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nIDObj)
	if (nOper == OP_REC_EDIT .OR. nOper == OP_REC_DEL) .and. !lEdit
		// exibe msg de que o usuário não possui permissão
		HttpSession->DWErrMsg := STR0007 //"Atenção: usuário não possui privilégio de manutenção desta consulta."
		makeButton(aButtons, BT_CLOSE)
		nOperation := OP_NONE
	endif
	
	cNextAction 		:= makeAction(AC_QUERY_ALERT, { { "Oper", OP_REC_STEPS } })
	cPreviousAction 	:= makeAction(AC_QUERY_VIRTFLD, { { "id", nIdObj }, { "Obj", OBJ_QUERY }, { "type", httpPost->edType }, { "Oper", OP_REC_STEPS } })
	
return

static function initFltrCube()
	nIdObj 	:= DwVal(iif (!empty(HttpGet->ID_CUBE), HttpGet->ID_CUBE, iif (!empty(HttpPost->edId_cube), HttpPost->edId_cube, iif (!empty(HttpGet->ObjId), HttpGet->ObjId, HttpGet->Id))))
	oObj	:= oSigaDW:Cubes():CubeList()
	oWhere	:= InitTable(TAB_FACT_WHERE)
	
	// verifica/valida o cubo assoaciado a este action
	if !oObj:Seek(1, { nIdObj } )
		dwRaise(ERR_005, SOL_003, nIdObj)
	endif
	
	aObjWhere := { "ID_CUBE=" + DwStr(nIdObj) }
	
	// verifica se a operação é igual a operação simples de alteração
	if !(nOper == OP_REC_NO_STEPS)
		lWizard			:= isNull(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_CUB), OP_NONE) == OP_REC_STEPS
	endif

	// verifica privilégio para dar manutenção (CASO não seja administrador)
	if !oUserDW:UserIsAdm()
		lEdit := oUserDW:GetCubMaintPerm(HttpSession->CurrentDW, nIDObj)
		if (nOper == OP_REC_EDIT .OR. nOper == OP_REC_DEL) .and. !lEdit
			// exibe msg de que o usuário não possui permissão
			HttpSession->DWErrMsg := STR0019 //"Atenção: usuário não possui privilégio de manutenção deste cubo."
			makeButton(aButtons, BT_CLOSE)
			nOperation := OP_NONE
		endif
	endif
	
	cNextAction 		:= makeAction(AC_QUERY_VIRTFLD	, { { "id", nIdObj}, { "Oper", OP_REC_STEPS } })
	cPreviousAction 	:= makeAction(AC_CUB_IND		, { { "id", nIdObj}, { "Oper", OP_REC_STEPS } })
	
return
