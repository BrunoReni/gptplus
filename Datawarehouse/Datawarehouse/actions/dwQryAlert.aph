<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQuerysAlert - Exibição de alerts de consultas
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 20.12.05 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwQryAlert.ch"

Local oCons		:= InitTable(TAB_CONSULTAS)
Local nID 		:= iif (!empty(HttpGet->ID), DwVal(HttpGet->ID), dwVal(HttpPost->edID))
Local oQuery
Local oAlert

Local nIDExpr, cNome, cCorTF, cCorTB, cFontT, cCorFF, cCorFB, cFontF, cExpressao, cMsgT, cMsgF
Local nIDCons
Local lOperSubmit
Local cAlertType:= 'A'
Local optFont 	:= { { STR0001, "N" }, { STR0002, "I" }, { STR0003, "B" } } //"Normal"###"Itálico"###"Negrito"
Local aButtons	:= {}
Local cQryName
Local lClose := .F.
Local nOwnerId
Local lEdit := .T., nOper := OP_SUBMIT
Local aOk

// trata o id da consulta
// se a ação for a ação de editar sem ser por steps
if DwVaL(HttpGet->Oper) == OP_REC_NO_STEPS
	nIDCons := DwVal(HttpGet->ID)	// recupera do get

	// trata a sessão aonde contêm o id da consulta
	DwSetProp(ID_ID_QUERY, DwStr(nIDCons), ID_NAME_PRG_QRY)
	DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_NO_STEPS), ID_NAME_PRG_QRY)
else								// em outro caso recupera da session
	nIDCons := DwVal(DwGetProp(ID_ID_QUERY, ID_NAME_PRG_QRY))
endif

if !oCons:Seek(1, { nIDCons } )
	dwRaise(ERR_005, SOL_003, nIDCons)
else
	cQryName := oCons:value("nome")
	nOwnerId  := oCons:value("id")
endif

// cria objetos consulta e alerta
oQuery	:= TConsulta():New(nIDCons)
oAlert 	:= TAlert():New(nID, oQuery)
oAlert:Selected(.T.)

if HttpGet->Action == AC_REC_ALERT
	aFields := {}
	aButtons := {}
	HttpGet->Oper := DwVal(HttpGet->Oper)
	
	// ação de "anterior" na página de indicadores
	if HttpGet->Oper == OP_REC_STEPS
	    lOperSubmit 		 := .F.
	    HttpSession->subOper := OP_REC_STEPS
	elseif HttpGet->Oper == OP_SUBMIT
		lOperSubmit := .t.
		
		if HttpSession->subOper == OP_REC_DEL
			oAlert:DoDelete()
		elseif HttpSession->subOper == OP_REC_STEPS .OR. HttpSession->subOper == OP_REC_EDIT .OR. ;
				HttpGet->Oper == OP_SUBMIT
			oAlert:Name(HttpPost->edNome)
			oAlert:Tipo(HttpPost->edTipo)
			oAlert:CorTF(HttpPost->edCorTF)
			oAlert:CorTB(HttpPost->edCorTB)
			oAlert:FonteT(HttpPost->edFonteT)
			oAlert:CorFF(HttpPost->edCorFF)
			oAlert:CorFB(HttpPost->edCorFB)
			oAlert:FonteF(HttpPost->edFonteF)
			oAlert:IDExpr(DwVal(HttpPost->edId_expr))
			oAlert:MsgT(iif (!empty(HttpPost->edMsgT), HttpPost->edMsgT, ""))
			oAlert:MsgF(iif (!empty(HttpPost->edMsgF), HttpPost->edMsgF, ""))
			
			if HttpSession->subOper == OP_REC_EDIT
				aOk := oAlert:DoSave()
			else
				aOk := oAlert:DoSaveNew()
			endif
			
			// não ocorreu com sucesso
			if !aOk[1]
				DWRaise(ERR_002, SOL_000, aOk[2])
			endif
			
			if HttpGet->Oper == OP_SUBMIT
				lClose := .T.
			endif
		endif
	else
		HttpSession->subOper := HttpGet->Oper
	endif
	                                                                        	
	if !empty(oAlert:Name())
		nIDExpr		:= oAlert:IDExpr()
		cNome     := oAlert:Name()
		cCorTF		:= oAlert:CorTF()
		cCorTB		:= oAlert:CorTB()
		cFontT		:= oAlert:FonteT()
		cCorFF		:= oAlert:CorFF()
		cCorFB		:= oAlert:CorFB()
		cFontF		:= oAlert:FonteF()
		cExpressao	:= oAlert:Expressao()
		cMsgT		:= oAlert:MsgT()
		cMsgF		:= oAlert:MsgF()
	else
		nIDExpr		:= 0
		cNome 		:= ''
		cCorTF		:= ''
		cCorTB 		:= ''
		cFontT 		:= 'N'
		cCorFF 		:= ''
		cCorFB 		:= ''
		cFontF 		:= 'N'
		cExpressao 	:= ''
		cMsgT 		:= ''
		cMsgF  		:= ''
	endif
	
	makeHidden(aFields, 	'edID'      	, nID)
	makeHidden(aFields, 	'edID_CONS'   , nIDCons)
	makeHidden(aFields, 	'edTipo'    	, cAlertType)
	makeKeyField(aFields,	'edNome'      , STR0004, .T., 'C', 15, 0,, cNome) //'Nome'
	makeDotField(aFields,	'edExpressao'	, STR0005, .T., "M", 3, 25,, cExpressao) //'Expressão'
	makeHidden(aFields, 	'edId_expr'		, nIDExpr)
	
	makeBlankRow(aFields)
	makeTitle(aFields, STR0006) //"Em condição verdadeira:"
	if isFireFox()	
		makeDotField(aFields, "dotEdCorTF", STR0007, .F., "C", 10, 0, , cCorTF, , 'showPalleteColor("edCorTF", event)') //"Cor da Fonte"
	else
		makeDotField(aFields, "dotEdCorTF", STR0007, .F., "C", 10, 0, , cCorTF, , 'showPalleteColor("edCorTF")') //"Cor da Fonte"
	endif	
	makeHidden(aFields, "edCorTF", cCorTF)
	if isFireFox()	
		makeDotField(aFields, "dotEdCorTB", STR0008, .F., "C", 10, 0, , cCorTB, , 'showPalleteColor("edCorTB", event)') //"Cor do Fundo"
	else
		makeDotField(aFields, "dotEdCorTB", STR0008, .F., "C", 10, 0, , cCorTB, , 'showPalleteColor("edCorTB")') //"Cor do Fundo"
	endif
	makeHidden(aFields, "edCorTB", cCorTB)
	makeRadioField(aFields, "edFonteT", STR0009, .F., , cFontT, optFont) //"Fonte"
	makeDotField(aFields, "edMsgT", STR0010, .F., "M", 3, 25, , cMsgT, , 'alertSample_open("DwQryTrue", "edMsgT")', .T.) //"Mensagem"
	makeCustom(aFields, "DwAlertTrue", oAlert:SampleMessages(NIL, "DwQryTrue", .T., "DwAlertMsgTrue", .F.))
	
	makeTitle(aFields, STR0011) //"Em condição não verdadeira:"
	
	if isFireFox()	
		makeDotField(aFields, "dotEdCorFF", STR0007, .F., "C", 10, 0, , cCorFF, , 'showPalleteColor("edCorFF", event)') //"Cor da Fonte"
	else
		makeDotField(aFields, "dotEdCorFF", STR0007, .F., "C", 10, 0, , cCorFF, , 'showPalleteColor("edCorFF")') //"Cor da Fonte"
	endif
	makeHidden(aFields, "edCorFF", cCorFF)
	if isFireFox()	
		makeDotField(aFields, "dotEdCorFB", STR0008, .F., "C", 10, 0, , cCorFB, , 'showPalleteColor("edCorFB", event)') //"Cor do Fundo"
	else
		makeDotField(aFields, "dotEdCorFB", STR0008, .F., "C", 10, 0, , cCorFB, , 'showPalleteColor("edCorFB")') //"Cor do Fundo"
	endif
	makeHidden(aFields, "edCorFB", cCorFB)
	makeRadioField(aFields, "edFonteF", STR0009, .F., , cFontF, optFont) //"Fonte"
	makeDotField(aFields, "edMsgF", STR0010, .F., "M", 3, 25, , cMsgF, , 'alertSample_open("DwQryFalse", "edMsgF")', .T.) //"Mensagem"
	makeCustom(aFields, "DwAlertFalse", oAlert:SampleMessages(NIL, "DwQryFalse", .F., "DwAlertMsgFalse", .F.))
	
	// verifica privilégio para dar manutenção
	lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nIDCons)
	// exibe msg de que o usuário não possui permissão
	if !lEdit
		HttpSession->DWErrMsg := STR0012 //"Atenção: usuário não possui privilégio de manutenção desta consulta."
		makeButton(aButtons, BT_CLOSE)
		nOper := OP_NONE
	endif
	%>
	
	<%= tagJS() %>

		function frmAlert_valid(oSender) {
			var lRet = true;
			var lCorTF, lCorTB, lCorFF, lCorFB;
			
			var lDis = getElement('edExpressao').disabled;
			getElement('edExpressao').disabled = false;
			lRet = doValidField(getElement('edExpressao'), true, "C", 4, 0, 1, 4, getElement('edExpressao'));
			getElement('edExpressao').disabled = lDis;
			
			if (lRet) {
				lCorTF = doValidField(getElement("edCorTF"), true, "C", 10, 0);
				lCorTB = doValidField(getElement("edCorTB"), true, "C", 10, 0);
				lCorFF = doValidField(getElement("edCorFF"), true, "C", 10, 0);
				lCorFB = doValidField(getElement("edCorFB"), true, "C", 10, 0);
				
				defineFieldMessage(getElement("edCorTF"), "");
				defineFieldMessage(getElement("edCorTB"), "");
				defineFieldMessage(getElement("edCorFF"), "");
				defineFieldMessage(getElement("edCorFB"), "");
				
				if (!lCorTF && !lCorTB && !lCorFF && !lCorFB) {
					defineFieldMessage(getElement("dotEdCorTF"), "<%= STR0021 %>"); //"Atenção, preenchimento obrigatório de pelo menos um dos seguintes campos: Cor da Fonte ou Cor do Fundo (Em caso verdadeiro) ou Cor da Fonte ou Cor do Fundo (Em caso não verdadeiro)"
					defineFieldMessage(getElement("dotEdCorTB"), "<%= STR0021 %>"); //"Atenção, preenchimento obrigatório de pelo menos um dos seguintes campos: Cor da Fonte ou Cor do Fundo (Em caso verdadeiro) ou Cor da Fonte ou Cor do Fundo (Em caso não verdadeiro)"
					defineFieldMessage(getElement("dotEdCorFF"), "<%= STR0021 %>"); //"Atenção, preenchimento obrigatório de pelo menos um dos seguintes campos: Cor da Fonte ou Cor do Fundo (Em caso verdadeiro) ou Cor da Fonte ou Cor do Fundo (Em caso não verdadeiro)"
					defineFieldMessage(getElement("dotEdCorFB"), "<%= STR0021 %>"); //"Atenção, preenchimento obrigatório de pelo menos um dos seguintes campos: Cor da Fonte ou Cor do Fundo (Em caso verdadeiro) ou Cor da Fonte ou Cor do Fundo (Em caso não verdadeiro)"
					defineFieldError(getElement("dotEdCorTF"));
					lRet = false;
				}
			}
			
			return lRet;
		}
	
	</script>
	
	<%=tagJS()%>
		function edExpressao_dot(oSender) {
			<% if lEdit %>
				doEditAdvpl("<%= STR0005 %>", getElement('edId_expr').value, -1, 'edId_expr', 'edExpressao', "<%=OBJ_QUERY%>", <%=nOwnerId%>);
			<% endif %>
		}
		
		function u_bodyonload()
		{
			alertSample_close("DwQryTrue", "edMsgT");
			alertSample_close("DwQryFalse", "edMsgF");
		}

    function u_setWindowPosSize()
    {
      setWindowSize(550, 650);
    }

	</script>
	
	<%= buildForm('frmAlert', STR0013, HttpGet->Action, nOper, aButtons, aFields, , , , ) %> <%= /*'Alerta'*/ %>
  <% if lOperSubmit
    	if lClose %>
    		<%= buildAutoAction(AC_QUERY_ALERT) %>
    	<% else %>
			<%= buildAutoAction(AC_QUERY_ALERT) %>
		<% endif
	endif
else
	if DwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)) == OP_REC_STEPS
		makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0014, STR0015, "bt_ocioso.gif", "doNext()", "left") //"próximo"###"Definição de Campos Virtuais"
		makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0016, STR0017, "bt_ocioso.gif", "doPrevious()", "left") //"anterior"###"Retorna para a definição da Consulta"
	endif
	makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0018, STR0019, "bt_ocioso.gif", "doClose()", "left") //"fechar"###"Retorna para a lista de Consultas"
	
	// verifica privilégio para dar manutenção
	lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nIDCons)
	%>
	<%=tagJS()%>
		function doNext() 
		{
	 		doLoadHere(<%=makeAction(AC_QUERY_DEF, { { "id", nIDCons }, { "Oper", OP_REC_STEPS }, { "Obj", OBJ_QUERY } })%>);
		}
	
		function doPrevious() 
		{
      doLoadHere(<%=makeAction(AC_QRY_CUB_FILTER, { { "id", nIDCons}, { "Oper", OP_REC_STEPS }, { "ObjType", OBJ_QUERY } })%>);
      return false;
		}

	</script>
	
	<%= buildBrowse(STR0020 + "<small> " + cQryName + '</small>', .t., TAB_ALERT, , , , { |aData| prepRow(aData) } , { "TIPO='" + cAlertType + "'", "ID_CONS=" + DwStr(nIDCons) }, aButtons, 10, AC_REC_ALERT, AC_QUERY_ALERT, , , , , , , lEdit) %> <%= /*'Alertas da Consulta '*/%>

<% endif

#define ID_V_COR_FONTE   6
#define ID_V_COR_FUNDO   7
#define ID_V_FONTE       8
#define ID_F_COR_FONTE   9
#define ID_F_COR_FUNDO   10
#define ID_F_FONTE       11

static function prepRow(aaData)
	local cAux

	if !empty(aaData[ID_V_COR_FONTE])
		aaData[ID_V_COR_FONTE] := "<span style='color:"+aaData[ID_V_COR_FONTE]+"'>" + aaData[ID_V_COR_FONTE] +"<span>"
	endif
	if !empty(aaData[ID_V_COR_FUNDO])
		aaData[ID_V_COR_FUNDO] := "<span style='background-color:"+aaData[ID_V_COR_FUNDO]+"'>" + aaData[ID_V_COR_FUNDO] +"<span>"
	endif
	if !empty(aaData[ID_V_FONTE])
		if aaData[ID_V_FONTE] == "B"
			cAux := "<span style='font-weight:bold;'>" + STR0003 + "</span>" //###"Negrito"
		elseif aaData[ID_V_FONTE] == "I"
			cAux := "<span style='font-style: italic;'>" + STR0002 + "</span>" //###"Itálico"
		else
			cAux := STR0001 //###"Normal"
		endif
		aaData[ID_V_FONTE] := cAux
	endif

	if !empty(aaData[ID_F_COR_FONTE])
		aaData[ID_F_COR_FONTE] := "<span style='color:"+aaData[ID_F_COR_FONTE]+"'>" + aaData[ID_F_COR_FONTE] +"<span>"
	endif
	if !empty(aaData[ID_F_COR_FUNDO])
		aaData[ID_F_COR_FUNDO] := "<span style='background-color:"+aaData[ID_F_COR_FUNDO]+"'>" + aaData[ID_F_COR_FUNDO] +"<span>"
	endif
	if !empty(aaData[ID_F_FONTE])
		if aaData[ID_F_FONTE] == "B"
			cAux := "<span style='font-weight:bold;'>" + STR0003 + "</span>" //###"Negrito"
		elseif aaData[ID_F_FONTE] == "I"
			cAux := "<span style='font-style: italic;'>" + STR0002 + "</span>" //###"Itálico"
		else
			cAux := STR0001 //###"Normal"
		endif
		aaData[ID_F_FONTE] := cAux
	endif

return .t.
%>