<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryCub - Seleção do cubo
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 20.12.05 |2481-Paulo R Vieira| Versão 3
// 23.11.07 | 0548-Alan Candido | BOPS 136539 - Ajuste de lay-out, quando não é admin
// 01.02.08 | 0548-Alan Candido | BOPS 140001 - Implementato tratamento para quando não
//          |                   | há cubos no DW ou o usuário não tem acesso a nenhum
// --------------------------------------------------------------------------------------
                                             
#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwQryCub.ch"

#define QUERY_USER_DESC		STR0017 //###"de Usuário"
#define QUERY_PREDEF_DESC	STR0018 //###"Pre-Definida"

Local oCube   
Local oQuery:= InitTable(TAB_CONSULTAS)
Local cNome, cDescricao, cTipo, nIdCube, lPublica, lExport, lSoGrupo, lExcel
Local nID 	:= HttpGet->ID, lOperSubmit, lClose
Local lOk
Local aCubes := {}
Local aButtons := {}
Local aAux, aCons, nInd, lHaveCons := .f.
Local lEdit := .T., nOper := OP_STEP
Local aChecksOnSubmit := {}
local lHabPOnl := .F.

aFields := {}
HttpGet->Oper := DwVal(HttpGet->Oper)

// trata o id do cubo
// se a ação for a ação de editar sem ser por steps
if HttpGet->Oper == OP_REC_NO_STEPS
	nID := DwVal(HttpGet->ID)	// recupera do get

	// trata a sessão aonde contêm o id do cubo
	DwSetProp(ID_ID_QUERY, DwStr(nID), ID_NAME_PRG_QRY)
	DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_NO_STEPS), ID_NAME_PRG_QRY)
else		// em outro caso recupera da session
	nID := DwVal(DwGetProp(ID_ID_QUERY, ID_NAME_PRG_QRY))
	if HttpGet->Oper == 0
		HttpGet->Oper 	:= DwVal(DwStr(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)))
	endif
endif

// ação de "anterior" na processo wizard
if HttpGet->Oper == OP_REC_STEPS
    lOperSubmit	:= .F.
    lClose		:= .F.
    lEdit 		:= .F.
    HttpSession->subOper := OP_REC_STEPS
elseif HttpGet->Oper == OP_STEP .OR. HttpGet->Oper == OP_SUBMIT
	lOperSubmit := .t.                                     
	aValues := oQuery:fromPost(HttpPost->APost)
	if !empty(HttpPost->edConsPai)
		DWCopyCons(dwVal(HttpPost->edConsPai), nID)
		lClose := .T.
	elseif oQuery:seek(1, { nID })
		lOk := oQuery:Update(aValues)
		if oQuery:value("GRUPO") == ""     
		 	oQuery:Update({ { "GRUPO", oQuery:value("cube_desc") } })
		endif		
		if HttpSession->subOper == OP_REC_EDIT .or. HttpSession->subOper == OP_REC_NO_STEPS
			lClose := .T.
		endif
		if !lOk
			DWRaise(ERR_002, SOL_000, oQuery:Msg(.t.))
		endif
	endif
else
	// desabilita a edição dos valores
	lEdit := .F.
	nOper := OP_NONE
	
	HttpSession->subOper := HttpGet->Oper
endif

if oQuery:seek(1, { nID })
	cNome       := oQuery:value("nome")
	cDescricao  := oQuery:value("descricao")
	cTipo		:= oQuery:value("tipo")
	nIdCube		:= oQuery:value("id_cube")
	lPublica	:= iif (empty(oQuery:value("publica")), .F., oQuery:value("publica"))
	lSoGrupo	:= iif (empty(oQuery:value("sogrupo")), .F., oQuery:value("sogrupo"))
	lExport 	:= iif (empty(oQuery:value("export")), .F., oQuery:value("export"))
	lExcel		:= iif (empty(oQuery:value("excel")), .F., oQuery:value("excel"))
	lHabPOnl 	:= oQuery:value("HabPOnl")
else
	dwRaise(ERR_005, SOL_003, nID)
endif

makeHidden(aFields, 'edID'      	, nID)
makeShow(aFields, 	'edNome'    	, STR0001, cNome) //'Nome'
makeShow(aFields, 	'edDescricao' 	, STR0002, cDescricao) //'Descrição'
makeHidden(aFields, 'edHabPOnl' , lHabPOnl)	


if cTipo == QUERY_USER
	makeShow(aFields, 'edTipoDesc', STR0003, QUERY_USER_DESC) //'Tipo de Consulta'
	makeField(aFields, 'edPublica', STR0004, .T., 'L',  1, 0,,lPublica) //'Publica'
	makeField(aFields, 'edSoGrupo', STR0005, .T., 'L',  1, 0,,lSoGrupo) //'Somente Grupo'
	makeField(aFields, 'edExport', STR0019, .T., 'L',  1, 0,,lExport) //"Usuários podem exportar"
else
	makeShow(aFields, 'edTipoDesc', STR0006, QUERY_PREDEF_DESC) //'Tipo'
endif                                                                                     


// recupera o cubo definido para esta consulta específica
oCube := TCube():New(nIdCube)

// ainda não foi definido o cubo para esta consulta entaum habilita a definição de cubo
if nIdCube == 0 .OR. empty(oCube:Name())
	lEdit := .T.
endif

// a edição dos campos está habilitada
if lEdit
	makeBlankRow(aFields)

	// lista de consultas disponiveis
	aAux := DWDetail(TAB_CONSULTAS, -1, { || { alltrim(descricao) +"( " + alltrim(nome)+ " )", id, nome }}, , 1, HttpSession->CurrentDW)
	aAux := aSort(aAux,,, { |x,y| x[1] < y[1]})
	aCons := { { "", "" } }
	for nInd := 1 to len(aAux)
		if aAux[nInd, 2] != nID
			if oUserDW:UserIsAdm() .OR. oUserDW:GetQryAcessPerm(HttpSession->CurrentDW, aAux[nInd, 2])
				aAdd(aCons, { aAux[nInd, 1], aAux[nInd, 2] })
			endif
		endif
	next        
	lHaveCons := (len(aCons) > 1)
	if lHaveCons
    	makeSubTitle(aFields, STR0007) //"Selecione uma consulta para utilizar como base..."
		makeCombo(aFields, 'edConsPai', STR0008, .F., aCons) //"Consultas disponíveis"
		evtField(aFields, 'edConsPai', "onchange")
		makeBlankRow(aFields)	
		makeSubTitle(aFields, STR0009) /*"...ou selecione um cubo"*/
	else
		makeHidden(aFields, "edConsPai", "")
		makeSubTitle(aFields, STR0015) /*"Selecione um cubo"*/
	endif	
	aAdd(aCubes, { "", "" })
	aAux := DWDetail(TAB_CUBESLIST, -1, { || { alltrim(descricao) +"( " + alltrim(nome)+ " )", id, nome }}, , 2, HttpSession->CurrentDW)

  if len(aAux) > 0
		aAux := aSort(aAux,,, { |x,y| x[1] < y[1]})
		for nInd := 1 to len(aAux)
			if oUserDW:UserIsAdm() .OR. oUserDW:GetCubAcessPerm(HttpSession->CurrentDW, aAux[nInd][2])
				aAdd(aCubes, { aAux[nInd][1], aAux[nInd][2] })
			endif
		next

		if !lHaveCons .and. len(aCubes) < 3 .and. nIdCube == 0
			makeCombo(aFields, 'edId_cube' , STR0010, .F., aCubes, , aCubes[2, 2]) //'Cubos disponíveis'  
		else
			makeCombo(aFields, 'edId_cube' , STR0010, .F., aCubes, , nIdCube) //'Cubos disponíveis'  
		endif
	else
		makeCombo(aFields, 'edId_cube' , STR0010, .F., aCubes) //'Cubos disponíveis'  
	endif
			
	// a operação é de wizard/steps
	if HttpGet->Oper == OP_REC_STEPS
		makeCombo(aFields, 'edType' , STR0011, .F., { { STR0012, TYPE_TABLE_S }, { STR0013, TYPE_GRAPH_S }}, , TYPE_TABLE_S) //'Definir primeiro'###"Tabela"###"Gráfico"
		makeButton(aButtons, BT_PREVIOUS, , AC_REC_MANUT, , { { "id", DwStr(nID) }, { "Oper", OP_REC_STEPS } })
	else
		nOper := OP_SUBMIT
	endif
	
else
	makeShow(aFields, 'edId_cube', STR0020, oCube:Descricao() + " - " + oCube:Name()) //###"Cubo definido"
	
	// a operação é de wizard/steps
	if HttpGet->Oper == OP_REC_STEPS
		makeButton(aButtons, BT_PREVIOUS, , AC_REC_MANUT, , { { "id", DwStr(nID) }, { "Oper", OP_REC_STEPS } })
	endif
	
	// botão fechar
	makeButton(aButtons, BT_CLOSE)
endif
%>
<%= buildForm('frmQuery', STR0021, HttpGet->Action, nOper, aButtons, aFields, lEdit) /*"Consultas"*/ %>
    <% if lOperSubmit
    	if lClose %>
  			<%= buildAutoClose(.T.) %>
  		<% else
  			DwSetProp(ID_TYPE, httpPost->edType, ID_NAME_PRG_QRY)
  			%>
  			<%= buildAutoAction(AC_QUERY_VIRTFLD, { { "id", nID }, { "Obj", OBJ_QUERY }, { "type", httpPost->edType }, { "Oper", OP_REC_STEPS } }, , .F.) %>
  		<% endif
endif %>

<% // a edição dos campos está habilitada
if lEdit %>
	<%= tagJS() %>
	
		function frmQuery_valid(oSender) {
			// realiza a validação de seleção de uma consulta para cópia OU um cubo
			var lOKCube = false;
			var lOKCons = false;
			var lRet = true;
			
			lOKCons = getElement("edConsPai").value;
			lOKCube = getElement("edId_cube").value;
			
			if ((!lOKCons && !lOKCube) || (lOKCons && lOKCube)) {
<%if lHaveCons%>
				defineFieldMessage(getElement("edConsPai"), "<%= STR0014 %>"); //"Por favor, selecione uma consulta para utilizar como base ou selecione um cubo"
				defineFieldMessage(getElement("edId_cube"), "<%= STR0014 %>"); //"Por favor, selecione uma consulta para utilizar como base ou selecione um cubo"
				defineFieldError(getElement("edConsPai"));
<%else%>
				defineFieldMessage(getElement("edId_cube"), "<%= STR0016 %>"); //"Por favor, selecione um cubo"
				defineFieldError(getElement("edId_cube"));
<%endif%>
				lRet = false;
			}
			
			return lRet;
		}
	
	</script>
<% endif %>
	
<%=tagJS()%>
	function u_setWindowPosSize()
	{                            
<%if oUserDW:userIsAdm()%>
	  setWindowSize(700, 400);
<%else%>
	  setWindowSize(700, 450);
<%endif%>
	}

	function edConsPai_onchange(oSender) {
		var lDisabled = false;
		if (oSender.options[oSender.selectedIndex].value != "") {
			lDisabled = true;
		}
		getElement("edId_cube").readonly = lDisabled;
	}
</script>