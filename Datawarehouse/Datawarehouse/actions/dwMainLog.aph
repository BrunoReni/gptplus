<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwMainLog - Apresenta o log do SigaDW e de console, se possivel
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 03.10.05 | 0548-Alan Candido | Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwMainLog.ch"

local cbPrepRow := { |aData| prepRow(aData) }, cErrorDir
local nInd
local aButtons := {}, aWhere := Nil , aDirs, aQBE
local dAlvo := MsDate()
local qAux := TQuery():New("tra")

if isNull(Httpget->zap, "") == ".t."
	DWDelAllRec(oSigaDW:TableLog():Tablename())
	oSigaDW:Log(STR0001) //"Mensagens do log foram removidas"
	cErrorDir := substr(DWErrorDir(), 1, rat("\", DWErrorDir()))
	aDirs := directory(cErrorDir+"*.*", "D")
	for nInd := 3 to len(aDirs)
		aFiles := directory(cErrorDir + aDirs[nInd, 1]+"\*.*")
		aEval(aFiles, { |x| ferase(cErrorDir + aDirs[nInd, 1] + "\" + x[1])})
		dirremove(cErrorDir + aDirs[nInd, 1])
	next
endif

makeItemToolbar(aButtons, STR0002, STR0003, "ic_zap.gif", "js:doZap()", "right") //'Limpar'###'Remove todas as mensagens do log'
makeItemToolbar(aButtons, STR0008, STR0009, "ic_calendar.gif", "js:doFilterDay(event)", "right") //###"Calendário"###"Seleciona o dia"

/*Verifica se a data alvo deve ser a data atual.*/
If (HttpGet->acao == Nil ); //Se a ação que foi invocada é apenas a carga do browser.
	.Or.; 
	(len(DWToken(DwStr(HttpGet->QBEfield), ',', .F., .T.)) == 0;  //Ou se nenhum parâmetro foi passado na URL (QBEField).
	.And.; 
	!(HttpGet->acao $ "OR|PI|PA|PR|SP|NR|PP|UP")) //Além de a acao não ser ordenação ou paginação.
	
	/*Cria uma condição para recuperar apenas os registros da data atual.*/
	aWhere := { { "DT = '" + dtos(dAlvo) + "'" } }
EndIf
     
%>	
<%=buildBrowse(STR0004, .F., TAB_LOG, , , ,cbPrepRow, aWhere, , , , , , , , , aButtons)%> <%= /*"Ocorrências"*/ %>
<% if !dwIsFlex() %>
<%=tagJS()%>

function doFilterDay(e)
{                                              
  	var pos = getMousePosition(e?e:window.event);              
  	showCalendar("pesquisarDT", null, null, pos.x, pos.y, doApplyFilterDay, { emBranco: "<%= STR0010 %>", ajustePara: "<%= STR0011 %>", destaque: "( <%= STR0012 %> )" } ) //###"Todos"###"Apresente ocorrências do dia"###com ocorrencias
}

function doApplyFilterDay(dataAlvo, cAnsi)
{
	if (onDayAlert(cAnsi))
		{
			var cURL = <%=makeAction(AC_BROWSER, { {"acao", QUERY_QBE }, { "QBEField", "" } })%>;
			cURL = prepParam(cURL, "QBEField", "DTx§" + dataAlvo);
			requestData(cURL);
		} else
			alert('<%= STR0013 /*###"Não existem ocorrencias para a data selecionada"*/ %>');
}


function doZap()
{ 
	if (confirm("<%= STR0005 %>"))
	   	doLoadHere(<%=makeAction(AC_SELECT_ABA, {{"aba", "main_log"}, {"zap",".t."}})%>); //'Todas as mensagens do log serão apagadas.\n\nConfirma a operação?'
}

function doShowLog(acLogFile)
{ 
  	doLoad((<%= makeAction(AC_VIEW_LOG, {{ "file", "@@"}})%>).replace('@@', acLogFile), "_window", null, "winLog", "<%=TARGET_75_WINDOW%>", "<%=TARGET_75_WINDOW%>")
}

function onDayAlert(dAnsi) //data no formato YYYYMMDD
{             
  	var lRet; 
<%
qAux:fieldList("DT, count(*) qtdoco")
qAux:groupBy("DT")
qAux:orderBy("DT")
qAux:havingClause("count(*) > 0")
qAux:whereClause("DT >= [P1]")
qAux:fromList(TAB_LOG)                   
qAux:params(1, dAlvo - day(dAlvo) + 1)
qAux:open()
%>         
  	switch (dAnsi) {
<%while !qAux:eof()%>
    case '<%=qAux:value("dt")%>': lRet = true; break;
<%
  	qAux:_next()
enddo

qAux:close()
%>
  }                       
  
  return lRet;
}
</script>
<%
endif

return __Response

static function prepRow(aaData)
	local cErro, cMsg, nPos

	cErro := ""
	cMsg := aaData[5]

	cMsg := strTran(strTran(cMsg, "||", "|"), "|", "<br>")
	nPos := at("<@>", cMsg)
	if nPos != 0                             
		cErro := tagImage("ic_view_log.gif", 16, 16, STR0006, STR0007,,"doShowLog('"+allTrim(strTran(substr(cMsg, nPos + 4),"<br>",""))+"')")/*"Ver log"####"Apresenta log detalhado"*/
		cMsg := substr(cMsg, 1, nPos-1)
		if aaData[2] <> 0
			cMsg := "[DW:" + oSigaDW:DWInfo(aaData[2])[DW_NAME] + "] " + cMsg
		endif
	endif
	aaData[5] := cMsg + cErro

return .t.	
%>
