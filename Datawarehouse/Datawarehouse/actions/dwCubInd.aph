<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwCubInd - Manutenção de indicadores de Cubos
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 24.11.05 |2481-Paulo R Vieira| Versão 3
// 25.04.08 | 0548-Alan Candido | BOPS 143785
//          |                   | Eliminação do campo "classe" da tela, pois o mesmo é para
//          |                   | uso interno do SigaDW
// 28.04.08 |0548-Alan Cândido  | BOPS 1444801 - implementação de validação de palavras reservadas
//          |                   | no nome do atributo 
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwCubManutConst.ch"
#include "dwCubInd.ch"

local oCub := initTable(TAB_CUBESLIST)
local oDS := initTable(TAB_FACTFIELDS)
local lOperSubmit := .f.
local aFields, aValues
local nID := dwVal(HttpGet->ID)
local nIDCube := HttpGet->ID_CUBE
Local aOperButtons := {}

local cDescricao, cTipo, cClass, nTamanho, nDecimais, cMascara, lVisible
local aButtons 	:= {}
local lClose	:= .F.
Local nOperation := OP_SUBMIT, lEdit := .T.

// trata o id do cubo
// se a ação for a ação de editar sem ser por steps
if DwVaL(HttpGet->Oper) == OP_REC_NO_STEPS
	nIDCube := DwVal(HttpGet->ID)	// recupera do get
	
	// trata a sessão aonde contêm o id do cubo
	DwSetProp(ID_ID_CUBE, DwStr(nIDCube), ID_NAME_PRG_CUB)
	DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_NO_STEPS), ID_NAME_PRG_CUB)
else								// em outro caso recupera da session
	nIDCube := DwVal(DwGetProp(ID_ID_CUBE, ID_NAME_PRG_CUB))
endif

// verifica/valida o cubo assoaciado a este action
if !oCub:Seek(1, { nIDCube } )
	dwRaise(ERR_005, SOL_003, nIDCube)
endif

makeItemToolbar(aButtons, STR0005, STR0006, "ic_import.gif", "js:doImpotStruc()", "right") //"Importar"###"Importar estrutura de arquivo externo"

if DwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_CUB)) == OP_REC_STEPS
	makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0007, STR0008, "bt_ocioso.gif", "doNext()", "left") //"próximo"###"Definição das Dimensões"
	makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0009, STR0010, "bt_ocioso.gif", "doPrevious()", "left") //"anterior"###"Retorna para a definição do Cubo"
endif
makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0011, STR0012, "bt_ocioso.gif", "doClose()", "left") //"fechar"###"Retorna para a lista de cubos"

if HttpGet->Action == AC_IND_REC_MANUT
	aFields := {}
	aButtons := {}
	HttpGet->Oper := DwVal(HttpGet->Oper)
	if HttpGet->Oper == OP_SUBMIT
		lOperSubmit := .t.
		aValues := oDS:fromPost(HttpPost->APost)
		nID := dwVal(HttpPost->edID)
		nIDCube := dwVal(HttpPost->edID_CUBES)
		if HttpSession->subOper == OP_REC_EDIT .and. oDS:seek(1, { dwVal(nID) }) 
			lOk := oDS:update(aValues)
		elseif HttpSession->subOper == OP_REC_DEL .and. oDS:seek(1, { dwVal(nID) }) 
			lOk := oDS:delete()
		else
			if (lOk := oDS:append(aValues))
				nID 	:= oDS:value("id")
			endif
		endif
		if !lOk
			DWRaise(ERR_002, SOL_000, oDS:Msg(.t.))
		endif
	else                           
		HttpSession->subOper := HttpGet->Oper
	endif          
	if oDS:seek(1, { nID }) 
		cNome      := oDS:value("nome")
		cDescricao := oDS:value("descricao")
		cClass	   := oDS:value("classe")
		cTipo	   := oDS:value("tipo")
		nTamanho   := oDS:value("tam")
		nDecimais  := oDS:value("ndec")
		cMascara   := oDS:value("mascara")
		lVisible   := oDS:value("visible")
		
		// verifica privilégio para dar manutenção (CASO não seja administrador)
		if !oUserDW:UserIsAdm()
			lEdit := oUserDW:GetCubMaintPerm(HttpSession->CurrentDW, dwVal(nIDCube))
			// exibe msg de que o usuário não possui permissão
			if !lEdit
				HttpSession->DWErrMsg := STR0013 //"Atenção: usuário não possui privilégio de manutenção deste cubo."
				makeButton(aButtons, BT_PREVIOUS)
				nOperation := OP_NONE
			endif
		endif
	else
		cNome      := ''
		cDescricao := ''
		cClass	   := 'A'
		cTipo	   := 'N'
		nTamanho   := 0
		nDecimais  := 0
		cMascara   := ''
		lVisible   := .T.
	endif
	
	makeHidden(aFields, 	'Oper'		  , HttpGet->Oper)
	makeHidden(aFields, 	'edID'        , nID)
	makeHidden(aFields, 	'edID_CUBES'  , nIDCube)
	makeHidden(aFields, 	'edClasse'    , cClass)	
	makeHidden(aFields, 	'edTipo'      , cTipo)
	makeKeyField(aFields, 	'edNome'      , STR0014   , .T., 'C', 10, 0,,cNome) //'Nome'
	makeField(aFields, 		'edDescricao' , STR0015   , .T., 'C', 30, 0,,cDescricao) //'Descrição'
	makeField(aFields, 		'edVisible'   , STR0016   , .T., 'L',   ,  ,,lVisible) //'Visível'
	
	//Campo informativo, não é utilizado no processamento do formulário. 
	makeShow(aFields,		'edTipoShow'  , STR0018	, STR0041) //'Tipo' 'Numérico'  
	
	makeField(aFields, 		'edTam'	 	  , STR0019 , .T., 'N',  4, 0,,nTamanho) //'Tamanho'
	makeField(aFields, 		'edNDec'	  , STR0020	, .T., 'N',  4, 0,,nDecimais) //'Decimais'
	makeDotField(aFields, 	'edMascara'	  , STR0021	, .F., 'C', 30, 0,,cMascara, , , .T.) //'Mascara'
	
	makeText(aFields, STR0025)       
	
  %>
	<%= buildForm('frmCube', STR0022, AC_IND_REC_MANUT, nOperation, aButtons, aFields, lEdit) %> <%= /*'Indicador'*/ %>
	<% if lOperSubmit
		if lClose %>
			<%= buildAutoClose() %>
		<% else %>
			<%= buildAutoAction(AC_CUB_IND, { {"ID_CUBE", nIDCube}, {"Oper", HttpPost->Oper} }) %>
		<% endif
	endif%>
	
	<%=tagJS()%>
	
	function edNome_valid(poField)
	{   
		var lRet = true;      
    var cFieldName = poField.value.toUpperCase();
		if (cFieldName == 'DATA')
		{        
			lRet = false;     
			defineFieldMessage(poField, '<%=DWFormat(STR0026, {"DATA" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>');
		}
		if (cFieldName == 'ID')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0026, {"ID" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>');
		}
		if (cFieldName.substr(0,3) == 'ID_')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0027, {"ID_" })/*"O prefixo [@X] é reservada.\nNão a utilize como nome de campo."*/%>');
		}
	<%if sgdb() == DB_POSTGRES%>
		if (cFieldName == 'NEW')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0026, {"NEW" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>')
		}
		if (cFieldName == 'TYPE')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0026, {"TYPE" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>')
		}
	<%elseif sgdb() == DB_ORACLE%>
		if (cFieldName == 'DESC')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0026, {"DESC" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>')
		}
	<%endif%>
		return lRet;

	}          

	function edTam_valid(poField)
	{
		var lRet = true;      
		var cTipo = getElement('edTipo', poField.form).value;
		var nTam = poField.value;
		if ((cTipo == "C") && ((nTam < 1) || (nTam > 255)))
		{ 
			//###"Tamanho do campo inválido para tipo [ CARACTER ]" ####Tamanho deve ser de no mínimo"###"e máximo de"
			defineFieldMessage(poField, "<%=STR0028%>.<br><%=STR0029%> [ 1 ] <%=STR0030%> [ 255 ].");
    }
		else if ((cTipo == "L") && (!(nTam == 1)))
		{ 
			//###"Tamanho do campo inválido para tipo [ LÓGICO ]"###"Tamanho deve ser igual a"
			defineFieldMessage(poField, "<%=STR0031%>.<br><%=STR0032%>[ 1 ].");
    }
		else if ((cTipo == "D") && (!(nTam == 8)))
		{ 
			//###"Tamanho do campo inválido para tipo [ DATA ]"###"Tamanho deve ser igual a"
			defineFieldMessage(poField, "<%=STR0033%>.<br><%=STR0032%> [ 8 ].");
    }
		else if ((cTipo == "M") && (!(nTam == 10)))
		{ 
			//###"Tamanho do campo inválido para tipo [ MEMO ]"###"Tamanho deve ser igual a"
			defineFieldMessage(poField, "<%=STR0034%>.<br><%=STR0032%> [ 10 ].");
    }
		else if ((cTipo == "N") && ((nTam < 1) || (nTam > 18)))
		{ 
			//###"Tamanho do campo inválido para tipo [ NUMÉRICO ]"###"Tamanho deve ser de no mínimo"###"e máximo de"
			defineFieldMessage(poField, "<%=STR0035%>.<br><%=STR0029%> [ 1 ] <%=STR0030%> [ 18 ].");
    }
    lRet = retrieveFieldMessage(poField);
		return !lRet;
	}
	
	function edNDec_valid(poField)
	{                             
		var cTipo = getElement('edTipo', poField.form).value;
		var nTam = getElement('edTam', poField.form).value - 2;
		var nDec = Number(poField.value); 
		
		if (nTam < 0) nTam = 0          
		
		if ((cTipo == "N") && ((nDec < 0) || (nDec > nTam)))
			//###"Número de decimais inválido para tipo [ NUMÉRICO ]"###"Decimais deve ser no mínimo"###"e máximo de"
			defineFieldMessage(poField, "<%=STR0036%>.<br><%=STR0037%> [ 0 ] <%=STR0038%> [ "+ nTam +" ].");
		else if (cTipo != "N" && nDec != 0)
			//###"Número de decimais inválido para tipo selecionado."###"Decimais deve ser igual a"
			defineFieldMessage(poField, "<%=STR0039%><br><%=STR0040%>[ 0 ].");

		return retrieveFieldMessage(poField)?false:true
	}	      
	
	function edMascara_dot(oSender)	{
	  var oMask = getElement('edMascara', oSender.form);
	  oMask.value = makeMask(getElement('edTipo', oSender.form).value, 
                           getElement('edTam', oSender.form).value,
                           getElement('edNDec', oSender.form).value);
	}
	</script>
	
<% else
	// verifica privilégio para dar manutenção (CASO não seja administrador)
	if !oUserDW:UserIsAdm()
		lEdit := oUserDW:GetCubMaintPerm(HttpSession->CurrentDW, dwVal(nIDCube))
	endif
	makeOperAct(aOperButtons, STR0024, "ic_doc.gif"         , AC_DOCUMENTATION , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_INDICADOR } }, TARGET_90_WINDOW) /*"Documentação"*/
%> 
<%=buildBrowse(STR0023 + " <small>" + oCub:value("nome") + "</small>", .t., oDS:Tablename()   ,            ,                  , ,          ,{ "ID_CUBES=" + dwStr(nIDCube), "DIMENSAO=0" }, aButtons, 10, AC_IND_REC_MANUT, AC_CUB_IND, aOperButtons, , , , , , lEdit)%> <%= /*"Indicadores "*/ %>
<%=tagJS()%>
function doImpotStruc()
{
  doLoad(<%=makeAction(AC_IMPORT_STRUC, {{ "obj", "cub"}, { "id", nIDCube}})%>, '_window', null, 'ImpStruct', '<%= TARGET_75_WINDOW %>', '<%= TARGET_75_WINDOW %>');
}

function doNext()
{
  doLoadHere(<%=makeAction(AC_QRY_CUB_FILTER, { { "id", nIDCube }, { "ObjType", OBJ_CUBE }, { "Oper", OP_REC_STEPS } })%>);
  return false;
}

function doPrevious()
{
  doLoadHere(<%=makeAction(AC_REC_MANUT, {{ "obj", "cub"}, { "id", nIDCube}, { "Oper", OP_REC_STEPS } })%>);
  return false;
}
</script>
<%endif%>