<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryFltrValue - Manutenção de valores padrão obrigatórios para consultas/usuário/grupo
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 17.01.06 |2481-Paulo R Vieira| Versão 3
// 28.04.08 |0548-Alan Cândido  | BOPS 1444809
//          |                   | Melhoria de interface para amarração de filtros obrigatórios
//          |                   | a usuários e/ou grupos
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwqryfltrvalue.ch"

Local aFields	:= {}
Local nIDUser	:= DwVal( iif (!empty(HttpGet->id_user), HttpGet->id_user, HttpPost->id_user) )
Local aButtons 	:= {}
Local oUsers	:= InitTable(TAB_USER), cMainTitle := STR0004 //"Aplicação de filtros obrigatórios"
Local lEdit := .t.

if empty(nIDUser)
  nIDUser := -1
endif

if !(nIDUser == 0)
  cMainTitle += " "
  if nIDUser == -1
		cMainTitle += "[ padrão ]"//
  elseif oUsers:Seek(1, { nIDUser }) .and. oUsers:value("id") == nIDUser         
	  if oUsers:value("tipo") == "U" // usuário
			cMainTitle += " para o usuário " + "[ " + oUsers:value("nome") + " ]"//
		else
			cMainTitle += " para o grupo " + "[ " + oUsers:value("nome") + " ]" //
		endif
	endif
endif

HttpGet->Oper := dwVal(HttpGet->Oper)
if HttpGet->Oper == OP_RESET // RESET 
	resetFilters()
elseif HttpGet->Oper == OP_SUBMIT // SALVA AS CONFIGURAÇÕES
	saveFilters(nIDUser)
endif

// CONSTROI O MENU COM OS GRUPOS E USUÁRIOS
HttpSession->subOper := OP_NONE

if !isNull(HttpGet->iframe)
  if HttpGet->iframe == "ifUsers"
	%> 
  	<%= buildUsers() %>
	  <%= tagJS() %>
		function doSlctUser(acIdUser) 
		{                             
  	  var iFrame = getElement('ifFilter', parent.document)
		  iFrame.src = prepURL(<%= makeAction(AC_QRY_FLTR_VALUE) %> + "&id_user=" + acIdUser + "&iframe=ifFilter&jscript=1");
		}

		function searchElements(aoForm, aRe)
		{                      
		 	var aElements = getElement('treeUser').getElementsByTagName("TR");
	  	var nTargetCol = 0;
			for (var i=1; i < aElements.length; i++) {
        if (aElements[i].innerHTML.indexOf('base.gif') == -1)
        {
					var cText = aElements[i].innerText;
					if (cText.match(aRe)) {
						showElement(aElements[i]);
					} else {
						hideElement(aElements[i]);
					}
				}
			}
		}
                                       
		function edSearch_search(oSender, acTarget)
		{     
		  if (acTarget)
    		var re = new RegExp(acTarget, 'gi')
		  else
    		var re = new RegExp('', 'gi')
			searchElements(oSender.form, re);
		}

		function edSearch_onkeypress(oSender)
		{            
			if (!((event.keyCode == 27) || (event.keyCode == 13)))
				edSearch_search(oSender, oSender.value + String.fromCharCode(event.keyCode));
		}

		function edSearch_onkeyup(oSender)
		{   
			if (event.keyCode == 8)
				edSearch_search(oSender, oSender.value);
		}

		</script>
	<%else
		// constroi a parte principal (consultas e cubos)
		makeTitle(aFields, cMainTitle)
		buildMain(aFields, nIDUser)
	 	makeLegend(aFields, "legcheck01.gif", STR0001) //###"Não aplicado"
	 	makeLegend(aFields, "legcheck02.gif", STR0002) //###"Aplicado"
 		makeLegend(aFields, "ic_query_value.gif", STR0003) //###"por Herança"
		makeHidden(aFields, "id_user", nIDUser)
		makeHidden(aFields, "Oper", OP_SUBMIT)
	  %>      
    <%= buildMiniForm("frmFilterSelect#", AC_QRY_FLTR_VALUE, OP_SUBMIT, aFields, lEdit, "ifFilter", .t.) %>
    <%= tagJS() %>
		function u_bodyonload() 
		{
			window['documentSource'] = document;
		}
  	
  	function frmFilterSelect_valid(oSender) 
  	{
  		var lFilterSelected = false;
	  	var oElements;
  		var cIdUsers 	= "";
	  	var aIdFiltersOn = new Array();
  		var aIdFiltersOff = new Array();

  		// verifica a seleção de pelo menos um filtro
	  	oElements = oSender.elements;
		  for (var nInd = 0; nInd < oElements.length; nInd++) {
			  if (oElements[nInd].type == "checkbox") {
				  if (oElements[nInd].checked) {
			  		aIdFiltersOn.push(oElements[nInd].value);
  				} else {
  					aIdFiltersOff.push(oElements[nInd].value);
	  			}
		  	}
  		}
		
  		oSender.id_filter_on.value = aIdFiltersOn.join(",");
  		oSender.id_filter_off.value = aIdFiltersOff.join(",");
		
  		return true;
  	}
		</script>
	<%endif
else
	httpSession->idCons	:= iif (!empty(HttpGet->id_cons), DwVal(HttpGet->id_cons), DwVal(HttpPost->id_cons))

  oIFrames := THIFrameMan():New()
  oIFrames:action(AC_QRY_FLTR_VALUE)
  oIFrames:AddFrame("ifUsers", STR0005, 0.35) //"Grupos/Usuários"
  oIFrames:AddFrame("ifFilter", STR0005, 0.60) //"Filtros obrigatórios"
  oIFrames:Width(1)
  oIFrames:Height(1)
  if isIE6()
    oIFrames:scrollBar(.t.)
  endif

  makeButton(aButtons, BT_CLOSE)
  makeButton(aButtons, BT_JAVA_SCRIPT, STR0007 , "doReset()") //"resetar valores"
%>
<%= buildForm("frmFilterObrig", cMainTitle, AC_QRY_FLTR_VALUE, OP_NONE, aButtons, oIFrames, .T., , , , , 1) %>
<%= tagJS() %>
		function doReset(aoForm) {
			if (window.confirm('<%=STR0008 /*"Deseja realmente redefinir os aplicações de filtros obrigatórios?\nNota: Todos os usuários serão afetados.*/%>'))
			{
				var cURL = location.href;
				cURL = prepParam(cURL, 'oper', '<%=OP_RESET%>');
				doLoadHere(cURL);
			}
		}
</script>
<%
endif

return __Response

/*
--------------------------------------------------------------------------------------
Função responsável por construir os grupo de usuários e os seus respectivos usuários
Arg:
Ret: Objeto do tipo THTreeList, contendo a árvore de grupos/usuários
--------------------------------------------------------------------------------------
*/
static function buildUsers()
	Local oUsers	:= InitTable(TAB_USER)
	Local aGrupos 	:= {}, aTemp
	Local oTree
	Local nInd, aBuffer, cGroupNode := nil

	// cria a arvore de usuários
	oTree := THTree():New()
	oTree:Name("treeUser")
	oTree:SubTheme("treeGroup")
	oTree:UrlFrame("_self") 
	oTree:RootURL(nil)
	oTree:RootCaption("")
	oTree:width(1)

	// recupera os grupos de usuários e adiciona ao array aGrupos
	oTree:AddNode(nil, "tci000", STR0009, .t., "javascript:doSlctUser(-1);") //"Padrão"

	oUsers:Seek(2, { "G" })
	while !oUsers:EoF() .and. oUsers:value("tipo") == "G"
		if oUsers:value("ativo")
			aAdd(aGrupos, { oUsers:value("id"), oUsers:value("nome") }) 
		endif
		oUsers:_Next()
	enddo
	
	// itera pelo array de grupos e cria uma tabela html com um header com o grupo e os seus usuários
	for nInd := 1 to len(aGrupos)
    lFirst := .t.
		// procura pelo id_grupo
		aTemp := {}
		oUsers:Seek(4, { aGrupos[nInd][1] })
		while !oUsers:EoF() .and. oUsers:value("id_grupo") == aGrupos[nInd][1]
			if oUsers:value("ativo") .and. !oUsers:value("admin")
				if lFirst
			  	lFirst := .f.
			  	cGroupNode := "tci" + DwStr(aGrupos[nInd, 1])
		 			oTree:AddNode(nil, cGroupNode, aGrupos[nInd, 2], .t., "javascript:doSlctUser(" + DwStr(aGrupos[nInd, 1]) + ");")
				endif

		 		oTree:AddNode(cGroupNode, "tci" + DwStr(oUsers:value("id")), oUsers:value("nome")+"("+oUsers:value("login")+")" ;
		 			, .t., "javascript:doSlctUser(" + DwStr(oUsers:value("id")) + ");")
			endif
			oUsers:_Next()
		enddo
	next
                             
	aBuffer := {}
            
  aAdd(aBuffer, STR0010 /*"Filtrar*/ + tagInput("edSearch", 30, "", { { "onkeypress", "edSearch_onkeypress(this)" }, { "onkeyup", "edSearch_onkeyup(this)" } } )) 

	oTree:Buffer(aBuffer)

return dwConcatWSep(CRLF, aBuffer)

/*
--------------------------------------------------------------------------------------
Função responsável por construir a página principal com os filtros obrigatórios
Arg: 	aaFields, array, contém os campos a serem apresentados na página
      anIDUser, numérico, contém o id do usuário
Ret:
--------------------------------------------------------------------------------------
*/
static function buildMain(aaFields, anIDUser)
  local nInd
	local oUsers	:= InitTable(TAB_USER)
	local oWhere 	:= InitTable(TAB_WHERE)
	local oConsUser := InitTable(TAB_CONS_USR)
	local nIDCons	:= httpSession->idCons
	local cIDFltsOn	:= iif (!empty(HttpGet->id_filter_on), HttpGet->id_filter_on, HttpPost->id_filter_on)
	local cIDFltsOff:= iif (!empty(HttpGet->id_filter_off), HttpGet->id_filter_off, HttpPost->id_filter_off)
	local oFilter
	local aExpr, cExpr := ""
	local aPrompt, aPromptValue := {}
	local lResults := .f.
	local lEdit := .T., aButtons := {}
	local oFilterOwner
	local lSelected := .F., lInheritance := .F.
	local oConsulta := TConsulta():New(nIDCons, TYPE_TABLE)
  local aFields := aaFields

  if anIDUser == -1 // padrão
    anIDUser := 0
  endif
  
	oWhere:Seek(2, { nIDCons })
	while !oWhere:EoF() .and. oWhere:value("id_cons") == nIDCons
		if oWhere:value("tipo") == FILTER_SECURE
      lResults := .t.
			oWhere:SavePos()
			
			oFilterOwner := iif(oWhere:value("virtual"), oConsulta:Cube(), oConsulta)
			
			oFilter	:= TFiltro():NewFiltro(oWhere:value("id"), oFilterOwner)
			aExpr	:= oFilter:ExpHtml2()
			
			// formata as expressões do filtro
			cExpr := ""
			for nInd := 2 to len(aExpr)
				cExpr += aExpr[nInd]
			next
			
			// recupera os prompts do filtro
			aPrompt := oFilter:Prompts()
			if !empty(aPrompt) .and. valType(oFilter:Prompts()) == "A"
				for nInd := 1 to len(aPrompt)
					if !empty(aPrompt[nInd])
						// pesquisa pelo valores do prompt para o usuário específico
						if oConsUser:Seek(2, { nIDCons, anIDUser, "pt" + aPrompt[nInd] })
							aAdd(aPromptValue, { "pt" + aPrompt[nInd], oConsUser:value("valor") })
						endif
					endif
				next
			endif
			
			lSelected := .T.
			lInheritance := .F.
			
			// constroi um check box selecionado ou não conforme o filtro esteja habilitado ou não para o usuário especifico
			if oConsUser:Seek(2, { nIDCons, anIDUser, "." + DwStr(oWhere:value("id")) }, .t.)
				lSelected := iif (lower(oConsUser:value("valor", .t.)) == ".t.", .t., .f.)
			else
				oUsers:SavePos()
				if oUsers:Seek(1, { anIDUser }, .t.)
					if oUsers:value("tipo") == "G"
						if oConsUser:Seek(2, { nIDCons, 0, "." + DwStr(oWhere:value("id")) }, .t.)
							lSelected := oConsUser:value("valor",.t.) == ".T."
						endif
					elseif oConsUser:Seek(2, { nIDCons, oUsers:value("id_grupo"), "." + DwStr(oWhere:value("id")) }, .t.) ;
						.OR. oConsUser:Seek(2, { nIDCons, 0, "." + DwStr(oWhere:value("id")) }, .t.)
						lSelected := oConsUser:value("valor",.t.) == ".T."
						lInheritance := .T.
					endif
				endif
				oUsers:RestPos()
			endif
      if lInheritance
				cExpr := tagImage("ic_query_value.gif", 15, 15, STR0003) + cExpr //"por herança"
      endif
      
			makeHCheckField(aFields, 'edWhere' + DwStr(oWhere:value("id")) , cExpr, .F., .T., , oWhere:value("id"), lSelected)
			
			oFilter:Free()
			oWhere:RestPos()
		endif
		oWhere:_Next()
	enddo
	
	// verifica se não existem consultas a serem exibidas na página
	if !lResults
		makeWarning(aFields, STR0011) //"Não existem consultas do tipo obrigátorio para definição de valores padrão"
	endif
	
	makeHidden(aFields, 'id_filter_on'	, cIDFltsOn)
	makeHidden(aFields, 'id_filter_off'	, cIDFltsOff)
	
	// verifica privilégio para dar manutenção (CASO não seja administrador)
	if !oUserDW:UserIsAdm() .AND. !lNoResults
		lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nIDCons)
		// exibe msg de que o usuário não possui permissão
		if !lEdit
			HttpSession->DWErrMsg := STR0012 /*"Atenção: usuário não possui privilégio de manutenção deste cubo."*/
			makeButton(aButtons, BT_CLOSE)
		endif
	endif

return

/*
--------------------------------------------------------------------------------------
Função responsável por salvar as aplicações de filtro por usuário
Arg: 
Ret:
--------------------------------------------------------------------------------------
*/
static function saveFilters(anIDUser)
	local oUsers	:= InitTable(TAB_USER)
	local oWhere 	:= InitTable(TAB_WHERE)
	local oConsUser := InitTable(TAB_CONS_USR)
	local aGrupos 	:= {}, aData := {}, aTemp
	local cIDFltsOn	:= iif (!empty(HttpGet->id_filter_on), HttpGet->id_filter_on, HttpPost->id_filter_on)
	local cIDFltsOff:= iif (!empty(HttpGet->id_filter_off), HttpGet->id_filter_off, HttpPost->id_filter_off)
	local aFlters, oFilter
	local aExpr, cExpr := ""
	local cIDGrupo, cDescChkBox
	local aFltrs
	local aPrompt, aPromptValue := {}
	local lNoResults := .T.
	local lEdit := .T., aButtons := {}
	local oFilterOwner
	local lSelected := .F.
	local cTitle := "", nPos
	local nIDCons	:= httpSession->idCons
	local oConsulta := TConsulta():New(nIDCons, TYPE_TABLE)
	local nInd, nInd1, nInd2, nInd3

  if anIdUser == -1  // configuração padrão
  	anIdUser := 0
  endif

	aPrompts := {}
	aEval(oConsulta:Where(.t.), { |x| iif(x:Tipo() == FILTER_SECURE, aAdd(aPrompts, aclone(x:Prompts())),nil)})
	
	aFltrsOn 	:= DwToken(cIDFltsOn, ",")
	aFltrsOff	:= DwToken(cIDFltsOff, ",")
	
	// itera pelos usuários selecionados adicionando os registros
	for nInd2 := 1 to len(aPrompts)
		for nInd3 := 1 to len(aPrompts[nInd2])
			cPrompt := "pt" + aPrompts[nInd2, nInd3]
			cValue := &("HttpPost->" + cPrompt)
				
			if !oConsUser:Seek(2, {nIDCons, anIDUser,  cPrompt}, .f.)
				oConsUser:Append( { {"id_cons", nIDCons}, { "id_user", anIDUser},;
								   {"prompt", cPrompt}, {"valor", cValue }})
			else
				oConsUser:Update( {{"valor", cValue } })
			endif
		next
	next     
		
	// itera pelos filtros selecionados, adicionando-os à base de dados
	for nInd2 := 1 to len(aFltrsOn)                                         
		cPrompt := "." + dwStr(aFltrsOn[nInd2])
		if !oConsUser:Seek(2, {nIDCons, anIDUser,  cPrompt}, .f.)
				oConsUser:Append( { {"id_cons", nIDCons}, { "id_user", anIDUser},;
							   {"prompt", cPrompt}, {"valor", ".T." }})
		else
			oConsUser:Update( {{"valor", ".T." }})
		endif
	next
		
	// itera pelos filtros não selecionados, adicionando-os à base de dados
	for nInd2 := 1 to len(aFltrsOff)
		cPrompt := "." + DwStr(aFltrsOff[nInd2])
		if !oConsUser:Seek(2, {nIDCons, anIDUser,  cPrompt}, .f.)
			oConsUser:Append( { {"id_cons", nIDCons}, { "id_user", anIDUser},;
							   {"prompt", cPrompt}, {"valor", ".F." }})
		else
			oConsUser:Update( {{"valor", ".F." }})
		endif
	next

return

/*
--------------------------------------------------------------------------------------
Função responsável por redefinir todos as aplicações de filtros obrigatórios
Arg: anIDUser, numérico, contém o id do usuário
Ret:
--------------------------------------------------------------------------------------
*/
static function resetFilters()
	local nIDCons	:= httpSession->idCons
	local oConsUser := InitTable(TAB_CONS_USR)

	oConsUser:Seek(2, {nIDCons, 0})
	while !oConsUser:EoF() .and. oConsUser:value("id_cons") == nIDCons
		oConsUser:Delete()
		oConsUser:_Next()
	enddo       
	
return
%>