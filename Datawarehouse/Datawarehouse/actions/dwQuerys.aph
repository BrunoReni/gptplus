<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQuerys - Exibição de consultas
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 20.12.05 |2481-Paulo R Vieira| Versão 3        
// 24/09/07 |0548-Alan Candido  | BOPS 132350 - Implementação da opção de exportação de 
//          |                   | consultas do usuário
// 30.06.08 | 0548-Alan Cândido | BOPS 146579
//          |                   | Tratamento da opção para edição/apresentação do campo 
//          |                   | TAB_CONSULTAS.habPOnl ("PanelOffLine" do ini)
// 19.02.10 | 0548-Alan Candido | FNC 00000003657/2010 (9.12) e 00000001971/2010 (11)
//          |                   | Implementação de visual para P11 e adequação para o 'dashboard'
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwQuerys.ch"

Local oQuery := InitTable(TAB_CONSULTAS)
Local aShowFields
Local nIdUser := 0, cNome, cDescricao, cTipo, lExcel, lPublica, lSoGrupo, lExport, lPublicURL, lHabPOnl
Local nID := DwVal(HttpGet->ID), lOperSubmit, lClose
Local aOperButtons := {}
Local cJSSubmit := ""
Local lEdit := .T., lOk := .f., nOper := OP_SUBMIT
Local cbPrepRow
Local aWhere
Local aFuncionButtons := {}
Local aAux	:= {}
Local lCubeAccess := .F.
Local nInd	:= 0

if HttpGet->Action == AC_REC_MANUT
	aFields := {}
	aButtons := {}
	HttpGet->Oper := DwVal(HttpGet->Oper)
	HttpGet->SubOper := DwVal(HttpGet->SubOper)
	
	// ação de "anterior" na página de indicadores
	if HttpGet->Oper == OP_REC_STEPS .or. HttpGet->SubOper == OP_REC_NEW
		// Verifica se o usuário possui acesso a pelo menos um cubo
		aAux := DWDetail(TAB_CUBESLIST, -1, { || { alltrim(descricao) +"( " + alltrim(nome)+ " )", id, nome }}, , 2, HttpSession->CurrentDW)
	
	  	If len(aAux) > 0
			aAux := aSort(aAux,,, { |x,y| x[1] < y[1]})
			For nInd := 1 to len(aAux)
				If oUserDW:UserIsAdm() .OR. oUserDW:GetCubAcessPerm(HttpSession->CurrentDW, aAux[nInd][2])
					lCubeAccess := .T.
					Exit
				Endif
			Next
		EndIf

		If lCubeAccess
			nID := dwVal(HttpGet->ID)
		    lOperSubmit 		 := .F.
		    lClose				 := .F.
		    HttpSession->subOper := OP_REC_STEPS
		    
			makeButton(aButtons, BT_SUBMIT, STR0028) //###"próximo"
		Else
			nOper := OP_NONE
			makeWarning(aFields, STR0032 ) //"Atenção: Usuário não possui cubos disponíveis para efetuar o cadastro de uma nova consulta." 
			aButtons := {}
			makeButton(aButtons, BT_CLOSE)							
		EndIf
	elseif HttpGet->Oper == OP_SUBMIT
		lOperSubmit := .t.
		
		aValues := oQuery:fromPost(HttpPost->APost)
		nID := dwVal(HttpPost->edID)
		if oQuery:seek(1, { nID })
			if HttpSession->subOper == OP_REC_STEPS .or. HttpSession->subOper == OP_REC_EDIT
				if HttpSession->subOper == OP_REC_EDIT
					lClose := .T.
				endif
				lOk := oQuery:update(aValues)
			elseif HttpSession->subOper == OP_REC_DEL
				lOk := oQuery:delete()
				lClose := .T.
			endif
		else
			if (lOk := oQuery:append(aValues))
				nID := oQuery:value("id")
			endif
		endif
		
		if !lOk          	
			DWRaise(ERR_002, SOL_000, oQuery:Msg(.t.))
		endif
	else
		HttpSession->subOper := HttpGet->Oper
	endif
	
	if oQuery:seek(1, { nID })
		nIdUser		:= oQuery:value("id_user")
		cNome       := oQuery:value("nome")
		cDescricao  := oQuery:value("descricao")
		cGrupo		:= oQuery:value("grupo")
		cTipo		:= oQuery:value("tipo")
		lExcel		:= oQuery:value("excel")
		lPublica	:= oQuery:value("publica")
		lSoGrupo	:= oQuery:value("sogrupo")
		lExport   := oQuery:value("export")
		lPublicURL	:= oQuery:value("puburl")  
		lHabPOnl	:= oQuery:value("habPOnl")
		
		// verifica privilégio para dar manutenção (CASO não seja administrador)
		lEdit := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nID)
		
		// exibe msg de que o usuário não possui permissão
		if !lEdit
			HttpSession->DWErrMsg := STR0001 //"Atenção: usuário não possui privilégio de manutenção desta consulta."
			makeButton(aButtons, BT_CLOSE)
			nOper := OP_NONE
		endif
	else
		nIdUser		:= oUserDW:UserID()
		cNome       := ''
		cDescricao  := ''  
		cGrupo		:= ''
		lExcel		:= .F.
		cTipo		:= HttpSession->QueryType
		lPublica	:= .F.
		lSoGrupo	:= .F.
		lExport   	:= .F.
		lPublicURL	:= .F.
		lEdit		:= .T.                    
		lHabPOnl	:= .F.
	endif
	
	makeHidden(aFields, 'edID'		, nID)
	makeHidden(aFields, 'edTipo'	, cTipo)
	makeHidden(aFields, 'edId_user' , nIdUser)
	if !HttpSession->QueryType == QUERY_USER
		makeHidden(aFields, 'edPublica'	, lPublica)
		makeHidden(aFields, 'edSoGrupo' , lSoGrupo)
		makeHidden(aFields, 'edExport' , lExport)
	endif       
	if !(HttpGet->SubOper == OP_REC_NEW .OR. HttpSession->subOper == OP_REC_NEW)
		makeShow(aFields	, 'edIdVisible'	, "ID", DwStr(nID), 7) //'Nome'
	endif
	makeKeyField(aFields	, 'edNome'		, STR0002, .T., 'C', 15, 0,,cNome) //'Nome'
	makeField(aFields		, 'edDescricao'	, STR0003, .T., 'C', 40, 0,,cDescricao) //'Descrição'  
	makefield(aFields		, 'edGrupo' , STR0023, .F., 'C', 15, 0,,cGrupo ) // Grupo   
	if (HttpGet->SubOper == OP_REC_NEW .OR. HttpSession->subOper == OP_REC_NEW)
		makeText(aFields		, STR0025) //  * Manter o grupo em branco para receber a descrição do cubo associado
	endif   
	
	makeField(aFields		, 'edExcel'		, STR0005, .F., 'L',  1, 0,,lExcel) //'Excel'
	makeField(aFields		, 'edPuburl'	, STR0022, .F., 'L',  1, 0,,lPublicURL) //'Permitir acesso via URL' 
	
	if DWPanOffLine() .and. !DWisAp8()
		makeField(aFields		, 'edHabPOnl'	, STR0024, .F., 'L',  1, 0,,lHabPOnl) //'Habilitar Painel'
	else
		makeHidden(aFields, 'edHabPOnl' , lHabPOnl)	
	endif
 	if HttpSession->QueryType == QUERY_USER
		makeField(aFields		, 'edPublica', STR0026, .F., 'L',  1, 0,,lPublica) //'Publica'	
		makeField(aFields		, 'edSoGrupo', STR0027, .F., 'L',  1, 0,,lSoGrupo) //'Somente Grupo"
		makeField(aFields		, 'edExport' , STR0029, .F., 'L',  1, 0,,lExport) //"Usuários podem exportar"
 	endif
	%>
	<%= buildForm('frmQuery', STR0007, HttpGet->Action, nOper, aButtons, aFields, lEdit, , , { |aBuffer, aaParams, alEdit| aAdd(aBuffer, cJSSubmit) }) %> <%=/*'Consultas'*/ %>
    <% if lOperSubmit
    	if lClose %>
  			<%= buildAutoClose() %>
  		<% else
  			DwSetProp(ID_ID_QUERY, DwStr(nID), ID_NAME_PRG_QRY)
			DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_STEPS), ID_NAME_PRG_QRY)
  			%>
  			<%= buildAutoAction(AC_QUERY_DEFCUBE, , , .F.) %>
  		<% endif
   endif
else
	if HttpSession->QueryType == QUERY_PREDEF
		aShowFields := { { "ID", "N", 10, 0, STR0008, .F. }, { "NOME", "C", 15, 0, STR0002, .T. }, ; //"ID"###"Nome"
					{ "DESCRICAO", "C", 60, 0, STR0003, .T. }, { "GRUPO", "C", 15, 0 , STR0023 , .T. }, { "EXCEL", "L", 1, 0, STR0005, .T. }, ; //"Descrição"###"GRUPO"####"Integração Excel"
					{ "PUBURL", "L", 1, 0, STR0022, .T. }, {"HABPONL", "L", 1, 0, STR0024, .T. }  } //"Permitir acesso via URL" ### "Habilitar Painel"
	else
		aShowFields := nil
	endif
	
	makeOperAct(aOperButtons, STR0012, "ic_query_cube.gif"		 , AC_QUERY_DEFCUBE  , { { "oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW ) //"Cubo"
 	makeOperAct(aOperButtons, STR0017, "ic_query_virt_flds.gif", AC_QUERY_VIRTFLD  , { { "Obj", OBJ_QUERY }, { "oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW ) //"Campos Virtuais"
	makeOperAct(aOperButtons, STR0015, "ic_query_filtros.gif"	 , AC_QRY_CUB_FILTER , { { "oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_QUERY } }, TARGET_75_WINDOW ) //"Filtros"
 	makeOperAct(aOperButtons, STR0016, "ic_query_alerts.gif"	 , AC_QUERY_ALERT    , { { "oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW ) //"Alertas"
 	makeOperAct(aOperButtons, STR0013, "ic_query_table.gif"    , AC_QRY_ONLINE_EXEC, { { "oper", OP_REC_NO_STEPS}, { "type", TYPE_TABLE }, { "cache", CHKBOX_OFF }, { "_ow", CHKBOX_ON } }, TARGET_100_WINDOW ) //"Tabela"
 	makeOperAct(aOperButtons, STR0014, "ic_query_graph.gif"    , AC_QRY_ONLINE_EXEC, { { "oper", OP_REC_NO_STEPS}, { "type", TYPE_GRAPH }, { "cache", CHKBOX_OFF }, { "_ow", CHKBOX_ON } }, TARGET_100_WINDOW ) //"Gráfico"
 	makeOperAct(aOperButtons, STR0021, "ic_doc.gif"            , AC_DOCUMENTATION  , { { "oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_QUERY } }, TARGET_90_WINDOW) /*"Documentação"*/
	
	
	aWhere := {}                                                                                      
	aAdd(aWhere, "TIPO = '" + HttpSession->QueryType + "'")
	
	if !oUserDW:UserIsAdm()
		if HttpSession->QueryType == QUERY_USER
			aAdd(aWhere, "(ID_USER = " + DwStr(oUserDW:UserId()) + " OR (PUBLICA = 'T' AND SOGRUPO = 'F')" + ;
						 " OR (PUBLICA = 'T' AND SOGRUPO = 'T'))")
		else
			// cria o codeblock para verificar privilégio de acesso a cada cubo (CASO não seja administrador)
			cbPrepRow := { |aData| prepRow(aData) }
		endif
		
		lEdit := oUserDW:GetQryCreate(HttpSession->CurrentDW)
	endif              
	
	if !(oSigaDW:Excel() == EXCEL_NONE)
		makeItemToolbar(aFuncionButtons, STR0030, STR0031, "ic_excel.gif", "js:downloadExcel()", "right") //###"Download Integracao Excel"####"Efetua o download do arquivo para Integracao Excel"
	endif
	%>
	<%= buildBrowse(STR0007, .T., oQuery:Tablename(), aShowFields, {{ "NOME", .t. }}, , cbPrepRow, aWhere, , , , , aOperButtons, , , , aFuncionButtons, , lEdit) %> <%=/*"Consultas"*/%>
  <%=tagJS()%>
	<%if !(oSigaDW:Excel() == EXCEL_NONE)%>
  function downloadExcel()
  {                                         
   var cURL = location.href;
   cURL = prepParam(cURL, 'action', '<%=AC_DOWNLOAD%>');
   cURL = prepParam(cURL, 'filename', 'integracaosigadw.xla');
   cURL = prepParam(cURL, 'fileRelativePath', '<%= strTran(DwTempPath(), "\", "/") %>/');
	doLoad(cURL,'_window')
  }  
	<%endif%>
  <%=makeQryInfo()%>
  function u_operActIsEnable(aaButtonsList, anID)
  {
    var oQuery = { id: 0, lCube: false, lHaveTable: false, lHaveGraph: false };

    for (var i = 0; i < aQuerys.length; i++)
    {
      if (aQuerys[i].id == anID)
      {
        var oQuery = aQuerys[i];
        break;
      }
    }
	
    aaButtonsList[1] = oQuery.lCube; // virtuais
    aaButtonsList[4] = oQuery.lCube; // filtros
    aaButtonsList[5] = oQuery.lCube; // alertas
    aaButtonsList[2] = oQuery.lCube; // tabela
    aaButtonsList[3] = oQuery.lCube; // grafico
	
    return true;
  }
  </script>
<% endif

return __Response

// function que recebe os dados de uma linha da base de dados e verifica se o usuário tem privilégio de acessar a consulta
static function prepRow(aaData)
	
	// recupera o id da consulta
	Local nQueryId := aaData[1]
	
	// verifica se usuário pode acessar à consulta
return oUserDW:GetQryAcessPerm(HttpSession->CurrentDW, nQueryId)

static function makeQryInfo()
  local aBuffer := {}
  local oQuery := initQuery(SEL_QRY_INFO)

  oQuery:open()

  aAdd(aBuffer, "var aQuerys = new Array();")
  while !oQuery:eof()                                   
    aAdd(aBuffer, "aQuerys.push({ id: " + dwStr(oQuery:value("id")) + ", " +;
                  "lCube: " +iif(oQuery:value("id_cube") <> 0, "true", "false") + ", " +;
                  "lHaveTable: " +iif(oQuery:value("haveTable") == "T", "true", "false") + ", " +;
                  "lHaveGraph: " +iif(oQuery:value("haveGraph") == "T", "true", "false") + "});")
    oQuery:_Next()
  enddo
  
  oQuery:close()
return dwConcatWSep(CRLF, aBuffer)
%>