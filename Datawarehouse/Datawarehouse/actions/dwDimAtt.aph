<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwDimAtt - Manutenção de atributos da dimensão
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 25.10.05 | 0548-Alan Candido | Versão 3
// 28.04.08 |0548-Alan Cândido  | BOPS 1444801 - implementação de validação de palavras reservadas
//          |                   | no nome do atributo 
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "DWDimManutConst.ch"
#include "dwDimAtt.ch"

local oDim := initTable(TAB_DIMENSAO)
local oDS := initTable(TAB_DIM_FIELDS)
local lOperSubmit := .f.
local aFields, aValues
local nID := dwVal(HttpGet->ID)
local nIDDim
local cNome, cDescricao, lVisible, cTipo, nTam, nNDec, cMascara, lOk
local aButtons := {}
local lClose := .F.
local lEdit := .T.

// trata o id da dimensão
// se a ação for a ação de editar sem ser por steps
if DwVaL(HttpGet->Oper) == OP_REC_NO_STEPS
	nIDDim := DwVal(HttpGet->ID)	// recupera do get
	
	// trata a sessão aonde contêm o id da dimensão
	DwSetProp(ID_ID_DIM, DwStr(nIDDim), ID_NAME_PRG_DIM)
	DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_NO_STEPS), ID_NAME_PRG_DIM)
else								// em outro caso recupera da session
	nIDDim := DwVal(DwGetProp(ID_ID_DIM, ID_NAME_PRG_DIM))
endif

if !oDim:Seek(1, { nIDDim } )
	dwRaise(ERR_005, SOL_003, nIDDim)
endif

makeItemToolbar(aButtons, STR0001, STR0002, "ic_import.gif", "js:doImportStruc()", "right", TARGET_50_WINDOW) //"Importar"###"Importar estrutura de arquivo externo"

if DwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_DIM)) == OP_REC_STEPS
	makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0003, STR0004, "bt_ocioso.gif", "doNext()", "left") //"próximo"###"Definição da Chave Única"
	makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0005, STR0006, "bt_ocioso.gif", "doPrevious()", "left") //"anterior"###"Retorna para a definição da Dimensão"
endif
makeStepsToolbar(aButtons, BT_JAVA_SCRIPT, STR0009, STR0008, "bt_ocioso.gif", "doClose()", "left") //"fechar"###"Retorna para a lista de Dimensões"

if HttpGet->Action == AC_ATT_REC_MANUT
	aFields := {}
	aButtons := {}
	                        
	if DwVal(HttpGet->Oper) == OP_SUBMIT
		lOperSubmit := .t.
		aValues := oDS:fromPost(HttpPost->APost)                               
		nID := dwVal(HttpPost->edID)
		
		if DwVaL(DWGetProp("subOper")) == OP_REC_EDIT .and. oDS:seek(1, { nID }) 
			lOk := oDS:update(aValues)
		elseif DwVal(DWGetProp("subOper")) == OP_REC_DEL .and. oDS:seek(1, { nID }) 
			lOk := oDS:delete()
		else
			HttpGet->ID := NIL
			if (lOk := oDS:append(aValues))
				nID := oDS:value("id")
				lClose := .T.
			endif
		endif
		if !lOk
			DWRaise(ERR_002, SOL_000, oDS:Msg(.t.))
		else
			// se tiver pelo menos um campo com chave primária atualiza a estrutura da dimensão
			if oDS:Seek(4, {nIDDim, 1})
				DWWaitJob(JOB_INITDIM, { nIDDim },, .T. )
			endif
		endif
	else                           
		DWSetProp("subOper", HttpGet->Oper)
	endif          

	if oDS:seek(1, { dwVal(nID) }) 
		cNome      := oDS:value("nome")
		cDescricao := oDS:value("descricao")
		lVisible	 := oDS:value("visible")
		cTipo	 	   := oDS:value("tipo")
		nTam   		 := oDS:value("tam")
		nNDec   	 := oDS:value("ndec")
		cMascara   := oDS:value("mascara")
		nKey       := oDS:value("keyseq")
	else
		cNome      := ''
		cDescricao := ''
		lVisible   := .T.
		cTipo      := ''
		nTam       := 0
		nNDec  		 := 0
		cMascara   := ''
		nKey       := 0
	endif
	
	makeHidden(aFields, 'edID'        , nID)
	makeHidden(aFields, 'edID_DIM'    , nIDDim)
	
	if nKey == 0
		makeKeyField(aFields, 'edNome'    , STR0010, .T., 'C', 10, 0,, cNome) //'Nome'
	else
		makeShow(aFields, 'edNome'    , STR0010, cNome) //'Nome'
	endif 
	
	makeField(aFields, 'edDescricao'  , STR0011, .T., 'C', 40, 0,, cDescricao) //'Descrição'
	makeField(aFields, 'edVisible'    , STR0012, .T., 'L',  1, 0,, lVisible) //'Vísivel'
	makeDWTypesCombo(aFields, 'edTipo', STR0013, .T., , cTipo) //'Tipo'
	evtField(aFields, "edTipo", "onchange", "hideDecimals()", .F.)
	makeField(aFields, 'edTam'        , STR0014, .T., 'N',  4, 0,, nTam) //'Tamanho'
	makeField(aFields, 'edNDec'       , STR0015, .T., 'N',  4, 0,, nNDec) //'Decimais'
	makeDotField(aFields, 'edMascara' , STR0018, .F., 'C', 30, 0,, cMascara, , , .t.) //'Mascara'
	
	if nKey > 0 .and. DwVal(DWGetProp("subOper")) == OP_REC_DEL
		makeWarning(aFields, STR0019) //###"Atenção, chave primária: não pode ser alterada ou excluída"
		lEdit := .F.
	endif
	
	%>
	<%= buildForm('frmDimAttr', STR0016, AC_ATT_REC_MANUT, OP_SUBMIT, aButtons, aFields, lEdit, , , , , , , lEdit) %> <%= /*'Atributo'*/ %>
	<% if lOperSubmit
		if lClose %>
			<%= buildAutoClose() %>
		<% else %>
			<%= buildAutoAction(AC_DIM_ATT, { {"id", nID} },,.t.) %>
		<% endif
	endif %>   
	
	<%= tagJS() %>
	
	var obj = document.getElementById("edNDec");
	obj.disabled = true;	
	
	function edMascara_dot(oSender)	{
	  var oMask = getElement('edMascara', oSender.form);
		oMask.value = makeMask(getElement('edTipo', oSender.form).value, 
                           getElement('edTam', oSender.form).value, 
                           getElement('edNDec', oSender.form).value);
	}
	
	function edTam_valid(poField)
	{
		var lRet = true;      
		var cTipo = getElement('edTipo', poField.form).value;
		var nTam = poField.value;
		if ((cTipo == "C") && ((nTam < 1) || (nTam > 255)))
		{ 
			//###"Tamanho do campo inválido para tipo"###"CARACTER"###"Tamanho deve ser de no mínimo"###"e máximo de"
			defineFieldMessage(poField, "<%=STR0026%> [ <%=STR0021%> ].<br><%=STR0027%> [ 1 ] <%=STR0028%> [ 255 ].");
    }
		else if ((cTipo == "L") && (!(nTam == 1)))
		{ 
			//###"Tamanho do campo inválido para tipo"###"LÓGICO"###"Tamanho deve ser igual a"
			defineFieldMessage(poField, "<%=STR0026%> [ <%STR0022%>.<br><%=STR0029%>[ 1 ].");
    }
		else if ((cTipo == "D") && (!(nTam == 8)))
		{      
			//###"Tamanho do campo inválido para tipo"###"DATA"###"Tamanho deve ser igual a"
			defineFieldMessage(poField, "<%=STR0026%> [ <%=STR0023%> ].<br><%=STR0029%> [ 8 ].");
			
    }
		else if ((cTipo == "M") && (!(nTam == 10)))
		{ 
			//###"Tamanho do campo inválido para tipo"###"MEMO"###"Tamanho deve ser igual a"
			defineFieldMessage(poField, "<%=STR0026%> [ <%STR0024%> ].<br><%=STR0029%> [ 10 ].");
    }
		else if ((cTipo == "N") && ((nTam < 1) || (nTam > 18)))
		{ 
			//###"Tamanho do campo inválido para tipo"###"NUMÉRICO"###"Tamanho deve ser de no mínimo"###"e máximo de"
			defineFieldMessage(poField, "<%=STR0026%> [ <%=STR0025%> ].<br><%=STR0027%> [ 1 ] <%=STR0028%> [ 18 ].");
    }
    lRet = retrieveFieldMessage(poField);
		return !lRet;
	}
	
	function edNDec_valid(poField)
	{                             
		var cTipo = getElement('edTipo', poField.form).value;
		var nTam = getElement('edTam', poField.form).value - 2;
		var nDec = Number(poField.value);
		
		if ((cTipo == "N") && ((nDec < 0) || (nDec > nTam)))
			//###"Número de decimais inválido para tipo"###"NUMÉRICO"###"Decimais deve ser no mínimo"###"e máximo de"
			defineFieldMessage(poField, "<%=STR0026%> [ <%=STR0025%> ].<br><%=STR0030%> [ 0 ] <%=STR0028%> [ "+nTam+" ].");
		else if (cTipo != "N" && nDec != 0)
			//###"Número de decimais inválido para tipo selecionado."###"Decimais deve ser igual a"
			defineFieldMessage(poField, "<%=STR0031%><br><%=STR0032%>[ 0 ].");

		return retrieveFieldMessage(poField)?false:true
	}	      

	function edNome_valid(poField)
	{   
		var lRet = true;      
    var cFieldName = poField.value.toUpperCase();
		if (cFieldName == 'DATA')
		{        
			lRet = false;     
			defineFieldMessage(poField, '<%=DWFormat(STR0033, {"DATA" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>');
		}
		if (cFieldName == 'ID')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0033, {"ID" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>');
		}
		if (cFieldName.substr(0,3) == 'ID_')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0034, {"ID_" })/*"O prefixo [@X] é reservada.\nNão a utilize como nome de campo."*/%>');
		}
	<%if sgdb() == DB_POSTGRES%>
		if (cFieldName == 'NEW')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0033, {"NEW" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>')
		}
		if (cFieldName == 'TYPE')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0033, {"TYPE" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>')
		}
	<%elseif sgdb() == DB_ORACLE%>
		if (cFieldName == 'DESC')
		{        
			lRet = false;
			defineFieldMessage(poField, '<%=DWFormat(STR0033, {"DESC" })/*A palavra [@X] é palavra reservada.\nNão a utilize como nome de campo.*/%>')
		}
	<%endif%>
		return lRet;
	}

	function hideDecimals() { 
		var obj = document.getElementById("edNDec");
		var cbo = document.getElementById("edTipo");
		
		if (cbo.item(cbo.selectedIndex).value == "N") {
			obj.disabled = false;			
		} else {
			obj.disabled = true;
			obj.value = 0;			
		}
	}

	</script>
<%else%>
<%=buildBrowse(STR0017 + ' <small>' + oDim:value("nome") + "</small>", .t., oDS:Tablename(),,,,{ |aaData| prepRow(aaData) },{ "ID_DIM=" + dwStr(nIDDim) }, aButtons, 10, AC_ATT_REC_MANUT, AC_DIM_ATT)%> <%= /*"Atributos "*/ %>
<%=tagJS()%>
function doImportStruc()
{
  doLoad(<%=makeAction(AC_IMPORT_STRUC, {{ "obj", "dim"}, { "id", nIDDim} })%>, '_window', null, 'ImpStruct', '<%= TARGET_75_WINDOW %>', '<%= TARGET_75_WINDOW %>');
}

function doNext()
{                                                                                                         
  doLoadHere(<%=makeAction(AC_DIM_KEY, {{ "obj", "dim"}, { "id", nIDDim}})%>);
  return false;
}

function doPrevious()
{
  doLoadHere(<%=makeAction(AC_REC_MANUT, {{ "obj", "dim"}, { "id", nIDDim}, { "oper", OP_REC_STEPS } })%>);
  return false;
}
</script>


<%endif

return __Response

static function prepRow(aaData)
  local aTypes := dwComboOptions(ADVPL_FIELD_TYPES)
	local nPos := ascan(aTypes, { |x| x[2]==aaData[7]})

	aaData[7] := aTypes[nPos, 1]
	if aaData[2] <> 0
		aaData[2] := "<b>" + dwStr(aaData[2]) + "</b>"
		aaData[4] := "<b>" + aaData[4] + "</b>"
		aaData[5] := "<b>" + aaData[5] + "</b>"
		aaData[7] := "<b>" + aaData[7] + "</b>"
	else
		aaData[2] := ""
	endif
return .t.
%>