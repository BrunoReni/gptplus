<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwDimManut - Manutenção de dimensões
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 21.10.05 | 0548-Alan Candido | Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "DWDimManutConst.ch"
#include "dwdimmanut.ch"

#define ATT_M0_CODIGO_DESCRICAO STR0017 //####"Código da Empresa"

local oDS 			:= initTable(TAB_DIMENSAO)
local lOperSubmit 	:= .f., lClose := .f.
local aOperButtons
local aFields, aValues
local nID 			:= dwVal(HttpGet->ID)
local cNome, cDescricao, lNotificar, lAutoUpd, lOk
local aButtons := {}
local oDimAtt

if HttpGet->Action == AC_REC_MANUT
	aFields := {}
	HttpSession->subOper := dwVal(HttpSession->subOper)
	
	HttpGet->Oper := DwVal(HttpGet->Oper)
	
	// ação de "anterior" na página de indicadores
	if HttpGet->Oper == OP_REC_STEPS
		nID := dwVal(HttpGet->ID)
	    lOperSubmit 		 := .F.
	    lClose				 := .F.
	    HttpSession->subOper := OP_REC_STEPS
	elseif dwVal(HttpGet->Oper) == OP_SUBMIT
		lOperSubmit := .t.
		aValues := oDS:fromPost(HttpPost->APost)                               
		nID := dwVal(HttpPost->edID)
		
		if oDS:seek(1, { dwVal(nID) })
			if HttpSession->subOper == OP_REC_STEPS .or. HttpSession->subOper == OP_REC_EDIT
				lOk := oDS:update(aValues)
				if HttpSession->subOper == OP_REC_EDIT
					lClose := .t.
				endif
			elseif HttpSession->subOper == OP_REC_DEL
				lOk := oSigaDW:DropDim(dwVal(nID))
				lClose := .t.
			endif
		else
			if (lOk := oDS:append(aValues))
				nID := oDS:value("id")
				if oSigaDW:HaveDimEmpFil()
					oDimAtt := initTable(TAB_DIM_FIELDS)
					oDimAtt:append({ { "keyseq", ATT_M0_CODIGO_KEYSEQ } ,;
													 { "id_dim", nID } ,;
													 { "nome", ATT_M0_CODIGO_NOME } ,;
													 { "descricao", ATT_M0_CODIGO_DESCRICAO } ,;
													 { "visible", ATT_M0_CODIGO_VISIBLE .or. oDS:value("nome") == DIM_EMPFIL } ,;
													 { "tipo", ATT_M0_CODIGO_TIPO } ,;
													 { "tam", ATT_M0_CODIGO_TAM } } )
				endif
			endif
		endif
		
		if !lOk
			DWRaise(ERR_002, SOL_000, oDS:Msg(.t.))
		endif
		
		if !(HttpSession->subOper == OP_REC_DEL)
			oDS:update({ {"dt_process", ctod("  /  /  ")}, {"hr_process",""} })
			DWWaitJob(JOB_INITDIM, { oDS:Value("id") },, .T. )
			oDS:Refresh(.t.)
		endif
	else                           
		HttpSession->subOper := HttpGet->Oper
	endif          

	if oDS:seek(1, { dwVal(nID) }) 
		cNome      := oDS:value("nome")
		cDescricao := oDS:value("descricao")
		lNotificar := oDS:value("notificar")
		lAutoUpd   := oDS:value("autoupd")  
	else
		cNome      := ''
		cDescricao := ''
		lNotificar := .f.
		lAutoUpd   := .f.
	endif
	   
	
	//Exibe o ID da DIMENSÃO apenas durante a edição
 	If  HttpSession->subOper == OP_REC_EDIT
    	makeShow(aFields, 'edID', 'ID' , alltrim ( str (nID) ) ) 
	Else 
		makeHidden(aFields, 'edID' , nID)
	EndIf
		
		
	if cNome == DIM_EMPFIL
		makeShow(aFields, 'edNome'  , STR0002   , cNome) //'Nome'
	else
		makeKeyField(aFields, 'edNome'  , STR0002   , .T., 'C', 15, 0,,cNome) //'Nome'
	endif
	makeField(aFields, 'edDescricao', STR0003   , .T., 'C', 40, 0,,cDescricao) //'Descrição'
	makeField(aFields, 'edNotificar', STR0005   , .T., 'L',  1, 0,,lNotificar) //'Notificar'
	makeField(aFields, 'edAutoUpd' 	, STR0006	, .T., 'L',  1, 0,,lAutoUpd) //'Atz.Automatica'
	
	if HttpGet->Oper == OP_REC_STEPS .OR. dwVal(HttpGet->subOper) == OP_REC_NEW .OR. dwVal(HttpSession->subOper) == OP_REC_NEW
	    makeButton(aButtons, BT_SUBMIT, STR0016) //###"próximo"
	endif
	%>
	<%=buildForm('frmDimensao', STR0007, HttpGet->Action, OP_SUBMIT, aButtons, aFields)%> <%= /*'Dimensões'*/ %>
  <%if lOperSubmit
   	if lClose %>
   		<%=buildAutoClose()%>
   	<% else
 			DwSetProp(ID_TYPE_OPER, OP_REC_STEPS, ID_NAME_PRG_DIM)
 			DwSetProp(ID_ID_DIM, nID, ID_NAME_PRG_DIM)
 			%>
   		<%=buildAutoAction(AC_DIM_ATT, { {"id", nID} }, , .F./*HttpSession->subOper <> OP_NONE*/)%>
	<% endif
	  else%>
	<% if oSigaDW:HaveDimEmpFil() %>
	<%=tagJS()%>
	function edNome_valid(poField)
	{
		var cValue = poField.value;
		if (cValue == "<%=DIM_EMPFIL%>")
			defineFieldMessage(poField, "[ <%=DIM_EMPFIL%> ] <%= STR0018 /*###"é um nome reservado para a dimensão de Empresas/Filiais (SigaAdv)."*/ %>");
	}
	</script>
<%endif%>
	<%endif
else
	aOperButtons := {}
	makeOperAct(aOperButtons, STR0008, "ic_dim_att.gif"	 , AC_DIM_ATT	  ,  { {"oper", OP_REC_NO_STEPS} }, TARGET_80_WINDOW) //"Atributos"
	makeOperAct(aOperButtons, STR0009, "ic_att_key.gif"	 , AC_DIM_KEY	   , { {"oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW) //"Chave única"
	makeOperAct(aOperButtons, STR0010, "ic_dim_ds.gif"	 , AC_DIM_DS	   , { {"oper", OP_REC_NO_STEPS} }, TARGET_75_WINDOW) //"Fonte de dados"
	makeOperAct(aOperButtons, STR0011, "ic_show_data.gif", AC_SHOW_DATA	   , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_DIMENSION } }, TARGET_75_WINDOW) //"Navegação nos dados"
	makeOperAct(aOperButtons, STR0012, "ic_analisar.gif" , AC_ANALISAR_FRAG, { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_DIMENSION } }, TARGET_75_WINDOW) /*"Analisar fragmentação"*/
	makeOperAct(aOperButtons, STR0013, "page_export.gif" , AC_EXPORT_DATA  , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_DIMENSION }, { "tipo", EX_DIM } }, TARGET_75_WINDOW) /*"Exportar"*/
	makeOperAct(aOperButtons, STR0014, "ic_doc.gif"      , AC_DOCUMENTATION, { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_DIMENSION }, { "tipo", EX_DIM } }, TARGET_90_WINDOW) /*"Documentação"*/
	makeOperAct(aOperButtons, STR0015, "ic_schema.gif"   , AC_SHOW_SCHEMA  , { {"oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_DIMENSION }, { "tipo", EX_DIM } }, TARGET_75_WINDOW) /*"Esquema"*/
%>
    <%=buildBrowse(STR0007, .t., oDS:Tablename(), , , , , , , , , , aOperButtons, , , , , , iif (oUserDW:UserIsAdm(), .T., .F.))%> <%= /*"Dimensões"*/ %>
    <%=tagJS()%>
    <%=makeDimInfo()%>
    function u_operActIsEnable(aaButtonsList, anID)
    {                         
      var lAchou = false;
      
      for (var i = 0; i < aDims.length; i++)
      {
        if (aDims[i].id == anID)
        {
          var oDim = aDims[i];
          lAchou = true;
          aaButtonsList[1] = oDim.lAtt || oDim.lKey; // chave
          aaButtonsList[2] = oDim.lKey; // fonte de dados
          aaButtonsList[3] = oDim.lAtt || oDim.lKey; // navegação
          aaButtonsList[4] = aaButtonsList[3]; // fragmentação
          aaButtonsList[5] = aaButtonsList[3]; // exportação
          break;
        }    
      }
      if (!lAchou)
      {
        aaButtonsList[1] = false; // chave
        aaButtonsList[2] = false; // fonte de dados
        aaButtonsList[3] = false; // navegação
        aaButtonsList[4] = false; // fragmentação
        aaButtonsList[5] = false; // exportação
        lAchou = true;
      }
      return lAchou;
    }
    </script>
<%
endif

return __Response

static function makeDimInfo()
  local aBuffer := {}, nOldID
  local oQuery := initQuery(SEL_DIM_INFO)

  oQuery:open()
  aAdd(aBuffer, "var aDims = new Array();")
  while !oQuery:eof()
    nOldID := oQuery:value("id")
    nKeyAtt := 0
    nAtt := 0
    while !oQuery:eof() .and. nOldID == oQuery:value("id")
      nKeyAtt += oQuery:value("keyatt")
      nAtt += oQuery:value("att")
      oQuery:_Next()
    enddo
    aAdd(aBuffer, "aDims.push({ id: " + dwStr(nOldID) + ", "+;
                  "lKey: " +iif(nKeyAtt <> 0, "true", "false") + ", "+;
                  "lAtt: " +iif(nAtt <> 0, "true", "false") + "});")
  enddo
  
  oQuery:close()
  
return dwConcatWSep(CRLF, aBuffer)
%>