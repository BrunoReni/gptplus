<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwDimKey - Manutenção de chaves da dimensão
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 01.12.05 | 0548-Alan Candido | Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "DWDimManutConst.ch"
#include "dwDimKey.ch"
               
local oDim := initTable(TAB_DIMENSAO)
local oDS := initTable(TAB_DIM_FIELDS)
local nInd
local aFields := {}, aValues
local nID := dwVal(HttpGet->ID)
local cNome, cDescricao, lOk
local aSrcList := {}, aTargList := {}
Local cAction	:= AC_KEY_REC_MANUT
Local cOper		:= OP_REC_CONF
Local aButtons	:= {}
Local lEdit		:= .T.
Local cAux := "", cOldKeys := "", cNewKeys :=""

// trata o id da dimensão
// se a ação for a ação de editar sem ser por steps
if DwVaL(HttpGet->Oper) == OP_REC_NO_STEPS
	nID := DwVal(HttpGet->ID)	// recupera do get

	// trata a sessão aonde contêm o id da dimensão
	DwSetProp(ID_ID_DIM, DwStr(nID), ID_NAME_PRG_DIM)
	DwSetProp(ID_TYPE_OPER, DwStr(OP_REC_NO_STEPS), ID_NAME_PRG_DIM)
else								// em outro caso recupera da session
	nID := DwVal(DwGetProp(ID_ID_DIM, ID_NAME_PRG_DIM))
endif

if !oDim:Seek(1, { nID } )
	dwRaise(ERR_005, SOL_003, nID)
endif
cNome      := oDim:value("nome")
cDescricao := oDim:value("descricao")

// carga das listas
nInd := 1
oDS:Seek(4, { nID } )
while !oDS:eof() .and. oDS:value("id_dim") == nID
	if oDS:value("keyseq") == 0
		aAdd(aSrcList, { oDS:value("Descricao") + "("+ oDS:value("nome")+")", oDS:value("id") })
	else
		aAdd(aTargList, { oDS:value("Descricao") + "("+ oDS:value("nome")+")", oDS:value("id") })
		cOldKeys += DwStr(nInd++) + "-" + oDS:value("Descricao") + " ("+ oDS:value("nome") + ") "
	endif
	oDS:_next()
enddo                                                    	
aSort(aSrcList, , , {|x,y| x[1] < y[1]})

if HttpGet->Action == AC_KEY_REC_MANUT
	aButtons := {}
	if dwVal(HttpGet->Oper) == OP_REC_CONF
		cAux := ""
		aEval(aTargList, {|aDimField| cAux += DwStr(aDimField[2]) + ","})
		cAux := left(cAux, len(cAux) - len(","))
		if !(httpPost->edTargList == cAux)
			aSrcList := {}
			if valType(httpPost->edSrcList) == "C"
				httpPost->edSrcList := dwToken(httpPost->edSrcList, ",")
				for nInd := 1 to len(httpPost->edSrcList)
					if oDS:Seek(1, { httpPost->edSrcList[nInd]})
						if !oDS:update({{"keyseq", 0}})
							DWRaise(ERR_002, SOL_000, oDS:Msg(.t.))
						endif
						aAdd(aSrcList, { oDS:value("Descricao") + "("+ oDS:value("nome")+")", oDS:value("id") })
					endif
				next
			endif
				
			httpPost->edTargList := dwToken(httpPost->edTargList, ",")
	      	cNewKeys := ""
	      	aTargList := {}
			for nInd := 1 to len(httpPost->edTargList)
				if oDS:Seek(1, { httpPost->edTargList[nInd]})    
					if !oDS:update({{"keyseq", nInd}})
						DWRaise(ERR_002, SOL_000, oDS:Msg(.t.))
					endif
					cNewKeys += DwStr(nInd) + "-" + oDS:value("Descricao") + "( " + oDS:value("nome") + ")" + " "
					aAdd(aTargList, { oDS:value("Descricao") + "("+ oDS:value("nome")+")", oDS:value("id") })
				endif
			next
			
			oSigaDW:Log("(" + oUserDW:LoginName() + ") " + STR0010 + " " + cDescricao + " (" + cNome +")", STR0011 + ": " + cOldKeys, STR0012 + ": " + cNewKeys) //###"Modificação de estrutura da dimensão"####"Chaves Anteriores"###"Chaves Atuais"
			
			oDim:update({ {"dt_process", ctod("  /  /  ")}, {"hr_process",""} })
			DWWaitJob(JOB_INITDIM, { nID },, .T. )
			oDim:Refresh(.t.)
		endif
	else                           
		DWSetProp("subOper", HttpGet->Oper)
	endif          

endif

makeHidden(aFields, 'edID'       , nID)
makeHidden(aFields, 'edID_DIM'   , nID)
makeShow(aFields, 	'edNome'     , STR0001, cNome) //'Nome'
makeShow(aFields, 	'edDescricao', STR0002, cDescricao) //'Descrição'
makeDualList(aFields, STR0003, STR0004, "edSrcList", aSrcList, STR0005, "edTargList", aTargList, .t.) //"Chave Única"###"Candidatos"###"Chave"

if !(dwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_DIM)) == OP_REC_NO_STEPS)
	makeButton(aButtons, BT_NEXT)// {"oper", OP_REC_NO_STEPS}, ,  }
 	makeButton(aButtons, BT_PREVIOUS,, AC_DIM_ATT)
 	makeButton(aButtons, BT_CANCEL)
else
 	makeButton(aButtons, BT_SUBMIT)
 	makeButton(aButtons, BT_CANCEL)
endif
%>
<%=buildForm('frmKeyDimensao', STR0008, cAction, cOper, aButtons, aFields, lEdit)%> <%=/*'Chave de dimensão'*/ %>
<%if dwVal(HttpGet->Oper) == OP_REC_CONF%>
  <%if !(dwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_DIM)) == OP_REC_NO_STEPS)%>
		<%= buildAutoAction(AC_SHOW_SCHEMA, { {"oper", DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_DIM)}, { "w", CHKBOX_ON}, { "ObjType", OBJ_DIMENSION }, { "tipo", EX_DIM }, { "id", DwGetProp(ID_ID_DIM, ID_NAME_PRG_DIM) }}, , .f.) %>
  <%else%>
		<%= buildAutoClose() %>
  <%endif%>
<%endif%> 
<%=tagJS()%>
function u_setWindowPosSize()
{
  setWindowSize(850, 425); 
}
</script>