<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryDef - Definição de consulta (desing)
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 11.01.05 | 0548-Alan Candido | Versão 3
// 10.04.08 | 0548-Alan Candido | BOPS 142154
//          |                   | Implementação da apresentação dos "valores de referencia"
//          |                   | na aba de "filtros"
// 26.05.08 |0548-Alan Cândido  | BOPS 146229
//          |                   | Ajuste de lay-out e strings de tradução
// 29.05.08 |0548-Alan Cândido  | BOPS 146059
//          |                   | Implementação de novas funcionalidades:
//          |                   | . Opção de sub-total para ranking
//          |                   | . Opção de total para ranking
// 09.12.08 | 0548-Alan Candido | FNC 00000149278/811 (8.11) e 00000149278/912 (9.12)
//          |                   | Implementação de nova funcionalidade:
//          |                   | . Ranking por nível de drill-down 
// 04.03.13 | 8202-Helio Leal   | FNC 00000027408/2012 (8.11) chamado: TFZHME   
//          |                   | Retirar a opção 'apurar outros' do gráfico
//			|					| Opção disponível apenas para tabela.(Linha 919).
// --------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwQryDef.ch"

#define IND_SEM_RNK  "0"

local nIDCons, cType

// trata o id do cubo
// se a ação for a ação de editar sem ser por steps
HttpGet->Oper := DwVaL(HttpGet->Oper)
if HttpGet->Oper == OP_REC_NO_STEPS .OR. HttpGet->Oper == OP_EXEC_ONLINE
	nIDCons := DwVal(HttpGet->ID)	// recupera do get
	
	// trata a sessão aonde contêm o id do cubo
	DwSetProp(ID_ID_QUERY, DwStr(nIDCons), ID_NAME_PRG_QRY)
	DwSetProp(ID_TYPE_OPER, HttpGet->Oper, ID_NAME_PRG_QRY)
else								// em outro caso recupera da session
	nIDCons 		:= DwVal(DwGetProp(ID_ID_QUERY, ID_NAME_PRG_QRY))
endif

if isNull(HttpGet->type)
	cType := DwGetProp(ID_TYPE, ID_NAME_PRG_QRY)
else
	cType := httpGet->type                   
	dwSetProp(ID_TYPE, cType, ID_NAME_PRG_QRY)
endif


if !(dwGetProp(ID_ID_QUERY) == nIDCons)
	dwSetProp("consulta"+TYPE_TABLE_S, nil)
	dwSetProp("consulta"+TYPE_GRAPH_S, nil)
	dwSetProp(ID_ID_QUERY, nIDCons)
endif
HttpSession->subOper := OP_SUBMIT
if DWPainelQuery(.t., nIDCons, dwVal(cType))
%>
<%= buildAutoAction(AC_QRY_CUB_FILTER, { { "id", nIDCons }, { "Oper", OP_REC_STEPS }, { "ObjType", OBJ_QUERY } })%>
<%
endif	

return __Response

function DWPainelQuery(alDefinition, anIDCons, anType, aoConsulta)
local __Response := ""
local oConsulta
local aActionParams, lMaySaveAs := .T., nOper := OP_SUBMIT
local oDefinition := THDefinition():New()
local cJSAux := ""
local aTabs := {}
local aWhereFormFields := {}
local aAlertFormFields := {}
local nRnkInd
local aFields := {}, aButtons := {}, aOperButtons := {}
local nInd, nAte := 0
local aAux := {}, lSize := .f.
local lClose := .f.
local lCanSave

if valType(aoConsulta) == "O"
	oConsulta := aoConsulta
	anIDCons := aoConsulta:ID()
	anType := aoConsulta:_Type()
else
	oConsulta := TConsulta():New(anIDCons, anType, .f.)
endif

lCanSave := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, oConsulta:ID())

// verifica se é execução online
if DwVaL(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)) == OP_EXEC_ONLINE
	oDefinition:Width(900)
	oDefinition:Height(300)
	// inválida o título, conseguentemente o form não irá exibir o label/barra do título
	aActionParams := { }
elseif DwVaL(HttpGet->Oper) == OP_REC_STEPS
	oDefinition:Width(790)
	makeButton(aButtons, BT_SUBMIT, STR0048) //###"finalizar"
	makeButton(aButtons, BT_PREVIOUS, STR0003, AC_QUERY_ALERT, , { { "oper", HttpGet->Oper } }) //###"anterior"
	makeButton(aButtons, BT_CANCEL, STR0049) //###"fechar"
endif

// verifica permissão para manutenção da consulta
if alDefinition
	lMaySaveAs := oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, oConsulta:ID())
	if !lMaySaveAs
		// exibe msg de que o usuário não possui permissão
		HttpSession->DWErrMsg := STR0001 //"Atenção: usuário não possui privilégio de manutenção desta consulta."
		makeButton(aButtons, BT_CLOSE)
		nOper := OP_NONE
	endif
endif

if httpHeadin->Command == "POST" .and. (dwVal(HttpGet->Oper) == OP_SUBMIT .or. dwVal(HttpPost->Oper) == OP_SUBMIT)
	oConsulta:updFromPost()
	if alDefinition
		oConsulta:doSave(oConsulta:name(), alltrim(HTTPGET->Confirm)=="true")
		lClose := .t.
	endif
endif
if alDefinition
	cJSAux += qryDStr(oConsulta, aTabs, oDefinition) 
else                  
	aAux := {}
	cJSAux += showQuery(aTabs, oConsulta)
endif
cJSAux += qryDFil(oConsulta, aTabs, aWhereFormFields, alDefinition, lCanSave)
if oConsulta:_Type() == TYPE_TABLE
	cJSAux += qryDAlm(oConsulta, aTabs, aAlertFormFields, alDefinition, lCanSave)
endif
cJSAux += qryDRnk(oConsulta, aTabs, alDefinition) 
if alDefinition
	cJSAux += qryDVirt(oConsulta, aTabs, alDefinition, lCanSave)
endif

if oConsulta:_Type() == TYPE_TABLE
	cJSAux += qryDOpt(oConsulta, aTabs, alDefinition)
endif

cJSAux += qryDCrw(oConsulta, aTabs, alDefinition)

if !alDefinition
	cJSAux += qrySelection(oConsulta, aTabs, .f.)
endif

// cria a aba principal contendo as abas acima criadas
makeTabbedPane(aFields, "abaMain", aTabs)

if lMaySaveAs .and. DwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)) == OP_REC_STEPS
	lSize := .t.
endif
          
if !alDefinition
	makeHidden(aFields, "ctrlExec", CHKBOX_ON)
endif	

makeHidden(aFields, "consID", anIDCons)
makeHidden(aFields, "consType", anType)
makeHidden(aFields, "axisX", "")
makeHidden(aFields, "axisY", "")
makeHidden(aFields, "axisM", "")
makeHidden(aFields, "graphClass", "")
makeHidden(aFields, "graphProps", "")
makeHidden(aFields, "graphYProps", "")
makeHidden(aFields, "graphY2Props", "")
makeHidden(aFields, "whe", "")
makeHidden(aFields, "alr", "")
makeHidden(aFields, "rnk", "")
makeHidden(aFields, "curvaABC", "")
aEval(oConsulta:DimFieldsX(), { |x| makeHidden(aFields, "sel"+x:Alias(), "")})
aEval(oConsulta:DimFieldsY(), { |x| makeHidden(aFields, "sel"+x:Alias(), "")})
aEval(oConsulta:Indicadores(), { |x| makeHidden(aFields, "sel"+x:Alias(), "")})
%>
<%= buildForm('#frmConsulta', nil   , HttpGet->Action, nOper , aButtons , aFields , .t.   ,        ,       , {|aaBuffer, aaParams, alEdit| prepSave(aaBuffer, aaParams, alEdit) },            ,       , "width:100%", /*bottom*/, /*acDivID*/,aOperButtons,/*acEncyType*/,/*aaToolBar*/,/*acMethod*/, aActionParams , "", .F.) %>
<%if lClose .and. !(DwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)) == OP_EXEC_ONLINE) .and. !(isNull(HttpPost->CtrlExec,CHKBOX_OFF)==CHKBOX_ON)%>
	<%= buildAutoClose()%>
<%endif%>
<%= tagJS() %>
<% if lSize %>
function u_setWindowPosSize()
{
  setWindowSize(850, 600);
}
<%endif%>
function u_bodyonload()
{
	initAba();
	var oFormMsg = getElement("formMsg");
	if (oFormMsg)
	{
	<%if oSigaDW:Excel() == EXCEL_NONE%>
		oFormMsg.innerHtml = "<%= STR0008 %>"; //'Integração com MS-Excel DESATIVADA'
	<%elseif oSigaDW:Excel() == EXCEL_SOME%>
		oFormMsg.innerHtml = "<%= STR0009 %>"; //'Integração com MS-Excel ATIVADA, se opção for habilitada na consulta'
	<%elseif oSigaDW:Excel() == EXCEL_ALL%>
		oFormMsg.innerHtml = "<%= STR0010 %>"; //'Integração com MS-Excel ATIVADA, para todas as consultas'
	<%endif%>
	}

	<%if DwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)) == OP_EXEC_ONLINE .and. dwVal(HttpGet->Oper) == OP_SUBMIT %>
		try { parent.window.doReload(); } catch (err) { } // realiza a função javascript doReload() da página que chamou esta definição como execução online
	<%endif%>
  	<% if alDefinition %>
		initPivot();
	<%endif%>
    ajusteLayout();
    edRankStyle_onchange(getElement("edRankStyle"));
}
</script>
<%=cJSAux%>
<%=tagJS()%>
function frmConsulta_valid(oSender) {
	var lOk = true;
	var aMsg = new Array();
<% if alDefinition %>
	var oDefine = getApplet('<%=oDefinition:AppName()%>');
	var cAxisX = oDefine.getAxisX();
	var cAxisY = oDefine.getAxisY();
	var cAxisM = oDefine.getAxisM();
	
	if ((cAxisX.length==0) && (cAxisY.length==0))                   
	{                          	
		lOk = false;
		aMsg.push("<%= STR0011 %>"); //". atributo agregador"
	}
	
	if (cAxisM.length==0)
	{
		lOk = false;
		aMsg.push("<%= STR0012 %>"); //". indicador"
	}
<% endif %>	    
  if (lOk) {                               
    lOk = validRank(getObject('edRankStyle'), aMsg);
	} else {                                 
		aMsg.push("<%= STR0014 %>"); //Ao menos um, deve ser selecionado."
	}                                        
		
	if (!(lOk))
		alert("<%=STR0013%>" + aMsg.join('<%= STR0066%>\n')); //"A definição da consulta, esta incompleta:\n\n"

	return lOk;
}

function doPrepData() 
{                  
	var oForm = getObject('frmConsulta');

<%if alDefinition%>
  <%=buildDef(oDefinition)%>
<%endif%>
<%=buildWhere(aWhereFormFields, oConsulta)%>
<%=buildAlerts(aAlertFormFields)%>
}                 

<%if DwVal(DwGetProp(ID_TYPE_OPER, ID_NAME_PRG_QRY)) == OP_REC_STEPS%>
	function doPrevious() 
	{
		doLoadHere(<%=makeAction(AC_QUERY_ALERT, { { "id", anIDCons }, { "Oper", OP_REC_STEPS } })%>);
  return false;
	}
<%else%>
	function doExec() 
	{                         
		doLoadHere(<%=makeAction(AC_QUERY_EXEC,{{ "oper", OP_REC_NO_STEPS}, { "id", oConsulta:ID()}, { "type", oConsulta:_type() } })%>);
	}                                                                                   
<%endif%>

function edCor_dot(oSender, acFieldName)
{                                         
<%if isFirefox()%>
	showSimplePalleteColor(oSender.id.substr(3), aoEvent)
<%else%>
	showSimplePalleteColor(oSender.id.substr(3), window.event)
<%endif%>
}

function ajusteLayout() {
  var oTable = getElement('frmRankLevelbrowse');
	oTable.style.height = '100%';
}

function edRankStyle_onchange(Sender) {
	var oTable = getElement('frmRankLevelbrowse');
	var oRankInd = getParentElement(oTable);
	var oCurvaABC = getParentElement(getElement('frmClassCurvaABCbrowse'));
	
	if (Sender.value == '<%=RNK_STY_CLEAR%>') {
	    hideElement(oRankInd);
	    if (oCurvaABC)
	        hideElement(oCurvaABC);
	} else {
	    showElement(oRankInd);
	    var oRows = oTable.getElementsByTagName('TR');
	    if (Sender.value == '<%=RNK_STY_LEVEL%>') {
	        getElement('edRankOutrosOn').checked = true;
	        if (oCurvaABC)
	            hideElement(oCurvaABC);
	        hideElement(oRows[1]);
	        for (var nRow = 2;nRow < oRows.length; nRow++) {
	            showElement(oRows[nRow]);
	        }
	    } else {
	        showElement(oRows[1]);
	        for (var nRow = 2;nRow < oRows.length; nRow++) {
	            hideElement(oRows[nRow]);
	        }  
	        
	        if (Sender.value == '<%=RNK_STY_CURVA_ABC%>') {
	            showElement(oCurvaABC);	            	            
	            
	            hideElement(getElement('edRank0001'));
	            hideElement(getElement('edType0001')); 
	            
	            getElement('edType0001').options[0].selected = true; 
	        	getElement('edRank0001').value = ''; 
	        	
	        } else {
	            if (oCurvaABC)
	                hideElement(oCurvaABC); 
	                
	            showElement(getElement('edRank0001'));
	            showElement(getElement('edType0001'));
	        }
	    }
	}
}


function validRank(oSender, aMsg)
{                    
    function validData(acIndex, alRequired) {
        var lRet = true;
        var oIndList = getObject('edIndList' + acIndex);
        if ((alRequired) || (!(oIndList.value == '<%=IND_SEM_RNK%>'))) {
            var oType = getObject('edType' + acIndex);
            var oQtde = getObject('edRank' + acIndex);
            var nQtde = parseInt(oQtde.value);

            if (isNaN(oQtde.value))
                nQtde = 0;
      
            if (oType.value == '<%=RNK_PARETO%>') {
                if ((nQtde < 1) || (nQtde > 100)) {
                    defineFieldMessage(oQtde, "<%= STR0051 /*"O valor informado esta fora da faixa de 1 a 100."*/ %>");
                    oQtde.focus();
                    aMsg.push("<%=STR0051%>");
                    lRet = false;
                }
            } else if ((nQtde < 1)) {
                defineFieldMessage(oQtde, "<%= STR0050 /*"Ao selecionar um indicador para ranking, este campo é obrigatório e deve ser igual ou maior que '1'."*/ %>");
                aMsg.push("<%=STR0050%>");
                oQtde.focus();
                lRet = false;
            }
        } 	
        return lRet;
    }
	               
    var cStyle = oSender.value;
    var lRet = true;
  
    if ((cStyle == '<%=RNK_STY_PADRAO%>') || (cStyle == '<%=RNK_STY_CURVA_ABC%>')) {
        var oIndList = getObject('edIndList0001');
        if (oIndList.value == '<%=IND_SEM_RNK%>') {
            defineFieldMessage(oIndList, '<%=STR0074 /*Selecione um indicador.*/%>'); 
            aMsg.push('<%=STR0074 /*Selecione um indicador.*/%>'); 
            lRet = false;
	    } else {
            lRet = validData('0001', true);
            if ((lRet) && (cStyle == '<%=RNK_STY_CURVA_ABC%>')) {
                var aClassif = new Array();
                var oAux, cClassif, nPerc, nTot, nDesc, cColor;
                var oPerc, oPercs = new Array();
        
                nTot = 0;
                    <% for nInd := 1 to 5 %>                
                    cClassif = getElement('edClass<%=dwInt2Hex(nInd, 4)%>').value;
                oPerc = getElement('edPerc<%=dwInt2Hex(nInd, 4)%>');
                oPercs.push(oPerc)
                nPerc = parseInt(oPerc.value);
                nTot += nPerc;
                cDesc = getElement('edDescricao<%=dwInt2Hex(nInd, 4)%>').value;
                cColor = getElement('edCor<%=dwInt2Hex(nInd, 4)%>').value;
                aClassif.push({ classif: cClassif, perc: nPerc, desc: cDesc, color: cColor });
                    <% next %>
                    if (!(nTot == 100)) {                                                                                  
                    defineFieldMessage(oSender, '<%=STR0052 /*"A soma das faixas de classificação deve ser igual a 100."*/ %>');
                    aMsg.push('<%=STR0052%>');
                    lRet = false;
                    for (var nInd = 0; nInd < oPercs.length; nInd++) {
                        defineFieldMessage(oPercs[nInd], '<%= STR0052 %>');
                        oPercs[nInd].focus();
                    }
                }
            }
        }
    } else if (cStyle == '<%=RNK_STY_CLEAR%>') {
        var oRankOn = getObject('edRankOn');
        oRankOn.checked = false;
    } else {
            <%                          
            aDimY := oConsulta:DimFieldsY()
        for nInd := 1 to len(aDimY)
            %>	
            lRet = validData('<%=dwInt2Hex(nInd+1,4)%>') && lRet;
            <%next%>
        }
    return lRet;
}
</script>
<%
/*
//TODO - colocar aviso de que o cubo esta sendo atualizado
local lShowLeg := .f.
if lShowLeg%>
&nbsp;&nbsp;&nbsp;&nbsp;<img width=8 height=8 border=0 src=<%=dwUrlFile("btradiooff.gif")%>><small>Cubo encontra-se em manuteção</small>
<%endif
*/%>
<%
oConsulta:Close()

return .f.

#define DIMENSION_IMAGE		"ic_dimensao.gif"
#define DIMFIELD_IMAGE		"ic_atributo.gif"
#define MEASURE_IMAGE		"ic_indicador.gif"
#define DINA_MEASURE_IMAGE	"ic_indicator_dinamico.gif"

static function qryDStr(aoConsulta, aaTabs, aoDefinition)
	local aBuffer := {}
	local oConsulta := aoConsulta
	local oCubeDef, aAux, aButtons
	local aAxisX, aAxisY, aAxisM, aCRank, aCWhere, aCAlert
	local cAxisY, cAxisX, cAxisM
	local cGraphClass, cGraphProps, cGraphYProps, cGraphY2Props
	local lIndSobre, lEmptyCell, lRank, lRankOutros, lRankTotal, lRankSubTotal, lAlert, lHint := .f.
	local lIgnoreZero, lFilter, lTotal := .f.
	local aAppDim, aAppInd, aDimFields
	local nInd, nInd1
	local oDefinition := aoDefinition
	local FUNC_AGREG, oCalc := InitTable(TAB_CALC)
	
	// Tabelas
	
	oDefinition:DefType(oConsulta:_Type())
	
	// dimensoes
	aAxisX := {}
	aAxisY := {}
	if oConsulta:_Type() == TYPE_GRAPH
		aEval(oConsulta:DimFieldsX(), { |x| aAdd(aAxisX, "("+DWStr(x:Temporal())+"|"+alltrim(x:GraphColor())+")"+iif(x:DrillDown(), "*", "")+DWStr(x:ID())) })
		aEval(oConsulta:DimFieldsY(), { |x| aAdd(aAxisY, "("+DWStr(x:Temporal())+"|"+alltrim(x:GraphColor())+")"+iif(x:DrillDown(), "*", "")+DWStr(x:ID())) })
		// Propriedades do grafico
		cGraphClass := oConsulta:GraphClass()
		cGraphProps := oConsulta:GraphProps()
		cGraphYProps := oConsulta:GraphYProps()
		cGraphY2Props := oConsulta:GraphY2Props()
	else
		aEval(oConsulta:DimFieldsX(), { |x| aAdd(aAxisX, "("+DWStr(x:Temporal())+"|"+iif(x:isSubTotal(), "1", "0")+")"+iif(x:DrillDown(), "*", "")+DWStr(x:ID())) })
		aEval(oConsulta:DimFieldsY(), { |x| aAdd(aAxisY, "("+DWStr(x:Temporal())+"|"+iif(x:isSubTotal(), "1", "0")+")"+iif(x:DrillDown(), "*", "")+DWStr(x:ID())) })
	endif 
	
	// indicadores
	aAxisM := {}
	aEval(oConsulta:Indicadores(), { |x| iif(x:Ordem() > -1, aAdd(aAxisM, x:CharIndicador()+DWStr(x:ID())), NIL) })
	
	cAxisY := DWConcatWSep(";", aAxisY)
	cAxisX := DWConcatWSep(";", aAxisX)
	cAxisM := DWConcatWSep(";", aAxisM)
	
	// valida cookies vazios
	cAxisX := iif(cAxisX == "none", "", cAxisX)
	cAxisY := iif(cAxisY == "none", "", cAxisY)
	cAxisM := iif(cAxisM == "none", "", cAxisM)
	
	// vetores para reserva
	aAppDim := {}
	aAppInd := {}
	
	oCubeDef := oConsulta:Cube()
	
	// resgatar DIMENSÕES
	aAux := oCubeDef:DimProp("nome")
	for nInd := 1 to len(aAux)
		aAdd(aAppDim, {"#"+aAux[nInd], 0, DIMENSION_IMAGE})
		aDimFields := oCubeDef:DimProp("dimfields", nInd)
		for nInd1 := 2 to len(aDimFields)
			if aDimFields[nInd1, 13]
				aAdd(aAppDim, {iif(aDimFields[nInd1,2]=="D", "@", "")+aDimFields[nInd1,9], aDimFields[nInd1,12], DIMFIELD_IMAGE})
			endif
		next
	next
	
	// resgatar indicadores
	aAux := oCubeDef:GetIndicadores()
	for nInd := 1 to len(aAux)
		if aAux[nInd, 9]
			aAdd(aAppInd, {iif(aAux[nInd, 7] == "N","","~")+alltrim(aAux[nInd, 5]), aAux[nInd, 1], MEASURE_IMAGE })
		endif
	next
	
	// resgatar indicadores virtuais
	//####TODO - efetuar a carga de indicadores virtuais a partir da definição
	oCalc:Seek(2, { aoConsulta:ID() })
	while !oCalc:Eof() .and. oCalc:value("id_cons") == aoConsulta:ID()
		aAdd( aAppInd, {"@"+alltrim(oCalc:value("nome")), -oCalc:value("id"), DINA_MEASURE_IMAGE} )
		oCalc:_Next()
	enddo
	
	aAux := {}

	makeCustomField(aAux, "edStruct", oDefinition:Buffer())
	
	// cria a aba tabelada
	makeChildTabbed(aaTabs, "abaEstrutura", STR0019, aAux) //"Estrutura"
	
	aEval(oConsulta:DimFieldsX(), { |x| aAdd(aAxisX, "("+DWStr(x:Temporal())+"|"+alltrim(x:GraphColor())+")"+iif(x:DrillDown(), "*", "")+DWStr(x:ID())) })
	aEval(oConsulta:DimFieldsY(), { |x| aAdd(aAxisY, "("+DWStr(x:Temporal())+"|"+alltrim(x:GraphColor())+")"+iif(x:DrillDown(), "*", "")+DWStr(x:ID())) })
	
	aAdd(aBuffer, tagJS())
	if isFireFox()
		aAdd(aBuffer, "var aDataSaved = new Array();")
		aAdd(aBuffer, "aDataSaved['x'] = '';")
		aAdd(aBuffer, "aDataSaved['y'] = '';")
		aAdd(aBuffer, "aDataSaved['m'] = '';")
		aAdd(aBuffer, "function abaEstrutura_doShow()")
		aAdd(aBuffer, "{")
		aAdd(aBuffer, "  initPivot();")
		aAdd(aBuffer, "  var oDefine = getApplet('"+oDefinition:AppName()+"');")
		aAdd(aBuffer, "  if (!(aDataSaved['x'] == ''))")
		aAdd(aBuffer, "	   oDefine.setAxisX(aDataSaved['x']);")
		aAdd(aBuffer, "  if (!(aDataSaved['y'] == ''))")
		aAdd(aBuffer, "	   oDefine.setAxisY(aDataSaved['y']);")
		aAdd(aBuffer, "  if (!(aDataSaved['m'] == ''))")
		aAdd(aBuffer, "	   oDefine.setAxisM(aDataSaved['m']);")
		aAdd(aBuffer, "}")

		aAdd(aBuffer, "function abaEstrutura_doHide()")
		aAdd(aBuffer, "{")
		aAdd(aBuffer, "  var cAux")
		aAdd(aBuffer, "	var oDefine = getApplet('"+oDefinition:AppName()+"');")
		aAdd(aBuffer, "  cAux = oDefine.getAxisX();")
		aAdd(aBuffer, "  aDataSaved['x'] = (cAux == aDataSaved['x'])?'':cAux;")
		aAdd(aBuffer, "  cAux = oDefine.getAxisY();")
		aAdd(aBuffer, "  aDataSaved['y'] = (cAux == aDataSaved['y'])?'':cAux;")
		aAdd(aBuffer, "  cAux = oDefine.getAxisM();")
		aAdd(aBuffer, "  aDataSaved['m'] = (cAux == aDataSaved['m'])?'':cAux;")
		aAdd(aBuffer, "}")
	endif
	aAdd(aBuffer, "function initPivot()")
	aAdd(aBuffer, "{")
	aAdd(aBuffer, "	var oDefine = getApplet('"+oDefinition:AppName()+"');")
	aAdd(aBuffer, "	oDefine.setDrill("+iif(oConsulta:HaveDrillDown(),"true","false")+");")
	aAdd(aBuffer, "	oDefine.setViewList(true);")
	aAdd(aBuffer, "	oDefine.setQtLevel("+dwStr(oConsulta:DimCountY()-1)+");")
	aAdd(aBuffer, "	oDefine.setCubeName('"+oConsulta:Cube():Name()+"');")
	if oConsulta:_Type() == TYPE_GRAPH
		aAdd(aBuffer, "	oDefine.setGraphType("+iif(empty(oConsulta:GraphClass()), "0", DWStr(oConsulta:GraphClass()))+");")
		aAdd(aBuffer, "	oDefine.setGraphProps('"+oConsulta:GraphProps()+"');")
		aAdd(aBuffer, "	oDefine.setGraphYProps('"+oConsulta:GraphYProps()+"');")
		aAdd(aBuffer, "	oDefine.setGraphY2Props('"+oConsulta:GraphY2Props()+"');")
	endif
	for nInd := 1 to len(aAppDim)
		aAdd(aBuffer, "	oDefine.addDimension('" + alltrim(aAppDim[nInd,1]) + "', " + dwStr(aAppDim[nInd,2]) + ', "' + aAppDim[nInd,3] + '");')
	next
	
	for nInd := 1 to len(aAppInd)
		aAdd(aBuffer, "	oDefine.addMeasure('" + alltrim(aAppInd[nInd,1]) + "', " + dwStr(aAppInd[nInd,2]) + ',"' + aAppInd[nInd,3] + '");')
	next
	
	aAdd(aBuffer, "	oDefine.buildTree();")
	
	FUNC_AGREG = dwComboOptions(AGG_LIST_FOR_APPLET)
	for nInd := 1 to len(FUNC_AGREG)
		aAdd(aBuffer, '	oDefine.addAgregation("' + FUNC_AGREG[nInd][2] + '",' + FUNC_AGREG[nInd][1] + ', "' + FUNC_AGREG[nInd][3] + '");')
	next
	
	// Atenção: definir as propriedades dos eixos sempre por último
	aAdd(aBuffer, "	oDefine.setAxisX('"+cAxisX+"');")
	aAdd(aBuffer, "	oDefine.setAxisY('"+cAxisY+"');")
	aAdd(aBuffer, "	oDefine.setAxisM('"+cAxisM+"');")
	
	aAdd(aBuffer, "}")
	aAdd(aBuffer, "</script>")
	
return dwConcatWSep(CRLF, aBuffer)
                 
/*
--------------------------------------------------------------------------------------
Responsável por recuperar valores modificados nos filtros pelo usuário e defini-los no
objeto consulta
Args: aoConsulta, objeto, contém a consulta na qual deverão ser definidos as modificações
--------------------------------------------------------------------------------------
*/
function bindQryDFil(aoConsulta)
    
    Local aAux, nInd, lSelected
    
	// Params
	aAux := aoConsulta:Params()
	for nInd := 1 to len(aAux)
		&("HttpSession->pt"+aAux[nInd, 1]) := iif (!empty(&("HttpPost->pt"+aAux[nInd, 1])), &("HttpPost->pt"+aAux[nInd, 1]), aAux[nInd, 2])
	next
	
	// verifica se não houve o submit de página via iframe, indicando busca por dados via htmlpivot
	if isNull(HttpGet->jscript, CHKBOX_OFF) == CHKBOX_OFF
		// verifica se houve o submit da página, indicando modificações em propriedades
		if !isNull(HttpPost->APost) .and. len(HttpPost->APost) > 0
			// verifica se o usuário habilitou/desabilitou as propriedades
			// (propriedades serão salvas ao final de todo o processo e antes da execução da consulta)
			aoConsulta:Filtered( isNull(HttpPost->cbFiltered, CHKBOX_OFF) == CHKBOX_ON )
   		aoConsulta:IgnoreZero( isNull(HttpPost->cbIgnoreZero, CHKBOX_OFF) == CHKBOX_ON )
			
			aAux := aoConsulta:Where(.t.)
			for nInd := 1 to len(aAux)
				if (aAux[nInd]:Tipo() == FILTER_NORMAL)
					// verifica se o filtro foi habilitado pelo usuários para esta consulta
					if !empty(&("HttpPost->" + aAux[nInd]:htmlID()))
						 aAux[nInd]:Selected( &("HttpPost->" + aAux[nInd]:htmlID()) == CHKBOX_ON )
					else
						aAux[nInd]:Selected(.F.)
					endif
					
					DwSetProp(aAux[nInd]:Name(), aAux[nInd]:Selected())
				endif
			next
		endif
		
		// define na sessão os valores para serem acessíveis por esta function a partir htmlpivot/via iframe
		DwSetProp("cbFiltered"	, aoConsulta:Filtered())
		DwSetProp("cbIgnoreZero", aoConsulta:IgnoreZero())
	else
		// recupera as propriedades da sessão
		aoConsulta:Filtered( DwGetProp("cbFiltered") )
 		aoConsulta:IgnoreZero( DwGetProp("cbIgnoreZero") )
   		
 		aAux := aoConsulta:Where(.t.)
 		for nInd := 1 to len(aAux)
 			if (aAux[nInd]:Tipo() == FILTER_NORMAL)
			// verifica se o filtro foi habilitado pelo usuários para esta consulta
				lSelected := DwGetProp(aAux[nInd]:htmlID())
				if isNull(lSelected, .F.)
					aAux[nInd]:Selected(lSelected)
				endif
			endif
 		next
	endif
	
return
                 
function qryDFil(aoConsulta, aaTabs, aaWhereFormFields, alDefinition, alCanSave)
	local oConsulta := aoConsulta
	local nInd, aFields := {}
	local aCWhere := {}, aAux, lSelected
	local x, aAux2
	local oWhereCons := InitTable(TAB_CONS_WHE)
  local oCalc := InitTable(TAB_CALC), nPos, cAux
	local aRefs := {{}, {}}
	
	// Lista de where
	aEval(oConsulta:Where(.f.), { |x| aAdd(aCWhere, x:ID()) })
	
	if alCanSave
		makeSubTitle(aFields, STR0020, STR0046, makeAction(AC_QRY_CUB_FILTER, {{ "id", aoConsulta:id()}, { "oper", OP_REC_NO_STEPS}, { "ObjType", OBJ_QUERY } } )) //"Opções"###"Manutenção"
	else
		makeSubTitle(aFields, STR0020) //"Opções"
	endif
	makecustomfield(aFields, "customFiltered", makeCheckField(NIL, "cbFiltered", STR0021,,, oConsulta:Filtered())) //"Apresentar com filtro aplicado"
	makecustomfield(aFields, "customIgnoreZero", makeCheckField(NIL, "cbIgnoreZero", STR0022,,, oConsulta:IgnoreZero())) //"Ignorar fato, quando todos os indicadores selecionados forem igual a ZERO"
	
	aaWhereFormFields := {}
	aAux := oConsulta:Where(.t.)
	
	if ascan(aAux, { |x| (x:Tipo() == FILTER_NORMAL) }) != 0
		makeSubTitle(aFields, STR0023) //"Opcionais"
		for nInd := 1 to len(aAux)
			x := aAux[nInd]
			if (x:Tipo() == FILTER_NORMAL)
				// verifica se o filtro está habilitado
				lSelected := aScan(aCWhere, x:ID()) > 0
     		aAux2 := x:ExpHtml(lSelected, , , , , oConsulta:Params())
				makecustomfield(aFields, x:htmlID(), aAux2[2] + " " + aAux2[3] )
				aAdd(aaWhereFormFields, { x:htmlID(), x:ID() })
			endif
		next
	endif
	
	if ascan(aAux, { |x| x:Tipo() == FILTER_SECURE }) != 0
		makeSubTitle(aFields, STR0024) //"Obrigatórios"
		for nInd := 1 to len(aAux)
			x := aAux[nInd]
			if x:Tipo() == FILTER_SECURE
				if alDefinition
					makecustomfield(aFields, x:htmlID(), x:ExpHtml(lSelected)[2] + " " + x:ExpHtml("disabled")[3] )
				else
					aAux2 := x:ExpHtml("disabled")
					makecustomfield(aFields, x:htmlID(), aAux2[2] + " " + aAux2[3])
				endif
				aAdd(aaWhereFormFields, { x:htmlID(), x:ID() })
			endif
		next
	endif
	
	aAux := oConsulta:Segto()
	if len(aAux) > 0
		makeSubTitle(aFields, STR0025) //"Segmentação"
		for nInd := 1 to len(aAux)
			x := aAux[nInd]
			makecustomfield(aFields, x:htmlID(), x:ExpHtml("disabled")[2] + " " + x:ExpHtml("disabled")[3])
			aAdd(aaWhereFormFields, { x:htmlID(), x:ID() })
		next
	endif

	oCalc:Seek(2, { aoConsulta:ID() })
	aAux := {}
	while !oCalc:Eof() .and. oCalc:value("id_cons") == aoConsulta:ID()
	  nPos := at("@DWREF", upper(oCalc:value("expressao")))
    if nPos > 0
      cAux := substr(oCalc:value("expressao"), nPos)
	    nPos := at(")", cAux)
      cAux := substr(cAux, 1, nPos-1)
      cAux := substr(cAux, 8)
	    aAux := dwToken(cAux,,.f.)
      aEval(aAux, { |x,i| aAux[i] := delAspas(alltrim(x))})
      aSize(aAux, 3)
      if empty(aAux[3])
				aAux[3] := iif(aAux[1]=="D", STR0068 /*"Data de referência"*/, STR0069 /*"Valor de referência"*/)
			endif
			if ascan(aRefs[1], { |x| x == aAux[2]}) == 0
			  aAdd(aRefs[1], aAux[2])
				makecustomfield(aRefs[2], "customRef" + dwInt2Hex(oCalc:value("id"),4), QBE2Html("edDW_REF" + upper(aAux[2]), aAux[1], { ":DW_REF" + upper(aAux[2]) }, aAux[3], nil, aoConsulta:params(), .t., , , .t.))
			endif
		endif
		oCalc:_Next()
	enddo
  if valType(aRefs) == "A" .and. len(aRefs) > 1 .and. len(aRefs[2]) > 0
     makeSubTitle(aFields, STR0070 /*"Valores de referência"*/)
     aEval(aRefs[2], { |x| aAdd(aFields, x) })
  endif
  
    makeBlankRow(aFields)
    makeAttention(aFields, + "("+ STR0080 +  If(TcGetDB() == "INFORMIX", " 255 ", " 1000 ") + STR0081+ ")") //(expressão deve conter no máximo __ caracteres)
	// cria a aba tabelada
	makeChildTabbed(aaTabs, "abaFiltro", STR0026, aFields) //"Filtros"

return ""

/*
--------------------------------------------------------------------------------------
Responsável por recuperar valores modificados nos alertas pelo usuário e defini-los no
objeto consulta
Args: aoConsulta, objeto, contém a consulta na qual deverão ser definidos as modificações
--------------------------------------------------------------------------------------
*/
function bindQryDAlm(aoConsulta)
	
	Local aAux, nInd, lSelected
	
	// verifica se não houve o submit de página via iframe, indicando busca por dados via htmlpivot
	if isNull(HttpGet->jscript, CHKBOX_OFF) == CHKBOX_OFF
		// verifica se houve o submit da página, indicando modificações em propriedades
		if !isNull(HttpPost->APost) .and. len(HttpPost->APost) > 0
			// verifica se o usuário habilitou/desabilitou as propriedades
			// (propriedades serão salvas ao final de todo o processo e antes da execução da consulta)
			aoConsulta:AlertOn( isNull(HttpPost->edAlertOn, CHKBOX_OFF) == CHKBOX_ON )
			aoConsulta:HintOn( isNull(HttpPost->edHintOn, CHKBOX_OFF) == CHKBOX_ON )
			
			aAux := aoConsulta:Alerts(.t.)
			for nInd := 1 to len(aAux)
				// verifica se o alerta foi habilitado pelo usuários para esta consulta
				if !empty(&("HttpPost->" + aAux[nInd]:htmlID()))
					 aAux[nInd]:Selected( &("HttpPost->" + aAux[nInd]:htmlID()) == CHKBOX_ON )
				else
					aAux[nInd]:Selected(.F.)
				endif
				
				DwSetProp(aAux[nInd]:Name(), aAux[nInd]:Selected())
			next
			
			DwSetProp("edAlertOn"	, aoConsulta:AlertOn())
			DwSetProp("edHintOn"	, aoConsulta:HintOn())
		endif
	else
		// recupera as propriedades da sessão
		aoConsulta:AlertOn( DwGetProp("edAlertOn") )
		aoConsulta:HintOn( DwGetProp("edHintOn") )

		aAux := aoConsulta:Alerts(.t.)
		for nInd := 1 to len(aAux)		
			lSelected := DwGetProp(aAux[nInd]:Name())
			if isNull(lSelected, .F.)
				aAux[nInd]:Selected(lSelected)
			endif
		next
		
	endif
 	
return

function qryDAlm(aoConsulta, aaTabs, aaAlertFormFields, alDefinition, alCanSave)
	local oConsulta := aoConsulta
	local nInd
	local aCAlerts := {}, aAux, lSelected
	local aFields := {}, x
	
	// Lista de alertas
	aEval(oConsulta:Alerts(.f.), { |x| aAdd(aCAlerts, x:ID()) })
	
	if alCanSave
		makeSubTitle(aFields, STR0020, STR0046, makeAction(AC_QUERY_ALERT, {{ "id", aoConsulta:id()}, { "oper", OP_REC_NO_STEPS} } )) //"Opções"###"Manutenção"
	else
		makeSubTitle(aFields, STR0020) //"Opções"
	endif
	
	makecustomfield(aFields, "customAlertOn", makeCheckField(NIL, "edAlertOn", STR0027, .F.,, oConsulta:AlertOn())) //"Apresentar com alerta aplicado"
	makecustomfield(aFields, "customHintOn", makeCheckField(NIL, "edHintOn", STR0028, .F.,, oConsulta:HintOn())) //"Apresentar tarjas com as descrição"
	
	aAux := oConsulta:Alerts(.t.)
	aaAlertFormFields := {}
	if len(aAux) > 0
		makeSubTitle(aFields, STR0029) //"Alertas"
		for nInd := 1 to len(aAux)
			x := aAux[nInd]
			// verifica se o filtro está habilitado
			lSelected := aScan(aCAlerts, x:ID()) > 0
			aAux2 := x:ExpHtml(lSelected, , , , , oConsulta:Params())
			makecustomfield(aFields, x:htmlID(), aAux2[2] + " " + aAux2[3] )
			aAdd(aaAlertFormFields, { x:htmlID(), x:ID() })
		next
	endif
	               
	// cria a aba tabelada
	makeChildTabbed(aaTabs, "abaAlert", STR0029, aFields) //"Alertas"

return ""

/*
--------------------------------------------------------------------------------------
Responsável por recuperar valores modificados nos ranks pelo usuário e defini-los no
objeto consulta
Args: aoConsulta, objeto, contém a consulta na qual deverão ser definidos as modificações
--------------------------------------------------------------------------------------
*/
function bindQryDRnk(aoConsulta)
	Local lRankOn, lRankOutrosOn, lRankSubTotalOn, lRankTotalOn, nIndList, nRank, cType
	local cRankStyle
	
	// verifica se não houve o submit de página via iframe, indicando busca por dados via htmlpivot
	if isNull(HttpGet->jscript, CHKBOX_OFF) == CHKBOX_OFF
		// verifica se houve o submit da página, indicando modificações em propriedades
		if !isNull(HttpPost->APost) .and. len(HttpPost->APost) > 0
			// verifica se o usuário habilitou/desabilitou as propriedades
			// (propriedades serão salvas ao final de todo o processo e antes da execução da consulta)
			lRankOn         := isNull(HttpPost->edRankOn, CHKBOX_OFF) == CHKBOX_ON
			lRankOutrosOn   := isNull(HttpPost->edRankOutrosOn, CHKBOX_OFF) == CHKBOX_ON
			lRankSubTotalOn := isNull(HttpPost->edRankSubSubTotalOn, CHKBOX_OFF) == CHKBOX_ON
			lRankTotalOn    := isNull(HttpPost->edRankSubTotalOn, CHKBOX_OFF) == CHKBOX_ON
			cRankStyle      := HttpPost->edRankStyle
			nIndList        := DwVal(HttpPost->cbIndList)
			nRank           := DwVal(HttpPost->edRank)
			cType           := HttpPost->edType
			
			DwSetProp("edRankOn"        , lRankOn)
			DwSetProp("edRankOutrosOn"  , lRankOutrosOn)
			DwSetProp("edRankSubTotalOn", lRankSubTotalOn)
			DwSetProp("edRankTotalOn"   , lRankTotalOn)
			DwSetProp("edRankStyle"     , cRankStyle)
			DwSetProp("cbIndList"		    , nIndList)
			DwSetProp("edRank"			    , nRank)
			DwSetProp("edType"			    , cType)
		endif
	else
		// recupera as propriedades da sessão
		lRankOn         := DwGetProp("edRankOn")
		lRankOutrosOn   := DwGetProp("edRankOutrosOn")
		lRankSubTotalOn := DwGetProp("edRankSubTotalOn")
		lRankTotalOn    := DwGetProp("edRankTotalOn")
		cRankStyle      := DwGetProp("edRankStyle")
		nIndList        := DwGetProp("cbIndList")
		nRank           := DwGetProp("edRank")
		cType           := DwGetProp("edType")
	endif
	
	aoConsulta:RankOn(lRankOn)
	aoConsulta:RankOutros(lRankOutrosOn)
	aoConsulta:RankSubTotal(lRankSubTotalOn)
	aoConsulta:RankTotal(lRankTotalOn)
	aoConsulta:RankStyle(cRankStyle)
	
return

function qryDRnk(aoConsulta, aaTabs, alDefinition) 
	local oConsulta := aoConsulta
	local nInd, aAux, aRnk
	local aFields := {}, aBuffer := {}
	local aProcRnk := dwComboOptions(RNK_PROCESSOS, oConsulta:_Type())
	local nRnkInd, aDimY
	local aCols := {}, aItens := {}
		
	makeSubTitle(aFields, STR0020) //"Opções"
	
	//makecustomfield(aFields, "customRankOn", makeCheckField(NIL, "edRankOn", STR0033,,, oConsulta:RankOn())) //"Apresentar com ranking aplicado"
	makeCheckField(aFields, "edRankOn", "|"+STR0033,,, oConsulta:RankOn()) //"Apresentar com ranking aplicado"
	if oConsulta:_Type() == TYPE_TABLE	
		//makecustomfield(aFields, "customRankOutrosOn", makeCheckField(NIL, "edRankOutrosOn", STR0034,,, oConsulta:RankOutros())) //"Apurar 'outros'"
		//makecustomfield(aFields, "customRankSubTotalOn", makeCheckField(NIL, "edRankSubTotalOn", STR0071 /*"Apurar sub-totais"*/,,, oConsulta:RankSubTotal()))
		//makecustomfield(aFields, "customRankTotalOn", makeCheckField(NIL, "edRankTotalOn", STR0072 /*"Apurar total"*/,,, oConsulta:RankTotal()))
		makeCheckField(aFields, "edRankOutrosOn", "|"+STR0034,,, oConsulta:RankOutros()) //"Apurar 'outros'"
		//makeCheckField(aFields, "edRankSubTotalOn", "|"+STR0071 /*"Apurar sub-totais"*/,,, oConsulta:RankSubTotal())
		makeCheckField(aFields, "edRankTotalOn", "|"+STR0072 /*"Apurar total"*/,,, oConsulta:RankTotal())
  else
		//makeCheckField(aFields, "edRankOutrosOn", "|"+STR0034,,, oConsulta:RankOutros()) //"Apurar 'outros'"
		makeHidden(aFields, "edRankSubTotalOn", CHKBOX_OFF)
		makeHidden(aFields, "edRankTotalOn", CHKBOX_OFF)
	endif
	
		// Lista de Indicadores
	makeSubTitle(aFields, STR0035) //"Ranking"
	
	if oConsulta:haveDrillDown()
		aAux := dwComboOptions(RNK_STYLE, oConsulta:_Type())
	else
		aAux := dwComboOptions(RNK_STYLE_PARC, oConsulta:_Type())
	endif
	makeCombo(aFields, "edRankStyle", STR0075 /*"Definição"*/,,aAux,, oConsulta:rankStyle())
	evtField(aFields, "edRankStyle", "onchange")
	
		aAux := oConsulta:Indicadores(.t.)
		if len(aAux) > 0
			for nInd := 1 to len(aAux)
				x := aAux[nInd]
			//			if x:AggFunc() < AGG_FORMULA .and. x:AggFunc() <> AGG_PAR
				aAux[nInd] := { x:AggTit(), dwStr(x:ID()) }
			//			endif
			next
			aSize(aAux, len(aAux)+1)
			aIns(aAux, 1)
		aAux[1] := { STR0036, IND_SEM_RNK } //"(sem ranking)"

		nRnkInd := 1
		aCols := {}
		
		makeEditCol(aCols, EDT_SHOW , "edSeq"    , ""                      , .f., "N",  3, 0)
		makeEditCol(aCols, EDT_SHOW , "edNivel"  , STR0076 /*"Nivel"*/     , .f., "C", 20, 0) 
		makeEditCol(aCols, EDT_COMBO, "edIndList", STR0037 /*"Indicador"*/ , .f., "P", 20, 0, aAux)
		makeEditCol(aCols, EDT_COMBO, "edType"   , STR0038 /*"Processar"*/ , .f., "P", 20, 0, aProcRnk)
		makeEditCol(aCols, EDT_EDIT , "edRank"   , STR0045 /*"Qtde. ou %"*/, .f., "N", 10, 0, 0) //
		//		evtField(aFields, "edType", "onchange", "doChangeProcRnk(this, false)", .t.)
		
		aItens := {}
		aRnk := oConsulta:RankDef()
		aAdd(aItens, { nil, STR0077 /*"(todos)"*/, dwStr(aRnk[1, 1]), dwStr(aRnk[1, 3]), iif(aRnk[1, 3] == "A", "", aRnk[1, 2]) }) 
				
		if oConsulta:HaveDrillDown()
			aDimY := oConsulta:DimFieldsY()
			for nInd := 1 to len(aDimY)
				if nInd >= oConsulta:DrillOrig()
					if nInd > len(aRnk)
						aAux := { nInd,aDimY[nInd]:Desc(), "", "", 0 }
					else
						aAux := { nInd,aDimY[nInd]:Desc(), aRnk[nInd,1], aRnk[nInd,3], aRnk[nInd,2] }
					endif
				else
					aAux := { nInd, "", "", "", 0 }
				endif
				aAdd(aItens, aAux)
			next
		endif
		makeCustomField(aFields, "edRankLevel", ;
		buildFormBrowse('#frmRankLevel', , AC_NONE, , , aCols, aItens ))
		
		if oConsulta:_Type() == TYPE_TABLE
			aCols := {}
			aItens := {}
				makeEditCol(aCols, EDT_SHOW, "edClass"    , STR0053, .f., "C",  4, 0) //###"Classificação"
				makeEditCol(aCols, EDT_EDIT, "edPerc"     , STR0054, .f., "N", 3, 0) //###"Percentual"
				makeEditCol(aCols, EDT_EDIT, "edDescricao", STR0055, .f., "C", 30, 0) //###"Descrição"
				makeEditCol(aCols, EDT_EDIT, "edCor"      , STR0056, .f., "C", 15, 0, , .t.,,.t.) //###"Cor"
		
			if oConsulta:rankStyle() == RNK_STY_CURVA_ABC
					aAux := aClone(oConsulta:CurvaABC())
					aSize(aAux, 5)
				else
					aSize(aAux,5)
					aFill(aAux, nil)
				endif
				for nInd := 1 to len(aAux)
					if valType(aAux[nInd]) == "U"
						aAdd(aItens, { chr(64 + nInd), 0, "", "" })
					else
						aAdd(aItens, { aAux[nInd, 1], aAux[nInd, 2], aAux[nInd, 3], aAux[nInd, 4] })
					endif
				next
			  		                                     
				makeCustomField(aFields, "edClassCurvaABC", ;
					buildFormBrowse('#frmClassCurvaABC', , AC_NONE, , , aCols, aItens ))
        	endif
		endif       
		
	// cria a aba tabelada
	makeChildTabbed(aaTabs, "abaRank", STR0035, aFields) //"Ranking"

return dwConcatWSep(CRLF, aBuffer)

function qryDVirt(aoConsulta, aaTabs, alDefinition, alCanSave)
	local aFields := {}
	local oVirtuals := InitTable(TAB_CALC)
	
	if alCanSave
		makeSubTitle(aFields, STR0047, STR0046, makeAction(AC_QUERY_VIRTFLD, { { "Obj", OBJ_QUERY }, { "id", aoConsulta:id()}, { "oper", OP_REC_NO_STEPS} } )) //###"Campos Virtuais"###"Manutenção"
	else
		makeSubTitle(aFields, STR0047) //###"Campos Virtuais"
	endif
	
	oVirtuals:Seek(2, { aoConsulta:ID() })
	while !oVirtuals:EoF() .and. oVirtuals:value("id_cons") == aoConsulta:ID()
		makeText(aFields, oVirtuals:value("descricao") + " (" + oVirtuals:value("nome") + ") - " + oVirtuals:value("expressao") + iif(!(oVirtuals:value("id_virtual") == 0), " " + STR0065, "") ) //###"Campo Virtual do Cubo"
		oVirtuals:_Next()
	enddo
	               
	// cria a aba tabelada
	makeChildTabbed(aaTabs, "abaVirt", STR0047, aFields) //###"Campos Virtuais"
return ""

function qryDCrw(aoConsulta, aaTabs, alDefinition)
	local aFields := {}
	local aAux := {}
	local aValues := {}
	local nInd
	local cCRWURL := ""
	
	makeSubTitle(aFields, STR0057) //###"Definições"
	makeField(aFields, "edCRWNome", STR0058, .f., "C", 15, 0,, aoConsulta:CRWName()) //###"Nome"
	makeField(aFields, "edCRWDesc", STR0059, .f., "C", 35, 0,,aoConsulta:CRWDesc()) //###"Descrição"
	makeField(aFields, "edCRWURL", STR0060, .f., "C", 75, 0,,aoConsulta:CRWURL()) //###"URL"

	if aoConsulta:HaveDrillDown()
		makeSubTitle(aFields, STR0061) //###"Parametros do relatório"
		aAdd(aAux, { STR0062, "NAO" }) //###"Não existe"
		for nInd = 1 to len(aoConsulta:DimFieldsY())
			aAdd(aAux, { aoConsulta:DimFieldsY()[nInd]:Name() + DWDtQuebra(aoConsulta:DimFieldsY()[nInd]:Temporal()), aoConsulta:DimFieldsY()[nInd]:Name() })
		next
		for nInd := 1 to len(aoConsulta:DimFieldsY())
			if (len(aoConsulta:CRWParams()) == 0 ) .or. (len(aoConsulta:CRWParams()) < nInd)
				aAdd(aValues, "NAO")
			else
				aAdd(aValues, aoConsulta:CRWParams()[nInd])
			endif
		next
		for nInd = 1 to len(aoConsulta:DimFieldsY())
			makeCombo(aFields, "cbNiv"+DWStr(nInd), STR0063 + " " + DWStr(nInd),,aAux,, aValues[nInd]) //###"Parametro"
		next
	endif
	
	if !empty(aoConsulta:CRWURL()) .and. !empty(aoConsulta:CRWName()) .and. !alDefinition
		makeSubTitle(aFields, STR0064) //###"Relatório a executar"
		cCRWURL := aoConsulta:CRWURL() + "/" + aoConsulta:CRWName() + ".rpt"
		makeDotField(aFields, "edCRWExec", STR0064, , "C", 75, 0, , cCRWURL, , "doLoad(" + makeAction(AC_QRY_CRW, { {"url", cCRWURL }, {"id", aoConsulta:ID()} , {"typecons", aoConsulta:_Type()} } ) + ", '_blank')") //###"Relatório a executar"
	endif

	// cria a aba tabelada
	makeChildTabbed(aaTabs, "abaCrw", "Crystal", aFields)

return ""

/*
--------------------------------------------------------------------------------------
Responsável por recuperar valores modificados em outras opções pelo usuário e defini-los no
objeto consulta
Args: aoConsulta, objeto, contém a consulta na qual deverão ser definidos as modificações
--------------------------------------------------------------------------------------
*/
function bindQryDOpt(aoConsulta)
	
	// verifica se não houve o submit de página via iframe, indicando busca por dados via htmlpivot
	if isNull(HttpGet->jscript, CHKBOX_OFF) == CHKBOX_OFF
		// verifica se houve o submit da página, indicando modificações em propriedades
		if !isNull(HttpPost->APost) .and. len(HttpPost->APost) > 0
			// verifica se o usuário habilitou/desabilitou as propriedades
			// (propriedades serão salvas ao final de todo o processo e antes da execução da consulta)
			aoConsulta:IndSobrePosto( isNull(HttpPost->cbIndSobre, CHKBOX_OFF) == CHKBOX_ON )
			aoConsulta:Total( isNull(HttpPost->cbTotal, CHKBOX_OFF) == CHKBOX_ON )
			aoConsulta:FillAll( isNull(HttpPost->cbFillAll, CHKBOX_OFF) == CHKBOX_ON )
			
			if !isNull(HttpPost->edFatorEscala)
				aoConsulta:FatorEscala(DwVal(HttpPost->edFatorEscala))
			endif
			
			DwSetProp("cbIndSobre"		, aoConsulta:IndSobrePosto())
			DwSetProp("cbTotal"			, aoConsulta:Total()) 
			DwSetProp("cbFillAll"		, aoConsulta:FillAll()) 
			
			DwSetProp("edFatorEscala"	, aoConsulta:FatorEscala())
		endif
	else
		// recupera as propriedades da sessão
		aoConsulta:IndSobrePosto( DwGetProp("cbIndSobre") )
		aoConsulta:Total( DwGetProp("cbTotal") ) 
		aoConsulta:FillAll(DwGetProp("cbFillAll"))  
		
		aoConsulta:FatorEscala( DwGetProp("edFatorEscala") )			
	endif
	
return

function qryDOpt(aoConsulta, aaTabs, alDefinition)
	local oConsulta := aoConsulta
	local aFields := {}
	local aFatorEscala := { { "x 1", "1" }, { "x 10", "10" }, { "x 100", "100" }, { "x 1.000", "1000" }, ;
  							{ "x 10.000", "10000" }, { "x 100.000", "100000" }, { "x 1.000.000", "1000000" } }
	
	makeSubTitle(aFields, STR0078) //"Escala"
    
	makeCombo(aFields, "edFatorEscala", STR0041,.t., aFatorEscala,, oConsulta:FatorEscala()) //"Fator de Escala"

	makeSubTitle(aFields, STR0079) //"Apresentação"
	//TODO - Implementar esta funcionalidade. 
	//makeCheckField(aFields, "cbIndSobre", "|"+STR0039,,, oConsulta:IndSobrePosto()) //"Apresentar indicadores sobre-postos"
	makeCheckField(aFields, "cbTotal", "|"+STR0040,,, oConsulta:Total()) //"Apresentar total geral"
	makeCheckField(aFields, "cbFillAll", "|"+STR0073,,, oConsulta:FillAll()) /*"Apresentar conteúdos dos atributos em todas as células"*/
	
	//cria a aba tabelada
	makeChildTabbed(aaTabs, "abaOptions", STR0042, aFields) //"Outras&nbsp;opções"
	
return ""

static function qrySelection(aoConsulta, aaTabs)
	
	local aHtmlFields 	:= {}
	local aFields		:= {}
	local oIFrames
	
	// contrói o iframe contendo a ação de filtro/visualização de dados
	oIFrames := THIFrameMan():New()
	oIFrames:action(AC_NONE)
	oIFrames:scrollBar(.t.)
	oIFrames:AddFrame("ifSelection", STR0044, 1, 480) //###"Seleção"

	oIFrames:Buffer(aFields)

	aAdd(aFields, tagJS())
	aAdd(aFields, "function doShowSelection()")
	aAdd(aFields, "{")
	aAdd(aFields, " var cNone = (oBw.ff ? location.href : '') + '"+AC_NONE+"';")
	aAdd(aFields, " var iFrame = getElement('ifSelection');")
	aAdd(aFields, " if (iFrame.src == cNone)")
	aAdd(aFields, "   iFrame.src = prepURL("+makeAction(AC_FILTER_DATA, { { "ID", aoConsulta:ID() }, { "TypeCons", aoConsulta:_Type() }, { "ObjType", OBJ_QUERY },{ "RefreshPage", ""/*"NOREFRESH"*/ }, { "canClear", CHKBOX_ON }, {"_forceReload", ( randByDate() + randByTime())} })+");")
	aAdd(aFields, "}")

	aAdd(aFields, "function doSubmitSelection()")
	aAdd(aFields, "{")
	aAdd(aFields, " var iFrame = getElement('ifSelection');")
	aAdd(aFields, " var cNone = (oBw.ff ? location.href : '') + '"+AC_NONE+"';")
	aAdd(aFields, " if (!(iFrame.src == cNone))")
	aAdd(aFields, " {")
	aAdd(aFields, " 	document.frames('ifSelection').document.getElementById('frmFltrFlds').submit();")
	aAdd(aFields, " }")
	aAdd(aFields, " return true;")
	aAdd(aFields, "}")
	aAdd(aFields, "</script>")
		
	makeCustomField(aHtmlFields, "selection", DwConcatWSep(CRLF, aFields))
	
	// cria a aba tabelada
	makeChildTabbed(aaTabs, "abaSelection", STR0044, aHtmlFields,,"doShowSelection()", "doSubmitSelection()") //###"Seleção"
	
return ""

static function  prepSave(aaBuffer, aaParams, alEdit)
	aAdd(aaBuffer, "doPrepData();")
return

/*
--------------------------------------------------------------------------------------
Responsável por recuperar valores modificados pelo usuário e defini-los no objeto consulta
Args: aoConsulta, objeto, contém a consulta na qual deverão ser definidos as modificações
--------------------------------------------------------------------------------------
*/
function bindConsultaProperties(aoConsulta)

	if DWIsWebEx()
		// recupera as propriedades de filtros
		bindQryDFil(aoConsulta)

		// recupera as propriedades de alertas
		bindQryDAlm(aoConsulta)
	
		// recupera as propriedades de ranking
		bindQryDRnk(aoConsulta)
	
		// recupera as propriedades de Outras opções
		bindQryDOpt(aoConsulta)
	endif	
return

/*
--------------------------------------------------------------------------------------
Monta o JS para a preparação dos dados a serem salvos
--------------------------------------------------------------------------------------
*/
static function buildDef(aoDefinition) // Prepara a definição básica 
	local aBuffer := {}

	aAdd(aBuffer, "var oDefine = getApplet('"+aoDefinition:AppName()+"');")
	aAdd(aBuffer, "var cAxisX = oDefine.getAxisX();")
	aAdd(aBuffer, "var cAxisY = oDefine.getAxisY();")
	aAdd(aBuffer, "var cAxisM = oDefine.getAxisM();")
	
	aAdd(aBuffer, "oForm.axisX.value = (cAxisX.length==0)? 'none': cAxisX;")
	aAdd(aBuffer, "oForm.axisY.value = (cAxisY.length==0)? 'none': cAxisY;")
	aAdd(aBuffer, "oForm.axisM.value = (cAxisM.length==0)? 'none': cAxisM;")
	aAdd(aBuffer, "oForm.graphClass.value = oDefine.getGraphType();")
	aAdd(aBuffer, "oForm.graphProps.value = oDefine.getGraphProps();")
	aAdd(aBuffer, "oForm.graphYProps.value = oDefine.getGraphYProps();")

return dwConcatWSep(CRLF, aBuffer)

static function buildWhere(aaWhereFormFields, aoCOnsulta) //prepara aplicação de filtros
	local aBuffer := {}, nInd, aAux
  local cPrefixo := ""
  
	aAdd(aBuffer, "var aWherejs = new Array();")
	aAdd(aBuffer, "var oDiv = null;")
	
	// aparentemente, o Firefox não considera o DIV como pai do elementos do html inseridos nele
	// por isso a pesquisa será no documento como um todo
	If !isFireFox()
		aAdd(aBuffer, "oDiv = getObject('abaFiltro');")
	EndIf
	
	for nInd := 1 to len(aaWhereFormFields)
		aAdd(aBuffer, "if (getObject('"+dwStr(aaWhereFormFields[nInd, 1])+"', oDiv).checked) aWherejs.push('"+dwStr(aaWhereFormFields[nInd, 2])+"');")
	next
	aAdd(aBuffer, "oForm.whe.value = aWherejs.join(';');")

	aAux := aoConsulta:Params()
	for nInd := 1 to len(aAux)
	 	aAux[nInd, 1] := dwStr(aAux[nInd, 1])
	  cPrefixo := iif(left(aAux[nInd, 1], 2) == "pt", "", "pt") + aAux[nInd, 1]
		aAdd(aBuffer, "oForm."+cPrefixo+".value = getObject('"+cPrefixo+"', oDiv).value;")
	next

return dwConcatWSep(CRLF, aBuffer)

static function buildAlerts(aaAlertFormFields) //prepara aplicação de alertas
	local aBuffer := {}, nInd

	aAdd(aBuffer, "var aAlertjs = new Array();")
	
	// aparentemente, o Firefox não considera o DIV como pai do elementos do html inseridos nele
	// por isso a pesquisa será no documento como um todo
	If !isFireFox()
		aAdd(aBuffer, "oDiv = getObject('abaAlert');")
	EndIf

	for nInd := 1 to len(aaAlertFormFields)
		aAdd(aBuffer, "if (getObject('"+dwStr(aaAlertFormFields[nInd, 1])+"', oDiv).checked) aAlertjs.push("+dwStr(aaAlertFormFields[nInd, 2])+");")
	next
	aAdd(aBuffer, "oForm.alr.value = aAlertjs.join(';');")

return dwConcatWSep(CRLF, aBuffer)