<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : M01 - Datawarehouse
// Fonte  : m01Desktop - Monta e gerencia a tela principal de manutenção
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 06.05.02 | 1666-Debaldo      |
// 14.08.06 |2481-Paulo R Vieria| Novo Layout - Release 4
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "hDesktop.ch"

Local oUser_DSK 		:= InitTable(TAB_USER_DSKTOP)
Local oDesktop 			:= THDesktop():New()      
Local cHeightAvailable  := ""
Local cImage			:= ""
Local cImagePath		:= cBIGetWebHost()+"wallpaper/"
Local nUserID			:= oUserDW:UserID()
Local cTypeCons			:= HttpGet->tipo_cons
Local cNameCons			:= HttpGet->name
Local nIDCons			:= DwVal(HttpGet->id_no)
Local lFolderMenu		:= .F. 	
Local lMiniHeader  		:= .F.

Private cFldTipo := iif(SGDB() == DB_POSTGRES, "TIPO", "TYPE")

HttpGet->Oper := DwVal(HttpGet->Oper) 

if HttpGet->Oper == OP_REC_NEW
	aValues	:= { 	{"id_parnt"	, DwVal(HttpGet->id_parnt)}	, ;
					{"name"		, cNameCons }			, ;
					{"tipo_cons", cTypeCons }		, ;
					{"id_no"	, nIDCons }	, ;
					{"ID_USER"	, oUserDW:UserID() }		, ;
					{"DW"		, oSigaDW:DWCurr()[2] } 	  ;
				}
	
	if SGDB() == DB_POSTGRES
		aAdd(aValues, {"tipo", DwVal(HttpGet->type)})
	else
		aAdd(aValues, {"type", DwVal(HttpGet->type)})
	endif   

	// Se o tipo for imagem, faz o download da imagem para a pasta wallpaper	
	If (DwVal(HttpGet->type) == 12 )
		If DownloadImage( HttpGet->name , @cImage)
			// Altera o endereço da imagem para ser utilizado pelo Java
			aValues[2][2] := cImage           
		EndIf
	EndIf	
                                                                            
	// Se não tiver informado o nome, não gera o novo registro
	If !Empty(aValues[2][2])	
		if !oUser_DSK:Append(aValues)
			DWRaise(ERR_010, SOL_002, STR0026 + DwStr(aValues, .t.)) //###"Atenção, não foi possível adicionar o registro: "
		elseif DWIsDebug()
			conout(STR0028 + DwStr(oUser_DSK:value("id")) + " - " + DwStr(aValues, .t.)) //###"Desktop Node Adicionado: "
		endif
	EndIf

	return DwStr(oUser_DSK:value("id"))
	
elseif HttpGet->Oper == OP_DISPLAY
	aValues	:= { 	{"id_parnt"	, DwVal(HttpGet->id_parnt)}	, ;
					{"name"		, HttpGet->name}			, ;
					{"tipo_cons", HttpGet->tipo_cons}		, ;
					{"id_no"	, DwVal(HttpGet->id_no)}    , ;				 
					{"ID_USER"	, oUserDW:UserID() }		, ;
					{"DW"		, oSigaDW:DWCurr()[2] } 	  ;
				}
	
	if SGDB() == DB_POSTGRES
		aAdd(aValues, {"tipo", DwVal(HttpGet->type)})
	else
		aAdd(aValues, {"type", DwVal(HttpGet->type)})
	endif  
	if !oUser_DSK:Seek(8, { oUserDW:UserID(), DwVal(HttpGet->id_parnt), DwVal(HttpGet->Id_no), DwVal(HttpGet->type), oSigaDW:DWCurr()[2] })
		DWRaise(ERR_010, SOL_002, STR0027 + DwStr(aValues, .t.)) //###"Atenção, não foi possível localizar registro: "
	elseif DWIsDebug()
		conout(STR0029 + DwStr(oUser_DSK:value("id"))) //###"Desktop Node: "
	endif
	
	return DwStr(oUser_DSK:value("id"))	
	
elseif HttpGet->Oper == OP_REC_EDIT
	if oUser_DSK:Seek(8, { oUserDW:UserID(), DwVal(HttpGet->id_parnt), DwVal(HttpGet->Id_no), DwVal(HttpGet->type), oSigaDW:DWCurr()[2] })
		If DwVal(HttpGet->type) <> 12
			oUser_DSK:Update({ {"ID_NO", oUser_DSK:value("ID")}, ;
								{"NAME", HttpGet->Name} })
		Else
			oUser_DSK:Update({ {"ID_NO", oUser_DSK:value("ID")} })
		EndIf			
		Return (TRIM(str(oUser_DSK:value("ID"))))
	else
		Return ("ALT_ERR")
	endif
	
elseif HttpGet->Oper == OP_REC_DEL
	deleteNode(oUserDW:UserID(), dwval(HttpGet->Id_parnt), dwval(HttpGet->Id_no), dwval(HttpGet->Type)) 

elseif HttpGet->Oper == OP_REC_CONF
	// Se o nó for referente a uma imagem, retorna o nome da imagem salva no banco de dados para o JAVA
	If (DwVal(HttpGet->type) == 12 )
		If oUser_DSK:Seek(8, { oUserDW:UserID(), DwVal(HttpGet->id_parnt), DwVal(HttpGet->Id_no), DwVal(HttpGet->type), oSigaDW:DWCurr()[2] })
			Return ( cImagePath + Alltrim(oUser_DSK:value("NAME")) )
		Else
			Return ""
		EndIf
	Else
		Return ""	
	EndIf	
else
	oDesktop:Name("desktop" + oUserDW:LoginName())
	
	lFolderMenu 		:= isNull(HttpSession->FolderMenu, .T.)	
	lMiniHeader 		:= isNull(HttpSession->miniHeader, CHKBOX_OFF) == CHKBOX_ON
	cHeightAvailable    := DwGetProp("heightAvailable", "adjustDesktop") 
	
	if !empty(HttpGet->heightAvailable)
		// Armazena a altura da janela
		nAuxHeight := DWVal(HttpGet->heightAvailable)
		// Executa a rotina de ajuste
		adjustDesktop(.T., @nAuxHeight)        
		// Atribui o novo valor da altura para apresentar o rodapé da janela, caso necessário.
		oDesktop:Height(nAuxHeight)   
	elseif !empty(cHeightAvailable)
		adjustDesktop(.T., @cHeightAvailable) 
		oDesktop:Height(cHeightAvailable)     
	elseif lFolderMenu .AND. lMiniHeader
		oDesktop:Width(1008)
		oDesktop:Height(565)   
	elseif lFolderMenu .AND. !lMiniHeader
		oDesktop:Width(1007)
		oDesktop:Height(472)
	endif
	
	prepConsulta(oDesktop)
	
	%>
	<html>
	<body onload=InitPage()>
	<%=oDesktop:Buffer() %>
	</body>                   
	</html>
	<%
endif
return __Response

static function prepConsulta(poDesktop)
	local oConsulta := InitTable(TAB_CONSULTAS)
	local oUser_DSK := InitTable(TAB_USER_DSKTOP)
	local lHaveTable := .f., lHaveGraph := .f.
	
	__DWIDTemp := oSigaDW:DWCurrID()
	oConsulta:Seek(2, { "" })
	while !oConsulta:Eof() .and. oConsulta:value("id_dw") == oSigaDW:DWCurrID()
		// verifica se usuário pode acessar à consulta
		if oUserDW:GetQryAcessPerm(oSigaDW:DWCurrID(), oConsulta:value("ID"))
			if DWVerCons(oConsulta:value("ID"), @lHaveTable, @lHaveGraph)
				poDesktop:AddConsulta(oConsulta:value("ID"), ;
										oConsulta:value("Nome",.t.), ;
										upper(oConsulta:value("Tipo")),; 
										oConsulta:value("Descricao",.t.),;
  										lHaveTable, lHaveGraph, ;
  										oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, oConsulta:value("ID")))
			endif
		endif
		oConsulta:_Next()
	enddo
	
	oUser_DSK:Seek(4, { oUserDW:UserID(), oSigaDW:DWCurr()[DW_NAME] })
	while !oUser_DSK:Eof() .and. oUserDW:UserID() == oUser_DSK:value("ID_USER")
		if oUser_DSK:value("dw", .t.) == oSigaDW:DWCurr()[2] //####DW
			poDesktop:AddDSKConsulta(oUser_DSK:value("ID_PARNT"),;
								oUser_DSK:value("ID_NO"),;
								oUser_DSK:value("NAME",.t.),;
								oUser_DSK:value(cFldTipo), ;
								upper(oUser_DSK:value("TIPO_CONS")), ;
								oUser_DSK:value("DESCRICAO",.T.),;
								oUser_DSK:value(cFldTipo) == 5,;
								oUser_DSK:value(cFldTipo) == 6, ;
								oUserDW:GetQryMaintPerm(oSigaDW:DWCurrID(), oUser_DSK:value("ID_NO")))
		endif
		oUser_DSK:_Next()
	enddo
	__DWIDTemp := -1
return

function adjustDesktop(alLogin, nHghtAvbl)
	Local lFolderMenu 	:= isNull(HttpSession->FolderMenu, .T.)	
	Local lMiniHeader 	:= isNull(HttpSession->miniHeader, CHKBOX_OFF) == CHKBOX_ON
	
	default alLogin 	:= .F.
	default nHghtAvbl 	:=  DwVal(HttpGet->heightAvailable) 

	DwSetProp("heightAvailable", nHghtAvbl)
	
	if lFolderMenu .AND. lMiniHeader
		if alLogin
			nHghtAvbl := nHghtAvbl - 58
		else
			nHghtAvbl := nHghtAvbl - 58
		endif
	elseif lFolderMenu .AND. !lMiniHeader
		if alLogin
			nHghtAvbl := nHghtAvbl - 38
		else
			nHghtAvbl := nHghtAvbl - 38
		endif
	endif
return     

//-------------------------------------------------------------------
/*/{Protheus.doc} deleteNode
Remove um node do desktop do usuário

@author  Valdiney V GOMES
@since   16/05/2016
/*/
//-------------------------------------------------------------------
function deleteNode(anUserId, anRootId, anIDno, anType)
	Local oUser_DSK 	:= InitTable(TAB_USER_DSKTOP)
	Local nFolderType 	:= 0
	Local nID			:= 0

	Default anUserId	:= 0
	Default anRootId	:= 0
	Default anIDno		:= 0
	Default anType		:= 0

	If ( oUser_DSK:Seek( 6, { anUserId, anIDno } ) )    
		nID := oUser_DSK:value("ID")
	EndIf 

   	If ( ! Empty( nID ) )
		While ( ! oUser_DSK:EOF() .And. oUser_DSK:value("ID") == nID )
			If ( oUser_DSK:value("ID_USER") == anUserId ) 
				nFolderType := oUser_DSK:value( cFldTipo )
				
				If ( nFolderType == 2 .Or. nFolderType == 3 .Or. nFolderType == 10 )	
					oUser_DSK:SavePos()
						deleteChild( oUser_DSK, anUserId, nID )
					oUser_DSK:RestPos()
			
					Conout( "Deleting " + STR0029 + oUser_DSK:value("NAME") )
					oUser_DSK:Delete()
				Else
					Conout( "Deleting " + STR0029 + oUser_DSK:value("NAME") )
					oUser_DSK:Delete()
				EndIf	
			EndIf
	
			oUser_DSK:_Next()
		EndDo
	Else 
		return ("DEL_ERR")
	EndIf
return              

//-------------------------------------------------------------------
/*/{Protheus.doc} deleteChild
Remove os filhos de um objeto da área de trabalho

@author  Valdiney V GOMES
@since   16/05/2016
/*/
//-------------------------------------------------------------------
Function deleteChild( oUser_DSK, nIDUser, nIDParent )
	Default nIDUser		:= 0
	Default nIDParent	:= 0

   	If ( oUser_DSK:Seek( 2, { nIDUser, nIDParent } ) )	
		While ( ! oUser_DSK:EOF() .And. oUser_DSK:value("ID_USER") == nIDUser .And. oUser_DSK:value("ID_PARNT") == nIDParent )
			oUser_DSK:SavePos()
				deleteChild( oUser_DSK, oUser_DSK:value("ID_USER"), oUser_DSK:value("ID") )
			oUser_DSK:RestPos()
				
			Conout( "Deleting " + STR0029 + oUser_DSK:value("NAME") )

			oUser_DSK:Delete()				
			oUser_DSK:_Next()
		EndDo
	EndIf
Return

/*
--------------------------------------------------------------------------------------
Função responsável por fazer o download da imagem para ser usado como papel de parede
Arg: cURL -> string, URL da imagem 
     cImageName -> string, nome da imagem salva no diretório wallpaper
Ret: lRet -> lógico, indica se a imagem foi salva corretamente
--------------------------------------------------------------------------------------*/
Static Function DownloadImage(cURL, cImageName)
Local nHdl
Local cImageLoad
Local cBarra 		:= cBIGetSeparatorBar()
Local cDir 			:= Lower(DWHomePage() + cBarra + "wallpaper")
Local cImageExt		:= ""

If Empty(cURL)
	Return .T.
EndIf         

// Verifica se o diretório de destino existe
cDir := Lower(cDir)
BIForceDir(cDir)

//Retorna a imagem
cImageLoad := Httpget(cUrl,"",600)

// Verifica se a imagem foi carregada
If cImageLoad == NIL
	Return .T.
EndIf

// Carrega a extensão da imagem
cImageExt := Alltrim(Subs(cURL, RAt('.', cURL)))

/*Cria um arquivo temporário único para cada  requisição utilizando funções do DW (HTMLLIB.PRG).*/   
cImageName := 'img' + randBydate() + randByTime() + cImageExt

//Salva a imagem dentro do diretório wallpaper
nHdl := FCreate( cDir + cBarra + cImageName )

// Verifica se o arquivo foi criado
If nHdl < 0 
	Return .F.
Else	
	//Grava no arquivo o retorno binário da imagem
	FWrite(nHdl,cImageLoad)
	Sleep(300)
Endif

//Fecha o arquivo de Destino
FClose(nHdl)
Return .T.
%>