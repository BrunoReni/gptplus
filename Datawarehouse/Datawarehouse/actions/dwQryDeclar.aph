<%
// ######################################################################################
// Projeto: DATA WAREHOUSE
// Modulo : Actions
// Fonte  : dwQryDeclar - Declaração de filtro para consultas
// ---------+-------------------+--------------------------------------------------------
// Data     | Autor             | Descricao
// ---------+-------------------+--------------------------------------------------------
// 22.12.05 |2481-Paulo R Vieira| Versão 3
// --------------------------------------------------------------------------------------

#include "dwincs.ch"
#include "dwQueryManu.ch"
#include "dwQryDeclar.ch"
#include "dwViewDataConst.ch"

#define MAX_ROWS    10

#define ID_EXP_ABA	"abaExpression"
#define ID_IND_ABA	"abaIndicator"
#define ID_DIM_ABA	"abaDimension"

Local nInd, nInd1, nInd2
local aOper, cOper

private nOper
private nIdObj
private cType := HttpGet->ObjType
private oTableWhere, cKeyTableWhere
private nIDFilter := DwVal(iif (!empty(HttpGet->ID), DwVal(HttpGet->ID), DwVal(HttpGet->ObjId)))
private aDims := {}
private aTemp, aTemp1
private aSaveFields := {}
private aCookieValues := {}
private oConsulta
private aTabGroup := {}, aTabComp := {}, aFields := {}
private aCols := {}, aRows := {}, aRow := {}
private oFilter, aInds := {}, aCubeInd, aCubeDim
private cInitAba, oCube
private cExpQBE, cVarName, aQBE, aAux, nPos
private aAttList, nDimID
private aButtons 	:= {}
private aActionParams
private lClose := isNull(HttpGet->Close, CHKBOX_OFF) == CHKBOX_ON
private aDotFields := {}
private lEdit := .T. 
private cFilter //Tipo de filtro. Valores possíveis ("0","1","2").

// verifica qual é o tipo de objeto para o qual será definido filtros
if cType == OBJ_QUERY
	initFltrQuery()
elseif cType == OBJ_CUBE
	initFltrCube()
endif

aActionParams	:= { {"id", DwStr(nIDFilter)}, {"ObjId", DwStr(nIdObj)}, {"ObjType", cType}, {"Close", iif (lClose, CHKBOX_ON, CHKBOX_OFF)} }

// verifica o filtro: 
// se o filtro for composto de expressão só será mostrado o botão para editar a expressão
// se o filtro NÃO for composto de expressão serão mostrados todos os botões
oFilter := TFiltro():NewFiltro(nIDFilter, oConsulta, oTableWhere, cKeyTableWhere)

//Atribui a variável cFilter o tipo do filtro que está sendo definifo. 
cFilter := oFilter:getTipo()

HttpSession->subOper := ""
httpget->oper := dwVal(httpget->oper)

// *************** SALVA **************
// *************** LIMPA **************
// Limpa a declaração de filtro
if HttpGet->Action == AC_CLEAN_FLTR_DEC
	oFilter:DoCleanExpr()
endif                  
      
// Salva a declaração de filtro
if httpget->oper == OP_SUBMIT
	oFilter:DoCleanExpr()
	if dwVal(isNull(httpPost->edIDExpr, "0")) == 0
    	oFilter:isQBE(.t.)
    	aQBE := {}  

    	// prepara indicadores para salva
	 	for nInd := 1 to len(aCubeInd)
	 		cVarName := "ed"+aCubeInd[nInd][2] //nome
	 		aAux := {}
	 		for nInd1 := 1 to MAX_ROWS
        		//id_dim(1), id_field(2), cFieldname(3), tipo(4), exp_qbe(5), caption(6), alias(7), seq(8)
        		cExpQBE := &("HttpPost->"+cVarName+dwInt2hex(nInd1,4))
        		if !empty(cExpQBE) 
        			//Remove todos os prompts quando se tratar de filtro obrigatório. 
		  	  		if cFilter == FILTER_SECURE
		  	  			aAdd(aAux, STRTran(cExpQBE, ":"))
		  	  		Else
		  	  			aAdd(aAux, cExpQBE)
		  	  		EndIf  
		  		else
		  	  		aAdd(aAux, nil)
		  		endif
		  	next           

		  	if ascan(aAux, { |x| !(valType(x) == "U") } ) > 0
		    	aAdd(aQBE, { 0, aCubeInd[nInd][1], "", "", aClone(aAux), "", "", len(aQBE)+1})
		  	endif  
		next
		
		// prepara atributos de dimensão para salva
		for nInd := 1 to len(aCubeDim)
			cVarName := "ed"+oCube:DimProp("NOME", nInd) + "_"
			aAttList := oCube:Dimension(aCubeDim[nInd]):Fields()
			for nInd1 := 1 to len(aAttList)
				aTemp := aAttList[nInd1]
				if valType(aTemp[FLD_GET]) != "B" .and. valType(aTemp[FLD_TITLE]) != "B" .and. !(upper(aTemp[FLD_NAME]) == "ID")
			  		aAux := {}
			  		for nInd2 := 1 to MAX_ROWS
			  			//id_dim(1), id_field(2), cFieldname(3), tipo(4), exp_qbe(5), caption(6), alias(7), seq(8)
		        		cExpQBE := &("HttpPost->"+cVarName+aTemp[FLD_NAME]+dwInt2hex(nInd2,4))
		        		if !empty(cExpQBE)
				  	  		 //Remove todos os prompts quando se tratar de filtro obrigatório. 
				  	  		if cFilter == FILTER_SECURE
				  	  			aAdd(aAux, STRTran(cExpQBE, ":"))
				  	  		Else
				  	  			aAdd(aAux, cExpQBE)
				  	  		EndIf 
				  		else
				  	  		aAdd(aAux, nil)
			  			endif
			  		next           

			  		if ascan(aAux, { |x| !(valType(x) == "U") } ) > 0
			    		aAdd(aQBE, { aCubeDim[nInd], aTemp[FLD_ID], "", "", aClone(aAux), "", "", len(aQBE)+1})
			  		endif  
				endif
			next
		next
		oFilter:Expressao(aQBE)
	else
    	oFilter:isQBE(.f.)
	    oFilter:isSQL(.t.)
    	oFilter:IDExpr(dwVal(httpPost->edIDExpr))
	endif
	
  	oFilter:DoSave()
  	if lClose %>
  		<%= buildAutoClose() %>
  	<% else %>
  		<%= buildAutoAction(AC_QRY_CUB_FILTER, aActionParams) %>
  	<% endif %>
<% endif

// cria uma aba tabelada para conter o link para editar expressão
aTabComp := {}              
makeHidden(aTabComp, "edIDExpr", dwStr(oFilter:IDExpr()))    
makeDotField(aTabComp, "edExpressao", "|" + STR0002, .t., "M", 17, 90,, iif(oFilter:isQBE(), "", oFilter:Expressao()))
makeChildTabbed(aTabGroup, ID_EXP_ABA, STR0002, aTabComp) //"Expressão"

// se o filtro for QBE, exibe os botões com as opções de indicadores e dimensões
if oFilter:IsQBE()
	cInitAba := ID_IND_ABA
	// define o valor oriundo da base de dados para o cookie de indicadores desse filtro  
	aQBE := oFilter:Expressao()
  	aCols := array(len(aCubeInd))
  	aFill(aCols, "")
  	aRows := array(MAX_ROWS)
 	for nInd := 1 to MAX_ROWS
		aRows[nInd] := aclone(aCols)
 	next
	aCols := {}
	// recupera o cubo, itera pelos indicadores do cubo adicionando ao array aRowWhere
	for nInd1 := 1 to len(aCubeInd)
		//            descrição           nome                id
	  	aAdd(aInds, { aCubeInd[nInd1][5], aCubeInd[nInd1][2], aCubeInd[nInd1][1] } )
	  	makeEditCol(aCols, EDT_EDIT, "ed"+aCubeInd[nInd1][2], aCubeInd[nInd1][5], .t., 'C', 15, 0)
    	nPos := ascan(aQBE, { |x| x[1] == 0 .and. x[2] == aCubeInd[nInd1][1]})
    	if nPos > 0  
    		for nInd := 1 to len(aQBE[nPos, 5])
    	  		aRows[nInd, nInd1] := aQBE[nPos, 5, nInd]
    		next  
    	endif
	next
	
	// cria uma aba tabelada para conter o link para filtro rápido dos indicadores	
  	aTabComp := {}
  	makeCustomField(aTabComp, 'browse', buildEditBrowse(aCols, aRows))
  	makeChildTabbed(aTabGroup, ID_IND_ABA, STR0001, aTabComp) //"Indicadores"

	// Dimensões
	for nInd := 1 to len(aCubeDim)
		aAttList := aClone(oCube:Dimension(aCubeDim[nInd]):Fields())
		// desconsidera campo ID
    	nPos := ascan(aAttList, { |x| x[FLD_NAME] == "ID"})
		aDel(aAttList, nPos)
    	aSize(aAttList, len(aAttList)-1)
		
		// para cada dimensão, adiciona um botão no treelist/página
    	aTabComp := {}
    	aCols := array(len(aAttList))
    	aFill(aCols, "")
    	aRows := array(MAX_ROWS)
	 	for nInd1 := 1 to MAX_ROWS
    		aRows[nInd1] := aclone(aCols)
    	next
    	
    	aCols := {}
	  	// itera pelos os campos da dimensão adicionando ao array aTemp1
		aTemp1 := {}                  
		for nInd1 := 1 to len(aAttList)
			aTemp := aAttList[nInd1]
			if valType(aTemp[FLD_GET]) != "B" .and. valType(aTemp[FLD_TITLE]) != "B" .and. !(upper(aTemp[FLD_NAME]) == "ID")
				aAdd(aTemp1, { aTemp[FLD_TITLE], aTemp[FLD_ID] })
				cOper := tagImage("ic_hlpqbe.gif", 16, 16, STR0006, STR0007,,"showHlpQbe()") //###"QBE"###"Apresenta tela auxiliar do QBE"
				cOper += tagImage("ic_viewdata.gif", 16, 16, STR0008, STR0009,,"showViewdata()") //###"Seleção"###"Apresenta formulário para seleção de dados"
				makeEditCol(aCols, EDT_EDIT, "ed"+oCube:DimProp("NOME", nInd) + "_"+aTemp[FLD_NAME], aTemp[FLD_TITLE]+cOper, .t., 'C', 20, 0, , .F., .f., , aTemp[FLD_LEN]*10)
				aAdd(aDotFields, { oCube:DimProp("ID", nInd) , "ed"+oCube:DimProp("NOME", nInd) + "_"+aTemp[FLD_NAME], aTemp[FLD_NAME] })
				
        		nPos := ascan(aQBE, { |x| x[1] == aCubeDim[nInd] .and. x[2] == aTemp[FLD_ID]})
        		if nPos > 0  
    	    		for nInd2 := 1 to len(aQBE[nPos, 5])
    	      			aRows[nInd2, nInd1] := aQBE[nPos, 5, nInd2]
    	    		next  
        		endif
			endif
		next
		aAdd(aDims, { aCubeDim[nInd], aTemp1 }) //id

	    // cria uma aba tabelada para conter o link para filtro rápido da dimensão
	    aTabComp := {}
	    makeCustomField(aTabComp, 'brw'+oCube:DimProp("NOME", nInd), buildEditBrowse(aCols, aRows))
	    makeChildTabbed(aTabGroup, "abaDim"+oCube:DimProp("NOME", nInd), oCube:Dimension(aCubeDim[nInd]):Descricao(), aTabComp)
	next
	
	// define o array com as dimensões na sessão
	DwSetProp(ID_FILTER_DIM, aDims, ID_NAME_PRG_QRY)
	
	// define o array com os dados oriundos da base de dados na sessão
	DwSetProp(ID_FILTER_DATA, oFilter:Expressao(), ID_NAME_PRG_QRY)
	
	// define o array com os indicadores na sessão
	DwSetProp(ID_FILTER_IND, aInds, ID_NAME_PRG_QRY)
else
	cInitAba := ID_EXP_ABA
endif

// constroi a navegação por abas tabeladas
// cria a aba principal contendo as abas acima criadas
makeTabbedPane(aFields, "abaQueryDeclar", aTabGroup)

if lEdit .and. !oFilter:isCubeFilter()
	makeButton(aButtons, BT_JAVA_SCRIPT, STR0003, "frmFilter_doClean()") //"Limpar"
	nOper := OP_SUBMIT
else
	nOper := OP_NONE
	makeButton(aButtons, BT_CLOSE) //"Fechar"
endif
%>
<%=buildForm("#frmFilter", STR0004, AC_QUERY_DECLFLTR, nOper, aButtons, aFields, , , , , , , , , , , , , , aActionParams) %><%= /*"Filtro"*/ %>
  
<%=buildExQBE()%>

<%=tagJS()%>
function u_bodyonload() 
{
  <% if HttpGet->Action == AC_RESTORE_ALL .OR. HttpGet->Action == AC_QUERY_DECLFLTR
		for nInd1 := 1 to len(aCookieValues)%>
			  gravaCookie("<%= aCookieValues[nInd1][1] %>", "<%= aCookieValues[nInd1][2] %>", "<%= aCookieValues[nInd1][1] %>");
		<% next
	endif%>
	initAba("<%= cInitAba %>");
}

function updAppletValues(nRow, nCol, cValue) {
	var cAppletName = document.applets[0].id;
	var poConn = getObject(cAppletName);
 	var oTable = poConn.getComponent(); 

	oTable.getDataModel().setValueAt(cValue, nRow, nCol);
}

function edExpressao_dot(oSender)
{
	<% if lEdit .and. !oFilter:isCubeFilter() %>
  		doEditSQL("<%= STR0037 %>", getElement('edIDExpr').value, -1, 'edIDExpr', 'edExpressao', "<%=cType%>", <%=nIdObj%>) //###"Expressão"
 	<% endif %>
}
                                         

function frmFilter_doClean(oSender)
{
  	window.location = <%= makeAction(AC_CLEAN_FLTR_DEC, aActionParams) %>
}

function ed_dot(anObjID, acColumnName, acFieldName)
{  
  	var cURL = <%=makeAction(AC_SHOW_DATA, {{"objType", OBJ_DIMENSION} })%>;
  	cURL = prepParam(cURL, "id", anObjID);
  	cURL = prepParam(cURL, "colName", acColumnName);
  	cURL = prepParam(cURL, "colValue", getElement(acFieldName).value);
  	cURL = prepParam(cURL, "targetField", acFieldName);
  	doLoad(cURL, "_window", this, "DWShowData", <%= TARGET_75_WINDOW %>, <%= TARGET_75_WINDOW %>, 0, 0);
}
   
function showViewdata()
{                       
	var oObj = getLastInputControl();   
	if (oObj)
	{
		var cName = oObj.id.substr(0, oObj.id.length-4);
<% for nInd := 1 to len(aDotFields)%>
		if (cName == "<%=aDotFields[nInd, 2]%>") ed_dot(<%=aDotFields[nInd, 1]%>, "<%=aDotFields[nInd, 3]%>", oObj.id);
<%next%>
	} else
		alert('<%= STR0036 %>'); //###"Favor selecionar um campo primeiro"
}
        
  
//É aplicada validação de campos para filtros obrigatórios.    
<%if cFilter == FILTER_SECURE%>
	function doBlur(oField, cTipo){
        //cValue - Recebe o conteúdo do campo. 		
		var cValue = oField.value;
	    //cMsg   - Define a mensagem de erro que será exibida. 
	    var cMsg = "<%= STR0039 %>"; //"Atenção! O recurso de prompt ':' não pode ser usado em filtros obrigatórios."
	     	     
	    if (cValue.indexOf(":") != -1){
		  	defineMessageOnBlur(oField, cMsg);
        }else{  
         	removeMessageOnBlur(oField);
		} 
		setLastImputControl(oField);
	}  
<%EndIf%>
   
/**
 * Define uma mensagem de alerta em um campo do tipo imput em um evento onBlur
 * Parâmetros:
 *    oField (Objeto)	Campo no qual será incluído o alerta.
 *    cMsg   (Caracter) Mensagem a ser exibida.
 */
function defineMessageOnBlur(oField, cMsg){
	//Cria mensagem de erro padronizada. 
	defineFieldMessage(oField, cMsg);  
     
    //Define cor de borda e fundo customizada.    		 
	oField.style.borderColor = "#FF0000"; //Borda Vermelha.
	oField.style.backgroundColor = "#EFEFEF"; //Fundo ZebraOff.
    
    //Não permite que o foco seja deslocado do campo.     
	oField.focus();
}

/** 
 * Remove mensagem de alerta de um campo do tipo imput
 * Parâmetros:
 *    oField (Objeto)	Campo do qual será removido o alerta.
 */
function removeMessageOnBlur(oField){
	if (oField.msgError != null){
		//Elimina a mensagem de erro criada para o campo. 
		oField.msgError = null; 
		
		//Define cor de borda e fundo customizada.       		 
		oField.style.borderColor = "#000000";//Borda Preta.
		oField.style.backgroundColor = "#EFEFEF"; //Fundo ZebraOff.
	} 
}   
    
 
/** 
 * Seta a variável global de último campo editado. 
 * Parâmetros:
 *    oField (Objeto)  Último campo editado.
 */
function setLastImputControl(oField){
	LAST_INPUT_CONTROL = oField; 
}  

</script>
<%
static function initFltrQuery()
	Local oCons 	:= InitTable(TAB_CONSULTAS)
	
	nIdObj := DwVal(HttpGet->ObjId)
	if !oCons:Seek(1, { nIdObj } )
		dwRaise(ERR_005, SOL_003, nIdObj)
	else
		oConsulta 	:= TConsulta():New(nIdObj, TYPE_TABLE)
  		oCube 		:= oConsulta:Cube()
		aCubeInd 	:= oCube:GetIndicadores()
		aCubeDim 	:= oCube:DimProp("ID")
	endif
	
	// verifica privilégio para dar manutenção (CASO não seja administrador)
	if !oUserDW:GetQryMaintPerm(HttpSession->CurrentDW, nIdObj)
		// exibe msg de que o usuário não possui permissão
		HttpSession->DWErrMsg := STR0038 //"Atenção: usuário não possui privilégio de manutenção desta consulta."
		lEdit := .F.
	endif
return

static function initFltrCube()
	oTableWhere 	:= InitTable(TAB_FACT_WHERE)
	cKeyTableWhere 	:= "id_cube"
	nIdObj			:= DwVal(HttpGet->ObjId)
	
	// cria uma consulta "vazia" para criar o objeto cube E servir de molde para a obtenção dos filtros do cubo
	oConsulta 		:= TConsulta():New(0)
	oConsulta:AddCube(nIdObj)
	
	oCube			:= oConsulta:Cube()
	// verifica/valida o cubo assoaciado a este action
	if empty(oCube:Name()) .AND. empty(oCube:Descricao()) 
		dwRaise(ERR_005, SOL_003, nIdObj)
	endif
	
	// verifica privilégio para dar manutenção (CASO não seja administrador)
	if !oUserDW:UserIsAdm()
		// exibe msg de que o usuário não possui permissão
		if oUserDW:GetCubMaintPerm(HttpSession->CurrentDW, nIdObj) == .F.
			dwRaise(ERR_005, SOL_004, STR0005) //"Atenção: usuário não possui privilégio de manutenção deste cubo."
		endif
	endif	
	
	aCubeInd := oCube:GetIndicadores()
	aCubeDim := oCube:DimProp("ID")
return                      
%>