#INCLUDE "TOTVS.CH"

namespace totvs.protheus.retail.rmi.api.reservaobj

//-------------------------------------------------------------------
/*/{Protheus.doc} Classe ReservaObj
    Classe para tratamento da API de Estoque do Varejo
/*/
//-------------------------------------------------------------------
Class ReservaObj From LojRestObj20

	Public Method New()             as Object
    Public Method getReturn()       as Character
    Public Method executaReserva()         as Variant

    Private   Data aFiliais         as Array

EndClass

//-------------------------------------------------------------------
/*/{Protheus.doc} new
Método construtor da Classe

@param oWsRestObj - Objeto WSRESTFUL da API

@author  Evandro Pattaro
@since   10/11/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method New(oWsRestObj As Object, jParans as Json, cBody as Character) as Object Class ReservaObj

    _Super:New(oWsRestObj, jParans, cBody)

Return self

//-------------------------------------------------------------------
/*/{Protheus.doc} reserva
Realiza a reserva conforme dados do corpo da requisição

@param oWsRestObj - Objeto WSRESTFUL da API

@author  Evandro Pattaro
@since   10/11/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method executaReserva() as Variant Class ReservaObj

Local cResRet       := ""       as Character //Recebe o retorno da reserva
Local aCabReser     := {}       as Array     //Recebe campos do cabeçalho da reserva
Local aGridReser    := {}       as Array     //Recebe campos dos itens da reserva
Local nx			:= 1        as Numeric
Local cLocal        := ""       as Character
Local cProd         := ""       as Character
Local cFilRet       := ""       as Character
Local cSql          := ""       as Character

Private nOpcx       := 1

//Cabeçalho da reserva
Aadd(aCabReser,{"C0_TIPO","LJ",NiL})
Aadd(aCabReser,{"C0_DOCRES",self:jbody['idReservaEstoque'],NiL})
Aadd(aCabReser,{"C0_SOLICIT","PDVSYNC",NiL})
Aadd(aCabReser,{"C0_FILRES",self:jbody['idRetaguardaLoja'],NiL})

For nX := 1 To Len(self:jbody['reserva']) 

    cFilRet := Padr(self:jbody['reserva'][nX]['idRetaguardaLojaEstoque'],TamSx3("NNR_FILIAL")[1])
    cLocal  := SUPERGETMV('MV_LOCPAD', .T., '01')
    cProd   := Padr(self:jbody['reserva'][nX]['idRetaguardaProduto'],Tamsx3("B1_COD")[1]) 

    If NNR->(DbSeek(cFilRet + cLocal))//Verifica se existe Armazem na NNR antes de criar Saldo na B2
        //Verifica se Existe Saldo Inicial do Produto, caso não tenha insere saldo zerado
        DbSelectArea("SB2")
        SB2->(DbSetOrder(1))
        If !(SB2->(DbSeek(xFilial("SB2")+cProd+cLocal)))                                    
            CriaSB2(cProd, cLocal)                                  
        Endif
    Else
        self:lSuccess   := .F.          
        self:cError     := "Não foi encontrado o armazem " + cLocal + ", para a filial de reserva: " + self:jbody['reserva'][nX]['idRetaguardaLojaEstoque']
        self:cDetail    := ""
        Return Nil
    EndIf	

    //Itens da reserva
    Aadd(aGridReser,{})
    Aadd(aGridReser[nX],{"C0_PRODUTO",cProd,NiL})
    Aadd(aGridReser[nX],{"C0_LOCAL",cLocal,NiL}) 
    Aadd(aGridReser[nX],{"C0_QUANT",self:jbody['reserva'][nX]['quantidadeReserva'],NiL})
    Aadd(aGridReser[nX],{"C0_VALIDA",dDataBase,NiL})
    Aadd(aGridReser[nX],{"C0_EMISSAO",Date(),NiL})
    Aadd(aGridReser[nX],{"C0_LOTECTL","",NiL})
    Aadd(aGridReser[nX],{"C0_NUMLOTE","",NiL})
    Aadd(aGridReser[nX],{"C0_NUMSERI","",NiL})
    Aadd(aGridReser[nX],{"C0_LOCALIZ","",NiL})
    Aadd(aGridReser[nX],{"C0_OBS","",NiL})
    Aadd(aGridReser[nX],{"C0_FILIAL",self:jbody['reserva'][nX]['idRetaguardaLojaEstoque'],NiL})

    cSql := "SELECT C0_DOCRES FROM " + RetSqlName("SC0") + " WHERE C0_FILIAL = '" + self:jbody['reserva'][nX]['idRetaguardaLojaEstoque'] + "'"
    cSql += " AND C0_DOCRES = '" + self:jbody['idReservaEstoque'] + "' AND D_E_L_E_T_ = ' '"

    If !Empty(RmiXSql(cSql, "*", .F., /*aReplace*/) )         
        Lj704Delet(self:jbody['idReservaEstoque'], "")
    EndIf
    
Next nX

cReserv := LOJA704(aCabReser, aGridReser, 1, @cResRet)


If Empty(cReserv)
    self:lSuccess   := .F.          
    self:cError     := "Não foi possivel realizar a reserva " +self:jbody['idReservaEstoque']+ ", motivo:" +cResRet
    self:cDetail    := ""
else
    self:lSuccess   := .T.          
    self:cError     := "Reserva " +self:jbody['idReservaEstoque']+ " realizada com sucesso! "
    self:cDetail    := ""
EndIf

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} GetReturn
Retorna json com resultado da consulta

@author  Evandro Pattaro
@since   10/11/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method getReturn() as Character Class ReservaObj
    Local cRetorno  as Character
    Local jRetorno  as Object 

   jRetorno := JsonObject():New()
    jRetorno["success"] := self:lSuccess
    jRetorno["message"] := self:cError + self:cDetail
    jRetorno["data"]    := {}
    jRetorno["hasNext"] := .F.

    If !self:lSuccess
        self:oWsRestObj:setStatusCode( self:nStatusCode )
    EndIf

    cRetorno := jRetorno:toJson()

    FwFreeObj(jRetorno)

Return cRetorno
