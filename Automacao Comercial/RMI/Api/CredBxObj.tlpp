#INCLUDE "PROTHEUS.CH"
#INCLUDE "CREDBXOBJ.CH"

Class CredBxObj from CreditoObj
    
    Public  Method New()           as Object
    Public  Method Baixa(jBaixa as Json)    as Variant 
    Public  Method getReturn()      as Character
    
    Protected Method SetFields()  as variant
    Protected Method Validation() as Variant
    
    Protected Data nTamOpe As Numeric
    Protected Data nTamCupom As Numeric
    Protected Data nTamSerie As Numeric
    Protected Data cIdMovimento As Character
    
EndClass


//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método construtor da Classe

@param oWsRestObj - Objeto WSRESTFUL da API 

@author  Evandro Pattaro
@since   29/09/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method New(oWsRestObj As Object, jParans as Json, cBody as Character) As Object Class CredBxObj
    Self:nTamOpe := TamSx3("MIH_ID")[1]
    Self:nTamCupom := TamSx3("E1_NUM")[1]
    Self:nTamSerie := TamSx3("E1_PREFIXO")[1]
    _Super:New(oWsRestObj,jParans,cBody)
Return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} SetFields
Carrega os campos que serão retornados

@author  Evandro Pattaro
@since   29/09/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method SetFields() Class CredBxObj
    Local aAux := {}

    aadd(aAux, "PREFIXO")
    aadd(aAux, "E1_PREFIXO")
    aadd(aAux, "E1_PREFIXO")
    aadd(aAux, "prefixo")
    aadd(aAux, "C")
    aadd(aAux, "")
    HmAdd(self:oFields, aAux , 1, 3)

    aAux := {}
    aadd(aAux, "NUM")
    aadd(aAux, "E1_NUM")
    aadd(aAux, "E1_NUM")
    aadd(aAux, "num")
    aadd(aAux, "C")
    aadd(aAux, "")
    HmAdd(self:oFields, aAux , 1, 3)

    aAux := {}
    aadd(aAux, "PARCELA")
    aadd(aAux, "E1_PARCELA")
    aadd(aAux, "E1_PARCELA")
    aadd(aAux, "parcela")
    aadd(aAux, "C")
    aadd(aAux, "")
    HmAdd(self:oFields, aAux , 1, 3)   

    aAux := {}
    aadd(aAux, "VENCTO")
    aadd(aAux, "E1_VENCTO")
    aadd(aAux, "E1_VENCTO")
    aadd(aAux, "vencto")
    aadd(aAux, "D")
    aadd(aAux, "")
    HmAdd(self:oFields,aAux, 1, 3)   
            
    _Super:SetFields()
     
Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Validation
Realiza validações nos parametros de entrada fornecido

@author  Evandro Pattaro
@since   29/09/2022
@version 1.0
/*/
//-------------------------------------------------------------------

Method Validation() as variant Class CredBxObj
    
    Local cMsg  := "" as Character
    
    If self:lSuccess .AND. !self:jparans:HasProperty("valorBaixa") 
        cMsg += I18n(STR0001,{"valorBaixa"}) //"Tag #1 não fornecida, tag obrigatoria"
        self:lSuccess    := .F.
    EndIf 

    If self:lSuccess .AND. Empty(self:jparans['valorBaixa'])
        cMsg += I18n(STR0002,{"valorBaixa"}) //"Tag #1 fornecida, porem, sem informação."
        self:lSuccess    := .F.
    EndIf 

    If self:lSuccess .AND. !self:jparans:HasProperty("idRetaguardaUsuario") 
        cMsg += I18n(STR0001,{"idRetaguardaUsuario"}) //"Tag #1 não fornecida, tag obrigatoria"
        self:lSuccess    := .F.
    EndIf 

    If self:lSuccess .AND. Empty(self:jparans['idRetaguardaUsuario'])
        cMsg += I18n(STR0002,{"idRetaguardaUsuario"}) //"Tag #1 fornecida, porem, sem informação."
        self:lSuccess    := .F.
    EndIf 

    If self:lSuccess .AND. !self:jparans:HasProperty("idRetaguardaLojaBaixa") 
        cMsg += I18n(STR0001,{"idRetaguardaLojaBaixa"}) //"Tag #1 não fornecida, tag obrigatoria"
        self:lSuccess    := .F.
    EndIf 

    If self:lSuccess .AND. Empty(self:jparans['idRetaguardaLojaBaixa'])
        cMsg += I18n(STR0002,{"idRetaguardaLojaBaixa"}) //"Tag #1 fornecida, porem, sem informação."
        self:lSuccess    := .F.
    EndIf 
        
    If self:lSuccess .AND. Empty(LjAuxPosic("CADASTRO DE LOJA    ","IDFilialProtheus",self:jparans['idRetaguardaLojaBaixa'],"IDFilialProtheus"))            
        cMsg += I18n(STR0003,{"idRetaguardaLojaBaixa","CADASTRO DE LOJA"}) //"idRetaguardaLojaBaixa informado não localizado no Cadastro de Lojas"
        self:lSuccess    := .F.    
    EndIf
    
    If self:lSuccess .AND. Empty(LjAuxPosic("OPERADOR DE LOJA    ","MIH_ID",Padr(self:jparans['idRetaguardaUsuario'],Self:nTamOpe),"MIH_ID"))            
        cMsg += I18n(STR0003,{"idRetaguardaUsuario","OPERADOR DE LOJA"}) //"idRetaguardaUsuario informado não localizado no Cadastro de Operador de Loja"
        self:lSuccess    := .F.
    EndIf 

    If self:jparans:HasProperty("idRetaguardaLojaConsulta") .And. !Empty(self:jparans['idRetaguardaLojaConsulta']) 
        self:SetjParans("idRetaguardaLoja",self:jparans['idRetaguardaLojaConsulta'])
    EndIf


    If self:lSuccess
        self:jparans:DelName("idRetaguardaUsuario")
        self:jparans:DelName("idRetaguardaLojaBaixa")
        self:jparans:DelName("idRetaguardaLojaConsulta")
        self:jparans:DelName("valorBaixa")

        _Super:Validation()        
    Else
        self:cError      := cMsg
        self:cDetail     := ""
        self:nStatusCode := 422
    EndIf

    

return

//-------------------------------------------------------------------
/*/{Protheus.doc} Baixa
Realiza a baixa dos créditos disponíveis ao cliente

@author  Evandro Pattaro
@since   29/09/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method Baixa(jBaixa as Json) Class CredBxObj

Local aRecnoNCC := {}
Local nRecnoCR  := 0
Local aTitulo   := {}
Local cParcela  := LjParcela( 1, SuperGetMv("MV_1DUP") )
Local cOrigem   := "RMIXFUNC"
Local cHist     := "Integração - Venda Pagamento Crédito"
Local cFilCmp   := jBaixa['idRetaguardaLojaBaixa']
Local cPortado  := LjAuxPosic("OPERADOR DE LOJA    ","MIH_ID",Padr(jBaixa['idRetaguardaUsuario'],Self:nTamOpe),"banco")
Local cAgencia  := LjAuxPosic("OPERADOR DE LOJA    ","MIH_ID",Padr(jBaixa['idRetaguardaUsuario'],Self:nTamOpe),"agencia")
Local cConta    := LjAuxPosic("OPERADOR DE LOJA    ","MIH_ID",Padr(jBaixa['idRetaguardaUsuario'],Self:nTamOpe),"conta")
Local aCliente  := {}
Local cPrefixo  := SuperGetMV("MV_LJPSHPR",,"PSH")
Local cNum      := GetNumSE1(cPrefixo)
Local nSaldo    := 0
Local nValBx	:= jBaixa['valorBaixa']
Local nMoedaCor	:= 1 							  //MoedaCor

Private lMsErroAuto := .F.  //Variavel usada para o retorno da EXECAUTO

LjGrvLog("CredBxObj","Inicio do processo de baixa!")

self:cFil := cFilCmp

self:ChangeBranch()

Begin Transaction

    If Select(self:cAliasQuery) = 0
        LjGrvLog("CredBxObj","Não houve resultado válido para query executada!")
        DisarmTransaction()
        Return  //Erro já tratado no método Get()    
    EndIf

    aCliente := GetAdvFVal("SA1",{"A1_COD", "A1_LOJA"},XFilial("SA1")+jBaixa['cpfCnpj'],3)

    //Inclui titulo CR
    DbSelectArea('SE1')
    DbSetOrder(1) //E1_FILIAL, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO, R_E_C_N_O_, D_E_L_E_T_
    While !(self:cAliasQuery)->( Eof() ) .And. nSaldo < nValBx
        
        If DbSeek(FWxFilial("SE1",(self:cAliasQuery)->E1_FILIAL) + (self:cAliasQuery)->E1_PREFIXO + (self:cAliasQuery)->E1_NUM + (self:cAliasQuery)->E1_PARCELA + (self:cAliasQuery)->E1_TIPO)
            Aadd(aRecnoNCC, SE1->(Recno()))
            nSaldo += (self:cAliasQuery)->E1_SALDO
        EndIf
        (self:cAliasQuery)->( DbSkip() )    
    EndDo

    If Len(aRecnoNCC) > 0 .AND. nSaldo >= nValBx

        aAdd(aTitulo, { "E1_FILIAL"     , cFilCmp/*SL1->L1_SERIE*/, Nil} )
        aAdd(aTitulo, { "E1_PREFIXO"    , cPrefixo/*SL1->L1_SERIE*/, Nil} )
        aAdd(aTitulo, { "E1_NUM"        , cNum/*SL1->L1_DOC*/, Nil} )
        aAdd(aTitulo, { "E1_PARCELA"    , cParcela, Nil} )
        aAdd(aTitulo, { "E1_NATUREZ"    , LjMExeParam("MV_NATCRED"), Nil} )
        aAdd(aTitulo, { "E1_PORTADO"    , cPortado/*SL1->L1_OPERADO*/, Nil} )
        aAdd(aTitulo, { "E1_AGEDEP" 	, cAgencia, Nil} )
        aAdd(aTitulo, { "E1_CONTA" 		, cConta, Nil} )
        aAdd(aTitulo, { "E1_TIPO" 	    , "CR", Nil} )
        aAdd(aTitulo, { "E1_EMISSAO"    , dDataBase, Nil} )
        aAdd(aTitulo, { "E1_VALOR"	    , nValBx/*SL1->L1_CREDITO*/, Nil} )
        aAdd(aTitulo, { "E1_VENCTO"     , dDataBase/*SL1->L1_DTLIM*/, Nil} )
        aAdd(aTitulo, { "E1_VENCREA"	, DataValida(dDataBase, .T.)/*DataValida(SL1->L1_DTLIM, .T.)*/, Nil} )
        aAdd(aTitulo, { "E1_VENCORI"	, dDataBase/*SL1->L1_DTLIM*/, Nil} )
        aAdd(aTitulo, { "E1_SALDO"	    , nValBx/*SL1->L1_CREDITO*/, Nil} )
        aAdd(aTitulo, { "E1_VLCRUZ"	    , xMoeda(nValBx, 1, 1, dDataBase), Nil} )
        aAdd(aTitulo, { "E1_CLIENTE"	, aCliente[1], Nil} )
        aAdd(aTitulo, { "E1_LOJA"	    , aCliente[2], Nil} )
        aAdd(aTitulo, { "E1_MOEDA"	    , nMoedaCor, Nil} )
        aAdd(aTitulo, { "E1_ORIGEM"     , cOrigem, Nil} )
        aAdd(aTitulo, { "E1_HIST"	    , cHist, Nil} )

        LjGrvLog(SL1->L1_NUM, "CredBxObj - Gerando titulo CR. [Fina040]", aTitulo)

        MsExecAuto( { |x, y| Fina040(x, y) }, aTitulo, 3) 

        If lMsErroAuto
            DisarmTransaction()
            self:lSuccess := .F.
            self:cError := I18n(STR0004,{cFilCmp+cPrefixo+cNum+cParcela}) + MostraErro("\")    //"Não foi possível gerar título #1: " 
            LjGrvLog("CredBxObj","Houve erro na execauto: " + self:cError)
        Else
            nRecnoCR := SE1->( Recno() )
            self:cIdMovimento := SE1->E1_FILIAL+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO

            If !MaIntBxCR(3, {nRecnoCR}, /*aBaixa*/, aRecnoNCC, /*aLiquidacao*/, {.T., .F., .F., .F., .F., .F.})
                DisarmTransaction()
                self:lSuccess := .F.          
                self:cError       := I18n(STR0005,{cFilCmp+cPrefixo+cNum+cParcela}) //"Não foi possível compensar título(s) NCC com CR - #1." 
            EndIf        

        EndIf   
        (self:cAliasQuery)->( DBCloseArea() )
    Else
        DisarmTransaction()
        self:lSuccess   := .F.          
        self:cError     := STR0006 + cValToChar(nSaldo) //"Não existem títulos com saldo suficiente para realizar a compensação. Saldo Atual : "
        self:cDetail    := ""
        LjGrvLog("CredBxObj", self:cError)
    EndIf

END TRANSACTION     


LjGrvLog("CredBxObj","Fim do processo de baixa!")

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetReturn
Retorna json com resultado da consulta

@author  Evandro Pattaro
@since   26/10/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method getReturn() as Character Class CredBxObj
    Local cRetorno  as Character
    Local jRetorno  as Object 

    jRetorno := JsonObject():New()
    jRetorno:FromJson(_Super:getReturn())
    If self:lSuccess 
        jRetorno['data'][1]['idRetaguardaCredito'] := Self:cIdMovimento
    EndIf
    cRetorno := jRetorno:toJson()
    FwFreeObj(jRetorno)

Return cRetorno
