#INCLUDE "TOTVS.CH"
#INCLUDE "NOTASAIDAOBJ.CH"

namespace totvs.protheus.retail.rmi.api.notasaidaobj

//-------------------------------------------------------------------
/*/{Protheus.doc} Classe NotaSaidaObj
    Classe para tratamento da API de Notas Fiscais de Saída do Varejo
/*/
//-------------------------------------------------------------------
Class NotaSaidaObj From LojRestObj20

	Public Method New()             as Object
    Public Method setFields()       as Variant
    Public Method getReturn()       as Character    

    Private Method setSelect()      as Variant

    Protected Method Validation()   as Variant

EndClass

//-------------------------------------------------------------------
/*/{Protheus.doc} new
Método construtor da Classe

@param oWsRestObj - Objeto WSRESTFUL da API

@author  Rafael Tenorio da Costa
@since   16/07/2019
@version 1.0
/*/
//-------------------------------------------------------------------
Method New(oWsRestObj As Object, jParans as Json, cBody as Character) as Object Class NotaSaidaObj

    _Super:New(oWsRestObj, jParans, cBody)

Return self

//-------------------------------------------------------------------
/*/{Protheus.doc} setFields
Carrega os campos que serão retornados

@author  Rafael Tenorio da Costa
@since   16/07/2019
@version 1.0
/*/
//-------------------------------------------------------------------
Method setFields() as Variant Class NotaSaidaObj

                        //Tag - ID				Campo                       Expressão que será executada para gerar o retorno	Tag que será utilizada para preencher o objeto de retorno   Tipo do Campo   Expressão de busca
    HmAdd(self:oFields, {"IDRETAGUARDALOJA"		, "F2_FILIAL"	            , "F2_FILIAL"										, "idRetaguardaLoja"		                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"IDRETAGUARDACUPOM"	, "IDRETAGUARDACUPOM"	    , "F2_FILIAL + F2_DOC + F2_SERIE"		            , "idRetaguardaCupom"		                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"CUPOM"				, "F2_DOC"		            , "F2_DOC"  									    , "cupom"					                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"SERIE"				, "F2_SERIE"	            , "F2_SERIE"										, "serie"					                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"CPFCNPJ"				, "A1_CGC"		            , "A1_CGC"											, "cpfCnpj"					                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"DATAHORA"				, "DATAHORA"                , "DATAHORA"							            , "dataHora"				                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"VALORTOTAL"			, "F2_VALBRUT"	            , "F2_VALBRUT"										, "valorTotal"				                                , "N"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"SITUACAO"				, "SITUACAO"			    , "SITUACAO"										, "situacao"				                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"TIPO"					, "F2_ESPECIE"	            , "F2_ESPECIE"										, "tipo"					                                , "C"           , ""}               , 1, 3)
    HmAdd(self:oFields, {"QTDITENS"				, ""  			            , "ITENSTOTAL"										, "qtdItens"				                                , "C"           , ""}               , 1, 3)

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} setSelect
Carrega a query que será executada

@author  Rafael Tenorio da Costa
@since   23/07/2019
@version 1.0
/*/
//-------------------------------------------------------------------
Method setSelect(cTable as Character) as Variant Class NotaSaidaObj

    self:cTable := cTable

    self:cSelect := " SELECT"
    self:cSelect += 	" CASE"
    self:cSelect += 	    " WHEN QTDDEVTOTAL = 0 THEN 'DISPONÍVEL'"
    self:cSelect += 	    " WHEN QTDTOTAL = QTDDEVTOTAL THEN 'DEVOLVIDO'"
    self:cSelect += 	    " ELSE 'PARCIALMENTE DEVOLVIDO'"
    self:cSelect += 	" END AS SITUACAO,"
    self:cSelect += 	" ITENSTOTAL, QTDTOTAL, QTDDEVTOTAL,"
    self:cSelect += 	" F2_FILIAL, F2_DOC, F2_SERIE, A1_CGC, F2_EMISSAO, F2_HORA, F2_VALBRUT, F2_ESPECIE,"
    self:cSelect += 	" IDRETAGUARDACUPOM,"
    self:cSelect += 	" DATAHORA"
    self:cSelect += " FROM ("
    self:cSelect += 	" SELECT"
    self:cSelect += 		" F2_FILIAL, F2_DOC, F2_SERIE, A1_CGC, F2_EMISSAO, F2_HORA, F2_VALBRUT, F2_ESPECIE,"
    self:cSelect += 		" COUNT(D2_ITEM) ITENSTOTAL,"
    self:cSelect += 		" SUM(D2_QUANT) QTDTOTAL,"
    self:cSelect += 		" SUM(D2_QTDEDEV) QTDDEVTOTAL,"
    self:cSelect += 		" CONCAT(F2_FILIAL, F2_DOC, F2_SERIE) AS IDRETAGUARDACUPOM,"
    self:cSelect += 		" CONCAT(F2_EMISSAO, F2_HORA) AS DATAHORA"
    self:cSelect += 	" FROM " + RetSqlName("SF2") + " F2"
    self:cSelect += 		" INNER JOIN " + RetSqlName("SD2") + " D2"
    self:cSelect += 			" ON D2.D_E_L_E_T_ = ' ' AND F2.F2_FILIAL = D2.D2_FILIAL AND F2.F2_DOC = D2.D2_DOC AND F2.F2_SERIE = D2.D2_SERIE"
    self:cSelect += 		" INNER JOIN " + RetSqlName("SA1") + " A1"
    self:cSelect += 			" ON A1.D_E_L_E_T_ = ' ' AND A1_FILIAL = '" + xFilial("SA1") + "' AND ( (F2_CGCCLI <> '' AND CAST(F2_CGCCLI AS CHAR(20)) = CAST(A1_CGC AS CHAR(20))) OR (F2_CLIENTE = A1_COD AND F2_LOJA = A1_LOJA) )"
    self:cSelect += 	" WHERE F2.D_E_L_E_T_ = ' '"
    self:cSelect += 	" GROUP BY F2_FILIAL, F2_DOC, F2_SERIE, A1_CGC, F2_EMISSAO, F2_HORA, F2_VALBRUT, F2_ESPECIE"
    self:cSelect += " ) TOTAIS"

    self:cWhere  := " WHERE 1=1"

    If self:jParans:hasProperty("dataInicio") .And. self:jParans:hasProperty("dataFim")
        self:cWhere += " AND F2_EMISSAO >= '" +  self:jParans["dataInicio"] + "' AND F2_EMISSAO <= '" +  self:jParans["dataFim"] + "'"
    EndIf

    If self:jParans:hasProperty("cupom")
        self:cWhere += " AND CAST(F2_DOC AS INT) = " + cValToChar( Val(self:jParans["cupom"]) ) + ""
    EndIf

    self:cGroupBy:= ""

    self:cOrderBy:= " ORDER BY F2_FILIAL, F2_DOC, F2_SERIE"

    //Retira porque já foi utilizado no filtro
    self:jParans:delName("dataInicio")
    self:jParans:delName("dataFim")
    self:jParans:delName("cupom")

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Validation
Metodo para validações executado no momento do get

@author  Rafael Tenorio da Costa
@since   14/09/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method Validation() as Variant Class NotaSaidaObj

    _Super:Validation()

    If self:lSuccess

        If !self:jParans:hasProperty("idRetaguardaCupom")

            If !self:jParans:hasProperty("dataInicio") .Or. !self:jParans:hasProperty("dataFim")
                self:lSuccess    := .F.
                self:cError      := STR0001                                                         //"Ops! Não foi atendido o critério mínimo para filtro."
                self:cDetail     := I18n(STR0002, {"idRetaguardaCupom", "dataInicio", "dataFim"})   //"As TAGs #1 ou #2 e #3 devem ser preenchidas."
                self:nStatusCode := 412
            EndIf
        EndIf

        If self:lSuccess
            //Carrega select
            self:setSelect("SF2")
        EndIf
    EndIf

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} GetReturn
Retorna json com resultado da consulta

@author  Rafael Tenorio da Costa
@since   16/07/2019
@version 1.0
/*/
//-------------------------------------------------------------------
Method getReturn() as Character Class NotaSaidaObj

    Local jRetorno  as Object 
    Local cRetorno  as Character
    Local cChave    as Character    
    Local nData     as Integer
    Local nSql      as Integer
    Local nItem     as Integer
    Local aSql      as Array

    jRetorno := JsonObject():New()
    jRetorno:FromJson( _Super:GetReturn() )

    If self:lSuccess

        For nData:=1 To Len(jRetorno["data"])

            jRetorno["data"][nData]["itens"] := {}

            cChave := jRetorno["data"][nData]["idRetaguardaCupom"]

            cSql := " SELECT D2_ITEM, D2_COD, D2_PRCVEN, D2_QUANT, D2_QTDEDEV, B1_DESC"
            cSql += " FROM " + RetSqlName("SD2") + " D2 LEFT JOIN " + RetSqlName("SB1") + " B1"
            cSql +=     " ON B1.D_E_L_E_T_ = ' ' AND B1_FILIAL = '" + xFilial("SB1") + "' AND  D2_COD = B1_COD"
            cSql += " WHERE D2.D_E_L_E_T_ = ' '"
            cSql +=     " AND CONCAT(D2_FILIAL, D2_DOC, D2_SERIE) = '" + cChave + "'"

            aSql := RmiXSql(cSql, "*", /*lCommit*/, /*aReplace*/)

            For nSql:=1 To Len(aSql)
            
                aAdd(jRetorno["data"][nData]["itens"], JsonObject():New() )
                nItem := Len(jRetorno["data"][nData]["itens"])

                jRetorno["data"][nData]["itens"][nItem]["idRetaguardaCupomItem"] := cChave + aSql[nSql][1]
                jRetorno["data"][nData]["itens"][nItem]["idRetaguardaProduto"]   := aSql[nSql][2]
                jRetorno["data"][nData]["itens"][nItem]["descricao"]             := aSql[nSql][6]
                jRetorno["data"][nData]["itens"][nItem]["valorUnitario"]         := aSql[nSql][3]
                jRetorno["data"][nData]["itens"][nItem]["qtdVendida"]            := aSql[nSql][4]
                jRetorno["data"][nData]["itens"][nItem]["qtdDisponivel"]         := aSql[nSql][4] - aSql[nSql][5]
            Next nSql

        Next nData

    EndIf

    cRetorno := jRetorno:toJson()

    FwFreeArray(aSql)
    FwFreeObj(jRetorno)

Return cRetorno