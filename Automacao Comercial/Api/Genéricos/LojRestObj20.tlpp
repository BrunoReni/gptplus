#INCLUDE "TOTVS.CH"
#INCLUDE "LOJRESTOBJ.CH"
#INCLUDE "DEFRESTOBJ.CH"

//-------------------------------------------------------------------
/*/{Protheus.doc} Classe LojRestObj
    Classe para tratamento de APIs em Rest do Varejo
/*/
//-------------------------------------------------------------------
Class LojRestObj20 from LojRestObj

	Public Method New()                     as Object
    Public Method Get()		                as Variant
    Public Method getReturn()               as Character
    Public Method Post()                    as Variant

    Private Method Select()                 as Variant

    Protected Method InitialValidation()    as Variant
    Protected Method Validation()           as Variant
    Protected Method execAuto()             as Variant

    Protected Data jParans                  as Json
    Protected Data jBody                    as Json
    Protected Data bMsExecAuto              as CodeBlock

    Private   Data cBody                    as Character    

EndClass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método construtor da Classe

@param oWsRestObj - Objeto WSRESTFUL da API 

@author  Lucas Novais (lnovais@)
@since   08/08/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method New(oWsRestObj As Object, jParans as Json, cBody as Character) As Object Class LojRestObj20

    _Super:New(oWsRestObj)

    self:nStatusCode := 400

    self:jParans := jParans
    self:cBody   := cBody
    self:jBody   := JsonObject():New()

    self:InitialValidation()

Return self

//-------------------------------------------------------------------
/*/{Protheus.doc} Get
Carrega as propriedade de filtros e ordenação e chama a execução da consulta

@author  Lucas Novais (lnovais@)
@since   08/08/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method Get() as Variant Class LojRestObj20

    Local nX      := 1	as Numeric
    Local aParans := {}	as Array

    If self:lSuccess

        //Carrega os campos que serão retornados
        self:SetFields()

        aParans := self:jBody:GetNames()
        If ValType(aParans) == "A" .And. Len(aParans) > 0 

            For nX := 1 To Len(aParans) 
                self:jParans[allTrim(aParans[nX])] := self:jBody[aParans[nX]]
            Next nX
        EndIf

        self:Validation("GET")
        
        If self:lSuccess

            If self:jparans:HasProperty("campos") .And. !Empty(self:jparans['campos'])
                self:aRetFields := StrTokArr( Alltrim( Upper(self:jparans['campos']) ), ",")
            EndIf
            
            If self:jparans:HasProperty("pagina") .And. self:jparans['pagina'] > 0
                self:nPage := self:jparans['pagina']
            EndIf

            If self:jparans:HasProperty("itensPagina") .And. self:jparans['itensPagina'] > 0
                self:nPageSize := self:jparans['itensPagina']
            EndIf

            If self:jparans:HasProperty("ordem") .And. !Empty(self:jparans['ordem'])
                self:aOrder := StrTokArr( Alltrim( Upper(self:jparans['ordem']) ), ",")
            EndIf

            /*
            If self:jparans:HasProperty("agrupar") .And. !Empty(self:jparans['agrupar'])
                self:aGroupBy := StrTokArr( Alltrim( Upper(self:jparans['agrupar']) ), ",")
            EndIf
            */

            If self:jparans:HasProperty("soma") .And. !Empty(self:jparans['soma'])
                self:cSum := Alltrim( Upper(self:jparans['soma']) )
            EndIf
            
            aParans := self:jparans:GetNames()
            If ValType(aParans) == "A" .And. Len(aParans) > 0 

                For nX := 1 To Len(aParans) 
                    If !( Upper( AllTrim(aParans[nX]) ) $ "CAMPOS|PAGINA|ITENSPAGINA|ORDEM|AGRUPAR|SOMA" )
                        self:oJsonFilter[ AllTrim( Upper(aParans[nX]) ) ] := self:jparans[aParans[nX]]
                    EndIf
                Next nX
            EndIf
        
            self:Select()
        EndIf
    EndIf

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} GetReturn
Retorna json com resultado da consulta

@author  Rafael Tenorio da Costa
@since   16/07/2019
@version 1.0
/*/
//-------------------------------------------------------------------
Method getReturn() as Character Class LojRestObj20

    Local jAux      as Object
    Local jRetorno  as Object 
    Local cRetorno  as Character

    jRetorno := JsonObject():New()
    jRetorno["success"] := self:lSuccess
    jRetorno["message"] := self:cError + self:cDetail
    jRetorno["data"]    := {}
    jRetorno["hasNext"] := .F.

    If self:lSuccess

        jAux := JsonObject():New()
        jAux:FromJson( _Super:GetReturn() )

        If jAux:HasProperty("items") 
            If Len(jAux["items"]) >= 1 .And. Len( jAux["items"][1]:GetNames() ) > 0
            	jRetorno["data"]    := jAux["items"]
            Else
            	jRetorno["data"]    := {}
            EndIf
        Else
            aAdd(jRetorno["data"], jAux)
        EndIf

        If jAux:HasProperty("hasNext")
            jRetorno["hasNext"] := jAux["hasNext"]
        EndIf
    Else

        self:oWsRestObj:setStatusCode( self:nStatusCode )
    EndIf

    cRetorno := jRetorno:toJson()

    FwFreeObj(jAux)
    FwFreeObj(jRetorno)

Return cRetorno

//-------------------------------------------------------------------
/*/{Protheus.doc} Select
Valida os campos de pesquisa e ordem da query e executa a consulta

@author  Rafael Tenorio da Costa
@since   16/07/2019
@version 1.0
/*/
//-------------------------------------------------------------------
Method Select() as Variant Class LojRestObj20

	Local nX        := 0
    Local cQuery    := ""
	Local cWhere    := IIF( !Empty(self:cWhere), self:cWhere, " WHERE 1=1" )
	Local cOrder    := ""
	Local aTemp     := {}
	Local cProperty := ""
	Local aAux      := {}
    Local cDataBase := Upper( AllTrim( TcGetDb() ) )
    Local cRecords  := cValToChar( (self:nPage * self:nPageSize) + 1) //Foi somado 1 a mais para ajudar a definir a TAG "hasNext": no retorno do json
    Local aIn       := {}
    Local nY        := 0
    Local cGroupBy  := ""
    Local cSum      := ""

    If Empty(self:cSelect)

        /*
        self:lSuccess := .F.
        self:cError   := STR0003    //"Não existe select para ser executado."
        */
    Else

        //Carrega Filtros
        If self:oJsonFilter <> Nil

            aTemp := self:oJsonFilter:getNames()

            For nX := 1 To Len(aTemp)

                aAux	  := {}
                cProperty := AllTrim( Upper(aTemp[nX]) )

                If HmGet(self:oFields, cProperty, @aAux) .And. Len(aAux) > 0 .And. !Empty(aAux[1][CAMPO])
                    Self:TreatField(aAux[1],@self:oJsonFilter[aTemp[nX]],BUSCA)

                    If ValType(self:oJsonFilter[aTemp[nX]]) == "A"

                        aIn := self:oJsonFilter[aTemp[nX]]

                        If Len(aIn) > 0

                    		cWhere += " AND "

                        	cWhere += aAux[1][CAMPO] + " In ("
                        
	                        For nY := 1 To Len(aIn)
	
	                            If aAux[1][TIPOCAMPO] == "C"
	                                cWhere += "'" + aIn[nY] + "'"
                                /*                                    
	                            Else
	                                cWhere += aIn[nY]
                                */
	                            EndIf 
	                            
	                            cWhere += "," 
	
	                        Next nY

                        	cWhere := SubStr(cWhere, 1, Len(cWhere) - 1)
                        	cWhere += ")" 
						EndIf 
                    Else   

                        cWhere += " AND "

                        If aAux[1][TIPOCAMPO] == "C"
                            self:oJsonFilter[aTemp[nX]] := "'" + self:oJsonFilter[aTemp[nX]] + "'"
                        Else
                            self:oJsonFilter[aTemp[nX]] := cValToChar( self:oJsonFilter[aTemp[nX]] )
                        EndIf

                        cWhere += aAux[1][CAMPO] + " = " + self:oJsonFilter[aTemp[nX]]
                    Endif
                Else
                    self:lSuccess := .F.
                    self:cError  += I18n(STR0004, {cProperty, STR0005}) + CRLF	//"A propriedade #1 não é valida para #2"	//"filtro"
                EndIf
            Next nX
        EndIf

        //Seta Ordem
        aTemp  := self:aOrder
        For nX := 1 To Len(aTemp)
                
            aAux := {}

            If SubStr(aTemp[nX],1,1) == "-"

                cProperty := AllTrim( Upper( SubStr(aTemp[nX], 2) )	)

                If !Empty(cProperty)

                    If HmGet(self:oFields, cProperty, @aAux) .And. !Empty(aAux[1][CAMPO])
                        cOrder += aAux[1][CAMPO] + " desc,"
                    Else
                        self:lSuccess := .F.
                        self:cError  += I18n(STR0004, {cProperty, STR0006}) + CRLF	//"A propriedade #1 não é valida para #2"	//"ordenação"
                    EndIf
                EndIf
            Else

                cProperty := AllTrim( Upper( IIF(SubStr(aTemp[nX], 1, 1) == "+", SubStr(aTemp[nX], 2), aTemp[nX]) )	)

                If !Empty(cProperty)

                    If HmGet(self:oFields, cProperty, @aAux) .And. !Empty(aAux[1][CAMPO])
                        cOrder += aAux[1][CAMPO] + ","
                    Else
                        self:lSuccess := .F.
                        self:cError  += I18n(STR0004, {cProperty, STR0006}) + CRLF	//"A propriedade #1 não é valida para #2"	//"ordenação"
                    EndIf
                EndIf
            EndIf
        Next nX

        If !Empty(cOrder)
            cOrder := SubStr(cOrder, 1, Len(cOrder) - 1)
            self:cOrderBy := IIF( Empty(self:cOrderBy), " ORDER BY " + cOrder, self:cOrderBy + ", " + cOrder )
        EndIf

        //Seta Group by
        /*
        aTemp  := self:aGroupBy
        For nX := 1 To Len(aTemp)
                
            aAux := {}
            cProperty := AllTrim( Upper(aTemp[nX]) )

            If HmGet(self:oFields, cProperty, @aAux) .And. Len(aAux) > 0

                cGroupBy += aAux[1][CAMPO] + ","
            Else
                            
                self:lSuccess := .F.
                self:cError  += I18n(STR0004, {cProperty, " Group By "}) + CRLF	//"A propriedade #1 não é valida para #2"	//"Group By"
            
            EndIf

        Next nX

        If !Empty(cGroupBy)
            cGroupBy := SubStr(cGroupBy, 1, Len(cGroupBy) - 1)
            self:cSelect  := StrTran(self:cSelect , "*", cGroupBy)
            self:cGroupBy := " GROUP BY " + cGroupBy
        EndIf
        */

        //Seta Sum
        If !(Empty(Self:cSum))      
            aAux := {}
            cProperty := AllTrim( Upper(Self:cSum) )

            If HmGet(self:oFields, cProperty, @aAux) .And. Len(aAux) > 0
                cSum += "Sum(" + aAux[1][CAMPO] + ") " + aAux[1][CAMPO]
            Else
                            
                self:lSuccess := .F.
                self:cError  += I18n(STR0004, {cProperty, " Sum "}) + CRLF	//"A propriedade #1 não é valida para #2"	//"Group By"
                
            EndIf

            If !Empty(cSum)
                self:cSelect  := StrTran(self:cSelect , "*", cSum)
            EndIf
        EndIf

        //Executa query
        If self:lSuccess

            //Carrega campos retornados pela query
            self:SelectFields()
            self:cSelect  := StrTran(self:cSelect , "*", self:cFields)
            self:cGroupBy := StrTran(self:cGroupBy, "*", self:cFields)

            //Adiciona controle de paginação direto na query
            self:cSelect := IIF(cDataBase <> "ORACLE" .And. SubStr( Upper(self:cSelect), 1, 6 ) == "SELECT", "SELECT TOP " + cRecords + SubStr(self:cSelect, 7), self:cSelect)
            cWhere       := IIF(cDataBase == "ORACLE", cWhere + " AND ROWNUM <= " + cRecords, cWhere)
            /*
            If cDataBase <> "ORACLE"
                If SubStr( Upper(self:cSelect), 1, 6) == "SELECT"
                    self:cSelect := "SELECT TOP " + cRecords + SubStr(self:cSelect, 7)
                EndIf
            Else
                cWhere := cWhere + " AND ROWNUM <= " + cRecords
            EndIf
            */

            //Carrega query
            cQuery := self:cSelect +" "+ cWhere +" "+ self:cGroupBy +" "+ self:cOrderBy            
            cQuery := ChangeQuery(cQuery)

            LjGrvLog("LojRestObj20","Query executada -> " + cQuery)

            self:cSelect := cQuery
            self:cWhere  := cWhere

            DbUseArea(.T., "TOPCONN", TcGenQry( , , self:cSelect), self:cAliasQuery, .T., .F.)

            If (self:cAliasQuery)->( Eof() )
                self:lSuccess := .F.
                self:cError   := STR0007                    //"Não foram localizados registros com esses parâmetros."
                self:cDetail  := STR0008 + self:cSelect     //"Consulta executada: "
            EndIf
        EndIf
    EndIf

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} InitialValidation
Metodo para validações executado no inicio new

@author  Rafael Tenorio da Costa
@since   14/09/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method InitialValidation() as variant Class LojRestObj20

    Local cMsg as Character

    If ValType( cMsg := self:jBody:FromJson(Self:cBody) ) == "C"

        self:lSuccess    := .F.
        self:cError      := STR0013     //"Ops! Corpo recebido incorreto."
        self:cDetail     := cMsg
    EndIf

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Validation
Metodo para validações executado durante o processo hoje executado no get

@author  Rafael Tenorio da Costa
@since   14/09/2022
@version 1.0
/*/
//-------------------------------------------------------------------
Method Validation(cOrigem as Character) as variant Class LojRestObj20 ; return

//-------------------------------------------------------------------
/*/{Protheus.doc} Post
Carrega as propriedades e chama a execução da Inclusão

@author  rafael.pessoa
@since   09/08/2019
@version 1.0
/*/
//-------------------------------------------------------------------
Method Post() as Variant Class LojRestObj20

    Local nX            := 1	as Numeric
    Local aParans       := {}	as Array
    Local bErrorBlock           as CodeBlock
    Local cErrorBlock   := ""   as Character

    If self:lSuccess

        aParans := self:jBody:GetNames()
        If ValType(aParans) == "A" .And. Len(aParans) > 0 

            For nX := 1 To Len(aParans) 
                self:jParans[allTrim(aParans[nX])] := self:jBody[aParans[nX]]
            Next nX
        EndIf

        //Salva tratamento de erro anterior e atualiza tratamento de erro
        bErrorBlock := ErrorBlock( {|oErro| RmiErroBlock(oErro, /*@lErrorBlock@*/, @cErrorBlock)} )

        Begin Transaction

            //Condição que pode dar erro
            Begin Sequence

                self:Validation("POST")

                If self:lSuccess

                    //self:BindFields()
                    self:changeBranch()

                    If self:lSuccess
                        //Grava
                        self:execAuto()

                        //Carrega retorno
                        If self:lSuccess
                            self:Get()
                        EndIf
                    EndIf

                    self:restoreBranch()
                EndIf

            //Se ocorreu erro
            Recover
                
                self:lSuccess := .F.
                self:cError   := cErrorBlock

            End Sequence
        End Transaction

        //Restaura tratamento de erro anterior
        ErrorBlock(bErrorBlock)
    EndIf

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} execAuto
Metodo auxiliar para executar rotinas automaticas

@author  Rafael Tenorio da Costa
@version 1.0
/*/
//-------------------------------------------------------------------
Method execAuto() as Variant Class LojRestObj20

    Local aErro := {}           as Array
    Local cErro := ""           as Character
    Local nCont := 0            as Numeric
    Local aArea := GetArea()    as Array

	Private lMsHelpAuto     := .T.
	Private lMsErroAuto		:= .F.
    Private lAutoErrNoFile  := .T.  //Define que retorna o erro do MsExecAuto para o array

    //Executa a MsExecAuto
    Eval(self:bMsExecAuto)

    If lMsErroAuto
        RollBackSX8()

        aErro := GetAutoGrLog()

        For nCont := 1 To Len(aErro)
            cErro += AllTrim( aErro[nCont] ) + CRLF
        Next nCont

        self:lSuccess   := .F.
        self:cError     := cErro
    Else

        ConfirmSX8()        
    EndIf

    RestArea(aArea)

Return Nil
