#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include "backoffice.fiscal.dashboard.cards.tributos.ch"

Namespace totvs.protheus.backoffice.fiscal
Using Namespace framework.types.json

//------------------------------------------------------------------------
/*/{Protheus.doc} Dashboard cards tributos
  API Gráfico de Difal para não contribuinte - Dashboard

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
  @return 	Json
/*/
//------------------------------------------------------------------------

Class DashboardCardsTaxes 	//Cards com tributos municipais, estaduais e federais
	
  Private data cMoeda   as character
  Private data cTributo as character
  Private data cSelectTributo as character
  Private data cWhereTributo as character
  Private data cSomaValor as character
  Private data cSomaBase as character  
  Private data cSelectItens as character  
	
	Public Method new() Constructor
    
	@POST(endpoint="/ProdFiscal/cards/tributos/itemsdetails/:ctributo"/*, description=STR0002*/) // #"Carrega os Itens Utilizados para Montagem do Painel"
  Public Method itemsDetails() as logical

	@GET(endpoint="/ProdFiscal/cards/tributos/headeritens"/*, description=STR0003*/)    // #"Carrega os Cabeçalho a ser apresentado nos detalhes"
  Public Method headerItens() as logical

  @GET(endpoint="/ProdFiscal/cards/tributos/fieldsinfo/:ctributo"/*, description=STR0004*/) // #"Carrega os campos que podem que ser utilizados"
  Public Method fieldsInfo() as logical

  @GET(endpoint="/ProdFiscal/cards/tributos/cardinfo/:ctributo"/*, description=STR0005*/) // #"Carrega as informações do Painel"
  Public Method cardInfo() as logical

  
  //Methods complementares
  Private Method RetCardInfo() as logical
  Private Method RetTotPed(cWhere, cSelect, cEntSai,lDevolucao, lBase) as numeric
  Private Method MntQuery(cSelect, cFilter, lDevolucao, cEntSai) as array
  Private Method QuerySFT(cFilter) as array
  Private Method DePara(cTab) as array
  Private Method RetHeader(cTab) as array
  Private Method CarregaQueryTributos() as logical
  Private Method filter(oCoreDash) as character

  //Getters e setters
	Private Method setTributo(Value) as logical
  Private Method setSelectTributo(Value) as logical
  Private Method setWhereTributo(Value) as logical
  Private Method setSomaValor(Value) as logical
  Private Method setSomaBase(Value) as logical
  Private Method setselectItens(Value) as logical

  Private Method getMoeda() as character
  Private Method getTributo() as character
  Private Method getSelectTributo() as character
  Private Method getWhereTributo() as character  
  Private Method getSomaValor() as character
  Private Method getSomaBase() as character  
  Private Method getselectItens(Value) as character

EndClass


//-------------------------------------------------------------------
/*/{Protheus.doc} New()
Método construtor da classe

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method new() class DashboardCardsTaxes	
	::cMoeda         := SuperGetMV("MV_SIMB1",.F.,"R$")
  ::cTributo       := ""
  ::cSelectTributo := ""
  ::cWhereTributo  := ""
return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} setTributo()
Método que irá Atribuir tributo recebido. 
/*/
//-------------------------------------------------------------------
Method setTributo(Value)       as logical Class DashboardCardsTaxes
	::cTributo       := Value
Return .T.

Method setSelectTributo(Value) as logical Class DashboardCardsTaxes
  ::cSelectTributo := Value
Return .T.

Method setWhereTributo(Value)  as logical class DashboardCardsTaxes
  ::cWhereTributo  := Value
Return .T.

Method setSomaValor(Value)     as logical Class DashboardCardsTaxes
  ::cSomaValor     := Value
Return .T.

Method setSomaBase(Value)      as logical Class DashboardCardsTaxes
  ::cSomaBase      := Value
Return .T.

Method setSelectItens(Value)      as logical Class DashboardCardsTaxes
  ::cSelectItens      := Value
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} getTributo()
Método que irá retornar tributo recebido. 
/*/
//-------------------------------------------------------------------
Method getTributo()       as character Class DashboardCardsTaxes
Return UPPER(::cTributo)

Method getSelectTributo() as character Class DashboardCardsTaxes
RETURN UPPER(::cSelectTributo)

Method getWhereTributo()  as character Class DashboardCardsTaxes
RETURN UPPER(::cWhereTributo)

Method getSomaValor()     as character Class DashboardCardsTaxes
return ::cSomaValor

Method getSomaBase()      as character Class DashboardCardsTaxes
return ::cSomaBase

Method getSelectItens()      as character Class DashboardCardsTaxes
return ::cSelectItens
//-------------------------------------------------------------------
/*/{Protheus.doc} getMoeda()
Método que irá retornar a moeda. 
/*/
//-------------------------------------------------------------------
Method getMoeda() as character Class DashboardCardsTaxes	
Return ::cMoeda


//-------------------------------------------------------------------
/*/{Protheus.doc} POST itemsDetails
Carrega os Itens Utilizados para Montagem do Card

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------
Method itemsDetails()  as logical class DashboardCardsTaxes

	Local aFilter       := {}                                 as array
	Local aHeader       := {}                                 as array
	Local aRet          := {}                                 as array
	Local cBody         := DecodeUtf8(oRest:GetBodyRequest()) as character
	Local cError        := STR0006                            as character // #"Erro na Requisição" 
	Local cFilter       := ""                                 as character
	Local lRet          := .F.                                as logical	
	Local nX            := 0                                  as numeric
	Local oBody         := JsonObject():New()                 as json
	Local oCoreDash     := CoreDash()  :New()                 as object
	Local oJsonDD       := JsonObject():New()                 as json
  Local jQueryParam   := oRest:getQueryRequest()            as json
  Local jPathParam    := oRest:getPathParamsRequest()       as json
  Local aPropriedades := {}                                 as array
  Local aQueryString  := {}                                 as array

	oRest:setKeyHeaderResponse('Content-Type','application/json')

  //Responsável por retornar os parâmetros informados na requisição via URI (path param)
  IF (valtype(jPathParam) == 'J')
    if (valtype(jPathParam['ctributo']) == 'C')
      ::setTributo(jPathParam['ctributo'])
      ::CarregaQueryTributos()
    endif
  Endif

  IF ::getTributo() $ "ICMS|IPI|PIS|COFINS|ISS"    

    If !Empty(cBody)
      oBody:FromJson(cBody)

      If ValType(oBody["detailFilter"]) == "A"
        oJsonDD := oBody["detailFilter"]
      EndIf
    EndIf

    //Responsável por retornar os parâmetros informados na requisição via URI (query param)
    IF (valtype(jQueryParam) == 'J')
      aPropriedades := jQueryParam:GetNames( )//Recupera propriedades
      For nX := 1 to len(aPropriedades)			
        if UPPER(aPropriedades[nX]) $ "PAGE|PAGESIZE"
          Aadd(aQueryString,{UPPER(aPropriedades[nX]),VAL(jQueryParam[aPropriedades[nX]])})
        else
          Aadd(aQueryString,{UPPER(aPropriedades[nX]),UPPER(jQueryParam[aPropriedades[nX]])})
        Endif
      NEXT
    Endif

    If Len(oJsonDD) == 0 //Nivel 0
      aHeader := ::RetHeader("NOTA")
      oCoreDash:SetFields(::DePara("NOTA"))
      oCoreDash:SetApiQstring(aQueryString)
      
      //Adiciona filtros
      cFilter += ::filter(oCoreDash)

      aRet := ::MntQuery(,cFilter)
    ElseIf Len(oJsonDD) == 1 //Nivel 1
      aHeader := ::RetHeader("ITEM")
      oCoreDash:SetFields(::DePara("ITEM"))
      oCoreDash:SetApiQstring(aQueryString)
      aFilter := oCoreDash:GetApiFilter()

      //Adiciona filtros
      cFilter += ::filter(oCoreDash)

      cFilter += " AND SFT.FT_TIPOMOV = '" + oJsonDD[1]['typeOfmovement'] + "' "
      cFilter += " AND SFT.FT_SERIE = '"   + oJsonDD[1]['series'] + "' "
      cFilter += " AND SFT.FT_NFISCAL = '" + oJsonDD[1]['document'] + "' "
      cFilter += " AND SFT.FT_CLIEFOR = '" + oJsonDD[1]['client'] + "' "
      cFilter += " AND SFT.FT_LOJA = '"    + oJsonDD[1]['store'] + "' "
      cFilter += " AND SFT.FT_ENTRADA = '" + dtos(ctod(oJsonDD[1]['dateOfIssue'])) + "' "
      cFilter += " AND SFT.FT_ESPECIE = '" + oJsonDD[1]['species'] + "' "
      cFilter += " AND SFT.FT_TIPO = '"    + oJsonDD[1]['type'] + "' "     
      
      aRet := ::QuerySFT(cFilter) 
    Endif

    oCoreDash:SetQuery(aRet[1])
    oCoreDash:SetWhere(aRet[2])
    If Len(aRet) >= 3
      oCoreDash:SetGroupBy(aRet[3])
    EndIf
    lRet := oCoreDash:BuildJson()
  Endif

	If lRet
    oCoreDash:SetPOHeader(aHeader)
		oRest:setResponse( DECODEUTF8(oCoreDash:ToObjectJson()))
	Else    		
		oRest:setStatusCode( 404 ) // O servidor não pode encontrar o recurso solicitado
    Return oRest:setResponse(cError) // #"Erro na Requisição"
	EndIf

	oCoreDash:Destroy()
  FreeObj(aRet)

Return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} GET headerItens
Retorna o aHeader que será utilizado no Filtro do Card 

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------
Method headerItens() as logical class DashboardCardsTaxes

  Local aHeader   := {}                 as array
  Local oCoreDash := CoreDash()  :New() as object
  Local oResponse := JsonObject():New() as json

  aHeader := {;
    {"dateOfIssue", STR0007},; // #"Data de Emissão"
    {"series", STR0034},; // #"Serie"    
    {"client"  , STR0010},; // #"Cliente"
    {"store"   , STR0011},; // #"Loja"    
    {"uf"      , STR0012},; // #"Estado"    
    {"species" , STR0015},; // #"Especie do documento"
    {"type"    , STR0049}} // #"Tipo do documento"
  

  oResponse["items"]   := oCoreDash:SetPOHeader(aHeader)

  oRest:setResponse( (oResponse:ToJson()))
Return .T.


//-------------------------------------------------------------------
/*/{Protheus.doc} GET fieldsInfo
Carrega os campos que podem que ser utilizados

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------
Method fieldsInfo() as logical class DashboardCardsTaxes

    Local aItems     := {}                           as array
    Local jItem      := JsonObject():New()           as json
    Local oResponse  := JsonObject():New()           as json
    Local jPathParam := oRest:getPathParamsRequest() as json

      //Responsável por retornar os parâmetros informados na requisição via URI (path param)
    IF (valtype(jPathParam) == 'J')
      if (valtype(jPathParam['ctributo']) == 'C')
        ::setTributo(jPathParam['ctributo'])        
      endif
    Endif

  IF ::getTributo() $ "ICMS|IPI|PIS|COFINS|ISS" 
    
    //saída
    jItem := JsonObject():New()
    jItem["label"]  :=	STR0016       // #"Valor Total saídas: "
    jItem["value"] :=	"outputsvalue"    
    AADD(aItems, jItem)

    jItem := JsonObject():New()
    jItem["label"]  :=	STR0045       // #"Base de cálculo saídas "
    jItem["value"] :=	"outputsbase"
    AADD(aItems, jItem)

    //dev saídas
    IF ::getTributo() <> 'ISS'
      jItem := JsonObject():New()
      jItem["label"]  :=	STR0017       // #"Valor Devolução de saídas "
      jItem["value"] :=	"returnoutputsvalue"
      AADD(aItems, jItem)
    

      jItem := JsonObject():New()
      jItem["label"]  :=	STR0046       // #"Base Devolução saídas "
      jItem["value"] :=	"returnoutputsbase"
      AADD(aItems, jItem)
    Endif

    //entrada
    jItem := JsonObject():New()
    jItem["label"]  :=	STR0018       // #"Valor Total Entradas:"
    jItem["value"] :=	"entriesvalue"
    AADD(aItems, jItem)

    jItem := JsonObject():New()
    jItem["label"]  :=	STR0047       // #"Base de cálculo Entradas: "
    jItem["value"] :=	"entriesbase"
    AADD(aItems, jItem)

    // dev entrada
    IF ::getTributo() <> 'ISS'
      jItem := JsonObject():New()
      jItem["label"]  :=	STR0019       // #"Valor Devolução de Entradas "
      jItem["value"] :=	"returnentries"
      AADD(aItems, jItem)

      jItem := JsonObject():New()
      jItem["label"]  :=	STR0048       // #"Base Devolução Entrada:"
      jItem["value"] :=	"returnentriesbase"
      AADD(aItems, jItem)
    Endif

    oResponse["items"]      := aItems

    oRest:setResponse( (oResponse:ToJson()))
  else    
		oRest:setStatusCode( 404 ) // O servidor não pode encontrar o recurso solicitado
    Return oRest:setResponse(STR0006) // #"Erro na Requisição"
  Endif
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} GET cardInfo
Método para retornar os dados do Card

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------
Method cardInfo() as logical class DashboardCardsTaxes

  Local aFilter       := {}                           as array
  Local cWhere        := ""                           as character
  Local lRet          := .T.                          as logical
  Local nFiltro       := 0                            as numeric
  Local oCoreDash     := CoreDash()  :New()           as object
  Local oResponse     := JsonObject():New()           as json
  Local nQtdFilter    := 0                            as numeric
  Local nX            := 0                            as numeric
  Local jParams       := oRest:getQueryRequest()      as json
  Local jPathParam    := oRest:getPathParamsRequest() as json
  Local aPropriedades := {}                           as array
  Local aQueryString  := {}                           as array
  
    //Responsável por retornar os parâmetros informados na requisição via URI (path param)
  IF (valtype(jPathParam) == 'J')    
    if (valtype(jPathParam['ctributo']) == 'C')
      ::setTributo(jPathParam['ctributo'])
      ::CarregaQueryTributos()
    endif
  Endif

  IF ::getTributo() $ "ICMS|IPI|PIS|COFINS|ISS" 

  
    FWLsPutAsyncInfo("LS006",RetCodUsr(),'09',"FISCARD"+::getTributo())  
    

    //Responsável por retornar os parâmetros informados na requisição via URI (query param)
    IF (valtype(jParams) == 'J')
      aPropriedades := jParams:GetNames( )//Recupera propriedades
      For nX := 1 to len(aPropriedades)			
        if UPPER(aPropriedades[nX]) $ "PAGE|PAGESIZE"
          Aadd(aQueryString,{UPPER(aPropriedades[nX]),VAL(jParams[aPropriedades[nX]])})
        else
          Aadd(aQueryString,{UPPER(aPropriedades[nX]),UPPER(jParams[aPropriedades[nX]])})
        Endif
      NEXT
    Endif

    oCoreDash:SetFields(::DePara())
    oCoreDash:SetApiQstring(aQueryString)
    aFilter := oCoreDash:GetApiFilter()

    nQtdFilter := Len(aFilter)
    For nFiltro := 1 to nQtdFilter
      cWhere += " AND " + aFilter[nFiltro][1]
    Next
    
    ::RetCardInfo( @oResponse, cWhere )

    oRest:setResponse( DECODEUTF8(FwJsonSerialize(oResponse,.T.,.T.)) )
  else    
		oRest:setStatusCode( 404 ) // O servidor não pode encontrar o recurso solicitado
    Return oRest:setResponse(STR0006) // #"Erro na Requisição"
  ENDIF

  oResponse := Nil
  FreeObj( oResponse )
  oCoreDash := Nil
  FreeObj( oCoreDash )

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} GET RetCardInfo
Retorna os dados que poderão ser apresentados no Card

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------
Method RetCardInfo( oResponse, cWhere ) as logical class DashboardCardsTaxes

    Local jitem  := JsonObject():New() as json
    Local aItems := {}                 as array
    Local cMoeda := ::getMoeda()       as character
   

    //saída    
    
    jitem["outputsvalue"]       := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaValor(),'S',.F.,.F.), "@E 999,999,999,999.99")

    jitem["outputsbase"]        := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaBase(),'S',.F.,.T.), "@E 999,999,999,999.99")

    //dev saídas
    IF ::getTributo() <> 'ISS'
      
      jitem["returnoutputsvalue"] := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaValor(),'E',.T., .F.), "@E 999,999,999,999.99")
      
      jitem["returnoutputsbase"]  := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaBase(),'E',.T., .T.), "@E 999,999,999,999.99")
      
    Endif

    //entrada
   
    jitem["entriesvalue"]       := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaValor(),'E',.F., .F.), "@E 999,999,999,999.99")

    jitem["entriesbase"]        := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaBase(),'E',.F., .T.), "@E 999,999,999,999.99")

    // dev entrada
    IF ::getTributo() <> 'ISS'
      
      jitem["returnentries"]      := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaValor(),'S',.T., .F.), "@E 999,999,999,999.99")

      jitem["returnentriesbase"]  := cMoeda + Transform(::RetTotPed(cWhere, ::getSomaBase(),'S',.T., .T.), "@E 999,999,999,999.99")
      
    Endif


    AADD(aItems, jitem)

    FREEOBJ( jitem )

    oResponse['hasNext']  := '.F.'
    oResponse["items"]    := aItems

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} GET RetTotPed
Monta a Query que será utilizada para retornar as informações no Card

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------
Method RetTotPed(cWhere, cSelect, cEntSai,lDevolucao, lBase) as numeric class DashboardCardsTaxes

  Local aQuery := ::MntQuery(cSelect,cWhere,lDevolucao,cEntSai) as array
  Local cQuery := ""                                            as character
  Local cTemp  := GetNextAlias()                                as character
  Local nRet   := 0                                             as numeric
  Local aBind  := {}                                            as array

  Default cWhere  := ""  

  aQuery[2] := " WHERE " + aQuery[2] //+ cWhere + ""

  cQuery := aQuery[1] + aQuery[2]

  DBUseArea( .T., "TOPCONN", TCGenQry2( ,, cQuery,aBind ), cTemp, .T., .T. )
  
  IF (cTemp)->(!Eof())
    IF lBase
      nRet :=	(cTemp)->BASETRIB
    Else
      nRet :=	(cTemp)->VALTRIB
    Endif
  Endif
  
  (cTemp)->( DBCloseArea() )
  ASIZE( aQuery, 0 )

Return nRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MntQuery
Query responsável por trazer os itens utilizados no Card

@param oCoreDash, objeto, Objeto responsável pela montagem do json
  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------

Method MntQuery(cSelect, cFilter, lDevolucao, cEntSai) as array class DashboardCardsTaxes

  Local cQuery     := "" as character
  Local cWhere     := "" as character
  
  Local cGroup     := "" as character
  Local dDtIni     := firstday(dDataBase) as date //Primeiro dia do periodo 
  Local dDtFin     := lastday(dDataBase) as date //Ultimo dia do periodo
  
  Default lDevolucao := .F.
  Default cFilter := "" 
  Default cEntSai := "" 
  Default cSelect := " SF3.F3_NFISCAL, SF3.F3_SERIE, SF3.F3_CLIEFOR, SF3.F3_LOJA, SFT.FT_TIPOMOV, SF3.F3_ESPECIE, SF3.F3_ENTRADA, SF3.F3_ESTADO, SF3.F3_TIPO, "+ ::getSelectTributo()

  cQuery += " SELECT " + cSelect + " FROM " + RetSqlName("SF3") + " SF3 "  
  cQuery += " INNER JOIN "+RetSqlName("SFT")+" SFT "
	cQuery += " ON (SFT.FT_FILIAL='"+xFilial("SFT")+"' AND FT_TIPOMOV = (CASE WHEN SF3.F3_CFO > '5' THEN 'S' ELSE 'E' END)  AND FT_CLIEFOR = F3_CLIEFOR AND FT_LOJA = F3_LOJA AND FT_SERIE = F3_SERIE AND FT_NFISCAL = F3_NFISCAL AND FT_IDENTF3 = F3_IDENTFT) "


  cWhere := " SF3.F3_FILIAL = '" + xFilial("SF3") + "' "
  If !Empty(cFilter)
    cWhere += cFilter
  Endif
  //Verifica se foi realizado filtro no periodo 
  IF At("F3_ENTRADA",cFilter) == 0
    cWhere += " AND SF3.F3_ENTRADA BETWEEN '"+DToS(dDtIni)+"' AND '"+DToS(dDtFin)+"' AND (SF3.F3_DTCANC =' ' OR SF3.F3_DTCANC > '"+DToS(dDtFin)+"') "
  else
    cWhere += " AND SF3.F3_DTCANC =' ' "
  Endif
  
  
  cWhere += " AND SF3.F3_CODRSEF NOT IN "+ XFUNCodSef({"D","I"},.t.) +" "  
  cWhere += ::getWhereTributo()
  IF lDevolucao
    cWhere += " AND SFT.FT_TIPO = 'D' "
  Endif
  IF !Empty(cEntSai)
    cWhere += " AND SFT.FT_TIPOMOV = '"+cEntSai+"' "
  Endif

  cWhere += " AND SF3.D_E_L_E_T_= ' ' "
  cWhere += " AND SFT.D_E_L_E_T_ = ' ' "

  cGroup += " SF3.F3_NFISCAL, SF3.F3_SERIE, SF3.F3_CLIEFOR, SF3.F3_LOJA, SF3.F3_ESPECIE, SF3.F3_ENTRADA, SF3.F3_ESTADO, SF3.F3_TIPO, SFT.FT_TIPOMOV "
 
Return {cQuery, cWhere, cGroup}

//-------------------------------------------------------------------
/*/{Protheus.doc} QuerySFT
Query responsável por trazer os itens do segundo nível do Detalhes do Card

@param oCoreDash, objeto, Objeto responsável pela montagem do json
  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------

Method QuerySFT(cFilter) as array  class DashboardCardsTaxes

  Local cQuery  := "" as character
  Local cWhere  := "" as character  

  Default cFilter := ""

  cSelect := ::getselectItens()

  cQuery := " SELECT " + cSelect + " FROM " + RetSqlName("SFT") + " SFT "
  
  cWhere := " SFT.FT_FILIAL = '" + xFilial("SFT") + "' "
  cWhere += cFilter  
  cWhere += ::GetWhereTributo() 

  cWhere += " AND SFT.FT_DTCANC =' ' "
  cWhere += " AND SFT.D_E_L_E_T_ = ' ' "  
  

Return {cQuery, cWhere}

//-------------------------------------------------------------------
/*/{Protheus.doc} DePara
Realiza o De/Para entre os objetos do Json e os campos do Protheus

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------

Method DePara(cTab) as array class DashboardCardsTaxes

  Local aCampos := {}  as array

  Default cTab := "NOTA"

  If cTab == "NOTA"
      aCampos := {;
          {"document"      , "SF3.F3_NFISCAL"},;
          {"series"        , "SF3.F3_SERIE"},;
          {"client"        , "SF3.F3_CLIEFOR"},;
          {"store"         , "SF3.F3_LOJA"},;
          {"type"          , "SF3.F3_TIPO"},;
          {"dateOfIssue"   , "SF3.F3_ENTRADA"},;
          {"uf"            , "SF3.F3_ESTADO"},;
          {"typeOfmovement", "SFT.FT_TIPOMOV"},;
          {"species"       , "SF3.F3_ESPECIE"},;                            
          {"taxbase"       , "BASETRIB"},;
          {"taxamount"     , "VALTRIB"};
          }
  ElseIf cTab == "ITEM"
    IF ::getTributo() == "ICMS" 
        aCampos := {;
          {"item"       , "SFT.FT_ITEM"},;
          {"product"    , "SFT.FT_PRODUTO"},;
          {"amount"     , "SFT.FT_QUANT"},;
          {"cfop"       , "SFT.FT_CFOP"},;
          {"cst"        , "SFT.FT_CLASFIS"},;          
          {"base"       , "SFT.FT_BASEICM"},;
          {"aliquot"    , "SFT.FT_ALIQICM"},;
          {"value"      , "SFT.FT_VALICM"},;
          {"valueisento", "SFT.FT_ISENICM"},;
          {"valueother" , "SFT.FT_OUTRICM"},;
          {"valfecp"    , "SFT.FT_VALFECP"};
          }
    elseif ::getTributo() == "ISS"
      aCampos := {;
          {"item"       , "SFT.FT_ITEM"},;
          {"product"    , "SFT.FT_PRODUTO"},;
          {"amount"     , "SFT.FT_QUANT"},;
          {"cfop"       , "SFT.FT_CFOP"},;
          {"cst"        , "SFT.FT_CSTISS"},;
          {"base"       , "SFT.FT_BASEICM"},;
          {"aliquot"    , "SFT.FT_ALIQICM"},;          
          {"value"      , "SFT.FT_VALICM"},;
          {"valueisento", "SFT.FT_ISENICM"},;
          {"valueother" , "SFT.FT_OUTRICM"},;
          {"cnae"       , "SFT.FT_CNAE"},;
          {"codiss"     , "SFT.FT_CODISS"},;
          {"tribmun"    , "SFT.FT_TRIBMUN"};
          }
    elseif ::getTributo() == "PIS" 
      aCampos := {;
          {"item"       , "SFT.FT_ITEM"},;
          {"product"    , "SFT.FT_PRODUTO"},;
          {"amount"     , "SFT.FT_QUANT"},;
          {"cfop"       , "SFT.FT_CFOP"},;
          {"cst"        , "SFT.FT_CSTPIS"},;
          {"base"       , "SFT.FT_BASEPIS"},;
          {"aliquot"    , "SFT.FT_ALIQPIS"},;                  
          {"value"      , "SFT.FT_VALPIS"};
          }
   
    elseif ::getTributo() == "COFINS" 
      aCampos := {;
          {"item"       , "SFT.FT_ITEM"},;
          {"product"    , "SFT.FT_PRODUTO"},;
          {"amount"     , "SFT.FT_QUANT"},;
          {"cfop"       , "SFT.FT_CFOP"},;
          {"cst"        , "SFT.FT_CSTCOF"},;                  
          {"base"       , "SFT.FT_BASECOF"},;
          {"aliquot"    , "SFT.FT_ALIQCOF"},;
          {"value"      , "SFT.FT_VALCOF"};
          }   
    elseif ::getTributo() == "IPI" 
       aCampos := {;
          {"item"       , "SFT.FT_ITEM"},;
          {"product"    , "SFT.FT_PRODUTO"},;
          {"amount"     , "SFT.FT_QUANT"},;
          {"cfop"       , "SFT.FT_CFOP"},;
          {"cst"        , "SFT.FT_CTIPI"},;                  
          {"base"       , "SFT.FT_BASEIPI"},;
          {"aliquot"    , "SFT.FT_ALIQIPI"},;
          {"value"      , "SFT.FT_VALIPI"},;
          {"valueisento", "SFT.FT_ISENIPI"},;
          {"valueother" , "SFT.FT_OUTRIPI"};                    
          }
      Endif
    Endif

Return aCampos

//-------------------------------------------------------------------
/*/{Protheus.doc} RetHeader
Retorna o aHeader

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
/*/
//-------------------------------------------------------------------

Method RetHeader(cTab) as array class DashboardCardsTaxes

  Local aHeader := {} as array
  Local cMoeda := ::getMoeda()  as character

  Default cTab := "NOTA"
  
  If cTab == "NOTA"
  
    aHeader := {;
      {"document"      , STR0033           , "link"    ,       , .T., .T.},; // # "Nota"           SF3.F3_NFISCAL
      {"series"        , STR0034           ,           ,       , .T., .T.},; // # "Serie"          SF3.F3_SERIE
      {"client"        , STR0035           ,           ,       , .T., .T.},; // # "Cliente"        SF3.F3_CLIEFOR
      {"store"         , STR0036           ,           ,       , .T., .T.},; // # "Loja"           SF3.F3_LOJA
      {"type"          , STR0037                                         },; // # "Tipo"           SF3.F3_TIPO            
      {"dateOfIssue"   , STR0039           ,           ,       , .T., .T.},; // # "Emissão"        SF3.F3_ENTRADA
      {"uf"            , STR0040           ,           ,       , .T., .T.},; // # "UF"             SF3.F3_ESTADO            
      {"typeOfmovement", STR0042           ,           ,       , .T., .T.},; // # "Tipo de Movimento"   SFT.FT_TIPOMOV		
      {"species"       , STR0043           ,           ,       , .T., .T.},; // # "Especie"             SF3.F3_ESPECIE            
      {"taxbase"       , STR0044 + ::getTributo(), "currency", cMoeda},; // # "Base do Tributo"
      {"taxamount"     , STR0041 + ::getTributo(), "currency", cMoeda}; // # "Valor do Tributo"
      }

  ElseIf cTab == "ITEM"

    IF ::getTributo() == "ICMS"
      aHeader := {;
        {"item"       , STR0050,  , , .T., .T.},; //"Item"
        {"product"    , STR0051,  , , .T., .T.},; //"Produto"
        {"amount"     , STR0052,  , , .T., .T.},; //"Quantidade"
        {"cfop"       , STR0053,  , , .T., .T.},; //"CFOP"
        {"cst"        , STR0054,  , , .T., .T.},; //"CST"
        {"base"       , STR0056, "currency", cMoeda},; //"Base de cálculo"
        {"aliquot"    , STR0055},; //"Alíquota"
        {"value"      , STR0057, "currency", cMoeda},; //"Valor"
        {"valueisento", STR0058, "currency", cMoeda},; //"Valor em Isento"
        {"valueother" , STR0059, "currency", cMoeda},; //"valor em Outros"
        {"valfecp"    , STR0060, "currency", cMoeda}; //"valor de FECP"
        }

    elseif ::getTributo() == "ISS"
      aHeader := {;
          {"item"       , STR0050,  , , .T., .T.},; //"Item"
          {"product"    , STR0051,  , , .T., .T.},; //"Produto"
          {"amount"     , STR0052,  , , .T., .T.},; //"Quantidade"
          {"cfop"       , STR0053,  , , .T., .T.},; //"CFOP"
          {"cst"        , STR0054,  , , .T., .T.},; //"CST"
          {"base"       , STR0056, "currency", cMoeda},; //"Base de cálculo"
          {"aliquot"    , STR0055},; //"Alíquota"
          {"value"      , STR0057, "currency", cMoeda},; //"Valor"
          {"valueisento", STR0058, "currency", cMoeda},; //"Valor em Isento"
          {"valueother" , STR0059, "currency", cMoeda},; //"valor em Outros"
          {"cnae"       , STR0061},; //"Cnae"
          {"codiss"     , STR0062},; //"Código serviço"
          {"tribmun"    , STR0063};  //"Cód.Trib. Municipal"
          }

    elseif ::getTributo() == "PIS" 
      aHeader := {;
          {"item"       , STR0050,  , , .T., .T.},; //"Item"
          {"product"    , STR0051,  , , .T., .T.},; //"Produto"
          {"amount"     , STR0052,  , , .T., .T.},; //"Quantidade"
          {"cfop"       , STR0053,  , , .T., .T.},; //"CFOP"
          {"cst"        , STR0054,  , , .T., .T.},; //"CST"
          {"base"       , STR0056, "currency", cMoeda},;  //"Base de cálculo"
          {"aliquot"    , STR0055, "currency", cMoeda},;  //"Alíquota"         
          {"value"      , STR0057, "currency", cMoeda};   //"Valor"
          }

    elseif ::getTributo() == "COFINS" 
      aHeader := {;
          {"item"       , STR0050,  , , .T., .T.},; //"Item"
          {"product"    , STR0051,  , , .T., .T.},; //"Produto"
          {"amount"     , STR0052,  , , .T., .T.},; //"Quantidade"
          {"cfop"       , STR0053,  , , .T., .T.},; //"CFOP"
          {"cst"        , STR0054,  , , .T., .T.},; //"CST"
          {"base"       , STR0056, "currency", cMoeda},;  //"Base de cálculo"
          {"aliquot"    , STR0055, "currency", cMoeda},;  //"Alíquota"         
          {"value"      , STR0057, "currency", cMoeda};   //"Valor"
          }
    elseif ::getTributo() == "IPI" 
      aHeader := {;
        {"item"       , STR0050,  , , .T., .T.},; //"Item"
        {"product"    , STR0051,  , , .T., .T.},; //"Produto"
        {"amount"     , STR0052,  , , .T., .T.},; //"Quantidade"
        {"cfop"       , STR0053,  , , .T., .T.},; //"CFOP"
        {"cst"        , STR0054,  , , .T., .T.},; //"CST"
        {"base"       , STR0056, "currency", cMoeda},; //"Base de cálculo"
        {"aliquot"    , STR0055},; //"Alíquota"
        {"value"      , STR0057, "currency", cMoeda},; //"Valor"
        {"valueisento", STR0058, "currency", cMoeda},; //"Valor em Isento"
        {"valueother" , STR0059, "currency", cMoeda}; //"valor em Outros"        
        }
    EndIf
  EndIf

Return aHeader


/*/{Protheus.doc} CarregaQueryTributos
  Realiza a carga do dados a serem filtrados por tributo
  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
  /*/
Method CarregaQueryTributos() as logical class DashboardCardsTaxes
  
  If ::getTributo() == "ICMS"    
    
    ::setSomaBase(" SUM(SFT.FT_BASEICM) AS BASETRIB ")
    ::setSomaValor(" SUM(SFT.FT_VALICM) AS VALTRIB ")
    ::setWhereTributo(" AND SFT.FT_VALICM > 0 AND SFT.FT_TIPO <> 'S' AND SFT.FT_CODISS = ' ' ")

    ::setSelectItens(" SFT.FT_ITEM, SFT.FT_PRODUTO, SFT.FT_QUANT, SFT.FT_CFOP, SFT.FT_CLASFIS, SFT.FT_ALIQICM,SFT.FT_BASEICM, SFT.FT_VALICM,SFT.FT_ISENICM, SFT.FT_OUTRICM, SFT.FT_VALFECP ")
  ElseIf ::getTributo() == "ISS"    
    
    ::setSomaBase(" SUM(SFT.FT_BASEICM) AS BASETRIB ")
    ::setSomaValor(" SUM(SFT.FT_VALICM) AS VALTRIB ")
    ::setWhereTributo(" AND SFT.FT_VALICM > 0 AND SFT.FT_TIPO = 'S' AND (SFT.FT_CODISS <> ' ' OR SFT.FT_CNAE <> ' ' ) ")

    ::setSelectItens(" SFT.FT_ITEM, SFT.FT_PRODUTO, SFT.FT_QUANT, SFT.FT_CFOP, SFT.FT_CSTISS, SFT.FT_ALIQICM, SFT.FT_BASEICM, SFT.FT_VALICM, SFT.FT_ISENICM, SFT.FT_OUTRICM, SFT.FT_CNAE, SFT.FT_CODISS, SFT.FT_TRIBMUN ")
  ElseIf ::getTributo() == "PIS"    
    
    ::setSomaBase(" SUM(SFT.FT_BASEPIS) AS BASETRIB ")
    ::setSomaValor(" SUM(SFT.FT_VALPIS) AS VALTRIB ")
    ::setWhereTributo(" AND SFT.FT_VALPIS > 0 ")

    ::setSelectItens(" SFT.FT_ITEM, SFT.FT_PRODUTO, SFT.FT_QUANT, SFT.FT_CFOP, SFT.FT_CSTPIS, SFT.FT_BASEPIS, SFT.FT_ALIQPIS, SFT.FT_VALPIS ")
  Elseif ::getTributo() == "COFINS"    
    
    ::setSomaBase(" SUM(SFT.FT_BASECOF) AS BASETRIB ")
    ::setSomaValor(" SUM(SFT.FT_VALCOF) AS VALTRIB ")
    ::setWhereTributo(" AND SFT.FT_VALCOF > 0 ")

    ::setSelectItens("SFT.FT_ITEM, SFT.FT_PRODUTO, SFT.FT_QUANT, SFT.FT_CFOP, SFT.FT_CSTCOF, SFT.FT_BASECOF, SFT.FT_ALIQCOF, SFT.FT_VALCOF ")
  Elseif ::getTributo() == "IPI"    
    
    ::setSomaBase(" SUM(SFT.FT_BASEIPI) AS BASETRIB ")
    ::setSomaValor(" SUM(SFT.FT_VALIPI) AS VALTRIB ")
    ::setWhereTributo(" AND SFT.FT_VALIPI > 0 ")

    ::setSelectItens(" SFT.FT_ITEM, SFT.FT_PRODUTO, SFT.FT_QUANT, SFT.FT_CFOP, SFT.FT_CTIPI, SFT.FT_BASEIPI, SFT.FT_ALIQIPI, SFT.FT_VALIPI, SFT.FT_ISENIPI, SFT.FT_OUTRIPI ")
  EndIf

  ::setSelectTributo(::getSomaBase() +" , "+ ::getSomaValor())
Return .T.


/*/{Protheus.doc} CarregaQueryTributos
//filtros da pesquisa rápida e avançada
  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
  /*/
Method filter(oCoreDash) as character class DashboardCardsTaxes

Local nX as numeric
Local aFilter as array
Local nQtdFilter as numeric
Local cFilter as character
  
  aFilter := oCoreDash:GetApiFilter()
  nQtdFilter := Len(aFilter)
  If nQtdFilter > 0
    For nX     := 1 to nQtdFilter
      cFilter    += " AND " + aFilter[nX][1]
    Next
  EndIf

ASIZE( aFilter, 0 )

return cFilter

