#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include "backoffice.fiscal.dashboard.charts.difal.ch"

Namespace totvs.protheus.backoffice.fiscal
Using Namespace framework.types.json

Static aPrepared  := {}

//------------------------------------------------------------------------
/*/{Protheus.doc} DashboardchartsDifal
  API Gráfico de Difal para não contribuinte - Dashboard

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
  @return 	Json
/*/
//------------------------------------------------------------------------

Class DashboardchartsDifal 	//ICMS Difal operação de Saída por UF
	
    Public Method new() Constructor
    
	@GET(endpoint="/ProdFiscal/charts/difal/form"/*, description=STR0001*/)    // #"Carrega os campos que serão apresentados no formulário"
    Public Method form() 

    @POST(endpoint="/ProdFiscal/charts/difal/retdados"/*, description=STR0003*/) // # "Carrega os Itens Utilizados para Montagem do itens"	
    Public Method retDados() 

    @POST(endpoint="/ProdFiscal/charts/difal/itemsDetails"/*, description=STR0002*/) // # "Carrega os itens"	
    Public Method itemsDetails() 

	Private Method getTipoNf()                               as array
	Private Method getUf()                                   as array
	Private Method getCfop()                                 as array
	Private Method filterForm(oJson)                         as character
	Private Method querySf2(cSelect, cFilter)                as array
	Private Method querySd2(cSelect, cFilter)                as array
	Private Method retornaDados(oResponse, oCoreDash, oJson) as logical
	Private Method retTotNF(cUF,cFilter)                     as numeric
	Private Method filter(oCoreDash)                         as character
	Private Method jParams(jParams , aQueryString)           as array

EndClass


//-------------------------------------------------------------------
/*/{Protheus.doc} New()
Método construtor da classe

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method new() class DashboardchartsDifal	
return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} GetTipoNF()
Retorna Tipos de NF

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method getTipoNf() as array class DashboardchartsDifal

Local aTpNota := {} as array

	aAdd(aTpNota, "T - " + STR0029) //Todos
	aAdd(aTpNota, "N - " + STR0030) //Normal
	aAdd(aTpNota, "C - " + STR0031) // Compl.Preco/Quantidade
	aAdd(aTpNota, "I - " + STR0032) //Compl.ICMS
	aAdd(aTpNota, "P - " + STR0033) //Compl.IPI
	//aAdd(aTpNota, "D - " + STR0034) //Dev.Compras
	aAdd(aTpNota, "B - " + STR0035) //Utiliza Fornecedor

return aTpNota


//-------------------------------------------------------------------
/*/{Protheus.doc} GetUF()
Retorna UF

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method getUf() as array class DashboardchartsDifal

Local aUF     := {} as array
Local aUFX5   := {} as array
Local cEstado := "" as character
Local nX      := 0  as numeric

aUFX5 := FWGetSX5("12")
aAdd(aUF,STR0029) //Todos
For nX := 1 To Len(aUFX5)
	cEstado := RTrim(aUFX5[nX,3])
	//Obtem apenas estados nacionais
	IF cEstado <>'EX'
		aAdd(aUF,RTrim(aUFX5[nX,3])) //X5_CHAVE
	Endif
Next nX

// limpa array
ASIZE( aUFX5, 0 )

return aUF

//-------------------------------------------------------------------
/*/{Protheus.doc} GetCFOP()
Retorna CFOP

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method getCfop() as array class DashboardchartsDifal

Local aCFOP   := {} as array
Local aCFOPX5 := {} as array
Local cCFOP   := {} as character
Local nX      := 0  as numeric

aCFOPX5 := FWGetSX5("13")
aAdd(aCFOP,STR0029) //Todos
For nX := 1 To Len(aCFOPX5)
	cCFOP := RTrim(aCFOPX5[nX,3])
	//Lista apenas CFOPs interestaduais
	IF SUBSTR(cCFOP,1,1) == '6' .and. len(cCFOP) == 4
		aAdd(aCFOP,RTrim(aCFOPX5[nX,3])) //X5_CHAVE
	Endif
Next nX

// limpa array
ASIZE( aCFOPX5, 0 )

return aCFOP


//-------------------------------------------------------------------
/*/{Protheus.doc} filterForm
Retorna filtros do formulário com exceção da UF

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method filterForm(oJson as json) as character class DashboardchartsDifal

	Local dDtIni     as date
  	Local dDtFin     as date
	Local cTpNota    as character
	Local cFilter    as character
	Local cCfop      as character
	Local nLenTpNota as numeric
	Local nLenCfop   as numeric
	Local nx         as numeric
	Local cAnoIni    as character
	Local cMesIni    as character
	Local cDiaIni    as character
	Local cDtIni     as character
	Local cAnoFim    as character
	Local cMesFim    as character
	Local cDiaFim    as character
	Local cDtFim     as character
	
	//Data de
	dDtIni := firstday(dDataBase)		
	cDtIni := DToS(dDtIni)
	IF oJson:hasProperty('datainicio')
		cAnoIni := SubStr(oJson[ 'datainicio' ], 1, 4)
		cMesIni := SubStr(oJson[ 'datainicio' ], 6, 2)
		cDiaIni := SubStr(oJson[ 'datainicio' ], 9, 2)
		cDtIni  := cAnoIni + cMesIni + cDiaIni
	Endif
		
	If !Empty(cDtIni)		
		cFilter += " AND SD2.D2_EMISSAO  >= '" + cDtIni + "' "
	Endif
	

	//Data ate
	dDtFin := lastday(dDataBase)	
	cDtFim := DToS(dDtFin)
	IF oJson:hasProperty('datafim')
		cAnoFim := SubStr(oJson[ 'datafim' ], 1, 4)
		cMesFim := SubStr(oJson[ 'datafim' ], 6, 2)
		cDiaFim := SubStr(oJson[ 'datafim' ], 9, 2)
		cDtFim  := cAnoFim + cMesFim + cDiaFim
	Endif

	If !Empty(cDtFim)
		cFilter += " AND SD2.D2_EMISSAO  <= '" + cDtFim + "' "
	Endif
	

	//Tipos de nota
	nLenTpNota := Len(oJson['tpNota'])
	For nX := 1 to nLenTpNota
		cTpNota += "'"+SubStr(oJson['tpNota'][nX],1,1)+"'," //prepara para o IN na query
	Next nX

	If !Empty(cTpNota) .And. !('T' $ cTpNota)
		cTpNota := Substr(cTpNota,1,Len(cTpNota)-1) //tira a virgula
		cFilter += " AND SD2.D2_TIPO IN (  " + cTpNota + " ) "
	Endif	

	//CFOP	
	If oJson:GetJsonText('cfop') <> 'null' .And. Len(oJson["cfop"]) <> 0 .And. aScan(oJson["cfop"],STR0029) == 0 //Todos
		nLenCfop := Len(oJson['cfop'])
		For nX := 1 to nLenCfop
			cCfop += "'"+oJson['cfop'][nX]+"'," //prepara para o IN na query
		Next
		cCfop := Substr(cCfop,1,Len(cCfop)-1) //tira a virgula
		cFilter += " AND SD2.D2_CF IN (  " + cCfop + " ) "
	EndIf

Return cFilter

//-------------------------------------------------------------------
/*/{Protheus.doc} querySf2()
Query nível 1 dos Detalhes

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method querySf2(cSelect as character, cFilter as character) as array class DashboardchartsDifal
	
	Local cQuery  := "" as character
	Local cWhere  := "" as character
	Local cGroup  := ""	as character
	Local cCodIndDeng	:= XFUNCodSef({"D","I"},.t.) as character

	Default cSelect := " SF2.F2_DOC, SF2.F2_SERIE, SF2.F2_CLIENTE, SF2.F2_LOJA, SF2.F2_TIPO, SF2.F2_EMISSAO, (CASE WHEN SF2.F2_TIPO = 'B' THEN SA2.A2_NREDUZ ELSE SA1.A1_NREDUZ END) A1_NREDUZ, SD2.D2_TIPO, SD2.D2_EST, SUM(SD2.D2_DIFAL+SD2.D2_VFCPDIF) AS D2_DIFAL  "
	Default cFilter := ""	

	cQuery += " SELECT " + cSelect + " FROM " + RetSqlName("SF2") + " SF2 "
	
	cQuery += " LEFT OUTER JOIN " + RetSqlName("SA1") + " SA1 "
	cQuery += " ON SA1.A1_FILIAL = '" + xFilial("SA1") + "' AND SF2.F2_TIPO <> 'B' AND A1_COD = F2_CLIENTE AND A1_LOJA = F2_LOJA AND SA1.D_E_L_E_T_ = ' ' "
	
	cQuery += " LEFT OUTER JOIN " + RetSqlName("SA2") + " SA2 "
	cQuery += " ON SA2.A2_FILIAL = '" + xFilial("SA2") + "' AND SF2.F2_TIPO = 'B' AND A2_COD = F2_CLIENTE AND A2_LOJA = F2_LOJA AND SA2.D_E_L_E_T_ = ' ' "
	
	cQuery += " INNER JOIN " + RetSqlName("SD2") + " SD2 "
	cQuery += " ON SD2.D2_FILIAL = '"+ xFilial("SD2")+"' AND F2_DOC = D2_DOC AND F2_SERIE = D2_SERIE AND F2_CLIENTE = D2_CLIENTE AND F2_LOJA = D2_LOJA "	
	
	cQuery += "INNER JOIN "+RetSqlName("SF3")+" SF3 "
	cQuery += " ON (SF3.F3_FILIAL= '"+ xFilial("SF3")+"' AND SF3.F3_NFISCAL = SF2.F2_DOC AND SF3.F3_SERIE = SF2.F2_SERIE AND SF3.F3_CLIEFOR = SF2.F2_CLIENTE AND SF3.F3_LOJA = SF2.F2_LOJA AND SF3.F3_EMISSAO = SF2.F2_EMISSAO AND SF3.F3_CFO = SD2.D2_CF AND SF3.F3_ESPECIE= SF2.F2_ESPECIE AND SF3.F3_FORMUL = SF2.F2_FORMUL AND SF3.F3_CODRSEF NOT IN "+ cCodIndDeng +") " 
	

	cWhere := " SF2.F2_FILIAL = '" + xFilial("SF2") + "' AND "
	cWhere += "(SD2.D2_DIFAL > 0 OR (SD2.D2_BASEDES > 0 AND  SUBSTRING(SD2.D2_CF,1,1)>='5')) "		
	If !Empty(cFilter)
		cWhere += cFilter
	Endif

	cWhere += " AND SF2.D_E_L_E_T_ = ' ' "
	cWhere += " AND SF3.D_E_L_E_T_= ' ' "
	cWhere += " AND SD2.D_E_L_E_T_ = ' ' AND SD2.D2_TIPO <> 'D' "
	

	cGroup := " SF2.F2_DOC, SF2.F2_SERIE, SF2.F2_CLIENTE, SF2.F2_LOJA, SF2.F2_TIPO, SF2.F2_EMISSAO, SA1.A1_NREDUZ, SA2.A2_NREDUZ, SD2.D2_EST, SD2.D2_TIPO "

Return { cQuery, cWhere, cGroup }



//-------------------------------------------------------------------
/*/{Protheus.doc} QuerySD2
Query nível 2 dos Detalhes, retorna itens da nota

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method querySd2(cSelect as character, cFilter as character) as array class DashboardchartsDifal

	Local cQuery  := "" as character
	Local cWhere  := "" as character
	

	Default cSelect := " SD2.D2_ITEM, SD2.D2_COD, SB1.B1_DESC, SD2.D2_PRCVEN, SD2.D2_QUANT, SD2.D2_TOTAL, SD2.D2_DIFAL, SD2.D2_ICMSCOM, SD2.D2_VFCPDIF "
	Default cFilter := ""

	cQuery += " SELECT " + cSelect + " FROM " + RetSqlName("SD2") + " SD2 "
	cQuery += " INNER JOIN " + RetSqlName("SB1") + " SB1 "
	cQuery += " ON SB1.B1_FILIAL = '" + xFilial("SB1") + "' AND SB1.B1_COD = SD2.D2_COD "	

	cWhere := " SD2.D2_FILIAL = '" + xFilial("SD2") + "' "
	If !Empty(cFilter)
		cWhere += " AND " + cFilter
	Endif
	cWhere += " AND SD2.D_E_L_E_T_ = ' ' AND SD2.D2_TIPO <> 'D' "
	cWhere += " AND SB1.D_E_L_E_T_ = ' ' "


Return {cQuery, cWhere}

//-------------------------------------------------------------------
/*/{Protheus.doc} retornaDados
Retorna dados para montagem do gráfico

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
Method retornaDados(oResponse as json, oCoreDash as object, oJson as json) as logical class DashboardchartsDifal

Local aCab      := {}                        as array
Local aClrChart := oCoreDash:GetColorChart() as array //cor do gráfico
Local aData     := {}                        as array
Local aDataFim  := {}                        as array
Local cFilter   := ""                        as character
Local nLenUf    := 0                         as numeric
Local nX        := 0                         as numeric

cFilter := ::FilterForm(oJson) //pega filtros do formulário, com exceção da UF

If oJson:GetJsonText("level") == "null" .Or. Len(oJson["level"]) == 0
		nLenUf := Len(oJson['uf'])

	If (Ascan(oJson['uf'],STR0029) == 0) //Todos
		For nX := 1 to nLenUf
			aAdd(aCab,oJson['uf'][nX])
			aAdd(aData, ::RetTotNF(oJson['uf'][nX],cFilter) )
		Next
	Else
		aUfTot := ::GetUF()
		nLenUf := len(aUfTot)
		For nX := 2 to nLenUf
			aAdd(aCab,aUfTot[nX])
			aAdd(aData, ::RetTotNF(aUfTot[nX],cFilter) )
		Next
	EndIf

	For nX := 1 To Len(aData)
		oCoreDash:SetChartInfo( {aData[nX]}, aCab[nX] , /*cType*/, aClrChart[nX][3] /*"cColorBackground"*/ )
	Next

	aDataFim := {}
	aAdd(aDataFim, oCoreDash:SetChart({"Estados"},,/*lCurrency*/.T.,,))
EndIf
oResponse["items"] := aDataFim

Return .T.



//-------------------------------------------------------------------
/*/{Protheus.doc} RetTotNF
Retorna Total de NF, query principal

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33 
/*/
//-------------------------------------------------------------------
Method RetTotNF(cUF as character,cFilter as character) as numeric class DashboardchartsDifal

Local cMD5         := ""                         as character
Local cQuery       := ""                         as character
Local cTemp        := GetNextAlias()             as character
Local nPosPrepared := 0                          as numeric
Local nRet         := 0                          as numeric
Local oQrySd2      := Nil                        as object
Local cCodIndDeng  := XFUNCodSef({"D", "I"},.t.) as character

	Default cUF  := ""

	cQuery := " SELECT SUM(SD2.D2_DIFAL+SD2.D2_VFCPDIF) AS D2_DIFAL  FROM " + RetSqlName("SD2") + " SD2 "
	cQuery += " INNER JOIN " + RetSqlName("SF2") + " SF2 "
	cQuery += " ON SF2.F2_FILIAL = '"+ xFilial("SF2")+"' AND D2_DOC = F2_DOC AND D2_SERIE = F2_SERIE "
	cQuery += " AND D2_CLIENTE = F2_CLIENTE AND D2_LOJA = F2_LOJA "

	cQuery	+= "INNER JOIN "+RetSqlName("SF3")+" SF3 "
	cQuery	+= " ON (SF3.F3_FILIAL= '"+ xFilial("SF3")+"' AND SF3.F3_NFISCAL = SF2.F2_DOC AND SF3.F3_SERIE = SF2.F2_SERIE AND SF3.F3_CLIEFOR = SF2.F2_CLIENTE AND SF3.F3_LOJA = SF2.F2_LOJA AND SF3.F3_EMISSAO = SF2.F2_EMISSAO  AND SF3.F3_ESPECIE= SF2.F2_ESPECIE AND SF3.F3_FORMUL = SF2.F2_FORMUL AND SF3.F3_CODRSEF NOT IN "+ cCodIndDeng +") " 	
	
	cQuery += " WHERE "
	cQuery += " SD2.D2_FILIAL = '" + xFilial("SD2") + "' "
	If !Empty(cFilter)
		cQuery += cFilter
	Endif
	If !Empty(cUF)
		cQuery += " AND SD2.D2_EST = ? "		
	Endif
	cQuery += " AND SD2.D_E_L_E_T_ = ' ' AND SD2.D2_TIPO <> 'D' "
	cQuery += " AND SF2.D_E_L_E_T_ = ' ' "
	cQuery += " AND SF3.D_E_L_E_T_= ' ' "
	

	cMD5 := MD5(cQuery) 
	If (nPosPrepared := Ascan(aPrepared,{|x| x[2] == cMD5})) == 0
		cQuery	:= ChangeQuery(cQuery)
		oQrySd2 := FwExecStatement():New(cQuery)
		Aadd(aPrepared,{oQrySd2, cMD5})
		nPosPrepared := Len(aPrepared)
	EndIf		

	If !Empty(cUF)
		aPrepared[nPosPrepared][1]:SetString(1,cUF)
	Endif	
	
	aPrepared[nPosPrepared][1]:OpenAlias(cTemp)
	

	nRet :=	(cTemp)->D2_DIFAL

	(cTemp)->( DBCloseArea() )

Return nRet


//-------------------------------------------------------------------
/*/{Protheus.doc} GET form
Retorna os campos que serão apresentados no formulário.
O padrão do campo deve seguir o Dynamic Form do Portinari.

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33 
/*/
//-------------------------------------------------------------------
Method form() Class DashboardchartsDifal
    
	Local oCoreDash := CoreDash()  :New() as object
    Local oResponse := JsonObject():New() as json
	
	//Define o valor de uma chave do cabeçalho de resposta
	oRest:setKeyHeaderResponse('Content-Type','application/json')

	oCoreDash:SetPOForm(STR0020 , "charttype"       , 6   , STR0020 , .T., "string" , oCoreDash:SetPOCombo({{"bar",STR0021}}))	
	oCoreDash:SetPOForm(STR0022 , "tpNota"          , 6   , STR0025 , .T.,          , ::GetTipoNF()                           , .T.)
	oCoreDash:SetPOForm("" 		, "uf"              , 6   , STR0026 , .T.,          , ::GetUF()                               , .T.)	
	oCoreDash:SetPOForm(STR0037 , "datainicio"      , 6   , STR0023 , .F., "date")	
	oCoreDash:SetPOForm("" 		, "datafim"         , 6   , STR0024 , .F., "date")	
	oCoreDash:SetPOForm("" 		, "cfop"            , 6   , STR0027 , .F.,          , ::GetCFOP()                             , .T.)	
	

	oResponse  := oCoreDash:GetPOForm()
	
	oRest:setResponse( oResponse:ToJson() )	

Return


//-------------------------------------------------------------------
/*/{Protheus.doc} POST itemsDetails
Carrega os Itens Utilizados para Montagem do Painel

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
Method itemsDetails() Class DashboardchartsDifal

	Local aHeader       := {}                                 as array
	Local aItems        := {}                                 as array	
	Local aQueryString  := {}                                 as array
	Local aRet          := {}                                 as array
	Local cBody         := DecodeUtf8(oRest:GetBodyRequest()) as character
	Local cError        := STR0028                            as character
	Local cFilter       := ""                                 as character
	Local cMoeda        := SuperGetMV("MV_SIMB1",.F.,"BRL")   as character
	Local cSelect       := ""                                 as character
	Local cUFs          := ""                                 as character
	Local cWhere        := ""                                 as character	
	Local lRet          := .T.                                as logical	
	Local nLenUf        := 0                                  as numeric
	Local nX            := 0                                  as numeric
	Local oBody         := JsonObject():New()                 as json
	Local oCoreDash     := CoreDash()  :New()                 as object
	Local oJsonDD       := JsonObject():New()                 as json
	Local oJsonFilter   := JsonObject():New()                 as json
	
	//Define o valor de uma chave do cabeçalho de resposta
	oRest:setKeyHeaderResponse('Content-Type','application/json')

	If !Empty(cBody)
		oBody:FromJson(cBody)	

		if ( valtype(oBody["chartFilter"]) == 'J' )
            oJsonFilter := oBody["chartFilter"]
        endif

		If ValType(oBody["detailFilter"]) == "A"
			oJsonDD := oBody["detailFilter"]
		EndIf
	Endif
	
	//Responsável por retornar os parâmetros informados na requisição via URI (query param)
	::jParams(aQueryString)

	If oJsonFilter:GetJsonText("level") == "null" .Or. Len(oJsonFilter["level"]) == 0
		If Len(oJsonDD) == 0
			aHeader := {;
				{"document"    , STR0004 ,"link"     ,,.T.,.T. },; // # "Nota"
				{"series"	   , STR0005 ,           ,,.T.,.T. },; // # "Serie"
				{"client"      , STR0006 ,           ,,.T.,.T. },; // # "Cliente"
				{"store"       , STR0007 ,           ,,.T.,.T. },; // # "Loja"
				{"type"        , STR0036                       },; // # "Tipo"
				{"name"        , STR0008                       },; // # "Nome Cliente"				
				{"dateOfIssue" , STR0009 ,           ,,.T.,.T. },; // # "Emissão"
				{"UF"          , STR0026 ,           ,,.T.,.T. },; // # "UF"
				{"amountSD2"   , STR0010 , "currency",cMoeda   };  // # "Difal Destino"
				}

			aItems := {;
				{"document"    , "SF2.F2_DOC"     },;
				{"series"	   , "SF2.F2_SERIE"   },;
				{"client"      , "SF2.F2_CLIENTE" },;
				{"store"       , "SF2.F2_LOJA"    },;
				{"type"        , "SD2.D2_TIPO"    },;
				{"name"        , "SA1.A1_NREDUZ"  },;				
				{"dateOfIssue" , "SF2.F2_EMISSAO" },;
				{"UF"          , "SD2.D2_EST"     },;
				{"amountSD2"   , "SD2.D2_DIFAL"   };
				}

			cSelect :=" SF2.F2_DOC, SF2.F2_SERIE, SF2.F2_CLIENTE, SF2.F2_LOJA, SF2.F2_TIPO, SF2.F2_EMISSAO, (CASE WHEN SF2.F2_TIPO = 'B' THEN SA2.A2_NREDUZ ELSE SA1.A1_NREDUZ END) A1_NREDUZ, SD2.D2_TIPO, SD2.D2_EST, SUM(SD2.D2_DIFAL+SD2.D2_VFCPDIF) AS D2_DIFAL  "

			nLenUf := Len(oJsonFilter['uf'])
			For nX := 1 to nLenUf
				cUFs += "'"+oJsonFilter['uf'][nX]+"'," //prepara para o IN na query
			Next
			If !Empty(cUFs) .And. !(STR0029 $ cUFs) //Todos
				cUFs := Substr(cUFs,1,Len(cUFs)-1) //tira a virgula
				cFilter += " AND SD2.D2_EST IN (  " + cUFs + " ) " //filtro UFs, do formulário
			Endif

			cFilter += ::FilterForm(oJsonFilter) //pega filtros do formulário, com exceção da UF
			oCoreDash:SetFields(aItems) //filtros da pesquisa rápida e avançada
			oCoreDash:SetApiQstring(aQueryString) //filtros da pesquisa rápida e avançada
			
			//Adiciona filtros
			cFilter += ::filter(oCoreDash)
			
			aRet := ::QuerySf2(cSelect, cFilter)
			oCoreDash:SetQuery(aRet[1])
			oCoreDash:SetWhere(aRet[2])
			oCoreDash:SetGroupBy(aRet[3])

		Elseif Len(oJsonDD) == 1

			aHeader := {;
				{"item"     , STR0011 ,           ,      ,.T.,.T.  },; // # "Item"
				{"product"  , STR0012 ,           ,      ,.T.,.T.  },; // # "Cod. Produto"
				{"prodname" , STR0013                              },; // # "Desc. Produto"
				{"saleprice", STR0014 , "currency",cMoeda,.T.,.T.  },; // # "Preço de Venda"
				{"sale"     , STR0015 , "number"  ,"1.2-5",.T.,.T. },; // # "Quantidade"
				{"amountSD2", STR0016 , "currency",cMoeda          },; // # "Total da Nota"
				{"amountDIF", STR0017 , "currency",cMoeda          },; // # "Difal Destino"
				{"amountCOM", STR0018 , "currency",cMoeda          },; // # "Difal Origem"
				{"amountFCP", STR0019 , "currency",cMoeda          };  // # "FECP Destino"
				}

			aItems := {;
				{"item"      , "SD2.D2_ITEM"   },;
				{"product"	 , "SD2.D2_COD"    },;
				{"prodname"  , "SB1.B1_DESC"   },;
				{"saleprice" , "SD2.D2_PRCVEN" },;
				{"sale"      , "SD2.D2_QUANT"  },;
				{"amountSD2" , "SD2.D2_TOTAL"  },;
				{"amountDIF" , "SD2.D2_DIFAL"  },;
				{"amountCOM" , "SD2.D2_ICMSCOM"},;
				{"amountFCP" , "SD2.D2_VFCPDIF"};			
				}

			cSelect := " SD2.D2_ITEM, SD2.D2_COD, SB1.B1_DESC, SD2.D2_PRCVEN, SD2.D2_QUANT, SD2.D2_TOTAL, SD2.D2_DIFAL, SD2.D2_ICMSCOM, SD2.D2_VFCPDIF "
			cWhere := " SD2.D2_DOC = '" + oJsonDD[1]['document'] + "' AND SD2.D2_SERIE = '" + oJsonDD[1]['series'] + "' AND "
			cWhere += " SD2.D2_CLIENTE = '" + oJsonDD[1]['client'] + "' AND SD2.D2_LOJA = '" + oJsonDD[1]['store'] + "' AND "
			cWhere += " SD2.D2_EMISSAO = '" + dtos(ctod(oJsonDD[1]['dateOfIssue'])) + "' "
			oCoreDash:SetFields(aItems) //filtros da pesquisa rápida e avançada
			oCoreDash:SetApiQstring(aQueryString) //filtros da pesquisa rápida e avançada
			
			//filtros da pesquisa rápida e avançada
			cWhere += ::filter(oCoreDash)
			aRet := ::querySd2(cSelect, cWhere)

			oCoreDash:SetQuery(aRet[1])
			oCoreDash:SetWhere(aRet[2])

		Endif	
	EndIf

	lRet := oCoreDash:BuildJson()	

	//Retorno
	If lRet
		oCoreDash:SetPOHeader(aHeader)
		oRest:SetResponse( oCoreDash:ToObjectJson() )
	Else 
		cError := oCoreDash:GetJsonError()			
	EndIf

	//Limpa area de trabalho
	oCoreDash:Destroy()
	FreeObj(oJsonDD)
	FreeObj(oJsonFilter)
	FreeObj(oBody)

	aSize(aRet, 0)
	aSize(aItems, 0)
	aSize(aHeader, 0)

	//retorna erro
	If !lRet
		oRest:setFault( cError )		
		Return oRest:setStatusCode( 404 ) // O servidor não pode encontrar o recurso solicitado	
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} POST retDados
Retorna os dados do Gráfico

@author	Rafael Oliveira
@since	22/09/2022
@version  12.1.33
/*/
//-------------------------------------------------------------------
method retdados() class DashboardchartsDifal

Local oCoreDash := CoreDash()  :New() as object
Local oJson     := JsonObject():New() as json
Local oResponse := JsonObject():New() as json

	//Telemetria
	FWLsPutAsyncInfo("LS006",RetCodUsr(),'09',"FISCHARTSDIFAL")
	
	//Define o valor de uma chave do cabeçalho de resposta
	oRest:setKeyHeaderResponse('Content-Type','application/json')
		
	oJson:FromJson(DecodeUtf8(oRest:GetBodyRequest()))

	::retornaDados(@oResponse, oCoreDash, oJson)

	oRest:setResponse( oResponse:ToJson())

	FreeObj( oResponse )

	oCoreDash:Destroy()
	FreeObj( oCoreDash )

Return .T.


/*/{Protheus.doc} CarregaQueryTributos
//filtros da pesquisa rápida e avançada
  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
  /*/
Method filter(oCoreDash) as character class DashboardchartsDifal

Local nX as numeric
Local aFilter as array
Local nQtdFilter as numeric
Local cFilter as character
  
	aFilter := oCoreDash:GetApiFilter()
	nQtdFilter := Len(aFilter)
	If nQtdFilter > 0		
		For nX     := 1 to nQtdFilter
			cFilter    += " AND " + aFilter[nX][1]
		Next		
	EndIf

ASIZE( aFilter, 0 )

return cFilter


/*/{Protheus.doc} CarregaQueryTributos
//Responsável por retornar os parâmetros informados na requisição via URI (query param)

  @author	Rafael Oliveira
  @since	22/09/2022
  @version  12.1.33
  /*/
Method jParams(aQueryString) as array class DashboardchartsDifal
Local jParams as json
Local aPropriedades as ARRAY
local nX as numeric


	//Responsável por retornar os parâmetros informados na requisição via URI (query param)
	jParams := oRest:getQueryRequest() 
	IF (valtype(jParams) == 'J')
		aPropriedades := jParams:GetNames( )//Recupera propriedades
		For nX := 1 to len(aPropriedades)			
			if UPPER(aPropriedades[nX]) $ "PAGE|PAGESIZE"
				Aadd(aQueryString,{UPPER(aPropriedades[nX]),VAL(jParams[aPropriedades[nX]])})
			else
				Aadd(aQueryString,{UPPER(aPropriedades[nX]),UPPER(jParams[aPropriedades[nX]])})
			Endif
		NEXT
	Endif

return aQueryString
