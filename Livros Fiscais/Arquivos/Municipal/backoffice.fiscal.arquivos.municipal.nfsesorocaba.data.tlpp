#include "TOTVS.CH"
#include 'tlpp-core.th'
#include 'tlpp-object.th'

namespace backoffice.fiscal.arquivos.municipal.nfsesorocaba.data
using namespace backoffice.fiscal.arquivos.municipal.nfsesorocaba.domain
using namespace backoffice.fiscal.arquivos.utils

/*/{Protheus.doc} NFSESorocabaData
Classe responsável por obter os dados para preenchimento do Layout de Importação de Serviços 
Tomados de Prestadores de Outro Município - Sorocaba/SP
@type class
@version 12.1.2210
@author allef.souza
@since 24/03/2023
/*/
Class NFSESorocabaData

    Data cCompetencia as Character
    Data aMV_CRTMDNT as Array

    Public Method getRegHeader() as Object
    Public Method getRegTrailer() as Array
    Public Method new() Constructor

EndClass

/*/{Protheus.doc} NFSESorocabaData::new
Retorna uma nova instância de NFSESorocabaData
@type method
@version 12.1.2210
@author allef.souza
@since 24/03/2023
@param cCompetencia, character, indica mês e ano para filtragem dos dados
@return object, uma nova instância de NFSESorocabaData
/*/
Method new(cCompetencia as Character) Class NFSESorocabaData
    ::cCompetencia := cCompetencia
    ::aMV_CRTMDNT  := &(GetNewPar('MV_CRTMDNT', '{}'))
Return Self

/*/{Protheus.doc} NFSESorocabaData::getRegHeader() as Object
Retorna o registro do tipo T para a filial corrente
@type method
@version 12.1.2210
@author allef.souza
@since 24/03/2023
@return object, retorna um objeto do tipo backoffice.fiscal.arquivos.municipal.nfsesorocaba.domain.RegHeader
/*/
Method getRegHeader() as Object Class NFSESorocabaData

    Local aSM0Data := {} as Array
    Local oRegHeader as Object

	aSM0Data := FWSM0Util():GetSM0Data(,,{ "M0_INSCM" })
    oRegHeader := RegHeader():new("H", aSM0Data[1][2])

    aSize(aSM0Data, 0)

Return oRegHeader

/*/{Protheus.doc} NFSESorocabaData::getRegTrailer() as Array
Retorna uma coleção de registros do tipo H para a competência informada
@type method
@version 12.1.2210
@author allef.souza
@since 24/03/2023
@return array, retorna uma coleção de registros do tipo backoffice.fiscal.arquivos.municipal.nfsesorocaba.domain.RegTrailer
/*/
Method getRegTrailer() as Array Class NFSESorocabaData

    Local cSelectSF1 := "" as Character
    Local cSelectSF3 := "" as Character
    Local cSelectSA2 := "" as Character
    Local cSelectSF4 := "" as Character
    Local cSelectSD1 := "" as Character
    Local cSelectSB1 := "" as Character
    Local cQuery := "" as Character
    Local aReg := {} as Array
    Local oRegTrailerBuilder as Object
    Local cAlias := GetNextAlias() as Character
    Local dCompetencia := FwDateTimeToLocal(SubStr(::cCompetencia, 4) + SubStr(::cCompetencia, 1, 2))[1] as Date
    Local oFISUtil := FISUtil():getInstance() as Object
    Local jEndereco as Json
    Local cCodigoIBGE as Character

    cSelectSB1 += "SB1.B1_DESC, "

    cSelectSD1 += "SD1.D1_DESCICM, "

    cSelectSF1 += "SF1.F1_VALPIS, SF1.F1_VALCOFI, SF1.F1_VALIRF, SF1.F1_INSS, SF1.F1_VALCSLL, SF1.F1_DESCONT,"
    cSelectSF1 += "CASE "
    cSelectSF1 += " WHEN SF4.F4_DESCOND = '2' THEN SF1.F1_DESCONT ELSE 0 END DESCONTO_INCONDICIONADO,"
    cSelectSF1 += "CASE "
    cSelectSF1 += " WHEN SF4.F4_DESCOND <> '2' THEN SF1.F1_DESCONT ELSE 0 END DESCONTO_CONDICIONADO,"

    cSelectSF3 += "SF3.F3_ENTRADA, SF3.F3_NFISCAL, SF3.F3_SERIE, SF3.F3_ALIQICM F3_ALIQISS, SF3.F3_ESPECIE,"
    cSelectSF3 += "SF3.F3_BASEICM F3_BASEISS, SF3.F3_VALICM F3_VALISS, " 
    cSelectSF3 += "SF3.F3_CNAE, SF3.F3_CODISS, SF3.F3_DTCANC, SF3.F3_ISENICM, SF3.F3_OUTRICM, SF3.F3_VALCONT, "

    cSelectSF4 += " SF4.F4_MTRTBH, SF4.F4_DESCOND,"
    cSelectSF4 += "CASE"
    cSelectSF4 += " WHEN SA2.A2_TIPO = 'X' THEN '4'"
    cSelectSF4 += " WHEN SF4.F4_ISSST = '4' THEN '5'"
    cSelectSF4 += " WHEN SF4.F4_ISSST = '5' THEN '6'"
    cSelectSF4 += " WHEN SF4.F4_ISSST = '6' THEN '7'"
    cSelectSF4 += " ELSE SF4.F4_ISSST END EXIGIBILIDADE_ISS,"    

    cSelectSA2 := "SA2.A2_CGC, SA2.A2_NOME, SA2.A2_COD_MUN, SA2.A2_CEP, SA2.A2_PFISICA,"
    cSelectSA2 += "SA2.A2_END, SA2.A2_BAIRRO, SA2.A2_COMPLEM, SA2.A2_EST, SA2.A2_CODPAIS, SA2.A2_MUN, SA2.A2_RECISS, "
    cSelectSA2 += "CASE WHEN SA2.A2_TPJ = '3' THEN 'S' ELSE 'N' END MEI, "
    cSelectSA2 += "CASE WHEN SA2.A2_SIMPNAC = '1' THEN 'S' ELSE 'N' END A2_SIMPNAC, "
    cSelectSA2 += "CASE WHEN SA2.A2_TIPO = 'X' THEN '2' ELSE '1' END A2_TIPO, "
    cSelectSA2 += "CASE WHEN SA2.A2_COD_MUN = '3552205' THEN 'S' ELSE 'N' END PRESTADOR_ESTABELECIDO_MUNICIPIO "

    cQuery := "SELECT "
    cQuery += cSelectSD1
    cQuery += cSelectSB1
    cQuery += cSelectSF1
    cQuery += cSelectSF3
    cQuery += cSelectSF4
    cQuery += cSelectSA2
    cQuery += " FROM "
    cQuery += RetSqlName("SF3") + " SF3 "
    cQuery += " LEFT JOIN "
    cQuery += RetSqlName("SA2") + " SA2 "
    cQuery += " ON SA2.A2_FILIAL = " + valToSql(xFilial("SA2"))
    cQuery += " AND SA2.A2_COD = SF3.F3_CLIEFOR "
    cQuery += " AND SA2.A2_LOJA = SF3.F3_LOJA "
    cQuery += " AND SA2.D_E_L_E_T_ = ' ' "
    cQuery += " LEFT JOIN "
    cQuery += RetSqlName("SF1") + " SF1 "
    cQuery += " ON SF1.F1_FILIAL = SF3.F3_FILIAL "
    cQuery += " AND SF1.F1_DOC = SF3.F3_NFISCAL "
    cQuery += " AND SF1.F1_SERIE = SF3.F3_SERIE "
    cQuery += " AND SF1.D_E_L_E_T_ = ' '"
    cQuery += " LEFT JOIN "
    cQuery += RetSqlName("SD1") + " SD1 "    
    cQuery += " ON SD1.D1_FILIAL = " + valToSql(xFilial("SD1"))
    cQuery += " AND SD1.D1_DOC = SF3.F3_NFISCAL"
    cQuery += " AND SD1.D1_SERIE = SF3.F3_SERIE"
    cQuery += " AND SD1.D1_FORNECE = SF3.F3_CLIEFOR"
    cQuery += " AND SD1.D1_LOJA = SF3.F3_LOJA"
    cQuery += " AND SD1.D_E_L_E_T_ = ' '"
    cQuery += " LEFT JOIN "
    cQuery += RetSqlName("SF4") + " SF4 "
    cQuery += " ON SF4.F4_FILIAL = " + valToSql(xFilial("SF4"))
    cQuery += " AND SF4.F4_CODIGO = SD1.D1_TES"
    cQuery += " AND SF4.D_E_L_E_T_ = ' '"
    cQuery += " LEFT JOIN "
    cQuery += RetSqlName("SB1") + " SB1 "
    cQuery += " ON SB1.B1_FILIAL = " + valToSql(xFilial("SB1"))
    cQuery += " AND SB1.B1_COD = SD1.D1_COD"
    cQuery += " AND SB1.D_E_L_E_T_ = ' '"
    cQuery += " WHERE"
    cQuery += " SF3.F3_FILIAL = " + valToSql(xFilial("SF3"))
    cQuery += " AND SF3.F3_TIPO = 'S'"
    cQuery += " AND SF3.F3_ENTRADA BETWEEN " 
    cQuery += valToSql(dtos(FirstDate(dCompetencia))) 
    cQuery += " AND " + valToSql(dtos(LastDate(dCompetencia)))
    cQuery += " AND SF3.F3_CFO < '5'"
    cQuery += " AND SF3.F3_TIPO NOT IN ('D','B')"
    cQuery += " AND SF3.F3_RECISS <> ''"
    cQuery += " AND SF3.F3_TIPO = 'S'"
    cQuery += " AND SF3.F3_CODISS <> ''"
    cQuery += " AND SF3.D_E_L_E_T_ = ' '"

    DBUseArea(.T., "TOPCONN", TCGenQry2(NIL, NIL, cQuery, {}), cAlias, .F., .T.)

    Do While !(cAlias)->(Eof())

        oFISUtil:splitEndereco(@jEndereco, (cAlias)->A2_END)
        cCodigoIBGE := oFISUtil:getCodigoIBGE((cAlias)->A2_EST, (cAlias)->A2_COD_MUN)

        oRegTrailerBuilder := RegTrailerBuilder():new()
        oRegTrailerBuilder;
            :setDataEmissao(sToD((cAlias)->F3_ENTRADA));
            :setCompetencia(::cCompetencia);
            :setNumDocFiscal((cAlias)->F3_NFISCAL);
            :setSerieDocFiscal((cAlias)->F3_SERIE);
            :setModeloDocFiscal((cAlias)->F3_ESPECIE, ::aMV_CRTMDNT);
            :setTipoPrestador((cAlias)->A2_TIPO);
            :setCGCPrestador((cAlias)->A2_CGC);
            :setDocIdPrestadorEstrangeiro((cAlias)->A2_PFISICA);
            :setRazaoSocialPrestador((cAlias)->A2_NOME);
            :setCodMunicipioPrestador(cCodigoIBGE);
            :setPrestadorOptanteSimples((cAlias)->A2_SIMPNAC);
            :setPrestadorMEI((cAlias)->MEI);
            :setPrestadorEstabelecidoMunicipio((cAlias)->PRESTADOR_ESTABELECIDO_MUNICIPIO);
            :setCEPPrestador((cAlias)->A2_CEP);
            :setTipoLogradouroPrestador(Iif(ValType(jEndereco) == 'J', jEndereco["TIPO_LOGRADOURO"], ""));
            :setNomeLogradouroPrestador(Iif(ValType(jEndereco) == 'J', jEndereco["LOGRADOURO"], ""));
            :setNumeroLogradouroPrestador(Iif(ValType(jEndereco) == 'J', jEndereco["NUMERO"], ""));
            :setComplementoEnderecoPrestador((cAlias)->A2_COMPLEM);
            :setBairroPrestador((cAlias)->A2_BAIRRO);
            :setUFPrestador((cAlias)->A2_EST);
            :setPaisPrestador(Substr((cAlias)->A2_CODPAIS,2,4));	
            :setCidadePrestador((cAlias)->A2_MUN);
            :setCodServicoPrestado((cAlias)->F3_CODISS);
            :setCNAE((cAlias)->F3_CNAE);
            :setCodMunicipioLocalPrestacaoServico(cCodigoIBGE);
            :setUFPrestacaoServico((cAlias)->A2_EST);
            :setMotivoNaoRetencao((cAlias)->F4_MTRTBH);
            :setExigibilidadeISS((cAlias)->EXIGIBILIDADE_ISS);
            :setTipoRecolhimentoImposto(Iif((cAlias)->A2_RECISS == "S", "RPP", ""));
            :setAliquotaISS((cAlias)->F3_ALIQISS);
            :setValorServicoNF((cAlias)->F3_VALCONT);
            :setValorDeducoes((cAlias)->D1_DESCICM);
            :setDescontoIncondicionado((cAlias)->DESCONTO_INCONDICIONADO);
            :setDescontoCondicionado((cAlias)->DESCONTO_CONDICIONADO);
            :setBaseCalculo((cAlias)->F3_BASEISS);
            :setValorPIS((cAlias)->F1_VALPIS);
            :setValorCOFINS((cAlias)->F1_VALCOFI);
            :setValorINSS((cAlias)->F1_INSS);
            :setValorIR((cAlias)->F1_VALIRF);
            :setValorCSLL((cAlias)->F1_VALCSLL);
            :setValorISS((cAlias)->F3_VALISS);
            :setDiscriminacaoServicos((cAlias)->B1_DESC);
            :setOutrasRetencoes(0);
            :setCodObra(" ")
        aAdd(aReg, oRegTrailerBuilder:build())

        oRegTrailerBuilder := Nil
        jEndereco := Nil

		(cAlias)->(DbSkip())
	EndDo

	(cAlias)->(DbCloseArea())
    FreeObj(oRegTrailerBuilder)
    FreeObj(oFISUtil)

Return aReg
