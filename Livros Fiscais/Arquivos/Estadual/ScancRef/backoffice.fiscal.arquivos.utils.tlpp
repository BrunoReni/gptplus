#include 'tlpp-core.th'
#include 'tlpp-object.th'

namespace backoffice.fiscal.arquivos.utils

Static oAnnotationHelper as Object
Static oSX5Helper as Object
Static oFISUtil as Object

/*/{Protheus.doc} AnnotationHelper
Classe no padrão Singleton que fornece um objeto e métodos estáticos para manipulação de annotations
@type class
@version 12.1.2210
@author allef.souza
@since 17/02/2023
/*/
Class AnnotationHelper

    Static Method getDataAnnotation(oObj, cAnnotationName, cKey) as Object
    Static Method getInstance() as Object
    Protected Method new() Constructor

EndClass

Method new() Class AnnotationHelper
Return Self

/*/{Protheus.doc} AnnotationHelper::getDataAnnotation(oObj, cAnnotationName, cKey) as Object
Organiza as annotations de um objeto em um objeto HashMap de acordo com a chave de pesquisa informada
@type method
@param oObj, Object, o objeto para o qual se quer obter os dados de annotation
@param cAnnotationName, Character, o nome da annotation a ser obtida
@param cKey, Character, o índice de pesquisa para o HashMap (deve ser uma propriedade da annotation)
@version 12.1.2210
@author allef.souza
@since 17/02/2023
@return Object, retorna um objeto HashMap 
/*/
Method getDataAnnotation(oObj, cAnnotationName, cKey) as Object Class AnnotationHelper

    Local aFields := Reflection.getAttributesByAnnotation(oObj, cAnnotationName) as Array
    Local nI
    Local cAttributeName
    Local cAttributeType
    Local jRet as Json
    Local oRet := HMNew()
    
    For nI := 1 To Len(aFields)

        cAttributeType := aFields[nI]:cAttributeType
        cAttributeName := aFields[nI]:cAttributeName
        
        if (Reflection.isAnnotationDataPresent(oObj, cAttributeName, cAnnotationName))
            jRet := Reflection.getDataAnnotation(oObj, cAttributeName, cAnnotationName)
            jRet["cAttributeType"] := cAttributeType
            jRet["cAttributeName"] := cAttributeName
            oRet:Set(jRet[cKey], jRet)
        endif

    Next nI

    aSize(aFields, 0)

Return oRet

/*/{Protheus.doc} AnnotationHelper::getInstance() as Object
Cria uma instância (se não houver) e a fornece
@type method
@version 12.1.2210
@author allef.souza
@since 17/02/2023
@return Object, retorna um objeto oAnnotationHelper
/*/
Method getInstance() as Object Class AnnotationHelper

    If oAnnotationHelper == Nil
        oAnnotationHelper := AnnotationHelper():new()
    EndIf

Return oAnnotationHelper

/*/{Protheus.doc} FISUtil
Classe no padrão Singleton que fornece diversos métodos utilitários
@type class
@version 12.1.2210
@author allef.souza
@since 24/03/2023
/*/
Class FISUtil

    Static Method splitEndereco() as Json
    Static Method getCodigoIBGE() as Character
    Static Method getInstance() as Object
    Protected Method new() Constructor

EndClass

Method new() Class FISUtil
Return Self

/*/{Protheus.doc} FISUtil::getInstance() as Object
Cria uma instância (se não houver) e a fornece
@type method
@version 12.1.2210
@author allef.souza
@since 24/03/2023
@return object, retorna um objeto do tipo backoffice.fiscal.arquivos.utils.FISUtil
/*/
Method getInstance() as Object Class FISUtil

    If oFISUtil == Nil
        oFISUtil := FISUtil():new()
    EndIf

Return oFISUtil

/*/{Protheus.doc} FISUtil::splitLogradouro(cEndereco as Character) as Json
Separa o tipo de logradouro de um endereço baseado no primeiro espaço encontrado no paramêtro cEndereco que foi fornecido
@type method
@version 12.1.2210
@author allef.souza
@since 24/03/2023
@param jReturn, json, obrigatório, passado por referência, armazenará o resultado da função
@param cEndereco, character, uma string contendo um endereço
@return json, retorna um objeto json com as chaves TIPO_LOGRADOURO, LOGRADOURO e NUMERO
/*/
Method splitEndereco(jReturn as Json, cEndereco as Character) as Json Class FISUtil

    Local cTipoLogradouro, cLogradouro, cNumero as Character
    Local nTamanhoTotal, nIndexSeparadorLogradouro, nIndexSeparadorEndereco as Integer
    Local jReturn as Json

    If (Len(AllTrim(cEndereco))) > 0

        jReturn := JsonObject():New()
        cEndereco := LTrim(cEndereco)
        nTamanhoTotal := Len(cEndereco)
        nIndexSeparadorLogradouro := At(" ", cEndereco)
        nIndexSeparadorEndereco := At(",", cEndereco)

        cTipoLogradouro := SubStr(cEndereco, 1, nIndexSeparadorLogradouro-1)

        If nIndexSeparadorEndereco > 0
            cLogradouro := SubStr(cEndereco, nIndexSeparadorLogradouro+1, nIndexSeparadorEndereco-nIndexSeparadorLogradouro-1)
            cNumero := AllTrim(SubStr(cEndereco, nIndexSeparadorEndereco+1))
        Else
            cLogradouro := SubStr(cEndereco, nIndexSeparadorLogradouro+1)
        EndIf

        jReturn["TIPO_LOGRADOURO"] := cTipoLogradouro
        jReturn["LOGRADOURO"] := cLogradouro
        jReturn["NUMERO"] := cNumero

    EndIf    

Return jReturn

/*/{Protheus.doc} FISUtil::getCodigoIBGE(cUF as Character, cCodigoMunicipio as Character) as Character
Retorna o código do IBGE de uma unidade federativa ou munícipio
@type method
@version 12.1.2210
@author allef.souza
@since 24/03/2023
@param cUF, character, a sigla de uma unidade federativa do Brasil
@param [cCodigoMunicipio], character, opcional, um código de munícipio sem o prefixo da UF, tal qual como armazenado na SA2
@return character, se informado um código de múnicipio retornará o código da UF concatenado com este, caso contrário retornará
apenas o código da UF
/*/
Method getCodigoIBGE(cUF as Character, cCodigoMunicipio as Character) as Character Class FISUtil

    Local cReturn := "" as Character
    Default cCodigoMunicipio := ""

    Do Case
        Case cUf == "RO"
            cReturn := "11" + cCodigoMunicipio
        Case cUf == "AC"
            cReturn := "12" + cCodigoMunicipio
        Case cUf == "AM"
            cReturn := "13" + cCodigoMunicipio
        Case cUf == "RR"
            cReturn := "14" + cCodigoMunicipio
        Case cUf == "PA"
            cReturn := "15" + cCodigoMunicipio
        Case cUf == "AP"
            cReturn := "16" + cCodigoMunicipio
        Case cUf == "TO"
            cReturn := "17" + cCodigoMunicipio
        Case cUf == "MA"
            cReturn := "21" + cCodigoMunicipio
        Case cUf == "PI"
            cReturn := "22" + cCodigoMunicipio
        Case cUf == "CE"
            cReturn := "23" + cCodigoMunicipio
        Case cUf == "RN"
            cReturn := "24" + cCodigoMunicipio
        Case cUf == "PB"
            cReturn := "25" + cCodigoMunicipio
        Case cUf == "PE"
            cReturn := "26" + cCodigoMunicipio
        Case cUf == "AL"
            cReturn := "27" + cCodigoMunicipio
        Case cUf == "SE"
            cReturn := "28" + cCodigoMunicipio
        Case cUf == "BA"
            cReturn := "29" + cCodigoMunicipio
        Case cUf == "MG"
            cReturn := "31" + cCodigoMunicipio
        Case cUf == "ES"
            cReturn := "32" + cCodigoMunicipio
        Case cUf == "RJ"
            cReturn := "33" + cCodigoMunicipio
        Case cUf == "SP"
            cReturn := "35" + cCodigoMunicipio
        Case cUf == "PR"
            cReturn := "41" + cCodigoMunicipio
        Case cUf == "SC"
            cReturn := "42" + cCodigoMunicipio
        Case cUf == "RS"
            cReturn := "43" + cCodigoMunicipio
        Case cUf == "MS"
            cReturn := "50" + cCodigoMunicipio
        Case cUf == "MT"
            cReturn := "51" + cCodigoMunicipio
        Case cUf == "GO"
            cReturn := "52" + cCodigoMunicipio
        Case cUf == "DF"
            cReturn := "53" + cCodigoMunicipio
        OtherWise
            cReturn := ""
    EndCase   

Return cReturn



