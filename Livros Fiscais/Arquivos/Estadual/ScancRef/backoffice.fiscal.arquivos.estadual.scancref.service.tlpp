#include 'tlpp-core.th'
#include 'tlpp-object.th'

namespace backoffice.fiscal.arquivos.estadual.scancref.service
using namespace backoffice.fiscal.arquivos.estadual.scancref.model
using namespace backoffice.fiscal.arquivos.utils

/*/{Protheus.doc} ScancRefService
Classe responsável por obter os dados dos registros do SCANC Refinaria
@type class
@version 12.1.2210
@author allef.souza
@since 14/02/2023
/*/
Class ScancRefService

	Data cIdGrupo as Character
	Data cMesAno as Date
	Data cUfDest as Character
	Data _cFilial as Character
	Data cQueryCJO as Character
	Data cQuerySFT as Character

	Public Method new() as Object
	Public Method getScancRef() as Object
	Private Method getRegA6HD() as Object
	Private Method getRegA6Q3() as Array
	Private Method getReg() as Array
	Private Method getQueryCJO() as Character
	Private Method getSM0Data() as Json
	Private Method getQuerySFT() as Character

EndClass

/*/{Protheus.doc} ScancRefService::new(cIdGrupo, cMesAno, cUfDest, _cFilial) as Object
Cria uma instância de ScancRefService
@type method
@param cIdGrupo, Character, identificador para cada filial conforme preconiza layout do arquivo 
@param cMesAno, Character, mês e ano de referência no formato MMAAAA para geração do arquivo
@param cUfDest, Character, UF para a qual o arquivo será enviado
@param _cFilial, Character, filial a ser processada
@version 12.1.2210
@author allef.souza
@since 01/03/2023
@return object, retorna uma instância de ScancRefService
/*/
Method new(cIdGrupo, cMesAno, cUfDest, _cFilial) as Object Class ScancRefService
	::cIdGrupo 	 := cIdGrupo
	::cMesAno 	 := cMesAno
	::cUfDest 	 := cUfDest
	::_cFilial 	 := _cFilial
	::cQueryCJO := ::getQueryCJO()
	::cQuerySFT := ::getQuerySFT()
Return Self

/*/{Protheus.doc} ScancRefService::getScancRef() as Object
Cria um objeto do tipo ScancRef conforme parâmetros definidos via construtor
@type method
@version 12.1.2210
@author allef.souza
@since 01/03/2023
@return object, um objeto do tipo ScancRef
/*/
Method getScancRef() as Object Class ScancRefService

	Local oScancRef := ScancRef():New() as Object
	Local oRegA6Q1 := RegA6Q1():New(::cIdGrupo) as Object
	Local oRegA6Q2 := RegA6Q2():New(::cIdGrupo) as Object
	Local nVlrIcms as Numeric

	oScancRef:setRegA6HD(::getRegA6HD())

    oScancRef:setRegA6Q3(::getRegA6Q3(@nVlrIcms))
	oRegA6Q1:setVlr111(nVlrIcms)

    oScancRef:setRegA6Q41(::getReg('A6', 'Q4', '1', @nVlrIcms))
	oRegA6Q1:setVlr112(nVlrIcms)

    oScancRef:setRegA6Q42(::getReg('A6', 'Q4', '2', @nVlrIcms))
	oRegA6Q2:setVlr21(nVlrIcms)

    oScancRef:setRegA6Q43(::getReg('A6', 'Q4', '3', @nVlrIcms))
	oRegA6Q1:setVlr113(nVlrIcms)

    oScancRef:setRegA6Q5(::getReg('A6', 'Q5',, @nVlrIcms))
	oRegA6Q2:setVlr22(nVlrIcms)

    oScancRef:setRegA6Q61(::getReg('A6', 'Q6', '1', @nVlrIcms))
	oRegA6Q1:setVlr114(nVlrIcms)

    oScancRef:setRegA6Q62(::getReg('A6', 'Q6', '2', @nVlrIcms))
	oRegA6Q2:setVlr23(nVlrIcms)

    oScancRef:setRegA6Q63(::getReg('A6', 'Q6', '3', @nVlrIcms))
	oRegA6Q1:setVlr115(nVlrIcms)

    oScancRef:setRegA6Q71(::getReg('A6', 'Q7', '1', @nVlrIcms))
	oRegA6Q1:setVlr121(nVlrIcms)

    oScancRef:setRegA6Q72(::getReg('A6', 'Q7', '2', @nVlrIcms))
	oRegA6Q1:setVlr125(nVlrIcms)

    oScancRef:setRegA6Q73(::getReg('A6', 'Q7', '3', @nVlrIcms))
	oRegA6Q1:setVlr122(nVlrIcms)

    oScancRef:setRegA6Q8(::getReg('A6', 'Q8',, @nVlrIcms))
	oRegA6Q1:setVlr126(nVlrIcms)

    oScancRef:setRegA6Q91(::getReg('A6', 'Q9', '1', @nVlrIcms))
	oRegA6Q1:setVlr123(nVlrIcms)

    oScancRef:setRegA6Q92(::getReg('A6', 'Q9', '2', @nVlrIcms))
	oRegA6Q1:setVlr127(nVlrIcms)

    oScancRef:setRegA6Q93(::getReg('A6', 'Q9', '3', @nVlrIcms))
	oRegA6Q1:setVlr124(nVlrIcms)

    oScancRef:setRegA6Q10(::getReg('A6', 'Q10',, @nVlrIcms))
	oRegA6Q1:setVlr129(nVlrIcms)

    oScancRef:setRegA6Q11(::getReg('A6', 'Q11',, @nVlrIcms))
	oRegA6Q1:setVlr1210(nVlrIcms)

    oScancRef:setRegA6Q12(::getReg('A6', 'Q12',, @nVlrIcms))
	oRegA6Q1:setVlr1211(nVlrIcms)

    oScancRef:setRegA6Q13(::getReg('A6', 'Q13',, @nVlrIcms))
	oRegA6Q1:setVlr1212(nVlrIcms)

    oScancRef:setRegA6Q14(::getReg('A6', 'Q14',, @nVlrIcms))
	oRegA6Q1:setVlr131(nVlrIcms)

    oScancRef:setRegA6Q15(::getReg('A6', 'Q15',, @nVlrIcms))
	oRegA6Q1:setVlr132(nVlrIcms)

	oRegA6Q1:calculate()
    oScancRef:setRegA6Q1(oRegA6Q1)
	oRegA6Q2:calculate()
    oScancRef:setRegA6Q2(oRegA6Q2)

	oRegA6Q1 := Nil
	FreeObj(oRegA6Q1)
	oRegA6Q2 := Nil
	FreeObj(oRegA6Q2)

Return oScancRef

/*/{Protheus.doc} ScancRefService::getRegA6HD(cIdGrupo, cMesAno, cUfDest, _cFilial) as Object
Método responsável por fornecer o registro de cabeçalho do SCANC Refinaria
@type method
@version 12.1.2210
@author allef.souza
@since 14/02/2023
@return Object, retorna um objeto do tipo RegA6HD
/*/
Method getRegA6HD() as Object Class ScancRefService

	Local oRegA6HD := RegA6HD():new() as Object
	Local jSM0Data := ::getSM0Data(cEmpAnt, ::_cFilial) as Json

	oRegA6HD:setIdGrupo(::cIdGrupo)
	oRegA6HD:setMesAno(::cMesAno)
	oRegA6HD:setUfDest(::cUfDest)
	oRegA6HD:setCnpj(jSM0Data["M0_CGC"])
	oRegA6HD:setIe(jSM0Data["M0_INSC"])
	oRegA6HD:setRazSocial(jSM0Data["M0_NOMECOM"])
	oRegA6HD:setEndereco(jSM0Data["M0_ENDENT"])
	oRegA6HD:setComplemento(jSM0Data["M0_COMPENT"])
	oRegA6HD:setBairro(jSM0Data["M0_BAIRENT"])
	oRegA6HD:setMunicipio(jSM0Data["M0_CIDENT"])
	oRegA6HD:setCep(jSM0Data["M0_CEPENT"])
	oRegA6HD:setUf(jSM0Data["M0_ESTENT"])
	oRegA6HD:setLocal(jSM0Data["M0_CIDENT"])

	jSM0Data := Nil

Return oRegA6HD

/*/{Protheus.doc} ScancRefService::getRegA6Q3() as Array
Método responsável por fornecer o QUADRO 3 - OPERAÇÕES REALIZADAS PELO EMITENTE DO RELATÓRIO
@type method
@param nVlrIcms, numeric, parâmetro passado por referência que permite acumular o valor de ICMS dos quadros obtidos
para posterior aproveitamento nos quadros resumo (Quadros 1 e 2)
@version 12.1.2210
@author allef.souza
@since 14/02/2023
@return Array, retorna um array de objetos do tipo RegA6Q3
/*/
Method getRegA6Q3(nVlrIcms) as Array Class ScancRefService

	Local oRegA6Q3 as Object
	Local aRegA6Q3 := {} as Array
	Local cAlias := GetNextAlias() as Character
	Local dDataRef := FwDateTimeToLocal(SubStr(::cMesAno, 3) + SubStr(::cMesAno, 1, 2))[1] as Date
	Local aBindParam := {} as Character

	nVlrIcms := 0

	aBindParam := { xFilial("SFT", ::_cFilial),;
					dtos(FirstDate(dDataRef)),;
					dtos(LastDate(dDataRef)),;
					::cUfDest }

	DBUseArea(.T., "TOPCONN", TCGenQry2(NIL, NIL, ::cQuerySFT, aBindParam), cAlias , .F., .T.)

	Do While !(cAlias)->(Eof())

		oRegA6Q3 := RegA6Q3():new()

		oRegA6Q3:setIdGrupo(::cIdGrupo)
		oRegA6Q3:setProduto((cAlias)->FT_PRODUTO)
		oRegA6Q3:setQtd((cAlias)->FT_QUANT)
		oRegA6Q3:setVlrOpe((cAlias)->FT_VALCONT)
		oRegA6Q3:setVlrIcms((cAlias)->FT_VALICM)
		oRegA6Q3:setSinalVlrIcms((cAlias)->SINAL)
		oRegA6Q3:setVlrIcmsSt((cAlias)->FT_ICMSRET)
		oRegA6Q3:setSinalVlrIcmsSt((cAlias)->SINAL)
		oRegA6Q3:setVlrTotIcms(oRegA6Q3:getVlrIcms() + oRegA6Q3:getVlrIcmsSt())
		oRegA6Q3:setSinalVlrTotIcms((cAlias)->SINAL)
		
		nVlrIcms += oRegA6Q3:getVlrIcms()
		aAdd(aRegA6Q3, oRegA6Q3)
		oRegA6Q3 := Nil
		(cAlias)->(DbSkip())
	EndDo

	DbSelectArea(cAlias)
	(cAlias)->(DbCloseArea())

Return aRegA6Q3

/*/{Protheus.doc} ScancRefService::getReg(cAnexo, cQuadro, cSubQuadro) as Array
Método responsável por fornecer os registros armazenados na tabela CJO
@type method
@param cAnexo, character, o anexo do arquivo SCANC Refinaria
@param cQuadro, character, o quadro para o anexo informado
@param [cSubQuadro], character, o sub-quadro para o quadro informado
@param nVlrIcms, numeric, parâmetro passado por referência que permite acumular o valor de ICMS dos quadro obtidos
para posterior aproveitamento nos quadros resumo (Quadros 1 e 2)
@version 12.1.2210
@author allef.souza
@since 01/03/2023
@return object, retorna um objeto correspondente ao registro requisitado via parâmetros
/*/
Method getReg(cAnexo, cQuadro, cSubQuadro, nVlrIcms) as Array Class ScancRefService

	Local oReg  as Object
	Local aReg  := {} as Array
	Local cAliasCJO	 := GetNextAlias() as Character
	Local aBindParam := {} as Array
	Local cTag as Character
	Local jSM0Data as Json
	Local cCGC := "" as Character
	Local cEstado := "" as Character
	Local cInscr := "" as Character
	Local cNome := "" as Character

	Default cSubQuadro := " "

	nVlrIcms := 0

	cTag := cAnexo + cQuadro + cSubQuadro	

	aBindParam := { xFilial("SA2", ::_cFilial),;
					xFilial("SA1", ::_cFilial),;
					::_cFilial,;
					cAnexo,;
					cQuadro,;
					cSubQuadro,;
					::cMesAno }

	DBUseArea(.T., "TOPCONN", TCGenQry2(NIL, NIL, ::cQueryCJO, aBindParam), cAliasCJO , .F., .T.)

	Do While !(cAliasCJO)->(Eof())

		If (cAliasCJO)->CJO_TPCHV == "3"
			jSM0Data := ::getSM0Data((cAliasCJO)->CJO_CODEMP, (cAliasCJO)->CJO_CODFIL)
			cCGC := jSM0Data["M0_CGC"]
			cEstado := jSM0Data["M0_ESTENT"]
			cInscr := jSM0Data["M0_INSC"]
			cNome := jSM0Data["M0_NOMECOM"]
		Else
			cCGC := (cAliasCJO)->CGC
			cEstado := (cAliasCJO)->ESTADO
			cInscr := (cAliasCJO)->INSCR
			cNome := (cAliasCJO)->NOME
		EndIf
		
		If cQuadro $ "Q14/Q15"
			oReg := RegA6QY():new()
			oReg:setInscricaoEstadual(cInscr)
		Else
			oReg := RegA6QX():new()
			oReg:setRazaoSocial(cNome)
			oReg:setComunicRef((cAliasCJO)->CJO_COMUNI)
		EndIf			
		
		oReg:setTag(cTag)
		oReg:setIdGrupo(::cIdGrupo)
		oReg:setUf(cEstado)
		oReg:setCNPJ(cCGC)	
		oReg:setVlrIcms((cAliasCJO)->CJO_VALOR)
		oReg:setSinalVlrIcms((cAliasCJO)->SINAL)
		oReg:setMesAno((cAliasCJO)->CJO_MESANO)

		nVlrIcms += oReg:getVlrIcms()
		aAdd(aReg, oReg)
		oReg := Nil

		(cAliasCJO)->(DbSkip())
	EndDo

	(cAliasCJO)->(DbCloseArea())

Return aReg

/*/{Protheus.doc} ScancRefService::getQueryCJO
Método privado que retorna a query da CJO utilizada para obter os movimentos elegíveis de cada quadro
@type method
@version 12.1.2210
@author allef.souza
@since 02/03/2023
@return character, retorna a query da CJO
/*/
Method getQueryCJO() Class ScancRefService

	Local cQuery := "" as Character

	cQuery := "SELECT CJO.CJO_ANEXO, CJO.CJO_QUADRO, CJO.CJO_SUBQUA, CJO.CJO_MESANO, CJO.CJO_TPCHV, CJO.CJO_CLIFOR, CJO.CJO_LOJA, CJO.CJO_CODEMP,"
    cQuery += "   CJO.CJO_CODFIL, Abs(CJO.CJO_VALOR) CJO_VALOR, CJO.CJO_COMUNI,"
	cQuery += "   CASE WHEN CJO.CJO_VALOR < 0 THEN 'D' ELSE ' ' END SINAL,"
	cQuery += "   CASE WHEN CJO.CJO_TPCHV = '1' THEN SA2.A2_EST"
    cQuery += "     WHEN CJO.CJO_TPCHV = '2' THEN SA1.A1_EST ELSE ' ' END ESTADO,"
	cQuery += "   CASE WHEN CJO.CJO_TPCHV = '1' THEN SA2.A2_CGC"
    cQuery += "     WHEN CJO.CJO_TPCHV = '2' THEN SA1.A1_CGC ELSE ' ' END CGC,"
	cQuery += "   CASE WHEN CJO.CJO_TPCHV = '1' THEN SA2.A2_NOME"
    cQuery += "     WHEN CJO.CJO_TPCHV = '2' THEN SA1.A1_NOME ELSE ' ' END NOME,"
	cQuery += "   CASE WHEN CJO.CJO_TPCHV = '1' THEN SA2.A2_INSCR"
    cQuery += "     WHEN CJO.CJO_TPCHV = '2' THEN SA1.A1_INSCR ELSE ' ' END INSCR"
	cQuery += "	FROM   " + RetSqlName("CJO") + " CJO"
	cQuery += "		LEFT JOIN " + RetSqlName("SA2") + " SA2 ON CJO.CJO_CLIFOR = SA2.A2_COD"
	cQuery += "		  AND CJO.CJO_LOJA = SA2.A2_LOJA AND CJO.CJO_TPCHV = '1'"
	cQuery += "		  AND SA2.A2_FILIAL = ? AND SA2.D_E_L_E_T_ = ' '"
	cQuery += "		LEFT JOIN " + RetSqlName("SA1") + " SA1 ON CJO.CJO_CLIFOR = SA1.A1_COD"
	cQuery += "		  AND CJO.CJO_LOJA = SA1.A1_LOJA AND CJO.CJO_TPCHV = '2'"
	cQuery += "		  AND SA1.A1_FILIAL = ? AND SA1.D_E_L_E_T_ = ' '"
	cQuery += "	WHERE  CJO.CJO_FILIAL = ?"		
    cQuery += "   	AND CJO.CJO_ANEXO = ?"
    cQuery += "   	AND CJO.CJO_QUADRO = ?"
    cQuery += "   	AND CJO.CJO_SUBQUA = ?"
	cQuery += "   	AND CJO.CJO_MESANO = ?"
    cQuery += "   	AND CJO.D_E_L_E_T_ = ' '"
	cQuery += "	ORDER  BY 1, 2, 3, 4 "

Return ChangeQuery(cQuery)

/*/{Protheus.doc} ScancRefService::getQuerySFT
Método privado que retorna a query da SFT utilizada para obter os movimentos elegíveis para o quadro 3
@type method
@version 12.1.2210
@author allef.souza
@since 02/03/2023
@return character, retorna a query da SFT
/*/
Method getQuerySFT() Class ScancRefService

	Local cQuery as Character

	cQuery := "SELECT SFT.FT_PRODUTO, SFT.FT_QUANT, SFT.FT_VALCONT, SFT.FT_VALICM, SFT.FT_ICMSRET,"
	cQuery += " CASE WHEN SFT.FT_TIPO = 'D' AND SFT.FT_TIPOMOV = 'E' THEN 'D' ELSE ' ' END SINAL"
	cQuery += " FROM " + RetSqlName("SFT") + " SFT"
	cQuery += " WHERE SFT.FT_FILIAL = ?"
	cQuery += " AND SFT.FT_ENTRADA >= ?"
	cQuery += " AND SFT.FT_ENTRADA <= ?"
	cQuery += " AND SFT.FT_ESTADO = ?"
	cQuery += " AND (SFT.FT_TIPOMOV = 'S' OR (SFT.FT_TIPO = 'D' AND SFT.FT_TIPOMOV = 'E'))"
	cQuery += " AND SFT.FT_DTCANC = ' '"
	cQuery += " AND SFT.FT_ICMSRET > 0 "
	cQuery += " AND SFT.D_E_L_E_T_  = ' '"

Return ChangeQuery(cQuery)

/*/{Protheus.doc} ScancRefService::getSM0Data(_cEmpAnt, _cFilial) as Json
Método privado para obter dados da SM0 em formato Json
@type method
@version 12.1.2210
@author allef.souza
@since 02/03/2023
@return json, retorna um objeto Json com o campos das filiais informadas via parâmetro
/*/
Method getSM0Data(_cEmpAnt, _cFilial) as Json Class ScancRefService

	Local aSM0Data := {} as Array
	Local jRet := JsonObject():New() as Json
	Local nI as Integer
	
	aSM0Data := FWSM0Util():GetSM0Data(_cEmpAnt, _cFilial , { ;
		"M0_CGC",;
		"M0_INSC",;
		"M0_NOMECOM",;
		"M0_ENDENT",;
		"M0_COMPENT",;
		"M0_BAIRENT",;
		"M0_CIDENT",;
		"M0_CEPENT",;
		"M0_ESTENT",;
		"M0_INSC" })

	For nI := 1 To Len(aSM0Data)
		jRet[aSM0Data[nI][1]] := aSM0Data[nI][2]
	Next nI

Return jRet
