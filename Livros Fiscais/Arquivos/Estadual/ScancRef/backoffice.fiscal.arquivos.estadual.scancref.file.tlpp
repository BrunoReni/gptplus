#include 'tlpp-core.th'
#include 'tlpp-object.th'
#include 'protheus.ch'
#include 'backoffice.fiscal.arquivos.ch'

namespace backoffice.fiscal.arquivos.estadual.scancref.file
using namespace backoffice.fiscal.arquivos.estadual.scancref.service
using namespace backoffice.fiscal.arquivos.utils
using namespace backoffice.fiscal.arquivos.estadual.scancref.model

/*/{Protheus.doc} ScancRefFileWriter
Classe de aplicação responsável por gerar o arquivo SCANC Refinaria
@type class
@version 12.1.2210
@author allef.souza
@since 02/03/2023
/*/
Class ScancRefFileWriter

    Data oWriter as Object
    Data jTotalizers as Json
    Public Method write()
    Public Method new()
    Private Method writeTotalizers()
    Private Method writeFile()

EndClass

/*/{Protheus.doc} ScancRefFileWriter::new
Fornece uma nova instância da classe de aplicação e inicializa o objeto totatlizador dos registros e o objeto que irá escrever o arquivo
@type method
@version 12.1.2210
@author allef.souza
@since 02/03/2023
@param oWriter, object, objeto da classe FWFileWriter
/*/
Method new(oWriter) Class ScancRefFileWriter
    ::oWriter := oWriter
    ::jTotalizers := JsonObject():New()
Return Self

/*/{Protheus.doc} ScancRefFileWriter::write
Método público que escreve em meio magnético os dados obtidos para cada filial
@type method
@version 12.1.2210
@author allef.souza
@since 02/03/2023
@param cIdGrupo, Character, identificador para cada filial conforme preconiza layout do arquivo 
@param cMesAno, Character, mês e ano de referência no formato MMAAAA para geração do arquivo
@param cUfDest, Character, UF para a qual o arquivo será enviado
@param _cFilial, Character, filial a ser processada
@param lWriteTotalizers, logical, indica que a última filial foi processada e os totalizadores podem ser escritos no arquivo
/*/
Method write(cIdGrupo, cMesAno, cUfDest, _cFilial, lWriteTotalizers) Class ScancRefFileWriter
    
    Local oAnnotationHelper := AnnotationHelper():getInstance() as Object
    Local oStruct as Object
    Local oService as Object
    Local oScancRef as Object
    Local nI := 1 as Integer
    Local oRecord as Object
    Local nLength := 0 as Integer
    Local aRecords := {} as Array

    Default lWriteTotalizers := .T.

    oService := ScancRefService():new(cIdGrupo, cMesAno, cUfDest, _cFilial)
    oScancRef := oService:getScancRef()

    oStruct := oAnnotationHelper:getDataAnnotation(oScancRef, "MagneticFileRecord", "level")
    oStruct:List(aRecords)
    nLength := Len(aRecords)
    aSize(aRecords, 0)

    For nI := 1 To nLength

        oStruct:Get(nI, oRecord)
        ::writeFile(oScancRef:getValue(oRecord["cAttributeName"]))

    Next nI

    If lWriteTotalizers
        ::writeTotalizers()
    EndIf
    
    oStruct := Nil
    FreeObj(oStruct)
    
Return

/*/{Protheus.doc} ScancRefFileWriter::writeTotalizers
Escreve os totalizadores no final arquivo
@type method
@version 12.1.2210
@author allef.souza
@since 02/03/2023
/*/
Method writeTotalizers() Class ScancRefFileWriter

    Local aTotalizers := ::jTotalizers:getNames() as Array
    Local nTotalizers := Len(aTotalizers) as Integer
    Local nI as Integer
    Local cReg := "" as Character
    Local cKey as Character

    For nI := 1 To nTotalizers

        cKey := aTotalizers[nI]
        cReg += PadR(cKey, 6, Space(1)) + StrZero(::jTotalizers[cKey], 14) + Chr(13) + Chr(10)

        ::oWriter:Write(cReg)

        cReg := ""

    Next nI

Return

/*/{Protheus.doc} ScancRefFileWriter::writeFile
Método privado responsável por escrever cada registro do objeto da classe ScancRef
@type method
@version 12.1.2210
@author allef.souza
@since 02/03/2023
@param xReg, variant, objeto ou array de objetos que representam regsitros do SCANC Refinaria
/*/
Method writeFile(xReg) Class ScancRefFileWriter

    Local nI := 0 as Integer
    Local cTag := "" as Character

    If ValType(xReg) == "A"
        For nI := 1 To Len(xReg)
            ::writeFile(xReg[nI])
        Next nI
    ElseIf ValType(xReg) == "O"

        cTag := Stuff(xReg:getTag(), 1, 1, "C")       

        If !::jTotalizers:hasProperty(cTag)
            ::jTotalizers[cTag] := 1
        Else
            ::jTotalizers[cTag]++
        EndIf

        ::oWriter:Write(xReg:toString())

    EndIf

Return
