#include "loca001.ch"  
#include "rwmake.ch" 
#include "totvs.ch"
#include "topconn.ch" 
#include "sigawin.ch"        

/*/LOCA001.PRW
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE O REGISTRO DOS PROJETOS PARA OS MOVIMENTOS DE LOCAÇÃO.
NA VERSÃO ANTERIOR CHAMAVA-SE LOCC001.PRW
FRANK ZWARG FUGA
03/12/2020
03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

#define MAXGETDAD 99999							// USADO EM TODOS OS MSNEWGETDADOS
#define ccaminho "\ROTAS"						// CAMINHO ONDE ESTÃO ARMAZENADOS O DOCUMENTOS DIGITALIZADOS

Function LOCA001(_nRegXT)
local cfiltop  	:= ""
local cstring   := "FP0"
local _lfilvend := supergetmv("MV_LOCX203",.F.,.F.)
private arotina
private acampoza0 := {}
private lcopyprj  := .f.
private adelviag  := {}
private objt
private otget2
private mv_locx020
private	cgrpand	  := ""
private lzagnfret := supergetmv("MV_LOCX259" , .F. , .F.) 
private cselecrec := supergetmv("MV_LOCX073" , .F. , "L" ) // --> tipos de receita disponiveis para selecao (t=transporte / e=equipamento / l=locacao). ex: tel ou tl ou el ou l. 
private _nAnt     := 0 // uso na aba de locações
private cCadastro

	ccadastro := STR0001 + " " + SUPERGETMV("MV_LOCX248",.F.,STR0002)  //"MANUTENÇÃO DE "###"PROJETO"

	chkfile("SBM") // --> EVITAR ERROR LOG, QUANDO TABELA PADRÃO AINDA NÃO TIVER SIDO ABERTA (CRIADA).
	if SBM->(fieldpos("BM_XACESS")) > 0
		cgrpand := LOCA00189()
	else
		cgrpand := SUPERGETMV("MV_LOCX014",.F.,"")
	endif

	mv_locx020 := getmv("MV_LOCX020") 
	arotina   := xmenudef() 

	dbselectarea(CSTRING) 
	dbsetorder(1) 

	If _LFILVEND .AND. LOCA015()					// É VENDEDOR
		CFILTOP := "FP0_VENDED = '" + SA3->A3_COD + "'"
	EndIf

	// Ponto de entrada para filtrar o browse dos contratos
	// Frank Zwarg Fuga - 15/06/2021
	If EXISTBLOCK("LC001FIL")
		CFILTOP += EXECBLOCK("LC001FIL" , .T. , .T. , {CFILTOP}) 
	EndIF

	//	MBROWSE( <NLINHA1>, <NCOLUNA1>, <NLINHA2>, <NCOLUNA2>, <CALIAS>, <AFIXE>, <CCPO>, <NPAR>, <CCORFUN>, <NCLICKDEF>, <ACOLORS>  , <CTOPFUN>, <CBOTFUN>, <NPAR14>, <BINITBLOC>, <LNOMNUFILTER>, <LSEEALL>, <LCHGALL>, <CEXPRFILTOP>, <NINTERVAL>, <UPAR22>, <UPAR23> )
		MBROWSE( 6        , 1         , 22       , 75        , CSTRING ,        ,       ,       ,          ,            , LOCA00101(),          ,          ,         ,            ,               ,          ,          , CFILTOP)

	SETKEY(VK_F10 , NIL) 

RETURN NIL


/*/LOCA00101
ITUP BUSINESS - TOTVS RENTAL
FUNÇÃO PARA LEGENDA DOS PROJETOS
FRANK ZWARG FUGA
03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00101( CALIAS, NORDER, NRECNO ) 
private ASTATUS
private ALEGENDA := {}
private ACORES   := {}
default CALIAS   := ""
default NORDER   := 0
default NRECNO   := 0

	ASTATUS := FSTATUS("LEGENDA")					// TRAZ OS STATUS DAS PROPOSTAS

	AADD(ALEGENDA,{"F10_PRET"        , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_VERDE"        , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_AMARELO"      , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_AZUL"         , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_BRANCO"       , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_PRETO"        , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_VERMELHO"     , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_LARANJA"      , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_MARRON_OCEAN" , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_CINZA"        , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_PINK"         , ASTATUS[LEN(ALEGENDA)+1]}) 
	AADD(ALEGENDA,{"BR_CANCEL"       , ASTATUS[LEN(ALEGENDA)+1]}) 

	AADD(ACORES,{'FP0_STATUS=="1" .AND. !EMPTY(ALLTRIM(GETADVFVAL("FQ5", "FQ5_SOT",XFILIAL("FQ5") + FP0_FILIAL + FP0_PROJET,21,"")))' ,ALEGENDA[LEN(ACORES)+1,1]}) 
	AADD(ACORES,{'FP0_STATUS=="1"'   , ALEGENDA[LEN(ACORES)+1,1]}) 
	AADD(ACORES,{'FP0_STATUS=="2"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="3"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="4"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="5"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="6"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="7"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="8"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="A"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="B"'   , ALEGENDA[LEN(ACORES)+1,1]})
	AADD(ACORES,{'FP0_STATUS=="C"'   , ALEGENDA[LEN(ACORES)+1,1]})

	IF EXISTBLOCK("LC001COR") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CORES DA LEGENDA
		EXECBLOCK("LC001COR" , .T. , .T. , {ALEGENDA,ACORES}) 
	ENDIF

	IF NRECNO == 0 									// --> CHAMADA PELO MBROWSE NÃO PASSA O RECNO()
		RETURN(ACORES)
	ELSE 											// --> CHAMADA PELO AROTINA PASSA O RECNO()
		BRWLEGENDA( SUPERGETMV("MV_LOCX248",.F.,STR0002) , STR0004 , ALEGENDA ) //"PROJETO"###"STATUS"
		RETURN .T.
	ENDIF

RETURN NIL


/*/FSTATUS
ITUP BUSINESS - TOTVS RENTAL
FUNÇÃO PARA COMPLEMENTO DA LEGENDA DOS PROJETOS
FRANK ZWARG FUGA
03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
STATIC FUNCTION FSTATUS(CVAR) 
local ARET := {}
	DO CASE
	CASE UPPER(CVAR) == "LEGENDA"
		AADD(ARET , STR0005 ) //"DIGITAÇÃO C/ CONTRATO"
		AADD(ARET , STR0006 ) //"EM ELABORAÇÃO"
		AADD(ARET , STR0007 ) //"EM APROVAÇÃO"
		AADD(ARET , STR0008 ) //"APROVADO"
		AADD(ARET , STR0009 ) //"NÃO APROVADO"
		AADD(ARET , STR0010 ) //"FECHADO"
		AADD(ARET , STR0011 ) //"INDISPONÍVEL"
		AADD(ARET , STR0012 ) //"REJEITADO"
		AADD(ARET , STR0013 ) //"FATURADO"
		AADD(ARET , STR0014 ) //"REVISADO"
		AADD(ARET , STR0015 ) //"EXCLUIDO"
		AADD(ARET , STR0016 ) //"PERDIDO"
	CASE UPPER(CVAR) == "COMBO"
		AADD(ARET,STR0017 ) //"1=DIGITAÇÃO C/ CONTRATO"
		AADD(ARET,STR0018 ) //"1=EM ELABORAÇÃO"
		AADD(ARET,STR0019 ) //"2=EM APROVAÇÃO"
		AADD(ARET,STR0020 ) //"3=APROVADO"
		AADD(ARET,STR0021 ) //"4=NÃO APROVADO"
		AADD(ARET,STR0022 ) //"5=FECHADO"
		AADD(ARET,STR0023 ) //"6=INDISPONÍVEL"
		AADD(ARET,STR0024 ) //"7=REJEITADO"
		AADD(ARET,STR0025 ) //"8=FATURADO"
		AADD(ARET,STR0026 ) //"A=REVISADO"
		AADD(ARET,STR0027 ) //"B=EXCLUIDO"
		AADD(ARET,STR0028 ) //"C=PERDIDO"
	ENDCASE

	IF EXISTBLOCK("LC001LEG") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CORES DA LEGENDA
		ARET := EXECBLOCK("LC001LEG" , .T. , .T. , {ARET}) 
	ENDIF

RETURN ACLONE( ARET )


/*/XMENUDEF
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A IDENTIFICAÇÃO DO MENU DE OPÇÕES.
FRANK ZWARG FUGA
03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION XMENUDEF()
local AROTINA  := {}
local AROTINA1 := {}

	IF PSWADMIN(,,__CUSERID) == 0
		AADD(AROTINA1, {STR0036, "LOCA00114", 0 , 6}) //"Locais"
		IF SUPERGETMV("MV_LOCX227",.F.,.T.)
			AADD(AROTINA1, {STR0045, "LOCA00123", 0 , 6}) //"Responsabilidades"
		ENDIF
		IF SUPERGETMV("MV_LOCX226",.F.,.T.)
			AADD(AROTINA1, {STR0051, "LOCA00130", 0 , 6}) //"Documentos"
		ENDIF
		AADD(AROTINA1, {STR0056, "LOCA00138", 0 , 6}) //"BENS"
	ELSE
		AADD(AROTINA1, {STR0036, "LOCA00114", 0 , 6})  //"Locais"
		AADD(AROTINA1, {STR0037, "LOCA00115", 0 , 6}) //"Etapas"
		IF SUPERGETMV("MV_LOCX227",.F.,.T.)
			AADD(AROTINA1, {STR0045, "LOCA00123", 0 , 6}) //"Responsabilidades"
		ENDIF
		AADD(AROTINA1, {STR0051, "LOCA00130", 0 , 6}) //"Documentos"
	ENDIF

	IF CNIVEL >= 5
		AADD(AROTINA, {STR0057, "AXPESQUI", 0 , 1}) //"Pesquisar"
		AADD(AROTINA, {STR0058, "LOCA00110", 0 , 2}) //"Visualizar"
		AADD(AROTINA, {STR0059, "LOCA072", 0 , 6}) //"Gráfico/Status"
		AADD(AROTINA, {STR0060, "LOCA00104", 0 , 3}) //"Incluir"
		AADD(AROTINA, {STR0061, "LOCA00103", 0 , 6}) //"Alterar"
		AADD(AROTINA, {STR0003, "LOCA00101", 0 , 6}) //"Legenda"
		AADD(AROTINA, {STR0062, "LOCA00105(4)", 0 , 6}) //"Manutenção"
		AADD(AROTINA, {STR0063, "LOCA00162", 0 , 6}) //"Cancelar"
		IF MV_LOCX020
			AADD(AROTINA, {STR0007, "LOCA00161", 0 , 6}) //"Em aprovação"
		ENDIF
		AADD(AROTINA, {STR0064, AROTINA1, 0 , 6}) //"Cadastros"
		AADD(AROTINA, {STR0065, "LOCA00173", 0 , 6}) //"Gera Contrato"
		IF SUPERGETMV("MV_LOCX008",.F.,.F.)
			AADD(AROTINA, {STR0066, "LOCA010(.F.)", 0 , 6}) //"Gera NF Remessa"
		ENDIF
		AADD(AROTINA, {STR0067, "LOCA002", 0, 6}) //"Prog. Entrega"
		AADD(AROTINA, {STR0068, "LOCA011", 0 , 6}) //"Ret. de Locação"
		AADD(AROTINA, {STR0069, "LOCA040", 0 , 6}) //"Cancelar AS"
		AADD(AROTINA, {STR0070, "LOCA00166", 0 , 6}) //"% Possibilidade"
		IF SUPERGETMV("MV_LOCX223",,"N") == "S"
			AADD(AROTINA, {STR0072, "U_LOCI100", 0 , 6}) //"Emitir Proposta"
		ENDIF
		AADD(AROTINA, {STR0073, "LOCR016", 0 , 6}) //"Emitir Contrato"
		AADD(AROTINA, {STR0074, "LOCA00163", 0 , 6})  //"Revisão"
		AADD(AROTINA, {STR0075, "LOCA00106", 0 , 6})  //"Follow-up"
		IF SUPERGETMV("MV_LOCX206",.F.,.T.)		
			AADD(AROTINA, {STR0076, "LOCA00105(5)" , 0 , 6}) //"Copiar"
		ENDIF
		AADD(AROTINA, {STR0007, "LOCA00191", 0 , 6})  //"R.A.T"
	ELSE
		AADD(AROTINA, {STR0057, "AXPESQUI", 0 , 1})  //"Pesquisar"
		AADD(AROTINA, {STR0058, "LOCA00110", 0 , 2})  //"Visualizar"
		AADD(AROTINA, {STR0003, "LOCA00101", 0 , 6})  //"Legenda"
	ENDIF

	AADD(AROTINA, {STR0078, "LOCA00199", 0 , 6})  //"Notas de Retorno"

	IF EXISTBLOCK("LC001ROT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE BOTÕES NO AÇÕES RELACIONADAS
		AROTINA := EXECBLOCK("LC001ROT", .T. , .T. , {AROTINA,AROTINA1}) 
	ENDIF

	aRotina1 := {}

RETURN ACLONE( AROTINA )


/*/ZA0ALTE
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A ALTERAÇÃO DOS DADOS PRINCIPAIS DO PROJETO
FRANK ZWARG FUGA
03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00103() 
local _C_LABEL  := "" 
local lFP0TDOK  := ExistBlock("FP0TDOK") // MERGE - ORGUEL 94 - INICIO
local cTudoOK   := "" // MERGE - ORGUEL 94 - INICIO
Local CCADASTRO := STR0079 + SUPERGETMV("MV_LOCX248",.F.,STR0002) //"MANUTENÇÃO "###"PROJETO"

private NOPC      := 4 							// 4=ALTERAR
private NOPCMANU  := 4 							// 4=ALTERAR

	IF FP0->FP0_STATUS $ "6|7|A|B|C" .AND. !LCOPYPRJ
		_C_LABEL :=  IIF(FP0->FP0_STATUS == "6" , STR0011 , ;  //"INDISPONÍVEL"
					 IIF(FP0->FP0_STATUS == "7" , STR0012 , ;  //"REJEITADO"
					 IIF(FP0->FP0_STATUS == "8" , STR0013 , ;  //"FATURADO"
					 IIF(FP0->FP0_STATUS == "A" , STR0014 , ;  //"REVISADO"
					 IIF(FP0->FP0_STATUS == "B" , STR0080 , ;  //"EXCLUÍDO"
					 IIF(FP0->FP0_STATUS == "C" , STR0016 , "")))))) //"PERDIDO"
		
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{CCADASTRO + STR0081 + FP0->FP0_STATUS + "-" + _C_LABEL + STR0082}) //" Encontra-se com o status: "###", não é possível a manutenção."

		RETURN .F.
	ENDIF

	// MERGE - ORGUEL 94 - INICIO
	// Ponto de Entrada para alterar o Tudo OK da ZA0
	IF  lFP0TDOK
		cTudoOK += ' ExecBlock("FP0TDOK",.f.,.f.)'
	Endif

	// Frank em 15/03/2022
	If empty(cTudoOk)
		cTudoOk := ".T."
	EndIF

	// MERGE - ORGUEL 94 - FIM
	DBSELECTAREA("FP0")
	NOPCA := AXALTERA("FP0", RECNO(), 4,,,,, cTudoOk,, /*cTransact*/ ) // AxAltera(cString,Recno(),4)  // MERGE - ORGUEL 94 - INICIO
	LRET  := (NOPCA == 1)  							// 1=OK,3=CANCEL

	IF LRET
		IF EXISTBLOCK("LC001GRV")
			EXECBLOCK("LC001GRV" , .T. , .T. , {,,FP0->FP0_PROJET,.T.}) 
		ENDIF 
	ENDIF 

	NOPC      := nil
	NOPCMANU  := nil

RETURN LRET


/*/ZA0INCL
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A INCLUSÃO DOS DADOS PRINCIPAIS DO PROJETO
FRANK ZWARG FUGA
03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00104() 
local CPROJET
local LRET      := .F.
local NOPCA									// RETORNO DO AXINCLUI()
local ABUTTONS  := {} 

private NOPC      := 3 							// 3=INCLUIR
private NOPCMANU  := 3 							// 3=INCLUIR
private ZA0RECEIT								// USADA EM ZA0INICI("FP0_RECEIT")  	// INICIALIZADOR PADRÃO DO CAMPO
private ZA0TIPOSE								// USADA EM ZA0INICI("FP0_TIPOSE")  	// INICIALIZADOR PADRÃO DO CAMPO
private CCADASTRO := STR0083 + SUPERGETMV("MV_LOCX248" , .F. , STR0002)  //"INCLUSÃO DE "###"PROJETO"

	CSELECREC := UPPER(ALLTRIM(CSELECREC)) // variavel declarada como private no loca001

	ZA0RECEIT := "L" // USADA EM ZA0INICI("FP0_RECEIT")  // INICIALIZADOR PADRÃO DO CAMPO
	ZA0TIPOSE := "L" // USADA EM ZA0INICI("FP0_TIPOSE")  // INICIALIZADOR PADRÃO DO CAMPO
	//       AXINCLUI( [CALIAS] [NREG] [NOPC] [AACHO] [CFUNC] [ACPOS] [CTUDOOK] [LF3] [CTRANSACT] [ABUTTONS] [APARAM] [AAUTO] [LVIRTUAL] [LMAXIMIZED] [CTELA] [LPANELFIN] [OFATHER] [ADIM] [UAREA] )
	NOPCA := AXINCLUI( "FP0"   , 0    , 3    ,       ,       ,       , "VALFP0()"        ,     ,           , ABUTTONS ,        ,       ,          , .T.        ,       ,           ,         ,      ,        ) 

	LRET := ( NOPCA == 1 )  						// 1=OK,3=CANCEL

	IF LRET
		IF RECLOCK("FP0",.F.)
			IF !("LOCA00140" $ ALLTRIM(GETSX3CACHE("FP0_PROJET", "X3_RELACAO")))		// IF PARA NÃO PULAR NUMERAÇÃO.
				FP0->FP0_PROJET := LOCA00140("FP0_PROJET", .F.)
			ENDIF 
			FP0->FP0_COD    := SUBSTR(FP0->FP0_PROJET, 7, 3)
			FP0->FP0_USUINC := USRRETNAME(RETCODUSR())
			FP0->(MSUNLOCK())
		ENDIF

		IF EXISTBLOCK("LC001INC") 					// PARA REALIZAR ALGUMA ALTERAÇÃO APÓS A INCLUSÃO DO CONTRATO
			EXECBLOCK("LC001INC" , .T. , .T. , {FP0->FP0_FILIAL,FP0->FP0_PROJET}) 
		ENDIF

		CPROJET := PROJETO(.T.) 

	ENDIF

RETURN .T. 

// Validação do cadastro dos orçamentos - Inclusão.
// Frank Zwarg Fuga - 24/02/2021
Function VALFP0
local _lRet := .T.
local lFP0TDOK  := ExistBlock("FP0TDOK") // MERGE - ORGUEL 94 - INICIO
	//SIGALOC94-676 - Jose Eulalio - Evita Chave Duplicada // para testar abrir duas threads do LOCA001 e clicar em incluir nas duas ao confirmar as duas passará nesta linha
	If FP0->(DbSeek(xFilial("FP0") + M->FP0_PROJET))
		M->FP0_PROJET := LOCA00140("FP0_PROJET") 
	EndIf
	If empty(M->FP0_CLI) .and. empty(M->FP0_PROSPE)
		_lRet := .F.
		Help(Nil,Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
		Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
		{STR0087}) //"Falta o preenchimento do cliente, ou do prospect."
	EndIF
	If lFP0TDOK
		_lRet := ExecBlock("FP0TDOK",.f.,.f.)
	EndIf
Return _lRet

/*/ LOCA00105
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A MANUTENÇÃO DO PROJETO
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00105(COPC) 
Local CPROJET 
Local lRet
Local _cLabel

	CPROJET  := PROJETO(.T.) 

	LCOPYPRJ := (COPC == 5)	// COPIA DE PROJETO - variável declarada como private no loca001

	IF FP0->FP0_TIPOSE != "T" .AND. COPC == 5
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
		Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
		{STR0089}) //"Não pode ser efetuado cópia deste tipo de serviço."
		RETURN .F.
	ELSE
		IF FP0->FP0_STATUS $ "6|7|A|B|C" .AND. !LCOPYPRJ
			_CLABEL :=  IIF(FP0->FP0_STATUS == "6" , STR0011 , ;  //"INDISPONÍVEL"
						IIF(FP0->FP0_STATUS == "7" , STR0012 , ;  //"REJEITADO"
						IIF(FP0->FP0_STATUS == "8" , STR0013 , ;  //"FATURADO"
						IIF(FP0->FP0_STATUS == "A" , STR0014 , ;  //"REVISADO"
						IIF(FP0->FP0_STATUS == "B" , STR0080 , ;  //"EXCLUÍDO"
						IIF(FP0->FP0_STATUS == "C" , STR0016 , "")))))) //"PERDIDO"

			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
			Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
			{SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0081 + FP0->FP0_STATUS + "-" + _CLABEL + STR0082}) //"PROJETO"###" encontra-se com o status: "###", não é possível a manutenção."

			RETURN .F.
		ENDIF

		IF EXISTBLOCK("LC001MAN") 					// --> PONTO DE ENTRADA PARA VALIDAR SE É POSSÍVEL DAR MANUTENÇÃO NO PROJETO
			LRET := EXECBLOCK("LC001MAN" , .T. , .T. , {FP0->FP0_FILIAL,FP0->FP0_PROJET,COPC}) 
			IF !LRET
				RETURN .F.
			ENDIF
		ENDIF
		
		IF FP0->FP0_STATUS $ "3|4|5|8" .AND. !LCOPYPRJ
			_CLABEL :=  IIF(FP0->FP0_STATUS == "3", STR0090,; //"APROVADA"
						IIF(FP0->FP0_STATUS == "4", STR0091,; //"NÃO APROVADA"
						IIF(FP0->FP0_STATUS == "5", STR0092,""))) //"FECHADA"
		
			IF MSGYESNO(STR0093 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + ", " + CRLF +; //"VOCÊ PODE EFETUAR A ALTERAÇÃO DESTE "###"PROJETO"
						STR0094 +CRLF+; //"MAS AO CONFIRMAR ESSA OPÇÃO O STATUS DA MESMA "
						STR0095 +CRLF+; //"SERÁ MODIFICADO PARA 1=DIGITADO.              "
						STR0096 , STR0097)  //"VOCÊ DESEJA EFETUAR A ALTERAÇÃO?"###"GPO - LOCC001.PRW"
				RECLOCK("FP0",.F.)
				FP0->FP0_STATUS := "1" 
				FP0->(MSUNLOCK()) 
			ELSE
				MSGALERT(SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0098 , STR0029+alltrim(upper(Procname())))  //"PROJETO"###" NÃO FOI ALTERADO."###"RENTAL: "
				RETURN .F.
			ENDIF
		ENDIF

		IF EXISTBLOCK("LC001AJU") 					// --> PONTO DE ENTRADA PARA AJUSTAR A TABELA ZAG ANTES DE ABRIR A MANUTENÇÃO
			EXECBLOCK("LC001AJU" , .T. , .T. , {FP0->FP0_FILIAL,FP0->FP0_PROJET,COPC}) 
		ENDIF
		
		FMANU(4)
		
	ENDIF 

RETURN .T.

/*/ loca00106
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A MANUTENÇÃO DO FOLLOWUP DO PROJETO.
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

function loca00106() 
Local CPROJET 
Local _cLabel

private CSTSATU := ""

	CPROJET := PROJETO(.T.) 
	CSTSATU := FP0->FP0_STATUS

	IF FP0->FP0_STATUS == "A" .OR. FP0->FP0_STATUS == "B"
		_CLABEL := IIF(FP0->FP0_STATUS == "A" , STR0014 , ;  //"REVISADO"
				IIF(FP0->FP0_STATUS == "B" , STR0015 , ""))  //"EXCLUIDO"

		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
		Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
		{SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0081 + FP0->FP0_STATUS + "-" + _CLABEL + STR0099}) //"PROJETO"###" Encontra-se com o status: "###", não é possível Follow-UP."

		RETURN .F.
	ENDIF 

	FMANU(0)

return .T.

/*/ FZA0REVI
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE GERAR A REVISÃO DO PROJETO
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FZA0REVI(CPROJET , CPROJETNEW , CREVISANEW) 
LOCAL LRET := .F.
	PROCREGUA(15)
	IF  LOCA00108("FP0",1,"FP0_FILIAL+FP0_PROJET",XFILIAL("FP0")+CPROJET,{{"FP0_PROJET",CPROJETNEW},;
																		{"FP0_REVISA",CREVISANEW},;
																		{"FP0_STATUS","1"},;
																		{"FP0_DATINC",DDATABASE},;
																		{"FP0_DTPARA",DDATABASE},;
																		{"FP0_HRINC",SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)},;
																		{"FP0_PRVALI",30},;
																		{"FP0_DTVALI",DDATABASE+30}})//DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FP1",1,"FP1_FILIAL+FP1_PROJET",XFILIAL("FP1")+CPROJET,{{"FP1_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FP4",1,"FP4_FILIAL+FP4_PROJET",XFILIAL("FP4")+CPROJET,{{"FP4_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FP5",1,"FP5_FILIAL+FP5_PROJET",XFILIAL("FP5")+CPROJET,{{"FP5_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FQ8",1,"FQ8_FILIAL+FQ8_PROJET",XFILIAL("FQ8")+CPROJET,{{"FQ8_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FP6",1,"FP6_FILIAL+FP6_PROJET",XFILIAL("FP6")+CPROJET,{{"FP6_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FP8",1,"FP8_FILIAL+FP8_PROJET",XFILIAL("FP8")+CPROJET,{{"FP8_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FP9",1,"FP9_FILIAL+FP9_PROJET",XFILIAL("FP9")+CPROJET,{{"FP9_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FPA",1,"FPA_FILIAL+FPA_PROJET",XFILIAL("FPA")+CPROJET,{{"FPA_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FPB",1,"FPB_FILIAL+FPB_PROJET",XFILIAL("FPB")+CPROJET,{{"FPB_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FPD",1,"FPD_FILIAL+FPD_PROJET",XFILIAL("FPD")+CPROJET,{{"FPD_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LOCA00108("FQ7",1,"FQ7_FILIAL+FQ7_PROJET",XFILIAL("FQ7")+CPROJET,{{"FQ7_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
		LRET := .T.
	ENDIF

RETURN LRET


/*/ loca00108
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE DUPLICAR REGISTROS DA TABELA INFORMADA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

function loca00108(calias, nordem, cchavecpos, cchaveold, areplace) 
local NPOS 
local ATABAUX := {} 
local NORDANT := (CALIAS)->(INDEXORD()) 

	incproc(STR0100+CALIAS) //"PROCESSANDO... "

	(CALIAS)->(DBSETORDER(NORDEM))
	(CALIAS)->(DBSEEK(CCHAVEOLD))
	WHILE (CALIAS)->(!EOF() .AND. &CCHAVECPOS==CCHAVEOLD)
		(CALIAS)->(AADD(ATABAUX,RECNO()))
		(CALIAS)->(DBSKIP())
	ENDDO 

	FOR NPOS := 1 TO LEN(ATABAUX)
		(CALIAS)->(DBGOTO(ATABAUX[NPOS]))
		LOCA00109(CALIAS,AREPLACE) 				// DUPLICA O REGISTRO DA TABELA INFORMADA
	NEXT NPOS 

	(CALIAS)->(DBSETORDER(NORDANT))

	aSize(ATABAUX,0)
	FwFreeArray(ATABAUX)

RETURN .T.

/*/ loca00109
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE DUPLICAR UM REGISTRO DE UMA TABELA INFORMADA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

function loca00109(calias,areplace) 
local npos
local atabaux   := {}
local ccampo
local ccampoget

	FOR NPOS := 1 TO (CALIAS)->(FCOUNT())
		(CALIAS)->(AADD(ATABAUX,FIELDGET(NPOS)))
	NEXT NPOS 

	(CALIAS)->(RECLOCK(CALIAS,.T.)) 				// INSERE O NOVO REGISTRO

	FOR NPOS := 1 TO LEN(ATABAUX)
		(CALIAS)->(FIELDPUT(NPOS,ATABAUX[NPOS]))
	NEXT NPOS 

	FOR NPOS := 1 TO LEN(AREPLACE) 					// CAMPOS PARA O REPLACE
		CCAMPO    := AREPLACE[NPOS][1] 				// NOME DO CAMPO
		CCAMPOGET := AREPLACE[NPOS][2] 				// CONTEÚDO DO CAMPO
		(CALIAS)->&CCAMPO := CCAMPOGET
	NEXT NPOS 

	(CALIAS)->(MSUNLOCK())

	aSize(atabaux,0)
	FwFreeArray(atabaux)

RETURN .T. 


/*/ LOCA00110
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE VISUALIZAR O PROJETO COM TODAS AS ABAS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00110(_CPROJ) 
DEFAULT _CPROJ  := ""
	IF ! EMPTY(_CPROJ) .AND. _CPROJ != "FP0"
		FP0->( DBSEEK(XFILIAL("FP0") + _CPROJ) )
	ENDIF
	PROJETO(.T.)
	FMANU(2)
RETURN NIL

/*/ PROJETO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O NÚMERO DO PROJETO
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION PROJETO(LGET) 
Local AAREAZA0 := FP0->( GETAREA() )
Local CPROJET  := FP0->FP0_PROJET

DEFAULT LGET     := .F.

	IF LGET													// SALVA POSIÇÃO ZA0 E GUARDA NÚMERO DO PROJETO
		AAREAZA0 := FP0->( GETAREA() )
		CPROJET  := FP0->FP0_PROJET
	ELSE
		FP0->( RESTAREA( AAREAZA0 ) )						// SEMPRE POSICIONA ZA0
	ENDIF

	aSize(AAREAZA0,0)
	FwFreeArray(AAREAZA0)

RETURN CPROJET											// RETORNA NÚMERO DO PROJETO


/*/ FMANU
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A MANUTENÇÃO DOS DADOS DOS PROJETOS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FMANU(POPC)
Local lBloq := .T.
Local cNrbv 
Local nReg

	// Frank Zwarg Fuga - 19/05/23
	// Tabela para controle dos acessos aos registros dos contratos FPI - antiga boletim de viagem
	// Semaforo para não permitir dois usuarios simultaneos no mesmo contrato

	FPI->(dbSetOrder(5))
	If !FPI->(dbSeek(xFilial("FPI")+FP0->FP0_PROJET))
		cNrbv := GetSxeNum("FPI","FPI_NRBV")
		ConfirmSx8()
		lBloq := .F.
		FPI->(RecLock("FPI",.T.))
		FPI->FPI_FILIAL := xFilial("FPI")
		FPI->FPI_SOT	:= FP0->FP0_PROJET
		FPI->FPI_NRBV	:= cNrbv
		FPI->(MsUnlock())
		nReg := FPI->(Recno())
	Else
		nReg := FPI->(Recno())
	EndIF
	dbSelectArea("FPI")
	dbGoto(nReg)
	If DBRLock()
		lBloq := .F.
		// Desbloquear ao sair do Fmanu.
	else
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
		Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
		{STR0601}) //"Registro bloqueado por outro usuário."
		lBloq := .T.
	EndIf  

	If !lBloq 
		Processa({||fManu1(pOpc)},STR0106) //"Aguarde... Montando o ambiente."
		dbSelectArea("FPI")
		dbGoto(nReg)
		DBRUnlock()
	EndIF

Return

static function fmanu1(popc)
local CPROJET  := PROJETO(.T.)						// ARMAZENA POSIÇÃO ZA0 E RETONAR O NÚMERO DO PROJETO
local NSTYLE   := GD_INSERT + GD_UPDATE + GD_DELETE
local NPOS
local ABUTTONS := {}
local ACOLSAUX := {}
local OFONT1   := TFONT():NEW("ARIAL",10,14,,.T.,,,,.T.,.F.)  //SAY   12,16
local OFONT2   := TFONT():NEW("ARIAL",10,14,,.T.,,,,.T.,.F.)  //GET
local NX       := 0
local NI       := 0 

PRIVATE NOPC        := IIF(POPC==0,4,POPC)				// CASO SEJA 0, SIGNIFICA QUE É APENAS A ABA FOLLOW-UP, FIXEI NO PROGRAMA PARA NÃO TER INTERFERÊNCIAS
PRIVATE NOPCMANU    := IIF(POPC==0,4,POPC)  			// USADA PARA VISUALIZAR
PRIVATE AOBJECTS    := {}
PRIVATE AINFO       := {}
PRIVATE APOSGET     := {}
PRIVATE APOSOBJ     := {}
PRIVATE CFILTROF12  									// FILTRA A ABA PLATAFORMA (NFOLDERPLA)
PRIVATE AHEADER := {} 
PRIVATE ACOLS   := {} 
PRIVATE OGETVT
PRIVATE NFOLDERPRO
PRIVATE ODLGOBR,NFOLDEROBR,OOBR_COLS:={},OOBR_COLS0:={}
PRIVATE ODLGPLA,OFOLDERPLA,NFOLDERPLA,OPLA_COLS:={},OPLA_COLS0:={},OPLACOLRET:={}
PRIVATE ODLGRES,NFOLDERRES,ORES_COLS:={},ORES_COLS0:={}
PRIVATE ODLGCUS,NFOLDERCUS,OCUS_COLS:={},OCUS_COLS0:={}
PRIVATE ODLGFOL,NFOLDERFOL,OFOL_COLS:={},OFOL_COLS0:={}
PRIVATE ODLGDOC,NFOLDERDOC,ODOC_COLS:={},ODOC_COLS0:={}
PRIVATE ODLGCNP,NFOLDERCNP,OCNPACOLS
PRIVATE ARESDEL := {} 
PRIVATE OPROJET
PRIVATE OOBRA , COBRA , XOBRA 
PRIVATE CSEQGUI
PRIVATE CSEQTRA
PRIVATE CSEQGRU
PRIVATE CSEQCAR
PRIVATE OSTATUS
PRIVATE CSTATUS := FP0->FP0_STATUS
PRIVATE OCODCONCO,CCODCONCO   := FP0->FP0_CODCON
PRIVATE ONOMCONCO,CNOMCONCO   := POSICIONE("AC3" , 1 , XFILIAL("AC3")+CCODCONCO , "AC3_NOME") 
PRIVATE OVALCONCO,NVALCONCO   := FP0->FP0_VALCON
PRIVATE OVALCONCOL,NVALCONCOL := FP0->FP0_VALLOC
PRIVATE ODATAVAL,DDATAVAL := DDATABASE			// FP0->FP0_DATINC
PRIVATE ODATARET
PRIVATE DDATARET := FP0->FP0_DTRETO
PRIVATE OFOLLOW  , CFOLLOW  := "" 
PRIVATE OFOLLOW0 , CFOLLOW0 := "" 
PRIVATE NCOMP
PRIVATE NPESOCONT
PRIVATE NPESOCONG
PRIVATE NKMV,NKMV1,NKMV2
PRIVATE NKMC,NKMC1,NKMC2
PRIVATE NKMT,NKMT1,NKMT2
PRIVATE NKMVE ,NKMVF ,NKMVSP ,NKMVT
PRIVATE NKMVE1,NKMVF1,NKMVSP1,NKMVT1
PRIVATE NKMVE2,NKMVF2,NKMVSP2,NKMVT2
PRIVATE NKMCF 
PRIVATE NKMCF1
PRIVATE NKMCF2
PRIVATE NVALISS
PRIVATE NVALLSR,NVL2LSR
PRIVATE NVALPRE,NVL2PRE
PRIVATE NVALPRF,NVL2PRF
PRIVATE NVALTAP,NVL2TAP
PRIVATE NVALTUV,NVL2TUV
PRIVATE NVALTUR,NVL2TUR
PRIVATE NVALESC,NVL2ESC
PRIVATE NVALPED,NVL2PED
PRIVATE NVALINV,NVL2INV
PRIVATE NVALALE,NVL2ALE
PRIVATE NVALIPT,NVL2IPT
PRIVATE NVALACO,NVL2ACO
PRIVATE NVALCET,NVL2CET
PRIVATE NVALSEM,NVL2SEM
PRIVATE NVALTVA,NVL2TVA
PRIVATE NVALTEL,NVL2TEL
PRIVATE NVALOUT,NVL2OUT
PRIVATE OVALCON,NVALCON,NVL2CON
PRIVATE NVALADI,NVL2ADI
PRIVATE NVALAUX,NVL2AUX
PRIVATE OVALCUS,NVALCUS,OVL2CUS,NVL2CUS
PRIVATE NVALVIS
PRIVATE NVALTCP
PRIVATE OVALMOB,NVALMOB
PRIVATE OVALDES,NVALDES
PRIVATE OVALSEG,NVALSEG
PRIVATE NVALEQU
PRIVATE NVALGUI
PRIVATE NVALCUG
PRIVATE NVALCUT
PRIVATE OVALDIASV,NVALKMV
PRIVATE NVALBASE
PRIVATE NVALFRETE
PRIVATE OVALVIAGEM,NVALVIAGEM
PRIVATE NVALFECHT
PRIVATE NVALAQU
PRIVATE NPERRES
PRIVATE NVALRES
PRIVATE NVALUTI
PRIVATE NVALDIS
PRIVATE NVALEFE
PRIVATE NVALJUR
PRIVATE NPERSEG
PRIVATE NVALLIC
PRIVATE NVALLAV
PRIVATE NFRELAV
PRIVATE NVALCOM
PRIVATE NQTDCOM
PRIVATE NVALLUB
PRIVATE NINTLUB
PRIVATE NVALPNE
PRIVATE NPREPNE
PRIVATE NVIDPNE
PRIVATE NVALPEC
PRIVATE NVALREMFIX
PRIVATE NPERRESFIX
PRIVATE NVALRESFIX
PRIVATE NVALCASFIX
PRIVATE NVALLICFIX
PRIVATE NVALSEGFIX
PRIVATE NVALCOMFIX
PRIVATE NVALLUBFIX
PRIVATE NVALPNEFIX
PRIVATE NVALLAVFIX
PRIVATE NVALISSBDI
PRIVATE NVALPISBDI
PRIVATE NVALADMBDI
PRIVATE NVALLUCBDI
PRIVATE NVALSEGBDI
PRIVATE NVALJURBDI
PRIVATE NVALCPMBDI
PRIVATE NVALCSLBDI
PRIVATE NVALIRRBDI
PRIVATE NVALTOTBDI
PRIVATE NPERISSBDI
PRIVATE NPERPISBDI
PRIVATE NPERADMBDI
PRIVATE NPERLUCBDI
PRIVATE NPERSEGBDI
PRIVATE NPERJURBDI
PRIVATE NPERCPMBDI
PRIVATE NPERCSLBDI
PRIVATE NPERIRRBDI
PRIVATE NPERTOTBDI
PRIVATE NVALTOTX
PRIVATE OPREDIAG 
PRIVATE NVALTUR1
PRIVATE NVALTUR2
PRIVATE NVALTUR3
PRIVATE NVALMOBG
PRIVATE NVALTOTG
PRIVATE NVALCUSTG
PRIVATE NMINDIA,NMINMES
PRIVATE NPREDIAU
PRIVATE NVALBASU
PRIVATE NVALBASUT
PRIVATE NVLEST
PRIVATE NOPERADU
PRIVATE NOPERADUT
PRIVATE CDISISSU
PRIVATE CTIPISSU
PRIVATE NPERISSU
PRIVATE NBASISSU,NBASEU
PRIVATE NVALISSU
PRIVATE CTIPSEGU
PRIVATE NBASSEGU
PRIVATE NPERSEGU
PRIVATE NVALSEGU
PRIVATE NVALTOTU
PRIVATE NVALISSU1
PRIVATE NVALSEGU1
PRIVATE N3COMP
PRIVATE N3LARG
PRIVATE N3ALTU
PRIVATE N3PESO
PRIVATE NINSTRU						// VALORES P/ BASE DE CÁLCULO GRAVADOS NA TABELA ZA9 
PRIVATE NBALSA
PRIVATE NDESDTA
PRIVATE NMONDES
PRIVATE NAPOGUI
PRIVATE NCAVEXT
PRIVATE NMOBENC
PRIVATE NDMOENC
PRIVATE NVALTOTT
PRIVATE NVALCUST
PRIVATE CPROJETCOPY := ""
PRIVATE ODLG
PRIVATE CTITJAN  := SUPERGETMV("MV_LOCX248",.F.,STR0002) //"PROJETO"
PRIVATE _nTempX01,_nTempX02,_nTempX03,_nTempX04,_nTempX05,_nTempX06,_nTempX07,_cTempX08,_cTempX09,_nTempX10,_nTempX11,_nTempX12,_nTempX13,_nTempX14,_nTempX15, _nTempX16, _nTempX17, _nTempX18, _nTempX19
PRIVATE _nTmprX01,_nTmprX02,_nTmprX03,_nTmprX04,_nTmprX05,_nTmprX06,_nTmprX07,_cTmprX08,_cTmprX09,_nTmprX10,_nTmprX11,_cTmprX12,_nTmprX13,_nTmprX14,_nTmprX15,_nTmprX16,_nTmprX17,_nTmprX18,_nTmprX19
PRIVATE _oTempX01,_oTempX02,_oTempX03,_oTempX04,_oTempX05,_oTempX06,_oTempX07,_oTempX08,_oTempX09,_oTempX10,_oTempX11,_oTempX12,_oTempX13,_oTempX14,_oTempX15,_oTempX16,_oTempX17,_oTempX18,_oTempX19
PRIVATE _oTmprX01,_oTmprX02,_oTmprX03,_oTmprX04,_oTmprX05,_oTmprX06,_oTmprX07,_oTmprX08,_oTmprX09,_oTmprX10,_oTmprX11,_oTmprX12,_oTmprX13,_oTmprX14,_oTmprX15,_oTmprX16,_oTmprX17,_oTmprX18,_oTmprX19

// não mexer nestas variaveis são usadas em uma de nossas customizações - Frank 25/05/23
Private oRodSay1, oRodSay2, oRodSay3, oRodSay4, oRodSay5, oRodSay6, oRodSay7, oRodSay8, oRodSay9, oRodSayA
Private oRodGet1, oRodGet2, oRodGet3, oRodGet4, oRodGet5, oRodGet6, oRodGet7, oRodGet8, oRodGet9, oRodGetA
Private nRodCtd1, nRodCtd2, nRodCtd3, nRodCtd4, nRodCtd5, nRodCtd6, nRodCtd7, nRodCtd8, nRodCtd9, nRodCtdA
Private cRodCtd1, cRodCtd2, cRodCtd3, cRodCtd4, cRodCtd5, cRodCtd6, cRodCtd7, cRodCtd8, cRodCtd9, cRodCtdA
Private aFamFold := {}

	ProcRegua(18)

	IF EMPTY(CFILTROF12)
		CFILTROF12 := "AMBOS" 
	ENDIF

	NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

	IF NOPC == 3 .OR. NOPC == 4
		AADD(ABUTTONS , {"ANALITIC",{|| LOCA080(FP0->FP0_PROJET) },OEMTOANSI(STR0108 ),OEMTOANSI(STR0108)}) //"Duplica Itens"###"Duplica Itens"
	ENDIF
	
	// MONTA OS BOTÕES DA BARRA DE FERRAMENTAS
	IF FWHEN()
		AADD(ABUTTONS,{"S4WB001N",{||FSALVAR900()},OEMTOANSI(STR0113)         ,OEMTOANSI(STR0113 )}) //"Salvar"###"Salvar"
		AADD(ABUTTONS,{STR0111,{||LOCR034()} ,OEMTOANSI(STR0114),OEMTOANSI(STR0115)}) //"OBJETIVO"###"Disponibilidade"###"Dispon."
		AADD(ABUTTONS,{STR0116,{||LOCXITU02()} ,OEMTOANSI(STR0116),OEMTOANSI(STR0116)}) // FRANK VISÃO POR ESTRUTURA 28/09/20 //"ESTRUTURA"###"Estrutura"###"Estrutura"
		AADD(ABUTTONS,{STR0117,{|| ITCONHE() },OEMTOANSI(STR0117 ),OEMTOANSI(STR0117)}) // FRANK BANCO DE CONHECIMENTO //"CONHECIMENTO"###"Conhecimento"###"Conhecimento"
		AADD(aButtons,{"Estrutura",{|| LOCXITU19() },"Atualiza estrutura de bens","Atualiza estrutura de bens"})
		AADD(aButtons,{"Cod.Estrutura",{|| LOCXITU20() },"Cod.Estrutura","Cod.Estrutura"})

	ENDIF

	If NOPC == 4 //Manutenção
		AADD(ABUTTONS , {STR0549         ,{||LOCA079()} , OEMTOANSI(STR0549 )     ,OEMTOANSI(STR0549)}) // "Import.Tab.Peças
	EndIf

	IF EXISTBLOCK("LC001BUT") 						// --> PONTO DE ENTRADA PARA INCLUSÃO DE BOTÕES NAS AÇÕES RELACIONADAS DA MANUTENÇÃO
		ABUTTONS := EXECBLOCK("LC001BUT" , .T. , .T. , {ABUTTONS,POPC}) 
	ENDIF

	AADD(ABUTTONS , {STR0078,{||LOCA00199()} , OEMTOANSI(STR0078 ),OEMTOANSI(STR0078)}) //"Notas de Retorno"###"Notas de Retorno"###"Notas de Retorno"

	ASIZEAUT 	 := MSADVSIZE()
	IF OMAINWND:NCLIENTWIDTH > 800
		AADD( AOBJECTS, {  100, 008, .T., .T. } ) 			// ENCHOICE
		AADD( AOBJECTS, {  100, 082, .T., .T. } ) 			// MSGETDADOS
	ELSE
		AADD( AOBJECTS, {  100, 010, .T., .T. } ) 			// ENCHOICE
		AADD( AOBJECTS, {  100, 080, .T., .T. } ) 			// MSGETDADOS
	ENDIF

	AINFO 	:= {ASIZEAUT[1],ASIZEAUT[2],ASIZEAUT[3],ASIZEAUT[4],3,3}
	APOSOBJ := MSOBJSIZE( AINFO, AOBJECTS, .T. , .F. )
	APOSGET := MSOBJGETPOS((ASIZEAUT[3]-ASIZEAUT[1]),315,{{004,024,240,270}} )

	XTABTUV := {}  											// TABELA DA TUV
	XTABTUR := {} 											// TABELA DA TUR

	/*
	XFATPRF := {}
	AADD(XFATPRF,{70,0.65})
	AADD(XFATPRF,{60,0.76})
	AADD(XFATPRF,{50,0.91})
	AADD(XFATPRF,{40,1.14})
	AADD(XFATPRF,{30,1.53})
	AADD(XFATPRF,{20,2.29})
	AADD(XFATPRF,{10,4.59})
	*/

	/*
	XFATBAT := {}
	AADD(XFATBAT,{70,0.00+0.65})
	AADD(XFATBAT,{60,0.76+0.65})
	AADD(XFATBAT,{50,0.91+0.65})
	AADD(XFATBAT,{40,1.14+0.65})
	AADD(XFATBAT,{30,1.53+0.65})
	AADD(XFATBAT,{20,2.29+0.65})
	AADD(XFATBAT,{10,3.94+0.65})
	*/

	//XPESOINV := 70
	//XLARGINV := 5500
	//XALTUINV := 5200
	//XCOMPINV := 30000

	//XPESOALE := 70
	//XLARGALE := 5500
	//XALTUALE := 5200
	//XCOMPALE := 30000

	IncProc(STR0125) //"Processo 1 de 18"

	DEFINE MSDIALOG ODLG FROM ASIZEAUT[7],0 TO ASIZEAUT[6],ASIZEAUT[5] TITLE OEMTOANSI(CTITJAN) OF OMAINWND PIXEL 

		FZERATUDO()

		// --> CRIACAO DA INTERFACE.
		NFOLDERPRO := 0
		NFOLDEROBR := 0
		NFOLDERPLA := 0
		NFOLDERCUS := 0
		NFOLDERFOL := 0
		NFOLDERRES := 0
		NFOLDERDOC := 0
		NFOLDERCNP := 0								// ABA CJ.PLATAFORMA 

		APAGES  := {}

		ATITLES := {}
		ATITLES := FCFOLDER(ATITLES, POPC)

		NLIN1 := APOSOBJ[2,1]
		NCOL1 := APOSOBJ[2,2]
		NLIN2 := APOSOBJ[2,4]-APOSOBJ[2,2] 			// LARGURA
		NCOL2 := APOSOBJ[2,3]-APOSOBJ[2,1] 			// ALTURA

		// 	       TFOLDER():NEW(<NROW>,<NCOL>,<CPROMPT>,<CDLGNAMEN>,<OWND> ,<NOPTION>,<NCLRFORE>,<NCLRBACK>,<.LPIXEL.>,<.LDESIGN.>,<NWIDTH>,<NHEIGHT>,<CMSG>)
		OFOLDER := TFOLDER():NEW(NLIN1 ,NCOL1 ,ATITLES  ,APAGES     ,ODLG   ,         ,          ,          ,.T.       ,.F.        ,NLIN2   ,NCOL2    ,      )

		// FORÇA A CRIAÇÃO DO ATITLES NOVAMENTE, POIS NA V12 ESTAVA DUPLICANDO O ARRAY AO PASSAR PELO TFOLDER()
		ATITLES := {}
		ATITLES := FCFOLDER(ATITLES, POPC)

		FOR NPOS := 1 TO LEN(ATITLES)
			OFOLDER:ADIALOGS[NPOS]:OFONT := ODLG:OFONT
		NEXT

		// --> CONSISTENCIA A CADA MUDANCA DE PASTA DO OBJETO FOLDER
		OFOLDER:BSETOPTION := {|NINDO| LOCA00111(NINDO,OFOLDER:NOPTION,@ODLG,@OFOLDER) }

		CALIAS  := "FP0"
		ASAYZA0 := {}
		AGETZA0 := {}

		(LOCXCONV(1))->(DBSETORDER(1))
		(LOCXCONV(1))->(DBSEEK(CALIAS))
		WHILE (LOCXCONV(1))->(!EOF() .AND. GetSx3Cache( &(LOCXCONV(2)) ,"X3_ARQUIVO")==CALIAS)   
			IF X3USO( &(LOCXCONV(3)) ) .AND. CNIVEL >= GetSx3Cache(&(LOCXCONV(2)),"X3_NIVEL") //SX3->X3_NIVEL
				AADD(ASAYZA0,GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))  
				IF (LOCXCONV(1))->(!UPPER(ALLTRIM(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")))$UPPER("FP0_PROJET"))     
					AADD(AGETZA0,GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
				ENDIF
				IF GetSx3Cache(&(LOCXCONV(2)),"X3_CONTEXT") <> "V"
					M->&(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")) := (CALIAS)->&(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
				ELSE
					M->&(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")) := CRIAVAR(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
				ENDIF
			ENDIF
			(LOCXCONV(1))->(DBSKIP())
		ENDDO 

		// DADOS DO PROJETO
		NLIN1 := APOSOBJ[1,1]
		NCOL1 := APOSOBJ[1,2]
		NLIN2 := APOSOBJ[1,3]
		NCOL2 := APOSOBJ[1,4]
		@ NLIN1,NCOL1 TO NLIN2,NCOL2 OF ODLG PIXEL
		@ NLIN1+06,NCOL1+005 SAY   OEMTOANSI(SUPERGETMV("MV_LOCX248",.F.,STR0002)+":") SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT1  //"PROJETO"
		@ NLIN1+05,NCOL1+055 MSGET OPROJET VAR CPROJET                   WHEN FWHEN(.F.) SIZE 150,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT2 
		@ NLIN1+06,NCOL1+220 SAY   OEMTOANSI(STR0126)                              SIZE 080,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT1  //"Localidade:"
		@ NLIN1+05,NCOL1+290 MSGET OOBRA   VAR XOBRA                     WHEN FWHEN(.F.) SIZE 200,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT2 

		NLIN1 := 002
		NCOL1 := 003
		NLIN2 := (APOSOBJ[2,3]-62)-25
		NCOL2 := APOSOBJ[2,4]-07

		IF NFOLDERPRO > 0  							// DADOS DO PROJETO - TODOS OS PROJETOS
			FFOLDERPRO(NFOLDERPRO,NLIN1,NCOL1,NLIN2,NCOL2)
		ENDIF
		IncProc(STR0127) //"Processo 2 de 18"

		IF NFOLDEROBR > 0  							// LOCALIDADES - EQUIPAMENTO E PLATAFORMA
			FFOLDEROBR(NFOLDEROBR,NLIN1,NCOL1,NLIN2,NCOL2)
		ENDIF
		IncProc(STR0128) //"Processo 3 de 18"

		IncProc(STR0129) //"Processo 4 de 18"

		IncProc(STR0130) //"Processo 5 de 18"

		IF NFOLDERPLA > 0  							// PLATAFORMAS
			FFOLDERPLA(NFOLDERPLA,NLIN1,NCOL1,NLIN2,NCOL2)
		ENDIF
		IncProc(STR0131) //"Processo 6 de 18"

		IncProc(STR0132) //"Processo 7 de 18"

		IncProc(STR0133) //"Processo 8 de 18"

		IncProc(STR0134) //"Processo 9 de 18"

		IncProc(STR0135) //"Processo 10 de 18"

		IncProc(STR0136) //"Processo 11 de 18"

		IF NFOLDERRES > 0  							// RESPONSABILIDADES
			FFOLDERRES(NFOLDERRES,NLIN1,NCOL1,NLIN2-20,NCOL2)
		ENDIF
		IncProc(STR0137) //"Processo 12 de 18"

		IF NFOLDERFOL > 0  							// FOLLOW-UP
			FFOLDERFOL(NFOLDERFOL,NLIN1,NCOL1,NLIN2,NCOL2)
		ENDIF
		IncProc(STR0138) //"Processo 13 de 18"

		IF NFOLDERCUS > 0  							// CUSTOS
			FFOLDERCUS(NFOLDERCUS,NLIN1,NCOL1,NLIN2,NCOL2) // REMOVIDO EM 17/12/2020 MODULO 94
		ENDIF
		IncProc(STR0139) //"Processo 14 de 18"

		IF NFOLDERDOC > 0  							// DOCUMENTOS
			FFOLDERDOC(NFOLDERDOC,NLIN1,NCOL1,NLIN2-20,NCOL2)
		ENDIF
		IncProc(STR0140) //"Processo 15 de 18"

		IF NFOLDERCNP > 0  							// CONJUNTO TRANSPORTADOR DE PLATAFORMA
			FFOLDERCNP(NFOLDERCNP,NLIN1,NCOL1,NLIN2,NCOL2)
		ENDIF
	
		IncProc(STR0141) //"Processo 16 de 18"
	
		IncProc(STR0142) //"Processo 17 de 18"

		IF NOPC == 4
			IF LCOPYPRJ
				CSTATUS := "1"
				IF FP0->FP0_TIPOSE == "L"
					FOR NX := 1 TO LEN(OPLA_COLS)
						ACOLSAUX := OPLA_COLS[NX]
						FOR NI := 1 TO LEN(ACOLSAUX)
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    })] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VIAGEM"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM" })] := "" 
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SERREM"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_FILREM"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ITEREM"})] := ""					    
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DNFREM"})] := CTOD("")
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DNFENT"})] := CTOD("")
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PLACAI"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_REBOQI"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_MOTRET"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NMOTRE"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFRET" })] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SERRET"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ITERET"})] := ""
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTPRRT"})] := CTOD("")
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTSCRT"})] := CTOD("")
							ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ULTFAT"})] := CTOD("")
						NEXT NI
					NEXT NX 
				ENDIF
			ENDIF
		ENDIF

		OBJT := BOBKJ()								// OBJETO INICIADO

		IF NOPC == 2 .AND. SIMPLELOCK()				// VISUALIZAÇÃO - GRAVAMOS O VALOR DO PROJETO 
			_NVALPROJ := GETVALPROJ(FP0->FP0_PROJET , FP0->FP0_TIPOSE) 
			FP0->FP0_VALPRO := _NVALPROJ 
			MSRUNLOCK() 
		ENDIF
		IncProc(STR0143) //"Processo 18 de 18"

	ACTIVATE MSDIALOG ODLG CENTERED ON INIT ENCHOICEBAR(ODLG , {||VALID(ODLG)} , {|| ODLG:END()} , , ABUTTONS) 

RETURN NIL 


/*/ COPIAZA0
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A COPIA DA PRINCIPAL TABELA DO PROJETO
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION COPIAZA0(NRECNO)
local cprojet   := projeto()
local aareazbb	:= FPE->(GETAREA())
local aza0		:= {}
local azbb		:= {}
local nx		:= 1
local ctime 	:= substr(ctime,1,2)+substr(ctime,4,2)

	DBSELECTAREA("FP0")
	DBGOTO(NRECNO)

	FOR NX := 1 TO FP0->(FCOUNT())					// ARMAZENO OS DADOS PARA DUPLICAR O REGISTRO
		AADD(AZA0, FP0->(FIELDGET(NX)))
	NEXT NX

	FP0->(RECLOCK("FP0",.T.))
	FOR NX := 1 TO FP0->(FCOUNT())
		FP0->(FIELDPUT(NX, AZA0[NX]))
	NEXT NX
	FP0->FP0_PROJET := CPROJETCOPY
	FP0->FP0_STATUS := "1"
	FP0->FP0_DATINC := DDATABASE
	FP0->FP0_HORINC := CTIME
	FP0->(MSUNLOCK())

	DBSELECTAREA("FPE")
	DBSETORDER(2)
	DBSEEK(XFILIAL("FPE")+ CPROJET )
	WHILE !FPE->(EOF()) .AND. FPE->FPE_PROJET == CPROJET
		AZBB := {}
		FOR NX := 1 TO FPE->(FCOUNT())				// ARMAZENO OS DADOS PARA DUPLICAR O REGISTRO
			AADD(AZBB, FPE->(FIELDGET(NX)))
		NEXT NX

		AAREAZBB := FPE->(GETAREA())
		FPE->(RECLOCK("FPE",.T.))
		FOR NX := 1 TO FPE->(FCOUNT())
			FPE->(FIELDPUT(NX, AZBB[NX]))
		NEXT NX
		FPE->FPE_PROJET := CPROJETCOPY
		FPE->(MSUNLOCK())
		RESTAREA(AAREAZBB)

		FPE->(DBSKIP())
	ENDDO

	RESTAREA(AAREAZBB)

	aSize(AAREAZBB,0)
	FwFreeArray(AAREAZBB)

RETURN NIL 


/*/ FSALVAR900
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A COPIA DA PRINCIPAL TABELA DO PROJETO
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVAR900() 
Local AAREA := GETAREA()
Local _aOldOdlg := oDlg
Local _omainold := omainwnd

	IF ! FWHEN()
		RETURN .F.
	ENDIF

	// Validacao do x3_obrigat - frank em 20/10/2021
	If !VALID2()
		Return .F.
	EndIF

	// FRANK Z FUGA - 28/09/2020
	// CONTROLE DO ESTOQUE
	ITESTX()

	// FRANK 26/10/20
	// ROTINA PARA LIMPAR O VALOR DOS ITENS PAIS
	LOCA001A0()

	IF EXISTBLOCK("LC001VAL")
		IF !EXECBLOCK("LC001VAL" , .T. , .T. , {ODLGPLA:ACOLS,ODLGPLA:AHEADER}) 
			RETURN .F.
		ENDIF
	ENDIF

	IF MSGYESNO(STR0144 , STR0097)  //"CONFIRMA A ATUALIZAÇÃO DAS TABELAS ??"###"GPO - LOCC001.PRW"

		FSALVAR000()

		M->FP0_REVISA := FP0->FP0_REVISA

		IF VALTYPE(ODLGPLA)=="O"
			FTRAZPLA()
			LOCA00141()
			ODLGPLA:OBROWSE:REFRESH()
		ENDIF

		IF VALTYPE(ODLGRES)=="O"
			FTRAZRES()
			MUDARESB()
			ODLGRES:OBROWSE:REFRESH()
		ENDIF

		IF VALTYPE(ODLGDOC)=="O"
			FTRAZDOC()
			LOCA00146()
			ODLGDOC:OBROWSE:REFRESH()
		ENDIF

		IF VALTYPE(ODLGCNP)=="O"
			OCNPACOLS:SETDATA(ODLGCNP:ACOLS)
		ENDIF

	ENDIF

	RESTAREA( AAREA )
	omainwnd := _omainold 
	oDlg:=_aOldOdlg

	aSize(AAREA,0)
	FwFreeArray(AAREA)

RETURN NIL 


/*/ FSALVAR
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVAR(ODLG)
	IF ! FWHEN()
		ODLG:END()
		RETURN .F.
	ENDIF
	FSALVAR000()
	ODLG:END()
RETURN .T.



/*/ FSALVAR000
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVAR000()
Local _aArea := GetArea()
Local _nI
Local _cXTab
Local _cXCon

	IF ! FWHEN()
		RestArea(_aArea)

		aSize(_aArea,0)
		FwFreeArray(_aArea)
		RETURN .F.
	ENDIF

	If VALTYPE(ODLGPLA)=="O"
		FOR _NI := 1 TO LEN(ODLGPLA:ACOLS)
			IF !ODLGPLA:ACOLS[_NI][LEN(ODLGPLA:AHEADER)+1]				// --> NÃO ESTÁ DELETADO. 
				aadd(_aEquip,{ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]})
				If !empty(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CODTAB"})]) .or. !empty(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONPAG"})])
					_cXTab := ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CODTAB"})]
					_cXCon := ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONPAG"})]
					If !MaVldTabPrc(_cXTab,_cXCon,,dDataBase)
						Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0540}) //"Erro na tabela de preços, ou condição de pagamento. O orçamento será gravado mas precisa de ajustes."
						EXIT
					EndIF
				EndIF
			EndIF
		NExt
	EndIf

	PROJETO()										// RESTAURAMOS A ÁREA DA ZA0 ORIGINAL

	// FRANK Z FUGA - 28/09/2020
	// CONTROLE DO ESTOQUE
	IF TYPE(PROCNAME(1)) == "U"
		IF PROCNAME(1) == "FSALVAR"
			ITESTX()
		ENDIF
	ENDIF

	BEGIN TRANSACTION
		IF LCOPYPRJ
			CPROJETCOPY := LOCA00140("FP0_PROJET") 
			EVALTRIGGER()
			CONFIRMSX8()
		
			PROJETO()								// RESTAURAMOS A ÁREA DA ZA0 ORIGINAL
		
			COPIAZA0(FP0->(RECNO())) 				// COPIA A ZA0 ANTES DE CARREGAR TODOS OS ACOLS DOS FOLDERS
		
			M->FP0_PROJET := PROJETO(.T.)			// GUARDAMOS O NOVO ZA0 (COPIADO)
		ENDIF
		
		PROCESSA( {|| FSALVAR001()}, STR0145) //"AGUARDE... ATUALIZANDO AS TABELAS"
	END TRANSACTION

	LCOPYPRJ := .F.									// APÓS SALVAR, NÃO É MAIS UM PROJETO NOVO/COPIADO.....
	PROJETO()										// RESTAURAMOS A ÁREA DA ZA0 ORIGINAL

	RestArea(_aArea)

	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN NIL


/*/ FSALVAR001
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVAR001()
LOCAL _LALT      := .F.
LOCAL _NCNT      := 0 
LOCAL _aArea     := GetArea()

	PROCREGUA( LEN(OFOLDER:ADIALOGS) )

	IF EXISTBLOCK("LC001GRU") 						// --> PONTO DE ENTRADA PARA VALIDAR AS LINHAS DA ABA LOCAÇÕES ANTES DE SALVAR.
		_LRET := .T.
		DO CASE
		CASE ALLTRIM(FP0->FP0_TIPOSE) $ "L#P" .AND. VALTYPE(ODLGPLA) == "O"
			_LRET := EXECBLOCK("LC001GRU",.T.,.T.,{ODLGPLA:AHEADER,ODLGPLA:ACOLS})
		ENDCASE
		IF !_LRET
			RETURN _LRET
		ENDIF
	ENDIF

	FOR _NCNT := 1 TO 20
		IF "LOCA00105" $ UPPER(ALLTRIM(PROCNAME(_NCNT)))
			_LALT := .T.
			EXIT
		ENDIF
	NEXT _NCNT 

	IF _LALT										// GRAVAÇÃO DO VALOR DO PROJETO 
		_NVALPROJ := GETVALPROJ(FP0->FP0_PROJET , FP0->FP0_TIPOSE) 

		RECLOCK("FP0",.F.)
		FP0->FP0_VALPRO := _NVALPROJ
		FP0->FP0_STATUS := "1"
		FP0->(MSUNLOCK()) 
	ENDIF

	IF EXISTBLOCK("LC001GA")
		DO CASE
		CASE ALLTRIM(FP0->FP0_TIPOSE) $ "L#P" .AND. VALTYPE(ODLGPLA) == "O"
			ODLGPLA:ACOLS := EXECBLOCK("LC001GA",.T.,.T.,{ODLGPLA:AHEADER, ODLGPLA:ACOLS, FP0->FP0_PROJET,_LALT})
		ENDCASE
		IF TYPE("_NCTRGRAVA") == "N"
			_NCTRGRAVA ++
		ENDIF
	ENDIF

	IF NFOLDERPRO > 0
		INCPROC(STR0146) //"ATUALIZANDO... PROJETOS"
		FSALVARPRO("FP0") 							// PROJETOS 
	ENDIF

	IF NFOLDEROBR > 0
		INCPROC(STR0147) //"ATUALIZANDO... LOCALIDADES"
		FSALVAROBR("FP1",ACLONE(ODLGOBR:AHEADER),ACLONE(ODLGOBR:ACOLS))
	ENDIF

	IF NFOLDERPLA > 0
		INCPROC(STR0148) //"ATUALIZANDO... LOCAÇÕES"
		FSALVARPLA("FPA",ACLONE(ODLGPLA:AHEADER),ACLONE(ODLGPLA:ACOLS))
	ENDIF

	IF NFOLDERCUS > 0
		INCPROC(STR0149) //"ATUALIZANDO... CUSTOS"
		FSALVARCUS("FQ8",ACLONE(ODLGCUS:AHEADER),ACLONE(ODLGCUS:ACOLS))
	ENDIF

	IF NFOLDERFOL > 0
		INCPROC(STR0150) //"ATUALIZANDO... FOLLOW-UP"
		FSALVARFOL("FP9")  							// FOLLOW-UP
	ENDIF

	IF NFOLDERDOC > 0
		INCPROC(STR0151) //"ATUALIZANDO... DOCUMENTOS"
		FSALVARDOC("FPB",ACLONE(ODLGDOC:AHEADER),ACLONE(ODLGDOC:ACOLS))
	ENDIF

	IF NFOLDERCNP > 0
		INCPROC(STR0152) //"ATUALIZANDO... CONJUNTO TRANSPORTE P/ LOCAÇÕES"
		IF OFOLDER:NOPTION == NFOLDERCNP
			OCNPACOLS:SETDATA(ODLGCNP:ACOLS)
		ENDIF
		FSALVARCNP("FQ7",ACLONE(ODLGCNP:AHEADER),OCNPACOLS:acols) 			// SALVAR BECHANGE CONJUNTO PLATAFORMA 
	ENDIF

	IF NFOLDERRES > 0
		INCPROC(STR0153) //"ATUALIZANDO... RESPONSABILIDADES"
		FSALVARRES("FP6",ACLONE(ODLGRES:AHEADER),ORES_COLS)
	ENDIF

	// 06/10/2021 - Frank Zwarg Fuga - Ponto de entrada após a gravação do orçamento
	IF EXISTBLOCK("LC001GP")
		EXECBLOCK("LC001GP",.T.,.T.,{FP0->FP0_PROJET, NOPC})
	ENDIF

	msgalert(STR0154,STR0155) //"Registros salvos com sucesso!"###"Processo de gravação."
	RestArea(_aArea)

	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN NIL 


/*/ FSALVARPRO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARPRO(CALIAS)				// PROJETOS
LOCAL _CPROJET  := PROJETO()					// RESTAURA ZA0 E RETORNA NÚMERO DO PROJETO
LOCAL _F        := 0 
LOCAL _aArea    := GetArea()
Local aDesMarg	:= {}

	DBSELECTAREA(CALIAS)
	DBSETORDER(1)  									// FP0_FILIAL+FP0_PROJET+FP0_NUM

	DBSEEK( XFILIAL(CALIAS) + _CPROJET)

	IF NOPC == 5  									// 5=EXCLUI
		(CALIAS)->(RECLOCK(CALIAS,.F.))
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
		RETURN .T.
	ENDIF

	IF NOPC==3 										// 3=INCLUI
		(CALIAS)->(RECLOCK(CALIAS,.T.))
	ELSE
		(CALIAS)->(RECLOCK(CALIAS,.F.))
	ENDIF
	(CALIAS)->FP0_FILIAL := XFILIAL(CALIAS)
	(CALIAS)->FP0_PROJET := _CPROJET  				// NRO.PROJETO
	(CALIAS)->FP0_COD    := SUBSTR(_CPROJET,7,5)
	(CALIAS)->FP0_STATUS := CSTATUS 				// STATUS
	(CALIAS)->FP0_CODCON := CCODCONCO 				// COD.CONCORR.
	(CALIAS)->FP0_VALCON := NVALCONCO 				// VR.CONCORR.
	(CALIAS)->FP0_VALLOC := NVALCONCOL 				// VR.CONCORR.LOCAÇÃO

	// Jose Eulalio - 10/11/20222 - SIGALOC94-571 - Geração de contratos
	If FP0->(FieldPos("FP0_PDESCO")) .And. FP0->(FieldPos("FP0_PMARGE"))
		aDesMarg := DescMarg()
		If (CALIAS)->FP0_PDESCO > aDesMarg[1]
			(CALIAS)->FP0_PDESCO := aDesMarg[1] 				// Desconto do Contrato
		EndIF
		If (CALIAS)->FP0_PMARGE < aDesMarg[2]
			(CALIAS)->FP0_PMARGE := aDesMarg[2] 				// Margem do Contrato
		EndIF
	EndIf

	FOR _F := 1 TO LEN(ACAMPOZA0)
		CVARANT := CALIAS + "->" + ACAMPOZA0[_F]
		CVARPOS := "M->"		 + ACAMPOZA0[_F]
		&(CVARANT) := &(CVARPOS)
	NEXT _F 
	(CALIAS)->(MSUNLOCK())

	IF CSTATUS == "C" .OR. CSTATUS == "B" .OR. CSTATUS == "8" .OR. CSTATUS == "5" .OR. CSTATUS == ""
		BLOQCLASS(FP0->FP0_PROJET)  				// BLOQUEIO DA CLASSE DE VALOR DO PROJETO
	ENDIF

	DBSELECTAREA("FP0") 

	RestArea(_aArea)

	aSize(aDesMarg,0)
	FwFreeArray(aDesMarg)

	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN .T. 


/*/ FOBRA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR AS VARIÁVEIS DE MEMÓRIA PARA O USO DO BECHANGE.
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FOBRA() 
LOCAL LRET := .T.
LOCAL NX   := 0 

	COBRA   := SPACE(03)

	CSEQTRA := SPACE(03)
	CSEQGUI := SPACE(03)
	CSEQGRU := SPACE(03)
	CSEQCAR := SPACE(03)

	XOBRA   := SPACE(03)

	DO CASE
	CASE VALTYPE(ODLGOBR)=="O" 									// SE O OBJETO JÁ FOI CRIADO
		COBRA   := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
		XOBRA   := COBRA+" - "+ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})]
	OTHERWISE
		IF VALTYPE(ODLGOBR)=="O"
			XOBRA := COBRA+" - .:. - "+ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})]
		ENDIF
	ENDCASE

	DO CASE
	CASE FP0->FP0_TIPOSE == "L" .AND. VALTYPE(ODLGPLA)=="O"  	// SE O OBJETO JÁ FOI CRIADO
		IF ODLGPLA:LNEWLINE .AND. EMPTY(ALLTRIM(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]))
			IF LEN(OPLA_COLS) > LEN(ODLGPLA:ACOLS)
				CSEQGRU  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
				NVSEQGRU := 0
				CVSEQGRU := ""
				FOR NX := 1 TO LEN(OPLA_COLS)
					IF ALLTRIM(COBRA) == OPLA_COLS[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
						If CVSEQGRU <= OPLA_COLS[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
							NVSEQGRU := VAL(OPLA_COLS[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})])
						EndIF	
					ENDIF
				NEXT NX
				CVSEQGRU := STRZERO(NVSEQGRU+1,3)

				NPOS := ASCAN(ODLGPLA:ACOLS,{|X|ALLTRIM(X[2])==CVSEQGRU})
				IF NPOS == 0
					CSEQGRU := CVSEQGRU
				ENDIF
			ELSE
				IF ODLGPLA:NAT > 1
					CSEQGRU  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
					NVSEQGRU := 0
					CVSEQGRU := ""
					FOR NX := 1 TO LEN(ODLGPLA:aCols)
						IF ALLTRIM(COBRA) == ODLGPLA:aCols[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
							If CVSEQGRU <= ODLGPLA:aCols[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
								NVSEQGRU := VAL(ODLGPLA:aCols[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})])
							EndIF	
						ENDIF
					NEXT NX
					CVSEQGRU := STRZERO(NVSEQGRU+1,3)
					CSEQGRU  := CVSEQGRU
				ELSE
					CSEQGRU := STRZERO(LEN(ODLGPLA:ACOLS),3)
				ENDIF

				IF EXISTBLOCK("LC01ORDP") 	// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA SEQUENCIA DE EQUIPAMENTO
					If LEN(OPLA_COLS) == LEN(ODLGPLA:ACOLS)
						CSEQGRU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
					Endif
					If LEN(OPLA_COLS) < LEN(ODLGPLA:ACOLS)
						CSEQGRU := EXECBLOCK("LC01ORDP",.T.,.T.,{ CSEQGRU, ODLGPLA, ODLGPLA:NAT, _nAnt}) 
					Endif
				EndIF
			ENDIF
		ELSE
			CSEQGRU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
			IF ODLGPLA:NAT > 1 .AND. ODLGPLA:LNEWLINE
				CSEQGRU := SOMA1(ODLGPLA:ACOLS[ODLGPLA:NAT-1][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})])
				IF EXISTBLOCK("LC01ORDP") 	// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA SEQUENCIA DE EQUIPAMENTO
					If LEN(OPLA_COLS) == LEN(ODLGPLA:ACOLS)
						CSEQGRU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
					Endif
					If LEN(OPLA_COLS) < LEN(ODLGPLA:ACOLS)
						CSEQGRU := EXECBLOCK("LC01ORDP",.T.,.T.,{ CSEQGRU, ODLGPLA, ODLGPLA:NAT, _nAnt}) 
					EndIf
				EndIF
			ENDIF
		ENDIF
		IF EMPTY(CSEQGRU)
			CSEQGRU := "001"
		ENDIF
	ENDCASE

	IF EMPTY(COBRA)
		COBRA := "001"
	ENDIF

RETURN LRET


/*/ LOCA00111
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR AS VARIÁVEIS DE MEMÓRIA PARA O USO DO BECHANGE.
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00111(NINDO , NESTOU , ODLG , OFOLDER) 
LOCAL ACOLS 
LOCAL LRET := .T.
LOCAL _NX
Local nPosObr := 0

	ACOLS := {} 

	SETKEY(VK_F12 , NIL) 

	DO CASE
	CASE NESTOU==NFOLDERPLA
		FACUMUPLA()
	CASE NESTOU==NFOLDERRES
		FACUMURES()
	CASE NESTOU==NFOLDERCUS
		FTRAZMEM(.F.) 								// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS
		FACUMUCUS()
	CASE NESTOU==NFOLDERDOC
		FACUMUDOC()
	CASE NESTOU==NFOLDERCNP							// BECHANGE CONJUNTO TRANSPORTADOR PLATAFORMA 
		OCNPACOLS:SETDATA(ODLGCNP:ACOLS)
	ENDCASE

	IF VALTYPE(ODLGPLA)=="O"
		FTRAZPLA()
		LOCA00141()
		ODLGPLA:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGRES)=="O"
		FTRAZRES()
		MUDARESB()
		ODLGRES:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGCUS)=="O"
		FTRAZCUS()
		LOCA00139()
		FTRAZMEM(.T.) 								// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS 
		FCALCCUS()
		SUMVALRES() 								// SOMA VALORES DAS RESPONSABILIDADES
		ODLGCUS:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGDOC)=="O"
		FTRAZDOC()
		LOCA00146()
		ODLGDOC:OBROWSE:REFRESH()
	ENDIF

	DO CASE
	CASE NINDO == NFOLDERCUS						// ABA BASE DE CALCULO
		

		FCALCTOTAL()
		FDISPTRAN()
		FDISPGUIN()
		FDISPGRUA()

		//Zera os totais para somar novamente
		_nTempX01 := _nTempX02 := _nTempX03 := _nTempX04 := _nTempX05 := _nTempX06 := _nTempX07 := 0
		_cTempX08 := ""
		_cTempX09 := ""
		_nTempX10 := _nTempX11 := _nTempX12 := _nTempX13 := _nTempX14 := _nTempX15 := _nTempX16 := 0

		//ifranzoi - 29/08/2021
		For _NX := 1 To Len(OPLA_COLS)
			_nTempX01 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
			_nTempX02 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
			_nTempX03 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ACRESC"})]
			_nTempX04 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})]
			_nTempX05 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLBRUT"})]
			_nTempX06 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PDESC"})]
			_nTempX07 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
			_cTempX08 := OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUIM"})]
			_cTempX09 := OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUID"})]
			_nTempX10 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})]
			_nTempX11 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})]
			_nTempX14 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS"})]
			_nTempX15 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]

			//ifranzoi - 27/07/2021
			//Valor Total (Qtd Parcela * Valor Base)
			If FPA->(fieldpos("FPA_QTDPRC")) > 0
				_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QTDPRC"})]*OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
			Else
				_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
			EndIF
			// Frank em 10/10/2022
			_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})]
			_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})]
			_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]
		Next

		// Frank em 10/10/22
		_nTempX06 := ((_nTempX05 - _nTempX07) / _nTempX05) * 100
		_nTempX13 := (_nTempX14 / _nTempX07) * 100

		//ifranzoi - 29/08/2021
		//Custo Direto
		_nTempX17 := 0 
		For _NX := 1 To Len(ORES_COLS)
			If ( _NX == 1 )
				_nTempX17 := ORES_COLS[_NX][aScan(oDlgRes:aHeader,{ |x| AllTrim(x[02]) == "FP6_VALOR" })]
			Else
				_nTempX17 += ORES_COLS[_NX][aScan(oDlgRes:aHeader,{ |x| AllTrim(x[02]) == "FP6_VALOR" })]
			EndIf
		Next

		//Margem de Contribuição (Valor Base - Custo Direto)
		_nTempX18 := _nTempX16-_nTempX17
		_nTempX19 := (_nTempX18 / _nTempX16) * 100
		//ifranzoi		
		If _cTempX08 == "L"
			_cTempX08 := STR0158 //"Empresa"
		ElseIf _cTempX08 == "C"
			_cTempX08 := STR0159 //"Cliente"
		Else
			_cTempX08 := ""
		EndIF

		If _cTempX09 == "L"
			_cTempX09 := STR0158 //"Empresa"
		ElseIf _cTempX09 == "C"
			_cTempX09 := STR0159 //"Cliente"
		Else
			_cTempX09 := ""
		EndIF
		_oTempX01:Refresh()
		_oTempX02:Refresh()
		_oTempX03:Refresh()
		_oTempX04:Refresh()
		_oTempX05:Refresh()
		_oTempX06:Refresh()
		_oTempX07:Refresh()
		_oTempX08:Refresh()
		_oTempX09:Refresh()
		_oTempX10:Refresh()
		_oTempX11:Refresh()

		//Zera os totais para somar novamente
		_nTmprX01 := _nTmprX02 := _nTmprX03 := _nTmprX04 := _nTmprX05 := _nTmprX06 := _nTmprX07 := 0
		_cTmprX08 := ""
		_cTmprX09 := ""
		_nTmprX10 := _nTmprX11 := _nTmprX12 := _nTmprX13 := _nTmprX14 := _nTmprX15 := _nTmprX16 := 0

		//ifranzoi
		nPosObr := aScan(oDlgPla:aHeader, { |x| AllTrim(x[02]) == "FPA_OBRA" })

		For _NX := 1 To Len(oDlgPla:aCols)
			If ( AllTrim(oDlgPla:aCols[_NX][nPosObr]) == cObra )
				_nTmprX01 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_PREDIA"})]
				_nTmprX02 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_QUANT" })]
				_nTmprX03 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_ACRESC"})]
				_nTmprX04 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_PRCUNI"})]
				_nTmprX05 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VLBRUT"})]
				_nTmprX06 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_PDESC" })]
				_nTmprX07 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRHOR" })]
				_cTmprX08 := oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_TPGUIM"})]
				_cTmprX09 := oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_TPGUID"})]
				_nTmprX10 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIMON"})]
				_nTmprX11 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIDES"})]
				_nTmprX14 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRISS" })]
				_nTmprX15 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRSEGU"})]

				//ifranzoi - 27/07/2021
				//Valor Total (Qtd Parcela * Valor Base)
				If FPA->(fieldpos("FPA_QTDPRC")) > 0
					_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_QTDPRC"})]*oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRHOR" })]
				Else
					_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRHOR" })]
				EndIF
				// Frank em 10/10/22
				_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIMON"})]
				_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIDES"})]
				_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRSEGU"})] 	
			EndIf
		Next

		// Alterado por Frank em 10/10/22
		_nTmprX06 := ((_nTmprX05 - _nTmprX07) / _nTmprX05) * 100
		_nTmprX13 := (_nTmprX14 / _nTmprX07) * 100

		//Custo Direto
		For _NX := 1 To Len(oDlgRes:aCols)
			If ( _NX == 1 )
				_nTmprX17 := oDlgRes:aCols[_NX][aScan(oDlgRes:aHeader,{ |x| AllTrim(x[02]) == "FP6_VALOR" })]
			Else
				_nTmprX17 += oDlgRes:aCols[_NX][aScan(oDlgRes:aHeader,{ |x| AllTrim(x[02]) == "FP6_VALOR" })]
			EndIf
		Next

		//Margem de Contribuição (Valor Base - Custo Direto)
		_nTmprX18 := _nTmprX16-_nTmprX17
		//% Margem de contribuição ( Margem de Contribuição / Receita)
		_nTmprX19 := (_nTmprX18 / _nTmprX16) * 100	

		If _cTmprX08 == "L"
			_cTmprX08 := STR0559 // "Empresa"
		ElseIf _cTmprX08 == "C"
			_cTmprX08 := STR0560 // "Cliente"
		Else
			_cTmprX08 := ""
		EndIF

		If _cTmprX09 == "L"
			_cTmprX09 := STR0559 // "Empresa"
		ElseIf _cTmprX09 == "C"
			_cTmprX09 := STR0560 // "Cliente"
		Else
			_cTmprX09 := ""
		EndIF	
		_oTmprX01:Refresh()
		_oTmprX02:Refresh()
		_oTmprX03:Refresh()
		_oTmprX04:Refresh()
		_oTmprX05:Refresh()
		_oTmprX06:Refresh()
		_oTmprX07:Refresh()
		_oTmprX08:Refresh()
		_oTmprX09:Refresh()
		_oTmprX10:Refresh()
		_oTmprX11:Refresh()
		_oTmprX13:Refresh()
		_oTmprX15:Refresh()
		_oTmprX16:Refresh()
		_oTmprX17:Refresh()		
		//ifranzoi

	CASE NINDO == NFOLDERCNP						// BECHANGE CONJUNTO PLATAFORMA 
		ODLGCNP:ACOLS := ACLONE(OCNPACOLS:GETDATA("FQ7_OBRA=='"+COBRA+"' .AND. FQ7_SEQGUI='"+CSEQGRU+"'"))

		// FRANK 23/09/20
		// TRATAMENTO PARA SABER SE A ZA1 ESTA DELETADA.
		IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
			FOR _NX := 1 TO LEN(ODLGCNP:ACOLS)
				ODLGCNP:ACOLS[_NX][LEN(ODLGCNP:AHEADER)+1] := .T.
			NEXT
		ELSE
			FOR _NX := 1 TO LEN(ODLGCNP:ACOLS)
				ODLGCNP:ACOLS[_NX][LEN(ODLGCNP:AHEADER)+1] := .F.
			NEXT
		ENDIF

		MUDAZUC()

	CASE NINDO == NFOLDERPLA
		SETKEY(VK_F12 , {|| LOCA00188()}) 

	ENDCASE

	FOBRA()

	OOBRA:REFRESH()

	OFOLDER:REFRESH()
	ODLG:REFRESH()

	SETFOCUS()

RETURN LRET 


/*/ FHEADER
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR OS CAMPOS UTILIZADOS NOS GRIDES
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FHEADER( CALIAS , CCAMPOSSIM , CCAMPOSNAO, _lLeg) 
LOCAL ATABAUX
LOCAL AHEADER    := {}

DEFAULT CCAMPOSSIM := ""
DEFAULT CCAMPOSNAO := ""
DEFAULT _lLeg      := .F. // sem legenda

	CCAMPOSSIM := UPPER( ALLTRIM(CCAMPOSSIM) )
	CCAMPOSNAO := UPPER( ALLTRIM(CCAMPOSNAO) )
	If _lLeg
		ATABAUX := {}
		AADD(ATABAUX , "") // Titulo
		AADD(ATABAUX , "IMAGEM") // Campo
		AADD(ATABAUX , "@BMP") // picture
		AADD(ATABAUX , 3) // tamanho
		AADD(ATABAUX , 0) // decimal
		AADD(ATABAUX , ".F.") // valid
		AADD(ATABAUX , "") // usado
		AADD(ATABAUX , "C") // tipo
		AADD(ATABAUX , "") // F3
		AADD(ATABAUX , "V") // context
		AADD(ATABAUX , "") // cbox
		AADD(ATABAUX , "") // relacao
		AADD(ATABAUX , "") // when
		AADD(ATABAUX , "V") // visual
		AADD(AHEADER , ATABAUX)
		ATABAUX := {}
	EndIF

	(LOCXCONV(1))->( DBSETORDER(1) )
	(LOCXCONV(1))->( DBSEEK( CALIAS, .T. ) )
	WHILE ! (LOCXCONV(1))->( EOF() ) .AND. GetSx3Cache(&(LOCXCONV(2)),"X3_ARQUIVO") == CALIAS    

		IF ! X3USO( &(LOCXCONV(3)) ) 					// NÃO ESTÁ EM USO
			(LOCXCONV(1))->(DBSKIP())
			LOOP
		ENDIF

		IF UPPER( ALLTRIM( GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO") ) ) $ CCAMPOSNAO	// ESTÁ EM CAMPOSNÃO
			(LOCXCONV(1))->(DBSKIP())
			LOOP
		ENDIF

		IF ! EMPTY( CCAMPOSSIM ) .AND. ! UPPER( ALLTRIM( GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO") ) ) $ CCAMPOSSIM		// NÃO É EM CAMPOSSIM
			(LOCXCONV(1))->(DBSKIP())
			LOOP
		ENDIF

		ATABAUX := {}
		AADD(ATABAUX , TRIM(X3TITULO()))
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")   )
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_PICTURE") )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_TAMANHO") )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_DECIMAL") )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_VALID")   )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_USADO")   )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_TIPO")    )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_F3")      )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_CONTEXT") )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_CBOX")    )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_RELACAO") )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_WHEN")    )   
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_VISUAL")  )   
		IF EMPTY(ALLTRIM(GetSx3Cache(&(LOCXCONV(2)),"X3_VLDUSER")))   
			AADD(ATABAUX , "LOCA00147('"+UPPER(ALLTRIM(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")))+"')")
		ELSE
			AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_VLDUSER") )
		ENDIF
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_PICTVAR")     ) 
		AADD(ATABAUX , GetSx3Cache(&(LOCXCONV(2)),"X3_OBRIGAT")     ) 

		AADD(AHEADER , aclone(ATABAUX)             )

		(LOCXCONV(1))->(DBSKIP())
	ENDDO 

	aSize(ATABAUX,0)
	FwFreeArray(ATABAUX)

RETURN ACLONE(AHEADER) 


/*/ FCOLS
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR O CONTEÚDO UTILIZADO NOS GRIDES
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCOLS(AHEADER, CALIAS, NINDICE, CCHAVE, CCONDICAO, CFILTRO) 
LOCAL NPOS
LOCAL ACOLS0
LOCAL ACOLS     := {}
LOCAL CALIASANT := ALIAS()

	DBSELECTAREA(CALIAS)

	(CALIAS)->(DBSETORDER(NINDICE))
	(CALIAS)->(DBSEEK(CCHAVE,.T.))
	WHILE (CALIAS)->(!EOF() .AND. &CCONDICAO)
		IF !(CALIAS)->(&CFILTRO)
			(CALIAS)->(DBSKIP())
			LOOP
		ENDIF
		ACOLS0 := {} 
		FOR NPOS:=1 TO LEN(AHEADER)
			IF !AHEADER[NPOS,10]=="V"  				// X3_CONTEXT
				If alltrim(upper(AHEADER[NPOS,2])) <> "IMAGEM"
					(CALIAS)->(AADD(ACOLS0,FIELDGET(FIELDPOS(AHEADER[NPOS,2]))))
				Else
					AADD(ACOLS0,"")
				EndIF
			ELSE
				If alltrim(upper(AHEADER[NPOS,2])) <> "IMAGEM"
					(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
				Else
					AADD(ACOLS0,"")
				EndIF
			ENDIF
		NEXT
		AADD(ACOLS0,.F.  )  						// DELETED
		AADD(ACOLS,ACOLS0)
		(CALIAS)->(DBSKIP())
	ENDDO 

	IF EMPTY(ACOLS)
		ACOLS0 := {}
		FOR NPOS := 1 TO LEN(AHEADER)
			If alltrim(upper(AHEADER[NPOS,2])) <> "IMAGEM"
				(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
			Else
				AADD(ACOLS0,"")
			EndIF
		NEXT
		AADD(ACOLS0 , .F.)  						// DELETED
		AADD(ACOLS,ACOLS0)

		// Banco de conhecimento no follow-up - Frank 16/03/21
		If calias == "AC9"
			// Campo AC9_DESCRIC deixar em branco quando não localizar movimentos.
			ACOLS[1][1] := ""
		EndIf

	ENDIF

	ACOLS0 := {}
	FOR NPOS := 1 TO LEN(AHEADER)
		If alltrim(upper(AHEADER[NPOS,2])) <> "IMAGEM"	
			(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
		Else
			AADD(ACOLS0,"")
		EndIF
	NEXT
	AADD( ACOLS0, .F. )  							// DELETED

	DO CASE
	CASE CALIAS=="FP1"
		OOBR_COLS0 := {}
		AADD(OOBR_COLS0,ACLONE(ACOLS0))

	CASE CALIAS=="FP6"
		ORES_COLS0 := {}
		AADD(ORES_COLS0,ACLONE(ACOLS0))

	CASE CALIAS=="FQ8"
		OCUS_COLS0 := {}
		AADD(OCUS_COLS0,ACLONE(ACOLS0))

	CASE CALIAS=="FPB"
		ODOC_COLS0 := {}
		AADD(ODOC_COLS0,ACLONE(ACOLS0))

	CASE CALIAS=="FP9"
		OFOL_COLS0 := {}
		AADD(OFOL_COLS0,ACLONE(ACOLS0))

	CASE CALIAS == "FPA"
		OPLA_COLS0 := {}
		AADD(OPLA_COLS0, ACLONE(ACOLS0))

	ENDCASE

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

	DBSELECTAREA(CALIASANT)

RETURN ACLONE(ACOLS)


/*/ FGRAVATUDO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE GRAVAR TODOS OS ELEMENTOS UTILIZADOS NA MSNEWGETDADOS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FGRAVATUDO(CALIAS , AHEADER , ACOLS) 
LOCAL NPOS
LOCAL CCAMPO
LOCAL aAreaGrv := GetArea()

	FOR NPOS := 1 TO LEN(AHEADER)
		CCAMPO := AHEADER[NPOS,2]
		(CALIAS)->(&CCAMPO) := ACOLS[NPOS]
	NEXT

	RestArea(aAreaGrv)

	aSize(aAreaGrv,0)
	FwFreeArray(aAreaGrv)

RETURN .T.


/*/ FTRAZCOMP
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_COMPRI
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZCOMP(CCOD)
RETURN 0 // removido da 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_COMPRI")) 

/*/ FTRAZALTU
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_ALTUR
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZALTU(CCOD)
RETURN 0 // removido na 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_ALTUR" ))


/*/ FTRAZLARG
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_LARGU
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZLARG(CCOD)
RETURN 0 // removido da 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_LARGU" ))


/*/ FTRAZPESO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_PESO
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZPESO(CCOD)
RETURN 0 // removido da 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_PESO"  ))

/*/ FTRAZEIXO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_LCEX
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZEIXO(CCOD)
RETURN 0 // removido na 94 (VAL(POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_LCEX")))


/*/ FTRAZVRDIA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_VRDIA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZVRDIA(CCOD)  	// VR.POR DIA
RETURN 0 // removido na 94 Frank em 26/02/21 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_VRDIA" ))

/*/ FTRAZVRKM
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_VRKM
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZVRKM(CCOD)  	// VR.POR KM
RETURN 0 // removido na 94 Frank em 26/02/21 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_VRKM"  ))

/*/ LOCA00114
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00114()
	FCAD000("FP2")
RETURN

/*/ LOCA00115
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00115()
	FCAD000("FP3")
RETURN

/*/ LOCA00123
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00123()
	FCAD000("FP7")
RETURN

/*/ LOCA00130
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00130()
	FCAD000("FPC")
RETURN

/*/ LOCA00138
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00138()
	FCAD000("ST9")
RETURN


/*/ FCAD000
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR O CADASTRO DAS TABELAS INDICADAS
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
STATIC FUNCTION FCAD000(CALIAS)
Local CSTRING   := CALIAS

PRIVATE CCADASTRO := STR0160+CALIAS+")" //"MANUTENÇÃO DE ARQUIVOS ("
PRIVATE AROTINA   := FMONTAROT0(CALIAS)  // MONTA O AROTINA
PRIVATE CDELFUNC  := ".T."

	DBSELECTAREA(CSTRING)
	DBSETORDER(1)
	MBROWSE(6,1,22,75,CSTRING)

RETURN NIL

/*/ FMONTAROT0
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DA MONTAGEM DO AROTINA DO CADASTRO DAS TABELAS AUXILIARES
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
STATIC FUNCTION FMONTAROT0(CALIAS)  	// MONTA O AROTINA
LOCAL AROTINA   := {}

	IF CNIVEL>=5
		AADD(AROTINA,{STR0057,"AXPESQUI"  ,0,1}) //"PESQUISAR"
		AADD(AROTINA,{STR0058,"AXVISUAL"  ,0,2}) //"VISUALIZAR"
		AADD(AROTINA,{STR0060,"AXINCITU"  ,0,3}) //"INCLUIR"
		AADD(AROTINA,{STR0061,"AXALTERA"  ,0,4}) //"ALTERAR"
		AADD(AROTINA,{STR0161,"AXDELETA"  ,0,5}) //"EXCLUIR"
	ELSE
		AADD(AROTINA,{STR0057,"AXPESQUI"  ,0,1}) //"PESQUISAR"
		AADD(AROTINA,{STR0058,"AXVISUAL"  ,0,2}) //"VISUALIZAR"
	ENDIF

	IF UPPER(CALIAS)==UPPER("LOCA00115")
		AROTINA := {}
		AADD(AROTINA,{STR0057,"AXPESQUI",0,1}) //"PESQUISAR"
		AADD(AROTINA,{STR0058,"AXVISUAL",0,2}) //"VISUALIZAR"
		AADD(AROTINA,{STR0060,"LOCA031",0,3}) //"INCLUIR"
		AADD(AROTINA,{STR0061,"LOCA03101",0,4}) //"ALTERAR"
		AADD(AROTINA,{STR0161,"AXDELETA",0,5}) //"EXCLUIR"
	ENDIF

RETURN AROTINA

Function AXINCITU(cAlias,nReg,nOpc)
Local nOpca
LOCAL _aArea    := GetArea()
LOCAL _cNao     := "" // campos que não devem ser apresentados
LOCAL _aCampox  := {}

	_cNao := "FP7_ALTURA"

	(LOCXCONV(1))->(dbSetOrder(1))
	(LOCXCONV(1))->(dbSeek(cAlias))
	While !(LOCXCONV(1))->(Eof()) .and. GetSx3Cache(&(LOCXCONV(2)),"X3_ARQUIVO") == cAlias
		If SX3->(x3Usado(&(LOCXCONV(2)))) .and. !&(LOCXCONV(2)) $ _cNao
			aadd(_aCampox,GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
		EndIf
		(LOCXCONV(1))->(dbSkip())
	EndDo

	nOpcA := AxInclui( cAlias, nReg, nOpc, _aCampox)
	RestArea(_aArea)

	aSize(_aArea,0)
	FwFreeArray(_aArea)
Return nOpca

/*/ FFOLDERCUS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FFOLDERCUS(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
LOCAL NSTYLE   := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL NLINS1
LOCAL NCOLS1
LOCAL NLING1
LOCAL NCOLG1
LOCAL NLINS2
LOCAL NCOLS2
LOCAL NLING2
LOCAL NCOLG2
LOCAL NLINS3
LOCAL NCOLS3
LOCAL NLING3
LOCAL NCOLG3
LOCAL NLINS4
LOCAL NCOLS4
LOCAL NLING4
LOCAL NCOLG4
LOCAL CPROJET := PROJETO()
LOCAL _NX

	NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR 

	FOBRA()

	IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FQ8",NOPCMANU,NSTYLE}) 
	ENDIF

	CALIAS    := "FQ8"
	CCHAVE    := XFILIAL(CALIAS)+CPROJET
	CCONDICAO := 'FQ8_FILIAL+FQ8_PROJET=="'+CCHAVE+'"'
	NINDICE   := 1 									// FQ8_FILIAL+FQ8_PROJET+FQ8_OBRA+FQ8_SEQTRA+FQ8_SEQGUI+FQ8_SEQGRU+FQ8_SEQCAR
	CFILTRO   := CCONDICAO
	AHEADER   := FHEADER("FQ8")
	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	NLIN1X  := 0
	NCOL1X  := 0
	NLIN2X  := 0
	NCOL2X  := 0
	ODLGCUS := MSNEWGETDADOS():NEW(NLIN1X,NCOL1X,NLIN2X    ,NCOL2X ,NSTYLE,			  ,  	  ,""         ,      ,       ,MAXGETDAD ,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
	ODLGCUS:OBROWSE:BCHANGE := {|| LOCA00139()} 

	FACUMUCUS()
	FTRAZCUS()
	FTRAZMEM(.T.)  									// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS
	FCALCCUS()

	NLINS1 := 008
	NCOLS1 := 004
	NLING1 := 007
	NCOLG1 := 061

	NLINS2 := NLINS1
	NCOLS2 := NCOLS1+118
	NLING2 := NLING1
	NCOLG2 := NCOLG1+118

	NLINS3 := NLINS2
	NCOLS3 := NCOLS2+118
	NLING3 := NLING2
	NCOLG3 := NCOLG2+118

	NLINS4 := NLINS3
	NCOLS4 := NCOLS3+118
	NLING4 := NLING3
	NCOLG4 := NCOLG3+118

	//ifranzoi
	NLINS5 := NLINS4
	NCOLS5 := NCOLS4+128
	NLING5 := NLING4
	NCOLG5 := NCOLG4+118

	NLINS6 := NLINS5
	NCOLS6 := NCOLS5+128
	NLING6 := NLING5
	NCOLG6 := NCOLG5+118
	//ifranzoi
	NLINA := 010
	NPOS  := 0

	CLABEL := STR0181 //" TARIFAS PRINCIPAIS "
	
	NPOS:=0

	//ifranzoi - 29/08/2021
	//Zera os totais para somar novamente
	_nTempX01 := 0 
	_nTempX02 := 0
	_nTempX03 := 0
	_nTempX04 := 0
	_nTempX05 := 0
	_nTempX06 := 0
	_nTempX07 := 0
	_cTempX08 := ""
	_cTempX09 := ""
	_nTempX10 := 0
	_nTempX11 := 0
	_nTempX12 := 0
	_nTempX13 := 0
	_nTempX14 := 0
	_nTempX15 := 0
	_nTempX16 := 0
	_nTempX17 := 0
	For _NX := 1 To Len(OPLA_COLS)
		_nTempX01 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
		_nTempX02 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
		_nTempX03 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ACRESC"})]
		_nTempX04 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})]
		_nTempX05 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLBRUT"})]
		_nTempX06 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PDESC"})]
		_nTempX07 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
		_cTempX08 := OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUIM"})]
		_cTempX09 := OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUID"})]
		_nTempX10 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})]
		_nTempX11 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})]
		_nTempX14 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS"})]
		_nTempX15 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]

		//ifranzoi - 27/07/2021
		If FPA->(fieldpos("FPA_QTDPRC")) > 0
			_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QTDPRC"})]*OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
		Else
			_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
		EndIF
		// Frank em 10/10/22
		_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})]
		_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})]
		_nTempX16 += OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]
	Next

	// Frank em 10/10/2022
	_nTempX06 := ((_nTempX05 - _nTempX07) / _nTempX05) * 100
	_nTempX13 := (_nTempX14 / _nTempX07) * 100

	//Custo Direto
	_nTempX17 := 0
	For _NX := 1 To Len(ORES_COLS)
		If ( _NX == 1 )
			_nTempX17 := ORES_COLS[_NX][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]
		Else
			_nTempX17 += ORES_COLS[_NX][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]
		EndIf
	Next

	//Margem de Contribuição (Valor Base - Custo Direto)
	_nTempX18 := _nTempX16-_nTempX17
	//% Margem de contribuição ( Margem de Contribuição / Receita)
	_nTempX19 := (_nTempX18 / _nTempX16) * 100

	If _cTempX08 == "L"
		_cTempX08 := STR0158 //"Empresa"
	ElseIf _cTempX08 == "C"
		_cTempX08 := STR0159 //"Cliente"
	Else
		_cTempX08 := ""
	EndIF

	If _cTempX09 == "L"
		_cTempX09 := STR0158 //"Empresa"
	ElseIf _cTempX09 == "C"
		_cTempX09 := STR0159 //"Cliente"
	Else
		_cTempX09 := ""
	EndIF

	//Zera os totais para somar novamente
	_nTmprX01 := 0
	_nTmprX02 := 0
	_nTmprX03 := 0
	_nTmprX04 := 0
	_nTmprX05 := 0
	_nTmprX06 := 0
	_nTmprX07 := 0
	_cTmprX08 := ""
	_cTmprX09 := ""
	_nTmprX10 := 0
	_nTmprX11 := 0
	_nTmprX13 := 0
	_nTmprX14 := 0
	_nTmprX15 := 0
	_nTmprX16 := 0
	_nTempX17 := 0
	_nTempX18 := 0
	_nTempX19 := 0
	//ifranzoi
	nPosObr := aScan(oDlgPla:aHeader, { |x| AllTrim(x[02]) == "FPA_OBRA" })
	For _NX := 1 To Len(oDlgPla:aCols)
		If ( AllTrim(oDlgPla:aCols[_NX][nPosObr]) == cObra )
			_nTmprX01 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_PREDIA"})]
			_nTmprX02 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_QUANT" })]
			_nTmprX03 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_ACRESC"})]
			_nTmprX04 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_PRCUNI"})]
			_nTmprX05 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VLBRUT"})]
			_nTmprX06 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_PDESC" })]
			_nTmprX07 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRHOR" })]
			_cTmprX08 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_TPGUIM"})]
			_cTmprX09 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_TPGUID"})]
			_nTmprX10 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIMON"})]
			_nTmprX11 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIDES"})]
			_nTmprX14 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRISS" })]
			_nTmprX15 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRSEGU"})]

			//ifranzoi - 27/07/2021
			//Valor Total (Qtd Parcela * Valor Base)
			If FPA->(fieldpos("FPA_QTDPRC")) > 0
				_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_QTDPRC"})]*oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRHOR" })]
			Else
				_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRHOR" })]
			EndIF
			// Frank em 10/10/22
			_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIMON"})]
			_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_GUIDES"})]
			_nTmprX16 += oDlgPla:aCols[_NX][aScan(oDlgPla:aHeader,{ |X| AllTrim(X[02]) == "FPA_VRSEGU"})]
		EndIf
	Next

	// Frank em 10/10/22
	_nTmprX06 := ((_nTmprX05 - _nTmprX07) / _nTmprX05) * 100
	_nTmprX13 := (_nTmprX14 / _nTmprX07) * 100

	//Custo Direto
	_nTmprX17 := 0
	For _NX := 1 To Len(oDlgRes:aCols)
		If ( _NX == 1 )
			_nTmprX17 := oDlgRes:aCols[_NX][aScan(oDlgRes:aHeader,{ |x| AllTrim(x[02]) == "FP6_VALOR" })]
		Else
			_nTmprX17 += oDlgRes:aCols[_NX][aScan(oDlgRes:aHeader,{ |x| AllTrim(x[02]) == "FP6_VALOR" })]
		EndIf
	Next
	//Margem de Contribuição (Valor Base - Custo Direto)
	_nTmprX18 := _nTmprX16-_nTmprX17
	//% Margem de contribuição ( Margem de Contribuição / Receita)
	_nTmprX19 := (_nTmprX18 / _nTmprX16) * 100
	If _cTmprX08 == "L"
		_cTmprX08 := STR0559 // "Empresa"
	ElseIf _cTmprX08 == "C"
		_cTmprX08 := STR0560 // "Cliente"
	Else
		_cTmprX08 := ""
	EndIF

	If _cTmprX09 == "L"
		_cTmprX09 := STR0559 // "Empresa"
	ElseIf _cTmprX09 == "C"
		_cTmprX09 := STR0560 // "Cliente"
	Else
		_cTmprX09 := ""
	EndIF	
	DO CASE
	CASE FP0->FP0_TIPOSE == "L"
		NCOLS3 := NCOLS1
		NCOLG3 := NCOLG1
		NCOLS4 := NCOLS2
		NCOLG4 := NCOLG2
		NCOLS5 := NCOLS4+128
		NCOLG5 := NCOLG4+134
		NCOLS6 := NCOLS5+128
		NCOLG6 := NCOLG5+134	

		//CLABEL := " CUSTOS LOCAÇÃO - TOTAIS "
		CLABEL := STR0550 //" CUSTOS LOCAÇÃO - Contrato "
		NPOS   := 0.3

		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0551) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Qtd. Base"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0561) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Quantidade"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0562) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Acréscimo"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0563) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Unitário"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0564) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Bruto"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0565) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"% Desconto"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0566) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Base"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0569) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Vlr.Frete Ida"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0570) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Vlr.Frete Volta"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0571) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Custo Direto"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0572) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Margem de contribuição"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0573) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"% - Margem de contribuição"
		@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI(STR0574) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Total"

		NPOS := 0.3
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX01 var _nTempX01      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX02 var _nTempX02      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX03 var _nTempX03      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX04 var _nTempX04      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX05 var _nTempX05      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX06 var _nTempX06      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX07 var _nTempX07      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX10 var _nTempX10      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX11 var _nTempX11      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX17 var _nTempX17      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX18 var _nTempX18      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)	
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX19 var _nTempX19      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)	
		@ NLING2+(NLINA*(++NPOS-1)),NCOLG3+13 MSGET _oTempX16 var _nTempX16      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)	
		@ NLINS2-006,NCOLS3-002 TO NLINS3+(NLINA*(++NPOS-1))+008,NCOLS3+115 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

		//CLABEL := " ISS E SEGURO LOCAÇÃO - TOTAIS "
		CLABEL := STR0575 //" ISS E SEGURO LOCAÇÃO - Contrato "
		NPOS   := 0.3

		@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI(STR0576) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"% ISS"
		@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI(STR0577) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor ISS"
		@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI(STR0578) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Seguro"
		
		NPOS := 0.3
		//@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _nTempX12      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.)
		@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _oTempX13 var _nTempX13      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)
		@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _oTempX14 var _nTempX14      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)
		@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _oTempX15 var _nTempX15      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)

		@ NLINS3-006,NCOLS4-002 TO NLINS4+(NLINA*(++NPOS-1))+002,NCOLS4+125 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

		//ifranzoi
		CLABEL := STR0579 //" CUSTOS LOCAÇÃO - OBRA "
		NPOS   := 0.3

		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0580) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Qtd. Base"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0581) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Quantidade"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0582) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Acréscimo"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0583) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Unitário"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0584) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Bruto"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0585) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"% Desconto"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0586) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Base"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0589) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Vlr.Frete Ida"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0590) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Vlr.Frete Volta"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0591) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Custo Direto"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0592) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Margem de contribuição"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0593) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"% - Margem de contribuição"
		@ NLINS5+(NLINA*(++NPOS-1)),NCOLS5 SAY OEMTOANSI(STR0594) SIZE 80,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Total"

		NPOS := 0.3
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX01 var _nTmprX01      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX02 var _nTmprX02      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX03 var _nTmprX03      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX04 var _nTmprX04      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX05 var _nTmprX05      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX06 var _nTmprX06      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX07 var _nTmprX07      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX10 var _nTmprX10      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX11 var _nTmprX11      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)

		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX17 var _nTmprX17      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX18 var _nTmprX18      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)	
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX19 var _nTmprX19      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)	
		@ NLING5+(NLINA*(++NPOS-1)),NCOLG5+10 MSGET _oTmprX16 var _nTmprX16      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)	

		@ NLINS5-006,NCOLS5-002 TO NLINS4+(NLINA*(++NPOS-1))+008,NCOLS5+125 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

		CLABEL := STR0595 //" ISS E SEGURO LOCAÇÃO - OBRA "
		NPOS   := 0.3

		@ NLINS6+(NLINA*(++NPOS-1)),NCOLS6 SAY OEMTOANSI(STR0596) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"% ISS"
		@ NLINS6+(NLINA*(++NPOS-1)),NCOLS6 SAY OEMTOANSI(STR0597) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor ISS"
		@ NLINS6+(NLINA*(++NPOS-1)),NCOLS6 SAY OEMTOANSI(STR0598) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] //"Valor Seguro"

		NPOS := 0.3	 

		@ NLING6+(NLINA*(++NPOS-1)),NCOLG6 MSGET _oTmprX13 var _nTmprX13      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)
		@ NLING6+(NLINA*(++NPOS-1)),NCOLG6 MSGET _oTmprX14 var _nTmprX14      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)
		@ NLING6+(NLINA*(++NPOS-1)),NCOLG6 MSGET _oTmprX15 var _nTmprX15      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)

		@ NLINS6-006,NCOLS6-002 TO NLINS5+(NLINA*(++NPOS-1))+002,NCOLS6+125 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]	
		//ifranzoi
	ENDCASE

RETURN NIL


/*/ FDISPGUIN
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FDISPGUIN()
	IF VALTYPE(OPREDIAG) != "O"  					// SE O OBJETO JÁ FOI CRIADO
		RETURN NIL
	ENDIF
	OPREDIAG:REFRESH()
	//OVALBASG:REFRESH()
	//OVALBASGT:REFRESH()
	//OVALMOBG:REFRESH()
	//OVALDESG:REFRESH()
	//OVALISSG:REFRESH()
	//OVALSEGG:REFRESH()
	//OVALTOTG:REFRESH()
	//OVALRENTG:REFRESH()
RETURN NIL


/*/ FDISPTRAN
ITUP BUSINESS - TOTVS RENTAL
TYPE FUNCTION
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FDISPTRAN() 
	IF VALTYPE(OVALDIASV) != "O"  					// SE O OBJETO JÁ FOI CRIADO
		RETURN NIL
	ENDIF
	OVALDIASV:REFRESH()
	//OVALDIASC:REFRESH()
	//OVALKMV:REFRESH()
	//OVALKMC:REFRESH()
	//OTIPOCAT:REFRESH()
	//OVALBASE:REFRESH()
	//OVALBASET:REFRESH()
	//OVALCUT:REFRESH()
	//OVALRENTG:REFRESH()
RETURN NIL


/*/ LOCA00139
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00139() 
	FOBRA()
	IF ODLGCUS:NAT > LEN(ODLGCUS:ACOLS)
		ODLGCUS:NAT := LEN(ODLGCUS:ACOLS)
	ENDIF
	ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"  })] := COBRA
	ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})] := CSEQTRA
	ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})] := CSEQGUI
	ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})] := CSEQGRU
	ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})] := CSEQCAR
	ODLGCUS:OBROWSE:REFRESH()
RETURN .T. 


/*/ FSALVARCUS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARCUS(CALIAS , AHEADER , ACOLS)  	// CUS
LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL _aArea    := GetArea()

	// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
	IF OFOLDER:NOPTION == NFOLDERCUS
		FTRAZMEM(.F.)  								// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS 
		FACUMUCUS()
	ENDIF
	ACOLS := ACLONE(OCUS_COLS)

	DBSELECTAREA(CALIAS)
	DBSETORDER(1)

	IF NOPC != 5 									// 5=EXCLUI
		FOR NPOS:=1 TO LEN(ACOLS)
			COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"  })]
			CSEQTRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
			CSEQGUI := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})]
			CSEQGRU := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})]
			CSEQCAR := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})]
			IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR)  //!DELETED()
				DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR)
				IF EOF()
					RECLOCK(CALIAS,.T.)
				ELSE
					RECLOCK(CALIAS,.F.)
				ENDIF
				FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
				(CALIAS)->FQ8_FILIAL := XFILIAL(CALIAS)
				(CALIAS)->FQ8_PROJET := CPROJET
				(CALIAS)->FQ8_OBRA	 := COBRA
				(CALIAS)->FQ8_SEQTRA := CSEQTRA
				(CALIAS)->FQ8_SEQGUI := CSEQGUI
				(CALIAS)->FQ8_SEQGRU := CSEQGRU
				(CALIAS)->FQ8_SEQCAR := CSEQCAR
				(CALIAS)->(MSUNLOCK())
				AADD(AGRAVADOS,RECNO()) 			// GRAVADOS
			ENDIF
		NEXT
	ENDIF

	// EXCLUI OS REGISTROS ALTERADOS
	DBSEEK(XFILIAL(CALIAS)+CPROJET)
	WHILE !EOF() .AND. FQ8_FILIAL+FQ8_PROJET == XFILIAL(CALIAS)+CPROJET
		IF ASCAN(AGRAVADOS,RECNO()) == 0
			RECLOCK(CALIAS,.F.)
			(CALIAS)->(DBDELETE())
			(CALIAS)->(MSUNLOCK())
		ENDIF
		DBSKIP()
	ENDDO 

	restarea(_aArea)

	aSize(AGRAVADOS,0)
	FwFreeArray(AGRAVADOS)

	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN


/*/ FZERATUDO
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FZERATUDO()						// USADO NA ROTINA FMANU
	//NVALLSRM := NVL2LSRM := 0
	//NVALPREM := NVL2PREM := 0
	//NVALPRFM := NVL2PRFM := 0
	//NVALTAPM := NVL2TAPM := 0
	//NVALTUVM := NVL2TUVM := 0
	//NVALTURM := NVL2TURM := 0
	//NVALESCM := NVL2ESCM := 0
	//NVALPEDM := NVL2PEDM := 0
	//NVALINVM := NVL2INVM := 0
	//NVALALEM := NVL2ALEM := 0

	//NVALIPTM := NVL2IPTM := 0
	//NVALACOM := NVL2ACOM := 0
	//NVALCETM := NVL2CETM := 0
	//NVALSEMM := NVL2SEMM := 0
	//NVALTVAM := NVL2TVAM := 0
	//NVALTELM := NVL2TELM := 0
	//NVALOUTM := NVL2OUTM := 0
	//NVALCONM := NVL2CONM := 0
	//NVALADIM := NVL2ADIM := 0
	//NVALAUXM := NVL2AUXM := 0
	//NVALCUSM := NVL2CUSM := 0

	//NVALLSRD := NVL2LSRD := 0
	//NVALPRED := NVL2PRED := 0
	//NVALPRFD := NVL2PRFD := 0
	//NVALTAPD := NVL2TAPD := 0
	//NVALTUVD := NVL2TUVD := 0
	//NVALTURD := NVL2TURD := 0
	//NVALESCD := NVL2ESCD := 0
	//NVALPEDD := NVL2PEDD := 0
	//NVALINVD := NVL2INVD := 0
	//NVALALED := NVL2ALED := 0

	//NVALIPTD := NVL2IPTD := 0
	//NVALACOD := NVL2ACOD := 0
	//NVALCETD := NVL2CETD := 0
	//NVALSEMD := NVL2SEMD := 0
	//NVALTVAD := NVL2TVAD := 0
	//NVALTELD := NVL2TELD := 0
	//NVALOUTD := NVL2OUTD := 0
	//NVALCOND := NVL2COND := 0
	//NVALADID := NVL2ADID := 0
	//NVALAUXD := NVL2AUXD := 0
	//NVALCUSD := NVL2CUSD := 0

	NVALLSR  := NVL2LSR  := 0
	NVALPRE  := NVL2PRE  := 0
	NVALPRF  := NVL2PRF  := 0
	NVALTAP  := NVL2TAP  := 0
	NVALTUV  := NVL2TUV  := 0
	NVALTUR  := NVL2TUR  := 0
	NVALESC  := NVL2ESC  := 0
	NVALPED  := NVL2PED  := 0
	NVALINV  := NVL2INV  := 0
	NVALALE  := NVL2ALE  := 0

	NVALIPT  := NVL2IPT  := 0
	NVALACO  := NVL2ACO  := 0
	NVALCET  := NVL2CET  := 0
	NVALSEM  := NVL2SEM  := 0
	NVALTVA  := NVL2TVA  := 0
	NVALTEL  := NVL2TEL  := 0
	NVALOUT  := NVL2OUT  := 0
	NVALCON  := NVL2CON  := 0
	NVALADI  := NVL2ADI  := 0
	NVALAUX  := NVL2AUX  := 0
	NVALCUS  := NVL2CUS  := 0

	NVALVIS  := 0
	NVALTCP  := 0

	NVALGUI  := 0
	NVALCUG  := 0

	NVALCUT    := 0
	//NVALDIASC  := 0
	NVALBASE   := 0
	//NVALBASET  := 0
	//NVALFRETES := 0

	//NVADBASEI  := 0
	//NVAKBASEI  := 0

	//NVADCUT    := 0
	//NVADDIASV  := 0
	//NVADDIASC  := 0
	//NVADBASE   := 0
	//NVADBASET  := 0
	//NVADFRETES := 0

	//NVAKCUT    := 0
	//NVAKDIASV  := 0
	//NVAKDIASC  := 0
	//NVAKBASE   := 0
	//NVAKBASET  := 0
	//NVAKFRETES := 0

	NVALFRETE  := 0
	//NVALPRET   := 0

	NVALAQU := 0
	NPERRES := 0
	NVALRES := 0
	NVALUTI := 0
	NVALDIS := 0
	NVALEFE := 0
	NVALJUR := 0
	NPERSEG := 0

	NVALLIC := 0
	NVALLAV := 0
	NFRELAV := 0
	NVALCOM := 0
	NQTDCOM := 0
	NVALLUB := 0
	NINTLUB := 0
	NVALPNE := 0
	NPREPNE := 0
	NVIDPNE := 0
	NVALPEC := 0

	NVALREMFIX := 0
	NPERRESFIX := 0
	NVALRESFIX := 0
	NVALCASFIX := 0
	NVALLICFIX := 0
	NVALSEGFIX := 0

	NVALCOMFIX := 0
	NVALLUBFIX := 0
	NVALPNEFIX := 0
	NVALLAVFIX := 0

	NVALISSBDI := 0
	NVALPISBDI := 0
	NVALADMBDI := 0
	NVALLUCBDI := 0
	NVALSEGBDI := 0
	NVALJURBDI := 0
	NVALCPMBDI := 0
	NVALCSLBDI := 0
	NVALIRRBDI := 0
	NVALTOTBDI := 0

	NPERISSBDI := 0
	NPERPISBDI := 0
	NPERADMBDI := 0
	NPERLUCBDI := 0
	NPERSEGBDI := 0
	NPERJURBDI := 0
	NPERCPMBDI := 0
	NPERCSLBDI := 0
	NPERIRRBDI := 0
	NPERTOTBDI := 0

	NVALTOTT  := 0
	NVALTOTG  := 0
	NVALTOTX  := 0

	NVALTUR1  := 0
	NVALTUR2  := 0
	NVALTUR3  := 0

	//NVALBASG  := 0
	//NVALBASGT := 0
	NVALMOBG  := 0
	//NVALDESG  := 0
	//NVALTACG  := 0
	//NVALISSG  := 0
	//NVALSEGG  := 0
	NVALTOTG  := 0
	NMINDIA	  := 0
	NMINMES	  := 0

	//NVAMMOBG  := 0
	//NVAMDESG  := 0
	//NVAMISSG  := 0
	//NVAMSEGG  := 0
	//NVAMTOTG  := 0

	NPREDIAU  := 0
	NVALBASU  := 0
	NVALBASUT := 0
	//NVALMOBU  := 0
	//NVALDESU  := 0
	//NVALCHUMB := 0
	NVLEST	  := 0
	//NMONTAGU  := 0
	//NDESMONU  := 0
	//NTELESCU  := 0
	//NANCORAU  := 0
	//NGUIMONU  := 0
	//NGUIDESU  := 0
	NOPERADU  := 0
	NOPERADUT := 0

	CDISISSU  := SPACE(01)
	CTIPISSU  := SPACE(01)
	NPERISSU  := 0
	NBASISSU  := NBASEU := 0
	NVALISSU  := 0
	CTIPSEGU  := SPACE(01)
	NPERSEGU  := 0
	NBASSEGU  := 0
	NVALSEGU  := 0
	NVALTOTU  := 0

	//NVALCUSIG := 0
	N3COMP    := 0
	N3LARG    := 0
	N3ALTU    := 0
	N3PESO    := 0

RETURN NIL


/*/ FTRAZMEM
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZMEM(LTRAZ)
LOCAL NPOS
LOCAL ATABAUX
LOCAL CCAMPO
LOCAL CVAR
LOCAL LRET    := .T.

	ATABAUX:={}

	AADD(ATABAUX,{"NVALLSR"   , "FQ8_VALLSR"})
	AADD(ATABAUX,{"NVALPRE"   , "FQ8_VALPRE"})
	AADD(ATABAUX,{"NVALPRF"   , "FQ8_VALPRF"})
	AADD(ATABAUX,{"NVALTAP"   , "FQ8_VALTAP"})
	AADD(ATABAUX,{"NVALTUV"   , "FQ8_VALTUV"})
	AADD(ATABAUX,{"NVALTUR"   , "FQ8_VALTUR"})
	AADD(ATABAUX,{"NVALESC"   , "FQ8_VALESC"})
	AADD(ATABAUX,{"NVALPED"   , "FQ8_VALPED"})
	AADD(ATABAUX,{"NVALINV"   , "FQ8_VALINV"})

	AADD(ATABAUX,{"NVALIPT"   , "FQ8_VALIPT"})
	AADD(ATABAUX,{"NVALACO"   , "FQ8_VALACO"})
	AADD(ATABAUX,{"NVALCET"   , "FQ8_VALCET"})
	AADD(ATABAUX,{"NVALSEM"   , "FQ8_VALSEM"})
	AADD(ATABAUX,{"NVALTVA"   , "FQ8_VALTVA"})
	AADD(ATABAUX,{"NVALTEL"   , "FQ8_VALTEL"})
	AADD(ATABAUX,{"NVALOUT"   , "FQ8_VALOUT"})
	AADD(ATABAUX,{"NVALCON"   , "FQ8_VALCON"})
	AADD(ATABAUX,{"NVALADI"   , "FQ8_VALADI"})
	AADD(ATABAUX,{"NVALAUX"   , "FQ8_VALAUX"})

	AADD(ATABAUX,{"NVL2LSR"   , "FQ8_VL2LSR"})
	AADD(ATABAUX,{"NVL2PRE"   , "FQ8_VL2PRE"})
	AADD(ATABAUX,{"NVL2PRF"   , "FQ8_VL2PRF"})
	AADD(ATABAUX,{"NVL2TAP"   , "FQ8_VL2TAP"})
	AADD(ATABAUX,{"NVL2TUV"   , "FQ8_VL2TUV"})
	AADD(ATABAUX,{"NVL2TUR"   , "FQ8_VL2TUR"})
	AADD(ATABAUX,{"NVL2ESC"   , "FQ8_VL2ESC"})
	AADD(ATABAUX,{"NVL2PED"   , "FQ8_VL2PED"})
	AADD(ATABAUX,{"NVL2INV"   , "FQ8_VL2INV"})

	AADD(ATABAUX,{"NVL2IPT"   , "FQ8_VL2IPT"})
	AADD(ATABAUX,{"NVL2ACO"   , "FQ8_VL2ACO"})
	AADD(ATABAUX,{"NVL2CET"   , "FQ8_VL2CET"})
	AADD(ATABAUX,{"NVL2SEM"   , "FQ8_VL2SEM"})
	AADD(ATABAUX,{"NVL2TVA"   , "FQ8_VL2TVA"})
	AADD(ATABAUX,{"NVL2TEL"   , "FQ8_VL2TEL"})
	AADD(ATABAUX,{"NVL2OUT"   , "FQ8_VL2OUT"})
	AADD(ATABAUX,{"NVL2CON"   , "FQ8_VL2CON"})
	AADD(ATABAUX,{"NVL2ADI"   , "FQ8_VL2ADI"})
	AADD(ATABAUX,{"NVL2AUX"   , "FQ8_VL2AUX"})

	AADD(ATABAUX,{"NVALTCP"   , "FQ8_VALTCP"})
	AADD(ATABAUX,{"NVALVIS"   , "FQ8_VALVIS"})

	AADD(ATABAUX,{"NVALMOB"   , "FQ8_VALMOB"})
	AADD(ATABAUX,{"NVALDES"   , "FQ8_DESMOB"})
	AADD(ATABAUX,{"NVALSEG"   , "FQ8_SEGGUI"})
	AADD(ATABAUX,{"NVALGUI"   , "FQ8_VALGUI"})
	AADD(ATABAUX,{"NVALEQU"   , "FQ8_VALEQU"})

	// BDI
	AADD(ATABAUX,{"NVALAQU"   , "FQ8_AQUISI"})
	AADD(ATABAUX,{"NPERRES"   , "FQ8_PERRSD"})
	AADD(ATABAUX,{"NVALRES"   , "FQ8_VALRSD"})
	AADD(ATABAUX,{"NVALUTI"   , "FQ8_VIDAUT"})
	AADD(ATABAUX,{"NVALDIS"   , "FQ8_DISPVE"})
	AADD(ATABAUX,{"NVALEFE"   , "FQ8_VIDAEF"})
	AADD(ATABAUX,{"NVALJUR"   , "FQ8_JUROSM"})
	AADD(ATABAUX,{"NPERSEG"   , "FQ8_SEGURP"})
	AADD(ATABAUX,{"NVALLIC"   , "FQ8_LICENP"})
	AADD(ATABAUX,{"NVALLAV"   , "FQ8_LAVAGE"})
	AADD(ATABAUX,{"NFRELAV"   , "FQ8_FREQLA"})
	AADD(ATABAUX,{"NVALCOM"   , "FQ8_COMBUS"})
	AADD(ATABAUX,{"NQTDCOM"   , "FQ8_QTDCOM"})
	AADD(ATABAUX,{"NVALLUB"   , "FQ8_LUBRIF"})
	AADD(ATABAUX,{"NINTLUB"   , "FQ8_INTLUB"})
	AADD(ATABAUX,{"NVALPNE"   , "FQ8_QTDPNE"})
	AADD(ATABAUX,{"NPREPNE"   , "FQ8_PREPNE"})
	AADD(ATABAUX,{"NVIDPNE"   , "FQ8_VIDAPN"})
	AADD(ATABAUX,{"NVALPEC"   , "FQ8_CONSER"})

	// CUSTO FIXO
	AADD(ATABAUX,{"NVALREMFIX", "FQ8_REMCAP"})
	AADD(ATABAUX,{"NPERRESFIX", "FQ8_PERRES"})
	AADD(ATABAUX,{"NVALRESFIX", "FQ8_VALRES"})
	AADD(ATABAUX,{"NVALCASFIX", "FQ8_CASCO" })
	AADD(ATABAUX,{"NVALLICFIX", "FQ8_LICENC"})
	AADD(ATABAUX,{"NVALSEGFIX", "FQ8_SEGURO"})

	// CUSTO VARIÁVEL
	AADD(ATABAUX,{"NVALCOMFIX", "FQ8_VALCOM"})
	AADD(ATABAUX,{"NVALLUBFIX", "FQ8_VALLUB"})
	AADD(ATABAUX,{"NVALPNEFIX", "FQ8_VALPNE"})
	AADD(ATABAUX,{"NVALLAVFIX", "FQ8_VALLAV"})

	//  TARIFAS
	AADD(ATABAUX,{"NPERISSBDI", "FQ8_PERISS"})
	AADD(ATABAUX,{"NPERPISBDI", "FQ8_PERPIS"})
	AADD(ATABAUX,{"NPERADMBDI", "FQ8_PERADM"})
	AADD(ATABAUX,{"NPERLUCBDI", "FQ8_PERLUC"})
	AADD(ATABAUX,{"NPERSEGBDI", "FQ8_PERSEG"})
	AADD(ATABAUX,{"NPERJURBDI", "FQ8_PERJUR"})
	AADD(ATABAUX,{"NPERCPMBDI", "FQ8_PERCPM"})
	AADD(ATABAUX,{"NPERCSLBDI", "FQ8_PERCSL"})
	AADD(ATABAUX,{"NPERIRRBDI", "FQ8_PERIRR"})
	AADD(ATABAUX,{"NPERTOTBDI", "FQ8_PERTOT"})

	AADD(ATABAUX,{"NVALISSBDI", "FQ8_VALISS"})
	AADD(ATABAUX,{"NVALPISBDI", "FQ8_VALPIS"})
	AADD(ATABAUX,{"NVALADMBDI", "FQ8_VALADM"})
	AADD(ATABAUX,{"NVALLUCBDI", "FQ8_VALLUC"})
	AADD(ATABAUX,{"NVALSEGBDI", "FQ8_VALSEG"})
	AADD(ATABAUX,{"NVALJURBDI", "FQ8_VALJUR"})
	AADD(ATABAUX,{"NVALCPMBDI", "FQ8_VALCPM"})
	AADD(ATABAUX,{"NVALCSLBDI", "FQ8_VALCSL"})
	AADD(ATABAUX,{"NVALIRRBDI", "FQ8_VALIRR"})
	AADD(ATABAUX,{"NVALTOTBDI", "FQ8_VALTOT"})

	AADD(ATABAUX,{"NVALFRETE" , "FQ8_VRFRET"})

	AADD(ATABAUX,{"N3COMP"    , "FQ8_COMPT" })
	AADD(ATABAUX,{"N3LARG"    , "FQ8_LARGT" })
	AADD(ATABAUX,{"N3ALTU"    , "FQ8_ALTUT" })
	AADD(ATABAUX,{"N3PESO" 	  , "FQ8_PESOT" })
	AADD(ATABAUX,{"NVALFECHT" , "FQ8_VALFEC"})		// VALOR FECHADO

	AADD(ATABAUX,{"NINSTRU"   , "FQ8_INSTRU"})
	AADD(ATABAUX,{"NBALSA"    , "FQ8_BALSA"})
	AADD(ATABAUX,{"NDESDTA"   , "FQ8_DESDTA"})
	AADD(ATABAUX,{"NMONDES"   , "FQ8_MONDES"})
	AADD(ATABAUX,{"NAPOGUI"   , "FQ8_APOGUI"})
	AADD(ATABAUX,{"NCAVEXT"   , "FQ8_CAVEXT"})
	AADD(ATABAUX,{"NMOBENC"   , "FQ8_MODENC"})
	AADD(ATABAUX,{"NDMOENC"   , "FQ8_DMOENC"})

	FOR NPOS:=1 TO LEN(ATABAUX)
		CVAR   := ATABAUX[NPOS,1]
		CCAMPO := ATABAUX[NPOS,2]
		IF LTRAZ
			&CVAR := ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] 
		ELSE
			ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := &CVAR 
		ENDIF
	NEXT

	aSize(ATABAUX,0)
	FwFreeArray(ATABAUX)

RETURN LRET


/*/ FCALCTOTAL
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCALCTOTAL()					// CALCULO PARA CUSTO FIXO
	NVALREMFIX := 0
	NVALRESFIX := 0
	NVALCASFIX := 0
	NVALLICFIX := 0

	NVALRES    := (((NVALAQU*NPERRES)/100)/01)

	NVALREMFIX := (((NVALAQU-NVALRES)*NVALJUR)/100)

	NVALRESFIX := (((NVALAQU*NPERRES)/100)/01)
	NVALCASFIX := (((NVALAQU*NPERSEG)/100)/12)
	NVALLICFIX := (((NVALAQU*NVALLIC)/100)/12)

	// CALCULO PARA CUSTO VARIÁVEL
	NVALCOMFIX := 0
	NVALLUBFIX := 0
	NVALPNEFIX := 0
	NVALLAVFIX := 0

	NVALCOMFIX := (NQTDCOM*NVALCOM*NVALEFE)
	NVALLUBFIX := ((NVALLUB*NVALEFE)/NVALDIS)
	NVALPNEFIX := ((NVALPNE*NPREPNE)/(NVIDPNE))*NVALEFE
	NVALLAVFIX := ((NVALLAV*NFRELAV*NVALEFE)/NVALDIS)

	// CALCULO PARA TOTALIZADORES
	NTOTCUSFIX := 0
	NTOTCUSVAR := 0
	NTOTCUSMAN := 0
	NTOTCUSMAO := 0
	NTOTHORPAR := 0
	NTOTVALHOR := 0
	NMAOOBRA   := 100.00  							// RECEBE O VALOR DO GRID

	NTOTCUSFIX := NVALREMFIX+NVALRESFIX+NVALCASFIX+NVALLICFIX+NVALSEGFIX
	NTOTCUSVAR := NVALCOMFIX+NVALLUBFIX+NVALPNEFIX+NVALLAVFIX  //CUSTO VARIÁVEL
	NTOTCUSMAN := NTOTCUSFIX+NTOTCUSVAR
	NTOTCUSMAO := NMAOOBRA
	NTOTMAOMAN := NTOTCUSMAO+NTOTCUSMAN
	NTOTCUSOPE := (((NTOTCUSMAN+NTOTCUSMAO)*NVALPEC)/100)
	NTOTMAOEQU := (NTOTCUSFIX+NTOTCUSVAR+NTOTCUSOPE+NTOTCUSMAO)
	NTOTHORPAR := (NTOTCUSFIX/NVALEFE)+(NTOTCUSOPE/NVALEFE)

	NVALISSBDI := NTOTMAOEQU-(NTOTMAOEQU*(1-NPERISSBDI/100))
	NVALPISBDI := ((NTOTMAOEQU*NPERPISBDI)/100)
	NVALADMBDI := ((NTOTMAOEQU*NPERADMBDI)/100)
	NVALLUCBDI := ((NTOTMAOEQU*NPERLUCBDI)/100)
	NVALSEGBDI := ((NTOTMAOEQU*NPERSEGBDI)/100)
	NVALJURBDI := ((NTOTMAOEQU*NPERJURBDI)/100)
	NVALCPMBDI := ((NTOTMAOEQU*NPERCPMBDI)/100)
	NVALCSLBDI := ((NTOTMAOEQU*NPERCSLBDI)/100)
	NVALIRRBDI := ((NTOTMAOEQU*NPERIRRBDI)/100)
	NPERTOTBDI := (NPERISSBDI+NPERPISBDI+NPERADMBDI+NPERLUCBDI+NPERSEGBDI+NPERJURBDI+NPERCPMBDI+NPERCSLBDI+NPERIRRBDI)
	NVALTOTBDI := (NTOTMAOEQU+NVALISSBDI+NVALPISBDI+NVALADMBDI+NVALLUCBDI+NVALSEGBDI+NVALJURBDI+NVALCPMBDI+NVALCSLBDI+NVALIRRBDI)

	NTOTVALHOR := (NVALTOTBDI/NVALEFE)*(NVALDIS/NVALEFE)

	NVALTOTX   := NVALTOTT+NVALTOTG

	FCALCCUS()
	FCALCPLA()
	FTRAZMEM(.F.)  									// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS 


RETURN NIL



/*/ FFOLDERCNP
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FFOLDERCNP(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
LOCAL NSTYLE  := IIF(NOPCMANU==2 , 0 , GD_INSERT+GD_UPDATE+GD_DELETE) 
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()
LOCAL NPOS    := 0 

	IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FQ7",NOPCMANU, NSTYLE})
	ENDIF

	CALIAS    := "FQ7"
	CCHAVE    := XFILIAL(CALIAS)+CPROJET
	CCONDICAO := 'FQ7_FILIAL+FQ7_PROJET=="'+CCHAVE+'"'
	NINDICE   := 2
	CFILTRO   := CCONDICAO
	AHEADER   := FHEADER("FQ7")
	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	OCNPACOLS := BECHANGE():CREATE(AHEADER, ACOLS, "FQ7_ITEM")
	ACOLS     := OCNPACOLS:GETDATA("FQ7_OBRA=='"+COBRA+"' .AND. FQ7_SEQGUI='"+CSEQGRU+"'")

	IF LEN(ACOLS) == 0
		ATMP := {}
		FOR NPOS:=1 TO LEN(AHEADER)
			(CALIAS)->(AADD(ATMP,CRIAVAR(AHEADER[NPOS][2],.T.)))
		NEXT NPOS 
		AADD(ATMP,.F.  )  							// DELETED
		AADD(ACOLS, ATMP)

		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_ITEM"  })] := "01"
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_OBRA"  })] := COBRA
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_SEQGUI"})] := CSEQGRU
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_PROJET"})] := CPROJET
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_DTLIM" })] := DDATABASE
	ENDIF

	//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS   ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
	ODLGCNP := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FQ7_ITEM",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
	ODLGCNP:OBROWSE:BCHANGE := {|| MUDAZUC()} 
	ODLGCNP:SetEditLine(.F.)

RETURN NIL


/*/ LOCA00140
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00140(CCAMPO , _LINC) 
LOCAL AAREA     := GETAREA() 
LOCAL CANO      := LEFT( DTOS(DDATABASE), 4 )
LOCAL CCOD      := CANO + "00000"
LOCAL _CQUERY   := "" 
LOCAL CINIANO	  := "00000"

DEFAULT CCAMPO    := ""
DEFAULT _LINC     := .T.

	DO CASE
	CASE UPPER(CCAMPO) == "FP0_PROJET"

		// AO VIRAR O ANO, SE JÁ EXISTIR MOVIMENTOS NA FILIAL, CONTINUAR COM A NUMERAÇÃO.
		FP0->(DBSETORDER(1))
		IF FP0->(DBSEEK(XFILIAL("FP0")))
			IF SELECT("TRB") > 0 
				TRB->(DBCLOSEAREA()) 
			ENDIF 
			_CQUERY := " SELECT MAX(FP0_PROJET) CODIGO "
			_CQUERY += " FROM " + RETSQLNAME("FP0") + " ZA0 "
			_CQUERY += " WHERE  FP0_FILIAL = '" + XFILIAL("FP0") + "'"
			_CQUERY += "   AND  ZA0.D_E_L_E_T_ = '' "
			_CQUERY := CHANGEQUERY(_CQUERY) 
			TCQUERY _CQUERY NEW ALIAS "TRB"
			CINIANO := SUBSTR(TRB->CODIGO , 5 , TAMSX3("FP0_PROJET")[1]-4 )
			IF LEN(ALLTRIM(TRB->CODIGO))=2
					Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
								Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
								{STR0555 + ALLTRIM(TRB->CODIGO) + STR0556 + STR0557 + STR0558}) //"Código "###" do Projeto incorreto na tabela de Orçamento. "###"Deve ser corrigido ou excluído, para não danificar o sequenciamento no Orçamento. "###"Contate o Administrador!"
			ENDIF
			TRB->(DBCLOSEAREA()) 
		ELSE
			CINIANO	  := "00000"
		ENDIF

		IF EXISTBLOCK("LC001NUM") 					// --> PONTO DE ENTRADA PARA ALTERAÇÃO DO NÚMERO DO PROJETO.
			CCOD := EXECBLOCK("LC001NUM",.T.,.T.,{CCOD})
		ELSE
			IF SELECT("TRB") > 0
				TRB->(DBCLOSEAREA())
			ENDIF
			_CQUERY     := " SELECT ISNULL(MAX(SUBSTRING(FP0_PROJET,1,9)),'" + SUBSTR(CANO,1,4) + CINIANO+"') CODIGO"
			_CQUERY     += " FROM " + RETSQLNAME("FP0") + " ZA0"
			_CQUERY     += " WHERE  FP0_FILIAL = '" + XFILIAL("FP0") + "'"
			_CQUERY     += "   AND  SUBSTRING(FP0_PROJET,1,4) = '" + CANO + "'"
			IF !_LINC
				_CQUERY += "   AND  ZA0.R_E_C_N_O_ <> " + CVALTOCHAR(FP0->(RECNO()))
			ENDIF
			_CQUERY     += "   AND  ZA0.D_E_L_E_T_ = ''"
			_CQUERY     := CHANGEQUERY(_CQUERY)  
			TCQUERY _CQUERY NEW ALIAS "TRB" 

			FP0->(DBSETORDER(1))  					// FP0_FILIAL+FP0_PROJET

			IF TRB->(EOF())
				CCOD := SUBSTR(CANO,1,4) + "00000"
			ELSE
				CCOD := STRZERO(VAL(TRB->CODIGO),9)
			ENDIF

			CCOD := SOMA1( CCOD )

			IF _LINC .OR. ALLTRIM(FP0->FP0_PROJET) <> ALLTRIM(CCOD)
				IF FP0->( DBSEEK(XFILIAL("FP0")+CCOD) ) .OR. LEN(CCOD) > 9 .OR. SUBSTR(CCOD,1,4)<>CANO
					WHILE .T.
						CCOD := SUBSTR(CANO,1,4) + GETSXENUM("FP0","FP0_COD")
						IF ! FP0->( DBSEEK(XFILIAL("FP0")+CCOD) )
							EXIT
						ELSE
							CONFIRMSX8()
						ENDIF
					ENDDO 
					ROLLBACKSXE()
				ENDIF
			ENDIF

			TRB->(DBCLOSEAREA())

		ENDIF

	CASE UPPER(CCAMPO) == "FP0_RECEIT"
		IF TYPE("ZA0RECEIT") <> "U"  				// SE A VARIAVEL EXISTE
			CCOD := "L" //ZA0RECEIT
		ELSE
			CCOD := SPACE(LEN(M->FP0_RECEIT))
		ENDIF

	CASE UPPER(CCAMPO) == "FP0_TIPOSE"
		IF TYPE("ZA0TIPOSE") <> "U"  				// SE A VARIAVEL EXISTE
			CCOD := "L" //ZA0TIPOSE
		ELSE
			CCOD := SPACE(LEN(M->FP0_TIPOSE))
		ENDIF
	ENDCASE

	RESTAREA( AAREA )

	aSize(AAREA,0)
	FwFreeArray(AAREA)

RETURN CCOD 



/*/ MUDAZUC
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION MUDAZUC() 
LOCAL NPOS
LOCAL ATMP      := {}
LOCAL CPROJET   := PROJETO()

	FOBRA()

	IF LEN(ODLGCNP:ACOLS) == 0
		FOR NPOS := 1 TO LEN(ODLGCNP:AHEADER)
			(CALIAS)->( AADD( ATMP, CRIAVAR(ODLGCNP:AHEADER[NPOS,2] ,.T.) ) )
		NEXT
		AADD(ATMP, .F. )  							// DELETED

		AADD(ODLGCNP:ACOLS, ATMP)

		ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_ITEM"  })] := "01"
		ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_OBRA"  })] := COBRA
		ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_SEQGUI"})] := CSEQGRU
		ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_PROJET"})] := CPROJET
		ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_DTLIM" })] := DDATABASE
	ENDIF

	IF ODLGCNP:NAT > LEN(ODLGCNP:ACOLS)
		ODLGCNP:NAT := LEN(ODLGCNP:ACOLS)
	ENDIF

	IF EMPTY(ODLGCNP:ACOLS[ODLGCNP:NAT][2]) .AND. ODLGCNP:NAT > 1
		FOR NPOS := 1 TO LEN(ODLGCNP:AHEADER)
			IF ! ALLTRIM(ODLGCNP:AHEADER[NPOS][2]) $ "FQ7_ITEM;FQ7_X5COD;FQ7_VIAGEM;FQ7_VIAORI;FQ7_NFRET;FQ7_SERRET;FQ7_FORNE;FQ7_LOJF"
				ODLGCNP:ACOLS[ODLGCNP:NAT][NPOS] := ODLGCNP:ACOLS[ODLGCNP:NAT-1][NPOS]
			ENDIF
		NEXT
		ODLGCNP:ACOLS[ODLGCNP:NAT][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_DESCRI"})] := POSICIONE("DUT",1,XFILIAL("DUT")+ODLGCNP:ACOLS[ODLGCNP:NAT][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_X5COD"})],"DUT_DESCRI")
	ENDIF

	ODLGCNP:OBROWSE:REFRESH()

RETURN .T.

/*/ FVERDOCUM
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FVERDOCUM(AHEADER,ACOLS,CALIAS,CROTATRB) 
	IF ! FWHEN()
		RETURN NIL
	ENDIF

	IF ! MSGYESNO(STR0243 , STR0097) //"CONFIRMA CARREGAMENTO DE TODOS OS DOCUMENTOS ??"###"GPO - LOCC001.PRW"
		RETURN NIL
	ENDIF

	ODLGDOC:ACOLS := {}
	ODLGDOC:ACOLS := ACLONE(FCOLSDOCUM(ODLGDOC:AHEADER,ODLGDOC:ACOLS,"FPC"))
	ODLGDOC:OBROWSE:REFRESH()
RETURN NIL


/*/ FCOLSDOCUM
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCOLSDOCUM(AHEADER,ACOLS,CALIAS) 
LOCAL NPOS
LOCAL ACOLS0
LOCAL NPOSDOC   := 0
LOCAL CALIASANT := ALIAS()
Local _LC001DOC := EXISTBLOCK("LC001DOC")

	FOBRA()

	DBSELECTAREA(CALIAS)

	(CALIAS)->(DBGOTOP())
	WHILE (CALIAS)->(!EOF())
		ACOLS0:={}
		FOR NPOS:=1 TO LEN(AHEADER)
			(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
		NEXT
		AADD(ACOLS0,.F.  )  						// DELETED
		AADD(ACOLS,ACOLS0)

		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"  })] := COBRA
		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_SEQDOC"})] := STRZERO(++NPOSDOC,3)
		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_CODIGO"})] := (CALIAS)->FPC_CODIGO
		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_DESCRI"})] := (CALIAS)->FPC_DESCRI


		IF _LC001DOC 					// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
			ACOLS := EXECBLOCK("LC001DOC",.T.,.T.,{ACOLS, AHEADER})
		ENDIF

		(CALIAS)->(DBSKIP())
	ENDDO

	IF EMPTY(ACOLS)
		ACOLS0:={}
		FOR NPOS:=1 TO LEN(AHEADER)
			(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
		NEXT
		AADD(ACOLS0,.F.  )  						// DELETED
		AADD(ACOLS,ACOLS0)
	ENDIF

	//aSize(ACOLS0,0)
	//FwFreeArray(ACOLS0)

	DBSELECTAREA(CALIASANT)

RETURN ACLONE(ACOLS)


/*/ FCALCLSR
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCALCLSR() 
	NVALLSR := 0
	NVL2LSR := 0
RETURN .T.

/*/ FCALCTUV
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCALCTUV() 
LOCAL NPOS

	NVALTUV := 0
	NVL2TUV := 0

	IF NKMVF > 0
		IF NPESOCONT > XTUVTON
			FOR NPOS := 1 TO LEN(XTABTUV)
				IF FP0->FP0_TIPOSE $ "E;L"
					IF NKMVF1 >= XTABTUV[NPOS,1] .AND. NKMVF1 <= XTABTUV[NPOS,2]
						NVALTUV += ROUND(INT(NPESOCONT-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI*NKMVF1,2)
					ENDIF
					IF NKMVF2 >= XTABTUV[NPOS,1] .AND. NKMVF2 <= XTABTUV[NPOS,2]
						NVL2TUV += ROUND(INT(NPESOCONT-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI*NKMVF2,2)
					ENDIF
				ELSE
					IF NKMVF  >= XTABTUV[NPOS,1] .AND. NKMVF <= XTABTUV[NPOS,2]
						NVALTUV += ROUND(INT(NPESOCONT-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI*NKMVF,2)
					ENDIF
				ENDIF
			NEXT
		ENDIF
	ENDIF

	IF NKMCF > 0
		IF NPESOCONG > XTUVTON
			FOR NPOS:=1 TO LEN(XTABTUV)
				IF FP0->FP0_TIPOSE $ "E;L"
					IF NKMCF1 >= XTABTUV[NPOS,1] .AND. NKMCF1 <= XTABTUV[NPOS,2]
						NVALTUV += ROUND(INT(NPESOCONG-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI,2)
					ENDIF
					IF NKMCF2 >= XTABTUV[NPOS,1] .AND. NKMCF2 <= XTABTUV[NPOS,2]
						NVL2TUV += ROUND(INT(NPESOCONG-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI,2)
					ENDIF
				ELSE
					IF NKMCF  >= XTABTUV[NPOS,1] .AND. NKMCF  <= XTABTUV[NPOS,2]
						NVALTUV += ROUND(INT(NPESOCONG-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI,2)
					ENDIF
				ENDIF
			NEXT
		ENDIF
	ENDIF

RETURN NIL

/*/ FACUMUPLA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUPLA() 
// ======================================================================= \\
LOCAL NPOS
LOCAL ACOLS0  := {}

	FOBRA()

	FOR NPOS:=1 TO LEN(OPLA_COLS)
		WOBRA := OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
		IF COBRA != WOBRA
			AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
		ENDIF
	NEXT NPOS 

	FOR NPOS := 1 TO LEN(ODLGPLA:ACOLS)
		AADD( ACOLS0, ACLONE(ODLGPLA:ACOLS[NPOS]))
	NEXT NPOS 

	IF EMPTY(ACOLS0) 
		AADD( ACOLS0, ACLONE( OPLA_COLS0[1] ) ) 
	ENDIF 

	OPLA_COLS := ACLONE(ACOLS0) 

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL


/*/ FTRAZPLA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZPLA() 
LOCAL NPOS
LOCAL ACOLS0 := {}

	LZAGNFRET := SUPERGETMV("MV_LOCX259",.F.,.F.)

	FOBRA()

	FOR NPOS := 1 TO LEN(OPLA_COLS)
		WOBRA := OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
		IF COBRA == WOBRA
			IF LZAGNFRET 							// VARIÁVEL QUE DEFINE SE É PERMITIDO EXIBIR NA ABA LOCAÇÕES ITENS QUE JÁ FORAM RETORNADOS, PADRÃO EXIBE;
				IF SB1->( MSSEEK( XFILIAL("SB1")+ OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]) )
					IF ALLTRIM(SB1->B1_GRUPO) $ @(ALLTRIM(CGRPAND))
						AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
					ELSE
						DO CASE
						CASE EMPTY( OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFRET"})] ) .AND. UPPER(CFILTROF12)==UPPER(STR0244) //"SEM NF RETORNO"
							AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
						CASE !EMPTY( OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFRET"})] ) .AND. UPPER(CFILTROF12)==UPPER(STR0245) //"COM NF RETORNO"
							AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
						CASE UPPER(CFILTROF12)==UPPER("AMBOS")
							AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
						OTHERWISE
							AADD( OPLACOLRET, ACLONE( OPLA_COLS[NPOS] ) )
						ENDCASE
					ENDIF
				ENDIF
			ELSE
				AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
			ENDIF
		ENDIF
	NEXT

	IF EMPTY(ACOLS0)
		AADD( ACOLS0, ACLONE( OPLA_COLS0[1] ) )
	ENDIF

	ODLGPLA:ACOLS := ACLONE(ACOLS0)
	ODLGPLA:OBROWSE:REFRESH()

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL


/*/ FACUMUCUS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FACUMUCUS() 
LOCAL NPOS
LOCAL ACOLS0 := {}

	FOBRA()

	FOR NPOS:=1 TO LEN(OCUS_COLS)
		WOBRA   := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})]
		WSEQTRA := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
		WSEQGUI := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})]
		WSEQGRU := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})]
		WSEQCAR := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})]
		IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR <> WOBRA+WSEQTRA+WSEQGUI+WSEQGRU+WSEQCAR
			AADD(ACOLS0,ACLONE(OCUS_COLS[NPOS]))
		ENDIF
	NEXT

	FOR NPOS := 1 TO LEN(ODLGCUS:ACOLS)
		AADD(ACOLS0,ACLONE(ODLGCUS:ACOLS[NPOS]))
	NEXT

	IF EMPTY(ACOLS0)
		AADD(ACOLS0,ACLONE(OCUS_COLS0[1]))
	ENDIF

	OCUS_COLS := ACLONE(ACOLS0)

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL

/*/ FTRAZCUS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZCUS()
LOCAL NPOS
LOCAL ACOLS0 := {}

	FOBRA()

	FOR NPOS:=1 TO LEN(OCUS_COLS)
		WOBRA   := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})]
		WSEQTRA := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
		WSEQGUI := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})]
		WSEQGRU := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})]
		WSEQCAR := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})]
		IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR == WOBRA+WSEQTRA+WSEQGUI+WSEQGRU+WSEQCAR 
			AADD(ACOLS0,ACLONE(OCUS_COLS[NPOS]))
		ENDIF
	NEXT

	IF EMPTY(ACOLS0)
		AADD(ACOLS0,ACLONE(OCUS_COLS0[1]))
	ENDIF

	ODLGCUS:ACOLS := ACLONE(ACOLS0)
	ODLGCUS:OBROWSE:REFRESH()

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL

/*/ FACUMUDOC
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FACUMUDOC()
LOCAL NPOS
LOCAL ACOLS0 := {}

	FOBRA()

	FOR NPOS:=1 TO LEN(ODOC_COLS)
		WOBRA := ODOC_COLS[NPOS][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})]
		IF COBRA<>WOBRA
			AADD(ACOLS0,ACLONE(ODOC_COLS[NPOS]))
		ENDIF
	NEXT

	FOR NPOS:=1 TO LEN(ODLGDOC:ACOLS)
		AADD(ACOLS0,ACLONE(ODLGDOC:ACOLS[NPOS]))
	NEXT

	IF EMPTY(ACOLS0)
		AADD(ACOLS0,ACLONE(ODOC_COLS0[1]))
	ENDIF

	ODOC_COLS := ACLONE(ACOLS0)

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL

/*/ FTRAZDOC
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZDOC()
LOCAL NPOS
LOCAL ACOLS0 := {}

	FOBRA()

	FOR NPOS:=1 TO LEN(ODOC_COLS)
		WOBRA := ODOC_COLS[NPOS][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})]
		IF COBRA==WOBRA
			AADD(ACOLS0,ACLONE(ODOC_COLS[NPOS])) 
		ENDIF 
	NEXT 

	IF EMPTY(ACOLS0)
		AADD(ACOLS0,ACLONE(ODOC_COLS0[1]))
	ENDIF

	ODLGDOC:ACOLS := ACLONE(ACOLS0)
	ODLGDOC:OBROWSE:REFRESH()

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL


/*/ FACUMURES
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FACUMURES()
LOCAL NPOS
LOCAL ACOLS0 := {}
LOCAL CBECH  := SPACE(3)

	FOBRA()

	CBECH := CSEQGRU

	FOR NPOS:=1 TO LEN(ORES_COLS)
		WOBRA    := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"  })]
		WLOCACAO := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})]
		IF !EMPTY(WOBRA) .AND. !EMPTY(WLOCACAO)
			IF COBRA != WOBRA .OR. WLOCACAO != CBECH
				AADD(ACOLS0,ACLONE(ORES_COLS[NPOS]))
			ENDIF
		ELSE
			ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"  })] := "001"        
			ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] := "001"
		ENDIF
	NEXT

	FOR NPOS:=1 TO LEN(ODLGRES:ACOLS)
		IF ! ATAIL( ODLGRES:ACOLS[NPOS] )			// DELETADO?
			AADD(ACOLS0,ACLONE(ODLGRES:ACOLS[NPOS]))
		ELSE
			AADD(ACOLS0,ACLONE(ODLGRES:ACOLS[NPOS])) // FRANK Z FUGA EM 28/09/2020
			AADD(ARESDEL,ACLONE(ODLGRES:ACOLS[NPOS]))
		ENDIF
	NEXT

	IF EMPTY(ACOLS0)
		AADD(ACOLS0,ACLONE(ORES_COLS0[1]))
	ENDIF

	ORES_COLS := ACLONE(ACOLS0)

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL


/*/ FTRAZRES
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZRES()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}
LOCAL CBECH  := SPACE(3)

	FOBRA()

	CBECH := CSEQGRU

	FOR NPOS := 1 TO LEN(ORES_COLS)
		WOBRA    := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"   })]
		WLOCACAO := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI" })]
		IF COBRA == WOBRA .AND. WLOCACAO == CBECH
			AADD( ACOLS0, ACLONE(ORES_COLS[NPOS]) )
		ENDIF
	NEXT

	IF EMPTY(ACOLS0)
		AADD(ACOLS0,ACLONE(ORES_COLS0[1]))
	ENDIF

	ODLGRES:ACOLS := ACLONE(ACOLS0)
	ODLGRES:OBROWSE:REFRESH()

	aSize(ACOLS0,0)
	FwFreeArray(ACOLS0)

RETURN NIL

/*/ FCALCCUS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCALCCUS()
	NVALCUS := NVALLSR+NVALPRE+NVALPRF+NVALTAP+NVALTUV+NVALTUR+NVALESC+NVALPED+NVALINV+NVALIPT+NVALACO+NVALCET
	NVALCUS += NVALSEM+NVALTVA+NVALTEL+NVALOUT+NVALCON+NVALADI+NVALAUX

	NVALCUS += NINSTRU + NBALSA + NDESDTA + NMONDES + NAPOGUI + NCAVEXT	// ADICIONA OS VALORES INSTRUMENTAÇÃO, BALSA, DESPACHANTE DTA,
	NVALCUS += NMOBENC + NDMOENC										// MONTAGEM/DESMONTAGEM, CARRO APOIO/GUINDAUTO E CAVALO EXTRA NO TOTAL DAS TARIFAS

	NVL2CUS := NVL2LSR+NVL2PRE+NVL2PRF+NVL2TAP+NVL2TUV+NVL2TUR+NVL2ESC+NVL2PED+NVL2INV+NVL2IPT+NVL2ACO+NVL2CET
	NVL2CUS += NVL2SEM+NVL2TVA+NVL2TEL+NVL2OUT+NVL2CON+NVL2ADI+NVL2AUX

	NVALCUG := NVALCUS+NVL2CUS
	NVALCUT := NVALCUS+NVL2CUS

RETURN NIL

/*/ FCALCPLA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCALCPLA(LCALCITEM)
	IF !VALTYPE(ODLGPLA)=="O"  						// SE O OBJETO JÁ FOI CRIADO
		RETURN NIL
	ENDIF

	IF FP0->FP0_TIPOSE == "L"
		LCALCITEM := .F.
	ENDIF

	DO CASE
	CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"}) > 0
		NPREDIAU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]  	// QTD.BASE
	CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"}) > 0
		NPREDIAU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"})]  	// QTD.BASE
	OTHERWISE
		NPREDIAU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTENRE"})]-ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]+1  //QTD.BASE
	ENDCASE

	NVALBASU  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR" })]  		// VR.BASE
	NVALBASUT := NPREDIAU * NVALBASU 

	IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLEST"}) > 0
		NVLEST   := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLEST"})]
	ENDIF

	IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OPERAD"}) >0
		NOPERADU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OPERAD"})]
	ENDIF

	NOPERADUT := NOPERADU * NPREDIAU

	IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"}) >0
		CDISISSU := FTRAZCBOX("FPA_TPISS",ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"})])
	ENDIF

	IF FP0->FP0_TIPOSE <> "L"
		CTIPISSU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"})]
		NBASISSU := NBASEU := 0
		NPERISSU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERISS"})]
		NVALISSU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })]
		CTIPSEGU := FTRAZCBOX("FPA_TPSEGU",ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPSEGU"})])
		NBASSEGU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRCARG"})]
		NPERSEGU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERSEG"})]
		NVALSEGU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]
	ENDIF

	NVALTOTU := 0
	NVALTOTU += NVALBASUT
	NVALTOTU += NOPERADU
	NBASEU	 := NVALTOTU
	NVALTOTU += NVALISSU + NVALSEGU

	IF LCALCITEM
		NVALISSU := LOCA00158(NBASEU,NPERISSU,CTIPISSU)  //CALCULA O ISS DAS PLATAFORMAS
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })] := NVALISSU

		NVALSEGU := FCALCSEGG(NBASSEGU,NPERSEGU)  	// CALCULA O SEGURO DAS PLATAFORMAS
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})] := NVALSEGU

		NVALTOTU := 0
		NVALTOTU += NVALBASUT
		NVALTOTU += NOPERADU
		NVALTOTU += NVALISSU + NVALSEGU
	ENDIF

	// INCLUIDO PARA CALCULAR OS VALORES DE TURNOS
	NVALTUR1 := IIF(VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1 , (NPREDIAU * GDFIELDGET( "FPE_VALTUR", 1, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
	NVALTUR2 := IIF(VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2 , (NPREDIAU * GDFIELDGET( "FPE_VALTUR", 2, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
	NVALTUR3 := IIF(VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3 , (NPREDIAU * GDFIELDGET( "FPE_VALTUR", 3, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
	CNUMACT  := IIF(VALTYPE(OGETVT)=="O" , LEN(OGETVT:ACOLS) , 1)

	DO CASE
	CASE CTIPISSU == "I"
		NBASISSU := NVALTOTU - NVALISSU
	CASE CTIPISSU == "N"
		NBASISSU := NVALTOTU
	CASE CTIPISSU == "X"

	CASE CTIPISSU == "M"
		NBASISSU := NOPERADU * NPREDIAU
	ENDCASE

	NVALISSU1 := NVALISSU
	NVALSEGU1 := NVALSEGU

RETURN NIL 


/*/ FTRAZCBOX
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FTRAZCBOX(CCAMPO,CCOD) 
LOCAL NPOS
LOCAL CCOMBO
LOCAL CRET := CCOD

	CCOMBO := ALLTRIM(GETSX3CACHE(CCAMPO,"X3_CBOX"))
	NPOS   := AT(CRET+"=" , CCOMBO)
	IF NPOS > 0
		CRET := SUBSTR(CCOMBO,NPOS+2,LEN(CCOMBO))
		NPOS := AT(";" , CRET) 
		IF NPOS>0
			CRET := SUBSTR(CRET,1,NPOS-1)
		ENDIF
	ENDIF

RETURN CRET


/*/ FDISPGRUA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FDISPGRUA()
	//IF !VALTYPE(OPREDIAU)=="O"  					// SE O OBJETO JÁ FOI CRIADO
	//	RETURN NIL
	//ENDIF

	//OPREDIAU:REFRESH()
	//OVALBASU:REFRESH()
	//OVALBASUT:REFRESH()
	//OVALMOBU:REFRESH()
	//OVALDESU:REFRESH()

	//OOPERADUT:REFRESH()

	//ODISISSU:REFRESH()
	//OPERISSU:REFRESH()
	//OBASISSU:REFRESH()
	//OVALISSU:REFRESH()
	//OTIPSEGU:REFRESH()
	//OPERSEGU:REFRESH()
	//OBASSEGU:REFRESH()
	//OVALSEGU:REFRESH()
	//OVALTOTU:REFRESH()

	//OVALISSU1:REFRESH()
	//OVALSEGU1:REFRESH()

RETURN NIL


/*/ FFOLDERPRO
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FFOLDERPRO(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
LOCAL CALIAS     := "FP0"
LOCAL ACAMPOS    := {} 
LOCAL ACAMPOSGET := {} 
LOCAL POPC		 := NOPC 

	DBSELECTAREA("FQ5")
	DBSETORDER(8) // PROJETO
	IF ! DBSEEK(XFILIAL("FQ5")+SUBSTR(FP0->FP0_PROJET,1,9))
		CCAMPOSGET := "" //UPPER(ALLTRIM(GETMV("MV_LOCX098")))
	ELSE
		CCAMPOSGET := ""
	ENDIF

	(LOCXCONV(1))->(DBSETORDER(1))
	(LOCXCONV(1))->(DBSEEK(CALIAS))
	WHILE (LOCXCONV(1))->(!EOF() .AND. GetSx3Cache(&(LOCXCONV(2)),"X3_ARQUIVO")==CALIAS)
		IF X3USO( &(LOCXCONV(3)) ) .AND. CNIVEL >= GetSx3Cache(&(LOCXCONV(2)),"X3_NIVEL") //SX3->X3_NIVEL
			AADD(ACAMPOS,GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
			IF GetSx3Cache(&(LOCXCONV(2)),"X3_CONTEXT") <> "V"  
				M->&(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")) := (CALIAS)->&(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
				IF (LOCXCONV(1))->(UPPER(ALLTRIM(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")))$CCAMPOSGET)
					AADD(ACAMPOSGET,GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
					AADD(ACAMPOZA0 ,GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
				ENDIF
			ELSE
				M->&(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO")) := CRIAVAR(GetSx3Cache(&(LOCXCONV(2)),"X3_CAMPO"))
			ENDIF
		ENDIF
		(LOCXCONV(1))->(DBSKIP())
	ENDDO 

	//           MSMGET():NEW(CALIAS , NREG                , NOPC , [UPAR1] , [UPAR2] , [UPAR3] , [AACHO] , [APOS]                    , [ACPOS]    , [UPAR4 ] , [UPAR5] , [UPAR6] , [UPAR7] , [OWND]                    , [UPAR8] , [LMEMORIA] , [LCOLUNA] , [UPAR9] , [LSEMPASTAS] ) 
	OENCHOICE := MSMGET():NEW(CALIAS , (CALIAS)->(RECNO()) , POPC ,         ,         ,         , ACAMPOS , {NLIN1,NCOL1,NLIN2,NCOL2} , ACAMPOSGET , 3        , 1       ,         ,         , OFOLDER:ADIALOGS[NFOLDER] ,         ,            ,           ,         ,              ) 

RETURN NIL 

/*/ FSALVARCNJ
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARCNJ(CALIAS , AHEADER , ACOLS) 
LOCAL ACPOS    := {}
LOCAL CPROJET  := PROJETO()
LOCAL NPOSOBRA := GDFIELDPOS("FPS_OBRA"  , AHEADER)
LOCAL NPOSSEQG := GDFIELDPOS("FPS_SEQGUI", AHEADER)
LOCAL NPOSITEM := GDFIELDPOS("FPS_ITEM"  , AHEADER)
LOCAL NPOS
LOCAL NK       := 0 
LOCAL NZ       := 0 

	IF NPOSOBRA == 0
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0247}) //"Verificar o campo FPS_OBRA na aba conjunto transportador."
		RETURN .F.
	ENDIF
	IF NPOSSEQG == 0
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0248}) //"Verificar o campo FPS_SEQGUI na aba conjunto transportador."
		RETURN .F.
	ENDIF
	IF NPOSITEM == 0
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0249}) //"Verificar o campo FPS_ITEM na aba conjunto transportador."
		RETURN .F.
	ENDIF

	FPS->(DBSETORDER(2))							// FPS_FILIAL+FPS_PROJET+FPS_OBRA+FPS_SEQGUI+FPS_ITEM
	FQ5->(DBSETORDER(1))							// FQ5_FILIAL + FQ5_VIAGEM
	FP6->(DBSETORDER(2))							// FP6_FILIAL + FP6_PROJET + FP6_OBRA + FP6_SEQUI + FP6_SEQRES

	IF NOPC != 5  									// 5=EXCLUI

		// TRATATIVA PARA ZERAR OS CUSTOS DOS FRETES ANTES DE ACUMULÁ-LOS 
		CQUERY := " UPDATE " + RETSQLNAME("FP6") + " "
		CQUERY += " SET    FP6_VALOR  = 0 "
		CQUERY += " WHERE  D_E_L_E_T_ = ''"
		CQUERY +=   " AND  FP6_FILIAL = '"+XFILIAL('FP6')+"'"
		CQUERY +=   " AND  FP6_PROJET = '"+CPROJET       +"'"
		CQUERY +=   " AND  FP6_CODIGO = '"+XCOD          +"'"
		TCSQLEXEC(CQUERY)

		FOR NPOS:=1 TO LEN(ACOLS)

			ACPOS:= {}
			IF FPS->(DBSEEK( XFILIAL("FPS") + CPROJET + ACOLS[NPOS, NPOSOBRA] + ACOLS[NPOS, NPOSSEQG] + ACOLS[NPOS, NPOSITEM]))
				// TRATATIVA PARA ESTORNAR O STATUS DE ACEITE DA ASF. 
				IF !EMPTY(FPS->FPS_VIAGEM)			// EXISTE DTQ, OU SEJA, HOUVE GERAÇÃO DE CONTRATO ANTERIOR.
					FQ5->(DBSETORDER(1))			// FQ5_FILIAL + FQ5_VIAGEM
					IF FQ5->(DBSEEK( XFILIAL("FQ5") + FPS->FPS_VIAGEM))		// LOCALIZA A ASF
						AZLW := {}
						FOR NK := 1 TO LEN(AHEADER)
							AADD(AZLW, {AHEADER[NK][2], ACOLS[NPOS][NK]} )
						NEXT NK 

						IF LOCA01310(AZLW, FPS->FPS_VIAGEM, "FPS")			// EXISTE DIFERENÇA
							RECLOCK("FPS",.F.)
							FPS->FPS_ALTERR := ""
							FPS->(MSUNLOCK()) 

							RECLOCK("FQ5",.F.)
							FQ5->FQ5_STATUS := "1"							// VOLTAMOS O STATUS
							FQ5->(MSUNLOCK()) 
						ENDIF
					ENDIF
				ENDIF
				FPS->(RECLOCK(CALIAS,.F.))
			ELSE
				IF ACOLS[NPOS,LEN(AHEADER)+1]
					LOOP
				ENDIF
				FPS->(RECLOCK(CALIAS,.T.))
				FPS->FPS_ALTERR := DTOS(DDATABASE)
			ENDIF

			IF ACOLS[NPOS,LEN(AHEADER)+1]
				LEXCLUI := .T.
				IF ! EMPTY(FPS->FPS_VIAGEM)			// TRATAR A EXCLUSÃO DA ASF
					IF FQ5->(DBSEEK(XFILIAL("FQ5")+FPS->FPS_VIAGEM))
						IF ! EMPTY(FQ5->FQ5_NUMCTC) .OR. ! EMPTY(FQ5->FQ5_IMPCTB)	// SERÁ TRATADO POSTERIORMENTE NA ET OPERACIONAL. SOLICITAÇÃO LUI.
							LEXCLUI := .F.
							CMSG := STR0250 + FQ5->FQ5_AS + STR0251 //"A ASF Nº: "###" Não pode ser excluída, pois a viagem tem "
							IF     !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "S" 
								CMSG += STR0252 //"CTRB gerada"
							ELSEIF !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "A" 
								CMSG += STR0253  //"Adiantamento"
							ELSE
								CMSG += STR0254 //"Saldo"
							ENDIF
							MSGALERT(STR0255+CMSG , STR0029+alltrim(upper(procname())))  //"Operação cancelada: "###"RENTAL: "
						ELSEIF FQ5->FQ5_STATUS == "6" 		// NÃO DEIXAR EXCLUIR CASO NÃO ESTEJA LIBERADO O FRETE.
							LEXCLUI := .F.
							CMSG := STR0256 //"Não poderá ser excluído, pois a ASF já foi aceita."
							MSGALERT(STR0255+CMSG , STR0029+alltrim(upper(procname())))  //"Operação cancelada: "###"RENTAL: "
						ENDIF
					ENDIF
				ENDIF

				IF LEXCLUI
					IF FQ5->( DBSEEK(XFILIAL("FQ5")+FPS->FPS_VIAGEM) )
						FQ5->(RECLOCK("FQ5",.F.)) 
						FQ5->(DBDELETE())
						FQ5->(MSUNLOCK())
					ENDIF
					FPS->(DBDELETE())
				ENDIF
			ELSE
				FOR NZ := 1 TO LEN(AHEADER) 
					FPS->( FIELDPUT( FIELDPOS( AHEADER[NZ,2] ), ACOLS[NPOS, NZ] ) )
				NEXT NZ 
				FPS->FPS_FILIAL := XFILIAL("FPS")
				FPS->FPS_PROJET := CPROJET
			ENDIF

			FPS->(MSUNLOCK())

		NEXT

	ENDIF

RETURN NIL

/*/ FSALVARCNP
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARCNP(CALIAS , AHEADER , ACOLS) 
LOCAL ACPOS    := {} 
LOCAL NPOS     := 0 
LOCAL CPROJET  := PROJETO()
LOCAL NK       := 0
LOCAL _NX 

LOCAL NPOSITEM := GDFIELDPOS("FQ7_ITEM")
LOCAL NPOSOBRA := GDFIELDPOS("FQ7_OBRA")
LOCAL NPOSSEQ  := GDFIELDPOS("FQ7_SEQGUI")
LOCAL _aArea   := GetArea()

	FQ7->(DBSETORDER(2))
	FQ5->(DBSETORDER(1))							// FQ5_FILIAL + FQ5_VIAGEM
	FP6->(DBSETORDER(2))							// FP6_FILIAL + FP6_PROJET + FP6_OBRA + FP6_SEQUI + FP6_SEQRES

	IF NOPC != 5  							   		// 5=EXCLUI

		FP6->(dbSetOrder(1))
		FP6->(dbSeek(Xfilial("FP6")+cProjet))
		While !FP6->(Eof()) .and. FP6->(FP6_FILIAL+FP6_PROJET) == xFilial("FP6")+cProjet
			If FP6->FP6_CODIGO == xCod
				FP6->(RecLock("FP6"))
				FP6->FP6_VALOR := 0
				FP6->(MsUnlock())
			EndIF
			FP6->(dbSkip())
		EndDo

		// FRANK EM 23/09/2020
		// TRATAMENTO PARA A DELECAO DA ZA1
		IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
			FOR _NX := 1 TO LEN(ACOLS)
				IF ACOLS[_NX, NPOSOBRA] == ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
					ACOLS[_NX,LEN(AHEADER)+1] := .T.
				ENDIF
			NEXT
		ENDIF

		FOR NPOS := 1 TO LEN(ACOLS)
			
			LEXCLUI := .F.
			ACPOS   := {}
			IF ! EMPTY( ALLTRIM( ACOLS[NPOS, NPOSOBRA] + ACOLS[NPOS, NPOSSEQ] ) )
				IF FQ7->(DBSEEK( XFILIAL("FQ7") + CPROJET + ACOLS[NPOS, NPOSOBRA] + ACOLS[NPOS, NPOSSEQ] + ACOLS[NPOS, NPOSITEM]))
					// TRATATIVA PARA ESTORNAR O STATUS DE ACEITE DA ASF. 
					IF !EMPTY(FQ7->FQ7_VIAGEM)		// EXISTE DTQ, OU SEJA, HOUVE GERAÇÃO DE CONTRATO ANTERIOR.
						FQ5->(DBSETORDER(1))		// FQ5_FILIAL + FQ5_VIAGEM
						IF FQ5->(DBSEEK( XFILIAL("FQ5") + FQ7->FQ7_VIAGEM))		// LOCALIZA A ASF
							AZUC := {}
							FOR NK := 1 TO LEN(AHEADER)
								AADD(AZUC, {AHEADER[NK][2], ACOLS[NPOS][NK]} )
							NEXT
							IF LOCA01311(AZUC, FQ7->FQ7_VIAGEM, "FQ7")			// EXISTE DIFERENÇA
								FQ7->(RECLOCK("FQ7",.F.))
								FQ7->FQ7_ALTERR := ""
								FQ7->(MSUNLOCK())

								FQ5->(RECLOCK("FQ5",.F.))
								FQ5->FQ5_STATUS := "1"							// VOLTAMOS O STATUS
								FQ5->(MSUNLOCK())
							ENDIF
						ENDIF
					ENDIF
					FQ7->(RECLOCK("FQ7",.F.))
				ELSE
					IF ACOLS[NPOS,LEN(AHEADER)+1]								// DELETADA
						LOOP
					ENDIF
					RECLOCK("FQ7",.T.)
					FQ7->FQ7_ALTERR := DTOS(DDATABASE)
				ENDIF

				IF ACOLS[NPOS,LEN(AHEADER)+1]									// EXCLUSAO
					LEXCLUI := .T.
					IF ! EMPTY(FQ7->FQ7_VIAGEM)									// TRATAR A EXCLUSÃO DA ASF
						IF FQ5->(DBSEEK(XFILIAL("FQ5")+FQ7->FQ7_VIAGEM))
							IF ! EMPTY(FQ5->FQ5_NUMCTC) .OR. ! EMPTY(FQ5->FQ5_IMPCTB)	// SERÁ TRATADO POSTERIORMENTE NA ET OPERACIONAL. SOLICITAÇÃO LUI.
								LEXCLUI := .F.
								CMSG := STR0250 + FQ5->FQ5_AS + STR0251 //"A ASF Nº: "###" não pode ser excluída, pois a viagem tem "
								IF !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "S"
									CMSG += STR0252 //"CTRB gerada"
								ELSEIF !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "A"
									CMSG += STR0253 //"Adiantamento"
								ELSE
									CMSG += STR0254 //"Saldo"
								ENDIF
								MSGALERT(STR0255+CMSG , STR0029+alltrim(upper(procname())))  //"Operação cancelada: "###"RENTAL: "
							ELSEIF FQ5->FQ5_STATUS == "6" 						// NÃO DEIXAR EXCLUIR CASO NÃO ESTEJA LIBERADO O FRETE.
								LEXCLUI := .F.
								CMSG := STR0256 //"Não poderá ser excluído, pois a ASF já foi aceita."
								MSGALERT(STR0255+CMSG , STR0029+alltrim(upper(procname())))  //"OPERAÇÃO CANCELADA: "###"RENTAL: "
							ENDIF
						ENDIF
					ENDIF
					IF LEXCLUI
						IF !LEXCLZUC
							IF FQ5->( DBSEEK(XFILIAL("FQ5")+FQ7->FQ7_VIAGEM) )
								FQ5->(RECLOCK("FQ5",.F.)) 
								FQ5->(DBDELETE()) 
								FQ5->(MSUNLOCK()) 
							ENDIF
						ENDIF
						FQ7->(DBDELETE())
					ENDIF
				ELSE
					FQ7->FQ7_FILIAL := XFILIAL("FQ7")
					FQ7->FQ7_FILIAL := XFILIAL("FQ7")
					FQ7->FQ7_PROJET := CPROJET
					FOR NK := 1 TO LEN(AHEADER)
						If aHeader[nK][10] == "R"
							&("FQ7->"+alltrim(aHeader[nK][2])) := ACOLS[NPOS][NK]
						EndIF
					NEXT NK 
				ENDIF

				FQ7->(MSUNLOCK())
			ENDIF
			
		NEXT NPOS 
	ENDIF

	restarea(_aArea)
	
	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN NIL


/*/ LOCA00141
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00141(LFORCA) 
LOCAL _CCPONAO := ""
LOCAL _NZ      := 0 
LOCAL LRET     := .T.

DEFAULT LFORCA 	:= .F. // FORCAR O PREENCHIMENTO
DEFAULT NFIXA	:= 0   // INDICAR DE QUAL LINHA SERA COPIADO

	IF VALTYPE(ODLGPLA)=="O"
		M->FPA_TIPOSE := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TIPOSE"})]
		M->FPA_PRODUT := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]
	ENDIF

	FOBRA()

	IF ODLGPLA:NAT > LEN(ODLGPLA:ACOLS)
		ODLGPLA:NAT := LEN(ODLGPLA:ACOLS)
	ENDIF


	// A CADA LINHA NOVA (SETA PRA BAIXO NO ACOLS), COPIA CAMPOS DA LINHA DE CIMA
	IF (ODLGPLA:LNEWLINE .AND. LEN(ODLGPLA:ACOLS) > 1) .and. LEN(ODLGPLA:ACOLS) > _nAnt .OR. LFORCA 
		_CCPONAO := "FPA_PRODUT;FPA_GRUA;FPA_DESGRU;FPA_TIPOSE;FPA_VRMOB;FPA_VRHOR;FPA_VRDES;FPA_VIAGEM;FPA_AS;FPA_GUIMON;FPA_GUIDES;FPA_DTPREN;FPA_HRINI;FPA_HRFIM;FPA_FILREM;FPA_NFREM;FPA_DNFREM;FPA_SERREM;FPA_ITEREM;FPA_NFRET;FPA_DNFRET;FPA_SERRET;FPA_ITERET;FPA_PARIDA;FPA_PARVOL;FPA_SEQSUB;FPA_ULTFAT;FPA_PRCUNI;FPA_VLBRUT;FPA_ACRESC;FPA_PDESC;FPA_SEQEST;"
		_CCPONAO += "FPA_DTPRRT;FPA_TPGUIM;FPA_TPGUID"

		// em 09/07/21 o Lui pediu para colocar novamente os campos FPA_DTII, FPA_DTFIM e FPA_DTENRE para replicar nas linhas - Frank

		IF EXISTBLOCK("LC001CPN") 					// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CAMPOS QUE SÃO OU NÃO COPIADOS PARA A PRÓXIMA LINHA DE LOCAÇÃO.
			_CCPONAO := EXECBLOCK("LC001CPN",.T.,.T.,{_CCPONAO})
		ENDIF

		GDFIELDPUT("FPA_TPGUIM",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
		GDFIELDPUT("FPA_TPGUID",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )

		FOR _NZ := 1 TO LEN( ODLGPLA:AHEADER )
			IF ALLTRIM(ODLGPLA:AHEADER[_NZ][2]) $ "FPA_ULTFAT;FPA_DTPRRT;FPA_DTINI;FPA_DTFIM;FPA_DTENRE;FPA_DTPREN;FPA_DNFENT;FPA_DTSCRT;FPA_XRETRE;FPA_NIVER"
				ODLGPLA:ACOLS[ODLGPLA:NAT][_NZ] := STOD("")
			ENDIF
			// CAMPOS NÃO
			IF ! ALLTRIM(ODLGPLA:AHEADER[_NZ][2]) $ _CCPONAO
				// SÓ INCLUI, SE O CAMPO ESTIVER VAZIO - NA LINHA NOVA, DEVE ESTAR VAZIO
				// PROBLEMA QUE OCORRIA, QUANDO INSERIMOS UMA NOVA LINHA, PREENCHEMOS OS CAMPOS, E INSERIMOS UMA SEGUNDA NOVA LINHA, E SEM PREENCHER ESTA 
				// LINHA, CLICAMOS A SETA PARA BAIXO, PARA INSERÇÃO DE UMA OUTRA NOVA LINHA, A LINHA QUE ESTAVA COM OS ITENS  PREENCHIDOS, ERAM SOBRESCRITOS
				IF EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][_NZ])
					ODLGPLA:ACOLS[ODLGPLA:NAT][_NZ] := ODLGPLA:ACOLS[ODLGPLA:NAT-1][_NZ]
				ENDIF
			ENDIF
		NEXT
	ENDIF

	ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"  })] := COBRA
	ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})] := CSEQGRU

	IF EMPTY(M->FPA_TIPOSE)
		ODLGPLA:ACOLS[C][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TIPOSE"})] := "L"		// INICIALIZADOR PADRÃO PARA A LOCAÇÃO
	ENDIF

	IF EMPTY( M->FPA_PRODUT )
		GDFIELDPUT("FPA_TPGUIM",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
		GDFIELDPUT("FPA_TPGUID",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
		GDFIELDPUT("FPA_DESPRO",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
		GDFIELDPUT("FPA_DTSCRT",CTOD(""), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
	ENDIF

	If empty(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFRET"})])
		GDFIELDPUT("FPA_DNFRET",CTOD(""), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
	EndIF

	ODLGPLA:OBROWSE:REFRESH()
	// MERGE - ORGUEL 94 - INICIO
	//atualiza rodape
	If ExistBlock("LC001LOC")
		ExecBlock("LC001LOC",.F.,.T.,{ "ATUALIZA"})
	EndIf
	// MERGE - ORGUEL 94 - FIM

RETURN LRET 


/*/ FSALVARPLA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARPLA(CALIAS , AHEADER , ACOLS) 
local npos
local agravados := {}  //gravados
local _aremessa := {}
local _aretorno := {}
local cprojet   := projeto()
local _cas      := ""
local _nxx
local _aarea    := getarea()
Local lLC001AS  := ExistBlock("LC001AS")
Local cCamposAS := "[FPA_PRODUT][FPA_GRUA][FPA_DTINI][FPA_HRINI][FPA_HRFIM][FPA_DTFIM]"

	If lLC001AS
		aCamposAS := ExecBlock("LC001AS",.F.,.T.,{aCamposAS})
	EndIf

	// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
	If OFOLDER:NOPTION == NFOLDERPLA
		FACUMUPLA()
	EndIF
	ACOLS := ACLONE(OPLA_COLS)

	DBSELECTAREA(CALIAS)
	DBSETORDER(1)

	IF NOPC != 5  //5=EXCLUI

		// FRANK EM 23/09/2020
		// TRATAMENTO PARA A DELECAO DA ZA1
		IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
			FOR _NXX := 1 TO LEN(ACOLS)
				IF ACOLS[_NXX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"  })] == ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
					ACOLS[_NXX,LEN(AHEADER)+1] := .T.
				ENDIF
			NEXT
		ENDIF

		IF LEN(OPLACOLRET) > 0
			FOR NPOS:=1 TO LEN(OPLACOLRET)
				AADD( ACOLS, OPLACOLRET[NPOS] )
			NEXT NPOS 
		ENDIF
		FOR NPOS := 1 TO LEN(ACOLS)
			COBRA     := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"  })]
			CSEQGRU   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
			_CAS      := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    })]
			
			_AREMESSA := {}
			_ARETORNO := {}

			IF !EMPTY(_CAS)
				_AREMESSA := GETNFREM( _CAS , , .T. ) 
				IF LEN(_AREMESSA) > 0
					_ARETORNO := GETNFREM( _CAS , _AREMESSA , .F. ) 
				ENDIF
			ENDIF

			IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQGRU)
				IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQGRU)
					RECLOCK(CALIAS,.T.)
				ELSE

					// Frank Zwarg Fuga em 01/03/2023
					// Card 650
					// Na alteração em registros já existentes, verificar se existe uma AS associada, se houver
					// Passar a mesma para em aberto, no caso desta estar aceita.
					// levar em consideração para não haver nota emitida para a troca do status.
					ComparaFpa(cprojet,cobra,cseqgru,_cas,aheader,acols,npos,cCamposAS)

					RECLOCK(CALIAS,.F.)
				ENDIF
				FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
				(CALIAS)->FPA_FILIAL := XFILIAL(CALIAS)
				(CALIAS)->FPA_PROJET := CPROJET
				(CALIAS)->FPA_OBRA   := COBRA
				(CALIAS)->FPA_SEQGRU := CSEQGRU
			//	(CALIAS)->FPA_QUANT  := 1 
				IF !EMPTY((CALIAS)->FPA_AS)
					IF LEN(_AREMESSA) > 0
						(CALIAS)->FPA_NFREM  := _AREMESSA[01]
						(CALIAS)->FPA_SERREM := _AREMESSA[02]
						(CALIAS)->FPA_ITEREM := _AREMESSA[03]
						(CALIAS)->FPA_DNFREM := _AREMESSA[04]
					ENDIF
					
					IF !EMPTY((CALIAS)->FPA_NFREM)
						IF LEN(_ARETORNO) > 0
							/* FRANK 02/11/20
							(CALIAS)->FPA_NFRET  := _ARETORNO[01]
							(CALIAS)->FPA_SERRET := _ARETORNO[02]
							(CALIAS)->FPA_ITERET := _ARETORNO[03]
							(CALIAS)->FPA_DNFRET := _ARETORNO[04]
							*/
						ENDIF
					ENDIF
				ENDIF

				AADD(AGRAVADOS,RECNO())  //GRAVADOS
				(CALIAS)->(MSUNLOCK() )
			ENDIF 
		NEXT NPOS 
	ENDIF 

	// EXCLUI OS REGISTROS ALTERADOS
	DBSEEK(XFILIAL(CALIAS)+CPROJET)
	WHILE !EOF() .AND. FPA_FILIAL+FPA_PROJET == XFILIAL(CALIAS)+CPROJET
		IF ASCAN(AGRAVADOS, RECNO() ) == 0
			RECLOCK(CALIAS,.F.)
			(CALIAS)->(DBDELETE())
			(CALIAS)->(MSUNLOCK())
		ENDIF
		DBSKIP()
	ENDDO 

	RestArea(_aArea)
	
	aSize(AGRAVADOS,0)
	FwFreeArray(AGRAVADOS)

	aSize(_aremessa,0)
	FwFreeArray(_aremessa)

	aSize(_aretorno,0)
	FwFreeArray(_aretorno)

	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN NIL

/*/ FFOLDERPLA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FFOLDERPLA(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
LOCAL NSTYLE   := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET  := PROJETO()
LOCAL _LBLQEDI := SUPERGETMV("MV_LOCX228",.F.,.F.)
LOCAL CFIELDOK := NIL							// FIELDOK DA MSNEWGETDADOS.
LOCAL NZ       := 0 

	FOBRA()

	NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

	IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FPA",NOPCMANU, NSTYLE})
	ENDIF 

	CALIAS    := "FPA"
	CCHAVE    := XFILIAL(CALIAS) + CPROJET
	CCONDICAO := 'FPA_FILIAL+FPA_PROJET=="' + CCHAVE + '"'
	NINDICE   := 1  								// FPA_FILIAL+FPA_PROJET+FPA_OBRA+FPA_SEQGRU
	CFILTRO   := CCONDICAO
	AHEADER	  := FHEADER("FPA")
	ACOLS	  := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	IF LEN(ACOLS)==1
		CCAMPO    := "FPA_OBRA"
		CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
		IF EMPTY(CCAMPOGET)
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]      := COBRA
			OPLA_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := COBRA
		ENDIF
		CCAMPO    := "FPA_SEQGRU"
		CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
		IF EMPTY(CCAMPOGET)
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]      := STRZERO(1,LEN(CCAMPOGET))
			OPLA_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
	ENDIF

	IF _LBLQEDI
		FOR NZ := 1 TO LEN(AHEADER)					// PARA BLOQUEAR A EDIÇÃO DOS CAMPOS.
			IF AHEADER[NZ][14] != "V" .AND. ( ! ALLTRIM(AHEADER[NZ][2]) $ "FPA_MOTENT;FPA_CARAC;FPA_CONPAG;FPA_VRHOR;FPA_OBS" )
				AHEADER[NZ][13] := "LOCA00142()" + IIF(EMPTY(AHEADER[NZ][13]) , "" , ".AND.") + ALLTRIM(AHEADER[NZ][13]) 
			ENDIF
		NEXT NZ 
	ENDIF

	/*	// --> P.E. DESCONTINUADO !!! 
	IF EXISTBLOCK("LOCC001_")  .AND.  ASCAN( AHEADER, {|IT| IT[2] == "FPA_ALTERA"} ) > 0		// CONTROLE DE LINHA ALTERADA.
		CFIELDOK := "U_LOCC001_('FPA_ALTERA')"
	ENDIF
	*/	// --> P.E. DESCONTINUADO !!! 

	//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK       ,CTUDOOK		  ,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK        ,OWND                     ,AHEADER,ACOLS}
	ODLGPLA := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,"ALLWAYSTRUE()","ALLWAYSTRUE()","+FPA_SEQGRU",      ,       ,MAXGETDAD,CFIELDOK,         ,"LOCA00143()",OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
	ODLGPLA:OBROWSE:BCHANGE := {|| LOCA00141()}
	ODLGPLA:OBROWSE:BADD	:= {|| IIF(LOCA00172(FP0->FP0_CLI, FP0->FP0_LOJA),ODLGPLA:ADDLINE(),)}
	ODLGPLA:SetEditLine(.F.)

	IF EXISTBLOCK("LC01DPLA") 						// --> PONTO DE ENTRADA PARA TRATAMENTO DA DELECAO DA LINHA - FRANK ZWARG FUGA - 22/05/17
		ODLGPLA:OBROWSE:BDELETE := {|| EXECBLOCK("LC01DPLA",.T.,.T.,{ODLGPLA:NAT, ODLGPLA:ACOLS, ODLGPLA:AHEADER  }) }
	ENDIF

	FACUMUPLA()
	FTRAZPLA()

	// MERGE - ORGUEL 94 - INICIO
	//rodape
	If ExistBlock("LC001LOC")
		ExecBlock("LC001LOC",.F.,.T.,{ "TELA"})
	EndIf
	// MERGE - ORGUEL 94 - FIM
RETURN NIL


/*/ LOCA00142
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00142()						// PODE EDITAR LINHA/CÉLULA? 
LOCAL LRET := .T.

PRIVATE N  := ODLGPLA:NAT

	IF __CUSERID != "000000"						// NÃO É ADMINISTRADOR
		LRET := EMPTY( GDFIELDGET("FPA_AS") )
	ENDIF

RETURN LRET


/*/ LOCA00143
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00143() 
LOCAL LRET := .T.

	IF EMPTY( GDFIELDGET("FPA_NFREM") )
		IF !EMPTY( GDFIELDGET("FPA_AS") )
			IF ALLTRIM(GETADVFVAL("FQ5", "FQ5_STATUS",XFILIAL("FQ5")+GDFIELDGET("FPA_AS"),9,"")) <> "9"
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0257}) //"Cancele a AS para poder excluir a linha."
				LRET := .F.
			ENDIF
		ENDIF
	ELSE
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0258,1,0,Nil,Nil,Nil,Nil,Nil,; //"Este registro não pode ser excluído."
					{STR0259}) //"Existem notas de remessa emitidas, cancele as notas."
		LRET := .F.
	ENDIF

	// TRATAMENTO PARA OS ITENS FILHOS
	IF LRET
		// TODAS AS REGRAS QUE EVITAM A EXCLUSÃO DE UM ITEM DEVEM SER REPLICADAS PARA A FUNÇAO ABAIXO
		// NESTA FUNÇÃO TRATAMOS A EXCLUSÃO DOS ITENS FILHOS DA ESTRUTURA DO PRODUTO.
		LRET := LOCA00198()
	ENDIF

RETURN LRET


/*/ LOCA00144
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00144()
	FOBRA()
	OOBRA:REFRESH()
RETURN .T.

/*/ FSALVAROBR
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVAROBR(CALIAS , AHEADER ,ACOLS) 
LOCAL NPOS,AGRAVADOS	:= {} 	// GRAVADOS
LOCAL AVISTORIA			:= {}
LOCAL NCOMPL   			:= 0
LOCAL NREVIS            := 0
LOCAL NAUXC             := 0
LOCAL NAUXR             := 0
LOCAL CTIPORAT 			:= ""
LOCAL CENVMAIL          := ""
LOCAL CPROJET           := PROJETO()
LOCAL _aArea            := GetArea()

	DBSELECTAREA(CALIAS)  							// OBRAS
	DBSETORDER(1)  									// FP1_FILIAL+FP1_PROJET+FP1_OBRA

	IF NOPC != 5  									// 5=EXCLUI
		FOR NPOS:=1 TO LEN(ACOLS)
			COBRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"})]
			IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA)  //!DELETED()
				IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA)
					RECLOCK(CALIAS,.T.)
				ELSE
					RECLOCK(CALIAS,.F.)
				ENDIF
				FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  // GRAVA TODOS OS CAMPOS DO ACOLS
				(CALIAS)->FP1_FILIAL := XFILIAL(CALIAS)
				(CALIAS)->FP1_PROJET := CPROJET
				(CALIAS)->FP1_OBRA   := COBRA
				(CALIAS)->FP1_RESPON := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_RESPON"})]
				AADD(AGRAVADOS,RECNO())  			// GRAVADOS
				(CALIAS)->(MSUNLOCK())

				// SE TEM VISTORIA, CRIA UM REGISTRO NO ZA8 (RAT)
				IF FP1->(FP1_TEMVIS=="S")
					CENVMAIL := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_EMARAT"})]
					IF CENVMAIL == "S"
						AADD(AVISTORIA,{ZA6->(RECNO()),ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_RESPON"  })]})
					ENDIF

					CTIPORAT := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_TIPRAT"})]
					CTIPORAT := IIF(CTIPORAT==NIL , "" , CTIPORAT)		// O SISTEMA NÃO TINHA O ACOLS[1][8] (SÓ TEM ATÉ 7) E ESTAVA SE PERDENDO. 

					// --> GRAVAÇÃO DOS DADOS DA R.A.T. ----------- (*INICIO*) --
					IF FP5->(DBSEEK(XFILIAL("FP5")+CPROJET+COBRA))
						IF CTIPORAT $ "R/C"
							WHILE !EOF() .AND. FP5->FP5_PROJET + FP5->FP5_OBRA == CPROJET + COBRA
								NAUXC := IIF(!EMPTY(FP5->FP5_COMPLE) , VAL(FP5->FP5_COMPLE)+1 , 1) 
								IF NAUXC > NCOMPL
									NCOMPL := NAUXC
								ENDIF
								NAUXR := IIF(!EMPTY(FP5->FP5_REVISA) , VAL(FP5->FP5_REVISA)+1 , 1) 
								IF NAUXR > NREVIS 
									NREVIS := NAUXR 
								ENDIF 
								FP5->(DBSKIP()) 
							ENDDO 
							FP5->(RECLOCK("FP5",.T.)) 
						ELSE 
							FP5->(RECLOCK("FP5",.F.)) 
						ENDIF 
					ELSE 
						FP5->(RECLOCK("FP5",.T.)) 
					ENDIF 

					FP5->FP5_FILIAL := XFILIAL("FP5") 
					FP5->FP5_PROJET := CPROJET 
					FP5->FP5_OBRA   := COBRA 
				//	FP5->FP5_COD    := GETSXENUM("FP5","FP5_COD")
					FP5->FP5_CODCLI := FP1->FP1_CLIORI
					FP5->FP5_LOJA   := FP1->FP1_LOJORI
					FP5->FP5_NOMCLI := FP1->FP1_NOMORI
					FP5->FP5_RESPON := FP1->FP1_NOMRES
					FP5->FP5_OBSERV := FP1->FP1_ESCOPO
					FP5->FP5_GESTOR := FP0->FP0_VENDED
					FP5->FP5_ITEM   := "001"
					CTIPOSE := STR0119 //"LOCAÇÃO"
					FP5->FP5_TPSERV := CTIPOSE 	// FP0->FP0_TIPOSE
					IF     CTIPORAT == "R"
						FP5->FP5_REVISA	:= STRZERO(NREVIS,3)
					ELSEIF CTIPORAT == "C"
						FP5->FP5_COMPLE := STRZERO(NCOMPL,3)
					ENDIF
					FP5->FP5_PRAZO := FP1->FP1_DTVIS 
					FP5->(MSUNLOCK()) 
					// --> GRAVAÇÃO DOS DADOS DA R.A.T. ----------- (*FINAL* ) --

				ENDIF 
			ENDIF 
		NEXT NPOS 
	ENDIF 

	// EXCLUI OS REGISTROS ALTERADOS
	DBSEEK(XFILIAL(CALIAS)+CPROJET)
	WHILE !EOF() .AND. FP1_FILIAL+FP1_PROJET==XFILIAL(CALIAS)+CPROJET
		IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
			RECLOCK(CALIAS,.F.)
			(CALIAS)->(DBDELETE())
			(CALIAS)->(MSUNLOCK())
		ENDIF
		DBSKIP()
	ENDDO 

	RestArea(_aArea)
	
	aSize(AGRAVADOS,0)
	FwFreeArray(AGRAVADOS)

	aSize(AVISTORIA,0)
	FwFreeArray(AVISTORIA)

	aSize(_aArea,0)
	FwFreeArray(_aArea)

RETURN NIL


/*/ FFOLDERFOL
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FFOLDERFOL(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
LOCAL NSTYLE	   := GD_INSERT + GD_UPDATE + GD_DELETE //0						// GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL ASTATUS
LOCAL ARET       := {}
LOCAL CPROJET    := PROJETO()

PRIVATE AHEADER    := {}
PRIVATE ACOLS      := {}

	NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

	IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP9",NOPCMANU, NSTYLE})
	ENDIF

	IF FP0->FP0_STATUS == "1"
		AADD(ARET,STR0018) //"1=EM ELABORAÇÃO"
	ENDIF
	IF FP0->FP0_STATUS == "2"
		AADD(ARET,STR0019 ) //"2=EM APROVAÇÃO"
	ENDIF
	IF FP0->FP0_STATUS == "3"
		AADD(ARET,STR0020     ) //"3=APROVADO"
	ENDIF
	IF FP0->FP0_STATUS == "4"
		AADD(ARET,STR0021 ) //"4=NÃO APROVADO"
	ENDIF
	IF FP0->FP0_STATUS == "5"
		AADD(ARET,STR0022      ) //"5=FECHADO"
	ENDIF
	IF FP0->FP0_STATUS $  "1|3|6"
		AADD(ARET,STR0023 ) //"6=INDISPONÍVEL"
	ENDIF
	IF FP0->FP0_STATUS $  "1|3|7"
		AADD(ARET,STR0024    ) //"7=REJEITADO"
	ENDIF
	IF FP0->FP0_STATUS $  "5|8"
		AADD(ARET,STR0025     ) //"8=FATURADO"
	ENDIF
	IF FP0->FP0_STATUS == "A"
		AADD(ARET,STR0026     ) //"A=REVISADO"
	ENDIF
	IF FP0->FP0_STATUS $  "1|B"
		AADD(ARET,STR0027     ) //"B=EXCLUIDO"
	ENDIF
	IF FP0->FP0_STATUS $  "1|3|C"
		AADD(ARET,STR0028      ) //"C=PERDIDO"
	ENDIF

	IF EXISTBLOCK("LC001FST") 						// --> PONTO DE ENTRADA ALTERAÇÃO DOS STATUS DISPONÍVEIS NA ABA FOLLOW UP.
		ARET := EXECBLOCK("LC001FST",.T.,.T.,{ARET})
	ENDIF

	ASTATUS := ACLONE(ARET)  						// TRAZ OS STATUS DAS PROPOSTAS PERMITIDAS NO PROCESSO DE APROVAÇÃO

	FP9->(DBSEEK(XFILIAL("FP9")+CPROJET))
	CFOLLOW0 := FP9->FP9_FOLLOW

	@ NLIN1+20+00                       ,NCOL1 GET OFOLLOW  VAR CFOLLOW  SIZE INT((NCOL2-NCOL1)/2),INT((NLIN2-22)*.25)    OF OFOLDER:ADIALOGS[NFOLDER] PIXEL MEMO
	@ NLIN1+20+00+INT((NLIN2-22)*.25)+05,NCOL1 GET OFOLLOW0 VAR CFOLLOW0 SIZE INT((NCOL2-NCOL1)/2),INT((NLIN2-22)*.75)-05 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL MEMO

	OFOLLOW0:LREADONLY :=.T.
	OFOLLOW:LREADONLY  := ! FWHEN()

	@ NLIN1,NCOL1 TO NLIN1+18,NCOL2 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 
	@ NLIN1+06,NCOL1+005 SAY   OEMTOANSI(STR0262)  SIZE 060,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL //"Data para o retorno:"
	@ NLIN1+05,NCOL1+060 MSGET ODATARET VAR DDATARET PICTURE "@D" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() //WHEN UPPER(ALLTRIM(SUBS(CUSUARIO,7,05)))==UPPER("ADMIN")

	@ NLIN1+06,NCOL2-275 SAY   OEMTOANSI(STR0263)             SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL //"Validade:"
	@ NLIN1+05,NCOL2-240 MSGET ODATAVAL VAR DDATAVAL PICTURE "@D" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() //WHEN UPPER(ALLTRIM(SUBS(CUSUARIO,7,05)))==UPPER("ADMIN")

	FMONTAFOL()  									// MONTA AHEADER E ACOLS DO FOLDER FOLLOW-UP

	NCOL2B:=INT((NCOL2-NCOL1)/2)+10
	@ NLIN1+18,INT((NCOL2-NCOL1)/2)+10 TO NLIN1+20+00+INT((NLIN2-22)*.25),NCOL2 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 

	@ NLIN1+23,NCOL2B+002 SAY OEMTOANSI(STR0264)                     SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL //"Status:"
	@ NLIN1+22,NCOL2B+035 COMBOBOX OSTATUS  VAR CSTATUS ITEMS ASTATUS  SIZE 065,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN()		//WHEN UPPER(ALLTRIM(SUBS(CUSUARIO,7,05)))==UPPER("ADMIN")

	@ NLIN1+35,NCOL2B+002 SAY   OEMTOANSI(STR0265)                 SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL //"Ganhador:"
	@ NLIN1+34,NCOL2B+035 MSGET OCODCONCO  VAR CCODCONCO  PICTURE "@!" SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() .AND. CSTATUS=="7" 
	@ NLIN1+34,NCOL2B+070 MSGET ONOMCONCO  VAR CNOMCONCO  PICTURE "@!" SIZE 150,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN(.F.)

	@ NLIN1+46,NCOL2B+002 SAY   OEMTOANSI(STR0266)               SIZE 040,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL //"Vr.Transp.:"
	@ NLIN1+45,NCOL2B+035 MSGET OVALCONCO  VAR NVALCONCO  PICTURE "@E 999,999,999.99" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() .AND. CSTATUS=="7"

	@ NLIN1+46,NCOL2B+93 SAY   OEMTOANSI(STR0267)               SIZE 040,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL //"Vr.Locação:"
	@ NLIN1+45,NCOL2B+133 MSGET OVALCONCOL VAR NVALCONCOL PICTURE "@E 999,999,999.99" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() .AND. CSTATUS=="7"

RETURN NIL 


/*/ FSALVARFOL
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARFOL(CALIAS)		// FOLDER FOLLOW-UP
LOCAL CALIASZA0 := "FP0"
LOCAL CPROJET   := PROJETO()
Local cAliasFp9	:= GetNextAlias()
LOCAL _aArea    := GetArea()

	// --> GRAVA A DATA DE RETORNO NO ZA0
	DBSELECTAREA(CALIASZA0)
	DBSETORDER(1) 								// FP0_FILIAL+FP0_PROJET+FP0_NUM

	IF NOPC == 3  								// 3=INCLUI
		M->FP0_DTRETO := DDATARET
	ELSE
		RECLOCK(CALIASZA0,.F.)
		(CALIASZA0)->FP0_DTRETO := DDATARET 	// DATA DE RETORNO
		(CALIASZA0)->FP0_STATUS := CSTATUS 		// GRAVO O STATUS NO CASO DE SER ABERTO APENAS PELO BOTÃO FOLLOW-UP
		(CALIASZA0)->(MSUNLOCK())
	ENDIF

	DBSELECTAREA(CALIAS)
	DBSETORDER(1)

	IF DBSEEK( XFILIAL(CALIAS) + CPROJET) .AND. NOPC == 5  //5=EXCLUI
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
		BLOQCLASS(CPROJET)
		RETURN NIL
	ENDIF

	IF  ! EMPTY(DDATARET) .OR. ! EMPTY(CFOLLOW) 
		DBSELECTAREA(CALIAS)
		DBSETORDER(1)

		IF ! DBSEEK( XFILIAL(CALIAS) + CPROJET)
			RECLOCK(CALIAS,.T.)
			(CALIAS)->FP9_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FP9_PROJET := CPROJET  //NRO.PROJETO
			(CALIAS)->FP9_DATA   := DDATARET
			(CALIAS)->FP9_ITEM   := "001"
			(CALIAS)->FP9_DDIA   := DDATABASE
			(CALIAS)->FP9_USER   := USRRETNAME(RETCODUSR())
			(CALIAS)->FP9_MAIL   := USRRETMAIL(RETCODUSR())
		ELSE

			CSQL := " SELECT TOP 1 FP9_ITEM "
			CSQL += " FROM "+RETSQLNAME("FP9")
			CSQL += " WHERE  FP9_PROJET = '"+CPROJET+"'"
			CSQL +=   " AND  D_E_L_E_T_ = '' "
			CSQL += " ORDER BY FP9_ITEM DESC "
			CSQL := CHANGEQUERY(CSQL) 

			DbUseArea(.T. , "TOPCONN" , TcGenQry(,,CSQL) ,cAliasFp9 , .F. , .T.) 
			
			CSEQ := SOMA1( ALLTRIM((cAliasFp9)->FP9_ITEM) , 3 , .T. ) 

			(cAliasFp9)->(DbCloseArea())

			RECLOCK(CALIAS,.F.)
			(CALIAS)->FP9_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FP9_PROJET := CPROJET  //NRO.PROJETO
			(CALIAS)->FP9_DATA   := DDATARET
			(CALIAS)->FP9_USER   := USRRETNAME(RETCODUSR())
			(CALIAS)->FP9_MAIL   := USRRETMAIL(RETCODUSR())
			(CALIAS)->FP9_DDIA   := DDATABASE
			(CALIAS)->FP9_ITEM   := CSEQ
		ENDIF

		// A CADA INCLUSÃO O SISTEMA DEVERÁ IDENTIFICAR A DATA, HORA E USUÁRIO QUE EXECUTOU A TAREFA
		IF !EMPTY(CFOLLOW)
			CFOLLOW := "==> " + DTOC(DDATABASE) + STR0268 + TIME() + STR0269 + SUBSTR(CUSUARIO,7,15) + CRLF + ALLTRIM(CFOLLOW) //" AS "###" POR "
			(CALIAS)->FP9_FOLLOW :=	CFOLLOW + CRLF + REPLICATE("_",100) + CRLF + ALLTRIM(CFOLLOW0)
		ENDIF
		(CALIAS)->(MSUNLOCK())
	ENDIF
	restarea(_aArea)
	
	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN NIL 


/*/ FMONTAFOL
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FMONTAFOL() 
LOCAL CCAMPOSSIM := "AC9_DESCRI"

	AHEADER := FHEADER("AC9", CCAMPOSSIM)
	ACOLS := {}
	CALIAS    := "AC9"
	CCHAVE    := XFILIAL(CALIAS)+"FP0"+CFILANT+CFILANT+FP0->FP0_PROJET
	CCONDICAO := "ALLTRIM(AC9_FILIAL+AC9_ENTIDA+AC9_FILENT+AC9_CODENT)=='"+ALLTRIM(CCHAVE)+"'"
	NINDICE   := 2  								
	CFILTRO   := CCONDICAO
	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

RETURN .T.


/*/ LOCA00145
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00145(COPER,CFILENAME,CPARAM,CDIR,LMSG)		// FOLDER FOLLOW-UP
RETURN .T.


/*/ FFOLDERRES
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FFOLDERRES(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
LOCAL NSTYLE     := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET    := PROJETO()
LOCAL CCAMPOSNAO := ""

	NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

	IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP6",NOPCMANU, NSTYLE})
	ENDIF 

	CALIAS    := "FP6"
	CCHAVE    := XFILIAL(CALIAS)+CPROJET
	CCONDICAO := 'FP6_FILIAL+FP6_PROJET=="'+CCHAVE+'"'
	NINDICE   := 2  								// FP6_FILIAL+FP6_PROJET+FP6_OBRA+FP6_SEQGUI+FP6_SEQRES
	CFILTRO   := CCONDICAO
	AHEADER   := FHEADER("FP6",, CCAMPOSNAO)
	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	IF LEN(ACOLS)==1
		CCAMPO    := "FP6_SEQRES"
		CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
		IF EMPTY(CCAMPOGET)
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
	ENDIF

	CCAMPO    := "FP6_SEQRES"
	CCAMPOGET := ORES_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ORES_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF

	//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
	ODLGRES := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FP6_SEQRES",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
	ODLGRES:OBROWSE:BCHANGE := {|| MUDARESB()}
	ODLGRES:SetEditLine(.F.)

	FACUMURES()
	FTRAZRES()

RETURN NIL


/*/ MUDARESB
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION MUDARESB() 
LOCAL LRET   :=.T.
LOCAL CBECH  := SPACE(3)

	FOBRA()

	IF ODLGRES:NAT > LEN(ODLGRES:ACOLS)
		ODLGRES:NAT := LEN(ODLGRES:ACOLS)
	ENDIF

	IF EMPTY( ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] )
		CBECH := CSEQGRU

		ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})]   := COBRA
		ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] := CBECH
		ODLGRES:OBROWSE:REFRESH()
	ENDIF

RETURN LRET

/*/ FSALVARRES
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARRES(CALIAS , AHEADER , ACOLS) 
LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL _NXX
LOCAL _aArea    := GetArea()

	// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
	FACUMURES()
	ACOLS := ACLONE(ORES_COLS)

	DBSELECTAREA(CALIAS)
	DBSETORDER(2)									// FP6_FILIAL+FP6_PROJET+FP6_OBRA+FP6_SEQGUI+FP6_SEQRES

	IF NOPC !=5  									// 5=EXCLUI

		// FRANK EM 23/09/2020
		// TRATAMENTO PARA A DELECAO DA ZA1
		IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
			FOR _NXX := 1 TO LEN(ACOLS)
				IF ACOLS[_NXX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] == ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
					ACOLS[_NXX,LEN(AHEADER)+1] := .T.
					AADD(ARESDEL,ACLONE(ACOLS[_NXX]))
				ENDIF
			NEXT
		ENDIF

		FOR NPOS:=1 TO LEN(ACOLS)
			COBRA  	 := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})]
			CLOCACAO := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})]
			CSEQRES	 := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQRES"})]
			CCODRES  := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})]
			IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY( CLOCACAO ) .AND. !EMPTY(CSEQRES) .AND. !EMPTY(CCODRES)  //!DELETED()
				IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CLOCACAO+CSEQRES)
					RECLOCK(CALIAS,.T.)
				ELSE
					RECLOCK(CALIAS,.F.)
				ENDIF
				FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
				(CALIAS)->FP6_FILIAL := XFILIAL(CALIAS)
				(CALIAS)->FP6_PROJET := CPROJET
				(CALIAS)->FP6_OBRA   := COBRA
				(CALIAS)->FP6_SEQGUI := CLOCACAO
				(CALIAS)->FP6_SEQRES := CSEQRES
				AADD(AGRAVADOS,RECNO())  			// GRAVADOS
				(CALIAS)->(MSUNLOCK())
			ENDIF
		NEXT
	ENDIF

	// EXCLUI OS REGISTROS ALTERADOS
	DBSELECTAREA("FP6")
	DBSETORDER(2)
	FOR NPOS:=1 TO LEN(ARESDEL)
		IF DBSEEK(XFILIAL(CALIAS)+CPROJET+ARESDEL[NPOS][1]+ARESDEL[NPOS][2]+ARESDEL[NPOS][3])
			RECLOCK(CALIAS,.F.)
			(CALIAS)->(DBDELETE())
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT
	restarea(_aArea)
	
	aSize(AGRAVADOS,0)
	FwFreeArray(AGRAVADOS)

	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN NIL


/*/ FFOLDERDOC
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FFOLDERDOC(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
LOCAL NSTYLE  := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()

	NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

	IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FPB",NOPCMANU, NSTYLE})
	ENDIF

	CALIAS    := "FPB"
	CCHAVE    := XFILIAL(CALIAS)+CPROJET
	CCONDICAO := 'FPB_FILIAL+FPB_PROJET=="'+CCHAVE+'"'
	NINDICE   := 1  								// FPB_FILIAL+FPB_PROJET+FPB_OBRA+FPB_SEQDOC
	CFILTRO   := CCONDICAO
	AHEADER   := FHEADER("FPB")
	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	IF LEN(ACOLS)==1
		CCAMPO    := "FPB_SEQDOC"
		CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
		IF EMPTY(CCAMPOGET)
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
	ENDIF

	CCAMPO    := "FPB_SEQDOC"
	CCAMPOGET := ODOC_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ODOC_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF

	//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
	ODLGDOC := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FPB_SEQDOC",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
	ODLGDOC:OBROWSE:BCHANGE := {|| LOCA00146()}
	ODLGDOC:SetEditLine(.F.)

	FACUMUDOC()
	FTRAZDOC()

	@ NLIN2+005,INT((NCOL2-NCOL1)/2)-30 BUTTON OBUTTDOC PROMPT "Documentos" SIZE 60,10 ACTION FVERDOCUM() OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 

RETURN NIL


/*/ LOCA00146
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00146() 
	FOBRA()
	IF ODLGDOC:NAT > LEN(ODLGDOC:ACOLS)
		ODLGDOC:NAT := LEN(ODLGDOC:ACOLS)
	ENDIF
	ODLGDOC:ACOLS[ODLGDOC:NAT][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})] := COBRA
	ODLGDOC:OBROWSE:REFRESH()
RETURN .T.


/*/ FSALVARDOC
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FSALVARDOC(CALIAS,AHEADER,ACOLS) 
LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL _aArea    := GetArea()

	// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
	FACUMUDOC()
	ACOLS := ACLONE(ODOC_COLS)

	DBSELECTAREA(CALIAS)
	DBSETORDER(1)

	IF NOPC != 5  //5=EXCLUI
		FOR NPOS:=1 TO LEN(ACOLS)
			COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})]
			CSEQDOC := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_SEQDOC"})]
			IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQDOC)  //!DELETED()
				IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQDOC)
					RECLOCK(CALIAS,.T.)
				ELSE
					RECLOCK(CALIAS,.F.)
				ENDIF
				FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
				(CALIAS)->FPB_FILIAL := XFILIAL(CALIAS)
				(CALIAS)->FPB_PROJET := CPROJET
				(CALIAS)->FPB_OBRA   := COBRA
				(CALIAS)->FPB_SEQDOC := CSEQDOC
				AADD(AGRAVADOS,RECNO())  			// GRAVADOS
				(CALIAS)->(MSUNLOCK())
			ENDIF
		NEXT
	ENDIF

	// EXCLUI OS REGISTROS ALTERADOS
	DBSEEK(XFILIAL(CALIAS)+CPROJET)
	WHILE !EOF() .AND. FPB_FILIAL+FPB_PROJET==XFILIAL(CALIAS)+CPROJET
		IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
			RECLOCK(CALIAS,.F.)
			(CALIAS)->(DBDELETE())
			(CALIAS)->(MSUNLOCK())
		ENDIF
		DBSKIP()
	ENDDO 
	restarea(_aArea)
	
	aSize(AGRAVADOS,0)
	FwFreeArray(AGRAVADOS)
	
	aSize(_aArea,0)
	FwFreeArray(_aArea)
RETURN NIL

/*/ LOCA00147
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00147(CCAMPO)					// VALIDAÇÕES
LOCAL LRET   := .T.
LOCAL CCOD 
LOCAL CLOJA 

	DO CASE
	CASE UPPER(CCAMPO) == "FP0_PROSPE"
		IF TYPE("FP0_PROSPE")<>"U" 					// SE A VARIÁVEL EXISTE
			CCOD  := M->FP0_PROSPE
			CLOJA := M->FP0_LOJAP
			SUS->(DBSEEK(XFILIAL("SUS")+CCOD+CLOJA))
			SA1->(DBSEEK(XFILIAL("SA1")+SUS->US_CODCLI+SUS->US_LOJACLI))
			M->FP0_CLINOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_NOME)
			M->FP0_PRONOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_NOME   , SA1->A1_NOME)
			M->FP0_CLICGC := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CGC    , SA1->A1_CGC)
			M->FP0_CLIEND := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_END    , SA1->A1_END)
			M->FP0_CLIINS := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_INSCR  , SA1->A1_INSCR)
			M->FP0_CLIMUN := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_MUN    , SA1->A1_MUN)
			M->FP0_CLIBAI := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_BAIRRO , SA1->A1_BAIRRO)
			M->FP0_CLIEST := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EST    , SA1->A1_EST)
			M->FP0_CLICEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CEP    , SA1->A1_CEP)
			M->FP0_CLIEMA := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EMAIL  , SA1->A1_EMAIL)
			M->FP0_CLIDDD := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_DDD    , SA1->A1_DDD)
			M->FP0_CLITEL := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_TEL    , SA1->A1_TEL)
			M->FP0_CLIFAX := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_FAX    , SA1->A1_FAX)
			M->FP0_CLI    := SUS->US_CODCLI
			M->FP0_LOJA   := SUS->US_LOJACLI
			M->FP0_NOMECO := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , M->FP0_NOMECO  , SA1->A1_CONTATO)
			//M->FP0_CLIDEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_DEPTCON)
			M->FP0_VENDED := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI),SUS->US_VEND     , SA1->A1_VEND) 
			M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME") 
		ENDIF

	CASE UPPER(CCAMPO) == "FP0_LOJAP"
		IF TYPE("FP0_LOJAP")<>"U"  					// SE A VARIÁVEL EXISTE
			CCOD  := M->FP0_PROSPE
			CLOJA := M->FP0_LOJAP
			SUS->(DBSEEK(XFILIAL("SUS")+CCOD+CLOJA))
			SA1->(DBSEEK(XFILIAL("SA1")+SUS->US_CODCLI+SUS->US_LOJACLI))
			M->FP0_CLINOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_NOME)
			M->FP0_PRONOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_NOME   , SA1->A1_NOME)
			M->FP0_CLICGC := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CGC    , SA1->A1_CGC)
			M->FP0_CLIEND := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_END    , SA1->A1_END)
			M->FP0_CLIINS := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_INSCR  , SA1->A1_INSCR)
			M->FP0_CLIMUN := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_MUN    , SA1->A1_MUN)
			M->FP0_CLIBAI := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_BAIRRO , SA1->A1_BAIRRO)
			M->FP0_CLIEST := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EST    , SA1->A1_EST)
			M->FP0_CLICEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CEP    , SA1->A1_CEP)
			M->FP0_CLIEMA := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EMAIL	 , SA1->A1_EMAIL)
			M->FP0_CLIDDD := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_DDD    , SA1->A1_DDD)
			M->FP0_CLITEL := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_TEL    , SA1->A1_TEL)
			M->FP0_CLIFAX := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_FAX    , SA1->A1_FAX)
			M->FP0_CLI    := SUS->US_CODCLI
			M->FP0_LOJA   := SUS->US_LOJACLI
			M->FP0_NOMECO := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , M->FP0_NOMECO  , SA1->A1_CONTATO)
			//M->FP0_CLIDEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_DEPTCON)
			M->FP0_VENDED := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI),SUS->US_VEND     , SA1->A1_VEND) 
			M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME")
		ENDIF

	CASE UPPER(CCAMPO) == "FP0_CLI"
		IF TYPE("FP0_CLI")<>"U"  					// SE A VARIÁVEL EXISTE
			CCOD  := M->FP0_CLI
			// [inicio] José Eulálio - 19/05/2022 - SIGALOC94-270 - FP0_CLI: Gatilhar nome do cliente, cnpj e demais informações via gatilho
			If Empty(M->FP0_LOJA)
				POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD , "A1_NOME") 
				M->FP0_LOJA := SA1->A1_LOJA
			EndIf
			// [Fim] José Eulálio - 19/05/2022 - SIGALOC94-270 - FP0_CLI: Gatilhar nome do cliente, cnpj e demais informações via gatilho
			CLOJA := M->FP0_LOJA
			POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
			M->FP0_CLINOM := SA1->A1_NOME
			M->FP0_CLICGC := SA1->A1_CGC
			M->FP0_CLIEND := SA1->A1_END
			M->FP0_CLIINS := SA1->A1_INSCR
			M->FP0_CLIMUN := SA1->A1_MUN
			M->FP0_CLIBAI := SA1->A1_BAIRRO
			M->FP0_CLIEST := SA1->A1_EST
			M->FP0_CLICEP := SA1->A1_CEP
			M->FP0_CLIEMA := SA1->A1_EMAIL
			M->FP0_CLIDDD := SA1->A1_DDD
			M->FP0_CLITEL := SA1->A1_TEL
			M->FP0_CLIFAX := SA1->A1_FAX
		//	M->FP0_CLICON := SA1->A1_CONTATO
			M->FP0_NOMECO := SA1->A1_CONTATO
			//M->FP0_CLIDEP := SA1->A1_DEPTCON
			M->FP0_VENDED := SA1->A1_VEND
			M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME") 
			IF EMPTY(M->FP0_CLI)  					// SE CÓDIGO DO CLIENTE NÃO FOR PREENCHIDO, MARCA FALSE NO CAMPO FP0_CLIENTE
				M->FP0_CLIENTE :=.F.  				// CLIENTE S/N? (CRIARÁ O CLIENTE NO SA1 NA GERAÇÃO DO CONTRATO)
			ELSE
				M->FP0_CLIENTE :=.T.  				// CLIENTE S/N? (UTILIZARÁ OS DADOS DO CLIENTE DO SA1 NA GERAÇÃO DO CONTRATO)
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FP0_LOJA"
		IF TYPE("FP0_LOJA")<>"U" 					// SE A VARIÁVEL EXISTE
			CCOD  := M->FP0_CLI
			CLOJA := M->FP0_LOJA
			SA1->(DbSetOrder(1)) //A1_FILIAL+A1_COD+A1_LOJA
			If SA1->(DbSeek(XFILIAL("SA1")+CCOD+CLOJA)) // José Eulálio - 19/05/2022 - SIGALOC94-270 - FP0_CLI: Gatilhar nome do cliente, cnpj e demais informações via gatilho
				// VERIFICO SE EXISTE ALGUM RECLAMAÇÃO NO CALL CENTER 
				IF SELECT("TRBSUC") > 0
					TRBSUC->(DBCLOSEAREA())
				ENDIF
				CCLIENTE:=CCOD+CLOJA
				CSQL     := " SELECT SUC.R_E_C_N_O_ AS SUCRECNO " 
				CSQL     += " FROM "+RETSQLNAME("SUC")+ " SUC"
				CSQL     += " WHERE  UC_CHAVE ='"+CCLIENTE+"' "
				IF SUC->(FIELDPOS("UC_XRECLAM")) > 0			// SE EXISTIR CONSIDERA NA QUERY - 31/08/2016
					CSQL +=   " AND  ISNULL(CONVERT(VARCHAR(2047),CONVERT(VARBINARY(2047), UC_XRECLAM)),'')<> '' "
				ENDIF
				CSQL     +=   " AND  SUC.D_E_L_E_T_ ='' "
				CSQL     += " ORDER BY SUCRECNO DESC"
				CSQL := CHANGEQUERY(CSQL) 
				DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CSQL) , "TRBSUC" , .F. , .T.) 

				POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME")
				M->FP0_CLINOM := SA1->A1_NOME
				M->FP0_CLICGC := SA1->A1_CGC
				M->FP0_CLIEND := SA1->A1_END
				M->FP0_CLIINS := SA1->A1_INSCR
				M->FP0_CLIMUN := SA1->A1_MUN
				M->FP0_CLIBAI := SA1->A1_BAIRRO
				M->FP0_CLIEST := SA1->A1_EST
				M->FP0_CLICEP := SA1->A1_CEP
				M->FP0_CLIEMA := SA1->A1_EMAIL
				M->FP0_CLIDDD := SA1->A1_DDD
				M->FP0_CLITEL := SA1->A1_TEL
				M->FP0_CLIFAX := SA1->A1_FAX
				M->FP0_NOMECO := SA1->A1_CONTATO
				//M->FP0_CLIDEP := SA1->A1_DEPTCON
				M->FP0_VENDED := SA1->A1_VEND
				M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME")
			Else
				LRET := .F.
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
							Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
							{"Informe um código [FP0_CLI + FP0_LOJA] existente no cadastro de Clientes (SA1)"}) //"Tipo de serviço para receita de transportes só poderá ser E-Equipamento, L-Locação."
			EndIf
		ENDIF

	CASE UPPER(CCAMPO) == "FP0_VENDED"
		IF TYPE("FP0_VENDED")<>"U" 					// SE A VARIÁVEL EXISTE
			CCOD := M->FP0_VENDED
			POSICIONE("SA3" , 1 , XFILIAL("SA3")+CCOD , "A3_NOME") 
			M->FP0_NOMVEN := SA3->A3_NOME
		ENDIF

	CASE UPPER(CCAMPO) == "FP0_RECEIT"
		M->FP0_TIPOSE := LOCA00148(M->FP0_RECEIT,M->FP0_TIPOSE)
		M->FP0_MODPRO := LOCA00149(M->FP0_RECEIT,M->FP0_MODPRO)

	CASE UPPER(CCAMPO) == "FP0_TIPOSE" .AND. M->FP0_TIPOSE <> M->FP0_RECEIT
		IF M->FP0_RECEIT $ "TO"
			IF ! M->FP0_TIPOSE $ "E;L"
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
							Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
							{STR0271}) //"Tipo de serviço para receita de transportes só poderá ser E-Equipamento, L-Locação."
				LRET := .F.
			ENDIF
		ELSE
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
							Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
							{STR0272}) //"Só pode ser alterado o tipo de serviço para receita igual a T-Transportes."
			LRET := .F.
		ENDIF

	CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FPD"
		
	CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP4"
		LRET := LOCA00152(CCAMPO)

	CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP1"
		LRET := LOCA00150(CCAMPO)

	CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP8"
		
	CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP6"
		LRET := LOCA00155(CCAMPO)

	CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FPB"
		LRET := LOCA00159(CCAMPO)

	CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FPA"
		LRET := LOCA00157(CCAMPO)

	ENDCASE

	// PESQUISA NO CADASTRO DE CONTATOS E PREENCHE OS CAMPOS DEVIDOS.
	IF UPPER(CCAMPO) $ "FP0_LOJA;FP0_CLI" .AND. SUPERGETMV("MV_LOCX238",.F.,.T.) // PARAMETRO PARA INFORMAR SE DEVE GATILHAR O CONTATO
		SU5->( DBSETORDER(1) )
		AC8->( DBSETORDER(2) )
		AC8->( DBSEEK( XFILIAL("AC8") + "SA1" + SA1->( A1_FILIAL + A1_COD + A1_LOJA ), .T. ))	// VÍNCULO CONTATOS X CLIENTES
		WHILE ! AC8->( EOF() ) .AND. XFILIAL("AC8") + "SA1" + SA1->( A1_FILIAL + A1_COD + A1_LOJA ) == AC8->( AC8_FILIAL+AC8_ENTIDA+AC8_FILENT+ LEFT(AC8_CODENT, LEN(SA1->A1_COD)+LEN(SA1->A1_LOJA) ) )
			IF SU5->( DBSEEK( XFILIAL("SU5") + AC8->AC8_CODCON, .T. ) ) .AND. SU5->U5_ATIVO != "2" 
				M->FP0_CLICON := SU5->U5_CODCONT
				M->FP0_NOMECO := SU5->U5_CONTAT
				M->FP0_CLIEMA := SU5->U5_EMAIL

				IF ! EMPTY( SU5->U5_DEPTO )
					SQB->( DBSETORDER(1) )
					IF SQB->( DBSEEK( XFILIAL("SQB") + SU5->U5_DEPTO ) )
						M->FP0_CLIDEP := SQB->QB_DESCRIC
					ENDIF
				ENDIF
				EXIT
			ENDIF
			AC8->(DBSKIP())
		ENDDO 
	ENDIF

RETURN LRET 

/*/ LOCA00148
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00148(CRECEITA,CTIPOSE) 		// VALIDAÇÕES
LOCAL CRET := CTIPOSE

	IF CRECEITA $ " TEL"
		CRET := CRECEITA
	ENDIF

RETURN CRET


/*/ LOCA00149
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00149(CRECEITA,CMODPRO) 		// VALIDAÇÕES
LOCAL CRET := CMODPRO

	IF CRECEITA $ " TEL"
		CRET := "P"
	ENDIF

RETURN CRET


/*/ LOCA00150
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00150(CCAMPO) 					// VALIDAÇÕES
LOCAL LRET := .T.
LOCAL CCOD
LOCAL CDESC
LOCAL CESTADO

	DO CASE
	CASE UPPER(CCAMPO) == "FP1_CLIORI"
		IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
			CCOD  := M->FP1_CLIORI
			CLOJA := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_LOJORI"})]
			POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := SA1->A1_NOME
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CGCORI"})] := SA1->A1_CGC
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ENDORI"})] := SA1->A1_END
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_INSORI"})] := SA1->A1_INSCR
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := SA1->A1_MUN
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_BAIORI"})] := SA1->A1_BAIRRO
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := SA1->A1_EST
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CEPORI"})] := SA1->A1_CEP
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_EMAORI"})] := SA1->A1_EMAIL
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_DDDORI"})] := SA1->A1_DDD
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_TELORI"})] := SA1->A1_TEL
			IF ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"}) > 0
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"})] := SA1->A1_FAX
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FP1_LOJORI"
		IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
			CCOD  := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CLIORI"})]
			CLOJA := M->FP1_LOJORI
			POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := SA1->A1_NOME
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CGCORI"})] := SA1->A1_CGC
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ENDORI"})] := SA1->A1_END
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_INSORI"})] := SA1->A1_INSCR
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := SA1->A1_MUN
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_BAIORI"})] := SA1->A1_BAIRRO
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := SA1->A1_EST
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CEPORI"})] := SA1->A1_CEP
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_EMAORI"})] := SA1->A1_EMAIL
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_DDDORI"})] := SA1->A1_DDD
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_TELORI"})] := SA1->A1_TEL
			IF ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"}) > 0
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"})] := SA1->A1_FAX
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FP1_ORIGEM"
		IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
			CCOD    := M->FP1_ORIGEM
			CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
			CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO") 
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := CDESC
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := CESTADO
		ENDIF

	CASE UPPER(CCAMPO) == "FP1_DESTIN"
		IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
			CCOD    := M->FP1_DESTIN
			CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
			CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO") 
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNDES"})] := CDESC
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTDES"})] := CESTADO
		ENDIF

	ENDCASE

RETURN LRET

/*/ LOCA00152
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00152(CCAMPO)					// VALIDAÇÕES
LOCAL LRET    := .T.
LOCAL NVALOR  := 0

	DO CASE
	CASE UPPER(CCAMPO) == "FP4_PRODUT"
		NVALOR := 0 // removido na 94 POSICIONE("SB1" , 1 , XFILIAL("SB1")+M->FP4_PRODUT , "B1_XVALMO") 
		NVALOR := NVALOR/ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR"})]
		NVALOR := NVALOR/0.01
	ENDCASE

RETURN LRET 


/*/ LOCA00155
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00155(CCAMPO)					// VALIDAÇÕES
LOCAL LRET    := .T.
LOCAL CCOD
LOCAL CDESC

	DO CASE
	CASE UPPER(CCAMPO) == "FP6_CODIGO"
		IF VALTYPE(ODLGRES)=="O"  					// SE O OBJETO JÁ FOI CRIADO
			CCOD  := M->FP6_CODIGO
			CDESC := POSICIONE("FP7" , 1 , XFILIAL("FP7")+CCOD , "FP7_DESCRI")
			ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
			ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
			ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := FP7->FP7_RESPON
		ENDIF
	ENDCASE

RETURN LRET

/*/ LOCA00157
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00157(CCAMPO)					// VALIDAÇÕES
Local LRET     := .T.
Local CCOD
Local CDESC
Local CPROD
Local CTPGUIM
Local CTPGUID
Local NBASE
Local NPERC
Local NVALOR
Local aArea := GetArea()

	DO CASE
	CASE UPPER(CCAMPO) == "FPA_PRODUT"
		IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
			CPROD :=M->FPA_PRODUT
			SB1->(DBSETORDER(1))
			IF !SB1->(DBSEEK(XFILIAL("SB1") + CPROD))
	
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0284 + ALLTRIM(CPROD) + STR0285}) //"O produto: "###" não está cadastrado."

			LRET := .F.								
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FPA_GRUA"
		IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
			CPROD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]
			CCOD  := M->FPA_GRUA

			ST9->(DBSETORDER(1))
			IF ST9->(DBSEEK(XFILIAL("ST9") + CCOD))
				CDESC := ST9->T9_NOME
				NPES  := ST9->T9_PES
				
				// Em alguns clientes o preenchimento da grua não tem haver com o produto posicionado
				// criamos o ponto de entrada LC00157 para não validar o T9_CODESTO
				// Frank Z Fuga em 24/01/22
				IF EXISTBLOCK("LC00157") 
					LRET := EXECBLOCK("LC00157" , .T. , .T. , {ODLGPLA}) 
				Else
					IF ALLTRIM(ST9->T9_CODESTO) <> ALLTRIM(CPROD)
						Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0286 + ALLTRIM(CCOD) + STR0287 + ALLTRIM(CPROD)}) //"O equipamento: "###" não possui vínculo com o produto: "
						LRET := .F.
					ENDIF
				EndIF

			ELSE
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
							Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
							{STR0286 + ALLTRIM(CCOD) + STR0288}) //"O equipamento: "###" não está cadastrado como bem."

				LRET := .F.				
			ENDIF
		
			IF LRET									// CONSULTA A DISPONIBILIDADE DE FROTA
				ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DESGRU"})] := CDESC 
				IF 	FPA->FPA_PES > 0
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PES"})] := NPES
					IF EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONJT" })])
						CCONJT := ALLTRIM(CAPITAL(POSICIONE("SX5",1,XFILIAL("SX5")+"76" + ALLTRIM(STR(NPES,3,0)),"X5_DESCRI")))
						ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONJT" })] := CCONJT 
					ENDIF
				ENDIF
				M->FPA_DTINI := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
				M->FPA_DTFIM := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})]
				// 07/10/2022 - Jose Eulalio - Sprint 2 para atender Equipamento com Status vazio
				//IF ST9->T9_STATUS<>"00"
				IF ST9->T9_STATUS<>"00" .And. !(Empty(ST9->T9_STATUS))
					Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
								Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
								{STR0286 + ALLTRIM(CCOD) + STR0011}) //"O equipamento: "###"Indisponível"

					LRET := .F.				
				ENDIF			
				//LOCA00165(CCOD , M->FPA_DTINI , M->FPA_DTFIM) 
			ENDIF
		EndIf
			
	CASE UPPER(CCAMPO) == "FPA_TPGUIM"
		IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
			CTPGUIM := ALLTRIM(M->FPA_TPGUIM)
			IF EMPTY(CTPGUIM)
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})] := 0   								
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FPA_TPGUID"
		IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
			CTPGUID := ALLTRIM(M->FPA_TPGUID)
			IF EMPTY(CTPGUID)
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})] := 0   								
			ENDIF
		ENDIF
			
	CASE UPPER(CCAMPO)==UPPER("FPA_VRCARG")
		IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
			NBASE  := M->FPA_VRCARG
			NPERC  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERSEG"})]
			NVALOR := FCALCSEGG(NBASE,NPERC) 	// CALCULA O SEGURO DAS PLATAFORMAS
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})] := NVALOR
		ENDIF

	CASE UPPER(CCAMPO) == "FPA_PERSEG"
		IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
			NBASE  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRCARG"})]
			NPERC  := M->FPA_PERSEG
			NVALOR := FCALCSEGG(NBASE,NPERC)	 	// CALCULA O SEGURO DAS PLATAFORMAS
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})] := NVALOR
		ENDIF

	CASE UPPER(CCAMPO)==UPPER("FPA_TPISS")
		IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS" })] := M->FPA_TPISS
			FCALCPLA()
			NBASE  := NBASEU 						// NBASISSU
			NPERC  := NPERISSU
			NVALOR := LOCA00158(NBASE,NPERC,M->FPA_TPISS) 	// CALCULA O ISS DAS PLATAFORMAS
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })] := NVALOR
		ENDIF

	CASE UPPER(CCAMPO)==UPPER("FPA_PERISS")
		IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERISS"})] := M->FPA_PERISS
			FCALCPLA()
			NBASE  := NBASEU 						// NBASISSU
			NPERC  := NPERISSU
			NVALOR := LOCA00158(NBASE,NPERC,M->FPA_TPISS) 	// CALCULA O ISS
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })] := NVALOR
		ENDIF

	CASE UPPER(CCAMPO) == "FPA_TPBASE" .AND. VALTYPE(ODLGPLA)=="O"
		DDTINI  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
		IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTINI) 			// SE O OBJETO JÁ FOI CRIADO
			CTPBASE := M->FPA_TPBASE
			NPREDIA := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
			DO CASE
			CASE CTPBASE=="D" 						// DIÁRIA
				DDTFIM := DDTINI+NPREDIA-1
			CASE CTPBASE=="S" 						// SEMANAL
				DDTFIM := DDTINI+(NPREDIA * 7)
			CASE CTPBASE=="Q" 						// QUINZENAL
				DDTFIM := DDTINI+(NPREDIA * 15)
			CASE CTPBASE=="M"
				_NANO  := YEAR(DDTINI)
				_NMES  := MONTH(DDTINI) + NPREDIA
				_NDIA  := DAY(DDTINI)
				WHILE _NMES > 12
					_NANO++
					_NMES-=12
				ENDDO
				DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
				WHILE EMPTY(DDTFIM)
					_NDIA  := _NDIA - 1
					DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
				ENDDO
			OTHERWISE
				DDTFIM := DDTINI
			ENDCASE

			CCOD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
			//LOCA00165(CCOD , DDTINI , DDTFIM) 

			IF LRET
				// Frank em 15/07/2021
				//ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})] := DDTFIM
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FPA_PREDIA" .AND. VALTYPE(ODLGPLA)=="O"
		DDTINI  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
		IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTINI)	//SE O OBJETO JÁ FOI CRIADO
			CTPBASE := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})]
			NPREDIA := M->FPA_PREDIA
			DO CASE
			CASE CTPBASE=="D" 						// DIÁRIA
				DDTFIM := DDTINI+NPREDIA-1
			CASE CTPBASE=="S" 						// SEMANAL
				DDTFIM := DDTINI+(NPREDIA * 7)
			CASE CTPBASE=="Q" 						// QUINZENAL
				DDTFIM := DDTINI+(NPREDIA * 15)
			CASE CTPBASE=="M"
				_NANO  := YEAR(DDTINI)
				_NMES  := MONTH(DDTINI) + NPREDIA
				_NDIA  := DAY(DDTINI)
				WHILE _NMES > 12
					_NANO++
					_NMES-=12
				ENDDO
				DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
				WHILE EMPTY(DDTFIM)
					_NDIA  := _NDIA - 1
					DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
				ENDDO
			OTHERWISE
				DDTFIM := DDTINI
			ENDCASE

			CCOD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
			//LOCA00165(CCOD , DDTINI , DDTFIM) 

			IF LRET
				// Frank em 15/07/2021
				//ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})] := DDTFIM
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FPA_DTINI" .AND. VALTYPE(ODLGPLA)=="O"
		DDTINI  := M->FPA_DTINI
		IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTINI)	//SE O OBJETO JÁ FOI CRIADO
			IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"}) > 0
				CTPBASE := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})]
			ELSE
				CTPBASE := "D"
			ENDIF

			DO CASE
			CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"}) > 0
				NPREDIA := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
			CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"}) > 0
				NPREDIA := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"})]
			OTHERWISE
				NPREDIA := 0
			ENDCASE

			DO CASE
			CASE CTPBASE=="D" 						// DIÁRIA
				DDTFIM := DDTINI+NPREDIA-1
			CASE CTPBASE=="S" 						// SEMANAL
				DDTFIM := DDTINI+(NPREDIA * 7)
			CASE CTPBASE=="Q" 						// QUINZENAL
				DDTFIM := DDTINI+(NPREDIA * 15)
			CASE CTPBASE=="M"
				_NANO  := YEAR(DDTINI)
				_NMES  := MONTH(DDTINI) + NPREDIA
				_NDIA  := DAY(DDTINI)
				WHILE _NMES > 12
					_NANO++
					_NMES-=12
				ENDDO
				DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
				WHILE EMPTY(DDTFIM)
					_NDIA  := _NDIA - 1
					DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
				ENDDO
			OTHERWISE
				DDTFIM := DDTINI
			ENDCASE

			CCOD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
			//LOCA00165(CCOD , DDTINI , DDTFIM) 

			IF LRET
				IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTENRE"}) > 0
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTENRE"})] := DDTFIM
					// Frank em 15/07/2021
					//ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})]  := DDTFIM
				ELSE
					// Frank em 15/07/2021
					// ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})] := DDTFIM
				ENDIF
			ENDIF
		ENDIF

	CASE UPPER(CCAMPO) == "FPA_DTFIM" .AND. VALTYPE(ODLGPLA)=="O"
		DDTFIM  := M->FPA_DTFIM
		IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTFIM)	//SE O OBJETO JÁ FOI CRIADO
			IF DDTFIM < ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0289}) //"A data de próximo faturamento não pode ser menor que a data inicial."
				LRET := .F.
			ENDIF 
		ENDIF 
	ENDCASE

	restarea(aArea)
	
	aSize(aArea,0)
	FwFreeArray(aArea)
RETURN LRET


/*/ LOCA00158
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00158(NBASE , NPERC , CTPISS) 
LOCAL NRETISS := 0

	DO CASE
	CASE ALLTRIM(CTPISS) $ "X|M| "
		NRETISS := 0
	CASE ALLTRIM(CTPISS) == "I"
		NRETISS := ((NBASE * NPERC) /100)
	OTHERWISE
		NRETISS := (NBASE / ((100-NPERC)/100)) - NBASE
	ENDCASE

RETURN NRETISS


/*/ FCALCSEGG
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCALCSEGG(NBASE,NPERC) 
RETURN(ROUND( (NBASE*NPERC/100) ,2))


/*/ LOCA00159
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00159(CCAMPO)					// VALIDAÇÕES
LOCAL LRET    := .T.
LOCAL CCOD
LOCAL CDESC

	DO CASE
	CASE UPPER(CCAMPO) == "FPB_CODIGO"
		IF VALTYPE(ODLGDOC)=="O"  					// SE O OBJETO JÁ FOI CRIADO
			CCOD  := M->FPB_CODIGO
			CDESC := POSICIONE("FPC" , 1 , XFILIAL("FPC")+CCOD , "FPC_DESCRI") 
			ODLGDOC:ACOLS[ODLGDOC:NAT][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_DESCRI"})] := CDESC 
		ENDIF
	ENDCASE

RETURN LRET

/*/ FWHEN
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FWHEN(LEDITA)
	IF VALTYPE(LEDITA) == "L"
		RETURN LEDITA
	ENDIF
RETURN (NOPCMANU != 2)


/*/ LOCA00161
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00161() 
LOCAL AARAPRV := GETAREA()

	IF     FP0->FP0_STATUS == "5" 					// 5=FECHADO 
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0297}) //"Não é possível realizar aprovação de projetos com status fechado."
	ELSEIF FP0->FP0_STATUS == "6" 					// 6=CANCELADO 
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0298}) //"Não é possível realizar aprovação de projetos com status cancelado."
	ELSE 
		RECLOCK("FP0",.F.) 
		FP0->FP0_STATUS := "2" 
		FP0->FP0_USUAPR	:= "" 
		//ifranzoi
		If FP0->(FieldPos("FP0_NIVEL")) > 0
			FP0->FP0_NIVEL := ""
		EndIf
		//ifranzoi
		FP0->(MSUNLOCK()) 
		
		MSGALERT(SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0299 , STR0029+alltrim(upper(procname())))  //"PROJETO"###" ENVIADO PARA APROVAÇÃO."###"RENTAL: "
		
		LOCA00164()								// ENVIA EMAIL 
	ENDIF 

	RESTAREA(AARAPRV)
	
	aSize(AARAPRV,0)
	FwFreeArray(AARAPRV)

RETURN NIL


/*/ LOCA00162
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00162() 
LOCAL AARAPRV := GETAREA()
LOCAL _LCANC  := .T.

	IF FP0->FP0_STATUS == "A"
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0300}) //"Não é possível realizar o cancelamento de um contrato revisado."
		RETURN
	ENDIF

	IF MSGYESNO(STR0301 , STR0097)  //"TEM CERTEZA QUE DESEJA CANCELAR O PROJETO ?"###"GPO - LOCC001.PRW"

		IF EXISTBLOCK("LC001CAN") 					// --> PONTO DE ENTRADA PARA VERIFICAR SE SERÁ PERMITIDO O CANCELAMENTO DO PROJETO.
			_LCANC := EXECBLOCK("LC001CAN",.T.,.T.,NIL)
		ENDIF

		IF _LCANC
			PROCESSA( {|| _LCANC := CANCAS()} , STR0302)  //"AGUARDE... VERIFICANDO RESTRIÇÕES..."

			IF _LCANC
				IF RECLOCK("FP0",.F.)
					FP0->FP0_STATUS := "C"
					FP0->(MSUNLOCK())
				ENDIF

				IF EXISTBLOCK("LCPOSCAN") 			// --> PONTO DE ENTRADA APÓS O CANCELAMENTO DO PROJETO.
					EXECBLOCK("LCPOSCAN",.T.,.T.,NIL)
				ENDIF

				BLOQCLASS(FP0->FP0_PROJET)  		// BLOQUEIO DA CLASSE DE VALOR DO PROJETO
				MSGALERT(SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0303 , STR0029+alltrim(upper(procname())))  //"PROJETO"###" CANCELADO!"###"RENTAL: "
			ENDIF
		ENDIF

		RESTAREA(AARAPRV)
		
		aSize(AARAPRV,0)
		FwFreeArray(AARAPRV)
	ENDIF

RETURN NIL


/*/ CANCAS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION CANCAS()
Local _AAREAOLD := GETAREA()
Local _AAREADTQ := FQ5->(GETAREA())
Local _AAREAZAG := FPA->(GETAREA())
Local _AAREAZLG := FPO->(GETAREA())
Local _AAREAST9 := ST9->(GETAREA())
Local _LRET     := .T.
Local LVERZBX   := SUPERGETMV("MV_LOCX097",,.F.)
Local _cQuery   := ""
Local lMvLocBac	:= SuperGetMv("MV_LOCBAC",.F.,.F.) //Integração com Módulo de Locações SIGALOC
Local cQuery2   := ""
Local nFat      := 0
Local nAs       := 0
Local cStatus   := ""

	IF SELECT("TRBFPA") > 0
		TRBFPA->(DBCLOSEAREA())
	ENDIF

	_cQuery := " SELECT FPA_PROJET, FPA_NFREM , FPA_OBRA , FPA_SEQGRU , FPA_AS , FPA.R_E_C_N_O_ ZAGRECNO , FPA.R_E_C_N_O_ FPARECNO, FPA_FILIAL"
	_cQuery += " FROM " + RETSQLNAME("FPA") + " FPA "
	_cQuery += " WHERE FPA_FILIAL = '" + FP0->FP0_FILIAL + "'"
	_cQuery += " AND FPA_PROJET = '" + FP0->FP0_PROJET + "'"
	_cQuery += " AND FPA.D_E_L_E_T_ = ''"
	_cQuery += " ORDER BY FPA_NFREM DESC , FPA_FILIAL , FPA_PROJET , FPA_OBRA , FPA_SEQGRU " 
	_cQuery := changequery(_cQuery) 
	TCQUERY _cQuery NEW ALIAS "TRBFPA"

	While TRBFPA->(!EOF()) 

		nFat := 0
		nAs  := 0

		If lMvLocBac
			IF SELECT("TRBFPY") > 0
				TRBFPY->(DBCLOSEAREA())
			ENDIF
			cQuery2 := "SELECT COUNT(*) AS FAT "
			cQuery2 += "FROM "+RETSQLNAME("FPY")+ " FPY (NOLOCK) "

			cQuery2 += "JOIN "+RETSQLNAME("FPZ")+ " FPZ (NOLOCK) ON "
			cQuery2 += "FPZ_FILIAL = '"+TRBFPA->FPA_FILIAL+"' AND "
			cQuery2 += "FPZ_AS = '"+TRBFPA->FPA_AS+"' AND "
			cQuery2 += "FPZ_AS <> '' AND "
			cQuery2 += "FPZ.D_E_L_E_T_ = '' "

			cQuery2 += "JOIN "+RETSQLNAME("SC6")+ " SC6 (NOLOCK) ON "
			cQuery2 += "SC6.C6_FILIAL = '"+TRBFPA->FPA_FILIAL+"' AND "
			cQuery2 += "SC6.D_E_L_E_T_ = '' AND "
			cQuery2 += "SC6.C6_BLQ NOT IN ('R','S') AND "
			cQuery2 += "SC6.C6_NUM = FPZ.FPZ_PEDVEN AND "
			cQuery2 += "SC6.C6_ITEM = FPZ.FPZ_ITEM "

			cQuery2 += "WHERE "
			cQuery2 += "FPY_FILIAL = '"+TRBFPA->FPA_FILIAL+"' AND " 
			cQuery2 += "FPY_STATUS <> '2' AND "
			cQuery2 += "FPY_PROJET = '"+TRBFPA->FPA_PROJET+"' AND "
			cQuery2 += "FPY.D_E_L_E_T_ = '' "
			cQuery2 := changequery(cQuery2) 
			TCQUERY cQuery2 NEW ALIAS "TRBFPY"
			nFat := TRBFPY->FAT
			TRBFPY->(DBCLOSEAREA())
		Else
			IF SELECT("TRBFPY") > 0
				TRBFPY->(DBCLOSEAREA())
			ENDIF
			cQuery2 := "SELECT COUNT(*) AS FAT "
			cQuery2 += "FROM "+RETSQLNAME("SC5")+ " SC5 (NOLOCK) "
			cQuery2 += "INNER JOIN " + RETSQLNAME("SC6") + " SC6 ON SC6.C6_FILIAL = SC5.C5_FILIAL AND SC6.C6_NUM = SC5.C5_NUM AND SC6.D_E_L_E_T_ = '' AND "
			cQuery2 += "SC6.C6_XAS <> '' AND SC6.C6_BLQ NOT IN ('R','S') AND "
			cQuery2 += "SC6.C6_XAS = '"+TRBFPA->FPA_AS+"' "
			cQuery2 += "WHERE "
			cQuery2 += "SC5.C5_XPROJET <> '' AND SC5.C5_XPROJET = '"+TRBFPA->FPA_PROJET+"' AND "
			cQuery2 += "SC5.C5_FILIAL = '"+TRBFPA->FPA_FILIAL+"' AND "
			cQuery2 += "SC5.D_E_L_E_T_ = '' "
			cQuery2 := changequery(cQuery2) 
			TCQUERY cQuery2 NEW ALIAS "TRBFPY"
			nFat := TRBFPY->FAT
			TRBFPY->(DBCLOSEAREA())
		EndIF

		//IF SELECT("TRBFPY") > 0 removido pela questão do advpr
		//	TRBFPY->(DBCLOSEAREA())
		//ENDIF
		cQuery2 := "SELECT COUNT(*) AS NAS "
		cQuery2 += "FROM " + RETSQLNAME("FQ5") + " FQ5 "
		cQuery2 += "WHERE FQ5_SOT = '"+TRBFPA->FPA_PROJET+"' AND FQ5_AS = '"+TRBFPA->FPA_AS+"' "
		cQuery2 += "AND FQ5_STATUS NOT IN ('1','9') "
		cQuery2 += "AND FQ5.D_E_L_E_T_ = ''"
		cQuery2 := changequery(cQuery2) 
		TCQUERY cQuery2 NEW ALIAS "TRBFPY"
		nAs := TRBFPY->NAS
		TRBFPY->(DBCLOSEAREA())

		DO CASE 
		CASE !EMPTY(ALLTRIM(TRBFPA->FPA_NFREM)) 
			_LRET := .F. 
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0031 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + " " + ALLTRIM(FP0->FP0_PROJET) + STR0304 + ALLTRIM(TRBFPA->FPA_OBRA) + STR0305 + ALLTRIM(TRBFPA->FPA_SEQGRU)}) //"O "###"PROJETO"###" não pode ser cancelado, pois já há nota fiscal de remessa gerada para a obra: "###" / Seq.: "
			Exit

		CASE nFat > 0 
			_LRET := .F. 
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0031 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + " " + ALLTRIM(FP0->FP0_PROJET) + STR0306 + ALLTRIM(TRBFPA->FPA_OBRA) + STR0305 + ALLTRIM(TRBFPA->FPA_SEQGRU)}) //"O "###"PROJETO"###" Não pode ser cancelado, pois já há faturamento gerado para a obra: "###" / Seq.: "
			Exit

		CASE nAs > 0 
			_LRET := .F. 
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{"O " + SUPERGETMV("MV_LOCX248",.F.,STR0002) + " " + ALLTRIM(FP0->FP0_PROJET) + STR0307 + ALLTRIM(TRBFPA->FPA_OBRA) + STR0305 + ALLTRIM(TRBFPA->FPA_SEQGRU)}) //"PROJETO"###" Não pode ser cancelado, pois já há AS aceita para a obra: "###" / Seq.: "
			Exit

		EndCase

		TRBFPA->(DBSKIP())
		
	EndDo

	If _lRet
		DBSELECTAREA("FQ5")
		DBSELECTAREA("FPA")
		TRBFPA->(dbGoTop())
		WHILE TRBFPA->(!EOF())
			IF !EMPTY(ALLTRIM(TRBFPA->FPA_AS))
				FQ5->(DBSETORDER(8))			// FQ5_FILIAL + FQ5_SOT + FQ5_OBRA + FQ5_AS
				IF FQ5->(DBSEEK(XFILIAL("FQ5") + FP0->FP0_PROJET + TRBFPA->FPA_OBRA + TRBFPA->FPA_AS))
					FPA->(DBSETORDER(1))
					FPA->(DBGOTO(TRBFPA->FPARECNO))
					IF FQ5->(RECLOCK("FQ5",.F.))
						FQ5->FQ5_STATUS := "9"
						FQ5->(MSUNLOCK())
					ENDIF
					IF LVERZBX					// TEM MINUTA? SE TIVER CHAMA ROTINA PARA EXCLUIR PROGRAMACAO E CANCELAR MINUTA
						LOCA00519(FQ5->FQ5_AS) 
					ENDIF
					IF RECLOCK("FPA",.F.)
						FPA->FPA_AS     := ""
						FPA->FPA_VIAGEM := ""
						FPA->(MSUNLOCK())
					ENDIF
					DBSELECTAREA("ST9")
					ST9->(DBSETORDER(1))
					IF ST9->(DBSEEK(XFILIAL("ST9") + FQ5->FQ5_GUINDA)) .AND. !EMPTY(ALLTRIM(FQ5->FQ5_GUINDA))
						If !lMvLocBac
							IF GETADVFVAL("TQY", "TQY_STTCTR",XFILIAL("TQY")+ST9->T9_STATUS,1,"") == "10" .and. !empty(ST9->T9_STATUS)
								IF SELECT("TRBTQY") > 0
									TRBTQY->(DBCLOSEAREA())
								ENDIF
								_CQUERY := " SELECT TQY_STATUS" + CRLF
								_CQUERY += " FROM " + RETSQLNAME("TQY") + " TQY" + CRLF
								_CQUERY += " WHERE  TQY_STTCTR = '00'" + CRLF
								_CQUERY += "   AND  TQY.D_E_L_E_T_ = ''" + CRLF
								_CQUERY := CHANGEQUERY(_CQUERY) 
								TCQUERY _CQUERY NEW ALIAS "TRBTQY"
								IF TRBTQY->(!EOF())
									LOCXITU21(ST9->T9_STATUS,TRBTQY->TQY_STATUS,FPA->FPA_PROJET,"","",.T.)
									IF RECLOCK("ST9",.F.)
										ST9->T9_STATUS := TRBTQY->TQY_STATUS
										ST9->(MSUNLOCK())
									ENDIF
								ENDIF
								TRBTQY->(DBCLOSEAREA())
							ENDIF
						else
							cStatus := ""
							FQD->(dbSetOrder(1)) // filial + FQD_STAREN
							If FQD->(dbSeek(xFilial("FQD")+ST9->T9_STATUS))
								cStatus := FQD->FQD_STAREN
							EndIf
							If cStatus == "10" .and. !empty(ST9->T9_STATUS)
								If Select("TRBFQD") > 0
									TRBFQD->(DBCLOSEAREA())
								EndIF
								_cQuery := " SELECT FQD_STATQY"
								_cQuery += " FROM " + RETSQLNAME("FQD") + " FQD"
								_cQuery += " WHERE  FQD_STAREN = '00'"
								_cQuery += "   AND  FQD.D_E_L_E_T_ = ''"
								_cQuery := CHANGEQUERY(_cQuery) 
								TCQUERY _cQuery NEW ALIAS "TRBFQD"
								IF TRBFQD->(!EOF())
									LOCXITU21(ST9->T9_STATUS,TRBFQD->FQD_STATQY,FPA->FPA_PROJET,"","",.T.)
									IF ST9->(RecLock("ST9",.F.))
										ST9->T9_STATUS := TRBFQD->FQD_STATQY
										ST9->(MsUnlock())
									ENDIF
								ENDIF
								TRBFQD->(dbCloseArea())
							ENDIF
						EndIf
					ENDIF
				ENDIF
			EndIF
			TRBFPA->(dbSkip())
		EndDo
	EndIF

	TRBFPA->(DBCLOSEAREA())

	RESTAREA( _AAREAST9 )
	RESTAREA( _AAREAZLG )
	RESTAREA( _AAREAZAG )
	RESTAREA( _AAREADTQ )
	RESTAREA( _AAREAOLD )

	aSize(_AAREAST9,0)
	aSize(_AAREAZLG,0)
	aSize(_AAREAZAG,0)
	aSize(_AAREADTQ,0)
	aSize(_AAREAOLD,0)
		
	FwFreeArray(_AAREAST9)
	FwFreeArray(_AAREAZLG)
	FwFreeArray(_AAREAZAG)
	FwFreeArray(_AAREADTQ)
	FwFreeArray(_AAREAOLD)

RETURN _LRET


/*/ LOCA00163
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00163()	// VERIFICA A REVISÃO DAS PROPOSTAS
LOCAL _F
LOCAL NPOS
//LOCAL LRET       := .F.
LOCAL AHEADER
LOCAL ACOLS
LOCAL ACOLS0
LOCAL ACASADAS   := {}
LOCAL CPROJETNEW
LOCAL CREVISANEW
LOCAL _LFLAG	 := .T.
LOCAL NAREA		 := ALIAS()
LOCAL AAREAZA0   := FP0->(GETAREA())
LOCAL LEXIBE     := .T.
LOCAL LEXIB1     := .T.
LOCAL LEXIB2     := .T.
LOCAL LEXIB3     := .T.
LOCAL LRECOLDL   := .F.
LOCAL LRECNEWT	 := .F.
LOCAL LRECNEWE   := .F.
LOCAL LRECNEWL   := .F.
LOCAL _AHISTO	 := {}
LOCAL CREVISA	 := FP0->FP0_REVISA
LOCAL CPROJET    := PROJETO(.T.)				// ARMAZENA ZA0 E RETORNA NÚMERO DO PROJETO
LOCAL CTABREC    := ""
LOCAL CTMPALIAS  := ""
LOCAL LTEMAS     := .F.

	// VERIFICO AS RECEITAS ATUAIS
	IF SELECT("CHK") > 0
		CHK->(DBCLOSEAREA())
	ENDIF
	CQUERY := " SELECT   FP0_PROJET , FP0_REVISA , FP0_TIPOSE , R_E_C_N_O_ AS REGISTRO "
	CQUERY += " FROM " + RETSQLNAME("FP0") 
	CQUERY += " WHERE    FP0_FILIAL = '" + FP0->FP0_FILIAL + "'"
	CQUERY += "   AND    SUBSTRING(FP0_PROJET,1,9) = '" + SUBSTR(CPROJET,1,9) + "' "
	CQUERY += "   AND    FP0_REVISA = '"+ FP0->FP0_REVISA +"' "
	CQUERY += "   AND    D_E_L_E_T_ = ' ' "
	CQUERY += " ORDER BY FP0_PROJET"
	CQUERY := CHANGEQUERY(CQUERY) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "CHK" , .T. , .T.) 

	WHILE CHK->(!EOF())
		CTABREC  := "FPA"
		LRECOLDL := .T.
		LRECNEWL := .T.
		AADD( _AHISTO, { CHK->FP0_PROJET, CHK->FP0_REVISA, CHK->FP0_TIPOSE, CHK->REGISTRO } )	//GUARDO OS DADOS DO REGISTRO PARA USAR NA REVISÃO
		CHK->(DBSKIP())
	ENDDO

	IF SELECT("CHK") > 0
		CHK->(DBCLOSEAREA())
	ENDIF

	// NOVA REGRA PARA VERIFICAÇÃO DA EXISTÊNCIA DE AS
	IF EMPTY(CTABREC)

		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0308}) //"Não foi possível identificar o tipo de receita do projeto."
		PROJETO()
		RETURN .F.
	ELSE

		CQUERY := " SELECT * " + CRLF
		CQUERY += " FROM " + RETSQLNAME(CTABREC) + " " + CTABREC + " (NOLOCK) " + CRLF
		CQUERY += " WHERE " + CTABREC + "." + CTABREC + "_FILIAL = '" + FP0->FP0_FILIAL + "' " + CRLF
		CQUERY +=   " AND " + CTABREC + "." + CTABREC + "_PROJET = '" + SUBSTR(CPROJET, 1, 9) + "' " + CRLF
		CQUERY +=   " AND " + CTABREC + "." + CTABREC + "_AS <> ' ' " + CRLF
		CQUERY +=   " AND " + CTABREC + ".D_E_L_E_T_ = '' " + CRLF

		CQUERY := CHANGEQUERY(CQUERY)
		CTMPALIAS := GETNEXTALIAS() 
		IF SELECT(CTMPALIAS) > 0 
			(CTMPALIAS)->(DBCLOSEAREA()) 
		ENDIF 
		DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , CTMPALIAS , .F. , .T.) 

		LTEMAS := !((CTMPALIAS)->(EOF()))

		IF SELECT(CTMPALIAS) > 0
			(CTMPALIAS)->(DBCLOSEAREA())
		ENDIF

		IF LTEMAS
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0309}) //"Não é possível revisar, pois já foi gerado AS para o projeto."
			PROJETO()
			RETURN .F.
		ENDIF
	ENDIF

	DBSELECTAREA(NAREA)

	IF LRECNEWT .AND. LRECNEWE 
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0310}) //"Não é possível revisar projetos casados."
		RESTAREA(AAREAZA0) 
		//FwFreeArray(AAREAZA0) removido pela questão do advpr
		RETURN .F. 
	ENDIF 

	// --> SUPERGETMV("MV_LOCX073" , .F. , "") 		// --> TIPOS DE RECEITA DISPONIVEIS PARA SELECAO (T=TRANSPORTE / E=EQUIPAMENTO / L=LOCACAO). EX: TEL OU TL OU EL OU L. 
	CSELECREC := UPPER(ALLTRIM(CSELECREC)) 

	IF EMPTY(CSELECREC)								// --> SE PARAMETRO NÃO EXISTIR E/OU ESTIVER VAZIO, HABILITA TODAS AS RECEITAS.

		LEXIBE := .T. 
		LEXIB1 := .T. 								// --> RECEITA TRANSPORTE 
		LEXIB2 := .T. 								// --> RECEITA EQUIPAMENTO 
		LEXIB3 := .T. 								// --> RECEITA LOCACAO

	ELSE											// --> CASO NÃO EXISTA OU NÃO ESTEJA HABILITADO, CONSIDERA (EVENTUAL) P.E. 

		IF LEN(CSELECREC) = 1 						// --> SÓ EXITE UMA RECEITA CONFIGURADA NO PARÂMETRO.
			LEXIBE := .F. 							// --> NÃO PRECISO ABRIR A JANELA DE SELEÇÃO.
			LRECNEWL  := .T. 
		ELSE										// --> EXISTE MAIS QUE UMA RECEITA CONFIGURADA NO PARÂMETRO.
			LEXIBE := .T. 							// --> NÃO PRECISO ABRIR A JANELA DE SELEÇÃO.		
			LEXIB1 := .F. 
			LEXIB2 := .F. 
			LEXIB3 := .T. 					// --> HABILITA CHECK PARA LOCACAO 
			IF !(LEXIB1 .OR. LEXIB2 .OR. LEXIB3) 
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0311}) //"O módulo não está configurado para este tipo de receita."
				RETURN .F. 
			ENDIF 
		ENDIF 

	ENDIF 

	/*
	IF LEXIBE .and. .F. // inibido por Frank Fuga em 16/02/21
		DEFINE MSDIALOG ODLG TITLE STR0083 + SUPERGETMV("MV_LOCX248",.F.,STR0002) FROM C(178),C(181) TO C(402),C(385) PIXEL  //"INCLUSÃO DE "###"PROJETO"
			@ C(010),C(008) TO C(090),C(097) LABEL STR0312                                          PIXEL OF ODLG //"SELECIONE A RECEITA"
		
			IF LEXIB1 
				@ C(017),C(015) CHECKBOX OCHECKBOX1 VAR LRECNEWT PROMPT STR0313   SIZE C(075),C(008) PIXEL OF ODLG  //"RECEITA TRANSPORTE"
			ENDIF 
			IF LEXIB2 
				@ C(026),C(015) CHECKBOX OCHECKBOX2 VAR LRECNEWE PROMPT STR0314 SIZE C(075),C(008) PIXEL OF ODLG  //"RECEITA EQUIPAMENTOS"
			ENDIF 
			IF LEXIB3 
				@ C(035),C(015) CHECKBOX OCHECKBOX3 VAR LRECNEWL PROMPT STR0315      SIZE C(075),C(008) PIXEL OF ODLG  //"RECEITA LOCAÇÃO"
			ENDIF 
		
			@ C(097),C(024) BMPBUTTON TYPE 1 ACTION ( LRET := .T., CLOSE(ODLG) )
			@ C(097),C(054) BMPBUTTON TYPE 2 ACTION ( LRET := .F., CLOSE(ODLG) )
		ACTIVATE MSDIALOG ODLG CENTERED

		IF !LRET
			RESTAREA(AAREAZA0)
			FwFreeArray(AAREAZA0)
			RETURN NIL
		ENDIF
	ENDIF
	*/

	AADD(ACASADAS,"L")

	IF LEN(ACASADAS) == 0
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0086}) //"Falta selecionar a receita."
		RESTAREA(AAREAZA0)
		//FwFreeArray(AAREAZA0) removido pela questão do advpr
		RETURN .F.
	ENDIF
	CREVISANEW := SOMA1(CREVISA)	// STRZERO( VAL(CREVISA)+1, LEN(CREVISA) )

	IF ! MSGYESNO(STR0316+ CREVISANEW +STR0317+ ALLTRIM(CPROJET) + " ?" , STR0097)  //"CONFIRMA A REVISÃO "###" DO PROJETO "###"GPO - LOCC001.PRW"
		RESTAREA(AAREAZA0)

		aSize(AAREAZA0,0)
		FwFreeArray(AAREAZA0)
		RETURN .F.
	ENDIF
	//BEGIN TRANSACTION

		FOR _F := 1 TO LEN( _AHISTO )
			FP0->( DBGOTO(_AHISTO[_F][4]) )
			RECLOCK("FP0",.F.)
			FP0->FP0_STATUS := "A"					// ALTERO O STATUS DA PROPOSTA ORIGINAL PARA A=REVISADO
			FP0->(MSUNLOCK()) 
		NEXT _F 

		FOR _F := 1 TO LEN( ACASADAS )				// GRAVO A PROPOSTA REVISADA COM SUA DEVIDA RECEITA

			// VERIFICA O NOVO NÚMERO DO PROJETO
			NPOS := AT("/" , FP0->FP0_PROJET) 
			IF NPOS==0
				CPROJETNEW := PADR(ALLTRIM(CPROJET) + IIF( LEN(ACASADAS) >= 2, ACASADAS[_F], "" ) + "/" + CREVISANEW , LEN(FP0->FP0_PROJET))
			ELSE
				CPROJETNEW := PADR(SUBSTR(ALLTRIM(CPROJET),1,AT("/",FP0->FP0_PROJET)-1) + IIF( LEN(ACASADAS) >= 2, ACASADAS[_F], "" ) + "/" + CREVISANEW , LEN(FP0->FP0_PROJET))
			ENDIF

			_NARRAY := ASCAN( _AHISTO, { |X| UPPER(ALLTRIM(X[3])) == ACASADAS[_F]})
			IF 	_NARRAY == 0						// SE A NOVA RECEITA NÃO EXISTIA ANTERIORMENTE
				// MONTA O AHEADER E O ACOLS PARA GERAR AS RECEITAS
				IF EMPTY(AHEADER) .OR. EMPTY(ACOLS0)
					AHEADER := {}
					ACOLS   := {}
					ACOLS0  := {}
					FOR NPOS := 1 TO FP0->(FCOUNT())
						FP0->( AADD(AHEADER, { UPPER(ALLTRIM(FIELDNAME(NPOS))), UPPER(ALLTRIM(FIELDNAME(NPOS))) }) )
						FP0->( AADD(ACOLS0, FIELDGET(NPOS)) )
					NEXT NPOS 
					AADD(ACOLS,ACOLS0)
				ENDIF

				CTIPONEW := ACASADAS[_F]
				FGRAVANOVO(AHEADER,ACOLS,CTIPONEW,CPROJETNEW,CREVISANEW)  //GRAVA O NOVO TIPO DE SERVIÇO
			ELSE									// SE A NOVA RECEITA JÁ  EXISTIA ANTERIORMENTE
				FP0->( DBSETORDER(1) )
				IF FP0->(DBSEEK(XFILIAL("FP0") + CPROJETNEW))
					_LFLAG := .F.
				ELSE
					FP0->( DBGOTO(_AHISTO[_NARRAY][4]) )
					PROCESSA( {|| FZA0REVI(CPROJET,CPROJETNEW,CREVISANEW)},STR0318) //"AGUARDE... ATUALIZANDO A REVISÃO"
				ENDIF
			ENDIF

			IF ! _LFLAG
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0319 + CREVISANEW + STR0317 + ALLTRIM(CPROJET)}) //"Já existe a revisão: "###" do projeto "
				//DISARMTRANSACTION()
				RESTAREA(AAREAZA0)
				//FwFreeArray(AAREAZA0) removido pela questão do advpr
				RETURN .F.
			ENDIF

		NEXT

		IF EXISTBLOCK("LC001REV") 					// --> PONTO DE ENTRADA PARA ALTERAR PROJETOS REVISADOS
			EXECBLOCK("LC001REV",.T.,.T.,{ CPROJET, CPROJETNEW })
		ENDIF 

	//END TRANSACTION

	RESTAREA(AAREAZA0)

	aSize(AAREAZA0,0)
	FwFreeArray(AAREAZA0)

RETURN .T. 


/*/ FGRAVANOVO
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FGRAVANOVO(AHEADER,ACOLS,CTIPONOVO,CPROJETNOVO,CREVISANOVO) 
LOCAL AAREAZA0 := FP0->(GETAREA())

	FP0->(DBSETORDER(1))  							// FP0_FILIAL+FP0_PROJET
	IF ! FP0->(DBSEEK(XFILIAL("FP0")+CPROJETNOVO))
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0320+ALLTRIM(CPROJETNOVO)}) //"Já existe o projeto: "
		FP0->( RESTAREA(AAREAZA0) ) 
		
		aSize(AAREAZA0,0)
		FwFreeArray(AAREAZA0) 
		RETURN .F.
	ENDIF

	FP0->(RECLOCK("FP0",.T.))
	FGRAVATUDO("FP0",AHEADER,ACOLS[1])  			// GRAVA TODOS OS CAMPOS DO ACOLS
	FP0->FP0_PROJET := CPROJETNOVO
	FP0->FP0_TIPOSE := CTIPONOVO
	FP0->FP0_RECEIT := CTIPONOVO					// QUANDO É CASADA O SISTEMA FICAVA COM A RECEITA DA PRIMEIRA
	FP0->FP0_STATUS := "1"
	FP0->FP0_REVISA := CREVISANOVO
	FP0->(MSUNLOCK())

	RESTAREA( AAREAZA0 )

	aSize(AAREAZA0,0)
	FwFreeArray(AAREAZA0)

RETURN .T.


/*/ LOCA00164
ITUP BUSINESS - TOTVS RENTAL
TYPE FUNCTION
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00164()						// ENVIA EMAIL APROVAÇÃO
LOCAL CCC	   := SPACE(100)
LOCAL CCCO	   := SPACE(100)
LOCAL CMSG	   := "" + CRLF
LOCAL CPARA	   := GETMV("MV_LOCX055")
LOCAL CTITULO  := STR0321 + ALLTRIM(FP0->FP0_PROJET) //"SOLICITAÇÃO DE APROVAÇÃO DO PROJETO "
LOCAL EFROM    := ALLTRIM(USRRETNAME(__CUSERID)) + " <" + ALLTRIM(USRRETMAIL(__CUSERID)) + ">"
LOCAL CDESC    := ""

PRIVATE _ODLGMAIL

	CDESC := STR0119 //"LOCAÇÃO"
	CMSG  := STR0322 + ALLTRIM(FP0->FP0_PROJET) + CRLF //"SOLICITAÇÃO DE APROVAÇÃO DO PROJETO: "
	CMSG  += STR0323    + ALLTRIM(CDESC) + CRLF //"TIPO: "
	CMSG  += STR0324 + ALLTRIM(FP0->FP0_CLI)+ " - " +ALLTRIM(FP0->FP0_CLINOM) //"CLIENTE: "

	LOCA05909(EFROM , CPARA , CCC , CTITULO , CMSG , NIL , CCCO)

RETURN NIL 


/*/ DELAS
ITUP BUSINESS - TOTVS RENTAL
TYPE FUNCTION
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION DELAS()							// APAGA AS ASS JÁ GERADAS
LOCAL _F
LOCAL _LRET 	:= .F.
LOCAL _CAS  	:= ""
LOCAL _CVIAGEM	:= ""

	DO CASE
	CASE FP0->FP0_TIPOSE == "L"						// LOCAÇÃO
		_CAS	:= IIF(ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    }) <> 0,ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    })],"")
		_CVIAGEM:= IIF(ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VIAGEM"}) <> 0,ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VIAGEM"})],"")

		IF !(ODLGPLA:ACOLS[ODLGPLA:NAT,LEN(ODLGPLA:AHEADER)+1]) .AND. !EMPTY(_CAS)		//ESTÁ QUERENDO EXCLUIR O ÍTEM E O CAMPO AS ESTÁ PREENCHIDO
			_LRET := VERMEDICAO(_CAS)				// VERIFICO SE EXISTE MEDIÇÃO PARA ESTA AS
			IF _LRET								// VERIFICO SE É O ÚLTIMO ÍTEM DA PROPOSTA
				_NITENS := 1
				FOR _F := 1 TO LEN(ODLGPLA:ACOLS)
					IF ODLGPLA:ACOLS[_F,LEN(ODLGPLA:AHEADER)+1] .AND. ODLGPLA:NAT <> _F
						_NITENS++
					ENDIF
				NEXT _F
				EXCLUICV(_CAS, _CVIAGEM, _NITENS)	// EXCLUI O CONTRATO E A VIAGEM
				EXCLUIPD(_CAS, _CVIAGEM)			// EXCLUO A PROGRAMAÇÃO DIÁRIA GERADA AUTOMÁTICAMENTE PELA GERAÇÃO DE CONTRATO (GRCONTR)
			ENDIF
			IF _LRET								// SE NÃO FOR POSSÍVEL EXCLUIR O ÍTEM
				ODLGPLA:ACOLS[ODLGPLA:NAT,LEN(ODLGPLA:AHEADER)+1] := .T.
			ENDIF
		ELSEIF !(ODLGPLA:ACOLS[ODLGPLA:NAT,LEN(ODLGPLA:AHEADER)+1]) .AND. EMPTY(_CAS)		//ESTÁ QUERENDO EXCLUIR O ÍTEM E O CAMPO AS NÃO ESTÁ PREENCHIDO, PORTANTO NÃO EXISTE A AS
			_LRET := .T.
		ENDIF

	ENDCASE

RETURN _LRET


/*/ VERMEDICAO
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION VERMEDICAO(_CAS2) 
LOCAL _LRET2 	:= .T.							// NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE MEDIÇÕES PARA ESTA AS

	FPN->(DBSETORDER(2))
	IF FPN->(DBSEEK(XFILIAL("FPN") + _CAS2))	// VERIFICO SE EXISTE MEDIÇÃO PARA ESTA AS
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
	   				Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
	 				{STR0325 + _CAS2 + STR0326}) //"Já existe medição lançada para a AS: "###", exclusão não permitida."
		_LRET2 := .F.
	ENDIF

RETURN _LRET2

/*/ VERORCAR
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION VERORCAR(_CAS2, _COBRA2, _CVIAGE2)		//VERIFICA SE JÁ EXISTE ORDENS DE CARREGAMENTO
LOCAL _LRET2 	:= .T.	//NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE ORDEM DE CARREGAMENTO PARA ESTA VIAGEM / AS

	ZL8->(DBSETORDER(1))
	IF ZL8->(DBSEEK(XFILIAL("ZL8") + M->FP0_PROJET + _COBRA2 + _CVIAGE2))		//VERIFICO SE EXISTE ORDEM DE CARREGAMENTO PARA ESTA VIAGEM
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0327 + _CVIAGEM2 + STR0328 + _CAS2 + STR0326}) //"Já existe ordem de carregamento lançada para a viagem: "###", AS "###", exclusão não permitida."
		_LRET2 := .F.
	ENDIF

RETURN _LRET2


/*/ VERCTRC
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION VERCTRC(_CVIAGE2)		//VERIFICA SE JÁ EXISTEM CTRC'S
LOCAL _LRET2 	:= .T.		//NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE CTRC GERADO PARA ESTA VIAGEM

	FQ5->(DBSETORDER(1))
	IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))										//VERIFICO SE EXISTE CTRC PARA ESTA VIAGEM
		IF !EMPTY(FQ5_NUMPV) .OR. !EMPTY(FQ5_NUMCTR) .OR. !EMPTY(FQ5_SERCTR)		//VERIFICA SE JÁ FOI GERADO O CTRC
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0329 + _CVIAGEM2 + STR0326}) //"Já existe CTRC lançada para a viagem: "###", Exclusão não permitida."
			_LRET2 := .F.
		ENDIF
	ENDIF

RETURN _LRET2

/*/ VERCTRB
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION VERCTRB(_CVIAGE2)		// VERIFICA SE JÁ EXISTEM CTRB'S
LOCAL _LRET2 := .T.						// NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE ADIANTAMENTO PARA O CTRB

	FQ5->(DBSETORDER(1))
	IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))										//VERIFICO SE EXISTE CTRB PARA ESTA VIAGEM
		IF !EMPTY(FQ5_NUMCTC) .OR. !EMPTY(FQ5_NUMSLD)								//VERIFICA SE JÁ FOI GERADO ADIANTAMENTO OU SALDO PARA O CTRB
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0330 + _CVIAGEM2 + STR0326}) //"Já existe CTRB lançada para a viagem: "###", exclusão não permitida."
			_LRET2 := .F.
		ENDIF
	ENDIF

RETURN _LRET2

/*/ EXCLUICV
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION EXCLUICV(_CAS2, _CVIAGE2, _NITEN2)		// EXCLUI CONTRATO E VIAGEM
	IF _NITEN2 <= 1											// SE FOR O ÚLTIMO ÍTEM DA PROPOSTA EXCLUO O CONTRATO NA TABELA AAM
		AAM->(DBSETORDER(1))
		IF AAM->(DBSEEK(XFILIAL("AAM") + M->FP0_PROJET))	// BUSCO A AS NA AAM-CONTRATO
			RECLOCK("AAM",.F.)
			AAM->(DBDELETE()) 
			AAM->(MSUNLOCK()) 
		ENDIF
	ENDIF													// SENÃO FOR O ÚLTIMO ÍTEM DA PROPOSTA NÃO PODE EXCLUIR O CONTRATO NA TABELA AAM

	FQ5->(DBSETORDER(1))
	IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))				// BUSCO A AS NA DTQ-VIAGEM
		RECLOCK("FQ5",.F.)
		FQ5->(DBDELETE()) 
		FQ5->(MSUNLOCK()) 
	ENDIF
RETURN .T.

/*/ EXCLUICT
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION EXCLUICT(_CAS2, _CVIAGE2, _NOBRA2)		//EXCLUI CTRC E/OU CTRB
LOCAL CALIASQRY := GETNEXTALIAS()
LOCAL CQUERY

	// BUSCO A AS / VIAGEM / OBRA NA DTR-VEICULOS DA VIAGEM
	CQUERY := " SELECT DTR.R_E_C_N_O_ AS NREGDTR " 
	CQUERY += " FROM " + RETSQLNAME("DTR") 
	CQUERY += " WHERE  DTR_VIAGEM = '" + _CVIAGE2 + "'"
	CQUERY +=   " AND  DTR_OBRA   = '" + _COBRA2  + "'"
	CQUERY +=   " AND  DTR_NRAS   = '" + _CAS2    + "'"
	CQUERY +=   " AND  D_E_L_E_T_ = ' ' "
	CQUERY := CHANGEQUERY(CQUERY)
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , CALIASQRY , .T. , .T.) 
	WHILE ! (CALIASQRY)->( EOF() )
		DTR->( DBGOTO( (CALIASQRY)->NREGDTR) )
		RECLOCK("DTR",.F.)
		DTR->(DBDELETE()) 
		DTR->(MSUNLOCK()) 
		(CALIASQRY)->(DBSKIP())
	ENDDO
	(CALIASQRY)->(DBCLOSEAREA())

	// BUSCO A VIAGEM NA DTC-DOC CLIENTE PARA TRANSPORTE
	DTC->(DBORDERNICKNAME("DTCIND09"))
	DTC->(DBSEEK(XFILIAL("DTC") + _CVIAGE2))
	WHILE DTC->(!EOF()) .AND. DTC->DTC_FILIAL == XFILIAL("DTC") .AND. DTC->DTC_VIAGEM == _CVIAGE2
		RECLOCK("DTC",.F.)
		DTC->(DBDELETE()) 
		DTC->(MSUNLOCK()) 
		DTC->(DBSKIP())
	ENDDO

	// BUSCO A VIAGEM NA DUP-MOTORISTAS DA VIAGEM
	DUP->(DBSETORDER(3))
	DUP->(DBSEEK(XFILIAL("DUP") + M->FP0_PROJET + _COBRA2 + _CVIAGE2))
	WHILE DUP->(!EOF()) .AND. DUP->DUP_FILIAL == XFILIAL("DUP") .AND. DUP->DUP_SOT == M->FP0_PROJET .AND. DUP->DUP_OBRA == _COBRA2 .AND. DUP->DUP_VIAGEM == _CVIAGE2
		RECLOCK("DUP",.F.)
		DUP->(DBDELETE()) 
		DUP->(MSUNLOCK()) 
		DUP->(DBSKIP())
	ENDDO

	// BUSCO A AS NA DTQ-VIAGEM
	FQ5->(DBSETORDER(1))
	IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))
		RECLOCK("FQ5",.F.)
		FQ5->(DBDELETE()) 
		FQ5->(MSUNLOCK()) 
	ENDIF

RETURN .T. 


/*/ EXCLUIPD
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
VERSION P12
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION EXCLUIPD(_CAS2, _CVIAGE2)	//EXCLUO A PROGRAMAÇÃO DIÁRIA GERADA AUTOMÁTICAMENTE PELA GERAÇÃO DE CONTRATO (GRCONTR)
	FPM->(DBSETORDER(4))
	FPM->(DBSEEK(XFILIAL("FPM") + _CAS2 + _CVIAGE2))
	WHILE FPM->(!EOF()) .AND. FPM->FPM_FILIAL == XFILIAL("FPM") .AND. FPM->FPM_AS == _CAS2 .AND. FPM->FPM_VIAGEM == _CVIAGE2
		RECLOCK("FPM",.F.)
		FPM->(DBDELETE()) 
		FPM->(MSUNLOCK()) 
		FPM->(DBSKIP())
	ENDDO

RETURN .T.

/*/ EXCLUIPT
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION EXCLUIPT(_CAS2 , _CVIAGE2) 
	FPO->(DBSETORDER(3))
	FPO->(DBSEEK(XFILIAL("FPO") + _CAS2 + _CVIAGE2))
	WHILE FPO->(!EOF()) .AND. FPO->FPO_FILIAL == XFILIAL("FPO") .AND.  FPO->FPO_NRAS == _CAS2 .AND. FPO->FPO_VIAGEM == _CVIAGE2
		RECLOCK("FPO",.F.)
		FPO->(DBDELETE()) 
		FPO->(MSUNLOCK()) 
		FPO->(DBSKIP())
	ENDDO
RETURN .T.


/*/ LOCA00165
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00165(_CCOD , _DINI , _DFIM , _CPROJET) 
RETURN .T.




/*/ TIRDEL
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION TIRDEL(ORET)
LOCAL ACOLS := {}
LOCAL NI
//LOCAL AIT	:= {}
//LOCAL LTUR	:= .F.
//LOCAL NALT	:= 0
//LOCAL NX    := 0 
//LOCAL NY    := 0 

	FOR NI := 1 TO LEN(OGETVT:ACOLS)
		IF !OGETVT:ACOLS[NI,LEN(OGETVT:ACOLS[NI])]
			AADD(ACOLS,OGETVT:ACOLS[NI])
		ELSEIF (DBSEEK(XFILIAL("FPE")+OGETVT:ACOLS[NI][1]+OGETVT:ACOLS[NI][2]+OGETVT:ACOLS[NI][4]))
			RECLOCK("FPE",.F.)
			FPE->(DBDELETE()) 
			FPE->(MSUNLOCK())
		ENDIF
	NEXT NI 

	OGETVT:ACOLS         := ACLONE(ACOLS)
	//ACOLSTURNO[ORET:NAT] := ACLONE(OGETVT:ACOLS)

	/*
	FOR NX := 1 TO LEN(OTURNO_COLS)
		IF ! LTUR
			AIT := OTURNO_COLS[NX]
			FOR NY := 1 TO LEN(AIT)
				IF COBRA == AIT[NY, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI ==AIT[NY, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
					LTUR := .T.
					NALT := NX
					EXIT
				ENDIF
			NEXT NY
		ENDIF
	NEXT NX
	*/

	/*
	IF ! LTUR
		AADD(OTURNO_COLS, ACOLSTURNO[ORET:NAT])
	ELSE
		OTURNO_COLS[NALT] := ACOLSTURNO[ORET:NAT]
	ENDIF
	*/

	aSize(ACOLS,0)
	FwFreeArray(ACOLS)

RETURN NIL

/*/ RETGETD
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION RETGETD() 
LOCAL N
LOCAL NVAL1 	:= 0
LOCAL NMIN  	:= 0

	FOR N := 1 TO LEN(OGETVT:ACOLS)
		IF ! OGETVT:ACOLS[N,LEN(OGETVT:ACOLS[N])]
			NVAL1 += IIF( VALTYPE(OGETVT)=="O" .AND. LEN(OGETVT:ACOLS) >= 1 , (GDFIELDGET ( "FPE_VALTUR", N, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
			NMIN  += IIF( VALTYPE(OGETVT)=="O" .AND. LEN(OGETVT:ACOLS) >= 1 , VAL((GDFIELDGET ( "FPE_MINDIT", N, .F., OGETVT:AHEADER, OGETVT:ACOLS ))),0)
		ENDIF
	NEXT N 

	IF EXISTBLOCK("LCTURFIM")					// --> PONTO DE ENTRADA APOS O PREENCHIMENTO DOS TURNOS.
		EXECBLOCK("LCTURFIM",.T.,.T.,{})
	ENDIF

RETURN NIL

/*/ LC001POS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00166()
LOCAL ODLG
LOCAL OPAN1
LOCAL OGRP
LOCAL OGET
LOCAL OBTNOK
LOCAL OBTNCANC
LOCAL LGRV    := .F.
LOCAL OFONT   := TFONT():NEW("ARIAL",12,16,,.T.,,,,.T.,.F.)
LOCAL NPOSSIB := 0

	IF FP0->(EOF()) .OR. FP0->(BOF())
		RETURN .F.
	ELSE
		NPOSSIB := VAL("0"+FP0->FP0_POSSIB)
	ENDIF

	DEFINE MSDIALOG ODLG FROM 00,00 TO 130,172 PIXEL TITLE STR0336 //"POSSIBILIDADE"
		OPAN1 := TPANEL():NEW(02,02,"",ODLG,,,,,,85,38,.F.,.F.)
		OGRP  := TGROUP():NEW(0,0,OPAN1:NHEIGHT/2-2,OPAN1:NWIDTH/2,STR0337,OPAN1,,,.T.) //"POSSIBILIDADE DE VENDA:"
		@ 10,25 MSGET OGET VAR NPOSSIB PICTURE "999" VALID NPOSSIB >= 0 .AND. NPOSSIB <= 100 FONT OFONT OF OPAN1 PIXEL
		@ 14,70 SAY "%" SIZE 20,20 FONT OFONT OF OPAN1 PIXEL 
		OBTNOK   := TBUTTON():NEW(45,10,STR0338,ODLG,{||LGRV:=.T.,ODLG:END()},35,12,,,,.T.) //"Gravar"
		OBTNCANC := TBUTTON():NEW(45,52,STR0339,ODLG,{||ODLG:END()},35,12,,,,.T.) //"Fechar"
	ACTIVATE MSDIALOG ODLG CENTERED

	IF LGRV
		FP0->(RECLOCK("FP0",.F.))
		FP0->FP0_POSSIB := ALLTRIM(STR(NPOSSIB))
		FP0->(MSUNLOCK())
	ENDIF

RETURN LGRV

/*/ BOBKJ
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION BOBKJ()
LOCAL ORET

	DO CASE
	CASE VALTYPE(ODLGPLA) == "O" 
		ORET := ODLGPLA
	ENDCASE

RETURN ORET

/*/ LOCA00167
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00167() 
LOCAL _NRET := 0
	
	// Frank em 09/03/2023 - removi este gatilho, pois o campo FPA_TPBASE não está disponível na getdados
	// avisei o Rafael sobre a retirada desta funcionalidade.
	//IF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})] = "M" //MENSAL
	//	_NRET:= (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})]/*M->FPA_PREDIA * M->FPA_MINDIA*/)* 4 //QUATRO CORRESPONDE A 4 SEMANASX
	//ELSEIF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})] = "Q" //QUINZENAL
	//	_NRET:= (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})]) * 2 //DOIS CORRESPONDE A 15 DIAS
	//ELSEIF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})] = "D" //DIARIA
	//	_NRET:=  ((ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})]/5) * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})])//((M->FPA_MINDIA/ 5)* M->FPA_PREDIA) //
	//ELSE  //SEMANAL
	//	_NRET:= (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})])//(M->FPA_PREDIA * M->FPA_MINDIA)
	//ENDIF

RETURN _NRET

/*/ LOCA00168
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00168()
LOCAL LRET      := .T. 
LOCAL CCAMPO    := "FP6_RESPON" 
LOCAL CCAMPOGET := ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] 

	IF CCAMPOGET == "C"

		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0340}) //"O campo [VALOR] só poderá ser editado se o campo [RESPONSÁVEL] for diferente de 'C=CLIENTE'"

		LRET := .F.
	ENDIF

RETURN( LRET )


/*/ LOCA00169
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00169() 
	IF ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] == "L" //EMPRESA
		ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := M->FP6_VALOR
	ENDIF
RETURN .T.

/*/ LOCA00170
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00170()
LOCAL LRET 		:= .T.
LOCAL CNOVARESP	:= &(READVAR())

	IF CNOVARESP == "C"
		ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR" })] := 0
		ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := 0
		ODLGRES:OBROWSE:REFRESH()
	ENDIF

RETURN LRET

/*/ VALID
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION VALID(ODLG)
Local LSALTD 	:= .T.
Local _NI       := 0 
Local NPSTPBAS  := "" 
Local NPSPREDI  := 0 
Local NPSVRHOR  := 0 
Local NPSDTINI  := CTOD(SPACE(8)) 
Local NPSDTFIM  := CTOD(SPACE(8)) 
Local NPSQUANT  := 0 
Local NPSPRUNI  := 0 
Local NPSVLBRU  := 0 
Local _lValFPA  := .T.
Local LPULAVLD  := SUPERGETMV("MV_LOCX281", .F., .F.)
Local _NPx
Local _NIx
Local _aEquip := {} // Frank em 15/02/22 nao repetir o equipamento
Local _cEquip
Local _nLinha
Local _lErro := .F.
Local _lPassa := .F.
Local _cSeq1 := ""
Local _cSeq2 := ""

PRIVATE LEXCLZUC := .T.

	// Frank Zwarg Fuga em 30/05/2023 - se processar se for visualização
	If nOpc == 2
		ODLG:END()
		Return .T.
	EndIF

	// FRANK 26/10/20 - ROTINA PARA LIMPAR O VALOR NO CASO DE SER UM ITEM PAI.
	LOCA001A0()

	IF EXISTBLOCK("LC001VAL")
		IF !EXECBLOCK("LC001VAL",.T.,.T.,{ODLGPLA:ACOLS, ODLGPLA:AHEADER})
			RETURN .F.
		ENDIF
	ENDIF

	// Frank Z Fuga em 15/02/22 - não permitir equipamentos repetidos
	IF VALTYPE(ODLGPLA)=="O"
		_aEquip := {}
		FOR _NIx := 1 TO LEN(ODLGPLA:ACOLS)
			IF !ODLGPLA:ACOLS[_NIx][LEN(ODLGPLA:AHEADER)+1]
				If empty(ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})])
					If !empty(ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})])
						aadd(_aEquip,{ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})],;
									ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})] ,;
									ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTENRE"})] ,;
									ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_HRINI"})],;
									ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_HRFIM"})],;
									ODLGPLA:ACOLS[_NIx][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]} )
					EndIF
				EndIF
			EndIF
		Next
		FOR _NIx := 1 TO LEN(_aEquip)
			_cEquip := _aEquip[_NIx,1]
			_nLinha := _nIx
			FOR _NPx := 1 TO LEN(_aEquip)
				If _aEquip[_NPx,1] == _cEquip .and. _nPx <> _nIx .and. !empty(_aEquip[_NPx,1])

					_lPassa := .T. // bloqueia
					_cSeq1 := _aEquip[_NPx,6]
					_cSeq2 := _aEquip[_NIx,6]

					// Verificar se o status do bem é em branco indicando que é por minuta
					ST9->(dbSetOrder(1))
					If ST9->(dbSeek(xFilial("ST9")+_aEquip[_NPx,1]))
						If Empty(ST9->T9_STATUS)
							// quando por minuta validar se a data e horário batem
							If _aEquip[_NIx,2] > _aEquip[_NPx,2] // data inicial
								_lPassa := .F.
							EndIF
							If _aEquip[_NIx,3] < _aEquip[_NPx,3] // data final
								_lPassa := .F.
							EndIF
							If _lPassa .and. _aEquip[_NIx,4] > _aEquip[_NPx,4] // hora inicial
								_lPassa := .F.
							EndIF
							If _lPassa .and. _aEquip[_NIx,5] < _aEquip[_NPx,5] // hora final
								_lPassa := .F.
							EndIF
						EndIf
					EndIf

					If _lPassa
						Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0548 + ": " + alltrim(_cEquip)+" " + STR0599  + alltrim(_cSeq2) + "/" + alltrim(_cSeq1) }) //"Existem equipamentos repetidos"
						Return .F.
					EndIF
				EndIF
			Next
		Next
	EndIF


	IF VALTYPE(ODLGPLA)=="O" .AND. !LPULAVLD
		IF FP0->FP0_TIPOSE == "L"				// --> FP0_TIPOSE: T=TRANSPORTE ; E=EQUIPAMENTOS ; L=LOCACAO 		// --> FP0_TIPFAT: M=MEDICAO ; P=PADRAO 
			NPSTPBAS  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_TPBASE"}) 
			NPSPREDI  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_PREDIA"}) 
			NPSVRHOR  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_VRHOR" }) 
			NPSDTINI  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_DTINI" }) 
			NPSDTFIM  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_DTFIM" }) 
			NPSPRODU  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_PRODUT" }) 

			// fazer esta validacao somente se o produto foi preenchido - Frank 11/03/21
			_lValFPA := .F.
			_lErro   := .F.
			If Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
				_lErro := .T.
			EndIF

			FOR _NI := 1 TO LEN(ODLGPLA:ACOLS)
				IF !ODLGPLA:ACOLS[_NI][LEN(ODLGPLA:AHEADER)+1]
					If !EMPTY(ODLGPLA:ACOLS[_NI][NPSPRODU])
						_lValFPA := .T.
					EndIF
				EndIf
			Next

			If _lValFPA
				FOR _NI := 1 TO LEN(ODLGPLA:ACOLS)
					IF !ODLGPLA:ACOLS[_NI][LEN(ODLGPLA:AHEADER)+1]				// --> NÃO ESTÁ DELETADO. 

						// FRANK 12/08/2021 - Validacao da tabela de vendas.
						If !empty(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CODTAB"})]) .or. !empty(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONPAG"})])
							_cXTab := ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CODTAB"})]
							_cXCon := ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONPAG"})]
							If !MaVldTabPrc(_cXTab,_cXCon,,dDataBase)
								Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
								Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
								{STR0546}) //"Erro na tabela de preços, ou condição de pagamento."
								LSALTD := .F.
								//Ferramenta Migrador de Contratos
								If _lErro //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
									cLocErro := STR0547 + CRLF //"Verifique se os campos: 'Base Calculo', 'Qtde Meses', 'Vr.Base', 'Dt.Inicio' ou 'Dt.Final' estão preenchidos!"
								EndIf
								EXIT
							EndIF
						EndIF
						

						// FRANK 23/10/20
						IF EMPTY(ODLGPLA:ACOLS[_NI][NPSVRHOR]) 
							IF !EMPTY(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
								IF !EMPTY(SUBSTR(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1) ) 
									IF EMPTY(ODLGPLA:ACOLS[_NI][NPSVRHOR]) 
										//MSGSTOP("VERIFIQUE SE OS CAMPOS: 'VR.BASE' ESTÁ PREENCHIDO!" , "GPO - LOCC001.PRW") 
										//LSALTD := .F.
										//EXIT
									ENDIF
								ENDIF
							ELSE
								If ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TIPOSE"})] == "O"
									// Sendo o valor zerado para o tipo Outros permitir seguir com o orçamento
									// Solicitação do Lui em 02/07/21
								Else
									//Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
									//Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
									//{STR0347}) //"Verifique se o campo: 'VR.BASE' está preenchido."
									//LSALTD := .F.
									//EXIT
								EndIF
							ENDIF
						ENDIF
					ENDIF
				NEXT _NI
			EndIf

		ENDIF
		IF FP0->FP0_TIPFAT == "P"				// --> M=MEDICAO ; P=PADRAO 
			NPSQUANT  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_QUANT" }) 
			NPSPRUNI  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_PRCUNI"}) 
			NPSVLBRU  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_VLBRUT"}) 

			_lMV_LOCX288 := GETMV("MV_LOCX288",,.F.) 
			FOR _NI := 1 TO LEN(ODLGPLA:ACOLS)
				IF !ODLGPLA:ACOLS[_NI][LEN(ODLGPLA:AHEADER)+1]				// --> NÃO ESTÁ DELETADO. 
					IF   EMPTY(ODLGPLA:ACOLS[_NI][NPSVLBRU]) .AND. !EMPTY(ODLGPLA:ACOLS[_NI][NPSQUANT]) .AND. !EMPTY(ODLGPLA:ACOLS[_NI][NPSPRUNI])
						IF _lMV_LOCX288
							Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; // "RENTAL: "
							Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
							{STR0539}) // "Verifique se o campo: 'VALOR BRUTO' está preenchido."
							LSALTD := .F. 
						EndIF
					ENDIF
				ENDIF
			NEXT _NI
		ENDIF
	ENDIF

	// Tratamento do x3_obrigat
	If LSALTD
		LSALTD := VALID2(LSALTD)
	EndIF

	IF LSALTD 
		FSALVAR(ODLG) 
	ENDIF 

	aSize(_aEquip,0)
	FwFreeArray(_aEquip)

RETURN NIL 


/*/ VALDTFROTA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION VALDTFROTA(CFROTA , DDTINI , DDTFIM , COBRA , CSEQ) 
LOCAL CRET	    := ""
LOCAL AAREA		:= GETAREA()
LOCAL CQUERY	:= ""

	IF SELECT("TR02") > 0
		TR02->(DBCLOSEAREA())
	ENDIF
	CQUERY := " SELECT FPO_PROJET , FPO_DTINI , FPO_DTFIM " 
	CQUERY += " FROM "+RETSQLNAME("FPO")
	CQUERY += " WHERE  FPO_FILIAL = '"+XFILIAL("FPO")+"'"
	CQUERY += "   AND  FPO_CODBEM <> ''"
	CQUERY += "   AND  FPO_STATUS NOT IN ('1','A','E','S')"
	CQUERY += "   AND (FPO_DTINI BETWEEN '"+DTOS(DDTINI)+"' AND '"+DTOS(DDTFIM)+"'"
	CQUERY += "    OR  FPO_DTFIM BETWEEN '"+DTOS(DDTINI)+"' AND '"+DTOS(DDTFIM)+"')"
	CQUERY += "   AND  D_E_L_E_T_= '' "
	CQUERY := CHANGEQUERY(CQUERY)
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TR02" , .T. , .T.) 

	TCSETFIELD("TR02" , "FPO_DTINI" , "D" , 08 , 00) 
	TCSETFIELD("TR02" , "FPO_DTFIM" , "D" , 08 , 00) 

	WHILE !TR02->(EOF())
		CRET += ALLTRIM(TR02->FPO_PROJET)+"-"+COBRA+"-"+CSEQ+" ("+ALLTRIM(CFROTA)+") - "+DTOC(TR02->FPO_DTINI)+" / "+DTOC(TR02->FPO_DTFIM) +CRLF
		TR02->(DBSKIP())
	ENDDO

	IF SELECT("TR02") > 0
		TR02->(DBCLOSEAREA())
	ENDIF

	RESTAREA(AAREA)
	
	aSize(AAREA,0)
	FwFreeArray(AAREA)

RETURN CRET


/*/ LOCA00171
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00171(CPROSPE)
LOCAL CQRY := "" 

	CQRY += " SELECT U5_CONTAT "
	CQRY += " FROM " + RETSQLNAME("SU5") + CRLF
	CQRY += " WHERE U5_PROSPEC = '" + CPROSPE + "' " + CRLF
	CQRY := CHANGEQUERY(CQRY) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQRY) , "TRB" , .F. , .T.) 

	DBSELECTAREA("TRB")
	DBSELECTAREA("FP0")

	CQRY := TRB->U5_CONTAT

	TRB->(DBCLOSEAREA())

RETURN CQRY

/*/ LOCA00172
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00172(CCLIENTE , CLOJA) 
local AAREA := GETAREA()
local _LRET	:= .T.
local _NREGS := 0
local _CBMP	:= LOADBITMAP(NIL , "BR_VERMELHO") 
local _ADADOS := {}
local _ODLGVALCL
local _OLIST
local _CVALIDCLI
local _CSITCLIFIN
local NLIMITCRED := 0
local NVALTIT := 0
local DDTLIMCRED
local NX := 0 

private _CCLIVALID := CCLIENTE
private _CLOJVALID := CLOJA
private _DDATAREF  := DTOS( DATE() )

	_nAnt := LEN(ODLGPLA:ACOLS)
	// MERGE - ORGUEL 94 - INICIO
	// Ponto de Entrada para validações customizadas ao inserir linha
	IF VALTYPE(ODLGPLA)=="O"
		IF EXISTBLOCK("LC01ADD") 
		_LRET := ExecBlock("LC01ADD",.f.,.f.)
			IF !_LRET
				RETURN _LRET
			ENDIF
		ENDIF
	ENDIF	
	// MERGE - ORGUEL 94 - FIM
	_CVALIDCLI 	:= 0 // removido na 94 POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_ZVALCLI")
	_CSITCLIFIN := 0 // removido na 94 POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_ZPENFIN")

	NLIMITCRED	:= POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_LC")
	DDTLIMCRED	:= POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_VENCLC")

	// VERIFICA SE DEVE SER FEITO A VALIDAÇÃO DE PENDENCIAS DO CLIENTE NO FINANCEIRO
	IF _CVALIDCLI == "J"		// J=JAMAIS 
		RETURN .T. 
	ENDIF

	// VERIFICA SE O CLIENTE TEM TITULOS EM CARTEIRA DE PROTESTO OU COBRANÇA C/ ADVOGADO
	IF _CSITCLIFIN == "S"
		AVISO(STR0352,STR0353,{"OK"},,STR0354) //"PENDÊNCIA FINANCEIRA"###"NÃO SERÁ POSSIVEL ABRIR NENHUMA A.S. PARA O CLIENTE POIS O MESMO TEM TITULOS EM CARTEIRA DE 'PROTESTO' OU  'COBRAÇA C/ ADVOGADO' "###"NÃO SERÁ POSSIVEL GERAR A.S."
		RETURN .F.
	ENDIF

	// VERIFICA SE DEVE SER FEITO A VALIDAÇÃO DE PENDENCIAS DO CLIENTE NO FINANCEIRO
	IF _CVALIDCLI == "N"
		RETURN .T.
	ENDIF

	IF SELECT("VALCLI") > 0
		VALCLI->(DBCLOSEAREA())
	ENDIF

	BEGINSQL ALIAS "VALCLI"
			COLUMN E1_VENCREA AS DATE

			%NOPARSER%

			SELECT
				E1_FILIAL,
				E1_PREFIXO,
				E1_NUM,
				E1_PARCELA,
				E1_TIPO,
				E1_NATUREZ,
				E1_NOMCLI,
				E1_VENCREA,
				E1_VALOR
			FROM
				%TABLE:SE1%
			WHERE
				%NOTDEL%						AND
				E1_CLIENTE = %EXP:_CCLIVALID%	AND
				E1_LOJA	   = %EXP:_CLOJVALID%   AND
				E1_TIPO NOT LIKE '%-%'			AND
				E1_VENCREA	< %EXP:_DDATAREF%	AND
				E1_BAIXA	= ' '
	ENDSQL

	VALCLI->(DBGOTOP())
	VALCLI->(DBEVAL({|| _NREGS++, AADD(_ADADOS,{_CBMP,VALCLI->E1_FILIAL,E1_PREFIXO,E1_NUM,E1_PARCELA,E1_TIPO,E1_NATUREZ,E1_NOMCLI,E1_VENCREA,STR0355+TRANSFORM(E1_VALOR,"@E 999,999,999,999.99"),E1_VALOR}  ) } ) ) //"R$ "
	VALCLI->(DBCLOSEAREA())

	IF _NREGS > 0

		NVALTIT := 0
		FOR NX := 1 TO LEN(_ADADOS)
			NVALTIT += _ADADOS[NX,11]
		NEXT NX

		IF (DTOS(DDTLIMCRED) < DTOS(DDATABASE) .OR. NLIMITCRED < NVALTIT) .AND. SUPERGETMV("MV_LOCX242",.F.,.F.)

			_LRET := .F.

			AVISO(STR0352,STR0356+CVALTOCHAR(_NREGS)+STR0357,{"OK"},,STR0354) //"PENDÊNCIA FINANCEIRA"###"NÃO SERÁ POSSIVEL ABRIR NENHUMA A.S. PARA O CLIENTE POIS O MESMO TEM "###" TITULOS PENDENTES NO FINANCEIRO"###"NÃO SERÁ POSSIVEL GERAR A.S."

			DEFINE MSDIALOG _ODLGVALCL FROM 0,0 TO 300,900 TITLE STR0358 PIXEL //"TITULOS PENDENTES"
				@ 05,05 LISTBOX _OLIST FIELDS HEADER "", STR0359 ,STR0360,STR0361,STR0362,STR0363,STR0364,STR0365,STR0366,STR0367 PIXEL SIZE 435,100 OF _ODLGVALCL //"FILIAL"###"PREFIXO"###"NUMERO"###"PARCELA"###"TIPO"###"NATUREZA"###"NOME CLIENTE"###"VENCIMENTO"###"VALOR"
				_OLIST:SETARRAY( _ADADOS )
				_OLIST:BLINE := {|| {   _ADADOS[_OLIST:NAT,01],;
										_ADADOS[_OLIST:NAT,02],;
										_ADADOS[_OLIST:NAT,03],;
										_ADADOS[_OLIST:NAT,04],;
										_ADADOS[_OLIST:NAT,05],;
										_ADADOS[_OLIST:NAT,06],;
										_ADADOS[_OLIST:NAT,07],;
										_ADADOS[_OLIST:NAT,08],;
										_ADADOS[_OLIST:NAT,09],;
										_ADADOS[_OLIST:NAT,10]}}
				DEFINE SBUTTON FROM 120,415 TYPE 1 ACTION ( _ODLGVALCL:END() ) ENABLE
			ACTIVATE MSDIALOG _ODLGVALCL  CENTERED

			//OREPORT := LOCR002()
			OREPORT:PRINTDIALOG()
		ENDIF
	ENDIF

	RESTAREA( AAREA )
	//FwFreeArray(AAREA) removido pela questão do advpr

	aSize(_ADADOS,0)
	FwFreeArray(_ADADOS)

RETURN _LRET

/*/ LOCA00173
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00173()
LOCAL AAREA		:= GETAREA()
LOCAL CPROJET   := PROJETO(.T.)
LOCAL CFILOLD   := CFILANT

	//CFILANT := FP0->FP0_FILIAL 

	IF LOCA00174( CPROJET )
		LOCA013()
		
		DBSELECTAREA("FQ5")
		DBSETORDER(8)//PROJETO
		IF DBSEEK(XFILIAL("FQ5")+SUBSTR( CPROJET, 1, 9))//SE GEROU O CONTRATO
			RECLOCK("FP0",.F.)
			FP0->FP0_POSSIB := "100"
			FP0->(MSUNLOCK()) 
		ENDIF
	ENDIF

	CFILANT := CFILOLD 

	RESTAREA(AAREA)

	aSize(AAREA,0)
	FwFreeArray(AAREA)

RETURN NIL

/*/ LOCA00174
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00174(CPROJET)	
LOCAL LRET		:= .T.
LOCAL AAREA		:= GETAREA()
LOCAL AAREAZLE	:= FPM->(GETAREA())
LOCAL _AINCON   := {}
LOCAL _CMSG     := ""
LOCAL CQUERY	:= ""
LOCAL CGETNA    := GETNEXTALIAS()
LOCAL CGRPAND   := ""
Local lLOCX305	:= SuperGetMV("MV_LOCX305",.F.,.T.) //Define se aceita geração de contrato sem equipamento

	IF SBM->(FIELDPOS("BM_XACESS")) > 0
		CGRPAND := LOCA00189()
	ELSE
		CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
	ENDIF

	IF EXISTBLOCK("LC001VML") 				// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE VALIDAÇÃO NA MANUTENÇÃO DE PROJETOS DE LOCAÇÃO.
		LRET := EXECBLOCK("LC001VML",.T.,.T.,{})
	ELSE
		CQUERY := " SELECT FPA_OBRA, FPA_SEQGRU, B1_GRUPO, FP0_TIPFAT TIPFAT" + CRLF
		CQUERY += " FROM " + RETSQLNAME("FPA") + " ZAG "
		CQUERY +=        " INNER JOIN " + RETSQLNAME("FP0") + " ZA0 ON  FPA_FILIAL = FP0_FILIAL" + CRLF
		CQUERY +=                                                 " AND FPA_PROJET = FP0_PROJET" + CRLF
		CQUERY +=                                                 " AND ZA0.D_E_L_E_T_ = ' ' "   + CRLF
		CQUERY +=        " LEFT  JOIN " + RETSQLNAME("SB1") + " SB1 ON  FPA_PRODUT = B1_COD "    + CRLF
		CQUERY +=                                                 " AND SB1.D_E_L_E_T_ = ' ' "   + CRLF
		CQUERY += " WHERE  FPA_FILIAL = '" + XFILIAL("FPA") + "'" + CRLF
		CQUERY += "   AND  FPA_PROJET = '" + CPROJET + "'" + CRLF
		CQUERY += "   AND (FPA_DTINI  = ''" + CRLF
		CQUERY += "    OR  FPA_DTFIM  = ''" + CRLF
		CQUERY += "    OR (FPA_PRODUT = ''" + CRLF
		CQUERY += "   AND  FPA_TIPOSE = 'L')" + CRLF
		CQUERY += "    OR (B1_GRUPO NOT IN ('" + STRTRAN(ALLTRIM(CGRPAND),";","','") + "')" + CRLF
		CQUERY += "    AND FPA_GRUA   = ''" + CRLF
		CQUERY += "    AND FPA_TIPOSE = 'L')" + CRLF
		CQUERY += "    OR (B1_GRUPO  IN ('" + STRTRAN(ALLTRIM(CGRPAND),";","','") + "')" + CRLF
		CQUERY += "    AND FPA_QUANT <= 0" + CRLF
		CQUERY += "    AND FPA_NFRET = '')" + CRLF
		CQUERY += "     OR FPA_CONPAG = '')" + CRLF
		CQUERY += "    AND ZAG.D_E_L_E_T_ = ' '"
		CQUERY := CHANGEQUERY(CQUERY)
		DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CQUERY),(CGETNA),.F.,.T.)

		IF (CGETNA)->(!EOF()) .And. !lLOCX305 // Se não estiver permitido contrato sem equipamento
			IF (CGETNA)->B1_GRUPO $ ALLTRIM(CGRPAND) //TIPFAT $ "A#B"

				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0388 + (CGETNA)->FPA_OBRA + STR0305 + (CGETNA)->FPA_SEQGRU}) //"Verifique os campos data e hora inicial/final, produto, quantidade e condição de pagamento. Obra: "###" / Seq.: "

				//Ferramenta Migrador de Contratos
				If Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
					cLocErro := STR0388 + (CGETNA)->FPA_OBRA + STR0305 + (CGETNA)->FPA_SEQGRU + "."+CRLF
				EndIf

			ELSE
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0389 + (CGETNA)->FPA_OBRA + STR0305 + (CGETNA)->FPA_SEQGRU}) //"Verifique os campos data e hora inicial/final, produto/bem, e condição de pagamento. Obra: "###" / Seq.: "
				
				//Ferramenta Migrador de Contratos
				If Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
					cLocErro := STR0389 + (cGetNA)->FPA_OBRA + STR0305 + (cGetNA)->FPA_SEQGRU + "."+CRLF
				EndIf

			ENDIF
			LRET := .F.
		ENDIF
		(CGETNA)->(DBCLOSEAREA())

		IF LRET
			_CMSG := ""

			IF !EMPTY(_CMSG)
				LRET := .F.

				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0390+ALLTRIM(_CMSG)+STR0391}) //"Não foi possível efetivar o contrato devido ao(s) produtos(s) "###" não possuirem saldo suficiente em estoque."

				//Ferramenta Migrador de Contratos
				If Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
					cLocErro := STR0390+AllTrim(_cMsg)+STR0391+CRLF
				Else
					IF MSGYESNO(STR0392 , STR0097)  //"DESEJA VISUALIZAR RELATÓRIO DE INCONSISTÊNCIAS?"###"GPO - LOCC001.PRW"
						DEFINE MSDIALOG ODLGEST TITLE STR0393 FROM 0,0 TO 15,90 OF OMAINWND  //"INCONSISTÊNCIAS"
							@ 0.5,.7 LISTBOX OLISTEST FIELDS ;
							HEADER  STR0394,STR0395,STR0396,STR0397,STR0398 SIZE 340,088 //"OBRA"###"PRODUTO"###"QTD. SOLICITADA"###"QTD. EM ESTOQUE"###"ARMAZEM"
							OLISTEST:SETARRAY(_AINCON)
							OLISTEST:BLINE := { || {_AINCON[OLISTEST:NAT][01] , _AINCON[OLISTEST:NAT][02] , _AINCON[OLISTEST:NAT][03] , _AINCON[OLISTEST:NAT][04] , _AINCON[OLISTEST:NAT][05]}} 
							@ 098, 7 BUTTON OESTCLOSE PROMPT STR0339 SIZE 45,12 OF ODLGEST PIXEL ACTION (ODLGEST:END()) //"Fechar"
						ACTIVATE MSDIALOG ODLGEST CENTERED
					ENDIF
				ENDIF
			ENDIF

		ENDIF
	ENDIF

	IF LRET .AND. EXISTBLOCK("LC001VCT") 		// --> PONTO DE ENTRADA PARA VALIDAÇÃO DE USUÁRIO ANTES DA GERAÇÃO DO CONTRATO
		LRET := EXECBLOCK("LC001VCT",.T.,.T.,{CPROJET})
	ENDIF

	RESTAREA(AAREAZLE) 
	RESTAREA(AAREA) 

	aSize(AAREAZLE,0)
	aSize(AAREA,0)
	
	FwFreeArray(AAREAZLE)
	FwFreeArray(AAREA)

	aSize(_AINCON,0)
	FwFreeArray(_AINCON)	

RETURN LRET 


/*/ LOCA00175
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00175(NOPC) 		// VALIDA PERIODO ZA6
LOCAL AAREA		:= GETAREA()
LOCAL LRET		:= .T.

	IF NOPC == 1 .AND. !EMPTY(DDTFIM)
		IF DTOS(DDTFIM) < DTOS(M->ZA6_DTINI)
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0399}) //"Data fim não pode ser menor que a data início."


			LRET := .F.
		ENDIF
	ELSEIF NOPC == 2 .AND. !EMPTY(DDTINI)
		IF DTOS(M->ZA6_DTFIM) < DTOS(DDTINI)
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0399}) //"Data fim não pode ser menor que a data início."

			LRET := .F.
		ENDIF
	ENDIF

	RESTAREA(AAREA)
	
	aSize(AAREA,0)
	FwFreeArray(AAREA)

RETURN LRET

/*/ SUMVALRES
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION SUMVALRES() 
LOCAL NPOS
LOCAL NX
LOCAL COBRAAUX   := "" 
LOCAL CSEQTRAAUX := "" 
LOCAL ACOLSCUS   := {} 

	IF FP0->FP0_TIPOSE == "L"
		RETURN .F.
	ENDIF

	NVALCUSTG  := 0
	NVALVIAGEM := 0
	NPOSVAL    := ASCAN( ODLGRES:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP6_VALOR"   })

	FOR NX := 1 TO LEN(ODLGRES:ACOLS)
		NVALCUSTG += ODLGRES:ACOLS[NX,NPOSVAL]
	NEXT NX
	//OVALCUSTG:REFRESH()

	NPOSVALGUI  := ASCAN( ODLGCUS:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FQ8_VRFRET"   })
	FOR NPOS:=1 TO LEN(OCUS_COLS)
		COBRAAUX   := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})]
		CSEQTRAAUX := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
		IF COBRA+CSEQTRA == COBRAAUX+CSEQTRAAUX 
			AADD(ACOLSCUS,ACLONE(OCUS_COLS[NPOS]))
		ENDIF
	NEXT

	FOR NX := 1 TO LEN(ACOLSCUS)
		NVALVIAGEM += ACOLSCUS[NX,NPOSVALGUI]
	NEXT NX
	OVALVIAGEM:REFRESH()

	aSize(ACOLSCUS,0)
	FwFreeArray(ACOLSCUS)

RETURN .T.

/*/ LOCA00176
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00176(LBCALC)
LOCAL CCODRESP := SUPERGETMV("MV_LOCX119",.F.,"999")
LOCAL NRESULT  := 0
LOCAL NPOSCOD  := 0
LOCAL NPOSCOD2 := 0
LOCAL NVALCUS  := 0
LOCAL CCAMPO
LOCAL CCAMPOGET

	NCOLCODIGO := ASCAN( ODLGRES:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP6_CODIGO"   })
	NPOSCOD    := ASCAN(ODLGRES:ACOLS,{|X| ALLTRIM(X[NCOLCODIGO]) == ALLTRIM(CCODRESP)})

	DBSELECTAREA("FP7")
	DBSETORDER(1)
	IF DBSEEK(XFILIAL("FP7")+CCODRESP)
		NRESULT := (NVALVIAGEM * IIF(LBCALC,NVALCUS,M->ZA6_CUSIND)) / 100
		IF NPOSCOD > 0
			ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})]   := COBRA
			ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] := CSEQTRA
			ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
			ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
			ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
			ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
			ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
			NPOSCOD2 := ASCAN(ORES_COLS,{|X| ALLTRIM(X[1]+X[2]+X[NCOLCODIGO]) == ALLTRIM(COBRA+CSEQTRA+CCODRESP)})
			IF NPOSCOD2 > 0
				ORES_COLS[NPOSCOD2] := ACLONE(ODLGRES:ACOLS[NPOSCOD])
			ENDIF
		ELSE
			IF EMPTY(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})]) .AND. LEN(ODLGRES:ACOLS) == 1
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
				ORES_COLS[LEN(ODLGRES:ACOLS)] := ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)])
			ELSE
				AADD(ODLGRES:ACOLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))

				CCAMPO    := "FP6_SEQRES"
				CCAMPOGET := ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]       := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
				ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := 0

				AADD(ORES_COLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))//ADD NO ACOLSGERAL
			ENDIF
		ENDIF
		ODLGRES:REFRESH()
	ENDIF

RETURN .T.

/*/ LOCA00178
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00178(CCAMPO) 
LOCAL AAREA		:= GETAREA()
LOCAL AAREASB1	:= SB1->(GETAREA())
LOCAL AAREAZ_5	:= FQ1->(GETAREA())
LOCAL AAREADA1	:= DA1->(GETAREA())
LOCAL LRET		:= .T.
LOCAL CCODUSR	:= RETCODUSR()
LOCAL CPRODUTO 	:= ""
LOCAL CCODTAB 	:= ""

	IF UPPER(CCAMPO) == "FP4_VRHOR"
	ENDIF

	DBSELECTAREA("FQ1")
	DBSETORDER(1)
	IF !DBSEEK(XFILIAL("FQ1")+CCODUSR+"LOCA00178")			// SE O USUÁRIO NAO TIVER NA SZ5, FAZ VALIDAÇÃO ABAIXO.
		DBSELECTAREA("DA1")
		DBSETORDER(1)//CODTAB+PROD
		IF DBSEEK(XFILIAL("DA1")+CCODTAB+CPRODUTO) .AND. !EMPTY(CCODTAB)
			IF M->FP4_VRHOR < DA1->DA1_PRCVEN
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0400}) //"O valor base, não pode ser menor que o preço de venda informado na tabela de preços."

				LRET := .F. 
			ENDIF 
		ELSE 
			DBSELECTAREA("SB1") 
			DBSETORDER(1) 
			IF DBSEEK(XFILIAL("SB1")+CPRODUTO) 
				IF M->FP4_VRHOR < SB1->B1_PRV1 
					Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0401}) //"O valor base, não pode ser menor que o preço de venda informado no cadastro deste produto."

					LRET := .F. 
				ENDIF 
			ENDIF 
		ENDIF 
	ENDIF 

	RESTAREA(AAREASB1) 
	RESTAREA(AAREAZ_5) 
	RESTAREA(AAREADA1) 
	RESTAREA(AAREA) 

	aSize(AAREASB1,0)
	aSize(AAREAZ_5,0)
	aSize(AAREADA1,0)
	aSize(AAREA,0)
	
	FwFreeArray(AAREASB1)
	FwFreeArray(AAREAZ_5)
	FwFreeArray(AAREADA1)
	FwFreeArray(AAREA)

RETURN LRET

/*/ LOCA00179
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00179(CCAMPO)
LOCAL NRET		:= 0
LOCAL AAREA		:= GETAREA()
LOCAL AAREASB1	:= SB1->(GETAREA())
LOCAL AAREADA1	:= DA1->(GETAREA())
LOCAL CPROD		:= ""
LOCAL CCODTAB 	:= ""

	IF     CCAMPO == "FP4_PRODUT"
		CPROD 	:= M->FP4_PRODUT
	ELSEIF CCAMPO == "FP4_CODTAB"
		CCODTAB := M->FP4_CODTAB
	ENDIF

	DBSELECTAREA("DA1")
	DBSETORDER(1)//CODTAB+PROD
	IF DBSEEK(XFILIAL("DA1")+CCODTAB+CPROD) .AND. !EMPTY(CCODTAB)
		NRET := DA1->DA1_PRCVEN
	ELSE
		DBSELECTAREA("SB1")
		DBSETORDER(1)
		DBSEEK(XFILIAL("SB1")+CPROD)
		NRET := SB1->B1_PRV1
	ENDIF

	RESTAREA(AAREASB1)
	RESTAREA(AAREADA1)
	RESTAREA(AAREA)

	aSize(AAREASB1,0)
	aSize(AAREADA1,0)
	aSize(AAREA,0)
	
	FwFreeArray(AAREASB1)
	FwFreeArray(AAREADA1)
	FwFreeArray(AAREA)

RETURN NRET

/*/ LOCA00180
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00180()
LOCAL LRET		:= .T.
LOCAL AAREA		:= GETAREA()
LOCAL AAREADA0	:= DA0->(GETAREA())

	DBSELECTAREA("DA0")
	DBSETORDER(1)
	IF DBSEEK(XFILIAL("DA0")+M->FP4_CODTAB)
		IF DA0->DA0_ATIVO == "2"//NÃO
			LRET := .F.
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0402}) //"Esta tabela de preço está inativa."
		ENDIF
	ELSE
			LRET := .F.
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0403}) //"Esta tabela de preço não existe."

	ENDIF

	RESTAREA(AAREADA0)
	RESTAREA(AAREA)

	aSize(AAREADA0,0)
	aSize(AAREA,0)
	
	FwFreeArray(AAREADA0)
	FwFreeArray(AAREA)

RETURN LRET

/*/ LOCA00181
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00181()
Local nValBase := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
LOCAL NPORCENT := 0

	NPORCENT := (NVALBASE * M->FPE_PORCENT) / 100
	OGETVT:ACOLS[N, GDFIELDPOS("FPE_VALTUR", OGETVT:AHEADER)] := NVALBASE + NPORCENT

RETURN .T.

/*/ LOCA00182
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00182(CCAMPO) 
LOCAL LRET		:= .T.
LOCAL CHRINI	:= ""
LOCAL CHRFIM	:= ""
LOCAL CDIASEM	:= ""
LOCAL CHRINI2	:= ""
LOCAL CHRFIM2	:= ""
LOCAL CDIASEM2	:= ""
LOCAL LVLDHRTU	:= SUPERGETMV("MV_LOCX258",.F.,.T.) 
LOCAL _NX       := 0 

	IF     CCAMPO == "FPE_HRINIT"
		CHRINI := M->FPE_HRINIT
		CHRFIM := OGETVT:ACOLS[N, GDFIELDPOS("FPE_HOFIMT", OGETVT:AHEADER)]
	ELSEIF CCAMPO == "FPE_HOFIMT"
		CHRINI := OGETVT:ACOLS[N, GDFIELDPOS("FPE_HRINIT", OGETVT:AHEADER)]
		CHRFIM := M->FPE_HOFIMT
	ENDIF

	CDIASEM := OGETVT:ACOLS[N, GDFIELDPOS("FPE_DIASEM", OGETVT:AHEADER)]

	IF CHRINI == "2400" .AND. CHRFIM == "2400"
		LRET := .F.
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0404}) //"A hora inicial deve ser diferente da hora final."
	ENDIF

	IF CHRINI == "2400"
		CHRINI := "0000"
	ENDIF 

	IF LVLDHRTU
		IF !EMPTY(CHRFIM) .AND. LRET .AND. !EMPTY(CHRINI)
			IF CHRINI > CHRFIM .AND. LRET
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0405}) //"A hora final não pode ser inferior a hora inicial."
				LRET := .F.
			ENDIF 
			IF LRET .AND. CHRFIM == CHRINI
				Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0404}) //"A hora inicial deve ser diferente da hora final."
				LRET := .F.
			ENDIF 
		ENDIF 
	ENDIF

	IF LRET .AND. CHRINI > "2400"
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0406}) //"A hora inicial é inválida."
		LRET := .F.
	ENDIF

	IF LRET .AND. CHRFIM > "2400"
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0407}) //"A hora final é inválida."
		LRET := .F.
	ENDIF

	IF LRET
		FOR _NX := 1 TO LEN(OGETVT:ACOLS)
			IF !(OGETVT:ACOLS[_NX][LEN(OGETVT:AHEADER)+1])
				IF OGETVT:NAT <> _NX
					CHRINI2  := OGETVT:ACOLS[_NX, GDFIELDPOS("FPE_HRINIT", OGETVT:AHEADER)]
					CHRFIM2  := OGETVT:ACOLS[_NX, GDFIELDPOS("FPE_HOFIMT", OGETVT:AHEADER)]
					CDIASEM2 := OGETVT:ACOLS[_NX, GDFIELDPOS("FPE_DIASEM", OGETVT:AHEADER)]
					IF CHRINI2 == "2400"
						CHRINI2 := "0000"
					ENDIF
					IF LRET .AND. CHRINI >= CHRINI2 .AND. CHRINI < CHRFIM2 .AND. CDIASEM == CDIASEM2
						Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0408+ALLTRIM(STR(_NX))}) //"Conflito de horários com a linha: "
						LRET := .F.
						EXIT
					ENDIF 
					IF LRET .AND. CHRFIM > CHRINI2 .AND. CHRFIM <= CHRFIM2 .AND. CDIASEM == CDIASEM2
						Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0408+ALLTRIM(STR(_NX))}) //"Conflito de horários com a linha: "
						LRET := .F.
						EXIT
					ENDIF 
				ENDIF 
			ENDIF
		NEXT _NX 
	ENDIF

RETURN LRET

/*/ GETVALPROJ
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION GETVALPROJ(CPROJET , CTIPO) 
LOCAL AAREA     := GETAREA()
LOCAL NRET		:= 0

	DBSELECTAREA("FPA")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FPA")+CPROJET)
	WHILE !FPA->(EOF()) .AND. FPA->(FPA_FILIAL+FPA_PROJET) == XFILIAL("FPA")+CPROJET
		NRET += FPA->FPA_VRHOR
		IF FPA->FPA_TPGUIM == "C"
			NRET += FPA->FPA_GUIMON
		ENDIF
		IF FPA->FPA_TPGUID == "C"
			NRET += FPA->FPA_GUIDES
		ENDIF
		FPA->(DBSKIP())
	ENDDO

	DBSELECTAREA("FP6")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FP6")+CPROJET)
	WHILE !FP6->(EOF()) .AND. FP6->(FP6_FILIAL+FP6_PROJET) == XFILIAL("FP6")+CPROJET
		NRET += FP6->FP6_VALCOB
		FP6->(DBSKIP())
	ENDDO

	RESTAREA( AAREA )
	
	aSize(AAREA,0)
	FwFreeArray(AAREA)

RETURN NRET

/*/ LOCA00186
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00186(ACOLS,AHEADER,NAT)  //VALIDA A LINHA DO OGETVT:ACOLS
LOCAL NMINDIA
LOCAL LRET      := .T.

DEFAULT ACOLS   := ACLONE(OGETVT:ACOLS)
DEFAULT AHEADER := ACLONE(OGETVT:AHEADER)
DEFAULT NAT     := OGETVT:NAT

	IF LRET
		NMINDIA := ACOLS[NAT][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_MINDIT"})]  //C(5)
		IF !FVALIDAHEX(VAL(NMINDIA)/100)
			LRET := .F.
		ENDIF
	ENDIF

RETURN LRET


/*/ LOCA00187
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00187() 	// VALIDA TODAS AS LINHAS DO OGETVT:ACOLS
LOCAL LRET   := .T.
RETURN(LRET)


/*/ FVALIDAHEX
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FVALIDAHEX(NHORA)
LOCAL CHORA := STRTRAN(STRZERO(NHORA,5,2),".",":")
LOCAL LRET  := .T.

	DO CASE
	CASE NHORA < 00.00 .OR. NHORA > 23.59
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0436+CHORA+STR0437}) //"Hora: "###" Inválida."
		LRET := .F.

	CASE SUBS(CHORA,1,2) < "00" .OR. SUBS(CHORA,1,2) > "24"
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0436+CHORA+STR0437}) //"Hora: "###" Inválida."
		LRET := .F.

	CASE SUBS(CHORA,4,2) < "00" .OR. SUBS(CHORA,4,2) > "59"
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0436+CHORA+STR0437}) //"Hora: "###" Inválida."
		LRET := .F.
	ENDCASE

RETURN LRET


/*/ BLOQCLASS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION BLOQCLASS(CCODCLASS)
LOCAL AAREAANT := GETAREA()
LOCAL NTAMANHO := LEN( ALLTRIM( CODCLVAL(CCODCLASS) ) )

	CCODCLASS := ALLTRIM( CODCLVAL(CCODCLASS) )

	DBSELECTAREA("CTH")
	DBSETORDER(1)
	IF DBSEEK( XFILIAL("CTH")+CCODCLASS )
		RECLOCK("CTH",.F.)
		REPLACE CTH_DTEXSF WITH DDATABASE+180 
		CTH->(MSUNLOCK())

		DBSELECTAREA("CTH")
		DBSETORDER(5)
		DBSEEK(XFILIAL("CTH")+CCODCLASS)
		WHILE !EOF() .AND. SUBSTR(ALLTRIM(CTH->CTH_CLSUP),1,NTAMANHO) ==CCODCLASS
			RECLOCK("CTH",.F.)
			REPLACE CTH_DTEXSF WITH DDATABASE+180
			CTH->(MSUNLOCK())
			DBSKIP() 
		ENDDO 
	ENDIF 

	RESTAREA(AAREAANT)
	
	aSize(AAREAANT,0)
	FwFreeArray(AAREAANT)

RETURN NIL


/*/ CODCLVAL
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION CODCLVAL(CVAR)
LOCAL CRET := SPACE(20)

	IF LEN(ALLTRIM(CVAR)) >11
		IF SUBSTR(ALLTRIM(CVAR),12,1) == "/"
			CRET := SUBSTR(ALLTRIM(CVAR),1,11)
		ELSE
			CRET := SUBSTR(ALLTRIM(CVAR),1,12)
		ENDIF
	ELSE
		CRET := CVAR
	ENDIF

RETURN CRET


/*/ ZA0F12
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00188()
	IF PERGF12("LOCP060")
		DO CASE
		CASE MV_PAR01==1 
			CFILTROF12 := STR0244 //"SEM NF RETORNO"
		CASE MV_PAR01==2 
			CFILTROF12 := STR0245 //"COM NF RETORNO"
		OTHERWISE 
			CFILTROF12 := STR0107 //"AMBOS"
		ENDCASE

		OPLA_COLS  := {}
		OPLA_COLS0 := {}
		OPLACOLRET := {}

		XFOLDERPLA()
	ENDIF

RETURN



/*/ PERGF12
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
PERGUNTA DE FILTRO DA TECLA F12, NA MANUTENÇÃO DO PROJETO
/*/

STATIC FUNCTION PERGF12(CPERG)
LOCAL _NPADRAO  := 3
LOCAL APERGS    := {}
LOCAL ARET      := {}
LOCAL LRET      := .F.

	DO CASE
	CASE ALLTRIM(UPPER(CFILTROF12)) == "SEM NF RETORNO"
		_NPADRAO := 1
	CASE ALLTRIM(UPPER(CFILTROF12)) == "COM NF RETORNO"
		_NPADRAO := 2
	OTHERWISE
		_NPADRAO := 3
	ENDCASE

	AADD( APERGS ,{2,STR0438,_NPADRAO,{STR0244, STR0245, STR0107 }, 60,"",.T.}) //"FILTRO"###"SEM NF RETORNO"###"COM NF RETORNO"###"AMBOS"

	IF PARAMBOX(APERGS ,STR0439,ARET, /*4*/, /*5*/, /*6*/, /*7*/, /*8*/, /*9*/, /*10*/, .F.) //"PARAMETROS "
		IF VALTYPE(ARET[01]) == "C"
			DO CASE
			CASE ALLTRIM(UPPER(ARET[01])) == "SEM NF RETORNO"
				MV_PAR01 := 1
			CASE ALLTRIM(UPPER(ARET[01])) == "COM NF RETORNO"
				MV_PAR01 := 2
			OTHERWISE
				MV_PAR01 := 3
			ENDCASE
		ELSE
			MV_PAR01 := ARET[01]
		ENDIF

		LRET := .T.
	ENDIF

	aSize(APERGS,0)
	aSize(ARET,0)
	
	FwFreeArray(APERGS)
	FwFreeArray(ARET)

RETURN (LRET)


/*/ XFOLDERPLA
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION XFOLDERPLA()
LOCAL NSTYLE	:= GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET  := PROJETO()
LOCAL ACOLSF12 , AHEADERF12 

	FOBRA()

	NSTYLE     := IIF(NOPCMANU==2,0,NSTYLE)  		// 2=VISUALIZAR

	CALIAS     := "FPA"
	CCHAVE     := XFILIAL(CALIAS) + CPROJET
	CCONDICAO  := 'FPA_FILIAL+FPA_PROJET=="' + CCHAVE + '"'
	NINDICE    := 1  								// FPA_FILIAL+FPA_PROJET+FPA_OBRA+FPA_SEQGRU
	CFILTRO    := CCONDICAO

	AHEADERF12 := ODLGPLA:AHEADER
	ACOLSF12   := FCOLS(AHEADERF12,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	IF LEN(ACOLSF12)==1
		CCAMPO    := "FPA_OBRA"
		CCAMPOGET := ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]
		IF EMPTY(CCAMPOGET)
			ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]   := COBRA
			OPLA_COLS0[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})] := COBRA
		ENDIF

		CCAMPO    := "FPA_SEQGRU"
		CCAMPOGET := ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]
		IF EMPTY(CCAMPOGET)
			ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]   := STRZERO(1,LEN(CCAMPOGET))
			OPLA_COLS0[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
	ENDIF

	ODLGPLA:ACOLS := ACLONE(ACOLSF12)
	ODLGPLA:OBROWSE:REFRESH()

	FACUMUPLA()
	FTRAZPLA()

	//FwFreeArray(ACOLSF12) removido pela questão do advpr
	//FwFreeArray(AHEADERF12)

RETURN NIL 


/*/ GRPACESS
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
RETORNA OS GRUPOS DE PRODUTO DE ACESSÓRIO
/*/

FUNCTION LOCA00189()
LOCAL _AAREAOLD := GETAREA()
LOCAL _CGRPACE  := ""
LOCAL _CQUERY   := ""

	IF SBM->(FIELDPOS("BM_XACESS")) > 0
		_CQUERY := " SELECT DISTINCT BM_GRUPO" + CRLF
		_CQUERY += " FROM " + RETSQLNAME("SBM") + " SBM" + CRLF
		_CQUERY += " WHERE  BM_FILIAL = '" + XFILIAL("SBM") + "'" + CRLF
		_CQUERY +=   " AND  BM_XACESS = '1'" + CRLF
		_CQUERY +=   " AND  SBM.D_E_L_E_T_ = ''"
		IF SELECT("TRBSBM") > 0
			TRBSBM->(DBCLOSEAREA())
		ENDIF
		_CQUERY := CHANGEQUERY(_CQUERY) 
		TCQUERY _CQUERY NEW ALIAS "TRBSBM"

		WHILE TRBSBM->(!EOF())
			IF EMPTY(_CGRPACE)
				_CGRPACE := TRBSBM->BM_GRUPO
			ELSE
				_CGRPACE += ";" + TRBSBM->BM_GRUPO
			ENDIF
			TRBSBM->(DBSKIP())
		ENDDO
		TRBSBM->(DBCLOSEAREA())

	ELSE
		_CGRPACE := SUPERGETMV("MV_LOCX014",.F.,"")
	ENDIF

	RESTAREA( _AAREAOLD )
	
	aSize(_AAREAOLD,0)
	FwFreeArray(_AAREAOLD)

RETURN _CGRPACE


/*/ FCFOLDER
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FCFOLDER(ATITLES , POPC) 
DEFAULT ATITLES := {}
DEFAULT POPC    := 2

	IF POPC <> 0									// NÃO FOR FOLLOW-UP
		DO CASE
		CASE FP0->FP0_TIPOSE == "L"					// ==> LOCACAO
			AADD(ATITLES , STR0440+SUPERGETMV("MV_LOCX248",.F.,STR0002))  //"Dados do &"###"Projeto"
			NFOLDERPRO := LEN(ATITLES)

			AADD(ATITLES , STR0445)  //"L&ocalidades"
			NFOLDEROBR := LEN(ATITLES)

			AADD(ATITLES , STR0446)  //"&Locação"
			NFOLDERPLA := LEN(ATITLES)

			IF SUPERGETMV("MV_LOCX225",.F.,.T.)
				AADD(ATITLES , STR0448)  //"C&onj.Tranportador"
				NFOLDERCNP := LEN(ATITLES) 
			ENDIF

		ENDCASE

		IF SUPERGETMV("MV_LOCX227",.F.,.T.)
			AADD(ATITLES , STR0449)  //"&Responsabilidades"
			NFOLDERRES := LEN(ATITLES) 
		ENDIF

		AADD(ATITLES , STR0450)  //"&Base de Cálculo"
		NFOLDERCUS := LEN(ATITLES)
		IF SUPERGETMV("MV_LOCX226",.F.,.T.)
			AADD(ATITLES , STR0451)  //"&Documentos"
			NFOLDERDOC := LEN(ATITLES) 
		ENDIF
	ENDIF

	AADD(ATITLES , STR0452)  //"&Follow-up"
	NFOLDERFOL := LEN(ATITLES)
	IF EXISTBLOCK("LC01ATIT") // --> PONTO DE ENTRADA PARA ALTERAR DESCRIÇÃO DAS ABAS
		ATITLES := EXECBLOCK("LC01ATIT",.T.,.T.,{ATITLES}) 
	ENDIF

RETURN ATITLES


/*/ GETNFREM
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION GETNFREM( _CAS , _AREMESSA , _LREMESSA ) 
Local _AAREAOLD := GETAREA()
Local _ARET     := {}
Local _CQUERY   := ""
Local lMvLocBac	:= SuperGetMv("MV_LOCBAC",.F.,.F.) //Integração com Módulo de Locações SIGALOC

DEFAULT _CAS      := ""
DEFAULT _AREMESSA := {}
DEFAULT _LREMESSA := .T.

	IF SELECT("TRBREM") > 0
		TRBREM->(DBCLOSEAREA())
	ENDIF

	IF _LREMESSA
		_CQUERY := " SELECT D2_DOC NOTA , D2_SERIE SERIE , D2_ITEM ITEM , D2_EMISSAO EMISSAO "
		_CQUERY += " FROM " + RETSQLNAME("SC6") + " SC6 "
		_CQUERY += " INNER JOIN " + RETSQLNAME("SC5") + " SC5 ON  C5_FILIAL  = '" + XFILIAL("SC5") + "'"
		_CQUERY += " AND C5_NUM = C6_NUM "
		_CQUERY += " AND SC5.D_E_L_E_T_ = '' "
		_CQUERY += " INNER JOIN " + RETSQLNAME("SD2") + " SD2 ON  D2_FILIAL  = '" + XFILIAL("SD2") + "'"
		_CQUERY += " AND D2_DOC = C6_NOTA AND D2_SERIE = C6_SERIE"
		_CQUERY += " AND D2_PEDIDO = C6_NUM AND D2_ITEMPV = C6_ITEM"
		_CQUERY += " AND SD2.D_E_L_E_T_ = '' "
		If lMvLocBac
			_CQUERY += " INNER JOIN " + RETSQLNAME("FPZ") + " FPZ ON FPZ_FILIAL = C5_FILIAL AND FPZ_PEDVEN = C5_NUM "
			_CQUERY += " AND FPZ.D_E_L_E_T_ = '' AND FPZ_ITEM = C6_ITEM"
			_CQUERY += " INNER JOIN " + RETSQLNAME("FPY") + " FPY ON FPY_FILIAL =  C5_FILIAL AND FPY_PEDVEN = C5_NUM "
			_CQUERY += " AND FPY.D_E_L_E_T_ = '' AND FPY_STATUS <> '2' "
		EndIf
		_CQUERY += " WHERE C6_FILIAL = '" + XFILIAL("SC6") + "'"    
		If lMvLocBac
			_CQUERY += " AND FPZ_AS <> '' AND FPZ_AS = '"+_CAS+"' "
			_CQUERY += " AND FPY_TIPFAT = 'R' "
		Else
			_CQUERY += " AND C6_XAS = '"+_CAS+"'"  
			_CQUERY += " AND C5_XTIPFAT = 'R' "
		EndIf
		_CQUERY += " AND C6_NOTA    <> '' "
		_CQUERY += " AND C6_BLQ NOT IN ('R','S') "
		_CQUERY += " AND SC6.D_E_L_E_T_ = '' "
		_CQUERY += " ORDER BY EMISSAO DESC , SD2.R_E_C_N_O_ DESC " 
	ELSE
		_CQUERY := " SELECT D1_DOC NOTA , D1_SERIE SERIE , D1_ITEM ITEM , D1_EMISSAO EMISSAO"
		_CQUERY += " FROM " + RETSQLNAME("SD1") + " SD1 "
		_CQUERY += " WHERE D1_FILIAL  = '" + XFILIAL("SD1") + "'"
		_CQUERY += " AND D1_NFORI = '"+_AREMESSA[1]+"'"
		_CQUERY += " AND D1_SERIORI = '"+_AREMESSA[2]+"'"
		_CQUERY += " AND D1_ITEMORI = '"+_AREMESSA[3]+"'"
		_CQUERY += " AND SD1.D_E_L_E_T_ = '' "
		_CQUERY += " ORDER BY EMISSAO DESC , SD1.R_E_C_N_O_ DESC " 
	ENDIF
	_cQuery := changequery(_cQuery) 

	TCQUERY _CQUERY NEW ALIAS "TRBREM"

	IF TRBREM->(!EOF())
		AADD( _ARET, TRBREM->NOTA		   )
		AADD( _ARET, TRBREM->SERIE		   )
		AADD( _ARET, TRBREM->ITEM		   )
		AADD( _ARET, STOD(TRBREM->EMISSAO) )
	ENDIF

	TRBREM->(DBCLOSEAREA())

	RESTAREA( _AAREAOLD )
	
	aSize(_AAREAOLD,0)
	FwFreeArray(_AAREAOLD)

RETURN _ARET

/*/ LOCA00191
ITUP BUSINESS - TOTVS RENTAL
TYPE FUNCTION
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
R.A.T
/*/

FUNCTION LOCA00191()
PRIVATE COBRA := "001" 

	DBSELECTAREA("FP5")
	DBSETORDER(1)
	FP5->(DBCLEARFILTER())
	FP5->(DBSETFILTER({|| ALLTRIM(FP5->FP5_PROJET) == ALLTRIM(FP0->FP0_PROJET) .AND. ALLTRIM(FP5->FP5_OBRA) == ALLTRIM(COBRA) },"ALLTRIM(FP5->FP5_PROJET) == ALLTRIM(FP0->FP0_PROJET) .AND. ALLTRIM(FP5->FP5_OBRA) == ALLTRIM(COBRA) "))
	FP5->(DBGOTOP()) 

	IF !EMPTY(FP5->FP5_PROJET) 
		LOCA00192(2)	
	ELSE 
		
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0453}) //"Não existe RAT para este projeto."
	ENDIF

RETURN 

/*/ LOCA00192
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
VISUALIZAR VIA ORÇAMENTO
/*/

FUNCTION LOCA00192(NOPC)
LOCAL NSTYLE      := 0
LOCAL ASIZE       := MSADVSIZE()
LOCAL NPOS        := 0 
LOCAL ATEMP       := {}
LOCAL ACPOSNAO    := {"FP5_FILIAL","FP5_PROJET","FP5_OBRA","FP5_OBS","FP5_DTVIS",;
                      "FP5_DADOS ","FP5_GESTOR","FP5_RESPON","FP5_EMISSA","FP5_INLOCO",;
                      "FP5_PRAZO ","FP5_SEQTRA","FP5_VRSERV","FP5_OPER  ","FP5_COD   ",;
                      "FP5_SITUAC","FP5_DTREAL","FP5_REVISA","FP5_COMPLE","FP5_OBSOPE",;
                      "FP5_OBSEQU","FP5_OBSACE","FP5_OBSERV","FP5_CODCLI","FP5_LOJA","FP5_NOMCLI","FP5_PRIORI","FP5_TPPROJ","FP5_TPSERV"}
Local CNOMECLI
Local CCONTATO
Local CTELEFONE
Local CNUMERFAX
Local CCLIENTE
Local CLOCAL
Local CENDER
Local CBAIRR
Local CMUNIC
Local CESTAD
Local CTELE

PRIVATE AHEADER   := {}
PRIVATE ACOLS     := {}
PRIVATE CPRIORI   := ""
PRIVATE CTPROJ    := ""
PRIVATE CTSERV    := ""
PRIVATE NTPROJ    := 1
PRIVATE NTSERV    := 1
PRIVATE OPRIORI
PRIVATE OTPROJ
PRIVATE OTSERV
PRIVATE ATJTEMP   := {}
PRIVATE ATSERV    := {}
PRIVATE ATPROJ    := {}
PRIVATE CPROJETO  := FP0->FP0_PROJET
PRIVATE CCODRAT   := IIF(EMPTY(FP5->FP5_COD),GETSXENUM("FP5","FP5_COD"),FP5->FP5_COD)
PRIVATE CCODREV   := IIF(NOPC==6,IIF(EMPTY(FP5->FP5_REVISA),STRZERO(1,3),STRZERO(VAL(FP5->FP5_REVISA)+1,3)),FP5->FP5_REVISA)
PRIVATE CCOMPLE   := IIF(NOPC==8,IIF(EMPTY(FP5->FP5_COMPLE),STRZERO(1,3),STRZERO(VAL(FP5->FP5_COMPLE)+1,3)),FP5->FP5_COMPLE)

PRIVATE CHORA     := TIME()
PRIVATE CGESTOR   := CRIAVAR("A3_COD")
PRIVATE CRESPON   := CRIAVAR("FP5_RESPON")
PRIVATE DDATAVIS  := CTOD("  /  /  ") 			// FP5_DTVIS  - DATA DA VISTORIA
PRIVATE DPRAZO    := CTOD("  /  /  ") 			// FP5_PRAZO  - PRAZO PARA EXECUÇÃO DA VISTORIA
PRIVATE DREALIZA  := CTOD("  /  /  ") 			// FP5_DTREAL - DATA DA REALIZAÇÃO DA VISTORIA
PRIVATE DEMISSAO  := DDATABASE        			// EMISSAO DA VISTORIA
PRIVATE CINLOCO   := ""
PRIVATE AINLOCO   := {" ",STR0410,STR0454} //"S=SIM"###"N=NÃO"
PRIVATE AEMAIL    := {" ",STR0410,STR0411} //"S=SIM"###"N=NAO"
PRIVATE CEMAIL    := ""
PRIVATE CSITUA    := ""
PRIVATE ASITUA    := {" ",STR0455,STR0456,STR0457,STR0458,STR0459} //"V=VISTORIADO"###"N=NAO VISTORIADO"###"C=COMPLEMENTAR"###"R=REVISADO"###"X=CANCELADO"
PRIVATE CDESENH   := CRIAVAR("FP5_DESEN")
PRIVATE NVLRSERV  := CRIAVAR("FP5_VRSERV")
PRIVATE CCHAVE    := IIF(EMPTY(FP5->FP5_COD) , XFILIAL("FP5")+CPROJETO+COBRA+SPACE(6)+CCODREV+CCOMPLE , XFILIAL("FP5")+CPROJETO+COBRA+CCODRAT+CCODREV+CCOMPLE )

PRIVATE BCOND     := IIF(EMPTY(FP5->FP5_COD) , ; 
                     {|| XFILIAL("FP5") + FP5->FP5_PROJET + FP5->FP5_OBRA  + FP5->FP5_COD + FP5->FP5_REVISA + FP5->FP5_COMPLE == XFILIAL("FP5") + CPROJETO + COBRA + SPACE(6) + CCODREV + CCOMPLE } , ;
                     {|| XFILIAL("FP5") + FP5->FP5_PROJET + FP5->FP5_OBRA  + FP5->FP5_COD + FP5->FP5_REVISA + FP5->FP5_COMPLE == XFILIAL("FP5") + CPROJETO + COBRA + CCODRAT  + CCODREV + CCOMPLE }   )

PRIVATE NINDICE   := 1
PRIVATE LINCLUI	  := IIF(NOPC==3 , .T. , .F.)
PRIVATE LALTERA	  := IIF(NOPC==4 , .T. , .F.)
PRIVATE LEDITA	  := IIF(LINCLUI .OR. LALTERA , .T. , .F.) 
PRIVATE CTITULO   := STR0077 //"R.A.T"
PRIVATE COBSSERV  := ""     					// FP1_ESCOPO
PRIVATE COBS      := ""     					// FP5_OBS
PRIVATE COBSOPER  := ""     					// FP5_OBSOPE
PRIVATE COBSEQUIP := ""     					// FP5_OBSEQU
PRIVATE COBSACESS := ""     					// FP5_OBSACE
PRIVATE OBUTOBS
PRIVATE OBUTPRJ

PRIVATE ATELA[0][0] , AGETS[0]
PRIVATE OFONT1    := TFONT():NEW("ARIAL",08,14,,.T.,,,,.T.,.F.)
PRIVATE OGETZA8   := NIL
PRIVATE AGETZA8	  := {}

	REGTOMEMORY("FP5",.T.) 							// CABECALHO MEDICAO

	NSTYLE  := 0
	CCODCLI := FP0->FP0_CLI
	CLOJA   := FP0->FP0_LOJA    
					
	DBSELECTAREA("SA1")
	DBSETORDER(1)
	MSSEEK(XFILIAL("SA1")  + CCODCLI + CLOJA )

	CNOMECLI  := ALLTRIM(SA1->A1_NOME)
	CCONTATO  := ALLTRIM(SA1->A1_CONTATO)
	CTELEFONE := "("+ALLTRIM(SA1->A1_DDD)+") "+ALLTRIM(SA1->A1_TEL)
	CNUMERFAX := "("+ALLTRIM(SA1->A1_DDD)+") "+ALLTRIM(SA1->A1_FAX)
	CCLIENTE  := CCODCLI + "/" + CLOJA + "-" + CNOMECLI

	DBSELECTAREA("FP1")
	DBSETORDER(1)
	MSSEEK( XFILIAL("FP1") + CPROJETO + COBRA )
	CLOCAL   := FP1->FP1_NOMORI
	CENDER   := FP1->FP1_ENDORI
	CBAIRR   := FP1->FP1_BAIORI
	CMUNIC   := FP1->FP1_MUNORI
	CESTAD   := FP1->FP1_ESTORI
	CCONTATO := FP1->FP1_CONORI
	CTELE    := "("+ALLTRIM(FP1->FP1_DDDORI)+") "+ALLTRIM(FP1->FP1_TELORI)
	COBS     := FP1->FP1_ESCOPO
	DDATAVIS := FP1->FP1_DTVIS
	DPRAZO   := FP1->FP1_DTVIS
	COBSSERV := FP1->FP1_ESCOPO

	CGESTOR   := FP5->FP5_GESTOR
	CNOMEGE   := SA3->(POSICIONE("SA3",1,XFILIAL("SA3") + CGESTOR , "A3_NOME" ) )
	COBS      := FP5->FP5_OBS
	COBSOPER  := FP5->FP5_OBSOPE
	COBSEQUIP := FP5->FP5_OBSEQU
	COBSACESS := FP5->FP5_OBSACE
	CSITUA    := FP5->FP5_SITUAC
	DINCLUSA  := CTOD("//")

	(LOCXCONV(1))->(DBSETORDER(2))
	IF (LOCXCONV(1))->(DBSEEK("FP0_TIPOSE")) 					// SE EXISTIR O CAMPO
		IF     FP0->FP0_TIPOSE $ "G"
			CTSERV := STR0476 // "G=EQUIPAMENTOS"				
		ELSEIF FP0->FP0_TIPOSE $ "T"
			CTSERV := STR0477 // "T=TRANSPORTE"
		ELSE 
			CTSERV := STR0478 // "P=PLATAFORMA" 
		ENDIF
	ELSE
		CTSERV := STR0479 	// "T=TRANSPORTE;G=EQUIPAMENTOS"
	ENDIF

	ATJTEMP := SEPARA(CTSERV,";")    				// CONSTROI ARRAY DE ACORDO COM O COMBO DO CAMPO
	ATSERV  := ACLONE(ATJTEMP)           			// COPIA ARRAY PARA ARRAY STATIC
	NTSERV  := IIF( ALLTRIM(FP5->FP5_TPSERV) <> "",ASCAN(ATSERV,{|X| SUBSTR(X,1,1) == ALLTRIM(FP5->FP5_TPSERV) }) , ASCAN(ATSERV,{|X| SUBSTR(X,1,1) == ALLTRIM(FP0->FP0_TIPOSE) }) )

	(LOCXCONV(1))->(DBSETORDER(2))
	IF (LOCXCONV(1))->(DBSEEK("FP0_TPRAT"))       			// SE EXISTIR O CAMPO
		CTPROJ := ALLTRIM(GetSx3Cache(&(LOCXCONV(2)),"X3_CBOX")) 			// ARMAZENA COMBO DO CAMPO  
	ELSE                                 			// CASO CONTRARIO
		CTPROJ := STR0480 // "E=ENGENHARIA;P=PROJETOS"		// ARMAZENA SEGUNDO DOCUMENTAÇÃO
	ENDIF

	ATJTEMP := SEPARA(CTPROJ,";")    				// CONSTROI ARRAY DE ACORDO COM O COMBO DO CAMPO
	ATPROJ  := ACLONE(ATJTEMP)           			// COPIA ARRAY PARA ARRAY STATIC
	NTPROJ  := IIF(EMPTY(FP5->FP5_TPPROJ) , "" , FP5->FP5_TPPROJ) 
	CPRIORI := FP5->FP5_PRIORI
		
	CRESPON  := FP5->FP5_RESPON
	CINLOCO  := FP5->FP5_INLOCO
	DDATAVIS := FP5->FP5_DTVIS
	DPRAZO   := FP5->FP5_PRAZO
	DREALIZA := FP5->FP5_DTREAL
	DINCLUSA := FP5->FP5_EMISSA
	NVLRSERV := FP5->FP5_VRSERV
	IF !EMPTY(FP5->FP5_OBSERV)
		COBSSERV := FP5->FP5_OBSERV
	ENDIF
			
	//SET KEY VK_F11 TO TELAOBS()
	//SET KEY VK_F12 TO TELAPRJ()
		
	DEFINE MSDIALOG OTELA FROM 0, 0 TO ASIZE[6],ASIZE[5] TITLE CTITULO OF GETWNDDEFAULT() PIXEL 
		OPANEL := TPANEL():NEW(0, 0, "", OTELA,, .F., .F.,,,0,160, .F., .F. )
		OPANEL:ALIGN:= CONTROL_ALIGN_TOP
		
		OPANEL4 := TPANEL():NEW(0, 0, "",OTELA,, .F., .F.,,,0,120, .F., .F. )
		OPANEL4:ALIGN:= CONTROL_ALIGN_TOP
		
		@ 005 ,005 TO 070,500 OF OPANEL PIXEL 
		
		@ 010 ,010 SAY   OEMTOANSI(STR0481)            SIZE 100,8  OF OPANEL PIXEL  FONT OFONT1 // "Nro. Projeto"
		@ 010 ,060 MSGET OPROJETO  VAR CPROJETO  WHEN .F.      SIZE 170,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 010 ,245 SAY   OEMTOANSI(STR0482)                    SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Obra"
		@ 010 ,265 MSGET OOBRA     VAR COBRA     WHEN .F.      SIZE 040,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 010 ,310 SAY   OEMTOANSI(STR0483)                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Nro. RAT"
		@ 010 ,340 MSGET OCODRAT   VAR CCODRAT   WHEN .F.      SIZE 030,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 010 ,375 SAY   OEMTOANSI(STR0484)                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Revisão"
		@ 010 ,405 MSGET OCODREV   VAR CCODREV   WHEN .F.      SIZE 030,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 010 ,440 SAY   OEMTOANSI(STR0485)                    SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Comp"
		@ 010 ,465 MSGET OCOMPLE   VAR CCOMPLE   WHEN .F.      SIZE 030,8  OF OPANEL PIXEL  FONT OFONT1

		@ 025 ,010 SAY   OEMTOANSI(STR0486)                  SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Local"
		@ 025 ,060 MSGET OLOCAL    VAR CLOCAL    WHEN .F.      SIZE 130,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 025 ,200 SAY   OEMTOANSI(STR0487)                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Cliente"
		@ 025 ,230 MSGET OCLIENTE  VAR CCLIENTE  WHEN .F.      SIZE 265,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 040 ,010 SAY   OEMTOANSI(STR0488)               SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Endereço"
		@ 040 ,060 MSGET OENDER    VAR CENDER    WHEN .F.      SIZE 130,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 040 ,200 SAY   OEMTOANSI(STR0489)                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Bairro"
		@ 040 ,230 MSGET OBAIRR    VAR CBAIRR    WHEN .F.      SIZE 080,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 040 ,315 SAY   OEMTOANSI(STR0490)              SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Municipio"
		@ 040 ,350 MSGET OMUNIC    VAR CMUNIC    WHEN .F.      SIZE 060,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 040 ,410 SAY   OEMTOANSI(STR0491)                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Estado"
		@ 040 ,440 MSGET OESTAD    VAR CESTAD    WHEN .F.      SIZE 055,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 055 ,010 SAY   OEMTOANSI(STR0492)                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Contato"
		@ 055 ,060 MSGET OCONTATO  VAR CCONTATO  WHEN .F.      SIZE 130,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 055 ,200 SAY   OEMTOANSI(STR0493)                   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Fone"
		@ 055 ,230 MSGET OTELE     VAR CTELE     WHEN .F.      SIZE 080,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 080 ,010 SAY   OEMTOANSI(STR0494)                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Gestor"
		@ 080 ,070 MSGET OGESTOR   VAR CGESTOR   F3 "SA3"      SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
		@ 080 ,150 MSGET ONOMEGE   VAR CNOMEGE   WHEN .F.      SIZE 080,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 080 ,245 SAY   OEMTOANSI(STR0495)            SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Responsável"
		@ 080 ,290 MSGET ORESPON   VAR CRESPON   F3 "ENGRAT"   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 080 ,365 SAY   OEMTOANSI(STR0496)                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "IN LOCO"
		@ 080 ,395 COMBOBOX OINLOCO VAR CINLOCO  ITEMS AINLOCO SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 095 ,010 SAY   OEMTOANSI(STR0498)    SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Data Prog. Vistoria"
		@ 095 ,070 MSGET ODATAVIS  VAR DDATAVIS                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 095 ,150 SAY   OEMTOANSI(STR0499)               SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Situação"
		@ 095 ,200 COMBOBOX OSITUA VAR CSITUA    ITEMS ASITUA  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 095 ,270 SAY   OEMTOANSI(STR0500)           SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Envia E-mail"
		@ 095 ,320 COMBOBOX OEMAIL VAR CEMAIL    ITEMS AEMAIL  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 110 ,010 SAY   OEMTOANSI(STR0501 )     SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Prazo da vistoria"
		@ 110 ,070 MSGET OPRAZO    VAR DPRAZO                  SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 110 ,150 SAY   OEMTOANSI(STR0502)                   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Hora"
		@ 110 ,200 MSGET OHORA  VAR CHORA                      SIZE 040,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 110 ,260 SAY   OEMTOANSI(STR0503)             SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Prioridade"
		@ 110 ,310 MSGET OPRIORI  VAR CPRIORI    F3 "PRIRAT"   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 110 ,380 SAY   OEMTOANSI(STR0504)             SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "TP Projeto"
		@ 110 ,430 COMBOBOX OTPROJ VAR NTPROJ    ITEMS ATPROJ  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 125 ,010 SAY   OEMTOANSI(STR0505)     SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "DT Reali. Vistoria"
		@ 125 ,070 MSGET OREALIZA  VAR DREALIZA                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 125 ,150 SAY   OEMTOANSI(STR0506)                  SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "Valor"
		@ 125 ,200 MSGET OVLRSERV  VAR NVLRSERV PICTURE("@E 999,999,999.99")  SIZE 070,8  OF OPANEL PIXEL FONT OFONT1
		
		@ 125 ,280 SAY   OEMTOANSI(STR0507)             SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "TP Serviço"
		@ 125 ,330 COMBOBOX OTSERV VAR CTSERV    ITEMS ATSERV  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
		
		@ 140 ,010 SAY   OEMTOANSI(STR0508)        SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1 // "DT Inclusão RAT"
		@ 140 ,070 MSGET OINCLUSA  VAR DINCLUSA   WHEN .F.     SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1

		// --> MONTANDO AHEADER PARA GETDADOS
		ATEMP   := LOCA036("FP5",ACPOSNAO)
		AHEADER := ACLONE(ATEMP[1])

		// --> MONTANDO ACOLS  PARA GETDADOS
		ATEMP   := LOCA03601("FP5" , AHEADER , 4 , NINDICE , CCHAVE , BCOND) 
		ACOLS   := ACLONE(ATEMP[1]) 
		
		IF EMPTY(ACOLS)
			ACOLS0:={}
			FOR NPOS:=1 TO LEN(AHEADER)
				FP5->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
			NEXT NPOS 
			AADD(ACOLS0,.F.  )  					// DELETED
			AADD(ACOLS,ACOLS0)
		ENDIF
		
		ACOLS[1][1] := "001"
		
		OGETZA8 := MSNEWGETDADOS():NEW(10, 10, 100, 100, NSTYLE, "ALLWAYSTRUE", "ALLWAYSTRUE",'+FP5_ITEM' ,,,,, MAXGETDAD,, OPANEL4, AHEADER, ACOLS )
		OGETZA8:OBROWSE:ALIGN:= CONTROL_ALIGN_ALLCLIENT
	ACTIVATE MSDIALOG OTELA CENTERED ON INIT ENCHOICEBAR(OTELA ,{||IF(NOPC<>2,FSALVAR1(OTELA),.T.),OTELA:END()},{||ROLLBACKSX8(),OTELA:END() })
		
	SET KEY VK_F11 TO
		
	FP5->(DBSETFILTER({|| FP5_ITEM == "001" } , " FP5_ITEM == '001' "))

	aSize(ASIZE,0)
	FwFreeArray(ASIZE)

	aSize(ATEMP,0)
	FwFreeArray(ATEMP)

	aSize(ACPOSNAO,0)
	FwFreeArray(ACPOSNAO)
	
RETURN

/*/ LOCA00193
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
VERSION P12
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
FUNÇÃO PARA GATILHAR O NOME CORRETO DO CLIENTE
/*/

FUNCTION LOCA00193(CCAMPO)
LOCAL LRET := .T.

	IF CCAMPO == "FP0_CLINOM"
		M->FP0_CLINOM := POSICIONE("SA1" , 1 , XFILIAL("SA1")+M->FP0_CLI+M->FP0_LOJA , "A1_NREDUZ")
	ELSEIF CCAMPO == "FP1_CLIORI"
		CCLI := M->FP1_CLIORI
		CLOJ := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_LOJORI"})]
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCLI+CLOJ , "A1_NREDUZ") 
	ELSEIF CCAMPO == "FP1_LOJORI"
		CCLI := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CLIORI"})]
		CLOJ := M->FP1_LOJORI
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := POSICIONE("SA1" , 1 , XFILIAL('SA1')+CCLI+CLOJ , "A1_NREDUZ") 
	ENDIF

RETURN LRET


/*/ LOCA00194()
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00194()
Local cRet      := ""
Local aAreaXXX  := getarea() 
Local lValida   
Local lMvLocBac	:= SuperGetMv("MV_LOCBAC",.F.,.F.) //Integração com Módulo de Locações SIGALOC

	If !lMvLocBac
		lValida := !empty(FWX3Titulo( "TQY_STTCTR" ))
	
		TQY->(dbSetOrder(1))
		TQY->(dbSeek(xFilial("TQY")))

		While !TQY->(Eof()) .and. TQY->TQY_FILIAL == xFilial("TQY")
			If lValida
				If TQY->TQY_STTCTR <> '00' 
					TQY->(dbSkip())
					Loop
				EndIf
			EndIf
			CRET += TQY->TQY_STATUS + "*" 
			TQY->(dbSkip())
		EndDo
	else
		lValida := !empty(FWX3Titulo( "FQD_STAREN" ))
		FQD->(dbSetOrder(1))
		FQD->(dbSeek(xFilial("FQD")))

		While !FQD->(Eof()) .and. FQD->FQD_FILIAL == xFilial("FQD")
			If lValida
				If FQD->FQD_STAREN <> '00' 
					FQD->(dbSkip())
					Loop
				EndIf
			EndIf
			CRET += FQD->FQD_STATQY + "*" 
			FQD->(dbSkip())
		EndDo
	EndIF

	RestArea(aAreaXXX)
	
	aSize(aAreaXXX,0)
	FwFreeArray(aAreaXXX)
RETURN CRET

// FRANK ZWARG FUGA
// 31/08/2020 - CRIAÇÃO DE LINHAS NA ZAG PARA COMPOR OS ITENS DO PRODUTO ACABADO.
// O SISTEMA ESTA PREPARADO PARA ATÉ 4 NÍVEIS DE SUBGRUPOS NA ESTRUTURA DO PRODUTO, UM PA QUE TEM OUTRO PA ATÉ 4 NÍVEIS
// TRATAMENTO APENAS PARA LOCAÇÃO E CHAMADA VIA FPA_PRODUT
/*
AO DIGITAR UM PRODUTO ATRAVÉS DO VALID DO CAMPO FAREMOS AS SEGUINTES VERIFICAÇÕES:
1- SE O PRODUTO CONTÉM ESTRUTRA NA SG1 FAREMOS AS VALIDAÇÕES ABAIXO
2- SE O CAMPO FPA_SEQGRU ESTIVER VAZIO SIGNIFICA QUE A ESTRUTURA AINDA NÃO FOI EXPANDIDA PARA A ZAG,
   NESTE CASO CRIAREMOS AUTOMATICAMENTE OS ITENS FILHOS
3- SE O CAMPO FPA_SEQGRU ESTIVER PREENCHIDO FAREMOS A VERIFICAÇÃO DE TODOS OS ITENS FILHOS NA ZAG, SE FALTAR ALGUM
	PERGUNTAREMOS SE O USUÁRIO DESEJA INCLUÍ-LO, SE A ESTRUTURA SE ALTERNOR FICANDO COM ITENS A MENOS APENAS APRESENTAREMOS
	UMA MENSAGEM, MAS NÃO DELETAREMOS A LINHA DA ZAG. (ESTE ITEM NAO FOI ATENDIDO AINDA NESTE VERSAO)
4- AO DELETAR UMA LINHA DA ZAG QUE TENHA REFERÊNCIA A ITENS FILHOS, PERGUNTAREMOS SE O USUÁRIO DESEJA ELIMINAR TAMBÉM
	OS ITENS FILHOS (EM TODOS OS NIVEIS). ANTES DE DELETAR TUDO VERIFICAR SE JÁ EXISTE AS GERADA PARA ALGUM ITEM FILHO
	SE EXISTIR NÃO PERMITIR A EXCLUSÃO DOS ITENS FILHOS. DO CONTRÁRIO SERÁ UM PROCESSO MANUAL
5- AO ALTERAR UM ITEM PA, VERIFICAR SE EXISTE ITENS FILHOS, SE EXISTIR PERGUNTAR SE DESEJA ELIMINAR ELES
	SÓ PERMITIR ELIMINAR SE NENHUM DELES ESTIVER COM AS GERADA. DO CONTRÁRIO SERÁ UM PROCESSO MANUAL
6- AO TENTAR DELETAR UM ITEM FILHO, APRESENTAR UMA CONFIRMAÇÃO DO USUÁRIO.
7- SE UM ITEM JÁ TEVE ESTRUTURA E NÃO TEM MAIS, AO ALTERAR VERIFICAR SE DESEJA EXCLUIR OS ITENS FILHOS,
	LEVAR EM CONSIDERAÇÃO SE JÁ TEM AS APROVADA, SE TIVER NÃO PERMITIR A EXCLUSAO AUTOMATICA.
8- O CAMPO QUANTIDADE DEVE FICAR DISPONIVEL PARA EDICAO SOMENTE SE NÃO USAR O PARAMETRO MV_LOCX028
9- A QUANTIDADE SERÁ DIGITADA NA VALIDACAO DO PRODUTO
10- NA EXPLOSÃO DOS ITENS FILHOS TEMOS QUE VER SE O PRODUTO FILHO É UM ACESSORIO, SE FOR PODEMOS ESCOLHER ENTRE AGLUTINAR A QUANTIDADE EM UMA LINHA
	UNICA (SE FORMA MAIOR DO QUE 1 PELA ESTRUTURA E QUANTIDADE DIGITADA), OU DO CONTRÁRIO NÃO SENDO UM ACESSORIO, VAMOS TER QUE CRIAR VÁRIAS LINHAS NA ZAG
*/

/*/ LOCA00195
ITUP BUSINESS - TOTVS RENTAL
TYPE FUNCTION
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00195()
LOCAL AAREA 	:= GETAREA()
LOCAL _LRET 	:= .T.
LOCAL _AESTRUT	:= {}
LOCAL APERGS	:= {}
LOCAL ARET		:= {}
LOCAL NQUANTI 	:= ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
LOCAL CGRPAND
LOCAL CPRODUTO  := ALLTRIM(M->FPA_PRODUT)
LOCAL _NX
LOCAL CSEQ
LOCAL CAS
LOCAL _CESTRUT
LOCAL _LDEL
LOCAL _LFORCA 	:= .F.
LOCAL _NATORI   := ODLGPLA:NAT
Local _LOCA017 := EXISTBLOCK("LOCA017")
Local nFixa
Local CPRODOLD
Local _NITEM 

PRIVATE NESTRU  := 0 // UTILIZADO NA FUNCAO RECURSIVA PARA LOCALIZAR A ESTRUTURA DO PRODUTO.

	IF SUPERGETMV("MV_LOCX028",,.F.) // SE O SISTEMA TRABALHA COM O PROCESSO DE CRIAÇÃO DOS ITENS FILHOS.
		// TRATAMENTO PARA INCLUSÃO E ALTERAÇÃO SOMENTE NO LOCC001 - LOCAÇÃO.
		SG1->(DBSETORDER(1))
		IF SG1->(DBSEEK(XFILIAL("SG1")+CPRODUTO))
			//_AESTRUT := ITMONTA2()

			// QUANDO O PRODUTO TEM ESTRUTURA SOLICITAMOS A QUANTIDADE NESTA INTERFACE, E NÃO DISPONIBILIZAMOS A ALTERAÇÃO PELO CAMPO FPA_QUANT
			APERGS := {}
			AADD( APERGS ,{1,STR0510	, NQUANTI, PESQPICT( "FPA", "FPA_QUANT" )		,".T.",,".F.", 50, .F.}) // "QUANTIDADE: " //REMOVIDO A CONSULTA PADRÃO A PEDIDO DO RENAN
			ARET 	  := {}       
			_CTESDEMO := ""
			WHILE PARAMBOX(APERGS ,STR0511,ARET,,,,,,,,.F.) // "QUANTIDADE"
				IF LEN(ARET) == 0
					LOOP
				ENDIF         

				IF !EMPTY(ARET[1])
					NQUANTI := ARET[1]
				ENDIF 
				EXIT
			ENDDO

			//SIGALOC94-691 - Jose Eulalio - para evitar de duplicar mesmo clicando em cancelar
			If Len(ARET) > 0
				// CONTROLE PARA NÃO ALTERAR A QUANTIDADE DE ITENS FILHOS.
				IF !EMPTY(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) .and. EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})])
					IF NQUANTI <> ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]

						Help(Nil,	Nil,STR0512 +alltrim(upper(Procname())),; // "RENTAL: "
						Nil,STR0513 ,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
						{STR0514}) // "A quantidade de produtos que fazem parte da estrutura não podem sofrer alterações."
						
						NQUANTI := ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
					ENDIF
				ENDIF

				IF NQUANTI == 0
					Help(Nil,	Nil,STR0512 +alltrim(upper(Procname())),; // "RENTAL: "
						Nil,STR0513 ,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
						{STR0515}) // "A quantidade precisa ser maior do que zero."

					RESTAREA(AAREA)
					ODLGPLA:NAT := _NATORI 
					//FwFreeArray(AAREA) removido por questao do advpr
					RETURN .F.
				ELSE
					// SE A QUANTIDADE FOR MAIOR DO QUE 1, SÓ É VALIDO QUANDO FOR DO TIPO ACESSORIO.
					IF SBM->(FIELDPOS("BM_XACESS")) > 0
						CGRPAND := LOCA00189()
					ELSE
						CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
					ENDIF

					SB1->(DBSETORDER(1))
					SB1->(DBSEEK(XFILIAL("SB1")+CPRODUTO))
					IF ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND)
						IF NQUANTI > 1
							RESTAREA(AAREA)
							//FwFreeArray(AAREA)

							Help(Nil,	Nil,STR0512 +alltrim(upper(Procname())),; // "RENTAL: "
							Nil,STR0513 ,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
							{STR0516}) // "Este produto não aceita quantidade maior do que 1."
							ODLGPLA:NAT := _NATORI 
							RETURN .F.
						ENDIF
					ENDIF

					// SE FOR UM ITEM PAI, E POSSIBILITAR A QUANTIDADE MAIOR DO QUE 1 TEMOS QUE ESTORNAR OS ITENS FILHOS E EXPLODIR NOVAMENTE A ESTRTURA.
					_CESTRUT := ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3))
					_LDEL := .T.
					_NITEM := ODLGPLA:NAT
					IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == "" .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3)) <> "" .and. EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})])
						IF NQUANTI <> ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})] .AND. !EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})])
							IF MSGYESNO(STR0517,STR0463) //"PARA ALTERAR A QUANTIDADE FAZ-SE NECESSÁRIO DELETAR OS ITENS FILHOS, VOCÊ CONCORDA?"##"ATENÇÃO"
								// VERIFICAR SE OS ITENS PODEM SER EXCLUIDOS
								FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
									IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
										IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
											IF EMPTY( ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM"})])
												CAS := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})]
												IF !EMPTY(CAS)
													IF ALLTRIM(GETADVFVAL("FQ5", "FQ5_STATUS",XFILIAL("FQ5")+CAS,9,"")) <> "9"
														_LDEL := .F.
													ENDIF
												ENDIF
											ELSE
												_LDEL := .F.
											ENDIF
										ENDIF
									ENDIF
								NEXT
								IF _LDEL
									FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
										IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
											IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
												ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .T.
											ENDIF
										ENDIF
									NEXT
									_LFORCA := .T.
									
									ODLGPLA:NAT := _NITEM
									ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := ""
									ODLGPLA:REFRESH()

								ELSE
									ODLGPLA:NAT := _NATORI 
									RETURN .F.
								ENDIF

							ENDIF
						ENDIF
					ENDIF	
					
				ENDIF
				ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})] := NQUANTI

				// QUANDO O RETORNO DO SUBSTRING ABAIXO É BRANCO, SIGNIFICA QUE A ESTRUTURA AINDA NÃO FOI EXPLODIDA NA ZAG
				// NESTE CASO VAMOS CRIAR AS LINHAS NA ZAG COM BASE NA EXPLOSÃO DA ESTRUTURA DA SG1.
				IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == "" .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3)) == "" 
					_AESTRUT := ITMONTA2(CPRODUTO, NQUANTI)
					NFIXA := ODLGPLA:NAT
					CPRODOLD := M->FPA_PRODUT
					_NITEM := ODLGPLA:NAT
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
					CSEQ := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
					FOR _NX := 1 TO LEN(_AESTRUT)
						ODLGPLA:ADDLINE(.T.)
						ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})] := _AESTRUT[_NX][1]
						ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]	:= _AESTRUT[_NX][2]
						ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]	:= ODLGPLA:ACOLS[NFIXA][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
						ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := CSEQ + "." + STRZERO(_NX,3,0)
						ODLGPLA:REFRESH()
						ODLGPLA:OBROWSE:REFRESH()
					NEXT

					M->FPA_PRODUT := CPRODOLD
					ODLGPLA:NAT   := NFIXA
					
					ACOLS := ODLGPLA:ACOLS
					ODLGPLA:REFRESH()
					ODLGPLA:OBROWSE:REFRESH()
					
					
					IF NFIXA+1 <= LEN(ODLGPLA:ACOLS)
						FOR _NX:=(NFIXA+1) TO LEN(ODLGPLA:ACOLS)
							ODLGPLA:NAT := _NX
							RUNTRIGGER(2,_NX,NIL,,"FPA_PRODUT")
							//RUNTRIGGER(2,_NX,NIL,,"FPA_CODTAB") 
							LOCA00141(.T.)

							// TRATAMENTO PARA AUTOMATIZAR ALGUNS CAMPOS
							IF _LOCA017 //EXISTBLOCK("LOCA017") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CORES DA LEGENDA
								EXECBLOCK("LOCA017" , .T. , .T. , {ODLGPLA, _NX }) 
							ENDIF						

						NEXT
					ENDIF

					IF _LFORCA
						ODLGPLA:ADDLINE(.T.)
						ODLGPLA:REFRESH()
						ODLGPLA:OBROWSE:REFRESH()
					ENDIF

					ODLGPLA:NAT := NFIXA

					M->FPA_PRODUT := CPRODOLD
				ENDIF
			ENDIF


		ELSE
			// VERIFICAR SE O CAMPO FPA_SEQEST ESTA PREENCHIDO, SE ESTIVER SIGNIFICA QUE JÁ HOUVE UMA ESTRUTURA
			// CADASTRADA NA SG1 NO PASSADO, NESTE CASO TEMOS QUE PERGUNTAR SE O USUÁRIO DESEJA EXCLUIR A MESMA,
			// ISTO NO CASO DE NÃO HAVER AS NOS ITENS FILHOS JÁ APROVADAS.
			IF !EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
			ELSE
				//ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
			ENDIF
		ENDIF
	ENDIF
	RESTAREA(AAREA)
	ODLGPLA:NAT := _NATORI 

	ODLGPLA:REFRESH()
	ODLGPLA:OBROWSE:REFRESH()

	aSize(AAREA,0)
	FwFreeArray(AAREA)

	aSize(_AESTRUT,0)
	FwFreeArray(_AESTRUT)

	aSize(APERGS,0)
	FwFreeArray(APERGS)

	aSize(ARET,0)
	FwFreeArray(ARET)

RETURN _LRET

/*/ ITMONTA2
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
MONTAGEM DA ESTRUTURA DOS PRODUTOS
/*/

STATIC FUNCTION ITMONTA2(CPRODUTO, NQUANT)
Local _ATEMP 		:= {}
Local _ARESULTADO	:= {}
Local _AAREA 		:= GETAREA()
Local AAREASB1		:= SB1->(GETAREA())
Local AAREASG1		:= SG1->(GETAREA())
Local CNOMEARQ   	:= ''
Local OTEMPTABLE 	:= NIL
Local _NX
Local _NY
Local _NZ
Local _NP
Local _ATEMP1 		:= {}
Local _NCONTA
Local _LENCONTROU

PRIVATE NESTRU   	:= 0

	_ATEMP := {}

	SB1->(DBSETORDER(1))	
	SB1->(DBSEEK(XFILIAL("SB1")+CPRODUTO))
	CPRODUTO := SB1->B1_COD

	CNOMEARQ := ESTRUT2(SB1->B1_COD,NQUANT,,@OTEMPTABLE,.T.)

	ESTRUT->(DBGOTOP())

	WHILE !ESTRUT->(EOF())
		// O ULTIMO PARAMETRO É PARA INDICAR A ORDEM DE APRESENTACAO
		AADD(_ATEMP,{ESTRUT->NIVEL, ESTRUT->CODIGO, ESTRUT->COMP, ESTRUT->QUANT, ESTRUT->TRT, ESTRUT->GROPC, ESTRUT->OPC, "", ""})
		ESTRUT->(DBSKIP())
	ENDDO

	FIMESTRUT2(NIL,OTEMPTABLE)

	// SE O NIVEL FOR 1 PEGAR O _ATEMP == CPRODUTO
	FOR _NX := 1 TO LEN(_ATEMP)
		IF ALLTRIM(_ATEMP[_NX][2]) == ALLTRIM(CPRODUTO)
			// NIVEL 1 DA ESTRUTURA
			//              CÓDIGO DO PRODUTO, QUANTIDADE
			AADD(_ARESULTADO,{_ATEMP[_NX][03],_ATEMP[_NX][04],1,_ATEMP[_NX][01],_ATEMP[_NX][02]})

		ENDIF
	NEXT

	_NCONTA := 1
	// SE O NIVEL FOR > 1 PEGAR A COMPARACAO COM O NIVEL ANTERIOR
	FOR _NX := 1 TO 100 // TRATAMENTO DE ATÉ 1000 NÍVEIS DE ESTRUTURA.
		_NCONTA ++
		_ATEMP1 := _ARESULTADO
		FOR _NY := 1 TO LEN(_ATEMP1)
			FOR _NZ := 1 TO LEN(_ATEMP)
				IF ALLTRIM(_ATEMP1[_NY][01]) == ALLTRIM(_ATEMP[_NZ][02])
					// NIVEL 2 DA ESTRUTURA
					_LENCONTROU := .F.
					FOR _NP := 1 TO LEN(_ARESULTADO)
						IF _ARESULTADO[_NP][01] == _ATEMP[_NZ][03] .AND. _ARESULTADO[_NP][02] == _ATEMP[_NZ][04]
							_LENCONTROU := .T.
						ENDIF
					NEXT
					IF !_LENCONTROU
						AADD(_ARESULTADO,{_ATEMP[_NZ][03],_ATEMP[_NZ][04], _NCONTA, _ATEMP[_NZ][01],_ATEMP[_NZ][02]})
					ENDIF
				ENDIF
			NEXT
		NEXT
	NEXT

	// TRATAMENTO PARA AGLUTINAR AS QUANTIDADES
	// QUANDO FOR MAIOR DO QUE 1 TEMOS QUE LEVAR EM CONSIDERAÇÃO SE O PRODUTO PERTENCE A UM GRUPO QUE ACEITA QUANTIDADE > 1
	_ATEMP 			:= _ARESULTADO
	_ARESULTADO 	:= {}

	// SE NÃO ACEITAR QUANTIDADES MAIORES DO QUE 1, OU SEJA, SE NÃO PERMITIR PRODUTOS AGLUTINADOS NA LINHA DA ZAG
	// SEPARAREMOS TODOS OS ITENS QUE ESTÃO COM QUANTIDADE MAIOR DO QUE 1 EM LINHAS DISTINTAS.
	IF SUPERGETMV("MV_LOCX006",,"S") == "N" 
		// AQUI VAMOS SEPARAR TODOS OS ITENS COM QUANTIDADE MAIOR DO QUE 1 E CRIAR AS LINHAS COM QTD 1.
		FOR _NX := 1 TO LEN(_ATEMP)
			IF _ATEMP[_NX][02] == 1
				AADD(_ARESULTADO,{_ATEMP[_NX][01],_ATEMP[_NX][02],_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
			ELSE
				FOR _NY := 1 TO _ATEMP[_NX][02]
					AADD(_ARESULTADO,{_ATEMP[_NX][01],1,_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
				NEXT
			ENDIF
		NEXT
	ELSE
		// SE FOR AGLUTINAR, TEMOS QUE VERIFICAR QUAIS PRODUTOS ACEITAM QUANTIDADE MAIOR DO QUE 1, DOS QUE NÃO ACEITAREM
		// TEMOS QUE CRIAR VÁRIAS LINHAS DE 1 NA QUANTIDADE.
		// SE A QUANTIDADE FOR > 0

		// VER QUAIS OS GRUPOS DE PRODUTOS QUE ACEITAM QTD > 0
		IF SBM->(FIELDPOS("BM_XACESS")) > 0
			CGRPAND := LOCA00189()
		ELSE
			CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
		ENDIF

		FOR _NX := 1 TO LEN(_ATEMP)
			IF _ATEMP[_NX][02] == 1
				AADD(_ARESULTADO,{_ATEMP[_NX][01],_ATEMP[_NX][02],_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
			ELSE
				SB1->(DBSETORDER(1))
				SB1->(DBSEEK(XFILIAL("SB1")+ALLTRIM(_ATEMP[_NX][01])))
				IF ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND)
					// SEPARAR POR LINHAS COM 1 NA QTD.
					FOR _NY := 1 TO _ATEMP[_NX][02]
						AADD(_ARESULTADO,{_ATEMP[_NX][01],1,_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
					NEXT
				ELSE
					AADD(_ARESULTADO,{_ATEMP[_NX][01],_ATEMP[_NX][02],_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
				ENDIF
			ENDIF
		NEXT
	ENDIF

	SG1->(RESTAREA(AAREASG1))
	SB1->(RESTAREA(AAREASB1))

	RESTAREA(_AAREA)
	
	aSize(_AAREA,0)
	aSize(AAREASG1,0)
	aSize(AAREASB1,0)

	FwFreeArray(_AAREA)
	FwFreeArray(AAREASG1)
	FwFreeArray(AAREASB1)

	aSize(_ATEMP,0)
	FwFreeArray(_ATEMP)

RETURN _ARESULTADO


/*/ LOCA00196
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
X3_WHEN DO CAMPO FPA_QUANT
/*/

FUNCTION LOCA00196()
LOCAL CGRPAND
LOCAL CPRODUTO 	
LOCAL _AAREA 	:= GETAREA()
LOCAL _LRET		:= .T.

	CPRODUTO := ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]

	IF SBM->(FIELDPOS("BM_XACESS")) > 0
		CGRPAND := LOCA00189()
	ELSE
		CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
	ENDIF

	SB1->(DBSETORDER(1))
	IF !SB1->(DBSEEK(XFILIAL("SB1")+CPRODUTO))
		IF M->FPA_QUANT > 1
			_LRET := .F.
		ENDIF
	ELSE
		IF ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND)
			IF M->FPA_QUANT > 1
				_LRET := .F.
			ENDIF
		ELSE	
			_LRET := .T.
		ENDIF
	ENDIF

	IF !_LRET
		Help(Nil,	Nil,STR0512 +alltrim(upper(Procname())),; // "RENTAL: "
							Nil,STR0513 ,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
							{STR0518}) // "A quantidade não pode ser superior a 1."
	ENDIF

	RESTAREA(_AAREA)

	aSize(_AAREA,0)
	FwFreeArray(_AAREA)

RETURN _LRET

/*/ LOCA00197
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
VALIDA SE PODE ALTERAR O CONTEÚDO DO CAMPO FPA_QUANT
/*/

FUNCTION LOCA00197()
LOCAL _LRET 	:= .T.
LOCAL CPRODUTO 	:= ALLTRIM(ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})])
LOCAL NQUANTI 	:= ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
LOCAL AAREA 	:= GETAREA()

	IF SUPERGETMV("MV_LOCX028",,.F.) .AND. SUPERGETMV("MV_LOCX030",,.F.) // SE O SISTEMA TRABALHA COM O PROCESSO DE CRIAÇÃO DOS ITENS FILHOS.
		SG1->(DBSETORDER(1))
		IF SG1->(DBSEEK(XFILIAL("SG1")+CPRODUTO))
			IF M->FPA_QUANT <> NQUANTI
				Help(Nil,	Nil,STR0512 +alltrim(upper(Procname())),; // "RENTAL: "
							Nil,STR0513 ,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
							{STR0519}) // "Este produto tem estrutura definida, portanto somente via edição do código do produto é possível digitar a quantidade."
				_LRET := .F.
			ENDIF
		ENDIF	
	ENDIF

	RESTAREA(AAREA)

	aSize(AAREA,0)
	FwFreeArray(AAREA)
RETURN _LRET

/*/ LOCA00198
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
TRATAMENTO NA DELEÇÃO DE UMA LINHA NA ZAG PARA DELETAR AUTOMATICAMENTE OS ITENS FILHOS.
/*/

FUNCTION LOCA00198()
LOCAL _NX
LOCAL _NITEM 	:= ODLGPLA:NAT
LOCAL _CESTRUT 
LOCAL _LDEL  	:= .T.
LOCAL CPRODUTO 	:= ALLTRIM(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})])
LOCAL CAS
LOCAL _LRET := .T.

	IF SUPERGETMV("MV_LOCX028",,.F.) .AND. SUPERGETMV("MV_LOCX030",,.F.)// SE O SISTEMA TRABALHA COM O PROCESSO DE CRIAÇÃO DOS ITENS FILHOS.

		IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
			IF !MSGYESNO(STR0520,STR0521) // "ESTE ITEM REFERE-SE A UM ITEM FILHO DA ESTRUTURA DE PRODUTOS."##"CONFIRMA A EXCLUSÃO?"
				RETURN  .F.
			ENDIF
		ENDIF

		SG1->(DBSETORDER(1))
		IF SG1->(DBSEEK(XFILIAL("SG1")+CPRODUTO))
			// VERIFICAR SE É O ITEM PAI.
			_CESTRUT := ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3))
			IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == "" .AND. !EMPTY(_CESTRUT)
				IF MSGYESNO(STR0522,STR0523) // "ESTE ITEM É FORMADOR DE ESTRTURA DE PRODUTOS, DESEJA EXCLUIR TODOS OS ITENS FILHOS?"##"ATENÇÃO!"
					// VERIFICAR SE A LINHA DO ITEM FILHO PODE SER DELETADA			
					FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
						IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
							IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
								IF EMPTY( ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM"})])
									CAS := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})]
									IF !EMPTY(CAS)
										IF ALLTRIM(GETADVFVAL("FQ5", "FQ5_STATUS",XFILIAL("FQ5")+CAS,9,"")) <> "9"
											_LDEL := .F.
										ENDIF
									ENDIF
								ELSE
									_LDEL := .F.
								ENDIF
							ENDIF
						ENDIF
					NEXT
					IF _LDEL
						FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
							IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
								IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
									ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .T.
								ENDIF
							ENDIF
						NEXT
						ODLGPLA:REFRESH()
						ODLGPLA:NAT := _NITEM
					ELSE
						Help(Nil,	Nil,STR0512 +alltrim(upper(Procname())),; // "RENTAL: "
							Nil,STR0513,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
							{STR0524}) // "Os itens filhos precisa ser excluídos manualmente, pois nem todos estão na situação de exclusão."

						IF !MSGYESNO(STR0525,STR0526) // "DESEJA EXCLUIR MESMO ASSIM O ITEM PAI?"##"EXCLUSÃO MANUAL DOS ITENS FILHOS."
							_LRET := .F.
						ENDIF
					ENDIF
				ENDIF

			ENDIF	
		ENDIF
	ENDIF
RETURN _LRET


/*/ ITRETO
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
NOTAS FISCAIS DE RETORNO
/*/

FUNCTION LOCA00199()
Local CALIAS 	:= "FQZ"
Local CCHAVE
Local CCONDICAO
Local _AAREA	:= GETAREA()
Local ODLG
Local NSTYLE	:= 2
Local _NENVIO	:= 0
Local _NRETORNO	:= 0
Local _NSALDO
Local _NNOTAS  	:= 0
Local _NX
Local _CTEMP
Local CSQL
Local _LOK 		:= .F.
Local _CFILX 
Local _CDOCX 
Local _CSERI
Local _CFORN
Local _LOJAX
Local _CITEM
Local _DDATA
Local _lPassa		:= .F.
Local ABUTTONS 		:= {}
Local cProd
Local NLIN1X  		:= 0
Local NCOL1X  		:= 0
Local NLIN2X  		:= 0
Local NCOL2X  		:= 0
Local NDIASTRB

Private ODLGX
Private oxVerde  	:= LoadBitmap( GetResources(), "BR_VERDE")
Private oxVermelho	:= LoadBitmap( GetResources(), "BR_VERMELHO")

	AADD(ABUTTONS , {"ANALITIC",{|| LEGFQZ() },STR0003,STR0003}) //"Legenda"

	IF FP0->FP0_TIPOSE == "L"
		CCHAVE    := XFILIAL(CALIAS)+FP0->FP0_PROJET
		CCONDICAO := 'FQZ_FILIAL+FQZ_PROJET=="'+CCHAVE+'"'
		NINDICE   := 2 					
		CFILTRO   := CCONDICAO //+ ".AND. FQZ_MSBLQL == '2' "
		AHEADER   := FHEADER(CALIAS,,,.T.)
		
		FOR _NX := 1 TO LEN(AHEADER)
			IF AHEADER[_NX][02] == "FQZ_RETIRA"
				AHEADER[_NX][14] := "A"	
			ELSE
				AHEADER[_NX][14] := "V"	
			ENDIF
		NEXT

		ACOLS := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

		FOR _NX := 1 TO LEN(ACOLS)
			If !empty(ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_COD"})])
				_lPassa := .T.
			EndIf
			
			If !empty(ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DTCANC"})])
				aCols[_nX][01] := oxVermelho
			Else
				aCols[_nX][01] := oxVerde
			EndIF
			SB1->(DBSETORDER(1))
			SB1->(DBSEEK(XFILIAL("SB1")+ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_COD"})]))
			_CTEMP := SB1->B1_DESC
			ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DESC"})] := _CTEMP

			// 10/10/2022 - JOSE EULALIO - SIGALOC94-512 - Ao acessar as notas de retorno dos contratos o sistema não traz o nome do cliente corretamente.
			// 10/10/2022 - Lui orientou que a regra a baixo está incorreta, sempre deverá retornar CLIENTE numa nota de RETORNO
			SA1->(DBSETORDER(1))
			SA1->(DBSEEK(XFILIAL("SA1")+ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_FORNE"})]+ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_LOJA"})]))
			_CTEMP := SA1->A1_NOME
			ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_NOME"})] := _CTEMP

			_NRETORNO := ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_QTD"})]
		NEXT

		If !_lPassa
			MsgAlert(STR0552,STR0295) //"Não há notas de retorno a serem exibidas."###"Atenção!"
			Return
		EndIF
		_NNOTAS := LEN(ACOLS)

		// ENCONTRAR A QUANTIDADE DE ITENS ENVIADOS SC6.
		IF SELECT("TRB") > 0 
			TRB->(DBCLOSEAREA()) 
		ENDIF 
		CSQL := " SELECT C6_QTDVEN AS TOT "
		CSQL += " FROM "+RETSQLNAME("SC6") + " SC6 "
		CSQL += " WHERE  SC6.C6_FILIAL = '"+FPA->FPA_FILREM+"' "
		CSQL +=   " AND  SC6.C6_NOTA ='"+FPA->FPA_NFREM+"' "
		CSQL += " AND SC6.C6_SERIE ='"+FPA->FPA_SERREM+"' "
		CSQL += " AND SC6.C6_ITEM = '"+FPA->FPA_ITEREM+"' "
		CSQL +=   " AND  SC6.D_E_L_E_T_ =  '' "
		CSQL := CHANGEQUERY(CSQL) 
		DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CSQL) , "TRB" , .F. , .T.) 
		_NENVIO := TRB->TOT
		TRB->(DBCLOSEAREA()) 

		NLIN1X  := 0
		NCOL1X  := 0
		NLIN2X  := 0
		NCOL2X  := 0
		DEFINE MSDIALOG ODLG FROM 0,0 TO 400,800 TITLE OEMTOANSI(STR0527 +FP0->FP0_PROJET) OF OMAINWND PIXEL // "NOTAS DE RETORNO. CONTRATO: "
		ODLGX := MSNEWGETDADOS():NEW(33,3,150,400 ,NSTYLE,,,"",,,,,,.T.,ODLG,AHEADER,ACOLS)
		ODLGX:OBROWSE:BCHANGE := {|| MUDAFQZ()} 

		@ 160,002 SAY STR0528 SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE // "Produto:"
		@ 159,035 MSGET oxprod var FPA->FPA_PRODUT PICTURE "@!" WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
		//GET O2DESC     VAR C2DESC
		cProd := POSICIONE("SB1",1,XFILIAL("SB1")+FPA->FPA_PRODUT,"B1_DESC")
		@ 159,090 MSGET oxb1desc var cProd PICTURE "@!" WHEN .F. SIZE 150,8 OF ODLG PIXEL COLOR CLR_BLUE 
		@ 171,002 SAY STR0529 SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE // "Quantidade:"
		@ 170,035 MSGET oxquant var FPA->FPA_QUANT PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
		@ 171,090 SAY STR0530 SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE // "Enviados:"
		@ 170,123 MSGET oxenvi var _NENVIO PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
		@ 171,177 SAY STR0531 SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE // "Retornados:"
		@ 170,215 MSGET oxret var _NRETORNO PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
		@ 171,270 SAY STR0532 SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE // "Saldo:"
		_NSALDO := _NENVIO - _NRETORNO
		@ 170,303 MSGET oxsaldo var _NSALDO PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
		@ 182,002 SAY STR0533 SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE // "Notas:"
		@ 181,035 MSGET oxnotas var _NNOTAS PICTURE "9999" WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 

		ACTIVATE MSDIALOG ODLG CENTERED ON INIT ENCHOICEBAR(ODLG , {|| IF(VALPROX(ODLGX,AHEADER),(_LOK:=.T., ODLG:END()),.F.) } , {|| ODLG:END()} , , ABUTTONS) 

		IF _LOK
			FOR _NX := 1 TO LEN(ODLGX:ACOLS)
				IF !ODLGX:ACOLS[_NX][LEN(AHEADER)+1]
					_CFILX := XFILIAL("FQZ")
					_CDOCX := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DOC"})]
					_CSERI := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_SERIE"})]
					_CFORN := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_FORNE"})]
					_LOJAX := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_LOJA"})]
					_CITEM := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_ITEM"})]
					_DDATA := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})]
					FQZ->(DBSETORDER(1))
					IF FQZ->(DBSEEK(_CFILX+_CDOCX+_CSERI+_CFORN+_LOJAX+_CITEM))
						FQZ->(RECLOCK("FQZ",.F.))
						FQZ->FQZ_RETIRA := _DDATA

						If !empty(FQZ->FQZ_ULTFAT)
							FQZ->FQZ_PERPRO := (FQZ->FQZ_RETIRA - FQZ->FQZ_ULTFAT) 
						Else
							FQZ->FQZ_PERPRO := (FQZ->FQZ_RETIRA - FQZ->FQZ_DTINI) + 1
						EndIf

						FPA->(DBSETORDER(3))
						FPA->(DBSEEK(XFILIAL("FPA")+FQZ->FQZ_AS))

						//FQZ->FQZ_VLRPRO := (FQZ->FQZ_VLRTOT * FQZ->FQZ_PERPRO) / IF(FPA->FPA_LOCDIA==0,1,FPA->FPA_LOCDIA)
						// alterado por frank em 26/07/22
						FP1->(dbSetOrder(1))
						FP1->(dbSeek(xFilial("FP1")+FPA->FPA_PROJET+FPA->FPA_OBRA))
						IF FP1->FP1_TPMES <> "0" // não é mes fechado
							FQZ->FQZ_VLRPRO := (FQZ->FQZ_VLRTOT * FQZ->FQZ_PERPRO) / If(FPA->FPA_LOCDIA==0,1,FPA->FPA_LOCDIA)
						Else // se for mes fechado
							NDIASTRB := 30
							DO CASE
								CASE FPA->FPA_TPBASE == "M"
									NDIASTRB := 30
								CASE FPA->FPA_TPBASE == "Q"
									NDIASTRB := 15
								CASE FPA->FPA_TPBASE == "S"
									NDIASTRB :=  7
								OTHERWISE
									DO CASE
									CASE FPA->( FIELDPOS("FPA_LOCDIA") ) > 0 
										NDIASTRB := FPA->FPA_LOCDIA 
									CASE FPA->( FIELDPOS("FPA_PREDIA") ) > 0 
										NDIASTRB := FPA->FPA_PREDIA 
									OTHERWISE
										NDIASTRB := FPA->FPA_DTENRE - FPA->FPA_DTINI + 1 
									ENDCASE
							ENDCASE
							FQZ->FQZ_VLRPRO := (FQZ->FQZ_VLRTOT * FQZ->FQZ_PERPRO) / NDIASTRB
						EndIf
						FQZ->(MSUNLOCK())
					ENDIF
				ENDIF
			NEXT
		ENDIF

		RESTAREA(_AAREA)

		aSize(_AAREA,0)
		FwFreeArray(_AAREA)

	ELSE
		Help(Nil,	Nil,STR0512 +alltrim(upper(Procname())),; // "RENTAL: "
		Nil,STR0513 ,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
		{STR0534}) // "Rotina exclusiva para contratos de locação."
	ENDIF

	aSize(ABUTTONS,0)
	FwFreeArray(ABUTTONS)

RETURN

// Funcao ao mudar as linhas da FQZ - notas de retorno parcial
Static Function MUDAFQZ
Local _aArea 	:= GetArea()
Local _cAs   	:= ODLGX:ACOLS[ODLGX:NAT][ASCAN(ODLGX:AHEADER,{|X|ALLTRIM(X[2])=="FQZ_AS"})]
Local CSQL
Local _NENVIO	:= 0
Local _NRETORNO	:= 0
Local _NSALDO	:= 0

	FPA->(dbSetOrder(3))
	FPA->(dbSeek(xFilial("FPA")+_cAs))

	// ENCONTRAR A QUANTIDADE DE ITENS ENVIADOS SC6.
	IF SELECT("TRB") > 0 
		TRB->(DBCLOSEAREA()) 
	ENDIF 
	CSQL := " SELECT C6_QTDVEN AS TOT "
	CSQL += " FROM "+RETSQLNAME("SC6") + " SC6 "
	CSQL += " WHERE  SC6.C6_FILIAL = '"+FPA->FPA_FILREM+"' "
	CSQL +=   " AND  SC6.C6_NOTA ='"+FPA->FPA_NFREM+"' "
	CSQL += " AND SC6.C6_SERIE ='"+FPA->FPA_SERREM+"' "
	CSQL += " AND SC6.C6_ITEM = '"+FPA->FPA_ITEREM+"' "
	CSQL +=   " AND  SC6.D_E_L_E_T_ =  '' "
	CSQL := CHANGEQUERY(CSQL) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CSQL) , "TRB" , .F. , .T.) 
	_NENVIO := TRB->TOT
	oxenvi:ctext := _NENVIO
	TRB->(DBCLOSEAREA()) 

	_NRETORNO := ODLGX:ACOLS[ODLGX:NAT][ASCAN(ODLGX:AHEADER,{|X|ALLTRIM(X[2])=="FQZ_QTD"})]
	oxret:ctext := _NRETORNO

	_NSALDO := _NENVIO - _NRETORNO
	oxsaldo:ctext := _NSALDO

	oxprod:refresh()
	oxb1desc:refresh()
	oxquant:refresh()
	oxenvi:refresh()
	oxret:refresh()
	oxsaldo:refresh()
	oxnotas:refresh()

	RestArea(_aArea)
	
	aSize(_aArea,0)
	FwFreeArray(_aArea)
Return

/*/ VALPROX
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
VALIDACAO DO PERIODO DA SOLICITACAO DE DEVOLUCAO PARCIAL
/*/

STATIC FUNCTION VALPROX(ODLGX,AHEADER)
LOCAL _LRET := .T.
LOCAL _NX

	FOR _NX:=1 TO LEN(ODLGX:ACOLS)
		IF !ODLGX:ACOLS[_NX][LEN(AHEADER)+1]
			IF EMPTY(ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_ULTFAT"})])
				IF ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})] < ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DTINI"})]
					_LRET := .F.
					Help(Nil,	Nil,STR0512+alltrim(upper(Procname())),; // "RENTAL: "
					Nil,STR0513,1,0,Nil,Nil,Nil,Nil,Nil,; // "Inconsistência nos dados."
					{STR0535+ALLTRIM(ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DOC"})])+STR0536}) // "A data da solicitação de retirada da nota: "##" é inválida. Data da retirada < do que a data inicial do contrato."
				ENDIF
			ELSE
				IF ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})] < ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_ULTFAT"})]
					_LRET := .F.
					Help(Nil,	Nil,STR0512+alltrim(upper(Procname())),; //"RENTAL: "
					Nil,STR0513,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
					{STR0537+ALLTRIM(ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DOC"})])+STR0538}) //"A data da solicitação de retirada da nota: "##" é inválida. A data da retirada é < do que a data do último faturamento."
				ENDIF
			ENDIF
		ENDIF
	NEXT

RETURN _LRET


/*/ ITDELZA1
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION ITDELZA1
LOCAL _NX
LOCAL _COBRA := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
	IF !ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
		FOR _NX := 1 TO LEN(OPLA_COLS)
			IF OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})] == _COBRA
				OPLA_COLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .T.
			ENDIF
		NEXT
		FOR _NX := 1 TO LEN(ORES_COLS)
			IF ORES_COLS[_NX][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] == _COBRA
				ORES_COLS[_NX][LEN(ODLGRES:AHEADER)+1] := .T.
			ENDIF
		NEXT
	ELSE
		FOR _NX := 1 TO LEN(OPLA_COLS)
			IF OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})] == _COBRA
				OPLA_COLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .F.
			ENDIF
		NEXT
		FOR _NX := 1 TO LEN(ORES_COLS)
			IF ORES_COLS[_NX][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] == _COBRA
				ORES_COLS[_NX][LEN(ODLGRES:AHEADER)+1] := .F.
			ENDIF
		NEXT
	ENDIF
RETURN .T.

/*/ ITESTX
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION ITESTX
Local _LRET 	:= .T.
Local _AAREA 	:= GETAREA()
Local _CPRODUTO
Local _CPATRI
Local _CTIPOSE
Local _NQUANT
Local _NSALDO
Local _CMENS	:= ""
Local _NX
Local _CLOCAL
Local LVLDEST   := SUPERGETMV("MV_LOCX282", .F., .T.)

	If valtype(ODLGPLA) <> "O" .Or. !LVLDEST
		Return .T.
	EndIF

	FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
		IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
			_CPRODUTO := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]
			_CPATRI   := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
			_CTIPOSE  := M->FP0_TIPOSE"
			_NQUANT   := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
			_CLOCAL	  := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCAL"})]
			SB1->(DBSETORDER(1))
			IF SB1->(DBSEEK(XFILIAL("SB1")+_CPRODUTO))
				//IF SB1->B1_XRENSAL == "S" .AND. _CTIPOSE == "L" .AND. EMPTY(_CPATRI) xrensal removido da 94
				IF _CTIPOSE == "L" .AND. EMPTY(_CPATRI) .and. alltrim(SB1->B1_TIPO) <> "SV"
					_NSALDO := CALCEST(SB1->B1_COD, _CLOCAL, DDATABASE + 1, SB1->B1_FILIAL)[1]
					IF _NQUANT > _NSALDO
						IF !EMPTY(_CMENS)
							_CMENS += "; "
						ENDIF
						_CMENS += ALLTRIM(_CPRODUTO)
					ENDIF 
				ENDIF
			ENDIF
		ENDIF
	NEXT
	IF !EMPTY(_CMENS)
		_LRET := .F.
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
		Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
		{_CMENS,STR0460}) //"Produtos que não possuem saldo em estoque suficiente."
	ENDIF

	RESTAREA(_AAREA)
	
	aSize(_AAREA,0)
	FwFreeArray(_AAREA)
RETURN _LRET

/*/ ITCONHE
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION ITCONHE
Local CCAMPOSSIM := "AC9_DESCRI"
Local AHEADER := FHEADER("AC9", CCAMPOSSIM)
Local ACOLS := {}
Local CALIAS    
Local CCHAVE    
Local CCONDICAO 
Local NINDICE   
Local CFILTRO   

	MSDOCUMENT("FP0", FP0->(RECNO()), NOPC)

	CALIAS    := "AC9"
	CCHAVE    := XFILIAL(CALIAS)+"FP0"+CFILANT+CFILANT+FP0->FP0_PROJET
	CCONDICAO := "ALLTRIM(AC9_FILIAL+AC9_ENTIDA+AC9_FILENT+AC9_CODENT)=='"+ALLTRIM(CCHAVE)+"'"
	NINDICE   := 2  								
	CFILTRO   := CCONDICAO
	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	IF VALTYPE(ODLGFOL) == "O"
		ODLGFOL:ACOLS := ACOLS
		ODLGFOL:REFRESH()
	ENDIF

	aSize(AHEADER,0)
	FwFreeArray(AHEADER)

	aSize(ACOLS,0)
	FwFreeArray(ACOLS)

RETURN

/*/LOCA001A0
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA001A0()
Local _LITEM := .F.
Local _NX    := 0

	If valtype(ODLGPLA) <> "O"
		Return .T.
	EndIF

	FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
		IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1] .and. EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})])
			IF !EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
				IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == ""
					IF ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})] > 0
						_LITEM := .T.
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	NEXT

	IF _LITEM
		Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
		Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
		{STR0461}) //"Existem itens pais com valor informado."
		IF MSGYESNO(STR0462,STR0463) //"DESEJA ZERAR OS VALORES?"###"ATENÇÃO!"
			FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
				IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]  .and. EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})])
					IF !EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
						IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == ""
							IF ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})] > 0
								ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})] := 0
								ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})] := 0
								ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLBRUT"})] := 0
							ENDIF
						ENDIF
					ENDIF
				ENDIF
			NEXT
		ENDIF
	ENDIF

RETURN .T.


/*/LOCA001A2
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA001A2()
Local _LRET := .T.
	IF !EMPTY(ODLGX:ACOLS[ODLGX:NAT][ASCAN(ODLGX:AHEADER,{|X|ALLTRIM(X[2])=="FQZ_PV"})])
		IF M->FQZ_RETIRA <> ODLGX:ACOLS[ODLGX:NAT][ASCAN(ODLGX:AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})]
			_LRET := .F.
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
			Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
			{STR0464}) //"A data da retirada não pode ser alterada, pois já existe um PV gerado."
		ENDIF
	ENDIF
RETURN _LRET


// Validacao do x3_obrigat nos folders
// Frank Z Fuga em 20/10/21
Function VALID2(LSALTD)
Local _cCampo, _nX, _nY
Local _cErro1 := ""
Local _cErro2 := ""
Local _cErro  := ""

Default lSaltd := .T.

	// Tratamento para a FP1 - Localidades
	If VALTYPE(ODLGOBR)=="O"
		For _nX := 1 to len(ODLGOBR:aCols)
			If !ODLGOBR:aCols[_nX][len(ODLGOBR:aHeader)+1]
				For _nY := 1 to len(ODLGOBR:aHeader)
					_cCampo := alltrim(upper(ODLGOBR:aHeader[_nY][02]))
					(LOCXCONV(1))->(dbSetOrder(2))
					If (LOCXCONV(1))->(dbSeek(_cCampo))
						If X3USO( &(LOCXCONV(3)) ) .and. x3Obrigat(_cCampo)
							If EMPTY(ODLGOBR:ACOLS[_nX][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])==_cCampo})])
								If empty(_cErro1)
									_cErro1 := chr(13) + chr(10) + STR0542 + chr(13) + chr(10) // Localidades - Campos: "
								EndIF
								_cErro1 += alltrim(GetSx3Cache(&(LOCXCONV(2)),"X3_TITULO"))+"; "   
								LSALTD := .F.	
							EndIF
						EndIf
					EndIF
				Next
			EndIF
			If !empty(_cErro1)
				Exit
			EndIF
		Next
	EndIF

	// Tratamento para a FPA - Locação
	If VALTYPE(ODLGPLA)=="O"
		For _nX := 1 to len(ODLGPLA:aCols)
			If !ODLGPLA:aCols[_nX][len(ODLGPLA:aHeader)+1]
				For _nY := 1 to len(ODLGPLA:aHeader)
					_cCampo := alltrim(upper(ODLGPLA:aHeader[_nY][02]))
					(LOCXCONV(1))->(dbSetOrder(2))
					If (LOCXCONV(1))->(dbSeek(_cCampo))
						If X3USO( &(LOCXCONV(3)) ) .and. x3Obrigat(_cCampo)
							If EMPTY(ODLGPLA:ACOLS[_nX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])==_cCampo})])
								If empty(_cErro2)
									_cErro2 := chr(13) + chr(10) + STR0543 + chr(13) + chr(10) // Locações - Campos: "
								EndIF
								_cErro2 += alltrim(GetSx3Cache(&(LOCXCONV(2)),"X3_TITULO"))+"; "    
								LSALTD := .F.	
							EndIF
						EndIf
					EndIF
				Next
			EndIF
			If !empty(_cErro2)
				Exit
			EndIF
		Next
	EndIF

	// As demais abas não entraram no card de solicitação do ajuste dos campos obrigatórios.
	_cErro := _cErro1 + _cErro2

	If !LSALTD
		Help(Nil,Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
			Nil,STR0541,1,0,Nil,Nil,Nil,Nil,Nil,; //"Campos obrigatórios."
			{_cErro}) 
	EndIF

Return LSALTD


// Frank Z Fuga em 23/03/2022
// Fonte gerado a partir da necessidade dos debitos tecnicos de 2022
// Nao existe a necessidade da gravacao de dados neste momento para a rotina em questao
Function FSALVAR1(OTELA)
Return .T.

/*/LOCA001A3
ITUP BUSINESS - TOTVS RENTAL
AUTHOR ifranzoi
HISTORY 26/07/2021
/*/
Function LOCA001A3()
Local nPosIni := 0
Local nPosEnt := 0
Local nRetTOT := 0
Local _nMes	  := 0
Local _dTemp
Local _dFim

	//25/10/2022 - Jose Eulalio - Conversado com Frank e Lui, deverá seguir a mesma regra para geração de Títulos Provisórios do LOCA013 - GerPRx
	If ( !Empty(M->FPA_DTINI) .and. !Empty(M->FPA_DTFIM) .and. !Empty(M->FPA_DTENRE) )
		_dTemp := M->FPA_DTINI
		_dFim  := FPA->FPA_DTENRE
	Else
		nPosIni := aScan( oDlgPla:aHeader, { |x| AllTrim(x[02]) == "FPA_DTINI" } )
		nPosEnt := aScan( oDlgPla:aHeader, { |x| AllTrim(x[02]) == "FPA_DTENRE" } )
		_dTemp 	:= oDlgPla:aCols[oDlgPla:nAt][nPosIni]
		_dFim  	:= oDlgPla:aCols[oDlgPla:nAt][nPosEnt]
	EndIf

	// Passo 1 - Verificar os ciclos de faturamento que podem existir neste período
	While _dTemp <= _dFim
		if month(_dTemp) <> _nMes
			_nMes := month(_dTemp)
			nRetTOT++
		endif
		_dTemp ++
	EndDo

Return nRetTOT


// Legenda da rotina de notas de retorno parcial
// Frank Z Fuga em 04/05/22
Static FUNCTION LEGFQZ
	BRWLEGENDA(STR0003,'LEGENDA',{{'BR_VERDE' , STR0553	},; //"Notas ativas"
	{'BR_VERMELHO', STR0554 }}) // "Notas canceladas"
RETURN NIL

Static Function DescMarg()
Local nX		:= 0
Local nTempX05	:= 0
Local nTempX06	:= 0
Local nTempX07	:= 0
Local nTempX16	:= 0
Local nTempX17	:= 0
Local nTempX18	:= 0
Local nPosVlBru	:= ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLBRUT"})
Local nPosPDesc	:= ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PDESC"})
Local nPosVrHor	:= ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})
Local nPosQtdPr	:= ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QTDPRC"})
Local nPosGuiMo	:= ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})
Local nPosGuiDe	:= ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})
Local nPosVrSeg	:= ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})
Local nPosValor	:= Ascan(oDlgRes:aHeader,{|x|AllTrim(x[2])=="FP6_VALOR" })
Local aDescMarg	:= {0,0}

	For nX := 1 To Len(oDlgPla:aCols)
		nTempX05 += oDlgPla:aCols[nX][nPosVlBru]
		nTempX06 += oDlgPla:aCols[nX][nPosPDesc]
		nTempX07 += oDlgPla:aCols[nX][nPosVrHor]
		//Valor Total (Qtd Parcela * Valor Base)
		If FPA->(fieldpos("FPA_QTDPRC")) > 0
			nTempX16 += oDlgPla:aCols[nX][nPosQtdPr] * oDlgPla:aCols[nX][nPosVrHor]
		Else
			nTempX16 += oDlgPla:aCols[nX][nPosVrHor]
		EndIF
		nTempX16 += oDlgPla:aCols[nX][nPosGuiMo]
		nTempX16 += oDlgPla:aCols[nX][nPosGuiDe]
		nTempX16 += oDlgPla:aCols[nX][nPosVrSeg]
	Next nX

	For nX := 1 To Len(oDlgRes:aCols)
		nTempX17 += oDlgRes:aCols[nX][nPosValor]
	Next nX

	nTempX18 := nTempX16 - nTempX17

	aDescMarg[1] := ((nTempX05 - nTempX07) / nTempX05) * 100
	aDescMarg[2] := (nTempX18 / nTempX16) * 100

Return aDescMarg


/*/ComparaFpa
Estorna as AS quando alterado algum campo específico na FPA
author Jose Eulalio
17/02/2023
/*/
Static Function ComparaFpa(cProjet,cObra,cSeqGru,cAS,aHeader,aCols,nPos,cCamposAS)
Local aAreaFQ5 		:= FQ5->(GetArea())
Local cRet			:= ""
Local lEstorna		:= .F.
Local aCampos   	:= {}
Local nX
Local cTemp

	For nX := 1 to len(cCamposAS)
		If substr(cCamposAS,nX,1) == "["
			cTemp := ""
		ElseIf substr(cCamposAS,nX,1) == "]"
			aadd(aCampos,{cTemp})
		Else
			cTemp += substr(cCamposAS,nX,1)
		EndIF
	Next

	For nX := 1 to len(aCampos)
		cTemp := aCampos[nX,01]
		If ACOLS[nPos][aScan(aHeader,{|X|AllTrim(X[2])==cTemp})] <> &("FPA->"+cTemp)
			lEstorna := .T.
			Exit
		EndIf
	Next

	//Se encontrar divergencia
	If lEstorna
		//Posiciona na AS
		FQ5->(DbSetOrder(9)) //FQ5_FILIAL+FQ5_AS+FQ5_VIAGEM
		If FQ5->(DbSeek(xFilial("FQ5") + cAS))
			//Estorna a AS
			cRet := LOCA05906(.T.) 
		EndIf
	EndIf

	RestArea(aAreaFQ5)
	
	aSize(aCampos,0)
	aSize(aAreaFQ5,0)

	FwFreeArray(aCampos)
	FwFreeArray(aAreaFQ5)

Return


/*/FFOLDEROBR
ITUP BUSINESS - TOTVS RENTAL
AUTHOR FRANK ZWARG FUGA
SINCE 03/12/2020
HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
STATIC FUNCTION FFOLDEROBR(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
Local NSTYLE    := GD_INSERT + GD_UPDATE + GD_DELETE
Local CALIAS
Local CCHAVE
Local CCONDICAO
Local NINDICE
Local CFILTRO
Local CPROJET   := PROJETO()
Local LMULTOBR	:= SUPERGETMV("MV_LOCX280",.F.,.T.) 

Private NINSS     := 0

	NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

	IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP1",NOPCMANU, NSTYLE})
	ENDIF 

	CALIAS    := "FP1"
	CCHAVE    := XFILIAL(CALIAS)+CPROJET
	CCONDICAO := 'FP1_FILIAL+FP1_PROJET=="'+CCHAVE+'"'
	NINDICE   := 1  								// FP1_FILIAL+FP1_PROJET+FP1_OBRA
	CFILTRO   := CCONDICAO
	AHEADER   := FHEADER("FP1")
	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	IF LEN(ACOLS)==1
		CCAMPO    := "FP1_OBRA"
		CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
		IF EMPTY(CCAMPOGET)
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
	ENDIF

	IF LMULTOBR
		ODLGOBR := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FP1_OBRA",      ,       ,MAXGETDAD,        ,         ,{|| ITDELZA1()}   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
	ELSE
		ODLGOBR := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FP1_OBRA",      ,       ,1			 ,        ,         ,{|| ITDELZA1()}   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
	ENDIF
	ODLGOBR:OBROWSE:BCHANGE := {|| LOCA00144()} 
	ODLGOBR:SetEditLine(.F.)

RETURN NIL

/*/LOCA001V1
GATILHO PRODUTO SUBSTITUÍDO
AUTHOR DENNIS CALABREZ
SINCE 16/05/2022
/*/ 
Function LOCA001V1()
Local lRet := .F.
Local nPos := 0

	nPos := aScan(aHeader,{ |x| Upper(AllTrim(x[2])) == "FPA_SEQSUB"})  
	lRet := EMPTY(ACOLS[n][npos])

Return(lRet)


// LOCA001V2
// Gatilho do campo FPA_TPBASE alimentando FPA_DTFIM
// Frank Zwarg Fuga
Function LOCA001V2
Local dDataFim := ctod("")
Local dDataIni := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_DTINI"})]
Local nPredia  := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_PREDIA"})]

	If odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_TPBASE"})] == "D"
		dDataFim := dDataIni + nPredia
	else
		dDataFim := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_DTFIM"})]
	EndIF

Return dDataFim


// LOCA001V3
// Gatilho do campo FPA_TPBASE alimentando FPA_PREDIA
// Frank Zwarg Fuga
Function LOCA001V3
Local dDias := 1
Return dDias

// LOCA001V4
// Validação do campo FPA_TPBASE
// Frank Zwarg Fuga
Function LOCA001V4
Local lRet := .t.
	If odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_TPBASE"})] == "M"
	EndIF
Return lRet


// LOCA001V5
// x3When do campo FPA_PREDIA
// Frank Zwarg Fuga
Function LOCA001V5
Local lRet := .t.
	If odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_TPBASE"})] == "M"
		lRet := .F.
	EndIf
Return lRet

// LOCA001V6
// valid do campo FPA_PREDIA
// Frank Zwarg Fuga
Function LOCA001V6
Local lRet := .t.
Return lRet

// LOCA001V7
// gatilho para o achar o valor bruto
// campos envolvidos FPA_PREDIA, FPA_PRCUNI, FPA_QUANT
// Frank Zwarg Fuga
Function LOCA001V7
Local nRet := 0
Local nPredia := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_PREDIA"})]
Local nUnitario := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_PRCUNI"})]
Local nQuant := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_QUANT"})] 
	If odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_TPBASE"})] == "D"
		nRet := nPredia * nUnitario * nQuant
	Else
		nret := nQuant * nUnitario
	EndIF		
Return nRet


// LOCA001V8
// gatilho para o achar a data fim estando no FPA_DTINI
// Frank Zwarg Fuga
Function LOCA001V8
Local dDataFim := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_DTFIM"})]
Local dDataIni := &(readvar())
	If odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_TPBASE"})] == "M"
		dDataFim := dDataIni + last_day(dDataIni)
	EndIf
Return dDataFim

// LOCA001V9
// gatilho para o achar o FPA_PREDIA alterando o FPA_DTFIM
// Frank Zwarg Fuga
Function LOCA001V9
Local nPredia  := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_PREDIA"})]
Local dDataIni := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_DTINI"})]
Local dDataFim := odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_DTFIM"})]
	If odlgpla:ACOLS[odlgpla:nAt][ascan(odlgpla:aheader,{|X|alltrim(X[2])=="FPA_TPBASE"})] == "D"
		nPredia := dDataFim - dDataIni
	EndIF
Return nPredia


// LOCA001VA
// validação do campo FPA_TPBASE
// Frank Zwarg Fuga
Function LOCA001VA
Local lRet := .T.
Local cTpMes  := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_TPMES" })]
	If &(readvar()) == "D"
		If cTpMes <> "1"
			lRet := .F.
			Help(Nil,	Nil,STR0029+alltrim(upper(Procname())),; //"RENTAL: "
						Nil,STR0033,1,0,Nil,Nil,Nil,Nil,Nil,; //"Inconsistência nos dados."
						{STR0600}) // "O tipo mês aberto exige a base de cálculo diária."
		EndIF
	EndIf
Return lRet

