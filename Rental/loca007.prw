#INCLUDE "loca007.ch" 
#INCLUDE "PROTHEUS.CH"
#INCLUDE "RWMAKE.CH"
#INCLUDE "FWBROWSE.CH"
#INCLUDE "TOPCONN.CH"

/*/{PROTHEUS.DOC} LOCA007.PRW
ITUP BUSINESS - TOTVS RENTAL
CUSTOS EXTRAS
@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/ 

FUNCTION LOCA007()
Local CPERG     := "LOCP005"
Local CFILTRO   := ""

Private NDESPESAS 			 // := MV_PAR01 		// 1=COBRAR,2=NAO COBRAR,3=SEM CLASSIFICAR,4=TODAS
Private CCADASTRO := STR0001 //"Custos Extras"
Private AROTINA   := {}
Private CDELFUNC  := ".T." 	 // VALIDACAO PARA A EXCLUSAO. PODE-SE UTILIZAR EXECBLOCK
Private CSTRING   := "FPG"

	if existblock("LCZC1FIL")			// PONTO DE ENTRADA PARA INCLUSAO DE FILTRO CUSTOMIZADO
		cfiltro := EXECBLOCK("LCZC1FIL",.T.,.T.)
	else
		IF ! pergunte(CPERG,.T.)
			return NIL
		endif

		ndespesas := MV_PAR01 				// 1=COBRAR,2=NAO COBRAR,3=SEM CLASSIFICAR,4=TODAS

		do case
		case NDESPESAS == 1  				// 1=COBRAR,2=NAO COBRAR,3=SEM CLASSIFICAR,4=TODAS
			CFILTRO := "FPG_COBRA='S'"
		case NDESPESAS == 2  				// 1=COBRAR,2=NAO COBRAR,3=SEM CLASSIFICAR,4=TODAS
			CFILTRO := "FPG_COBRA='N'"
		case NDESPESAS == 3  				// 1=COBRAR,2=NAO COBRAR,3=SEM CLASSIFICAR,4=TODAS
			CFILTRO := "FPG_COBRA=' '"
		endcase

	EndIf

	aadd(arotina,{STR0002, "AXPESQUI", 0 , 1}) //"Pesquisar"
	aadd(arotina,{STR0003, "LOCA00722()", 0 , 2}) //"Visualizar"
	aadd(arotina,{STR0004, "LOCA00715()", 0 , 4}) //"Copiar"
	aadd(arotina,{STR0005, "LOCA00717()", 0 , 3}) //"Incluir"
	aadd(arotina,{STR0006, "LOCA00718()", 0 , 4}) //"Alterar"
	aadd(arotina,{STR0007, "LOCA00719(FPG_PROJET)", 0 , 5}) //"Excluir"
	aadd(arotina,{STR0008, "LOCA00702(FPG_PROJET)", 0 , 6}) //"Manut. Custos"
	aadd(arotina,{STR0009, "LOCA00707(FPG_PROJET)", 0 , 6}) //"Vincula AS"
	aadd(arotina,{STR0010, "LOCA00711(FPG_PROJET)", 0 , 6}) //"Desvincula AS"
	aadd(arotina,{STR0011, "LOCA00701", 0 , 6}) //"Legenda"
	aadd(arotina,{STR0069, "LC007DOC()", 0 , 2}) //"Conhecimento"

	IF existblock("LCZC1ROT")			// PONTO DE ENTRADA PARA INCLUSAO DE BOTOES NO CUSTO EXTRA.
		arotina := execblock("LCZC1ROT",.T.,.T.,{AROTINA})
	ENDIF

	// Ponto de entrada para filtrar o browse
	// Frank Zwarg Fuga - 16/06/2021
	IF existblock("LC007FIL")
		cfiltro += EXECBLOCK("LC007FIL" , .T. , .T. , {CFILTRO}) 
	ENDIF

	dbselectarea(CSTRING) 
	dbsetorder(1) 

	mbrowse(6,1,22,75,CSTRING, , , , , ,LOCA00701(), , , , , , , .f. ,CFILTRO)

return NIL


// Frank Z Fuga - 14/03/2023
// Legenda
FUNCTION LOCA00701(NRECNO) 		
Local NPOS
Local ASTATUS  := {}
Local ALEGENDA := {}
Local ACORES   := {}
Local XRET     := .T.
    
	IF FPG->(FIELDPOS("FPG_PVNUM")) > 0 .AND. FPG->(FIELDPOS("FPG_PVITEM")) > 0
		AADD(ASTATUS,{'BR_PINK'    ,STR0012,'(!EMPTY(FPG_PVNUM) .AND. FPG_STATUS == "2" .AND. FPG_COBRA == "S")'}) //"Faturado"
		AADD(ASTATUS,{'BR_VERDE'   ,STR0013,'(EMPTY(FPG_PVNUM)  .AND. FPG_STATUS == "1" .AND. FPG_COBRA == "S")'}) //"Cobrar"
		AADD(ASTATUS,{'BR_AZUL'    ,STR0014,'(EMPTY(FPG_PVNUM)  .AND. FPG_STATUS == "1" .AND. FPG_COBRA == "N")'}) //"Não cobrar"
		AADD(ASTATUS,{'BR_VERMELHO',STR0015,'(EMPTY(FPG_PVNUM)  .AND. FPG_STATUS == "1" .AND. !FPG_COBRA $ "SN")'}) //"Falta classificar"
	ELSE
		AADD(ASTATUS,{'BR_VERDE'   ,STR0013,'(FPG_COBRA=="S")'}) //"Cobrar"
		AADD(ASTATUS,{'BR_AZUL'    ,STR0014,'(FPG_COBRA=="N")'}) //"Não cobrar"
		AADD(ASTATUS,{'BR_VERMELHO',STR0015,'(!FPG_COBRA$"SN")'})     //"Falta classificar"
	ENDIF
		
	IF existblock("ZC1ADLEG") 			// PONTO DE ENTRADA PARA ALTERAÇÃO DOS CAMPOS QUE NÃO SERÃO COPIADOS.
		ASTATUS := EXECBLOCK("ZC1ADLEG",.T.,.T.,{ASTATUS})
	ENDIF 
		
	FOR NPOS:=1 TO LEN(ASTATUS)
		AADD(ALEGENDA, {ASTATUS[LEN(ALEGENDA)+1,1], ASTATUS[LEN(ALEGENDA)+1,2] })
	NEXT NPOS

	IF NRECNO == NIL					// CHAMADA PELO MBROWSE NÃO PASSA O RECNO()
		FOR NPOS:=1 TO LEN(ASTATUS)
			AADD(ACORES,{ASTATUS[LEN(ACORES)+1,3],ASTATUS[LEN(ACORES)+1,1]})
		NEXT
		XRET := ACORES
	ELSE								// CHAMADA PELO AROTINA PASSA O RECNO()
		BRWLEGENDA(CCADASTRO,OEMTOANSI("STATUS"),ALEGENDA)
	ENDIF

RETURN XRET

// Manutenção dos custos
FUNCTION LOCA00702(CPROJET)
Local ODLG , OBROWSE , ACOLS0 , AHEADER , BHEADER , AESTRU 
Local ACOLS      := {}
Local BMARK      := { |OBROWSE| IIF(LOCA00704(OBROWSE), 'LBOK', 'LBNO') }
Local BLDBLCLICK := { |OBROWSE| LOCA00703(OBROWSE) }
Local BHEADERCLI := { |OBROWSE| LOCA00705(OBROWSE) }
Local ACLIENTE   := FTRAZCLI(CPROJET)
Local CNOMANT    := ACLIENTE[3] 		// 1=A1_COD,2=A1_LOJA,3=A1_NOME
Local NLINDLG    := 600-100
Local NCOLDLG    := 800
Local NLINPAN    := 230-50
Local NCOLPAN    := 390
Local NLINBOT    := 280-50
Local NPOS       := 0 

Private CPROJETX   := CPROJET
Private CMARCA     := GETMARK()
Private CMARCA2    := GETMARK()
Private NPOSMAR,NPOSMAR2,NPOSTIP,NPOSCOB,NPOSCOB2,NPOSCUS,NPOSDOC,NPOSNRA,NPOSCOD,NPOSDES,NPOSQUA,NPOSVAL,NPOSDAT,NPOSREC,NPOSREO,NPOSCDE,NPOSDDE,NPOSTXV,NPOSTXP,NPOSVAT

	FMONTAZC1("QRYFPG" , CPROJET) 			// MONTA A QUERY

	WHILE QRYFPG->(!EOF())
		AESTRU := {} 
		IF QRYFPG->FPG_COBRA $ "SN" 	// COBRAR CLIENTE (S/N)
			QRYFPG->(AADD(AESTRU,{CMARCA    ,""          ,""          ,"" ,""             ,0,00,0,"","",""}))
		ELSE
			QRYFPG->(AADD(AESTRU,{SPACE(01) ,""          ,""          ,"" ,""             ,0,00,0,"","",""}))
		ENDIF

		NPOSMAR := LEN(AESTRU)

		QRYFPG->(AADD(AESTRU,{FPG_COBRA ,"FPG_COBRA" ,STR0016,"C","@X",1,LEN(FPG->FPG_COBRA ),,,,}));NPOSCOB:=LEN(AESTRU) //"COBRAR?"
		QRYFPG->(AADD(AESTRU,{FPG_JUNTO ,"FPG_JUNTO" ,STR0017,"C","@X",1,LEN(FPG->FPG_JUNTO ),,,,}));NPOSCOB2:=LEN(AESTRU) //"JUNTO?"
		QRYFPG->(AADD(AESTRU,{FPG_NRAS  ,"FPG_NRAS"  ,STR0018,"C","@X",1,LEN(FPG->FPG_NRAS  ),0,,,"","",""}));NPOSNRA:=LEN(AESTRU) //"NRO.AS"
		QRYFPG->(AADD(AESTRU,{FPG_DESCRI,"FPG_DESCRI",STR0019,"C","@X",1,LEN(FPG->FPG_DESCRI),0,,,"","",""}));NPOSDES:=LEN(AESTRU) //"DESCRICAO"
		QRYFPG->(AADD(AESTRU,{FPG_QUANT ,"FPG_QUANT" ,STR0020,"C","@E 999,999,999.99",2,12,0,"","",""}));NPOSQUA:=LEN(AESTRU) //"QUANTIDADE"
		QRYFPG->(AADD(AESTRU,{FPG_VALOR ,"FPG_VALOR" ,STR0021,"C","@E 999,999,999.99",2,12,0,"","",""}));NPOSVAL:=LEN(AESTRU) //"VALOR"
		QRYFPG->(AADD(AESTRU,{FPG_CUSTO ,"FPG_CUSTO" ,"LOCR03102","C","@X",1,LEN(FPG->FPG_CUSTO ),0,"","",""}));NPOSCUS:=LEN(AESTRU)
		QRYFPG->(AADD(AESTRU,{FPG_DOCORI,"FPG_DOCORI",STR0022,"C","@X",1,LEN(FPG->FPG_DOCORI),0,"","",""}));NPOSDOC:=LEN(AESTRU) //"DOC.ORIGEM"
		QRYFPG->(AADD(AESTRU,{FPG_PRODUT,"FPG_PRODUT",STR0023,"C","@X",1,LEN(FPG->FPG_PRODUT),0,"","",""}));NPOSCOD:=LEN(AESTRU) //"PRODUTO"
		QRYFPG->(AADD(AESTRU,{FPG_DTENT ,"FPG_DTENT" ,STR0024,"D","@E",1,08,0,"","",""}));NPOSDAT:=LEN(AESTRU) //"DATA"
		QRYFPG->(AADD(AESTRU,{FPG_RECNO ,"FPG_RECNO" ,STR0025,"N","@E 99999999",1,08,0,"","",""}));NPOSREC:=LEN(AESTRU) //"RECNO"
		QRYFPG->(AADD(AESTRU,{FPG_RECORI,"FPG_RECORI",STR0026,"C","@R 99999999",1,08,0,"","",""}));NPOSREO:=LEN(AESTRU) //"RECNO ORIGEM"
		QRYFPG->(AADD(AESTRU,{FPG_CODDES,"FPG_CODDES",STR0027,"C","@X",1,LEN(FPG->FPG_CODDES),0,"","",""}));NPOSCDE:=LEN(AESTRU) //"COD.DESPESA"
		QRYFPG->(AADD(AESTRU,{FPG_DESPES,"FPG_DESPES",STR0028,"C","@X",1,LEN(FPG->FPG_DESPES),0,"","",""}));NPOSDDE:=LEN(AESTRU) //"DESC.DESPESA"
		QRYFPG->(AADD(AESTRU,{FPG_TAXAV ,"FPG_TAXAV" ,STR0029,"N","@E 999,999,999.99",1,LEN(FPG->FPG_DESPES),0,"","",""}));NPOSTXV:=LEN(AESTRU) //"TAXA VALOR"
		QRYFPG->(AADD(AESTRU,{FPG_TAXAP ,"FPG_TAXAP" ,STR0030,"N","@E 99.99",1,LEN(FPG->FPG_DESPES),0,"","",""}));NPOSTXP:=LEN(AESTRU) //"TAXA PERCENT"
		QRYFPG->(AADD(AESTRU,{FPG_VALTOT,"FPG_VALTOT",STR0031,"N","@E 999,999,999.99",1,LEN(FPG->FPG_DESPES),0,"","",""}));NPOSVAT:=LEN(AESTRU) //"VALOR+TAXA"
		
		ACOLS0 := {}
		FOR NPOS := 1 TO LEN(AESTRU)
			AADD(ACOLS0,AESTRU[NPOS,1])
		NEXT NPOS 
		AADD(ACOLS,ACOLS0)

		QRYFPG->(DBSKIP())
	ENDDO 

	IF LEN(ACOLS) == 0
		MSGALERT(STR0032 , STR0033)  //"NÃO EXISTEM CUSTOS EXTRAS PARA O PROJETO SELECIONADO."###"GPO - CADZC1.PRW"
		RETURN NIL
	ENDIF

	AHEADER := {}
	FOR NPOS := 2 TO LEN(AESTRU)
		BHEADER:="{||ACOLS[OBROWSE:AT(),"+STRZERO(NPOS,2)+"]}"
		AADD(AHEADER,{AESTRU[NPOS,3],&BHEADER,AESTRU[NPOS,4],AESTRU[NPOS,5],AESTRU[NPOS,6],AESTRU[NPOS,7],AESTRU[NPOS,8]/*,AESTRU[NPOS,9],AESTRU[NPOS,10],"",AESTRU[NPOS,11]*/})
	NEXT NPOS 

	DEFINE MSDIALOG ODLG TITLE STR0034 FROM 0,0 TO NLINDLG,NCOLDLG PIXEL //"Manutenção das Despesas"
		@ 005,005 SAY OEMTOANSI(STR0035) SIZE 040,030 //"PROJETO"
		@ 005,065 SAY OEMTOANSI(STR0036) SIZE 040,030 //"CLIENTE"
		@ 013,005 GET CPROJET SIZE 050,030 WHEN .F.
		@ 013,065 GET CNOMANT SIZE 200,030 WHEN .F.
		@ 045,004 MSPANEL OPANEL PROMPT "" SIZE NCOLPAN,NLINPAN OF ODLG
		OBROWSE:=FWBROWSE():NEW()
		OBROWSE:SETDATAARRAY()
		OBROWSE:SETARRAY(ACOLS)
		OBROWSE:ADDMARKCOLUMNS(BMARK,BLDBLCLICK,BHEADERCLI) 
		OBROWSE:SETDOUBLECLICK ({ || ATUJUNTO(OBROWSE) })
		OBROWSE:SETCOLUMNS(AHEADER)
		OBROWSE:SETOWNER(OPANEL)
		OBROWSE:DISABLEREPORT()
		OBROWSE:DISABLECONFIG()
		OBROWSE:ACTIVATE()
		
		@ NLINBOT,050 BUTTON STR0037     SIZE 50,15 ACTION IIF(FGRAVA(OBROWSE) , CLOSE(ODLG) , OBROWSE:SETFOCUS())  //"_CONFIRMA"
		@ NLINBOT,110 BUTTON STR0038         SIZE 50,15 ACTION CLOSE(ODLG) //"_SAIR"
	ACTIVATE MSDIALOG ODLG CENTERED

RETURN NIL

// ATULIZA O CAMPO JUNTO AO CLICAR NELE
STATIC FUNCTION ATUJUNTO(OBROWSE)
	DO CASE
	CASE EMPTY( OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB2] )
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB2] := "S"
	CASE OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB2] == "S"
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB2] := "N"
	OTHERWISE
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB2] := SPACE(01)
	ENDCASE
RETURN NIL

// Montagem da query
STATIC FUNCTION FMONTAZC1(CALIASQRY,CPROJET)  
Local AESTRU 
Local CQRY 
Local NPOS   := 0 
Local _cCampos := ""

	IF SELECT(CALIASQRY) > 0
		(CALIASQRY)->( DBCLOSEAREA() )
	ENDIF

	_cCampos := "FPG_PROJET,FPG_OBRA,FPG_COBRA,FPG_JUNTO,FPG_NRAS,FPG_TIPO,FPG_CUSTO,FPG_CODDES,FPG_DESPES,FPG_OK,FPG_PRODUT,"
	_cCampos += "FPG_DESCRI,FPG_QUANT,FPG_VALOR,FPG_DTENT,FPG_DOCORI,FPG_RECORI,FPG_TAXAV,FPG_TAXAP,FPG_VALTOT,FPG_FILIAL,FPG_RECNO"

	CQRY := " SELECT FPG_PROJET, FPG_OBRA, FPG_COBRA, FPG_JUNTO, FPG_NRAS, FPG_TIPO, FPG_CUSTO, " 
	CQRY += " FPG_CODDES, FPG_DESPES, FPG_OK, FPG_PRODUT, FPG_DESCRI, FPG_QUANT, FPG_VALOR, " 
	CQRY += " FPG_DTENT, FPG_DOCORI, FPG_RECORI, FPG_TAXAV, FPG_TAXAP, FPG_VALTOT, FPG_FILIAL, " 
	CQRY += " R_E_C_N_O_ AS FPG_RECNO " 
	CQRY += " FROM " + RETSQLNAME("FPG") + " ZC1" 
	CQRY += " WHERE FPG_FILIAL    = '" + XFILIAL("FPG") + "'" 
	CQRY += " AND FPG_PROJET    = '" + CPROJET + "'" 
	CQRY += " AND ZC1.D_E_L_E_T_= '' " 
	CQRY += " ORDER BY FPG_PROJET, FPG_TIPO, FPG_DOCORI, FPG_PRODUT " 
	CQRY := CHANGEQUERY( CQRY )
	DBUSEAREA(.T., "TOPCONN", TCGENQRY(,,CQRY), CALIASQRY, .F., .T.)

	AESTRU := FPG->(DBSTRUCT())

	FOR NPOS := 1 TO LEN(AESTRU)
		IF AESTRU[NPOS,2] <> "C" .AND. AESTRU[NPOS,2] <> "M"
			//IF (CALIASQRY)->(!TYPE(AESTRU[NPOS,1])=="U")
			If alltrim(AESTRU[NPOS,1]) $ _cCampos
				TCSETFIELD(CALIASQRY,AESTRU[NPOS,1],AESTRU[NPOS,2],AESTRU[NPOS,3],AESTRU[NPOS,4])
			ENDIF
		ENDIF
	NEXT

RETURN NIL

STATIC FUNCTION FGRAVA(OBROWSE)
LOCAL NPOS
LOCAL ATABAUX  := OBROWSE:DATA():AARRAY
LOCAL AAREAZC1 := FPG->(GETAREA())

	FOR NPOS := 1 TO LEN(ATABAUX)
		FPG->(DBGOTO(ATABAUX[NPOS,NPOSREC]))  //POSICIONA NO ZC1

		If empty(FPG->FPG_SEQ)
			_cSeq := GetSx8Num("FPG","FPG_SEQ")
			ConfirmSx8()
			If FPG->(RecLock("FPG",.F.))
				FPG->FPG_SEQ := _cSeq
				FPG->(MsUnlock())
			EndIF
		EndIf

		IF ATABAUX[NPOS,NPOSMAR] == CMARCA
			IF FPG->(RECLOCK("FPG",.F.))
				FPG->FPG_COBRA := ATABAUX[NPOS,NPOSCOB]
				FPG->(MSUNLOCK())
			ENDIF
		ELSE
			IF FPG->FPG_COBRA == "N"
				IF FPG->(RECLOCK("FPG",.F.))
					FPG->FPG_COBRA:=ATABAUX[NPOS,NPOSCOB]
					FPG->(MSUNLOCK())
				ENDIF
			ELSE
				IF FPG->(RECLOCK("FPG",.F.))
					FPG->FPG_COBRA:=ATABAUX[NPOS,NPOSCOB]
					FPG->(MSUNLOCK())
				ENDIF
			ENDIF
		ENDIF

		IF FPG->(RECLOCK("FPG",.F.))
			FPG->FPG_JUNTO := ATABAUX[NPOS,NPOSCOB2] 
			FPG->(MSUNLOCK())
		ENDIF
	NEXT

	OBROWSE:REFRESH(.T.)
	OBROWSE:SETFOCUS()

	FPG->(RESTAREA(AAREAZC1))

RETURN .T.

STATIC FUNCTION FTRAZSC7(CPROJET)
LOCAL CTIPO := "1"								// 1=PEDIDO DE COMPRA,2=ADIANTAMENTO MOTORISTA,3=DESPESA VIAGEM,4=ORDEM DE SERVICO
LOCAL CDOCORI  
LOCAL NTAXAV , NTAXAP , NVALTOT 
Local _cSeq

	FMONTASC7("QRYSC7",CPROJET)  					// MONTA A QUERY

	WHILE QRYSC7->(!EOF())

		CDOCORI := QRYSC7->(C7_NUM+"/"+C7_ITEM)

		FPG->(DBSETORDER(1))  						// FPG_FILIAL+FPG_PROJET+FPG_TIPO+FPG_DOCORI
		IF ! FPG->( DBSEEK(XFILIAL("FPG") + CPROJET + CTIPO + CDOCORI) ) 		// POSICIONA NO CUSTO EXTRA

			POSICIONE("SB1",1, XFILIAL("SB1")+ QRYSC7->C7_PRODUTO ,"B1_COD") 	// POSICIONA NO PRODUTO

			_cSeq := GetSx8Num("FPG","FPG_SEQ")
			ConfirmSx8()

			RECLOCK("FPG",.T.)
			FPG->FPG_FILIAL := XFILIAL("FPG")
			FPG->FPG_PROJET := CPROJET
			FPG->FPG_TIPO   := CTIPO
			FPG->FPG_CUSTO  := FTRAZTIPO(CTIPO) 	// TRAZ A DESCRIÇÃO DO TIPO INFORMADO
			FPG->FPG_DOCORI := CDOCORI
			FPG->FPG_PRODUT := QRYSC7->C7_PRODUTO
			FPG->FPG_DESCRI := QRYSC7->C7_DESCRI
			FPG->FPG_QUANT  := QRYSC7->C7_QUANT
			FPG->FPG_VALOR  := QRYSC7->C7_TOTAL
			FPG->FPG_DTENT  := QRYSC7->C7_EMISSAO
			FPG->FPG_RECORI := QRYSC7->C7_RECNO
			FPG->FPG_COBRA  := SPACE(01)
			FPG->FPG_JUNTO  := SPACE(01)
			FPG->FPG_STATUS := "1"
			FPG->FPG_SEQ    := _cSeq

			NTAXAV  := SB1->B1_XTAXAV
			NTAXAP  := SB1->B1_XTAXAP
			NVALTOT := FPG->FPG_VALOR
			DO CASE
			CASE NTAXAV > 0 						// TAXA EM VALOR
				NVALTOT += NTAXAV
			CASE NTAXAP > 0 						// TAXA EM PERCENTUAL
				NVALTOT += ROUND( NVALTOT * NTAXAP / 100, 2 )
			ENDCASE
			FPG->FPG_TAXAV  := NTAXAV
			FPG->FPG_TAXAP  := NTAXAP
			FPG->FPG_VALTOT := NVALTOT
			FPG->(MSUNLOCK())
		ENDIF

		QRYSC7->(DBSKIP())
	ENDDO 

RETURN NIL 

STATIC FUNCTION FMONTASC7(CALIASQRY , CPROJET)  
LOCAL AESTRU
LOCAL CQRY
LOCAL NPOS   := 0 
Local _cCampos := ""

	IF SELECT(CALIASQRY) > 0
		(CALIASQRY)->( DBCLOSEAREA() )
	ENDIF

	_cCampos := "C7_NUM,C7_ITEM,C7_PRODUTO,C7_DESCRI,C7_QUANT,C7_PRECO,C7_TOTAL,C7_EMISSAO,C7_FILIAL,C7_RECNO"

	CQRY := " SELECT C7_NUM, C7_ITEM, C7_PRODUTO, C7_DESCRI, C7_QUANT, C7_PRECO, C7_TOTAL, C7_EMISSAO, C7_FILIAL, " 
	CQRY += " R_E_C_N_O_ AS C7_RECNO " 
	CQRY += " FROM " + RETSQLNAME("SC7") + " SC7" 
	CQRY += " WHERE C7_FILIAL  = '" + XFILIAL("SC7") + "'" 
	CQRY += " AND C7_CLVL    = '" + ALLTRIM(CPROJET) + "'" 
	CQRY += " AND C7_CONAPRO = 'L'" 
	CQRY += " AND SC7.D_E_L_E_T_ = ''" 
	CQRY += " ORDER BY C7_PRODUTO" 
	CQRY := CHANGEQUERY( CQRY )
	DBUSEAREA(.T., "TOPCONN", TCGENQRY(,,CQRY), CALIASQRY, .F., .T.)

	AESTRU := SC7->( DBSTRUCT() )
	FOR NPOS := 1 TO LEN(AESTRU)
		IF AESTRU[NPOS,2]<>"C" .AND. AESTRU[NPOS,2]<>"M"
			//IF (CALIASQRY)->(!TYPE(AESTRU[NPOS,1])=="U")
			If alltrim(AESTRU[NPOS,1]) $ _cCampos
				TCSETFIELD(CALIASQRY,AESTRU[NPOS,1],AESTRU[NPOS,2],AESTRU[NPOS,3],AESTRU[NPOS,4])
			ENDIF
		ENDIF
	NEXT NPOS 

RETURN NIL

STATIC FUNCTION FTRAZZL1(CPROJET)
LOCAL CTIPO := "2" 					// 1=PEDIDO DE COMPRA,2=ADIANTAMENTO MOTORISTA,3=DESPESA VIAGEM,4=ORDEM DE SERVICO
LOCAL CDOCORI 
LOCAL CPROD , CDESC 
LOCAL _cSeq

	FPG->(DBSETORDER(1)) 				// FPG_FILIAL+FPG_PROJET+FPG_TIPO+FPG_DOCORI

	FMONTAZL1("QRYFPH",CPROJET) 		// MONTA A QUERY

	QRYFPH->(DBGOTOP())
	WHILE QRYFPH->(!EOF())
		IF FPH->(FIELDPOS("FPH_XPRODU")>0)
			CPROD := QRYFPH->FPH_XPRODU
		ELSE
			CPROD := "999900002"
		ENDIF

		CDESC := POSICIONE("SB1",1,XFILIAL("SB1")+CPROD,"B1_DESC")

		CDOCORI:=QRYFPH->(FPH_NRBV+"/"+FPH_NRVALE)
		IF ! FPG->(DBSEEK(XFILIAL("FPG")+CPROJET+CTIPO+CDOCORI))  //POSICIONA NO CUSTO EXTRA

			_cSeq := GetSx8Num("FPG","FPG_SEQ")
			ConfirmSx8()

			RECLOCK("FPG",.T.)
			FPG->FPG_FILIAL := XFILIAL("FPG")
			FPG->FPG_PROJET := CPROJET
			FPG->FPG_TIPO   := CTIPO
			FPG->FPG_CUSTO  := FTRAZTIPO(CTIPO)  //TRAZ A DESCRIÇÃO DO TIPO INFORMADO
			FPG->FPG_DOCORI := CDOCORI
			FPG->FPG_PRODUT := CPROD
			FPG->FPG_DESCRI := CDESC
			FPG->FPG_QUANT  := 1
			FPG->FPG_VALOR  := QRYFPH->FPH_VALOR
			FPG->FPG_DTENT  := QRYFPH->FPH_EMISSA
			FPG->FPG_RECORI := QRYFPH->FPH_RECNO
			FPG->FPG_COBRA  := SPACE(01)
			FPG->FPG_JUNTO  := SPACE(01)
			FPG->FPG_STATUS := "1"
			FPG->FPG_DESPES := QRYFPH->FPH_NOMMOT
			FPG->FPG_SEQ    := _cSeq
			FPG->(MSUNLOCK())
		ENDIF
		
		QRYFPH->(DBSKIP())
	ENDDO 

RETURN NIL 

STATIC FUNCTION FMONTAZL1(CALIASQRY,CPROJET) 
LOCAL AESTRU
LOCAL CQRY
LOCAL NPOS   := 0 
Local _cCampos := ""

	IF SELECT(CALIASQRY) > 0
		(CALIASQRY)->(DBCLOSEAREA())
	ENDIF

	_cCampos := "FPH_NRBV,FPH_NRVALE,FPH_OBRA,FPH_MOTORI,FPH_NOMMOT,FPH_VALOR,FPH_EMISSA,FPH_SOT,FPH_FILIAL,FPH_RECNO"

	CQRY := " SELECT FPH_NRBV , FPH_NRVALE , FPH_OBRA , FPH_MOTORI , FPH_NOMMOT , FPH_VALOR , FPH_EMISSA , " 
	IF FPH->( FIELDPOS("FPH_XPRODU") ) > 0
		CQRY += " FPH_XPRODU , " 
		_cCampos += ",FPH_XPRODU"
	ENDIF
	CQRY     += " FPH_SOT , FPH_FILIAL , R_E_C_N_O_ AS FPH_RECNO " 
	CQRY     += " FROM " + RETSQLNAME("FPH") + " ZL1" 
	CQRY     += " WHERE FPH_FILIAL = '" + XFILIAL("FPH") + "'" 
	CQRY     += " AND FPH_SOT    = '" + CPROJET + "'" 
	CQRY     += " AND FPH_APROVA = 'T' " 
	CQRY     += " AND ZL1.D_E_L_E_T_ = '' " 
	CQRY     += " ORDER BY FPH_MOTORI" 
	CQRY     := CHANGEQUERY( CQRY )
	DBUSEAREA(.T., "TOPCONN", TCGENQRY(,,CQRY), CALIASQRY, .F., .T.)

	AESTRU := FPH->(DBSTRUCT())
	FOR NPOS:=1 TO LEN(AESTRU)
		IF AESTRU[NPOS,2]<>"C" .AND. AESTRU[NPOS,2]<>"M"
			//IF (CALIASQRY)->(!TYPE(AESTRU[NPOS,1])=="U")
			If alltrim(AESTRU[NPOS,1]) $ _cCampos
				TCSETFIELD(CALIASQRY,AESTRU[NPOS,1],AESTRU[NPOS,2],AESTRU[NPOS,3],AESTRU[NPOS,4])
			ENDIF
		ENDIF
	NEXT NPOS 

RETURN NIL

STATIC FUNCTION FTRAZSTJ(CPROJET)
LOCAL CTIPO := "4" 					// 1=PEDIDO DE COMPRA,2=ADIANTAMENTO MOTORISTA,3=DESPESA VIAGEM,4=ORDEM DE SERVICO
LOCAL CDOCORI 
LOCAL NPRECO , CPRODUTO 
LOCAL _cSeq

	FPG->(DBSETORDER(1)) 			// FPG_FILIAL+FPG_PROJET+FPG_TIPO+FPG_DOCORI

	FMONTASTJ("QRYSTJ",CPROJET) 	// MONTA A QUERY

	QRYSTJ->(DBGOTOP())
	WHILE QRYSTJ->(!EOF())
		IF STJ->(FIELDPOS("TJ_XPRODU")) > 0
			CPRODUTO := QRYSTJ->TJ_XPRODU
		ELSE
			CPRODUTO := "999900002"
		ENDIF

		QRYSTJ->(POSICIONE("SB1",1,XFILIAL("SB1")+CPRODUTO,"B1_COD")) 	// POSICIONA NO PRODUTO

		NPRECO  := QRYSTJ->(FTRAZTABPR(CPROJET,TJ_CODBEM,CPRODUTO))  	// TRAZ O PREÇO DA TABELA DE PREÇO DO PROJETO
		CDOCORI := QRYSTJ->TJ_ORDEM
		IF ! FPG->(DBSEEK(XFILIAL("FPG")+CPROJET+CTIPO+CDOCORI))  //POSICIONA NO CUSTO EXTRA

			_cSeq := GetSx8Num("FPG","FPG_SEQ")
			ConfirmSx8()

			RECLOCK("FPG",.T.)
			FPG->FPG_FILIAL := XFILIAL("FPG")
			FPG->FPG_PROJET := CPROJET
			FPG->FPG_TIPO   := CTIPO
			FPG->FPG_CUSTO  := FTRAZTIPO(CTIPO)  //TRAZ A DESCRIÇÃO DO TIPO INFORMADO
			FPG->FPG_DOCORI := CDOCORI
			FPG->FPG_PRODUT := CPRODUTO
			FPG->FPG_DESCRI := SB1->B1_DESC
			FPG->FPG_QUANT  := 1
			FPG->FPG_VALOR  := NPRECO
			FPG->FPG_DTENT  := QRYSTJ->TJ_DTORIGI
			FPG->FPG_RECORI := QRYSTJ->TJ_RECNO
			FPG->FPG_COBRA  := SPACE(01)
			FPG->FPG_JUNTO  := SPACE(01)
			FPG->FPG_STATUS := "1"
			FPG->FPG_DESPES := QRYSTJ->TJ_CODBEM
			FPG->FPG_SEQ    := _cSEq
			FPG->(MSUNLOCK())
		ENDIF
		QRYSTJ->(DBSKIP())
	ENDDO 

RETURN NIL 

// TRAZ O PREÇO DA TABELA DE PREÇO DO PROJETO
STATIC FUNCTION FTRAZTABPR(CPROJET,CCODBEM,CPRODUTO) 
LOCAL NPOS
LOCAL ATABZA5  := {}
LOCAL ATABZLG  := {}
LOCAL NRET     := 0
LOCAL AAREAZA0 := FP0->(GETAREA())
LOCAL AAREAZA5 := FP4->(GETAREA())
LOCAL AAREAZLG := FPO->(GETAREA())
LOCAL AAREADA1 := DA1->(GETAREA())

	FP0->(DBSETORDER(1))
	FP4->(DBSETORDER(1))
	FPO->(DBSETORDER(4))
	DA1->(DBSETORDER(1))

	FP0->(DBSEEK(XFILIAL("FP0")+CPROJET)) 		// POSICIONA NO PROJETO

	FPO->(DBSEEK(XFILIAL("FPO")+CPROJET)) 		// POSICIONA NA PROGRAMAÇÃO DIÁRIA
	WHILE FPO->(!EOF() .AND. FPO_FILIAL+FPO_PROJET==XFILIAL("FPO")+CPROJET)
		IF FPO->(FPO_FROTA<>CCODBEM)
			FPO->(DBSKIP())
			LOOP
		ENDIF
		FPO->(AADD(ATABZLG,{CCODBEM,FPO_DTINI,FPO_DTFIM}))
		FPO->(DBSKIP())
	ENDDO 

	FP4->(DBSEEK(XFILIAL("FP4")+CPROJET)) 		// POSICIONA NO EQUIPAMENTO
	WHILE FP4->(!EOF() .AND. FP4_FILIAL+FP4_PROJET==XFILIAL("FP4")+CPROJET)
		IF FP4->(FP4_GUINDA<>CCODBEM)
			FP4->(DBSKIP())
			LOOP
		ENDIF
		FP4->(AADD(ATABZA5,{CPRODUTO,FP4_CODTAB}))
		FP4->(DBSKIP())
	ENDDO 

	FOR NPOS:=1 TO LEN(ATABZA5)
		DA1->(DBSEEK(XFILIAL("DA1")+ATABZA5[NPOS,2]+CPRODUTO))  //POSICIONA NA TABELA DE PREÇO
		NRET := DA1->DA1_PRCVEN 
	NEXT

	FP0->(RESTAREA(AAREAZA0))
	FP4->(RESTAREA(AAREAZA5))
	FPO->(RESTAREA(AAREAZLG))
	DA1->(RESTAREA(AAREADA1))

RETURN NRET

STATIC FUNCTION FMONTASTJ(CALIASQRY,CPROJET) 
LOCAL AESTRU
LOCAL CQRY
LOCAL NPOS   := 0 
Local _cCampos := ""

	IF SELECT(CALIASQRY) > 0
		(CALIASQRY)->(DBCLOSEAREA())
	ENDIF

	_cCampos := "TJ_CODBEM,TJ_ORDEM,TJ_SERVICO,TJ_XPROJET,TJ_DTORIGI,TJ_FILIAL,TJ_RECNO"

	CQRY     := "SELECT"
	CQRY     += " TJ_CODBEM, TJ_ORDEM, TJ_SERVICO, TJ_XPROJET, " + CRLF
	CQRY     += " TJ_DTORIGI, TJ_FILIAL, R_E_C_N_O_ AS TJ_RECNO" + CRLF
	IF STJ->(FIELDPOS("TJ_XPRODUT")>0)
		CQRY += ", TJ_XPRODUT " + CRLF
		_cCampos += ",TJ_XPRODUT"
	ENDIF
	CQRY     += " FROM " + RETSQLNAME("STJ") + " STJ" + CRLF
	CQRY     += " WHERE TJ_FILIAL = '" + XFILIAL("STJ") + "'" + CRLF
	CQRY     += " AND TJ_XPROJET = '" + CPROJET + "'" + CRLF
	CQRY     += " AND STJ.D_E_L_E_T_=''" + CRLF
	IF STJ->(FIELDPOS("TJ_XPRODUT")>0)
		CQRY += " ORDER BY TJ_XPRODUT" + CRLF
	ENDIF
	CQRY     := CHANGEQUERY( CQRY )
	DBUSEAREA(.T., "TOPCONN", TCGENQRY(,,CQRY), CALIASQRY, .F., .T.)

	AESTRU := STJ->(DBSTRUCT())

	FOR NPOS:=1 TO LEN(AESTRU)
		IF AESTRU[NPOS,2]<>"C" .AND. AESTRU[NPOS,2]<>"M"
			//IF (CALIASQRY)->(!TYPE(AESTRU[NPOS,1])=="U")
			If alltrim(AESTRU[NPOS,1]) $ _cCampos
				TCSETFIELD(CALIASQRY,AESTRU[NPOS,1],AESTRU[NPOS,2],AESTRU[NPOS,3],AESTRU[NPOS,4])
			ENDIF
		ENDIF
	NEXT NPOS 

RETURN NIL

FUNCTION LOCA00703(OBROWSE)
LOCAL LRET
LOCAL CPROJET := CPROJETX
LOCAL CNUMAS  := OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSNRA]

	IF ! FVERZLFSIT(CPROJET,CNUMAS)  //VERIFICA SITUAÇÃO DA MEDIÇÃO
		RETURN .F.
	ENDIF

	DO CASE
	CASE EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]) .AND. EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB])
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]:=CMARCA
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB]:="S"
	CASE !EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]) .AND. OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB]=="S"
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]:=CMARCA
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB]:="N"
	OTHERWISE
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]:=SPACE(01)
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSCOB]:=SPACE(01)
	ENDCASE

	LRET := LOCA00704(OBROWSE)

RETURN LRET

FUNCTION LOCA00704(OBROWSE)
LOCAL LRET
	LRET := (!EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]))
RETURN LRET

FUNCTION LOCA00705(OBROWSE)
	OBROWSE:REFRESH(.T.)
	OBROWSE:SETFOCUS()
RETURN NIL

FUNCTION LOCA00706(CPROJET)
	DO CASE
	CASE EMPTY(CPROJET)
		IF MSGYESNO(STR0039) //"CONFIRMA A ATUALIZAÇÃO DAS DESPESAS ??"
			FP0->(DBSETORDER(1)) 		// ZA0_FILIAL+ZA0_PROJET 
			FP0->(DBGOTOP())
			WHILE FP0->(!EOF())
				CPROJET:=FP0->FP0_PROJET
				FTRAZSC7(CPROJET)
				FTRAZZL1(CPROJET)
				FTRAZSTJ(CPROJET)
				FP0->(DBSKIP())
			ENDDO 
		ENDIF
	OTHERWISE
		FTRAZSC7(CPROJET)
		FTRAZZL1(CPROJET)
		FTRAZSTJ(CPROJET)
	ENDCASE
RETURN NIL

// TRAZ A DESCRIÇÃO DO TIPO INFORMADO
STATIC FUNCTION FTRAZTIPO(CTIPO)  
LOCAL CRET := ""
	DO CASE
	CASE CTIPO == "1"
		CRET := STR0040        //1=PEDIDO DE COMPRA,2=ADIANTAMENTO MOTORISTA,3=DESPESA VIAGEM,4=ORDEM DE SERVICO //"PEDIDO DE COMPRA"
	CASE CTIPO == "2"
		CRET := STR0041  //1=PEDIDO DE COMPRA,2=ADIANTAMENTO MOTORISTA,3=DESPESA VIAGEM,4=ORDEM DE SERVICO //"ADIANTAMENTO MOTORISTA"
	CASE CTIPO == "3"
		CRET := STR0042          //1=PEDIDO DE COMPRA,2=ADIANTAMENTO MOTORISTA,3=DESPESA VIAGEM,4=ORDEM DE SERVICO //"DESPESA VIAGEM"
	CASE CTIPO == "4"
		CRET := STR0043        //1=PEDIDO DE COMPRA,2=ADIANTAMENTO MOTORISTA,3=DESPESA VIAGEM,4=ORDEM DE SERVICO //"ORDEM DE SERVICO"
	ENDCASE
RETURN CRET

// TRAZ O CLIENTE DO PROJETO INFORMADO
STATIC FUNCTION FTRAZCLI(CPROJET)  
LOCAL AAREA := GETAREA()
LOCAL CCLI  := ""
LOCAL CLOJ  := ""
LOCAL CNOM  := ""

	FP0->( DBSETORDER(1) )
	IF FP0->( DBSEEK( XFILIAL("FP0") + CPROJET ) )
		CCLI := FP0->FP0_CLI
		CLOJ := FP0->FP0_LOJA
		CNOM := FP0->FP0_CLINOM
	ENDIF

	RESTAREA( AAREA )

RETURN { CCLI, CLOJ, CNOM }

// VINCULA AS 
FUNCTION LOCA00707(CPROJET)
LOCAL ODLG,OBROWSE,ACOLS,ACOLS0,AHEADER,BHEADER,AESTRU
LOCAL BMARK      := { || IF(LOCA00709(OBROWSE),'LBOK','LBNO') }
LOCAL BLDBLCLICK := { |OBROWSE| LOCA00708(OBROWSE) }
LOCAL BHEADERCLI := { |OBROWSE| LOCA00710(OBROWSE) }
LOCAL ACLIENTE,CNOMANT
LOCAL NLINDLG  := 600-100
LOCAL NCOLDLG  := 800
LOCAL NLINPAN  := 230-50
LOCAL NCOLPAN  := 390
LOCAL NLINBOT  := 280-50
LOCAL NPOS     := 0 
PRIVATE CPROJETX := CPROJET
PRIVATE CNRAS    := FPG->FPG_NRAS
PRIVATE CMARCA   := GETMARK()
PRIVATE NPOSMAR,NPOSTIP,NPOSCOB,NPOSCUS,NPOSDOC,NPOSNRA,NPOSCOD,NPOSDES,NPOSQUA,NPOSVAL,NPOSDAT,NPOSREC,NPOSREO,NPOSCDE,NPOSDDE

	M->FPG_PROJET := ""
	M->FPG_OBRA   := ""

	ACLIENTE := FTRAZCLI(CPROJET) 		// TRAZ O CLIENTE DO PROJETO INFORMADO
	CNOMANT  := ACLIENTE[3] 			// 1=A1_COD,2=A1_LOJA,3=A1_NOME

	FMONTAZC1("QRYFPG",CPROJET) 		// MONTA A QUERY

	ACOLS := {} 

	QRYFPG->(DBGOTOP())
	WHILE QRYFPG->(!EOF())

		AESTRU := {} 
		QRYFPG->(AADD(AESTRU,{SPACE(01) ,""          ,""            ,"" ,""                 ,0,00,0}));NPOSMAR:=LEN(AESTRU)
		QRYFPG->(AADD(AESTRU,{FPG_COBRA ,"FPG_COBRA" ,STR0016     ,"C","@X"               ,1,LEN(FPG->FPG_COBRA ),0}));NPOSCOB:=LEN(AESTRU) //"COBRAR?"
		QRYFPG->(AADD(AESTRU,{FPG_NRAS  ,"FPG_NRAS"  ,STR0018      ,"C","@X"               ,1,LEN(FPG->FPG_NRAS  ),0}));NPOSNRA:=LEN(AESTRU) //"NRO.AS"
		QRYFPG->(AADD(AESTRU,{FPG_CUSTO ,"FPG_CUSTO" ,"LOCR03102"       ,"C","@X"               ,1,LEN(FPG->FPG_CUSTO ),0}));NPOSCUS:=LEN(AESTRU)
		QRYFPG->(AADD(AESTRU,{FPG_DOCORI,"FPG_DOCORI",STR0022  ,"C","@X"               ,1,LEN(FPG->FPG_DOCORI),0}));NPOSDOC:=LEN(AESTRU) //"DOC.ORIGEM"
		QRYFPG->(AADD(AESTRU,{FPG_PRODUT,"FPG_PRODUT",STR0023     ,"C","@X"               ,1,LEN(FPG->FPG_PRODUT),0}));NPOSCOD:=LEN(AESTRU) //"PRODUTO"
		QRYFPG->(AADD(AESTRU,{FPG_DESCRI,"FPG_DESCRI",STR0019   ,"C","@X"               ,1,LEN(FPG->FPG_DESCRI),0}));NPOSDES:=LEN(AESTRU) //"DESCRICAO"
		QRYFPG->(AADD(AESTRU,{FPG_QUANT ,"FPG_QUANT" ,STR0020  ,"C","@E 999,999,999.99",2,12,0}));NPOSQUA:=LEN(AESTRU) //"QUANTIDADE"
		QRYFPG->(AADD(AESTRU,{FPG_VALOR ,"FPG_VALOR" ,STR0021       ,"C","@E 999,999,999.99",2,12,0}));NPOSVAL:=LEN(AESTRU) //"VALOR"
		QRYFPG->(AADD(AESTRU,{FPG_DTENT ,"FPG_DTENT" ,STR0024        ,"D","@E"               ,1,08,0}));NPOSDAT:=LEN(AESTRU) //"DATA"
		QRYFPG->(AADD(AESTRU,{FPG_RECNO ,"FPG_RECNO" ,STR0025       ,"N","@E 99999999"      ,1,08,0}));NPOSREC:=LEN(AESTRU) //"RECNO"
		QRYFPG->(AADD(AESTRU,{FPG_RECORI,"FPG_RECORI",STR0026,"C","@R 99999999"      ,1,08,0}));NPOSREO:=LEN(AESTRU) //"RECNO ORIGEM"
		QRYFPG->(AADD(AESTRU,{FPG_CODDES,"FPG_CODDES",STR0027 ,"C","@X"               ,1,LEN(FPG->FPG_CODDES),0}));NPOSCDE:=LEN(AESTRU) //"COD.DESPESA"
		QRYFPG->(AADD(AESTRU,{FPG_DESPES,"FPG_DESPES",STR0028,"C","@X"               ,1,LEN(FPG->FPG_DESPES),0}));NPOSDDE:=LEN(AESTRU) //"DESC.DESPESA"

		ACOLS0 := {} 
		FOR NPOS:=1 TO LEN(AESTRU)
			AADD(ACOLS0,AESTRU[NPOS,1])
		NEXT NPOS 
		AADD(ACOLS,ACOLS0)

		QRYFPG->(DBSKIP())
	ENDDO 

	IF LEN(ACOLS) == 0
		MSGALERT(STR0032 , STR0033) //"NÃO EXISTEM CUSTOS EXTRAS PARA O PROJETO SELECIONADO."###"GPO - CADZC1.PRW"
		RETURN NIL
	ENDIF

	AHEADER:={}
	FOR NPOS:=2 TO LEN(AESTRU)
		BHEADER:="{||ACOLS[OBROWSE:AT(),"+STRZERO(NPOS,2)+"]}"
		AADD(AHEADER,{AESTRU[NPOS,3],&BHEADER,AESTRU[NPOS,4],AESTRU[NPOS,5],AESTRU[NPOS,6],AESTRU[NPOS,7],AESTRU[NPOS,8]})
	NEXT

	DEFINE MSDIALOG ODLG TITLE STR0009 FROM 0,0 TO NLINDLG,NCOLDLG PIXEL //"VINCULA AS"
		@ 005,005 SAY OEMTOANSI(STR0035)  SIZE 040,030 //"PROJETO"
		@ 005,065 SAY OEMTOANSI(STR0036)  SIZE 040,030 //"CLIENTE"
		@ 005,275 SAY OEMTOANSI(STR0018)   SIZE 040,030 //"NRO.AS"
		@ 013,005 GET CPROJET   WHEN .F.    SIZE 050,030 
		@ 013,065 GET CNOMANT   WHEN .F.    SIZE 200,030 
		@ 013,275 GET CNRAS     F3 "FPG2"  SIZE 100,030  VALID ASVALIDA()
		@ 045,004 MSPANEL OPANEL PROMPT ""  SIZE NCOLPAN,NLINPAN OF ODLG
		OBROWSE:=FWBROWSE():NEW()
		OBROWSE:SETDATAARRAY()
		OBROWSE:SETARRAY(ACOLS)
		OBROWSE:ADDMARKCOLUMNS(BMARK,BLDBLCLICK,BHEADERCLI)
		OBROWSE:SETCOLUMNS(AHEADER)
		OBROWSE:SETOWNER(OPANEL)
		OBROWSE:DISABLEREPORT()
		OBROWSE:DISABLECONFIG()
		OBROWSE:ACTIVATE()

		@ NLINBOT,050 BUTTON STR0050     SIZE 50,15 ACTION IF(FVINCULA(OBROWSE),CLOSE(ODLG),OBROWSE:SETFOCUS()) //"_VINCULA"
		@ NLINBOT,110 BUTTON STR0038        SIZE 50,15 ACTION CLOSE(ODLG) //"_SAIR"
	ACTIVATE MSDIALOG ODLG CENTERED

RETURN NIL

STATIC FUNCTION ASVALIDA()
	FQ5->( DBSETORDER(9) )
	IF ! FQ5->( DBSEEK( XFILIAL("FQ5") + CNRAS, .T. ) )
		MSGALERT(STR0051 , STR0033) //"VINCULAR AS: AS NAO ENCONTRADA!"###"GPO - CADZC1.PRW"
		RETURN .F.
	ENDIF
RETURN .T.

// BOTÃO: "VINCULA"
STATIC FUNCTION FVINCULA(OBROWSE)
LOCAL NPOS , ATABAUX
LOCAL AAREAZC1 := FPG->(GETAREA()) 

	IF ! MSGYESNO(STR0052 , STR0033)  //"CONFIRMA O VINCULO ??"###"GPO - CADZC1.PRW"
		RETURN .F.
	ENDIF

	ATABAUX := OBROWSE:DATA():AARRAY

	FOR NPOS:=1 TO LEN(ATABAUX)
		IF ATABAUX[NPOS,NPOSMAR]==CMARCA
			FQ5->( DBSETORDER(9) )
			IF FQ5->( DBSEEK( XFILIAL("FQ5") + ATABAUX[NPOS,NPOSNRA], .T. ) )
				FPG->(DBGOTO(ATABAUX[NPOS,NPOSREC]))  //POSICIONA NO ZC1

				If empty(FPG->FPG_SEQ)
					_cSeq := GetSx8Num("FPG","FPG_SEQ")
					ConfirmSx8()
					If FPG->(RecLock("FPG",.F.))
						FPG->FPG_SEQ := _cSeq
						FPG->(MsUnlock())
					EndIF
				EndIf

				IF FPG->(RECLOCK("FPG",.F.))
					FPG->FPG_NRAS   := ATABAUX[NPOS,NPOSNRA]
					FPG->FPG_PROJET := FQ5->FQ5_SOT
					FPG->FPG_OBRA   := FQ5->FQ5_OBRA
					FPG->(MSUNLOCK())
				ENDIF
			ENDIF
		ENDIF
	NEXT

	OBROWSE:REFRESH(.T.) 
	OBROWSE:SETFOCUS() 

	FPG->(RESTAREA(AAREAZC1)) 

RETURN .T. 

// AUXILIAR: ZC1VINC() - "VINCULA AS" 
FUNCTION LOCA00708(OBROWSE)
LOCAL LRET
LOCAL CNUMAS  := OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSNRA]
LOCAL CPROJET := CPROJETX

	IF ! FVERZLFSIT(CPROJET,CNUMAS)  //VERIFICA SITUAÇÃO DA MEDIÇÃO
		RETURN .F.
	ENDIF

	DO CASE
	CASE EMPTY(CNRAS)
		MSGALERT(STR0053 , STR0033) //"PRIMEIRO SELECIONE UMA AS PARA VINCULAR !!"##"Rental"
	CASE EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]) .AND. !EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSNRA])
		MSGALERT(STR0054 ,  STR0033) //"ESTA DESPESA JÁ ESTÁ COM UMA AS VINCULADA !!"###"GPO - CADZC1.PRW"
	CASE EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR])
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]:=CMARCA
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSNRA]:=CNRAS
	OTHERWISE
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR]:=SPACE(01)
		OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSNRA]:=SPACE(01)
	ENDCASE

	LRET := LOCA00709(OBROWSE)

RETURN LRET

// AUXILIAR: ZC1VINC() - "VINCULA AS" 
FUNCTION LOCA00709(OBROWSE)
LOCAL LRET
	IF OBROWSE:AT() == 0
		RETURN .F.
	ENDIF
	LRET := ! EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR])
RETURN LRET

// AUXILIAR: ZC1VINC() - "VINCULA AS" 
FUNCTION LOCA00710(OBROWSE)
	OBROWSE:REFRESH(.T.)
	OBROWSE:SETFOCUS()
RETURN NIL

// DESVINCULA AS 
FUNCTION LOCA00711(CPROJET)
LOCAL ODLG,OBROWSE,ACOLS,ACOLS0,AHEADER,BHEADER,AESTRU
LOCAL BMARK      := { || IF(LOCA00713(OBROWSE),'LBOK','LBNO') }
LOCAL BLDBLCLICK := { |OBROWSE| LOCA00712(OBROWSE) }
LOCAL BHEADERCLI := { |OBROWSE| LOCA00714(OBROWSE) }
LOCAL ACLIENTE , CNOMANT
LOCAL NLINDLG := 600-100
LOCAL NCOLDLG := 800
LOCAL NLINPAN := 230-50
LOCAL NCOLPAN := 390
LOCAL NLINBOT := 280-50
LOCAL NPOS    := 0 
PRIVATE CPROJETX:=CPROJET 		// VARIÁVEL PRIVATE !!
PRIVATE CMARCA:=GETMARK()
PRIVATE NPOSMAR,NPOSTIP,NPOSCOB,NPOSCUS,NPOSDOC,NPOSNRA,NPOSCOD,NPOSDES,NPOSQUA,NPOSVAL,NPOSDAT,NPOSREC,NPOSREO,NPOSCDE,NPOSDDE

	ACLIENTE := FTRAZCLI(CPROJET) 	// TRAZ O CLIENTE DO PROJETO INFORMADO
	CNOMANT  := ACLIENTE[3] 		// 1=A1_COD,2=A1_LOJA,3=A1_NOME

	FMONTAZC1("QRYFPG",CPROJET) 	// MONTA A QUERY

	ACOLS := {}

	QRYFPG->(DBGOTOP())
	WHILE QRYFPG->(!EOF())
		AESTRU := {} 
		QRYFPG->(AADD(AESTRU,{SPACE(01) ,"","","","",0,00,0}));NPOSMAR:=LEN(AESTRU)
		QRYFPG->(AADD(AESTRU,{FPG_COBRA ,"FPG_COBRA" ,STR0016,"C","@X",1,LEN(FPG->FPG_COBRA ),0}));NPOSCOB:=LEN(AESTRU) //"COBRAR?"
		QRYFPG->(AADD(AESTRU,{FPG_NRAS  ,"FPG_NRAS"  ,STR0018,"C","@X",1,LEN(FPG->FPG_NRAS  ),0}));NPOSNRA:=LEN(AESTRU) //"NRO.AS"

		QRYFPG->(AADD(AESTRU,{FPG_CUSTO ,"FPG_CUSTO" ,"LOCR03102","C","@X",1,LEN(FPG->FPG_CUSTO ),0}));NPOSCUS:=LEN(AESTRU)
		QRYFPG->(AADD(AESTRU,{FPG_DOCORI,"FPG_DOCORI",STR0022,"C","@X",1,LEN(FPG->FPG_DOCORI),0}));NPOSDOC:=LEN(AESTRU) //"DOC.ORIGEM"

		QRYFPG->(AADD(AESTRU,{FPG_PRODUT,"FPG_PRODUT",STR0023,"C","@X",1,LEN(FPG->FPG_PRODUT),0}));NPOSCOD:=LEN(AESTRU) //"PRODUTO"
		QRYFPG->(AADD(AESTRU,{FPG_DESCRI,"FPG_DESCRI",STR0019,"C","@X",1,LEN(FPG->FPG_DESCRI),0}));NPOSDES:=LEN(AESTRU) //"DESCRICAO"
		QRYFPG->(AADD(AESTRU,{FPG_QUANT ,"FPG_QUANT" ,STR0020,"C","@E 999,999,999.99",2,12,0}));NPOSQUA:=LEN(AESTRU) //"QUANTIDADE"
		QRYFPG->(AADD(AESTRU,{FPG_VALOR ,"FPG_VALOR" ,STR0021,"C","@E 999,999,999.99",2,12,0}));NPOSVAL:=LEN(AESTRU) //"VALOR"
		QRYFPG->(AADD(AESTRU,{FPG_DTENT ,"FPG_DTENT" ,STR0024,"D","@E",1,08,0}));NPOSDAT:=LEN(AESTRU) //"DATA"
		QRYFPG->(AADD(AESTRU,{FPG_RECNO ,"FPG_RECNO" ,STR0025,"N","@E 99999999",1,08,0}));NPOSREC:=LEN(AESTRU) //"RECNO"
		QRYFPG->(AADD(AESTRU,{FPG_RECORI,"FPG_RECORI",STR0026,"C","@R 99999999",1,08,0}));NPOSREO:=LEN(AESTRU) //"RECNO ORIGEM"
		QRYFPG->(AADD(AESTRU,{FPG_CODDES,"FPG_CODDES",STR0027,"C","@X",1,LEN(FPG->FPG_CODDES),0}));NPOSCDE:=LEN(AESTRU) //"COD.DESPESA"
		QRYFPG->(AADD(AESTRU,{FPG_DESPES,"FPG_DESPES",STR0028,"C","@X",1,LEN(FPG->FPG_DESPES),0}));NPOSDDE:=LEN(AESTRU) //"DESC.DESPESA"
		
		ACOLS0:={}
		FOR NPOS:=1 TO LEN(AESTRU)
			AADD(ACOLS0,AESTRU[NPOS,1])
		NEXT NPOS 
		AADD(ACOLS,ACOLS0)

		QRYFPG->(DBSKIP())
	ENDDO 

	IF LEN(ACOLS) == 0
		MSGALERT(STR0032 , STR0033) //"NÃO EXISTEM CUSTOS EXTRAS PARA O PROJETO SELECIONADO."###"GPO - CADZC1.PRW"
		RETURN NIL
	ENDIF

	AHEADER:={}
	FOR NPOS:=2 TO LEN(AESTRU)
		BHEADER:="{||ACOLS[OBROWSE:AT(),"+STRZERO(NPOS,2)+"]}"
		AADD(AHEADER,{AESTRU[NPOS,3],&BHEADER,AESTRU[NPOS,4],AESTRU[NPOS,5],AESTRU[NPOS,6],AESTRU[NPOS,7],AESTRU[NPOS,8]})
	NEXT NPOS 

	DEFINE MSDIALOG ODLG TITLE STR0010 FROM 0,0 TO NLINDLG,NCOLDLG PIXEL //"DESVINCULA AS"
		@ 005,005 SAY OEMTOANSI(STR0035) SIZE 040,030 //"PROJETO"
		@ 005,065 SAY OEMTOANSI(STR0036) SIZE 040,030 //"CLIENTE"
		@ 013,005 GET CPROJET SIZE 050,030 WHEN .F.
		@ 013,065 GET CNOMANT SIZE 200,030 WHEN .F.
		@ 045,004 MSPANEL OPANEL PROMPT "" SIZE NCOLPAN,NLINPAN OF ODLG
		OBROWSE := FWBROWSE():NEW()
		OBROWSE:SETDATAARRAY()
		OBROWSE:SETARRAY(ACOLS)
		OBROWSE:ADDMARKCOLUMNS(BMARK,BLDBLCLICK,BHEADERCLI)
		OBROWSE:SETCOLUMNS(AHEADER)
		OBROWSE:SETOWNER(OPANEL)
		OBROWSE:DISABLEREPORT()
		OBROWSE:DISABLECONFIG()
		OBROWSE:ACTIVATE()
		@ NLINBOT,050 BUTTON STR0055   SIZE 50,15 ACTION IF(FDESVINC(OBROWSE),CLOSE(ODLG),OBROWSE:SETFOCUS()) //"_DESVINCULA"
		@ NLINBOT,110 BUTTON STR0038         SIZE 50,15 ACTION CLOSE(ODLG) //"_SAIR"
	ACTIVATE MSDIALOG ODLG CENTERED

RETURN NIL

// AUXILIAR: ZC1DESV() - "DESVINCULA AS" 
STATIC FUNCTION FDESVINC(OBROWSE)
LOCAL NPOS , ATABAUX
LOCAL AAREAZC1 := FPG->(GETAREA()) 

	IF ! MSGYESNO(STR0056 , STR0033)  //"CONFIRMA O DESVINCULO ??"###"GPO - CADZC1.PRW"
		RETURN(.F.)
	ENDIF

	ATABAUX := OBROWSE:DATA():AARRAY

	FOR NPOS:=1 TO LEN(ATABAUX)
		IF ATABAUX[NPOS,NPOSMAR]==CMARCA
			FPG->(DBGOTO(ATABAUX[NPOS,NPOSREC]))  //POSICIONA NO ZC1

			If empty(FPG->FPG_SEQ)
				_cSeq := GetSx8Num("FPG","FPG_SEQ")
				ConfirmSx8()
				If FPG->(RecLock("FPG",.F.))
					FPG->FPG_SEQ := _cSeq
					FPG->(MsUnlock())
				EndIF
			EndIf

			IF FPG->(RECLOCK("FPG",.F.))
				FPG->FPG_NRAS   := "" 
				FPG->FPG_OBRA   := "" 
			//	FPG->FPG_PROJET := "" 
				FPG->(MSUNLOCK())
			ENDIF
		ENDIF
	NEXT

	OBROWSE:REFRESH(.T.)
	OBROWSE:SETFOCUS()

	FPG->(RESTAREA(AAREAZC1))

RETURN .T.

// AUXILIAR: ZC1DESV() - "DESVINCULA AS" 
FUNCTION LOCA00712(OBROWSE)
LOCAL NPOS
LOCAL LRET 
LOCAL CNUMAS  := OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSNRA]
LOCAL CPROJET := CPROJETX

	IF ! FVERZLFSIT(CPROJET,CNUMAS) 		// VERIFICA SITUAÇÃO DA MEDIÇÃO
		RETURN .F.
	ENDIF

	NPOS := OBROWSE:AT()

	DO CASE
	CASE EMPTY(OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]) .AND. EMPTY(OBROWSE:DATA():AARRAY[NPOS,NPOSNRA])
		MSGALERT(STR0057 , STR0033) //"ESTA DESPESA NÃO TEM AS VINCULADA !!"###"GPO - CADZC1.PRW"
	CASE OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]==CMARCA
		OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]:=SPACE(01)
	OTHERWISE
		OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]:=CMARCA
	ENDCASE

	LRET := LOCA00709(OBROWSE)

RETURN LRET

// --> AUXILIAR: ZC1DESV() - "DESVINCULA AS" 
FUNCTION LOCA00713(OBROWSE)
LOCAL LRET
	LRET := !EMPTY(OBROWSE:DATA():AARRAY[OBROWSE:AT(),NPOSMAR])
RETURN LRET

FUNCTION LOCA00714(OBROWSE)
LOCAL NPOS
	FOR NPOS:=1 TO LEN(OBROWSE:DATA():AARRAY)
		DO CASE
		CASE EMPTY(OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]) .AND. EMPTY(OBROWSE:DATA():AARRAY[NPOS,NPOSNRA])
		CASE OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]==CMARCA
			OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]:=SPACE(01)
		OTHERWISE
			OBROWSE:DATA():AARRAY[NPOS,NPOSMAR]:=CMARCA
		ENDCASE
	NEXT
	OBROWSE:REFRESH(.T.)
	OBROWSE:SETFOCUS()
RETURN NIL

// --> VERIFICA SITUAÇÃO DA MEDIÇÃO.
STATIC FUNCTION FVERZLFSIT(CPROJET,CNUMAS)  
LOCAL LRET := .T.
	FPN->(DBSETORDER(2)) 				// FPN_FILIAL+FPN_AS+FPN_PROJET+FPN_OBRA+FPN_VIAGEM
	FPN->(DBSEEK(XFILIAL("FPN")+CNUMAS+CPROJET))  //POSICIONA NA MEDIÇÃO
	DO CASE
	CASE FPN->FPN_SITUAC == "2" 		// 1=DIGITADO,2=CONFIRMADO,3=CANCELADA,4=FATURADA,5=EM ABERTO,6=CANCELADA,7=ANALISE CLIENTE
		MSGALERT(STR0058 , STR0033) //"DESPESA COM MEDIÇÃO CONFIRMADA NÃO PODE SER ALTERADA !!"###"GPO - CADZC1.PRW"
		LRET := .F.
	CASE FPN->FPN_SITUAC == "7" 		// 1=DIGITADO,2=CONFIRMADO,3=CANCELADA,4=FATURADA,5=EM ABERTO,6=CANCELADA,7=ANALISE CLIENTE
		MSGALERT(STR0059 , STR0033) //"DESPESA COM MEDIÇÃO EM ANÁLISE PELO CLIENTE NÃO PODE SER ALTERADA !!"###"GPO - CADZC1.PRW"
		LRET := .F.
	ENDCASE
RETURN LRET

// CRIA UMA COPIA DO REGISTRO POSICIONADO FACILITANDO ASSIM O PROCESSO DE CUSTO EXTRA MANUAL COMO MOB E DESMOB.
FUNCTION LOCA00715()
LOCAL ANOVO := {}
	AADD( ANOVO, {"FPG_FILIAL"  , XFILIAL("FPG")} )
	AADD( ANOVO, {"FPG_PROJET"  , FPG->FPG_PROJET} )
	AADD( ANOVO, {"FPG_OBRA"    , FPG->FPG_OBRA} )
	AADD( ANOVO, {"FPG_TIPO"    , FPG->FPG_TIPO} )
	AADD( ANOVO, {"FPG_CUSTO"   , FPG->FPG_CUSTO} )
	AADD( ANOVO, {"FPG_CODDES"  , FPG->FPG_CODDES} )
	AADD( ANOVO, {"FPG_DESPES"  , FPG->FPG_DESPES} )
	AADD( ANOVO, {"FPG_PRODUT"	, FPG->FPG_PRODUT} )
	AADD( ANOVO, {"FPG_DESCRI"	, FPG->FPG_DESCRI} )
	AADD( ANOVO, {"FPG_QUANT"   , FPG->FPG_QUANT} )
	AADD( ANOVO, {"FPG_VLUNIT"  , FPG->FPG_VLUNIT} )
	AADD( ANOVO, {"FPG_VALTOT"  , FPG->FPG_VALTOT} )
	AADD( ANOVO, {"FPG_NRAS"    , FPG->FPG_NRAS} )
	AADD( ANOVO, {"FPG_COBRA"   , "S"} )
	AADD( ANOVO, {"FPG_JUNTO"   , "S"} )
	AADD( ANOVO, {"FPG_DTENT"   , DDATABASE} )
	AADD( ANOVO, {"FPG_STATUS"  , "1"} )
	_cSeq := GetSx8Num("FPG","FPG_SEQ")
	ConfirmSx8()
	AADD( ANOVO, {"FPG_SEQ"  , _cSeq} )
		
	IF EXISTBLOCK("ZC1NOCOP") 			// --> PONTO DE ENTRADA PARA ALTERAÇÃO DOS CAMPOS QUE NÃO SERÃO COPIADOS.
		ANOVO := EXECBLOCK("ZC1NOCOP",.T.,.T.,{ANOVO})
	ENDIF

	// REPLICA A LINHA POSICIONADA
	LOCA065("FPG" , ANOVO) 

RETURN NIL

// FILTRO CONSULTA PADRAO ZC1AS - REGISTRO SXB TIPO 6
FUNCTION LOCA00716()
	IF EMPTY( M->FPG_PROJET )
		RETURN .T.
	ENDIF

	IF FQ5->FQ5_SOT != M->FPG_PROJET
		RETURN .F.
	ENDIF

	IF ! EMPTY( M->FPG_OBRA ) .AND. FQ5->FQ5_OBRA != M->FPG_OBRA
		RETURN .F.
	ENDIF
RETURN .T.

/*
FUNCAO: LOCA00717
AUTOR: IT UP BUSINESS
DATA: 27/06/2017
DESCRICAO: INCLUSAO DE CUSTO EXTRA, VIA AXINCLUI.
*/
FUNCTION LOCA00717()
LOCAL _AAREAOLD := GETAREA()
LOCAL aButtons := {}
PRIVATE CCADASTRO := STR0060 //"INCLUSAO DE CUSTO EXTRA"

	// Frank em 07/12/2021
	//AADD(ABUTTONS , {"ANALITIC",{|| msgalert("TESTE") },"TESTE1","TESTE1"})
	if existblock("LOCA007A")
		aButtons := execblock("LOCA007A" , .T. , .T. , {aButtons}) 
	endif

	BEGIN TRANSACTION
		INCLUI := .T.
		ALTERA := .F.
		DBSELECTAREA("FPG")
		FPG->(DBSETORDER(1))
		IF EXISTBLOCK("LCZC1TOK") 			// --> PONTO DE ENTRADA NO TUDOOK DO CUSTO EXTRA.
			NOPC := AXINCLUI("FPG",FPG->(RECNO()),3,,,,"(U_LCZC1TOK(3)).and.GERANFPG()",,, aButtons )
		ELSE
			NOPC := AXINCLUI("FPG"  ,FPG->(RECNO()),3,,               ,,"GERANFPG()",,, aButtons )
		ENDIF

		if existblock("LOCA007D")
			nRet := If(nOpc==1,1,0)
			execblock("LOCA007D" , .T. , .T. , {nRet,3}) 
		EndIf

	END TRANSACTION

	RESTAREA ( _AAREAOLD )

RETURN 

/*
FUNCAO: ALTZC1
AUTOR: IT UP BUSINESS
DATA: 27/06/2017
DESCRICAO: ALTERACAO DE CUSTO EXTRA, VIA AXALTERA.
*/
FUNCTION LOCA00718()
LOCAL _AAREAOLD := GETAREA()
Local lLC0718VLD := ExistBlock("LC0718VL") // Ponto de entrada para entrar alteração
Local aButtons := {}

PRIVATE CCADASTRO := STR0061 //"ALTERACAO DE CUSTO EXTRA"

	If lLC0718VLD // Ponto de Entrada antes da Alteração
		If !ExecBlock("LC0718VL", .F., .F.)
			Return
		EndIf
	EndIf        

	// Frank em 07/12/2021
	//AADD(ABUTTONS , {"ANALITIC",{|| msgalert("TESTE") },"TESTE1","TESTE1"})
	if existblock("LOCA007B")
		aButtons := execblock("LOCA007B" , .T. , .T. , {aButtons}) 
	endif

	BEGIN TRANSACTION
		INCLUI := .F.
		ALTERA := .T.
						
		DBSELECTAREA("FPG")
		FPG->(DBSETORDER(1))
		
		IF EXISTBLOCK("LCZC1TOK") 			// --> PONTO DE ENTRADA NO TUDOOK DO CUSTO EXTRA.
			NOPC := AXALTERA("FPG",FPG->(RECNO()),4,,,,"(U_LCZC1TOK(4))",,,, aButtons )
		ELSE
			NOPC := AXALTERA("FPG",FPG->(RECNO()),4,,,,,,,, aButtons )
		ENDIF

		if existblock("LOCA007D")
			nRet := If(nOpc==1,1,0)
			execblock("LOCA007D" , .T. , .T. , {nRet  ,4}) 
		EndIf

	END TRANSACTION

	RESTAREA ( _AAREAOLD )

RETURN 

/*
FUNCAO: LOCA00719
AUTOR: IT UP BUSINESS
DATA: 27.06.2017
DESCRICAO: EXCLUSAO DE CUSTO EXTRA, VIA AXDELETA.
*/
FUNCTION LOCA00719(CPROJET)
LOCAL _AAREAOLD := GETAREA()
LOCAL _AAREAZC1 := FPG->(GETAREA())
LOCAL _LEXCLUI  := .T.
LOCAL _NOPC     := 0
LOCAL _NRECNO   := FPG->(RECNO())
LOCAL _NRECORI  := FPG->FPG_RECORI
LOCAL _CTIPO    := FPG->FPG_TIPO
LOCAL _CDOCORI  := FPG->FPG_DOCORI
LOCAL _CQUERY   := ""
LOCAL _ACAMPOS  := {}
Local lMvLocBac := SuperGetMv("MV_LOCBAC",.F.,.F.) //Integração com Módulo de Locações SIGALOC

PRIVATE CCADASTRO := STR0062 //"EXCLUSAO DE CUSTO EXTRA"

	IF FPG->FPG_STATUS == "2"
		
		If !lMvLocBac
			_cQuery := " SELECT C6_XAS , C6_PRODUTO , C6_VALOR , C6_TES "
		Else
			_cQuery := " SELECT FPZ_AS , C6_PRODUTO , C6_VALOR , C6_TES "
		EndIF
		_cQuery += " FROM " + RETSQLNAME("SC6") + " SC6 (NOLOCK) "
		If lMvLocBac

			_cQuery += "JOIN " + RETSQLNAME("SC5") + " SC5 (NOLOCK) ON "
			_cQuery += "C5_FILIAL = '"+xFilial("SC5")+"' AND  "
			_cQuery += "C5_NUM = C6_NUM AND " 
			_cQuery += "SC5.D_E_L_E_T_ = '' "

			_cQuery += "JOIN " + RETSQLNAME("FPZ") + " FPZ (NOLOCK) ON "
			_cQuery += "FPZ_FILIAL = '"+xFilial("FPZ")+"' AND  "
			_cQuery += "FPZ_PEDVEN = C6_NUM AND "
			_cQuery += "FPZ_PROJET = '"+CPROJET+"' AND "
			_cQuery += "FPZ_ITEM = C6_ITEM AND "
			_cQuery += "FPZ_EXTRA = 'S' AND "
			_cQuery += "FPZ_AS = '"+FPG->FPG_NRAS+"' AND "
			_cQuery += "FPZ.D_E_L_E_T_ = '' "
			
			_cQuery += " JOIN "+RETSQLNAME("FPY")+ " FPY (NOLOCK) ON "
			_cQuery += " FPY_FILIAL = '"+xFilial("SC5")+"' AND " 
			_cQuery += " FPY_PEDVEN = C5_NUM AND " 
			_cQuery += " FPY_STATUS <> '2' AND "
			_cQuery += " FPY_PROJET = '"+CPROJET+"' AND "
			_cQuery += " FPY.D_E_L_E_T_ = '' "
		EndIF

		_cQuery += " WHERE  C6_FILIAL  = '" + XFILIAL("SC6") + "' "
		If FPG->(FIELDPOS("FPG_XPED")) > 0
			_cQuery += " AND C6_NUM = '" + FPG->FPG_XPED + "' "
		EndIF
		_cQuery += " AND C6_PRODUTO = '" + FPG->FPG_PRODUT + "' "
		If !lMvLocBac
			_cQuery += " AND  C6_XEXTRA = 'S' "
			_cQuery += " AND  C6_XAS = '" + FPG->FPG_NRAS + "' "
		EndIF
		_cQuery += " AND SC6.D_E_L_E_T_ = '' "
		_cQuery := changequery(_cQuery) 

		IF SELECT("TRBSC6") > 0
			TRBSC6->(DBCLOSEAREA())
		ENDIF
		TCQUERY _CQUERY NEW ALIAS "TRBSC6"
		
		IF TRBSC6->(!EOF())
			MSGALERT(STR0063 , STR0033) //"O CUSTO EXTRA NÃO PODE SER EXCLUÍDO, POIS JÁ FOI FATURADO!"###"GPO - CADZC1.PRW"
			_LEXCLUI := .F.
		ENDIF
		
		TRBSC6->(DBCLOSEAREA())
	ENDIF

	IF _LEXCLUI
		
		DBSELECTAREA("FPG")
		FPG->(DBSETORDER(1))
		FPG->(DBGOTO(_NRECNO))
		
		AADD(_ACAMPOS,"FPG_PROJET")
		
		IF MSGYESNO(STR0064 , STR0033)  //"CONFIRMA A EXCLUSÃO DO CUSTO EXTRA ?"###"GPO - CADZC1.PRW"
			BEGIN TRANSACTION
				INCLUI := .F.
				ALTERA := .F.
		
				IF RECLOCK("FPG",.F.)
					FPG->(DBDELETE())		
					FPG->(MSUNLOCK())
					_NOPC := 1
				ENDIF
			//	_NOPC := FPG->(AXDELETA("FPG", FPG->(RECNO()),5,,_ACAMPOS))		
			END TRANSACTION
		ENDIF

		if existblock("LOCA007D")
			nRet := If(_NOPC==1,1,0)
			execblock("LOCA007D" , .T. , .T. , {nRet  ,5}) 
		EndIf

		// mantido apenas para customizacoes antigas, o novo ponto é o LOCA007D
		IF _NOPC == 1
			IF EXISTBLOCK("LCZC1EXC") //PONTO DE ENTRADA APOS A EXCLUSAO DE CUSTO EXTRA.
				EXECBLOCK("LCZC1EXC",.T.,.T.,{_NRECNO, _CTIPO, _CDOCORI, _NRECORI})
			ENDIF
		ENDIF
		
	ENDIF

	FPG->(RESTAREA ( _AAREAZC1 ))
	RESTAREA ( _AAREAOLD )

RETURN


// Rotina para acerto da numeração do FPG
// Frank Z Fuga em 19/04/2021
Function LOCA00721(_cAlias)
Local _cSeq

	If empty(_cAlias) .or. (_cAlias <> "FPG" .and. _cAlias <> "FQ4" .and. _cAlias <> "FQ8" .and. _cAlias <> "FQA")
		MsgAlert(STR0065,STR0066) //"Faltou preencher o Alias, ou informado o incorreto."###"Atenção!"
		Return
	EndIf

	If _cAlias == "FPG"
		FPG->(dbSetOrder(1))
		FPG->(dbGotop())
		While !FPG->(Eof())
			If empty(FPG->FPG_SEQ)
				_cSeq := GetSx8Num("FPG","FPG_SEQ")
				ConfirmSx8()
				FPG->(RecLock("FPG",.F.))
				FPG->FPG_SEQ := _cSeq
				FPG->(MsUnlock())
			EndIf
			FPG->(dbSkip())
		EndDo
	EndIF

	If _cAlias == "FQ4"
		FQ4->(dbSetOrder(1))
		FQ4->(dbGotop())
		While !FQ4->(Eof())
			If empty(FQ4->FQ4_SEQ)
				_cSeq := GetSx8Num("FQ4","FQ4_SEQ")
				ConfirmSx8()
				FQ4->(RecLock("FQ4",.F.))
				FQ4->FQ4_SEQ := _cSeq
				FQ4->(MsUnlock())
			EndIf
			FQ4->(dbSkip())
		EndDo
	EndIF

	MsgAlert(STR0067,STR0066) //"Acertos realizados com sucesso."###"Atenção!"
Return 


// Função para geracao do sequencial da FPG
// Frank Zwarg Fuga - 04/08/2021
Function GERANFPG
Local _cSeq
	If empty(M->FPG_SEQ)
		_cSeq := GetSx8Num("FPG","FPG_SEQ")
		ConfirmSx8()
		M->FPG_SEQ := _cSeq
	EndIf
Return .T.

/*/ LC007DOC
description	Chama MsDocument
author José Eulálio
version	1.00
since 16/11/2021
/*/			
FUNCTION LC007DOC()
	ItupDocs("FPG", FPG->(Recno()))
RETURN

/*/ ItupDocs
description	Chama MsDocument
author José Eulálio
version 1.00
since 06/12/2019
/*/			
Function ItupDocs(cEntidade, nRecEnt)
Local aAreaAC9	:= AC9->(GetArea())

	//Obrigatório criar aRotina Private
	Private aRotina := {{"Conhecimento",'MsDocument',0,4,0,NIL}} 

	//Com nOpc == 1 funciona
	MsDocument(cEntidade, nRecEnt, 1)

	RestArea(aAreaAC9)
Return

/*/LC007BCOPV
description	Copia o Banco de Conhecimento do Custo Extra para o Pedido de Venda
author José Eulálio
version	1.00
since 17/11/2021
/*/			
Function LC007BCOPV(cPvFil , cPvNum)
Local nX		:= 0
Local cChave	:= ""
Local aAreaAC9	:= AC9->(GetArea())
Local aCodObj	:= {}

	//Localiza Documentos
	AC9->(DBSETORDER(2)) 		// AC9_FILIAL+AC9_ENTIDA+AC9_FILENT+AC9_CODENT+AC9_CODOBJ 
	If AC9->(DBSEEK(XFILIAL("AC9") + "FPG" + FPG->FPG_FILIAL + FPG->FPG_PROJET + FPG->FPG_NRAS + FPG->FPG_SEQ))
		cChave	:= AC9->(AC9_FILIAL+AC9_ENTIDA+AC9_FILENT+AC9_CODENT)
		While !AC9->(EoF()) .And. cChave == AC9->(AC9_FILIAL+AC9_ENTIDA+AC9_FILENT+AC9_CODENT)
			Aadd(aCodObj, AC9->AC9_CODOBJ)
			AC9->(DbSkip())
		EndDo
	EndIf

	//Grava Conhecimento no Pedido
	For nX := 1 To Len(aCodObj)
		RecLock("AC9", .T.)
			AC9->AC9_FILIAL := xFilial("AC9")
			AC9->AC9_FILENT := cPvFil
			AC9->AC9_ENTIDA := "SC5" 
			AC9->AC9_CODENT := cPvNum
			AC9->AC9_CODOBJ := aCodObj[nX]
		AC9->(MsUnlock())
	Next nX

	RestArea(aAreaAC9)

Return


// Visualizacao do custo extra
// Frank Z Fuga em 07/12/21
Function LOCA00722
LOCAL _AAREAOLD := GETAREA()
LOCAL aButtons := {}
PRIVATE CCADASTRO := STR0068 //"visualização de custo extra"

	// Frank em 07/12/2021
	//AADD(ABUTTONS , {"ANALITIC",{|| msgalert("TESTE") },"TESTE1","TESTE1"})
	if existblock("LOCA007C")
		aButtons := execblock("LOCA007C" , .T. , .T. , {aButtons}) 
	endif


	INCLUI := .F.
	ALTERA := .F.
	DBSELECTAREA("FPG")
	FPG->(DBSETORDER(1))
	NOPC := AXVISUAL("FPG"  ,FPG->(RECNO()),2,,,,            , aButtons )
	RESTAREA ( _AAREAOLD )

RETURN 

/*/LOCA00723
description	Nome do Cliente na Consulta Padraão FPG2
author José Eulálio
version	1.00
since 28/04/2022
/*/			
FUNCTION LOCA00723()
Local cRet		:= FQ5_NOMCLI
Local cNumAS	:= FQ5_AS
Local nX		:= 0
Local aArea		:= GetArea()
Local aAreaFPA	:= FPA->(GetArea())
Local aAreaFP1	:= FP1->(GetArea())

	For nX:=1 to 20
		If upper(alltrim(ProcName(nX))) $ "LOCA00717|LOCA00718"
			If M->FPG_PROJET == FQ5_SOT
				//Seleciona Cliente de acordo MULTPLUS FATURAMENTO NO CONTRATO - SIGALOC94-282
				FPA->(DbSetOrder(3)) //FPA_FILIAL+FPA_AS+FPA_VIAGEM
				If FPA->(DbSeek(xFilial("FPA") + cNumAS))
					If FPA->(ColumnPos("FPA_CLIFAT")) > 0 .And. !Empty(FPA->FPA_CLIFAT)
						cRet := FPA->FPA_NOMFAT
					Else
						FP1->(DbSetOrder(1)) //FP1_FILIAL+FP1_PROJET+FP1_OBRA
						If FP1->(DbSeek(xFilial("FP1") + FPA->(FPA_PROJET + FPA_OBRA)))				
							If !Empty(FP1->FP1_CLIDES)
								cRet := FP1->FP1_NOMDES
							EndIf
						EndIf
					EndIf
				EndIf
				RestArea(aAreaFPA)
				RestArea(aAreaFP1)
				RestArea(aArea)
			EndIf
		EndIf
	Next nX

Return cRet
