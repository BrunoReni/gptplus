#Include "UPDEST19.CH"
#Include 'TOTVS.ch'
#Include "FileIO.ch"
#INCLUDE "Fwlibversion.ch"

#Define PULALINHA CHR(13)+CHR(10)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ESTW001  ³ Autor ³ TOTVS                 ³ Data ³ 20/04/15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Geracao dos Campos de Custo em Partes                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Atualizacao EST                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

User Function ESTW001()

Local cTexto 		:= "" 

If FWLibVersion() >= "20221128"
    ESTW001()
    Return
ElseIf !FWIsInCallStack('ESTW001')
    cTexto := STR0027 //"Atenção: A versão atual da LIB instalada é #1[20220123]#, será executado o wizard antigo para criação dos campos do custo em partes. Considere atualizar a LIB para aplicação do wizard mais recente."
    FWAlertInfo(OEMToAnsi(I18N(cTexto, {FWLibVersion()})))
EndIf

cArqEmp				:= "SigaMat.Emp"
__cInterNet			:= Nil
Private aArqUpd		:= {}
Private aREOPEN		:= {}
Private cMessage
Private oMainWnd 

SET DELETED ON

cTexto := STR0001//"Esta rotina tem como objetivo gerar os campos referente ao Custo em Partes. "
cTexto += STR0002//"Ela deve ser utilizada em modo exclusivo! Faca um backup dos dicionários e "
cTexto += STR0003 + PULALINHA + PULALINHA//"da Base de Dados antes da atualização para eventuais falhas de atualização! "
cTexto += STR0004//"Deseja efetuar a atualização do Dicionário?"

lHistorico 	:= MsgYesNo(cTexto, "ESTW001")
lEmpenho	:= .F.
lAtuMnu		:= .F.

DEFINE WINDOW oMainWnd FROM 10,10 TO 10,30 TITLE STR0005 //"Atualização do Dicionário - ESTW001"

If lHistorico
	ACTIVATE WINDOW oMainWnd MAXIMIZED;
		ON INIT (Processa({|lEnd| ESTProc(@lEnd)},STR0006,STR0007,.F.),Final(STR0008))//"Processando"//"Aguarde, processando preparação dos arquivos"//"Atualização efetuada!"
Else
	oMainWnd:End()
EndIf
	
Return

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ ESTProc  ³ Autor ³ TOTVS                 ³ Data ³ 20/04/15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao de processamento da gravacao dos arquivos           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Atualizacao EST                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function ESTProc(lEnd)
Local cTexto    := ''
Local cFile     := ""
Local cMask     := "Arquivos Texto (*.TXT) |*.txt|"
Local nRecno    := 0
Local nI        := 0
Local nX        := 0
Local aRecnoSM0 := {}     
Local lOpen     := .F. 

ProcRegua(1)
IncProc(STR0009)//"Verificando integridade dos dicionários...."
If ( lOpen := MyOpenSm0Ex() )

	dbSelectArea("SM0")
	dbGotop()
	While !Eof() 
  		If Ascan(aRecnoSM0,{ |x| x[2] == M0_CODIGO}) == 0 //--So adiciona no aRecnoSM0 se a empresa for diferente
			Aadd(aRecnoSM0,{Recno(),M0_CODIGO})
		EndIf			
		dbSkip()
	EndDo	
		
	If lOpen
		For nI := 1 To Len(aRecnoSM0)
			SM0->(dbGoto(aRecnoSM0[nI,1]))
			RpcSetType(2) 
			RpcSetEnv(SM0->M0_CODIGO, SM0->M0_CODFIL)
			nModulo := 04 //SIGAEST
			lMsFinalAuto := .F.
			cTexto += Replicate("-",128)+CHR(13)+CHR(10)
			cTexto += STR0010+SM0->M0_CODIGO+SM0->M0_NOME+CHR(13)+CHR(10)//"Empresa : "

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Atualiza o dicionario de dados.³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IncProc(STR0011)//"Analisando Dicionario de Dados..."
			cTexto += ESTAtuSX3()
			                    
			__SetX31Mode(.F.)
			For nX := 1 To Len(aArqUpd)
				IncProc(STR0012+aArqUpd[nx]+"]")//"Atualizando estruturas. Aguarde... ["
				If Select(aArqUpd[nx])>0
					dbSelecTArea(aArqUpd[nx])
					dbCloseArea()
				EndIf
				X31UpdTable(aArqUpd[nx])
				If __GetX31Error()
					Alert(__GetX31Trace())
					Aviso(STR0013,STR0014+ aArqUpd[nx] + STR0015,{STR0016},2)//"Atencao!"//"Ocorreu um erro desconhecido durante a atualizacao da tabela : "//". Verifique a integridade do dicionario e da tabela."//"Continuar"
					cTexto += STR0017+aArqUpd[nx] +CHR(13)+CHR(10)//"Ocorreu um erro desconhecido durante a atualizacao da estrutura da tabela : "
				EndIf
			Next nX		
			RpcClearEnv()
			If !( lOpen := MyOpenSm0Ex() )
				Exit 
			EndIf 
		Next nI 
		   
		If lOpen
			
			cTexto := STR0018+CHR(13)+CHR(10)+cTexto//"Log da atualizacao "
			__cFileLog := MemoWrite(Criatrab(,.f.)+".LOG",cTexto)
			DEFINE FONT oFont NAME "Mono AS" SIZE 5,12
			DEFINE MSDIALOG oDlg TITLE STR0019 From 3,0 to 340,417 PIXEL//"Atualizacao concluida."
			@ 5,5 GET oMemo  VAR cTexto MEMO SIZE 200,145 OF oDlg PIXEL
			oMemo:bRClicked := {||AllwaysTrue()}
			oMemo:oFont:=oFont
			DEFINE SBUTTON  FROM 153,175 TYPE 1 ACTION oDlg:End() ENABLE OF oDlg PIXEL
			DEFINE SBUTTON  FROM 153,145 TYPE 13 ACTION (cFile:=cGetFile(cMask,""),If(cFile="",.t.,MemoWrite(cFile,cTexto))) ENABLE OF oDlg PIXEL //Salva e Apaga //"Salvar Como..."
			ACTIVATE MSDIALOG oDlg CENTER
			
		EndIf 
		
	EndIf
		
EndIf 	

Return(.T.)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ESTAtuSX3 ³ Autor ³ TOTVS                 ³ Data ³ 20/04/15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao de processamento da gravacao do SX3 - Campos        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Atualizacao EST                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function ESTAtuSX3()
Local aEstrut      := {}
Local lSX3	       := .F.
Local cTexto       := ''
Local i            := 0
Local j            := 0 
Local nX           := 0
Local nZ           := 0
Local nY           := 0
Local nRecnoSX3    := 0
Local cAlias       := ''
Local aSX3         := {}
Local aRegraCP     := {}
Local lMA330CP     := ExistBlock("MA330CP")
// Array com os campos que precisam ser criados para calculo do custo
Local aCampos      :={	{"B2_CP"  ,"B2_CM1"    ,"SB2","CP.Unit.","Custo em Partes Unitario"	},;
						{"B2_CPF" ,"B2_VFIM1"  ,"SB2","CP.Final","Custo em Partes Final"	},;
						{"B6_CP"  ,"B6_CUSTO1" ,"SB6","CP.Valor","Custo em Partes"			},;
						{"B9_CP"  ,"B9_VINI1"  ,"SB9","CP.Valor","Custo em Partes"			},;
						{"B9_CPM" ,"B2_CM1"    ,"SB9","CP.Unit.","Custo em Partes Unitario"	},;
						{"C2_CPF" ,"C2_VFIM1"  ,"SC2","CP.Final","Custo em Partes Final"	},;
						{"C2_CPI" ,"C2_VINI1"  ,"SC2","CP.Inic.","Custo em Partes Inicial"	},;
						{"C2_API" ,"C2_APRINI1","SC2","CP.AprIn","Apropriacao Inicial CP"	},;
						{"C2_APF" ,"C2_APRFIM1","SC2","CP.AprFm","Apropriacao Final CP"		},;
						{"D1_CP"  ,"D1_CUSTO"  ,"SD1","CP.Valor","Custo em Partes"			},;
						{"D2_CP"  ,"D2_CUSTO1" ,"SD2","CP.Valor","Custo em Partes"			},;
						{"D3_CP"  ,"D3_CUSTO1" ,"SD3","CP.Valor","Custo em Partes"			} }

aEstrut:= { "X3_ARQUIVO","X3_ORDEM"  ,"X3_CAMPO"  ,"X3_TIPO"   ,"X3_TAMANHO","X3_DECIMAL","X3_TITULO" ,"X3_TITSPA" ,"X3_TITENG" ,;
			"X3_DESCRIC","X3_DESCSPA","X3_DESCENG","X3_PICTURE","X3_VALID"  ,"X3_USADO"  ,"X3_RELACAO","X3_F3"     ,"X3_NIVEL"  ,;
			"X3_RESERV" ,"X3_CHECK"  ,"X3_TRIGGER","X3_PROPRI" ,"X3_BROWSE" ,"X3_VISUAL" ,"X3_CONTEXT","X3_OBRIGAT","X3_VLDUSER",;
			"X3_CBOX"   ,"X3_CBOXSPA","X3_CBOXENG","X3_PICTVAR","X3_WHEN"   ,"X3_INIBRW" ,"X3_GRPSXG" ,"X3_FOLDER", "X3_PYME"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inclui os campos da tabela de Saldo Inicial por OP           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If AliasInDic("SO0")
	Aadd(aCampos,{"O0_CPI" ,"O0_VINI1"  ,"SO0","CP.Inic.","Custo em Partes Inicial"	})
	Aadd(aCampos,{"O0_API" ,"O0_APRINI1","SO0","CP.AprIn","Apropriacao Inicial CP"	})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Preenche array com as regras do custo em partes.             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lMA330CP
	aRegraCP:=ExecBlock("MA330CP",.F.,.F.)
	If ValType(aRegraCP) # "A"
		aRegraCP:={}
	EndIf
Else
	cTexto := STR0025+CHR(13)+CHR(10) //O Ponto de Entrada MA330CP não está compilado no repositório! 
EndIf

If Len(aRegraCP) > 0
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclui o registro referente ao campo no SX3                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nY:=1 to Len(aCampos)
	
		For nX := 1 to Len(aRegraCP)+1

			dbSelectArea("SX3")
			dbSetOrder(2)
			dbSeek(aCampos[nY,2])
			nRecnoSX3 := Recno()
		
			For nZ := 1 to 5
	
				If !SX3->(MsSeek(aCampos[nY,1]+StrZero(nX,2)+StrZero(nz,2)))

					//-- Posiciona no Registro
					dbGoto(nRecnoSX3)
			
					Aadd(aSX3,{	aCampos[nY,3],;									//Arquivo
						 		"ZZ",;									  		//Ordem
								aCampos[nY,1]+StrZero(nX,2)+StrZero(nZ,2),;		//Campo
								"N",;											//Tipo
								SX3->X3_TAMANHO,;								//Tamanho
								SX3->X3_DECIMAL,;								//Decimal
								aCampos[nY,4]+Strzero(nX,2)+StrZero(nZ,2),;		//Titulo
								aCampos[nY,4]+Strzero(nX,2)+StrZero(nZ,2),;		//Titulo SPA
								aCampos[nY,4]+Strzero(nX,2)+StrZero(nZ,2),;		//Titulo ENG
								aCampos[nY,5],;									//Descricao
								aCampos[nY,5],;									//Descricao SPA
								aCampos[nY,5],;									//Descricao ENG
								SX3->X3_PICTURE,;								//Picture
								"",;											//VALID
								SX3->X3_USADO,;									//USADO
								"",;											//RELACAO
								"",;											//F3
								1,;												//NIVEL
								SX3->X3_RESERV,;								//RESERV
								"",;											//CHECK
								"",;											//TRIGGER
								"",;											//PROPRI
								"N",;											//BROWSE
								"",;											//VISUAL
								"",;											//CONTEXT
								"",;											//OBRIGAT
								"",;											//VLDUSER
								"",;										    //CBOX
								"",;											//CBOX SPA
								"",;											//CBOX ENG
								"",;											//PICTVAR
								"",;											//WHEN
								"",;											//INIBRW
								"",;											//SXG
								"",;											//FOLDER
								"S"})											//PYME 	
				EndIf
	
			Next nZ	

		Next nX

	Next nY

EndIf

ProcRegua(Len(aSX3))

SX3->(DbSetOrder(2))	

For i:= 1 To Len(aSX3)
	If !Empty(aSX3[i][1])
		If !dbSeek(aSX3[i,3])
			lSX3	:= .T.
			If !(aSX3[i,1]$cAlias)
				cAlias += STR0020 + aSX3[i,1]+" / "//"Tabela "
				dbSelectArea(aSX3[i,1])
				aAdd(aArqUpd,aSX3[i,1])
			EndIf
			RecLock("SX3",.T.)
			For j:=1 To Len(aSX3[i])
				If FieldPos(aEstrut[j])>0 .And. aSX3[i,j] != NIL
					FieldPut(FieldPos(aEstrut[j]),aSX3[i,j])
				EndIf
			Next j
			dbCommit
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
			MsUnLock()
			IncProc(STR0021)//"Atualizando Dicionario de Dados..."
		Endif
	EndIf
Next i

If lSX3
	cTexto := STR0022+cAlias+CHR(13)+CHR(10)//'Foram alteradas as estruturas das seguintes tabelas : '
EndIf

Return cTexto

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MyOpenSM0Ex³ Autor ³ TOTVS                ³ Data ³ 20/04/15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Efetua a abertura do SM0 exclusivo                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Atualizacao EST                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function MyOpenSM0Ex()

Local lOpen := .F. 
Local nLoop := 0 

For nLoop := 1 To 20

	OpenSM0Excl() 
	If !Empty( Select( "SM0" ) ) 
		lOpen := .T. 
		dbSetOrder(1)
		Exit	
	EndIf
	Sleep( 500 ) 
Next nLoop                                

Return( lOpen )

/*==============================================================
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @                                                             @
 @                        Novo Wizard                          @
 @                                                             @
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 ==============================================================*/

/*/{Protheus.doc} ESTW001
    Wizard para criação dos campos do custo em partes
    @type  Function
    @author Gianluca Moreira
    @since 13/02/2023
    /*/
Main Function ESTW001()
    Local oWizard   := Nil
    Local oJanela   := Nil
    Local aPags     := {}
    Local lBackup   := .F.
    Local cGrupo    := ''
    Local aGrupos   := {}
    Local aSenha    := {}
    Local aPartes   := {}
    Local aMoedas   := {}
    Local aCampos   := {}
    Local nI        := 0
    Local lGerouSDF := .F.
    Local cTexto    := ''

    If FWLibVersion() < "20221128"
        cTexto := STR0027 //"Atenção: A versão atual da LIB instalada é #1[20220123]#, será executado o wizard antigo para criação dos campos do custo em partes. Considere atualizar a LIB para aplicação do wizard mais recente."
        FWAlertInfo(OEMToAnsi(I18N(cTexto, {FWLibVersion()})))
        U_ESTW001()
        Return
    EndIf

    oJanela := TDialog():New(180,180,780,780,,,,,nOr(WS_VISIBLE,WS_POPUP),CLR_BLACK,CLR_WHITE,,,.T.)
    oWizard := FWWizardControl():New(oJanela)

    oWizard:ActiveUISteps()

    //Página 1 - Descrição do Wizard
    AAdd(aPags, oWizard:AddStep("1"))
    nI := Len(aPags)
    aPags[nI]:SetStepDescription(OEMToAnsi(I18N(STR0028))) //Informações do processo
    aPags[nI]:SetConstruction({|oPanel| Pag1(oPanel, @lBackup)})
    aPags[nI]:SetNextAction({|| Vld1(@lBackup)})
    aPags[nI]:SetCancelAction({|| .T.})

    //Página 2 - Seleção do grupo de empresas
    AAdd(aPags, oWizard:AddStep("2"))
    nI := Len(aPags)
    aPags[nI]:SetStepDescription(OEMToAnsi(I18N(STR0029))) //Grupo de Empresas
    aPags[nI]:SetConstruction({|oPanel| Pag2(oPanel, @cGrupo, @aGrupos, @aSenha)})
    aPags[nI]:SetNextAction({|| Vld2(@cGrupo, @aGrupos, @aPartes, @aMoedas, @aSenha)})
    aPags[nI]:SetCancelAction({|| .T.})
    aPags[nI]:SetPrevWhen({||.F.})

    //Página 3 - Campos a serem criados
    AAdd(aPags, oWizard:AddStep("3"))
    nI := Len(aPags)
    aPags[nI]:SetStepDescription(OEMToAnsi(I18N(STR0030))) //Visualizar campos
    aPags[nI]:SetConstruction({|oPanel| Pag3(oPanel, @aPartes, @aMoedas, @aCampos)})
    aPags[nI]:SetNextAction({|| Vld3(oJanela, @aCampos, @lGerouSDF)})
    aPags[nI]:SetCancelAction({|| .T.})
    aPags[nI]:SetPrevWhen({||.F.})

    //Página 3 - Campos a serem criados
    AAdd(aPags, oWizard:AddStep("4"))
    nI := Len(aPags)
    aPags[nI]:SetStepDescription(OEMToAnsi(I18N(STR0031))) //Fim do Processo
    aPags[nI]:SetConstruction({|oPanel| Pag4(oPanel)})
    aPags[nI]:SetCancelAction({|| .F.})
    aPags[nI]:SetPrevWhen({||.F.})

    oWizard:Activate()
    oJanela:Activate(,,,.T.)
    oWizard:Destroy()

    FWFreeObj(oWizard)
    FWFreeObj(oJanela)
    FWFreeArray(aPags)
    FWFreeArray(aGrupos)
    FWFreeArray(aPartes)
    FWFreeArray(aMoedas)
    FWFreeArray(aCampos)

    RpcClearEnv()
    If lGerouSDF
        If MsgYesNo(OEMToAnsi(I18N(STR0032))) //Deseja executar o UPDDISTR? Será necessário ter acesso exclusivo ao sistema.
            JobUpdDistr(cGrupo, aSenha)
        EndIf
    EndIf
Return

/*/{Protheus.doc} Pag1
    Primeira tela do Wizard
    Apresenta as informações sobre o wizard e sobre o processo
    @type  Static Function
    @author Gianluca Moreira
    @since 13/02/2023
/*/
Static Function Pag1(oPanel, lBackup)
    Local cTexto  := ""
    Local cBackup := ""
    Local oSay1   := Nil
    Local oSay2   := Nil
    Local oFont   := TFont():New('Arial',,-15,,.F.,,,,.F.,.F.)
    Local oCheck  := Nil

    lBackup := .F.

    cTexto := STR0033+CRLF+CRLF //Este Wizard irá auxiliar na criação dos campos necessários para a execução do custo em partes no recálculo do custo médio (MATA330).
    cTexto += STR0034+CRLF+CRLF //Será analisado a quantidade de partes configuradas no ponto de entrada MA330CP, bem como as moedas configuradas no parâmetro MV_MOEDACM, para criação dos campos.
    cTexto += STR0075 //Ao término da execução do Wizard, será gerado um arquivo diferencial (SDF) na pasta SystemLoad, e será possível executar o UPDDISTR para criar os campos.

    cBackup := STR0035 //"Confirmo que fiz backup do arquivo #1[SDFBRA.txt]# na pasta protheus_data\systemload ou não me importo em sobrescrevê-lo."   

    oSay1 := TSay():New(20,20,{||},oPanel,,oFont,,,,.T.,,,260,100)
    oSay1:lWordWrap := .T.
    oSay1:SetText(OEMToAnsi(I18N(cTexto)))

    oCheck := TCheckBox():New(150,20,'',{||lBackup},oPanel, 260,50,,{||lBackup := !lBackup},oFont,,CLR_BLUE,CLR_RED,,.T.,,,)

    oSay2 := TSay():New(150,35,{||},oPanel,,oFont,,,,.T.,,,260,100)
    oSay2:lWordWrap := .T.
    oSay2:SetText(OEMToAnsi(I18N(cBackup,{'SDF'+cPaisLoc+'.txt'})))

Return

/*/{Protheus.doc} Vld1
    Valida se o usuário confirmou o backup do arquivo SDF
    @type  Static Function
    @author Gianluca Moreira
    @since 13/02/2023
/*/
Static Function Vld1(lBackup)
    Local lRet   := .T.
    Local cMsg   := ''

    If !lBackup
        cMsg := STR0036 //Confirme todas as informações para prosseguir.
        lRet := .F.
        FWAlertInfo(OEMToAnsi(I18N(cMsg)))
    EndIf

Return lRet

/*/{Protheus.doc} Pag2
    Segunda tela do Wizard
    Apresenta o grupo de empresas para seleção
    @type  Static Function
    @author Gianluca Moreira
    @since 13/02/2023
/*/
Static Function Pag2(oPanel, cGrupo, aEmpFil, aSenha)
    Local aCombo  := {}
    Local aGrupos := {}
    Local aNomGrp := {}
    Local cNomGrp := ""
    Local cTexto1 := ""
    Local oSay1   := Nil
    Local oFont   := TFont():New('Arial',,-15,,.F.,,,,.F.,.F.)
    Local oCombo  := Nil
    Local cTexto2 := ""
    Local oSay2   := Nil
    Local oSay3   := Nil
    Local cTexto4 := ""
    Local oSay4   := Nil
    Local oGet1   := Nil
    Local nI      := 0

    aSenha := {Space(120)} //Guarda em array para não imprimir em caso de error.log

    OpenSM0()
    aGrupos := FWLoadSM0(.T.)

    For nI := 1 To Len(aGrupos)
        If AScan(aEmpFil, {|x| x[1] == aGrupos[nI, 1]}) == 0
            AAdd(aCombo, aGrupos[nI, 1])//+' - '+aGrupos[nI, 6])
            AAdd(aNomGrp, aGrupos[nI, 6])
            AAdd(aEmpFil, {aGrupos[nI, 1], aGrupos[nI, 2]})
        EndIf
    Next nI

    cGrupo  := aCombo[1]
    cNomGrp := aNomGrp[1]

    //Texto principal
    cTexto1 := STR0037 //O tamanho dos campos de custo em partes serão os mesmos do grupo de empresas selecionado, você poderá revisar esta informação antes do término do processo.

    oSay1 := TSay():New(20,20,{||},oPanel,,oFont,,,,.T.,,,260,100)
    oSay1:lWordWrap := .T.
    oSay1:SetText(OEMToAnsi(I18N(cTexto1)))

    //Texto sobre o combobox
    cTexto2 := STR0038 //Selecione o grupo de empresas para geração dos campos do custo em partes: 
    oSay2 := TSay():New(60,20,{||},oPanel,,oFont,,,,.T.,,,260,100)
    oSay2:lWordWrap := .T.
    oSay2:SetText(OEMToAnsi(I18N(cTexto2)))
  
    //Título do grupo de empresas selecionado
    oSay3  := TSay():New(80,130,{||cNomGrp},oPanel,,oFont,,,,.T.,,,260,50)
    oSay3:lWordWrap := .T.
    oSay3:SetText(cNomGrp)

    //Combo de seleção do grupo de empresas
    oCombo := TComboBox():New(80,20,{|u|if(PCount()>0,cGrupo:=u,cGrupo)},aCombo,100,20,oPanel,,;
    {|| AlterCombo(aCombo, aNomGrp, oSay3, cGrupo)},,,,.T.,,,,,,,,,'cGrupo')

    //Texto autenticação
    cTexto4 := STR0039 //Informe senha do usuário Administrador:
    oSay4 := TSay():New(100,20,{|| },oPanel,,oFont,,,,.T.,,,260,50)
    oSay4:lWordWrap := .T.
    oSay4:SetText(OEMToAnsi(I18N(cTexto4)))

    //Get para a senha do admin
    //oGet1 := TGet():New(120,20,{|u| if( Pcount()>0, aGet1[1]:= u, cGet1) },oPanel, 150, 20, "",,,,oFont,,,,,,,,,,.T./*ReadOnly*/,;
    //,,"cGet1")
    oGet1 := TGet():New(120,20,{|u| if( Pcount()>0, aSenha[1]:= u, aSenha[1]) },oPanel, ;
     060, 010, "",, 0, 16777215,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.T.,,"aSenha",,,,  )

    FWFreeArray(aGrupos)
Return

/*/{Protheus.doc} AlterCombo
    Quando o combo é alterado, altera o texto com o nome do grupo de empresas
    @type  Static Function
    @author Gianluca Moreira
    @since 22/02/2023
/*/
Static Function AlterCombo(aCombo, aNomGrp, oSay, cGrupo)
    Local nPos    := 0
    Local cNomGrp := OEMToAnsi(I18N(STR0040)) //"Não Identificado"

    nPos := ASCan(aCombo, cGrupo)
    If nPos > 0
        cNomGrp := aNomGrp[nPos]
    EndIf
    oSay:SetText(cNomGrp)
Return

/*/{Protheus.doc} Vld2
    Valida se foi possível abrir a empresa selecionada
    @type  Static Function
    @author Gianluca Moreira
    @since 13/02/2023
/*/
Static Function Vld2(cGrupo, aGrupos, aPartes, aMoedas, aSenha)
    Local aPswAdm  := {""}
    Local lRet     := .T.
    Local cMsg     := ''
    Local cCodEmp  := ''
    Local cCodFil  := ''
    Local lProj    := .F.
    Local cMoeda   := ''
    Local nI       := 0
    Local oUser    := Nil

    //Abre o ambiente
    nI := ASCan(aGrupos, {|x| x[1] == cGrupo})
    
    cCodEmp := aGrupos[nI, 1]
    cCodFil := aGrupos[nI, 2]

    //RpcSetType(1)
	RpcSetEnv(cCodEmp, cCodFil)

    //Autenticação de usuário
    Private cAcesso

    aPswAdm[1] := RTrim(aSenha[1])

    oUser := GetUserAcc()
    lRet  := oUser:Authentication("Administrador", aPswAdm[1]) <> 0
    If !lRet
        cMsg := OEMToAnsi(I18N(STR0041)) //Falha na autenticação: 
        cMsg += cValToChar(oUser:GetMessage()[2])
        FWAlertInfo(cMsg)
        Return lRet
    EndIf 

    //Demais validações
    lProj := GetMv('MV_PRJOVER', .F., .F.)
    If !lProj
        cMsg := OEMToAnsi(I18N(STR0042)) //Habilite o parâmetro MV_PRJOVER
        lRet := .F.
        FWAlertInfo(cMsg)
        Return lRet
    EndIf

    If !ExistBlock("MA330CP")
        cMsg := OEMToAnsi(I18N(STR0043)) //O ponto de entrada MA330CP não está compilado.
        lRet := .F.
        FWAlertInfo(cMsg)
        Return lRet
    EndIf

    aPartes := ExecBlock("MA330CP",.F.,.F.)
    If ValType(aPartes) # "A"
        aPartes:={}
    EndIf

    If Empty(aPartes)
        cMsg := OEMToAnsi(I18N(STR0044)) //O ponto de entrada MA330CP não possui nenhuma parte configurada.
        lRet := .F.
        FWAlertInfo(cMsg)
        Return lRet
    EndIf

    If Len(aPartes) > 98
        cMsg := OEMToAnsi(I18N(STR0045)) //"O ponto de entrada possui mais partes que o permitido (98 partes)."
        lRet := .F.
        FWAlertInfo(cMsg)
        Return lRet
    EndIf

    cMoeda := SuperGetMv('MV_MOEDACM', .F., '2345')
    AAdd(aMoedas, '01') //Moeda padrâo
    For nI := 2 To 5
        If cValToChar(nI) $ cMoeda
            AAdd(aMoedas, StrZero(nI,2))
        EndIf
    Next nI

Return lRet

Static __oUserAcc
Static Function GetUserAcc()
	If __oUserAcc == Nil
		__oUserAcc := MPUserAccount():New()
		__oUserAcc:Activate()
	EndIf
Return __oUserAcc

/*/{Protheus.doc} Pag3
    Terceira tela do Wizard
    Apresenta os campos a serem criados pelo wizard, antes de confirmar a geração do SDF
    @type  Static Function
    @author Gianluca Moreira
    @since 13/02/2023
/*/
Static Function Pag3(oPanel, aPartes, aMoedas, aCampos)
    Local cTexto  := ""
    Local oSay1   := Nil
    Local oFont   := TFont():New('Arial',,-15,,.F.,,,,.F.,.F.)
    Local nI      := 0
    Local oBrowse := Nil
    Local aHeader := {}

    cTexto := OEMToAnsi(I18N(STR0046)) //Quantidade de Partes: 
    cTexto += cValToChar(Len(aPartes)+1)+CRLF
    cTexto += OEMToAnsi(I18N(STR0047)) //Moedas: 
    For nI := 1 To Len(aMoedas)
        cTexto += aMoedas[nI]+', '
    Next nI
    cTexto := SubStr(cTexto, 1, Len(cTexto)-2)+CRLF
    aCampos := CarregCpo(aPartes, aMoedas)

    cTexto += OEMToAnsi(I18N(STR0048)) //Total de campos: 
    cTexto += cValToChar(Len(aCampos))+CRLF
    cTexto += OEMToAnsi(I18N(STR0049)) //Abaixo está a lista de campos a serem criados:

    oSay1 := TSay():New(20,20,{||},oPanel,,oFont,,,,.T.,,,260,100)
    oSay1:lWordWrap := .T.
    oSay1:SetText(cTexto)

    AAdd(aHeader, OEMToAnsi(I18N(STR0050))) //Alias
    AAdd(aHeader, OEMToAnsi(I18N(STR0051))) //Campo
    AAdd(aHeader, OEMToAnsi(I18N(STR0052))) //Título
    AAdd(aHeader, OEMToAnsi(I18N(STR0053))) //Tamanho
    AAdd(aHeader, OEMToAnsi(I18N(STR0054))) //Decimal
    AAdd(aHeader, OEMToAnsi(I18N(STR0055))) //Picture
    AAdd(aHeader, OEMToAnsi(I18N(STR0056))) //Visual
    AAdd(aHeader, OEMToAnsi(I18N(STR0057))) //Valid
    AAdd(aHeader, OEMToAnsi(I18N(STR0058))) //Inicializador
    AAdd(aHeader, OEMToAnsi(I18N(STR0059))) //When
    AAdd(aHeader, OEMToAnsi(I18N(STR0060))) //Nível

    oBrowse := TCBrowse():New(60, 20, 250, 120, Nil,,,oPanel,,,,,{||},,,,,,,.F.,,.T.,,.F.,,,)
 
    oBrowse:SetArray(aCampos)
    oBrowse:lVScroll := .T.
    oBrowse:lHScroll := .T.
    
    oBrowse:AddColumn(TCColumn():New(aHeader[01],{|| AllTrim(aCampos[oBrowse:nAt, 01])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[02],{|| AllTrim(aCampos[oBrowse:nAt, 02])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[03],{|| AllTrim(aCampos[oBrowse:nAt, 03,1])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[04],{|| cValToChar(aCampos[oBrowse:nAt, 04])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[05],{|| cValToChar(aCampos[oBrowse:nAt, 05])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[06],{|| AllTrim(aCampos[oBrowse:nAt, 06])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[07],{|| AllTrim(aCampos[oBrowse:nAt, 07])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[08],{|| AllTrim(aCampos[oBrowse:nAt, 08])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[09],{|| AllTrim(aCampos[oBrowse:nAt, 09])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[10],{|| AllTrim(aCampos[oBrowse:nAt, 10])},,,,"LEFT",,.F.,.F.,,,,,))
    oBrowse:AddColumn(TCColumn():New(aHeader[11],{|| AllTrim(aCampos[oBrowse:nAt, 11])},,,,"LEFT",,.F.,.F.,,,,,))

    FWFreeArray(aHeader)
Return

/*/{Protheus.doc} CarregCpo
    Monta o array com campos do custo em partes
    @type  Static Function
    @author Gianluca Moreira
    @since 13/02/2023
/*/
Static Function CarregCpo(aPartes, aMoedas)
    Local aCposCP   := {}
    Local nX, nY, nZ
    Local nTamanho  := 0
    Local nDecimal  := 0
    Local cPicture  := ''
    Local cVisual   := ''
    Local cValid    := ''
    Local cIniPad   := ''
    Local cWhen     := ''
    Local cNivel    := ''
    Local cUso      := ''
    Local cReserv   := ''
    Local cObrigat  := ''

    Local aCampos  :={;
	{"B2_CP" , "B2_CMFIM1" , "SB2", {"CP.Unit.","CP.Unit.","CP.Unit."}, {"Custo Partes Unit. ", "Unit Cost Parts ",    "Costo Partes Unit. "}},;
	{"B2_CPF", "B2_VFIM1"  , "SB2", {"CP.Final","CP.Final","CP.Final"}, {"Custo Partes Final ", "Final Cost Parts ",   "Costo Partes Final "}},;
	{"B6_CP" , "B6_CUSTO1" , "SB6", {"CP.Valor","CP.Value","CP.Valor"}, {"Custo em Partes ",    "Cost in Parts ",      "Costo en Partes "}},;
	{"B9_CP" , "B9_VINI1"  , "SB9", {"CP.Valor","CP.Value","CP.Valor"}, {"Custo em Partes ",    "Cost in Parts ",      "Costo en Partes "}},;
	{"B9_CPM", "B9_CM1"    , "SB9", {"CP.Unit.","CP.Unit.","CP.Unit."}, {"Custo Partes Unit. ", "Unit Cost Parts ",    "Costo Partes Unit. "}},;
	{"C2_CPF", "C2_VFIM1"  , "SC2", {"CP.Final","CP.Final","CP.Final"}, {"Custo Partes Final ", "Final Cost Parts ",   "Costo Partes Final "}},;
	{"C2_CPI", "C2_VINI1"  , "SC2", {"CP.Inic.","CP.Init.","CP.Inic."}, {"Custo Partes Inic. ", "Init. Cost Parts ",   "Costo Partes Inic. "}},;
	{"C2_API", "C2_APRINI1", "SC2", {"CP.AprIn","CP.InApp","CP.AprIn"}, {"Apropr. Inicial CP ", "Initial Appropr. CP ","Aprop. Inicial CP "}},;
	{"C2_APF", "C2_APRFIM1", "SC2", {"CP.AprFm","CP.FnApp","CP.AprIn"}, {"Apropr. Final CP ",   "Final Appropr. CP ",  "Aprop. Final CP "}},;
	{"D1_CP" , "D1_CUSTO"  , "SD1", {"CP.Valor","CP.Value","CP.Valor"}, {"Custo em Partes ",    "Cost in Parts ",      "Costo en Partes "}},;
	{"D2_CP" , "D2_CUSTO1" , "SD2", {"CP.Valor","CP.Value","CP.Valor"}, {"Custo em Partes ",    "Cost in Parts ",      "Costo en Partes "}},;
	{"D3_CP" , "D3_CUSTO1" , "SD3", {"CP.Valor","CP.Value","CP.Valor"}, {"Custo em Partes ",    "Cost in Parts ",      "Costo en Partes "}}}

    For nX := 1 To Len(aCampos)
        nTamanho := GetSX3Cache(aCampos[nX, 2], "X3_TAMANHO")
        nDecimal := GetSX3Cache(aCampos[nX, 2], "X3_DECIMAL")
        cPicture := GetSX3Cache(aCampos[nX, 2], "X3_PICTURE")
        cVisual  := GetSX3Cache(aCampos[nX, 2], "X3_VISUAL")
        cValid   := GetSX3Cache(aCampos[nX, 2], "X3_VALID")
        cIniPad  := GetSX3Cache(aCampos[nX, 2], "X3_RELACAO")
        cWhen    := GetSX3Cache(aCampos[nX, 2], "X3_WHEN")
        cNivel   := GetSX3Cache(aCampos[nX, 2], "X3_NIVEL")
        cUso     := GetSX3Cache(aCampos[nX, 2], "X3_USADO")
        cReserv  := GetSX3Cache(aCampos[nX, 2], "X3_RESERV")
        cObrigat := GetSX3Cache(aCampos[nX, 2], "X3_OBRIGAT")
        For nY := 1 To Len(aPartes)+1
            For nZ := 1 To Len(aMoedas)
                AAdd(aCposCP,  {aCampos[nX, 3],     ;//Alias
                                aCampos[nX, 1]+StrZero(nY,2)+aMoedas[nZ],; //Nome do campo
                                {aCampos[nX,4,1]+StrZero(nY,2)+aMoedas[nZ],; //Titulo do campo - pt-br
                                 aCampos[nX,4,2]+StrZero(nY,2)+aMoedas[nZ],; //Titulo do campo - eng
                                 aCampos[nX,4,3]+StrZero(nY,2)+aMoedas[nZ]},;//Titulo do campo - spa
                                nTamanho,;           //Tamanho
                                nDecimal,;           //Decimal
                                cPicture,;           //Picture
                                cVisual,;            //Visual
                                cValid,;             //Valid
                                cIniPad,;            //Inicializador Padrão
                                cWhen,;              //When
                                cNivel,;             //Nivel
                                {aCampos[nX,5,1]+StrZero(nY,2)+aMoedas[nZ],; //Descrição do campo - pt-br
                                 aCampos[nX,5,2]+StrZero(nY,2)+aMoedas[nZ],; //Descrição do campo - eng
                                 aCampos[nX,5,3]+StrZero(nY,2)+aMoedas[nZ]},;//Descrição do campo - spa
                                cUso,;               //Usado
                                cReserv,;            //Reserv
                                cObrigat;            //Obrigatório 
                })
            Next nZ
        Next nY
    Next nX

    FWFreeArray(aCampos)

Return aCposCP

/*/{Protheus.doc} Vld3
    Pergunta ao usuário se deseja finalizar e gerar o SDF
    @type  Static Function
    @author Gianluca Moreira
    @since 16/02/2023
/*/
Static Function Vld3(oWnd, aCampos, lGerouSDF)
    Local lRet := .F.
    Local cMsg := ''

    cMsg := OEMToAnsi(I18N(STR0061)) //Confirma a geração do arquivo SDF?

    If !MsgYesNo(cMsg)
        Return .F.
    EndIf

    LoadingScreen({|| lRet := CriaSDF(aCampos) }, OEMToAnsi(I18N(STR0076)), OEMToAnsi(I18N(STR0077))) //Criando SDF / Iniciando...
    lGerouSDF := lRet

Return lRet

/*/{Protheus.doc} CriaSDF
    Cria o projeto de gestão de ambientes com os campos do custo em partes
    @type  Static Function
    @author Gianluca Moreira
    @since 16/02/2023
/*/
Static Function CriaSDF(aCampos, oMsgRun)
    Local aError   := {}
    Local cLinha   := ''
    Local lRet     := .T.
    Local oX31     := Nil
    Local nI       := 0
    Local nCnt     := 0
    Local cPath    := "\systemload\"
    Local cSdf     := "sdf"+Lower(cPaisLoc)+'.txt'
    Local cCodPrj  := ""
    Local nQtd     := Len(aCampos)

    // cria o objeto para manipulação dos campos nas tabelas
    oX31 := MPX31Field():New(OEMToAnsi(I18N(STR0062))) //Inclusao de Campos para custo em partes
    oX31:Activate()   

    For nI := 1 To nQtd
		oX31:SetAlias(aCampos[nI, 01])
		oX31:SetField(aCampos[nI, 02])
        oX31:SetTitle(aCampos[nI, 03, 01])
        oX31:SetTitleEng(aCampos[nI, 03, 02])
        oX31:SetTitleSpa(aCampos[nI, 03, 03])
        oX31:cDescri    := aCampos[nI, 12, 01]
        oX31:cDescriEng := aCampos[nI, 12, 02]
        oX31:cDescriSpa := aCampos[nI, 12, 03]
        oX31:SetSize(aCampos[nI, 04], aCampos[nI, 05])
		oX31:SetPicture(aCampos[nI, 06])
        If aCampos[nI, 07] == 'V'
            oX31:SetVisual()
        EndIf
        oX31:SetValid(aCampos[nI, 08])
        oX31:SetIniPad(aCampos[nI, 09])
        oX31:SetWhen(aCampos[nI, 10])
		oX31:SetLevel(aCampos[nI, 11])
        oX31:SetType("N")
		oX31:cBrowse  := "N"	
		oX31:cOrder   := oX31:GetNextOrder(oX31:GetOrder())
        oX31:cInUse   := aCampos[nI, 13]
        oX31:cReserv  := aCampos[nI, 14]
        oX31:cObrigat := aCampos[nI, 15]
		oX31:SetOverWrite(.T.)			

		If oX31:VldData()
			oX31:CommitData()
		Else
			aError := oX31:GetErrorMessage()
			cLinha := ""

			For nCnt := 1 to len(aError)
				cLinha += aError[nCnt]+CRLF
            Next nCnt
            FWAlertInfo(OEMToAnsi(I18N(STR0063))+aCampos[nI, 2]+CRLF+cLinha, "ESTW001") //Erro na exportação do campo: 
            lRet := .F. //Se der erro em algum item não prossigo
            Exit
        EndIf

        UpdLoading(OEMToAnsi(I18N(STR0078,{cValToChar(nI), cValToChar(nQtd)}))) //Criando campo #1[23]# de #2[180]#...

    Next nI
   
    If lRet .And. File(cPath+cSdf)
        If fErase(cPath+cSdf) == -1
            FWAlertInfo(OEMToAnsi(I18N(STR0064, {STR(FError())})), "ESTW001") //Erro na exclusão do arquivo SDF. Código do Erro: #1[200]#
            lRet := .F.
        EndIf
    EndIf

    cCodPrj := oX31:oPrjResult:cCodProj
    If lRet
        lRet := FWGnFlByTp(cCodPrj, cPath) //Gera arquivo SDF
    EndIf

    If lRet .And. File(cPath+cSdf)
        FWAlertInfo(OEMToAnsi(I18N(STR0065)), "ESTW001") //Arquivo SDF exportado com sucesso para a pasta systemload.
        lRet := .T.
    Else
        FWAtuStatus('2', cCodPrj) //Encerra o projeto com erro
        FWAlertInfo(OEMToAnsi(I18N(STR0066)), "ESTW001") //Arquivo SDF não gerado.
        lRet := .F.
    EndIf
    
Return lRet

/*/{Protheus.doc} Pag4
    Quarta tela do Wizard
    Apresenta mensagem de término
    @type  Static Function
    @author Gianluca Moreira
    @since 13/02/2023
/*/
Static Function Pag4(oPanel)
    Local cTexto  := ""
    Local oSay1   := Nil
    Local oFont   := TFont():New('Arial',,-15,,.F.,,,,.F.,.F.)

    cTexto := OEMToAnsi(I18N(STR0067)) //O arquivo foi gerado com sucesso. Ao finalizar o Wizard, será apresentada mensagem para executar o UPDDISTR.

    oSay1 := TSay():New(20,20,{||},oPanel,,oFont,,,,.T.,,,260,100)
    oSay1:lWordWrap := .T.
    oSay1:SetText(cTexto)

Return

/*/{Protheus.doc} JobUpdDistr
    Prepara o ambiente para execução do UPDDISTR via JOB e faz a chamada
    @type  Static Function
    @author Gianluca Moreira
    @since 17/02/2023
/*/
Static Function JobUpdDistr(cGrupo, aSenha)
    Local lRet := .T.

    lRet := ClrResult() //Limpa results.json
    If lRet
        lRet := BkpConfig() //Faz backup das configs se existirem
    EndIf
    If lRet
        lRet := JsonUpd(cGrupo, aSenha) //Cria novo arquivo de configs
    EndIf
    If lRet
        LoadingScreen({|| StartJob("UPDDISTR", GetEnvserver(), .T.) }, 'UPDDISTR', OEMToAnsi(I18N(STR0079))) //Em Execução... Aguarde...
        lRet := ChkResult() //Verifica se executou
    EndIf
    If lRet
        lRet := RestConfig() //Restaura backup das configs e apaga o arquivo gerado pelo wizard
    EndIf
    
Return

/*/{Protheus.doc} ClrResult
	Limpa o arquivo JSON de resultados
	@type  Static Function
	@author Gianluca Moreira
	@since 17/02/2023
/*/
Static Function ClrResult()
	Local cFile := 'result.json'
	Local cPath := "\systemload\"
	Local oFile := FWFileWriter():New(cPath+cFile, .T.)
    Local cMsg  := ""
    Local lRet  := .T.

	If oFile:Exists()
		oFile:Erase()
        lRet := !oFile:Exists()
        If !lRet
            cMsg := OEMToAnsi(I18N(STR0068)) //Ocorreu um erro ao apagar o arquivo result.json - 
            cMsg += CRLF
            cMsg += cValToChar(oFile:Error():Message)
            FWAlertError(cMsg)
        EndIf
		oFile:Close()
	EndIf

Return lRet

/*/{Protheus.doc} BkpConfig
    Faz backup do upddistr_param.json
    https://tdn.totvs.com/display/LMPING/UPDDISTR+executed+via+Job
    @type  Static Function
    @author Gianluca Moreira
    @since 17/02/2023
/*/
Static Function BkpConfig()
    Local cFile   := 'upddistr_param.json'
	Local cPath   := "\systemload\"
    Local oFile   := FWFileWriter():New(cPath+cFile, .T.)
    Local lRet    := .T.
    Local nResult := 0
    Local cMsg    := OEMToAnsi(I18N(STR0069, {cFile})) //Erro ao realizar backup do arquivo #1[upddistr_param.json]# - Código do erro: 

    If oFile:Exists()
        oFile:Close()
        nResult := FRename(cPath+cFile, cPath+cFile+'.bkp',,.F.)
        lRet := nResult == 0
        If !lRet
            FWAlertInfo(cMsg+CRLF+Str(FError(), 4))
        EndIf
    EndIf

Return lRet

/*/{Protheus.doc} JsonUpd
	Cria o json de configuração do UPDDISTR conforme documentação
	https://tdn.totvs.com/display/LMPING/UPDDISTR+executed+via+Job
	@type  Static Function
	@author Gianluca Moreira
	@since 17/02/2023
/*/
Static Function JsonUpd(cGrupo, aSenha)
	Local cFile := 'upddistr_param.json'
	Local cPath := "\systemload\"
	Local oFile := FWFileWriter():New(cPath+cFile, .T.)
	Local jJson := JsonObject():New()
    Local cMsg  := OEMToAnsi(I18N(STR0070))+cFile+CRLF //Erro ao gravar o arquivo 

	jJson['password']       := RTrim(aSenha[1])
	jJson['simulacao']      := .F.
	jJson['localizacao']    := cPaisLoc
	jJson['sixexclusive']   := .T.
	jJson['empresas']       := {cGrupo}
	jJson['logprocess']     := .F.
	jJson['logatualizacao'] := .T.
	jJson['logwarning']     := .F.
	jJson['loginclusao']    := .F.
	jJson['logcritical']    := .T.
	jJson['updstop']        := .F.
	jJson['oktoall']        := .T.
	jJson['deletebkp']      := .F.
	jJson['keeplog']        := .F.

	If !oFile:Exists()
		oFile:Create()
		oFile:Close()
	EndIf
	If oFile:Open(FO_WRITE)
		oFile:Clear()
		oFile:Write(jJson:ToJson())
		oFile:Close()
	Else
        FWAlertInfo(cMsg+cValToChar(oFile:Error():Message))
		Return .F.
	EndIf
	
Return .T.

/*/{Protheus.doc} ChkResult
	Verifica o resultado da execução do UPDDISTR
	@type  Static Function
	@author Gianluca Moreira
	@since 17/02/2023
/*/
Static Function ChkResult()
	Local cFile := 'result.json'
	Local cPath := "\systemload\"
	Local oFile := FWFileReader():New(cPath+cFile, .T.)
	Local jJson := JsonObject():New()
	Local cRes  := ''

    If !oFile:Exists()
		FWAlertError(OEMToAnsi(I18N(STR0071))) //Ocorreu um erro inesperado na execução do UPDDISTR. Verifique o log do servidor de aplicação.
        Return .T.
	EndIf

	If oFile:Open()
        cRes := oFile:GetLine()
        If jJson:FromJson(cRes) == Nil
            If jJson['result'] == 'success'
                FWAlertInfo(OEMToAnsi(I18N(STR0072))) //O UPDDISTR Executou corretamente.
            Else
                FWAlertError(jJson['result'])
            EndIf
        Else
            FWAlertError(OEMToAnsi(I18N(STR0073))) //Não foi possível ler o JSON de resultados.
        EndIf
	Else
		FWAlertError(OEMToAnsi(I18N(STR0073))) //Não foi possível ler o JSON de resultados.
	EndIf
	oFile:Close()

Return .T.

/*/{Protheus.doc} RestConfig
    Restaura as configurações originais do JOB UPDDISTR
    @type  Static Function
    @author Gianluca Moreira
    @since 17/02/2023
/*/
Static Function RestConfig()
    Local cFile   := 'upddistr_param.json'
	Local cPath   := "\systemload\"
    Local oFile   := FWFileWriter():New(cPath+cFile, .T.)
    Local lRet    := .T.
    Local nResult := 0
    Local cMsg    := OEMToAnsi(I18N(STR0074)) //Erro ao restaurar o backup das configurações do job UPDDISTR

    If oFile:Exists()
        oFile:Erase()
        oFile:Close()
        FWFreeObj(oFile)
    EndIf

    oFile := FWFileWriter():New(cPath+cFile+'.bkp', .T.)

    If oFile:Exists()
        nResult := FRename(cPath+cFile+'.bkp', cPath+cFile,,.F.)
        lRet := nResult == 0
        If !lRet
            FWAlertInfo(cMsg+CRLF+Str(FError(), 4))
        EndIf
    EndIf

Return lRet

/*/{Protheus.doc} LoadingScreen
    Monta tela de progresso para os processamentos do wizard
    @type  Static Function
    @author Gianluca Moreira
    @since 06/03/2023
/*/
Static __oText := Nil
Static Function LoadingScreen(bAction, cTitle, cMsg)
    Local oDlg

    DEFINE MSDIALOG oDlg FROM 12,35 TO 19.5, 75 TITLE OemToAnsi(cTitle) STYLE DS_MODALFRAME STATUS

	@ 10, 20  SAY __oText VAR OemToAnsi(cMsg) SIZE 130, 10 PIXEL OF oDlg FONT oDlg:oFont
    oDlg:bStart = { || Eval( bAction ), oDlg:End() }

    ACTIVATE DIALOG oDlg CENTERED
Return

/*/{Protheus.doc} UpdLoading
    Atualiza o texto apresentado na tela de progresso
    @type  Static Function
    @author Gianluca Moreira
    @since 06/03/2023
/*/
Static Function UpdLoading(cMsg)
    If __oText <> Nil
        __oText:SetText(cMsg)
    EndIf
    SysRefresh()
Return
