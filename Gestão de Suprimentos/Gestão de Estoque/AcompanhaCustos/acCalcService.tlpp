#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "accalcservice.ch"

namespace ac.acCalc.Service
using namespace ac.acCalc.Repository

Class acCalcService
    public data  oResponse as Object
    public data  oLog      as object
	public data  oParams  as Object
    public data  cErrorMessage  as character 
    public method New()
    public Method eventRecalc()
    public method preparParamsPerg()
    public Method areBranchesValid()
	public method version()
EndClass

Method new() class acCalcService
    ::cErrorMessage = '' 
	::oParams := JsonObject():New()
return Self


/*/{Protheus.doc} eventRecalc
    Metodo responsavel por abrir o startJob para processamento do recalculo
    @type  Metodo
    @author André Maximo 
    @since  Novembro 26,2020
    @version 12.1.27
/*/
Method eventRecalc(lCPParte,aListaFil,aParAuto,cId, cIdChild,cCompany, cBranch, lReproc, lAutoExec,cDataBase) class  acCalcService

Local cAcUserId := ""
Local oLog 		:= acJourneyLog():New()

Default lReproc := .F.
Default lAutoExec := .F.

oLog:logIni()
oLog:envValid(.T.)
oLog:idMovD3X()
oLog:setThreadId( Strzero(ThreadID(),15))
oLog:cIdParent := cId
oLog:cIdChild := cIdChild

If lReproc 
	oLog:LogProAtu('INIJOB', STR0004, '' , cBranch, , aParAuto[1], cBranch, .T.) //'Segunda tentativa de subida de thread para o processamento da rotina MATA330'
Else 
	oLog:LogProAtu('INIJOB', STR0005, '' , cBranch, , aParAuto[1], cBranch, .T.) //'Tentativa de subida de thread para o processamento da rotina MATA330'
Endif

If Type("__cUserId") == "C" .And. !Empty(__cUserId)
    cAcUserId := __cUserId
EndIf

StartJob('IniProc330',GetEnvServer(),.F.,aListaFil,lCPParte,aParAuto,cId, cIdChild, cCompany,cBranch, cUsername, cAcUserId, lAutoExec,cDataBase)

return .T.


/*/{Protheus.doc} preparParamsPerg
    Metodo responsavel por converter o json recebido do fronte para um array para o MATA330
    @type  Metodo
    @author André Maximo 
    @since  Novembro 26,2020
    @version 12.1.27
/*/
Method preparParamsPerg(oJParams, cKey) class  acCalcService
local aParams := {}
Local nX :=0 
Local cProccess

iif(cKey == 'MATA330', cProccess := 'recalculation', cProccess := 'contabilization')

For nX := 1 to  len(oJParams[cProccess])
    If nX == 1    
        Aadd(aParams, STOD(oJParams[cProccess][1]['value']))
    elseif nX == 2                                                   
         Aadd(aParams, 2)
    Else
        Aadd(aParams, convertX1(oJParams[cProccess][nx]['value']))
    EndIf
next nX

return aParams



/*/{Protheus.doc} convertX1
    @type  Function
    @author user
    @since date
    @version version
    @param param, param_type, param_descr
    @return return, return_type, return_description
/*/

Function convertX1(oJParamsX1)
local xRet:= " "
If Valtype(oJParamsX1)="L"
    if oJParamsX1
        xRet:= 1
    else
        xRet:= 2
    EndIf
else
   xRet:= oJParamsX1
EndIF
    
return xRet

Method areBranchesValid(aFilsCalc, cCurrentBranch) class acCalcService

Local lRet      :=.F.
Local aAux		:= {}
Local nx        :=0
Local nz        :=0
Local ny		:=0
Local nCountFil :=0
Local lChecouPar:=.F.
Local lFirst 	:=.T.
Local aParCheck :={}	// Parametros que devem estar iguais em todas filiais
					 	// [1] Parametro
					 	// [2] Conteudo
Local dData330
Local lM331Data:=(ExistBlock("M331DATA") .And. IsInCallStack("MATA331"))
Local cCheckedPar := ''
Local cFilBack := cFilAnt

AADD(aParCheck,{"MV_CQ"			,"98"	,"98"	})
AADD(aParCheck,{"MV_CUSTEXC"	,"S"	,"S"	})
AADD(aParCheck,{"MV_CUSFIFO"	,.F.	,.F.	})
AADD(aParCheck,{"MV_CUSFIL"		,"A"	,"A"	})
AADD(aParCheck,{"MV_CUSMED"		,"M"	,"M"	})
AADD(aParCheck,{"MV_CUSZERO"	,"N"	,"N"	})
AADD(aParCheck,{"MV_FIFOENT"	,"1"	,"1"	})
AADD(aParCheck,{"MV_GERIMPV"	,"N"	,"N"	})
AADD(aParCheck,{"MV_LOCPROC"	,"99"	,"99"	})
AADD(aParCheck,{"MV_PRODPR0"	,1 		,1  	})

//Não valida MV_ULMES caso exista o PE M331DATA
If !lM331Data
	AADD(aParCheck,{"MV_ULMES"		,""		,"" 	})
EndIf

AADD(aParCheck,{"MV_M330THR"	,1 		,1  	})

// Checa marcacoes efetuadas
For nx:=1 to Len(aFilsCalc)
	If aFilsCalc[nx,1]
		nCountFil++
		lRet:=.T.
	EndIf
Next nx
// Checa se existe alguma filial marcada na confirmacao
If lRet
	// Checa se todos os parametros estao iguais nas filiais selecionadas
	For nx:=1 to Len(aFilsCalc)
		If aFilsCalc[nx,1]
			// Altera filial corrente
			cFilAnt:=aFilsCalc[nx,2]
			// Carrega valor na primeira filial selecionada
			If !lChecouPar
				For nz:=1 to Len(aParCheck)
					If GetMv(aParCheck[nz,1],.T.)
						aParCheck[nz,2]:=GetMv(aParCheck[nz,1])
					EndIf
				Next nz
				lChecouPar:=.T.

				//³ Verifica se o periodo a ser processado nao se encontra encerrado. |
					dData330 := IIF(lM331Data,dInicio,SuperGetMv("MV_ULMES",.F.,"19961231"))
					If dData330 >= a330ParamZX[1]
						If lFirst 
							aAdd( aAux,  JsonObject():New() )
							ny++
							aAux[ny]["param"]		:= "MV_ULMES"
							aAux[ny]["branch"]		:= aFilsCalc[nx,2]
							aAux[ny]["value"]		:= a330ParamZX[1]
							lFirst := .F.
						Endif
					EndIf
			Else
				For nz:=1 to Len(aParCheck)
					If aParCheck[nz,2] # If(GetMv(aParCheck[nz,1],.T.),GetMv(aParCheck[nz,1]),aParCheck[nz,3])       

						aAdd( aAux,  JsonObject():New() )
						ny++
	                	aAux[ny]["param"]		:= aParCheck[nZ,1]
						aAux[ny]["branch"]		:= aFilsCalc[nx,2]
						aAux[ny]["value"]	:= GetMv(aParCheck[nz,1])

						If !cCheckedPar $ aParCheck[nZ,1]
							aAdd( aAux,  JsonObject():New() )
							ny++
							aAux[ny]["param"]		:= aParCheck[nZ,1]
							aAux[ny]["value"]		:= aParCheck[nZ,2]
							aAux[ny]["branch"]		:= cCurrentBranch

							cCheckedPar += aParCheck[nZ,1] + '|'
						Endif 	


					EndIf

					//³ Verifica se o periodo a ser processado nao se encontra encerrado. |
					dData330 := IIF(lM331Data,dInicio,SuperGetMv("MV_ULMES",.F.,"19961231"))
					If dData330 >= a330ParamZX[1]
						If lFirst 
							aAdd( aAux,  JsonObject():New() )
							ny++
							aAux[ny]["param"]		:= "MV_ULMES"
							aAux[ny]["branch"]		:= aFilsCalc[nx,2]
							aAux[ny]["value"]		:= a330ParamZX[1]
							lFirst := .F.
						Endif
					EndIf
				Next nz
			EndIf
		EndIf
		lFirst := .T.
	Next nx

	If Len(aAux) > 0
		lRet := .F.
	Endif
	::oParams['parameters'] := aAux
EndIf

cFilAnt := cFilBack

return lRet

/*/{Protheus.doc} version
    Metodo responsavel por indicar a versao da classe
    @type  Metodo
    @author pedro.missaglia 
    @since  Marco 01, 2023
    @version 12.1.22.10
/*/
method version() class acCalcService

return 100




