#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acstockclosingservice.ch"


namespace ac.acStockClosing.Service

Class acStockClosingServ
    public data     oResponse as Object
    public data     oLog      as object
    public data     lNotFoundCount       as logical
    public method   New()
    public method   eventStockClosing()
    public method   preparParamsPerg()
    public method   valitedBranchesDate()
    public method   validateParams()    
    public method   version()    
EndClass

/*/{Protheus.doc} eventRecalc
    Metodo responsavel por abrir o startJob para processamento do fechamento de estoque
    @type  Metodo
    @author Samuel Macedo
    @since  Fevereiro 05,2021
    @version 12.1.27
/*/

Method new() class acStockClosingServ    
     ::lNotFoundCount   := .F.
return Self


/*/{Protheus.doc} eventRecalc
    Metodo responsavel por abrir o startJob para processamento do recalculo
    @type  Metodo
    @author Samuel Macedo
    @since  Fevereiro 05,2021
    @version 12.1.27
/*/

Method eventStockClosing(cDate, aListaFil, aParAuto, cCompany, cBranch, cId, cIdChild, lReproc) class acStockClosingServ

Local cAcUserId := ""
Local oLog 		:= acJourneyLog():New()

Default lReproc := .F.

oLog:logIni()
oLog:envValid(.T.)
oLog:idMovD3X()
oLog:setThreadId( Strzero(ThreadID(),15))
oLog:cIdParent := cId
oLog:cIdChild := cIdChild

If lReproc 
    oLog:LogProAtu('INIJOB', STR0011,'', cBranch, '', dDataBase, cBranch, .T.) //'Segunda tentativa de subida de thread para o processamento da rotina MATA280'
Else 
	oLog:LogProAtu('INIJOB', STR0012,'', cBranch, '', dDataBase, cBranch, .T.) //'Tentativa de subida de thread para o processamento da rotina MATA280'
Endif

If Type("__cUserId") == "C" .And. !Empty(__cUserId)
    cAcUserId := __cUserId
EndIf

StartJob('IniProc280',GetEnvServer(),.F.,cDate,aListaFil, aParAuto, cCompany, cBranch, cId, cIdChild, cUsername, cAcUserId)

return .T.

/*/{Protheus.doc} preparParamsPerg
    Metodo responsavel por converter o json recebido do fronte para um array para o MATA280
    @type  Metodo
    @author Samuel Macedo
    @Fevereiro 08,2021
    @version 12.1.27
/*/
Method preparParamsPerg(oJParams) class  acStockClosingServ
local aParams := {}
Local nX := 0 
Local cProccess := 'closing'

For nX := 1 to  len(oJParams[cProccess])
    Aadd(aParams, convertX1(oJParams[cProccess][nx]['value']))
next nX

return aParams

/*/{Protheus.doc} valitedBranchesDate
    Metodo responsavel por validar a data informada para processamento do MATA280
    @type  Metodo
    @author Denise
    @Julho 22,2021
    @version 12.1.27
/*/
Method valitedBranchesDate(dDataFec, aParansfil) class  acStockClosingServ
Local nX	        := 0
Local cFilBack      := cFilAnt
Local MV_ULMES
Local aFilsProc     :=  {}
Local nCount        :=  0 
Local oJCheck       :=  JsonObject():New()

    For nX := 1 To Len(aParansfil)
        If aParansfil[nX,1]
            cFilAnt := aParansfil[nX,2]
            MV_ULMES  := GetMV("MV_ULMES") 
            If dDataFec <= MV_ULMES 
                //--criar um json com o Data anterior 
                aAdd( aFilsProc, JsonObject():New() )

                nCount++
                aFilsProc[nCount]["branch"]     := cFilAnt
                aFilsProc[nCount]["mv_ulmes"]   := MV_ULMES
                aFilsProc[nCount]["dataOld"]    := dDataFec
                aFilsProc[nCount]["mensagem"]   := STR0010
                aFilsProc[nCount]["processa"]   := .F.

            EndIF
        EndIf
    Next nX
    If len(aFilsProc)>0  
	    oJCheck["branchProcess"] := aFilsProc
        ::lNotFoundCount := .T.
    EndIf 

cFilAnt := cFilBack
return oJCheck

/*/{Protheus.doc} validateParams
    Metodo responsavel por validar os parametros do processamento do MATA280
    @type  Metodo
    @author Samuel Macedo
    @Fevereiro 10,2021
    @version 12.1.27
/*/
Method validateParams(cCompany, cBranch, cDate, jConfig) class  acStockClosingServ
Local cReturn := ''
If Empty(cCompany) .or. (cCompany == "null")
    cReturn := STR0001 //'Company must be informed.'    
ElseIf Empty(cBranch) .or. (cBranch == "null")
    cReturn := STR0002 //'Branch must be informed.'
ElseIf Empty(cDate) .or. (cDate == "null")
    cReturn := STR0003 //'Date must be informed.'
ElseIf ValType(jConfig) == "U"
    cReturn := STR0004 //'Config must be informed.'
ElseIf ValType(jConfig['branches']) == "U"
    cReturn := STR0005 //'Branches must be informed in config.'    
ElseIf Len(jConfig['branches']) == 0
     cReturn := STR0005 //'Branches must be informed in config.'
ElseIf ValType(jConfig['closing']) == "U"
    cReturn := STR0006 //'Parameters must be informed in config.'    
ElseIf Len(jConfig['closing']) != 4
     cReturn := STR0007 //'The request waits for four parameters.'
EndIf
return cReturn

/*/{Protheus.doc} convertX1
    @type  Function
    @author user
    @since date
    @version version
    @param param, param_type, param_descr
    @return return, return_type, return_description
/*/

Function convertX1(oJParamsX1)
local xRet:= " "
If Valtype(oJParamsX1)="L"
    if oJParamsX1
        xRet:= 1
    else
        xRet:= 2
    EndIf
else
   xRet:= oJParamsX1
EndIF
    
return xRet

/*/{Protheus.doc} version
    Metodo responsavel por indicar a versao da classe
    @type  Metodo
    @author pedro.missaglia 
    @since  Marco 01, 2023
    @version 12.1.22.10
/*/
method version() class acStockClosingServ

return 100
