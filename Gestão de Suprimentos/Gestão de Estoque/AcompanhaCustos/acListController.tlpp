#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "aclistcontroller.ch"

using namespace ac.acList.service
using namespace ac.BasicValidation.Controller

class acList from acBasicValidationController

    public data cId                 as character
    public data jBodyResponse       as object
    public data jPath               as object
    public data cData               as character
    public data page                as character
    public data pageSize            as character
    public data cStateMemoryInQuery as character
    public data jParams             as object
    public method New()
    @Get("api/aclist/v1/listclosing")
    public method getAcList()

endclass

/*/{Protheus.doc} acList:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acList
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27
/*/
method new() class acList
    _Super:New()
    ::cId                 := ''
    ::cData               := ''
    ::jPath               := JsonObject():New()
    ::page                := ''
    ::pageSize            := ''
    ::jBodyResponse       := JsonObject():New()
    ::jParams             := JsonObject():New()
return Self

/*/{Protheus.doc} acConfigProf:getConfigProfile()
    Metodo responsavel retornar sx1 ou profile do usuário
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method getAcList() class acList

    Local oDictionaryValidator  as  Object
    Local oService              as Object
    Local cBranch               as character
    Local JsonResponse          as Object
    Local nPage         
    Local nPageSize
    Local finish := .F.         as logical
    Local aFilter               as Array
    Local cFilter               as character
    Local lOnlyD3X              as logical

    oDictionaryValidator := _Super:GetDictionaryValid()  
    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    ::jPath         := oRest:getQueryRequest()
    ::page          := ::jPath['page']
    ::pageSize      := ::jPath['pageSize']
    cBranch         := ::jPath['branch']
    finish          := Iif(Alltrim(::jPath['finish']) == 'true', .T., .F. )
    cFilter         := ::jPath['filter']

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else
        if Empty(cBranch)
            ::jBodyResponse["message"] := STR0001 //'Branch not informed.'
            ::cData := ::jBodyResponse:toJson() 
            oRest:setStatusCode(400)
            oRest:setResponse(::cData)
        else 
            if empty(::page)
                nPage := 1
            else
                nPage := val(::page)
            endif

            if empty(::pageSize)
                nPageSize := 12
            else 
                nPageSize := Val(::pageSize) 
            endif

            if Empty(cFilter) .or. (cFilter == 'null') 
                aFilter := {{"FILTER", ''}}
            else 
                aFilter := {{"FILTER", cFilter}}
            endif

            if ::jPath:HasProperty('onlyNew') .and. ::jPath:GetJsonObject('onlyNew') == 'true'
                lOnlyD3X := .T.
            else 
                lOnlyD3X := .F.
            endif

            oService  := ac.acList.service.acListService():new()
            JsonResponse := oService:getTheQueryResponse(nPage, nPageSize, finish, aFilter, lOnlyD3X)
            If !Empty(JsonResponse)
                oRest:setResponse(JsonResponse) 
            Else
                ::jParams["message"] := STR0002 //não foi possivel retornar a listagem de fechamento devido a inconsistencia na query
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(400)
                oRest:setResponse( ::cData )
            End
        endif
    endif
 
return .t.
