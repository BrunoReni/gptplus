#include "tlpp-core.th"
#include "tlpp-rest.th"
#include 'protheus.ch'
#INCLUDE "FWMVCDEF.CH"

namespace ac.acProduct.repository

CLASS acProductRepository FROM FWAdapterBaseV2

  Public method New()
  public method getTheQueryResponse()

EndClass

/*/{Protheus.doc} acProductRepository:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acProductRepository
    @type  Metodo
    @author denise.nogueira
    @since  Ago  13, 2021
    @version 12.1.27
/*/
Method new() CLASS acProductRepository

    Default cVerbo  := 'GET'
    Default lList   := .T.

	_Super:New(cVerbo, lList)

Return Self


/*/{Protheus.doc} acResultsAnalysisService
    Metodo responsavel por selecionar dados para listagem dos produtos
    @type  Metodo
    @author denise.nogueira
    @since  Ago  13, 2021
    @version 12.1.27
/*/
Method getTheQueryResponse(nPage, nPageSize, aBranch, aCode) Class acProductRepository

    Local cQuery        as Character
    Local cWhere        as Character
    Local cBranchAux    as Character
    Local cBranchList   as Character
    Local cFilterQuery  as Character
    Local cIndex        as Character
    Local nPosit        as Numeric
    Local nX            as Numeric
    Local jsonResponse  as object
    Local aFilial       := TamSx3('B1_FILIAL')
    Local aDescri       := TamSx3('B1_DESC')
    Local aCodigo       := TamSx3('B1_COD')

    // Guarda uma string com a lista de filiais passadas no filtro, separando por | para facilitar a manipulação das informações
    cBranchList := ''
    cCodeList   := ''
    // Variavel auxiliar para armazenar apenas a unidade da filial
    cBranchAux := ''
    aCodeAux   := ''
    // Variavel para armazenar a query de filtro que será passado no SetUrlFilter()
    cFilterQuery := ''
    cCodeQuery   := ''
    // Variavel para indicar a posição de onde deve começar o SubStr utilizado no While()
    nPosit := 1
    // Variavel auxiliar para marcar a posição no SubStr do primeiro item do filtro
    nX := AT("eq '", aBranch[1][2], nPosit)

    If(!Empty(aBranch[1][2]))
        varInfo('', aBranch)
        // Loop que recebe a lista de filtros (aBranch[1][2]) e manipula para deixar de acordo com o esperado em SetUrlFilter() 
        While (nPosit > 0)
            // Caso para tratar a primeira filial dentro do filtro
            If(nPosit == 1)
                cBranchAux := SubStr(aBranch[1][2], AT("'", aBranch[1][2])+1, Len(allTrim(xFilial("SB1")))) 
                cFilterQuery += "filial eq " + "'" + cBranchAux + "'" 
                cBranchList += cBranchAux + '|'
                nPosit := AT("eq '", aBranch[1][2], nX+1)
            Else
                // Caso seja a segunda filial em diante, é feito o tratamento do nome da filial e adicionado a clausula 'or' no filtro da query
                If !(SubStr(aBranch[1][2], AT("'",  aBranch[1][2], nPosit)+1, Len(allTrim(xFilial("SB1")))) $ cBranchList)
                    cBranchAux  := SubStr(aBranch[1][2], AT("'",  aBranch[1][2], nPosit)+1, Len(allTrim(xFilial("SB1"))))
                    cBranchList += cBranchAux + '|'
                    cFilterQuery += " or filial eq " + "'" + cBranchAux + "'" 
                EndIf
                nPosit := AT("eq '", aBranch[1][2], nPosit+1) 
            EndIf
        End
    EndIf

    If(!Empty(cFilterQuery)) .and. (!Empty(aCode[1][2]))
        aBranch[1][2] := '('+cFilterQuery+') and '+aCode[1][2] 
        ConOut(aBranch[1][2])
    elseIf  (!Empty(cFilterQuery)) .and. (Empty(aCode[1][2]))
        aBranch[1][2] := cFilterQuery 
        ConOut(aCode[1][2])
    elseIf (Empty(cFilterQuery)) .and. (!Empty(aCode[1][2])) 
        aBranch[1][2] := aCode[1][2]      
    EndIF

    cIndex := SQLOrder(SB1->(IndexKey(1)))
    conout(cIndex)

    cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " + RetSQLName("SB1") + " SB1  "
    cQuery += " WHERE #QueryWhere#  "
    cWhere := " SB1.D_E_L_E_T_ = ' ' "

    ::AddMapFields('filial', 'B1_FILIAL', .T., .T., { 'B1_FILIAL' , aFilial[3], aFilial[1], aFilial[2]})
    ::AddMapFields('descri', 'B1_DESC', .T., .T., { 'B1_DESC' , aDescri[3], aDescri[1], aDescri[2]})
    ::AddMapFields('codigo', 'B1_COD', .T., .T., { 'B1_COD' , aCodigo[3], aCodigo[1], aCodigo[2]})
    ::setPage(nPage)
    ::setPageSize(nPageSize)
    ::setQuery(cQuery)
    ::SetWhere(cWhere)
    ::SetOrder(cIndex)
    ::SetUrlFilter(aBranch)


    If ::Execute()
        ConOut(::oJsonObj:cQuery)
        ::FillGetResponse()
        jsonResponse := ::GetJsonResponse()
    EndIf

Return jsonResponse
