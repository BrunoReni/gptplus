#include "tlpp-core.th"
#include "tlpp-rest.th"

namespace ac.config.profile.service
using namespace ac.config.profile.repository


class acProfService
    public data lconsumptionProduction     as  logical
    public data lrecalculationAndAccounting as  logical
    public data cId         as  character
    public data cData       as  character
    public data jPath       as  character
    public data lNewperg    as  logical
    public data jBody       as  object
    public data MTA330      as  character
    public data MTA280      as  character
    public data aRet280     as  array
    public data aRet330     as  array
    public data aret        as  array
  

    public method New()
    public method getConfigProfile()
    public method getConfigRestoreSx1()
    public method postConfigProfile()
    public method putConfigProfile()
    public method convertsParameterValues()
    public method setContabilizationValues()
    public method setConsumptionProductionParams()
    public method setRecalculationAndAccounting()
    public method fixAndUpdateParametersProperty()
    public method activateNewPerg()
    public method ValidadeHasProperty()
    public method addProperty()
endclass

/*/{Protheus.doc} acProfService:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acProfService
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/
method new() class acProfService
    ::lconsumptionProduction      := .T.
    ::lrecalculationAndAccounting := .T.
    ::aRet330   := {}
    ::aRet280   := {}
    ::cId       := ''
    ::cData     := ''
    ::jPath     := ''
    ::jBody     := JsonObject():New()
    ::MTA280    := 'MTA280'
    ::MTA330    := 'MTA330'
    ::lNewperg  := findfunction('FwGetPerg')
    if ::lNewperg
        ::activateNewPerg()
    endif
return Self

/*/{Protheus.doc} acProfService:activateNewPerg()
    Metodo responsavel por retornar novo padrão de perguntes. 
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

Method activateNewPerg() class acProfService
    FwGetPerg('MTA330', nil, @::aRet330, nil, .F.)
    FwGetPerg('MTA280', nil, @::aRet280, nil, .F.)
return

/*/{Protheus.doc} acProfService:getConfigProfile()
    Metodo responsavel por retornar os perguntes do relatório 
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

Method getConfigProfile(cId,cCompany, cBranch) class acProfService

    local oConfigProfile    as Object 
    Local oConfigNewProfile := JsonObject():new()  as Object
    local oAux              as Object

    configRepository := ac.config.profile.repository.acProfRepository():new()
    oConfigProfile :=  configRepository:getHaveConfigProfile(cId, cCompany,cBranch) 

    //acionar o method de gravação

    if Empty(oConfigProfile)
        oConfigProfile:= JsonObject():new()
        oConfigProfile['recalculation']     :=  configRepository:getAcSX1('MTA330', 'MTA330')
        oConfigProfile['contabilization']   :=  configRepository:getAcSX1('MTA330', 'MTA331')
        oConfigProfile['closing']           :=  configRepository:getAcSX1('MTA280', 'MTA280')

        //Parametros virtuais
        oConfigProfile['consumptionProduction'] := ::setConsumptionProductionParams()['consumption_production']
        oConfigProfile['recalculationAndAccounting']:=::setRecalculationAndAccounting()['recalculation_accounting']
        oConfigProfile:ToJson()
    else    
        oConfigNewProfile:FromJSON( oConfigProfile )
        ::ValidadeHasProperty(oConfigNewProfile)
        If !::lconsumptionProduction .or. !::lrecalculationAndAccounting
            oConfigProfile:= ::addProperty(oConfigNewProfile)
        EndIF
        oConfigProfile := ::fixAndUpdateParametersProperty(oConfigNewProfile)
        oAux:= ::setContabilizationValues(oConfigProfile)
        oConfigProfile:= oAux:ToJson()
    endIf

return oConfigProfile

method addProperty(oSX1) class acProfService
    If !::lconsumptionProduction   
        oSX1['consumptionProduction'] := ::setConsumptionProductionParams()['consumption_production']
    EndIF
    If !::lrecalculationAndAccounting
        oSX1['recalculationAndAccounting']:=::setRecalculationAndAccounting()['recalculation_accounting']
    EndIF
Return oSX1


method ValidadeHasProperty(oSX1) class acProfService
    If !oSX1:HasProperty('consumptionProduction')
        ::lconsumptionProduction      := .F.
    ENDIF
    If !oSX1:HasProperty('recalculationAndAccounting')
        ::lrecalculationAndAccounting := .F.
    ENDIF
Return



method fixAndUpdateParametersProperty(oSX1) class acProfService
    Local configRepository := ac.config.profile.repository.acProfRepository():new() as  object
    default oSX1:= JsonObject():new()

    if ::lNewperg
        configRepository:fixAndUpdateParametersProperty(oSX1, ::aRet330, ::aRet280)
    else
        configRepository:insertNewOptionsSX1(oSX1)
    EndIf

Return oSX1:toJson()


method setContabilizationValues(cObj) class acProfService

local oAux    as Object

oAux:= JsonObject():new()
        oAux:fromJson(cObj)
        if Len(oAux['recalculation']['mta330']) > 11
            if oAux['recalculation']['mta330'][12]['value'] == 3 .OR. oAux['recalculation']['mta330'][12]['value'] == 0
                oAux['recalculation']['mta330'][12]['value']:= 3
            endif

            if oAux['recalculation']['mta330'][12]['value'] == 2 .OR. oAux['recalculation']['mta330'][12]['value'] == 1
                oAux['recalculation']['mta330'][12]['value']:= 2
            endif
        endif

        if Len(oAux['contabilization']['mta331']) > 11
            if oAux['contabilization']['mta331'][12]['value'] == 3 .OR. oAux['contabilization']['mta331'][12]['value'] == 0
                oAux['contabilization']['mta331'][12]['value']:= 3
            endif

            if oAux['contabilization']['mta331'][12]['value'] == 2 .OR. oAux['contabilization']['mta331'][12]['value'] == 1
                oAux['contabilization']['mta331'][12]['value']:= 2
            endif
        endif
return oAux

/*/{Protheus.doc} acProfService:getConfigRestoreSx1()
    Metodo responsavel sempre SX1 para restaurar do pergunte.
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/
method getConfigRestoreSx1() class acProfService
local oConfigProfile    as Object 
    configRepository := ac.config.profile.repository.acProfRepository():new()
    oConfigProfile:= JsonObject():new()
    oConfigProfile['recalculation']     :=  configRepository:getAcSX1('MTA330', 'MTA330')
    oConfigProfile['contabilization']   :=  configRepository:getAcSX1('MTA330', 'MTA331')
    oConfigProfile['closing']           :=  configRepository:getAcSX1('MTA280', 'MTA280')

    //Parametros virtuais
    oConfigProfile['consumptionProduction'] := ::setConsumptionProductionParams()['consumption_production']
    oConfigProfile['recalculationAndAccounting']:=::setRecalculationAndAccounting()['recalculation_accounting']
    
    oConfigProfile:ToJson()
return oConfigProfile


/*/{Protheus.doc} acProfService:postConfigProfile()
    Metodo responsavel por criar um perfil novo ou alterar o existente 
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/
method postConfigProfile(cId, cBody, cCompany, cBranch) class acProfService
local oConfigProfile    as Object 
configRepository := ac.config.profile.repository.acProfRepository():new()
oConfigProfile :=  configRepository:getHaveConfigProfile(cId,cCompany,cBranch) 
    
if Empty(oConfigProfile)
    lWrite := configRepository:postConfigProfile(cId, cBody,cCompany, cBranch)
else
    lWrite := configRepository:putConfigProfile(cId,cBody,cCompany, cBranch)
endif
return lWrite

/*/{Protheus.doc} acUsacProfServiceerService:putConfigProfile()
    Metodo responsavel por alterar o perfil
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/
method putConfigProfile(cId, cBody, cCompany, cBranch) class acProfService

local oConfigProfile    as Object 
Local lWrite            as logical 

lWrite := .F.
configRepository := ac.config.profile.repository.acProfRepository():new()
oConfigProfile :=  configRepository:getHaveConfigProfile(cId,cCompany,cBranch) 
    
if !Empty(oConfigProfile)
    lWrite := configRepository:putConfigProfile(cId,cBody,cCompany, cBranch)
endif
    
return lWrite
/*/{Protheus.doc} acUsacProfService:convertsParameterValues()
    Metodo responsavel por compatibiizar valores para FrontEnd
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/
method convertsParameterValues(cMv_par, xtype, cNameRoutine) class acProfService

Local xRet := ""

If Alltrim(cNameRoutine) == ::MTA280
    Do Case
        Case cMv_par == "mv_par01"
            xRet := .F.
        Case  cMv_par == "mv_par02"
            Iif(xtype == 1 ,xRet := .T., xRet := .F.)
        Case cMv_par == "mv_par03"
            Iif(xtype == 1 ,xRet := .T., xRet := .F.)    
        Case  cMv_par == "mv_par04"
            Iif(xtype == 2 , xRet := .F.,xRet := .T.)
        EndCase
elseif Alltrim(cNameRoutine) == ::MTA330
       Do Case 
        Case cMv_par == "mv_par01"
            if ValType( xtype) == "D"
                xRet := xtype 
            else
                xRet := " "
            endIf
        Case cMv_par == "mv_par02"
            xRet := .F.
        Case  cMv_par == "mv_par03"
            Iif(xtype == 2, xRet := .F.,xRet := .T.)
        Case  cMv_par == "mv_par04"
            Iif(xtype == 2,xRet := .F., xRet := .T.)
        Case  cMv_par == "mv_par05"
            xRet := xtype
        Case  cMv_par == "mv_par06"
            Iif(xtype == 0, xRet := 1, xRet := xtype) 
        Case  cMv_par == "mv_par07"
            if ValType( xtype) == "C"
                xRet := xtype 
            else
                xRet := ""
            endIf
        Case  cMv_par == "mv_par08"
            if ValType( xtype) == "C"
                xRet := xtype 
            else
                xRet := ""
            endIf
        Case  cMv_par == "mv_par09"
            Iif(xtype == 2, xRet := .F., xRet := .T.)
        Case  cMv_par == "mv_par10"
            xRet := xtype
        Case  cMv_par == "mv_par11"
            Iif(xtype == 2, xRet := .F., xRet := .T.)
        Case  cMv_par == "mv_par12"
            Iif( xtype == 3, xRet := xtype, xRet := 2)
        Case  cMv_par == "mv_par13"
            Iif(xtype == 2, xRet := .F., xRet := .T.)
        Case  cMv_par == "mv_par14"
                xRet := xtype
        Case  cMv_par == "mv_par15"
            Iif(xtype == 2, xRet := .F., xRet := .T.)
        Case  cMv_par == "mv_par16"
              xRet := xtype
        Case  cMv_par == "mv_par17"
              xRet := xtype
        Case  cMv_par == "mv_par18"
              xRet := xtype
        Case  cMv_par == "mv_par19"
             Iif(xtype == 2, xRet := .F., xRet := .T.)
        Case  cMv_par == "mv_par20"
             xRet := xtype
        case cMv_par == "mv_par21"
            Iif(xtype == 2, xRet := .F., xRet := .T.)
    EndCase
EndIf

return xRet

/*/{Protheus.doc} acProfService:setVirtualParams()
    Metodo responsavel configuracao de perguntes virtuais
    @type  Metodo
    @author Squad Entradas
    @since  Julho 11, 2022
    @version 12.1.33
/*/
method setConsumptionProductionParams() class acProfService

Local oJson    as Object 
Local oParams  as Object
Local aVirtual as Array


aVirtual := {}
Aadd(aVirtual, JsonObject():new())

aVirtual[1]['parameter']    := 'mv_par01_virtual' //Nomenclatura de parametro virtual
aVirtual[1]['definition']   := 'Parametro de calculo de mao de obra para o fluxo de consumo e producao' //Propriedade informativa
aVirtual[1]['value']        := .F. //Por default o primeiro e criado como falso

oJson   := JsonObject():new()
oParams := JsonObject():new()

oParams['parameters'] := aVirtual

oJson['consumption_production'] := oParams

return oJson


/*/{Protheus.doc} acProfService:setVirtualParams()
    Metodo responsavel configuracao de perguntes virtuais
    @type  Metodo
    @author Squad Entradas
    @since  Julho 11, 2022
    @version 12.1.33
/*/
method setRecalculationAndAccounting() class acProfService

Local oJson    as Object 
Local oParams  as Object
Local aVirtual as Array


aVirtual := {}
Aadd(aVirtual, JsonObject():new())

aVirtual[1]['parameter']    := 'mv_par02_virtual' //Nomenclatura de parametro virtual
aVirtual[1]['definition']   := 'recalculo e contabilizacao auto' //Propriedade informativa
aVirtual[1]['value']        := .F. //Por default o primeiro e criado como falso

oJson   := JsonObject():new()
oParams := JsonObject():new()

oParams['parameters'] := aVirtual

oJson['recalculation_accounting'] := oParams

return oJson





