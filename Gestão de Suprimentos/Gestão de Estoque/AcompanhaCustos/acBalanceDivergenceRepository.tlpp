#include "tlpp-core.th"
#INCLUDE "FWMVCDEF.CH"

namespace ac.acDivergence.repository

CLASS acDivergenceRepository FROM FWAdapterBaseV2
  data fields    AS Object 
  data cMensErro AS character
  public method New()
  public method setQueryFields()
  public method GetQuery()
  public method GetWhere()
  public Method logErrorProc()  
  public method createTable()
  public method getInsertCommand()
  public method insertTable()
  public method GetCount()
  public method getTableIdName()
EndClass

//-------------------------------------------------------------------

/*/{Protheus.doc} new
Instancia a classe
@author samuel.macedo
@since Fev 26 2021
@version 1.0
/*/
//-------------------------------------------------------------------

Method new(cVerbo as character, lList as Logical) CLASS acDivergenceRepository
    Default cVerbo  := 'GET'
    Default lList   := .T.
    _Super:New(cVerbo, lList)
Return Nil


//-------------------------------------------------------------------
/*/{Protheus.doc} setQueryFields
Define as propriedades de retorno do json
@author samuel.macedo
@since Fev 26 2021
@version 1.0
/*/
//-------------------------------------------------------------------
Method setQueryFields() Class acDivergenceRepository
    Local aBranch       := TamSx3('TRC_FILIAL')
    Local aProduct      := TamSx3('B2_COD')     
    Local aWarehouse    := TamSx3('B2_LOCAL')
    Local aBalance      := TamSx3('B2_QFIM')

    ::AddMapFields('branch',     'TRC_FILIAL', .T., .T., { 'TRC_FILIAL' , aBranch[3], aBranch[1], aBranch[2]})
    ::AddMapFields('type',     'TRC_ALIAS', .T., .T.,  { 'TRC_ALIAS' , aBranch[3], aBranch[1], aBranch[2]})
    ::AddMapFields('product',    'TRC_COD',    .T., .T., { 'TRC_COD' , aProduct[3], aProduct[1], aProduct[2]})
    ::AddMapFields('warehouse',  'TRC_LOCAL',  .T., .T., { 'TRC_LOCAL' , aWarehouse[3], aWarehouse[1], aWarehouse[2]})
    ::AddMapFields('balance',    'TRC_QFIM',   .T., .T., { 'TRC_QFIM' , aBalance[3], aBalance[1], aBalance[2]})
    ::AddMapFields('balanceDiv', 'TRC_DIVERG', .T., .T., { 'TRC_DIVERG' , aBalance[3], aBalance[1], aBalance[2]})
Return 


//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada
@author samuel.macedo
@since Fev 26 2021
@version 1.0
/*/
//-------------------------------------------------------------------
method getQuery(cId) Class acDivergenceRepository
	Local cQuery := ''
	cQuery := " SELECT #QueryFields#"
    cQuery += " FROM " + ::getTableIdName(cId)
	cQuery += " WHERE #QueryWhere#"
Return cQuery


//-------------------------------------------------------------------
/*/{Protheus.doc} getWhere
Retorna o where da query
@author samuel.macedo
@since Fev 26 2021
@version 1.0
/*/
//-------------------------------------------------------------------
method getWhere() Class acDivergenceRepository
	Local cWhere  := " D_E_L_E_T_  = ' ' "
Return cWhere

/*/{Protheus.doc} acDivergenceRepository:insertTable()
    Metodo responsavel por instanciar e iniciar as variaveis da class acDivergenceRepository
    @type  Metodo
    @author samuel.macedo
/*/
Method insertTable(cInsert) class acDivergenceRepository

Local lRet as Logical

lRet := .T.

If (TcSqlExec(cInsert) < 0)
	::cMensErro := TCSQLError() + " ocorrida função " +ProcName(-1)+ " na linha " +cValtoChar(ProcLine(-1))+ ". "
  lRet := .F. 
EndIf

return lRet


/*/{Protheus.doc} acDivergenceRepository:getFullFields()
    Function responsavel por retornar os campos
    @type  Function
    @author samuel.macedo
    @since  Março 02, 2021
    @version 12.1.27
/*/
Function getFullFields(aCampos) 

Local aBranch       := TamSx3('B2_FILIAL')
Local aProduct      := TamSx3('B2_COD')     
Local aWarehouse    := TamSx3('B2_LOCAL')
Local aBalance      := TamSx3('B2_QFIM')

Aadd(aCampos ,{"TRC_FILIAL",aBranch[3],aBranch[1],aBranch[2]})
Aadd(aCampos ,{"TRC_ALIAS",aBranch[3],aBranch[1],aBranch[2]})
Aadd(aCampos ,{"TRC_COD",aProduct[3],aProduct[1],aProduct[2]})
Aadd(aCampos ,{"TRC_LOCAL",aWarehouse[3],aWarehouse[1],aWarehouse[2]})
Aadd(aCampos ,{"TRC_QFIM",aBalance[3],aBalance[1],aBalance[2]})
Aadd(aCampos ,{"TRC_DIVERG",aBalance[3],aBalance[1],aBalance[2]})

Return aCampos


/*/{Protheus.doc} acDivergenceRepository
    Metodo responsavel por inserir os dados na tabela
    @type  Metodo
    @author samuel.macedo
    @since  Março 02, 2021
    @version 12.1.27
/*/

Method getInsertCommand(cTable, aLogs, cFil) Class acDivergenceRepository
	Local cCampos:= " "
	Local cInsert:= " "	
    Local nX
    Local nX2
	
	cCampos:= "TRC_FILIAL, TRC_ALIAS, TRC_COD, TRC_LOCAL, TRC_QFIM, TRC_DIVERG"  
	cInsert:= "INSERT INTO " + cTable +" ("+ cCampos +") VALUES "  
    //-- aLog[n, 1] = ALIAS
    //-- aLog[n, 2] = Produto
    //-- aLog[n, 3] = Local
    //-- aLog[n, 4] = Quantidade final no SB2
    //-- aLog[n, 5] = Quantidade da composicao do movimento do ALIAS ate a data final
    For nX := 1 to Len(aLogs)
        For nX2 := 1 to Len(aLogs[nX])
            cInsert += "('" + cFil + "','" + aLogs[nX][nX2][1] + "', '" + aLogs[nX][nX2][2] + "','" + aLogs[nX][nX2][3] + "'," + cValtoChar(aLogs[nX][nX2][4]) + "," + cValtoChar(aLogs[nX][nX2][5]) + ") "
        
            If !(Len(aLogs[nX]) == nX2)
                cInsert += ","
            EndIf
        Next nX2
    Next nX

Return cInsert

/*/{Protheus.doc} acDivergenceRepository:createTable()
    Metodo responsavel pela criação da tabela
    @type  Metodo
    @author samuel.macedo
    @since  Março 02, 2021
    @version 12.1.27
/*/
Method createTable(cTableName) CLASS acDivergenceRepository
Local aCampos as Array
aCampos := {}

aCampos := getFullFields(aCampos)	

FwDbCreate(cTableName, aCampos,"TOPCONN",.T.)
DbUseArea(.T.,"TOPCONN",cTableName,cTableName,.T.)   
DBCreateIndex(cTableName+'_01', 'TRC_FILIAL+TRC_COD+TRC_LOCAL')

Return

/*/{Protheus.doc} acDivergenceRepository:getTableIdName()
    Metodo responsavel para retornar o nome da tabela
    @type  Metodo
    @author samuel.macedo
    @since  Março 02, 2021
    @version 12.1.27
/*/
Method getTableIdName(id) CLASS acDivergenceRepository

Return Upper('D'+id)

/*/{Protheus.doc} 
    Metodo responsavel para retornar a quantidade de registros na tabela
    @type  Metodo
    @author samuel.macedo
    @since  fev. 26 2021 
    @version 12.1.27
/*/
method GetCount(cTableName) class acDivergenceRepository
  Local cQuantity as character
  Local cQuery  := ''
  Local cAlias 	:= GetNextAlias()

  cQuery := " SELECT COUNT(TRC_COD) QUANT "
  cQuery += " FROM " + cTableName
  cQuery += " WHERE D_E_L_E_T_  = ' ' "

  cQuery := ChangeQuery(cQuery)

  dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)

  cQuantity := (cAlias)->QUANT
  
Return cQuantity
