#include "tlpp-core.th"
#include "FWMVCDEF.CH"
#include "acparameters.ch"

namespace ac.acParameters.service

CLASS acParametersService
  public data aParams as Array
  Public method New()
  Public method getParameters()
  Public method getParametersByBranch()
  Public method validateParams()
EndClass


/*/{Protheus.doc} acParametersService:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acParametersService
    @type  Metodo
    @author Samuel Macedo
    @since  Maio 2021
    @version 12.1.27
/*/
Method new() CLASS acParametersService
    ::aParams := {"MV_ULMES", "MV_A280SDA"}
Return Nil

/*/{Protheus.doc} getParameters
    Metodo responsavel por retornar os parametros do sx6 de cada filial informada
    @type  Metodo
    @author Samuel Macedo
    @since  Maio 2021
    @version 12.1.27
/*/
Method getParameters(aBranches) Class acParametersService
Local cFilBack := cFilAnt
Local nX       as numeric

For nX := 1 to Len(aBranches)
    cFilAnt := aBranches[nX]["Code"]
    aBranches[nX]["parameters"] := ::getParametersByBranch()
Next nX

cFilAnt := cFilBack

Return aBranches 

/*/{Protheus.doc} getParametersByBranch
    Metodo responsavel por retonar os parametros da filial selecionada 
    @type  Metodo
    @author Samuel Macedo
    @since  Maio 2021
    @version 12.1.27
/*/
Method getParametersByBranch() Class acParametersService
Local aListParameters as Array
Local nX              as numeric

aListParameters := {}

For nX := 1 to Len(::aParams)
    aAdd( aListParameters,  JsonObject():New() )
    aListParameters[nX]["label"]:= ::aParams[nX]
    aListParameters[nX]["value"]:= GetMv(::aParams[nX], .F., .F.)        
Next nX

Return aListParameters 

/*/{Protheus.doc} validateParams
    Metodo responsavel por validar se foi informada alguma branch 
    @type  Metodo
    @author Samuel Macedo
    @Fevereiro Maio 2021
    @version 12.1.27
/*/
Method validateParams(aBranches) class acParametersService
Local cReturn := ''
If ValType(aBranches) == "U" .or. Len(aBranches) == 0
    cReturn := STR0001 // 'Branches must be informed in branches.'
EndIf

return cReturn

