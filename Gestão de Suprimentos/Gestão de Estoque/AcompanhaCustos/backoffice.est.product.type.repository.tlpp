#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "fwlibversion.ch"

namespace totvs.protheus.backoffice.est.product.type.repository

/*/{Protheus.doc} ProductTypeRepository
    Classe responsavel pela consulta de Tipos de Produto
    @type Class
    @author Squad.Entradas
    @since 15/02/2023
    @version 1.0
    /*/
Class ProductTypeRepository

    public method new()
    public method listProductType()
    public method getFieldsPrdType()

EndClass

/*/{Protheus.doc} new
    Metodo responsavel por instanciar a classe
    @type Method
    @author Squad.Entradas
    @since 15/02/2023
    @version 1.0
    @return Self, Object, Object Instance
    /*/
Method new() Class ProductTypeRepository

Return Self

/*/{Protheus.doc} listProductType
    Metodo responsavel por buscar e listar os Tipos de Produto
    @type Method
    @author Squad.Entradas
    @since 15/02/2023
    @version 1.0
    @param  aUrlFilter, array, array com filtro de tipos de produto
    @return jBodyResponse, json, resposta da requisicao
    /*/
Method listProductType(aUrlFilter as array) Class ProductTypeRepository
    local jBodyResponse := JsonObject():New() as json

    jBodyResponse := ::getFieldsPrdType(aUrlFilter)

Return jBodyResponse

/*/{Protheus.doc} getFieldsPrdType
    Retorna informacoes dos Tipos de Produto em json
    @type Method
    @author Squad.Entradas
    @since 15/02/2023
    @version 1.0
    @param  aUrlFilter, array, array com filtro de tipos de produto
    @return jBodyResponse, json, resposta da requisicao
    /*/
Method getFieldsPrdType(aUrlFilter as array) Class ProductTypeRepository
    local jBodyResponse := JsonObject():New()   as json
    local jMessage      := JsonObject():New()   as json
    local aFilterCod    := {}                   as array
    local aContent      := {}                   as array
    local aTypes        := {}                   as array
    local cLibVersion   := FwLibVersion()       as character
    local cIdiom        := FwRetIdiom()         as character
    local cSearch       := "code eq '"          as character
    local nPosCode      := 0                    as integer
    local nTamTipo      := TamSX3("B1_TIPO")[1] as integer
    local nX            := 0                    as integer
    local nY            := 0                    as integer

    if cLibVersion >= "20190705"

        nPosCode := at(cSearch, aUrlFilter[1][2])
        while nPosCode > 0
            aadd(aFilterCod, SubStr(aUrlFilter[1][2], nPosCode + len(cSearch), nTamTipo))
            nPosCode := at(cSearch, aUrlFilter[1][2], nPosCode + len(cSearch) + nTamTipo)
        end

        if len(aFilterCod) > 0
            aSort(aFilterCod)
        else
            aFilterCod := {""}
        endif

        for nX := 1 to len(aFilterCod)
            aContent := FWGetSX5("02", aFilterCod[nX], cIdiom)
            for nY := 1 to len(aContent)
                aadd(aTypes, JsonObject():New())
                aTypes[len(aTypes)]["code"]        := alltrim(aContent[nY][3])
                aTypes[len(aTypes)]["description"] := EncodeUTF8(aContent[nY][4])
            next nY
        next nX
    endif

    if len(aTypes) > 0
        jMessage["hasNext"]         := .F.
        jMessage["items"]           := aclone(aTypes)
        jBodyResponse["statusCode"] := 200
        jBodyResponse["response"]   := jMessage
    else
        jMessage["message"]         := "Registro nao encontrado."
        jBodyResponse["statusCode"] := 400
        jBodyResponse["response"]   := jMessage
    endif

    FreeObj(jMessage)
    aSize(aFilterCod, 0)
    aSize(aContent, 0)
    aSize(aTypes, 0)

Return jBodyResponse
