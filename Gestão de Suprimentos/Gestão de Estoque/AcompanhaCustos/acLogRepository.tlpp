#include "tlpp-core.th"
#include "tlpp-rest.th"
#include 'protheus.ch'
#INCLUDE "TOPCONN.ch"
#INCLUDE "TBICONN.CH"
#INCLUDE "FWEVENTVIEWCONSTS.CH"


namespace ac.Log.Repository

Class acLogRepository FROM FWAdapterBaseV2
    public Method New()
    public Method GetStatusD3Y()
    public Method GetStatusD3X()
    public method getQueryById()
    public Method eventMensag() 
    public Method GetD3X()
    public Method GetD3W()
    public Method getIdChild()
    public Method deleteLatestD3YFromId()
    public Method countD3YFromId()
    public Method isD3YSB9()
    
EndClass

/*/{Protheus.doc} 
    @type  Metodo
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

Method new() class acLogRepository
    Local cVerbo  := 'GET'
    Local lList   := .T.

	_Super:New(cVerbo, lList)
return Self

/*/{Protheus.doc} 
    @type  Metodo
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

Method GetStatusD3Y() class acLogRepository
    Local cAlias        := GetNextAlias()
    Local oUnavailable  := JsonObject():New()
    Local oAux          := JsonObject():New()
    Local cStateMemoryInQuery
    Local lStateChanged := .F.
    Local nX            := 0
    Local nZ            := 0
    Local aBranches     := {}
    cStateMemoryInQuery := TCConfig('GETMEMOINQUERY');

    
    If (cStateMemoryInQuery == 'OFF')
        lStateChanged := .T.
        TCConfig('SETMEMOINQUERY=ON')
    EndIf
    
    cQuery := "SELECT D3Y.D3Y_IDEXEC IDEXEC, D3Y.D3Y_DTFECH DATEFECH, D3Y.D3Y_BRANCH BRANCH"
    cQuery += "FROM "+RetSQLName("D3Y") + " D3Y " 
    cQuery += "WHERE (D3Y.D3Y_STATUS = 'P' "
     cQuery+= "OR D3Y.D3Y_STATUS = 'ER') "
    CQuery += "AND D_E_L_E_T_ = ' '" 

    cQuery :=  ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)
     
    
    While (cAlias)->(!Eof())
        oAux:fromJson((cAlias)->BRANCH)
        For nX := 1 to Len(oAux)
            Aadd(aBranches,JsonObject():new())
            nZ++
            aBranches[nZ]["Code"]           := oAux[nX]["Code"]
            aBranches[nZ]["Description"]    := oAux[nX]["Description"]
            aBranches[nZ]["Date"]           := stod((cAlias)->DATEFECH)
            aBranches[nZ]["IdExec"]         := (cAlias)->IDEXEC 
        Next nX
        (cAlias)->(dbSkip())
    EndDo

    oUnavailable["branches"] := aBranches

        If lStateChanged
        TCConfig('SETMEMOINQUERY=OFF')
    EndIf

    (cAlias)->(DbCloseArea())

    FreeObj( oAux )
    
Return oUnavailable


/*/{Protheus.doc} 
    Metodo responsavel por gravar informações na D3Y
    @type  Metodo
    @author Denise Nogueira
    @since  Janeiro 14,2021
    @version 12.1.27
/*/

Method getQueryById(cId) class acLogRepository
    Local cAlias        := GetNextAlias()
    Local oAux          := JsonObject():New()
    Local oResponse     := JsonObject():New()
    Local cStateMemoryInQuery
    Local nX            := 0
    Local nZ            := 0
    Local lStateChanged := .F.
    Local aBranches     := {}
    cStateMemoryInQuery := TCConfig('GETMEMOINQUERY');

    
    If (cStateMemoryInQuery == 'OFF')
        lStateChanged := .T.
        TCConfig('SETMEMOINQUERY=ON')
    EndIf


    cQuery := "SELECT D3Y.D3Y_IDEXEC IDEXEC, D3Y.D3Y_POSITI POSITI, D3Y.D3Y_IDPROS IDPROS, D3Y.D3Y_BRANCH BRANCH "
    cQuery += "FROM "+RetSQLName("D3Y") + " D3Y " 
    cQuery += "WHERE D3Y.D3Y_IDEXEC = '" + cId + "' "
    CQuery += "AND D_E_L_E_T_ = ''" 

    cQuery :=  ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)
     
    
    While (cAlias)->(!Eof())
        oAux:fromJson((cAlias)->BRANCH)
        For nX := 1 to Len(oAux)
            Aadd(aBranches,JsonObject():new())
            nZ++
            aBranches[nZ]["Code"]           := oAux[nX]["Code"]
            aBranches[nZ]["Description"]    := oAux[nX]["Description"]
            aBranches[nZ]["Cgc"]            := oAux[nX]["Cgc"]
        Next nX
            oResponse["idParent"] := alltrim((cAlias)->IDEXEC)
            oResponse["idChild"] := alltrim((cAlias)->IDPROS)
            oResponse["position"] := alltrim((cAlias)->POSITI)
        (cAlias)->(dbSkip())
    EndDo

    oResponse["branches"] := aBranches

        If lStateChanged
        TCConfig('SETMEMOINQUERY=OFF')
    EndIf

    (cAlias)->(DbCloseArea())

    FreeObj( oAux )
    
Return oResponse

/*/{Protheus.doc} eventMensag
    Metodo responsavel por envio de mensagens.
    @type  Metodo
    @author André Maximo 
    @since  Novembro 26,2020
    @version 12.1.27
/*/

Method eventMensag(title, message, event,cEmp,cCompany, cBranch) class acLogRepository

IniEnviron(cCompany,cBranch)

EventInsert(FW_EV_CHANEL_ENVIRONMENT, FW_EV_CATEGORY_MODULES, event,FW_EV_LEVEL_INFO,"",EncodeUtf8(title),EncodeUtf8(message),.T.)

return 


/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Samuel Macedo 
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

method GetStatusD3X(id, cProccess, cIdProccess, cBranch) class acLogRepository
    Local cAlias := GetNextAlias()
    Local oRet := JsonObject():New()
    Local cStateMemoryInQuery

    cStateMemoryInQuery := TCConfig('GETMEMOINQUERY');

    If (cStateMemoryInQuery == 'OFF')
        TCConfig('SETMEMOINQUERY=ON')
    EndIf

    cQuery := "SELECT D3X.D3X_STATUS STATUS,"
    cQuery += " D3X.D3X_MSG MSG,"
    cQuery += " D3X.D3X_FILIAL FILIAL,"
    cQuery += " D3X.D3X_IDPROS IDPROS,"
    cQuery += " D3X.D3X_IDEXEC IDEXEC,"
    cQuery += " D3X.D3X_SBPROC SBPROC,"
    cQuery += " D3X.D3X_DATAPR DATAPR,"
    cQuery += " D3X.D3X_FILLOG FILLOG,"
    cQuery += " D3X.D3X_IDMOV IDMOV,"
    cQuery += " D3X.D3X_THREAD THREAD,"
    cQuery += " D3X.D3X_HORA HORA,"
    cQuery += " D3X.D3X_DATA DATAEXEC,"
    cQuery += " D3X.D3X_DET DET "
    cQuery += "FROM "+RetSQLName("D3X") + " D3X " 
    cQuery += "WHERE D3X.D3X_IDEXEC = '" + id + "'"
    cQuery += "  AND D3X.D3X_IDPROS = '" + cIdProccess + "'"
    cQuery += "  AND ((D3X.D3X_STATUS <> ''"
    cQuery += "  AND D3X.D3X_SBPROC = '')"
    cQuery += "  OR (D3X.D3X_STATUS = 'ER'"
    cQuery += "  AND D3X.D3X_SBPROC <> ''))"
    cQuery += "  AND D3X.D3X_PROC = '" + cProccess + "'"

    If !Empty(cBranch)
        cQuery += "  AND D3X.D3X_FILLOG = '" + cBranch + "'"
    EndIf
    
    cQuery += "  AND D3X.D_E_L_E_T_= ' ' "  
    cQuery += " ORDER BY STATUS DESC, R_E_C_N_O_ DESC"
    cQuery :=  ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)
    
    If Select(cAlias) > 0 
        oRet['idProccess']      := (cAlias)->IDPROS
        oRet['info']            := (cAlias)->MSG
        oRet['infoDetail']      := (cAlias)->DET
        oRet['status']          := (cAlias)->STATUS
        oRet['idThread']        := (cAlias)->THREAD
        oRet['currentBranch']   := (cAlias)->FILLOG
        oRet['branch']          := (cAlias)->FILIAL
        oRet['proccessDate']    := (cAlias)->DATAPR
        oRet['idMov']           := (cAlias)->IDMOV
        oRet['hour']            := (cAlias)->HORA
        oRet['date']            := (cAlias)->DATAEXEC
              
        if (cAlias)->STATUS == 'ER'
            (cAlias)->(dbSkip())
            oRet['errorStep'] := (cAlias)->STATUS
        endif
    EndIf

    If (cStateMemoryInQuery == 'OFF')
        TCConfig('SETMEMOINQUERY=OFF')
    EndIf

    (cAlias)->(DbCloseArea())

Return oRet

/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Squad Entradas
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

method GetD3X(id, page, pageSize) class acLogRepository
    Local oRet      := JsonObject():New()
    Local cQuery    := ''
    Local cIndex    := ''
    Local cWhere    := ''
    Local nX        := 0
    Local aFields   := {}
    Local aLabels   := {}
    Local aSX3Aux   := {}

    aFields :=  {   'D3X_FILIAL', 'D3X_PROC', 'D3X_DATA', 'D3X_HORA', 'D3X_IDPROS',;
                    'D3X_IDEXEC', 'D3X_USER', 'D3X_MSG', 'D3X_INFO',;
                    'D3X_SBPROC', 'D3X_IDMOV', 'D3X_FILLOG', 'D3X_DATAPR',;
                    'D3X_STATUS', 'D3X_THREAD', 'D3X_DET';
                } 

    aLabels :=  {   'branch', 'process', 'date', 'hour', 'idChild',;
                    'idParent', 'user', 'message', 'info',;
                    'subprocess', 'idmov', 'loggedBranch', 'processingDate',;
                    'status', 'thread', 'details';
                }             
    cStateMemoryInQuery := TCConfig('GETMEMOINQUERY');

    If (cStateMemoryInQuery == 'OFF')
        TCConfig('SETMEMOINQUERY=ON')
    EndIf

    cIndex := SQLOrder(D3X->(IndexKey(1)))

    cQuery := "SELECT #QueryFields# "
    cQuery += "FROM " + RetSQLName('D3X') + " WHERE #QueryWhere# " 
    cWhere :=  "D3X_IDPROS = '" + id + "' AND D_E_L_E_T_ = ' ' "  

    For nX := 1 to Len(aFields)
        aSX3Aux := TamSx3(aFields[nX])
        ::AddMapFields(aLabels[nX], aFields[nX], .T., .T., { aFields[nX] , aSX3Aux[3], aSX3Aux[1], aSX3Aux[2]})
    Next nX
    ::setPage(page)
    ::setPageSize(pageSize)
    ::setQuery(cQuery)
    ::SetWhere(cWhere)
    ::SetOrder('R_E_C_N_O_')

    If ::Execute()
        ::FillGetResponse()
        oRet := ::GetJsonResponse()
    EndIf 

    If (cStateMemoryInQuery == 'OFF')
        TCConfig('SETMEMOINQUERY=OFF')
    EndIf


Return oRet


/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Squad Entradas
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

method getIdChild(id) class acLogRepository

Local lRet := .F.

DbSelectArea('D3X')
D3X->(DbSetOrder(6))
lRet := D3X->(dbSeek(xFilial('D3X')+id))

Return lRet

/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Squad Entradas
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

method deleteLatestD3YFromId(id) class acLogRepository

Local oJourney := acJourneyLog():New()

Return oJourney:deleteD3YTable(id)


/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Squad Entradas
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

method countD3YFromId(cId) class acLogRepository

    Local cAlias        := GetNextAlias()
    Local nX            := 0
    Local cQuery        := ''

    cQuery := "SELECT D3Y.D3Y_IDEXEC IDEXEC"
    cQuery += "FROM "+RetSQLName("D3Y") + " D3Y " 
    cQuery += "WHERE D3Y.D3Y_IDEXEC = '" + cId + "' "
    CQuery += "AND D_E_L_E_T_ = ''" 

    cQuery :=  ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)
     
    
    While (cAlias)->(!Eof())
        nX++
        (cAlias)->(dbSkip())
    EndDo

    (cAlias)->(DbCloseArea())

Return nX

/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Squad Entradas
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

method isD3YSB9(cId) class acLogRepository

    Local cAlias        := GetNextAlias()
    Local isSB9 := .F.
    Local cQuery := ''

    cQuery := "SELECT D3Y.D3Y_TYPE TYPE "
    cQuery += "FROM "+RetSQLName("D3Y") + " D3Y " 
    cQuery += "WHERE D3Y.D3Y_IDEXEC = '" + cId + "' "
    cQuery += "AND D3Y.D3Y_STATUS = 'ER' "
    cQuery += "AND D3Y.D3Y_POSITI = 'RE1' "
    cQuery += "AND D_E_L_E_T_ = ' '" 

    cQuery :=  ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)
     
    isSB9 := Upper(Alltrim((cAlias)->TYPE)) == 'SB9'

    (cAlias)->(DbCloseArea())

Return isSB9

/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Squad Entradas
    @since  Dezembro 01,2020
    @version 12.1.27
/*/

method GetD3W(cIdParent, cProcess) class acLogRepository

    Local cAlias        := GetNextAlias()
    Local cQuery        := ''
    Local oRet          := JsonObject():New()

    cQuery := "SELECT D3W.D3W_IDPROS IDPROS"
    cQuery += "FROM "+RetSQLName("D3W") + " D3W " 
    cQuery += "WHERE D3W.D3W_IDEXEC = '" + cIdParent + "' "
    cQuery += "AND D3W.D3W_PROC = '" + cProcess + "' "  
    CQuery += "AND D_E_L_E_T_ = '' ORDER BY 1 DESC" 

    cQuery :=  ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)
     
    If (cAlias)->(!Eof())
        oRet['idRepair'] := (cAlias)->IDPROS
        oRet['founded']   := .T.
    Else 
        oRet['founded']   := .F.
    Endif 
    
    (cAlias)->(DbCloseArea())

Return oRet

