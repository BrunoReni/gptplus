#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acprofcontroller.ch"

using namespace ac.config.profile.service

class acConfigProf

    public data cId as character
    public data cData as character
    public data jPath as object
    public data jBody as object

    public method New()

    @Get("api/acConfigProf/v1/profile/:id")
    public method getConfigProfile()

    @Get("api/acConfigProf/v1/profile/restore")
    public method getConfigRestoreSx1()

    @Post("api/acConfigProf/v1/profile/:id")
    public method postConfigProfile()

    @Put("api/acConfigProf/v1/profile/:id")
    public method putConfigProfile()

endclass

/*/{Protheus.doc} acConfigProf:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acConfigProf
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/
method new() class acConfigProf
    ::cId   := ''
    ::cData := ''
    ::jBody := JsonObject():New()
return Self

/*/{Protheus.doc} acConfigProf:getConfigProfile()
    Metodo responsavel retornar sx1 ou profile do usuário
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method getConfigProfile() class acConfigProf
    Local oConfigProfileService    as Object
    Local jBodyResponse            as Object
    Local cRetornoProfile          as character 
    Local ojQueryCompany           as Object

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jPath := oRest:getPathParamsRequest()
    ::cId   :=  ::jPath[ 'id' ] 
    jBodyResponse := JsonObject():New()
    
    oConfigProfileService := ac.config.profile.service.acProfService():new()
    ojQueryCompany  := oRest:getQueryRequest()
    cCompany := ojQueryCompany['company'] 
    cBranch  := ojQueryCompany['branch']  
    cRetornoProfile := oConfigProfileService:getConfigProfile(::cId, cCompany, cBranch) 
    jBodyResponse["ConfigProfile"] := cRetornoProfile
    oRest:setResponse( jBodyResponse["ConfigProfile"] ) 

return .t.


/*/{Protheus.doc} acConfigProf:getConfigRestoreSx1()
    Metodo responsavel sx1 padrão para restaurar padroes
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method getConfigRestoreSx1() class acConfigProf
    Local oConfigProfileService    as Object
    Local jBodyResponse            as Object
    Local cRetornoProfile          as character 
    Local ojQueryCompany           as Object

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jPath := oRest:getPathParamsRequest()
    ::cId := ::jPath[ 'id' ] 
    jBodyResponse := JsonObject():New()
    
    oConfigProfileService := ac.config.profile.service.acProfService():new()
    ojQueryCompany  := oRest:getQueryRequest()
    cRetornoProfile := oConfigProfileService:getConfigRestoreSx1() 
    jBodyResponse["ConfigProfile"] := cRetornoProfile
    oRest:setResponse( jBodyResponse["ConfigProfile"] ) 
return .t.



/*/{Protheus.doc} acConfigProf:postConfigProfile()
    Metodo responsavel alterar ou criar um novo perfil para o usuário
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method postConfigProfile() class acConfigProf
    Local oConfigProfileService    as Object
    Local jBodyResponse     as Object
    Local cCompany          as character
    Local cBranch           as character
    Local cConfig           as character 
    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jPath := oRest:getPathParamsRequest()
    ::cId := ::jPath[ 'id' ] 
     oConfigProfileService := ac.config.profile.service.acProfService():new()
     ::jBody:fromJson(oRest:GetBodyRequest()) 
     cCompany := ::jBody:GetJsonText("company")
     cBranch  := ::jBody:GetJsonText("branch")
     cConfig :=  ::jBody:GetJsonText("config")
     jBodyResponse:= oConfigProfileService:postConfigProfile(::cId,cConfig,cCompany, cBranch)
     oRest:setResponse( cConfig) 
   

return .t.

/*/{Protheus.doc} acConfigProf:putConfigProfile()
    Metodo responsavel para alterar perfil do usuário 
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method putConfigProfile() class acConfigProf

    Local jBodyResponse as object
    Local cMessage      as character
    Local lWrite        as logical
    Local oConfigProfileService as Object
    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    jBodyResponse   := JsonObject():New()
    cMessage        := ''
    ::jPath := oRest:getPathParamsRequest()
    if ( ::jPath <> Nil )
        ::cId := ::jPath[ 'id' ] 
        ::jBody:fromJson(oRest:GetBodyRequest())  
        cCompany := ::jBody:GetJsonText("company")
        cBranch  := ::jBody:GetJsonText("branch")
        cConfig :=  ::jBody:GetJsonText("config")
        oConfigProfileService := ac.config.profile.service.acProfService():new()
        lWrite := oConfigProfileService:putConfigProfile(::cId, cConfig, cCompany, cBranch )
        if lWrite
            oRest:setResponse( cConfig ) 
        else
            jBodyResponse["message"] := STR0001 //'Unable to log.'
            ::cData := jBodyResponse:toJson()   
            oRest:setStatusCode(500)
            oRest:setResponse(::cData) 
        endif
    endif

return .t.
