#include "tlpp-core.th"
#include "tlpp-rest.th"
#include 'protheus.ch'
#INCLUDE "FWMVCDEF.CH"

namespace ac.Warehouse.Repository

Class acWarehouseRepository FROM FWAdapterBaseV2
    public Method New()
    public Method getWarehouses()
    
    
EndClass

/*/{Protheus.doc} acWarehouseRepository:New()
    @type  Metodo
    @author felipe.suetoshi
    @since  Abril 28, 2021
    @version 12.1.27
/*/
Method new() class acWarehouseRepository
    Default cVerbo  := 'GET'
    Default lList   := .T.

	_Super:New(cVerbo, lList)
return Self

/*/{Protheus.doc} getWarehouses()
    @type  Metodo
    @author felipe.suetoshi
    @since  Abril 28, 2021
    @version 12.1.27
/*/
Method getWarehouses(nPage, nPageSize, aFilter) class acWarehouseRepository
   	Local cQuery        as Character
    Local cWhere        as Character
    Local cBranchAux    as Character
    Local cBranchList   as Character
    Local cFilterQuery  as Character
    Local nPosit        as Numeric
    Local nX            as Numeric
    Local jsonResponse  as Object
    Local aFilial       := TamSx3('NNR_FILIAL')
    Local aDescri       := TamSx3('NNR_DESCRI')
    Local aCodigo       := TamSx3('NNR_CODIGO')

    // Guarda uma string com a lista de filiais passadas no filtro, separando por | para facilitar a manipulação das informações
    cBranchList := ''
    // Variavel auxiliar para armazenar apenas a unidade da filial
    cBranchAux := ''
    // Variavel para armazenar a query de filtro que será passado no SetUrlFilter()
    cFilterQuery := ''
    // Variavel para indicar a posição de onde deve começar o SubStr utilizado no While()
    nPosit := 1
    // Variavel auxiliar para marcar a posição no SubStr do primeiro item do filtro
    nX := AT("eq '", aFilter[1][2], nPosit)

    If(!Empty(aFilter[1][2]))
        // Loop que recebe a lista de filtros (aFilter[1][2]) e manipula para deixar de acordo com o esperado em SetUrlFilter() 
        While (nPosit > 0)
            // Caso para tratar a primeira filial dentro do filtro
            If(nPosit == 1)
                cBranchAux := SubStr(aFilter[1][2], AT("'", aFilter[1][2])+1, Len(allTrim(xFilial("NNR")))) 
                cFilterQuery += "filial eq " + "'" + cBranchAux + "'" 
                cBranchList += cBranchAux + '|'
                nPosit := AT("eq '", aFilter[1][2], nX+1)
            Else
                // Caso seja a segunda filial em diante, é feito o tratamento do nome da filial e adicionado a clausula 'or' no filtro da query
                If !(SubStr(aFilter[1][2], AT("'",  aFilter[1][2], nPosit)+1, Len(allTrim(xFilial("NNR")))) $ cBranchList)
                    cBranchAux  := SubStr(aFilter[1][2], AT("'",  aFilter[1][2], nPosit)+1, Len(allTrim(xFilial("NNR"))))
                    cBranchList += cBranchAux + '|'
                    cFilterQuery += " or filial eq " + "'" + cBranchAux + "'" 
                EndIf
                nPosit := AT("eq '", aFilter[1][2], nPosit+1) 
            EndIf
        End
    EndIf

    If(!Empty(cFilterQuery))
        aFilter[1][2] := cFilterQuery
    EndIf

    cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " + RetSQLName("NNR") + " NNR  "
    cQuery += " WHERE #QueryWhere#  "
    cWhere := ""
    cWhere += " NNR.D_E_L_E_T_ = ' '"

    ::AddMapFields('filial', 'NNR_FILIAL', .T., .T., { 'NNR_FILIAL' , aFilial[3], aFilial[1], aFilial[2]})
    ::AddMapFields('descri', 'NNR_DESCRI', .T., .T., { 'NNR_DESCRI' , aDescri[3], aDescri[1], aDescri[2]})
    ::AddMapFields('codigo', 'NNR_CODIGO', .T., .T., { 'NNR_CODIGO' , aCodigo[3], aCodigo[1], aCodigo[2]})
    ::setPage(nPage)
    ::setPageSize(nPagesize)
    ::setQuery(cQuery)
    ::setWhere(cWhere)
    ::SetOrder("NNR_DESCRI")
    ::SetUrlFilter(aFilter)

    If ::Execute()
        ::FillGetResponse()
        jsonResponse := ::GetJsonResponse()
    EndIf

Return jsonResponse
