#include "tlpp-core.th"
#include "tlpp-rest.th"

namespace ac.user.repository

class acUserRepository 

    data oProfile as Object
    data aProfile as Array
    data cContent as Character

    public method new()
    public method getHaveLog()
    public method postLogUser()
    public method putLogUser()

endclass

/*/{Protheus.doc} acUserService:new()
    Metodo responsavel para instanciar a classe
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method New () class acUserRepository
    ::oProfile  := FWProfile():New()
    ::aProfile  := {}
    ::cContent  := ''
return Self

/*/{Protheus.doc} acUserService:getHaveLog()
    Metodo responsavel retornar um log de usuario existente
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method getHaveLog(cId) class acUserRepository

If FindProfDef(cId, 'MATA038', 'CONFIG', 'FST_ACC')
    ::cContent := RetProfDef(cId, 'MATA038', 'CONFIG', 'FST_ACC')
Endif

Return ::cContent

/*/{Protheus.doc} acUserService:postLogUser()
    Metodo responsavel cadastrar um log de usuario caso nao haja um previo cadastrado
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method postLogUser(cId, cBody) class acUserRepository

Local lWrite as logical

lWrite := WriteNewProf(cId, 'MATA038', 'CONFIG', 'FST_ACC', cBody)

Return lWrite

/*/{Protheus.doc} acUserService:putLogUser()
    Metodo responsavel alterar a propriedade do showModal do profile caso haja um cadastro de usuario previo
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method putLogUser(cId, cBody) class acUserRepository

Local lWrite as logical

lWrite := WriteProfDef(cId, 'MATA038', 'CONFIG', 'FST_ACC', cId, 'MATA038', 'CONFIG', 'FST_ACC', cBody)

Return lWrite
