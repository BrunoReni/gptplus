#include "tlpp-core.th"
#INCLUDE "FWMVCDEF.CH"

namespace ac.acDistribute.repository

CLASS acDistributeRepository FROM FWAdapterBaseV2
  data fields AS Object 
  public method New()
  public method setQueryFields()
  public method GetQuery()
  public method GetWhere()
  public method GetBranches()
  public Method logErrorProc()
  public method GetCount()
  public method listBranches()
EndClass


//-------------------------------------------------------------------
/*/{Protheus.doc} new
Instancia a classe
@author pedro.missaglia
@since Jan 27 2021
@version 1.0
/*/
//-------------------------------------------------------------------

Method new(cVerbo as Character, lList as Logical) CLASS acDistributeRepository
    Default cVerbo  := 'GET'
    Default lList   := .T.
    _Super:New(cVerbo, lList)
Return Nil


//-------------------------------------------------------------------
/*/{Protheus.doc} setQueryFields
Define as propriedades de retorno do json
@author pedro.missaglia
@since Jan 27 2021
@version 1.0
/*/
//-------------------------------------------------------------------
Method setQueryFields() Class acDistributeRepository

    Local aBranch       := TamSx3('DA_FILIAL')
    Local aProduct      := TamSx3('DA_PRODUTO')
    Local aWarehouse    := TamSx3('DA_LOCAL')
    Local aBalance      := TamSx3('DA_SALDO')
    Local aDate         := TamSx3('DA_DATA')
    Local aDocument     := TamSx3('DA_DOC')
    Local aSerial       := TamSx3('DA_SERIE')
    Local aEntity       := TamSx3('DA_SERIE')
    Local aStore        := TamSx3('DA_LOJA')
    Local aSeqNumber    := TamSx3('DA_NUMSEQ')
    Local aOrigin       := TamSx3('DA_ORIGEM')

    ::AddMapFields('branch', 'DA_FILIAL', .T., .T.,         { 'DA_FILIAL' , aBranch[3], aBranch[1], aBranch[2]})
    ::AddMapFields('product', 'DA_PRODUTO', .T., .T.,       { 'DA_PRODUTO' , aProduct[3], aProduct[1], aProduct[2]})
    ::AddMapFields('warehouse', 'DA_LOCAL', .T., .T.,       { 'DA_LOCAL' , aWarehouse[3], aWarehouse[1], aWarehouse[2]})
    ::AddMapFields('balance', 'DA_SALDO', .T., .T.,         { 'DA_SALDO' , aBalance[3], aBalance[1], aBalance[2]})
    ::AddMapFields('date', 'DA_DATA', .T., .T.,             { 'DA_DATA' , aDate[3], aDate[1], aDate[2]})
    ::AddMapFields('document', 'DA_DOC', .T., .T.,          { 'DA_DOC' , aDocument[3], aDocument[1], aDocument[2]})
    ::AddMapFields('serial', 'DA_SERIE', .T., .T.,          { 'DA_SERIE' , aSerial[3], aSerial[1], aSerial[2]})
    ::AddMapFields('entity', 'DA_CLIFOR', .T., .T.,         { 'DA_CLIFOR' , aEntity[3], aEntity[1], aEntity[2]})
    ::AddMapFields('store', 'DA_LOJA', .T., .T.,            { 'DA_LOJA' , aStore[3], aStore[1], aStore[2]})
    ::AddMapFields('sequealNumber', 'DA_NUMSEQ', .T., .T.,   { 'DA_NUMSEQ' , aSeqNumber[3], aSeqNumber[1], aSeqNumber[2]})
    ::AddMapFields('origin', 'DA_ORIGEM', .T., .T.,         { 'DA_ORIGEM' , aOrigin[3], aOrigin[1], aOrigin[2]})

Return 


//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada
@author pedro.missaglia
@since Jan 27 2021
@version 1.0
/*/
//-------------------------------------------------------------------
method getQuery() Class acDistributeRepository
	Local cQuery := ''
	cQuery      := " SELECT #QueryFields#"
	cQuery      +=   " FROM "+RetSqlName("SB1")+" SB1 , " + RetSqlName("SDA")+" SDA "
	cQuery += " WHERE #QueryWhere#"

Return cQuery


//-------------------------------------------------------------------
/*/{Protheus.doc} getWhere
Retorna o where da query
@author pedro.missaglia
@since Jan 27 2021
@version 1.0
/*/
//-------------------------------------------------------------------
method getWhere(dDataFec, aBranches) Class acDistributeRepository
	Local cWhere  := ''
    Local dInicio := SuperGetMv("MV_ULMES") + 1

	cWhere    += ::getBranches(aBranches)
	cWhere    +=         " AND SB1.B1_COD = SDA.DA_PRODUTO "
	cWhere    +=         " AND SDA.DA_SALDO > 0 "
	cWhere    +=         " AND SDA.DA_DATA >= '" + DTOS(dInicio)+ "' "
	cWhere    +=         " AND SDA.DA_DATA <= '" + DTOS(dDataFec)+ "' "
	cWhere    +=         " AND SB1.D_E_L_E_T_ = ' ' "
	cWhere    +=         " AND SDA.D_E_L_E_T_ = ' ' "

Return cWhere

//-------------------------------------------------------------------
/*/{Protheus.doc} getBranches
Retorna as filiais que serao consultadas
@author pedro.missaglia
@since Jan 27 2021
@version 1.0
/*/
//-------------------------------------------------------------------

method getBranches(aBranches) Class acDistributeRepository
    local cBranchesB1 := ''
    local cBranchesDA := ''
    local cBranchesBZ := ''
    local cAuxBZ      := ''
    local cSBZAlias   := RetSqlName("SBZ")  
    local nX
    Local cFilBack

    cFilBack := cFilAnt

    cBranchesBZ := " AND (SB1.B1_LOCALIZ = 'S' OR EXISTS(SELECT 1 From " + cSBZAlias + " SBZ WHERE"

    For nX := 1 to Len(aBranches)
        cFilAnt := aBranches[nX][2]
        if nx == 1
            cBranchesB1 += " (SB1.B1_FILIAL = '" + xFilial("SB1") + "'"
            cBranchesDA += " AND (SDA.DA_FILIAL = '" + xFilial("SDA") + "'"
            cAuxBZ      += " (BZ_FILIAL = '" + xFilial("SBZ") + "'"

        else
            cBranchesB1 += " OR SB1.B1_FILIAL = '" + xFilial("SB1") + "'"
            cBranchesDA += " OR SDA.DA_FILIAL = '" + xFilial("SDA") + "'"
            cAuxBZ      += " OR BZ_FILIAL = '" + xFilial("SBZ") + "'"
        endif
    Next nX

    cFilAnt := cFilBack

    cBranchesB1 += ")"
    cBranchesDA += ")"
    cAuxBZ      += ")"
    cBranchesBZ := cBranchesBZ + cAuxBZ
    cBranchesBZ += "AND SBZ.BZ_COD = SB1.B1_COD AND SBZ.BZ_LOCALIZ = 'S' AND SBZ.D_E_L_E_T_ = ' ')) "

Return (cBranchesB1 + cBranchesDA + cBranchesBZ)

/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author Denise Nogueira
    @since  jan. 29 2021 
    @version 12.1.27
/*/
method GetCount(cDate, aBranches) class acDistributeRepository

  Local cQuery  := ''
  Local oRet 	:= JsonObject():New()
  Local cAlias 	:= GetNextAlias()

  cQuery    := " SELECT COUNT(SDA.DA_PRODUTO) QUANT "
  cQuery    += " FROM "+RetSqlName("SB1")+" SB1 , " + RetSqlName("SDA")+" SDA "
  cQuery    += "WHERE " + ::getWhere(cDate, aBranches)
  cQuery    := ChangeQuery(cQuery)
  dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)

  oRet['quantity']  := (cAlias)->QUANT

Return oRet


