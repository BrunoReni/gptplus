#include "tlpp-core.th"
#include "tlpp-rest.th"

namespace ac.user.service
using namespace ac.user.repository


class acUserService

    private data cId as character
    private data lShow as logical
    
    public method new()
    public method getShowModal()
    public method postLogUser()
    public method putLogUser()
endclass

/*/{Protheus.doc} acUserService:new()
    Metodo responsavel instanciar e inicializar as variaveis da classe
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method new() class acUserService
    ::cId := ''
    ::lShow := .F.
return self

/*/{Protheus.doc} acUserService:getShowModal()
    Metodo responsavel para verificar se deve apresentar o modal Onboarding
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method getShowModal(cId) class acUserService

local cContent          as character
local userRepository    as Object 

    userRepository := ac.user.repository.acUserRepository():new()
    cContent :=  userRepository:getHaveLog(cId) 
    
    if Empty(cContent) .or. cContent == '.T.'
        ::lShow := .T.    
    endif

return ::lShow

/*/{Protheus.doc} acUserService:postLogUser()
    Metodo responsavel para cadastrar um log de usuario caso nao haja um previo
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method postLogUser(cId, cBody) class acUserService

local userRepository    as Object 
local lWrite            as logical
Local cContent          as character

    userRepository := ac.user.repository.acUserRepository():new()
    cContent :=  userRepository:getHaveLog(cId) 
    
    if Empty(cContent)
        lWrite := userRepository:postLogUser(cId, cBody)
    else
        cBody := iif(cBody == 'true', '.T.', '.F.')
        lWrite :=  userRepository:putLogUser(cId,cBody)
    endif
    
return lWrite

/*/{Protheus.doc} acUserService:postLogUser()
    Metodo responsavel para alterar a propriedade do showModal caso haja um log de usuario previo
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method putLogUser(cId, cBody) class acUserService

local userRepository    as Object 
local lRet            as logical
Local cContent          as character

lRet := .F.
cBody := iif(cBody == 'true', '.T.', '.F.')

    userRepository := ac.user.repository.acUserRepository():new()
    cContent :=  userRepository:getHaveLog(cId) 

    if !Empty(cContent)
        if cContent == cBody
            lRet := .T.
        else
            lRet := userRepository:putLogUser(cId, cBody)
        endif
    endif
return lRet
