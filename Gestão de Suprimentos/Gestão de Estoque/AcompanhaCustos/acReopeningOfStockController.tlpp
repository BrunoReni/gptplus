#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acreopeningofstock.ch"

namespace ac.Reopening.OfStock.Controller
using namespace ac.Reopening.OfStock.Service
using namespace ac.branchesList.Serv
using namespace ac.BasicValidation.Controller

class acReopeningOfStock from acBasicValidationController
    public data aListaFil   as Array
    public data cId         as Character
    public data cidProccess as Character 
    public data cBranch     as Character
    public data cCompany    as Character
    public data cData       as Character
    public data oService    as Object
    public data oBranches   as Object
    public data dDateClosin as Character   
    public data jbranches   as Object 
    public data jParams     as Object    
    public method New()

    @Post("api/stock/reopening/v1/reopenbranch")
    public method Reopenbranches()

    @Post("api/stock/reopening/v1/repair")
    public method RepairCloging()

endclass

/*/{Protheus.doc} acReopeningOfStock:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acList
    @type  Metodo
    @author Andre Maximo
    @since  Dezembro  28, 2020
    @version 12.1.27
/*/
method new() class acReopeningOfStock
     _Super:New()
    ::cId           := ''
    ::cidProccess   := ''
    ::cBranch       := ''    
    ::cCompany      := ''
    ::dDateClosin   := ''
    ::jbranches     := JsonObject():New()   
    ::jParams       := JsonObject():New()
    ::aListaFil     := {}    
return Self

/*/{Protheus.doc} acReopeningOfStock:Reopenbranches()
    Metodo responsavel por realizar analise do custo do 
    ultimo fechamento comparado com custo pós recalculo 
    @type  Metodo
    @author Andre Maximo
    @since  Dezembro  28, 2020
    @version 12.1.27
/*/

method Reopenbranches() class acReopeningOfStock
    Local ltotal        := .F.      as Logical 
    Local lReopeningSb9 := .F.      as Logical 
    Local oInformation              as Object
    Local oDictionaryValidator      as Object
    Local oCalcService              as Object
    Local oProfileClosing           as Object
    Local oSX1                      as Object

    Private a330ParamZX := {}             as Array

    oDictionaryValidator := _Super:GetDictionaryValid()

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jParams:fromJson(oRest:GetBodyRequest()) 

    ::cId           := ::jParams['id']
    ::cidProccess   := ::jParams['idProcess']
    ::cCompany      := ::jParams['company']
    ::cBranch       := ::jParams['branch']
    ::dDateClosin   := ::jParams['dataClosing']
    ::jbranches     := ::jParams['branches']
    ltotal          := ::jParams['total']
    lReopeningSb9   := ::jParams['reopeningOnlySb9']

    ::oBranches     := ac.branchesList.Serv.acBranchesListServ():new()
    ::oService      :=  ac.Reopening.OfStock.Service.acReopeningOfStockServ():new()
    oCalcService    := ac.acCalc.Service.acCalcService():new()
    if !empty(::cId)
        oProfileClosing := totvs.protheus.backoffice.est.closing.profile.ClosingProfile():New(::cId)
        oSX1 := JsonObject():New()
        oSX1['contabilization'] := oProfileClosing:oSx1['contabilization']['mta331']
        a330ParamZX     := oCalcService:preparParamsPerg(oSX1, 'MATA331')
    endIf

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else
        If (Empty(::dDateClosin) .or. ::dDateClosin == 'null').or.(Empty(::cCompany) .or. ::cCompany == 'null');
            .or. (Empty(::cBranch) .or. ::cBranch == 'null')
            ::jParams["message"] := STR0001 //'missing information for processing ID or branch data.'
            oRest:setStatusCode(400)
            oRest:setResponse( ::jParams:toJson() )
        Else 
            aParansfil:= ::oBranches:preparParamsfil(::jParams)  
            If len(aParansfil) > 0  
                oInformation:= ::oService:IniReopenBran(::cBranch,::cCompany,aParansfil, ::dDateClosin, ::cId, ltotal, ::cidProccess, lReopeningSb9)
                If ::oService:lNotFoundCount .Or. ::oService:lCalendInvalid
                    oRest:setStatusCode(400)
                ElseIf ::oService:lNotFoundBranch
                    ::jParams["message"] := STR0002 // 'missing information for branches.'
                    oInformation:= ::jParams
                EndIf
                oRest:setResponse(oInformation) 
            else
                ::jParams["message"] := STR0002 // 'missing information for branches.'
                oRest:setStatusCode(400)
                oRest:setResponse( ::jParams:toJson() )
            EndIF 
        EndIf
    Endif    

return .t.



/*/{Protheus.doc} acReopeningOfStock:Reopenbranches()
    Metodo responsavel por realizar analise do custo do 
    ultimo fechamento comparado com custo pós recalculo 
    @type  Metodo
    @author Andre Maximo
    @since  Dezembro  28, 2020
    @version 12.1.27
/*/

method RepairCloging() class acReopeningOfStock
    Local ltotal        := .F.      as Logical 
    Local lReopeningSb9 := .F.      as Logical 
    Local oInformation              as Object
    Local oDictionaryValidator      as Object
    Local aBranch                   as Array

    oDictionaryValidator := _Super:GetDictionaryValid()

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jParams:fromJson(oRest:GetBodyRequest()) 

    ::cId           := ::jParams['idparant']
    ::cidProccess   := ::jParams['idchild']
    aBranch         := ::jParams['branches']
    ::dDateClosin   := ::jParams['dataClosing']
   
    ::oBranches     := ac.branchesList.Serv.acBranchesListServ():new()
    ::oService      :=  ac.Reopening.OfStock.Service.acReopeningOfStockServ():new()

    If !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    Else
        If (Empty(::dDateClosin) .or. ::dDateClosin == 'null').or.(Empty( ::cId ) .or.  ::cId  == 'null');
            .or. (Empty( ::cidProccess ) .or. ::cidProccess == 'null');
            .or. (Empty(aBranch))
            ::jParams["message"] := STR0001 //'missing information for processing ID or branch data.'
            oRest:setStatusCode(400)
            oRest:setResponse( ::jParams:toJson() )
        Else 
            aParansfil:= ::oBranches:preparParamsfil(::jParams)  
            oInformation:= ::oService:AnalyzeRepairBranches( aParansfil, ::dDateClosin, ::cId, ::cidProccess)
            
            oRest:setResponse(oInformation) 
        EndIf
    Endif    

Return .T.
