#include "tlpp-core.th"
#INCLUDE "FWMVCDEF.CH"
#include "acresultsanalysiscontroller.ch"

namespace ac.Results.Analysis.Repository
using namespace ac.branchesList.Serv



Class acAnalysisResultsRepository FROM FWAdapterBaseV2
	public Data cAliasTRB 	  as Character  
	public Data cMensErro 	  as Character
	public Data afields   	  as Array
	public Data lLocTable 	  as logical 
	public data lRet      	  as logical 
	public data cQuery        as Character
	public data cWhere        as Character
	public data lCusUnif      as logical
	public data lCusFIFO	  as logical
	public data lCusLIFO	  as logical
	public data JsonResponse  as Object
	public data ctempTable    as Character
	public data aCampos       as Array
	public data aQueryString  as Array
	public data obranchesList as Object
  	public Method New()
	public Method getTableIdName()
	public Method getFullQuery()
	public Method createTable()
	public Method getInsertCommand()
	public Method getFullFields()
	public Method insertTable()
	public Method getItems()
	public Method addGenericMapFields()
	public Method getSimplifiedQuery()
	public Method logErrorProc()
	public Method getCountAnalysis()
	public Method queryWhithResourceIn()
	public Method queryWhithResourceInner()
	public Method checksSharing()




EndClass

method new(cVerbo as Character, lList as Logical) class acAnalysisResultsRepository
  
	Default cVerbo  := 'GET'
	Default lList   := .T.

	_Super:New(cVerbo, lList)

	::cAliasTRB := "TRB"+cEmpAnt+"SP"
	::cMensErro := " "
	::afields   :=  {}
	::lLocTable := .F.
	::lRet      := .F.
	::aCampos      := {}
	::ctempTable   := ""
	::cQuery       := ''
	::aQueryString := {}
	::cWhere       := ''
	::obranchesList:= ac.branchesList.Serv.acBranchesListServ():New()
	::lCusUnif     := A330CusFil()
	::lCusFIFO 	   := SuperGetMV("MV_CUSFIFO",.F.,.F.)
	::lCusLIFO 	   := SuperGetMv('MV_CUSLIFO',.F.,.F.)
	::JsonResponse := JsonObject():new()

return Self

/*/{Protheus.doc} acResultsAnalysisRepository:getTableIdName()
    Metodo responsavel por verificar se existe uma tabela com o Id informado
    @type  Metodo
    @author pedro.missaglia
    @since  Jan 29, 2021
    @version 12.1.27
/*/
Method getTableIdName(id) CLASS acAnalysisResultsRepository

Return Upper('A'+id)

/*/{Protheus.doc} acResultsAnalysisRepository:createTable()
    Metodo responsavel por verificar se existe uma tabela com o Id informado
    @type  Metodo
    @author pedro.missaglia
    @since  Jan 29, 2021
    @version 12.1.27
/*/
Method createTable(id, aCampos) CLASS acAnalysisResultsRepository

Local idTable as Character

idTable := Upper('A'+id)

FwDbCreate(idTable, aCampos,"TOPCONN",.T.)
DbUseArea(.T.,"TOPCONN",idTable,idTable,.T.)
If !::lCusUnif
	DBCreateIndex(idTable+'_01', 'B9_FILIAL+B9_COD+B9_LOCAL')
Else
	DBCreateIndex(idTable+'_01', 'B9_FILIAL+B9_COD')	
Endif


Return idTable

/*/{Protheus.doc} acResultsAnalysisService
    Metodo responsavel por instanciar e iniciar as variaveis da class acClosingCalc
    @type  Metodo
    @author André Maximo 
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getInsertCommand(cTable, cQuery) Class acAnalysisResultsRepository
	Local cCampos:= " "
	Local cInsert:= " "

	
	
	cCampos:= "B9_FILIAL , B9_COD, B1_DESC , B1_TIPO, B1_GRUPO, "
	If !::lCusUnif
		cCampos+="B9_LOCAL, "
	Endif
	cCampos+= "PERCPOSIT, PERCPOSIT2, PERCPOSIT3 ,  PERCPOSIT4, PERCPOSIT5, "
	cCampos+= "CUSTFIM ,CUSTINI, CUSTFIM2, CUSTINI2, CUSTFIM3, "
	cCampos+= "CUSTINI3, CUSTFIM4 , CUSTINI4, CUSTFIM5, CUSTINI5 "
	cInsert:= "INSERT INTO " + cTable +" ("+ cCampos +") " +cQuery +" "

Return cInsert


/*/{Protheus.doc} acResultsAnalysisRepository:getFullFields()
    Metodo responsavel por verificar se existe uma tabela com o Id informado
    @type  Metodo
    @author andre.maximo
    @since  Jan 29, 2021
    @version 12.1.27
/*/
Method getFullFields(aCampos) CLASS acAnalysisResultsRepository

Local aTam          := TamSX3("B9_FILIAL")
Local aTamCod       := TamSX3("B9_COD")
Local aTamDes       := TamSX3("B1_DESC")
Local aTamTP       := TamSX3("B1_TIPO")
Local aTamGRP       := TamSX3("B1_GRUPO")
Local aTamLoc       := TamSX3("B9_LOCAL")
Local aTamCmFim1    := TamSX3("B2_CMFIM1")
Local aTamCm1       := TamSX3("B9_CM1")
Local aTamCmFim2    := TamSX3("B2_CMFIM2")
Local aTamCm2       := TamSX3("B9_CM2")
Local aTamCmFim3    := TamSX3("B2_CMFIM3")
Local aTamCm3       := TamSX3("B9_CM3")
Local aTamCmFim4    := TamSX3("B2_CMFIM4")
Local aTamCm4       := TamSX3("B9_CM4")
Local aTamCmFim5    := TamSX3("B2_CMFIM5")
Local aTamCm5       := TamSX3("B9_CM5")


Aadd(aCampos ,{"B9_FILIAL",aTam[3],aTam[1],aTam[2]})
Aadd(aCampos ,{"B9_COD",aTamCod[3],aTamCod[1],aTamCod[2]})
Aadd(aCampos ,{"B1_DESC",aTamDes[3],aTamDes[1],aTamDes[2]})
Aadd(aCampos ,{"B1_TIPO",aTamTP[3],aTamTP[1],aTamTP[2]})
Aadd(aCampos ,{"B1_GRUPO",aTamGRP[3],aTamGRP[1],aTamGRP[2]})

If !::lCusUnif
	Aadd(aCampos , {"B9_LOCAL",aTamLoc[3],aTamLoc[1],aTamLoc[2]})
Endif

Aadd(aCampos ,{"PERCPOSIT",aTamCmFim1[3],aTamCmFim1[1],aTamCmFim1[2]})
Aadd(aCampos ,{"PERCPOSIT2",aTamCmFim2[3],aTamCmFim2[1],aTamCmFim2[2]})
Aadd(aCampos ,{"PERCPOSIT3",aTamCmFim3[3],aTamCmFim3[1],aTamCmFim3[2]})
Aadd(aCampos ,{"PERCPOSIT4",aTamCmFim4[3],aTamCmFim4[1],aTamCmFim4[2]})
Aadd(aCampos ,{"PERCPOSIT5",aTamCmFim5[3],aTamCmFim5[1],aTamCmFim5[2]})

Aadd(aCampos ,{"CUSTFIM",aTamCmFim1[3],aTamCmFim1[1],aTamCmFim1[2]})
Aadd(aCampos ,{"CUSTINI",aTamCm1[3],aTamCm1[1],aTamCm1[2]})

Aadd(aCampos ,{"CUSTFIM2",aTamCmFim2[3],aTamCmFim2[1],aTamCmFim2[2]})
Aadd(aCampos ,{"CUSTINI2",aTamCm2[3],aTamCm2[1],aTamCm2[2]})

Aadd(aCampos ,{"CUSTFIM3",aTamCmFim3[3],aTamCmFim3[1],aTamCmFim3[2]})
Aadd(aCampos ,{"CUSTINI3",aTamCm3[3],aTamCm3[1],aTamCm3[2]})

Aadd(aCampos ,{"CUSTFIM4",aTamCmFim4[3],aTamCmFim4[1],aTamCmFim4[2]})
Aadd(aCampos ,{"CUSTINI4",aTamCm4[3],aTamCm4[1],aTamCm4[2]})

Aadd(aCampos ,{"CUSTFIM5",aTamCmFim5[3],aTamCmFim5[1],aTamCmFim5[2]})
Aadd(aCampos ,{"CUSTINI5",aTamCm5[3],aTamCm5[1],aTamCm5[2]})

Return aCampos

/*/{Protheus.doc} acResultsAnalysisService
    Metodo responsavel por instanciar e iniciar as variaveis da class acResultsAnalysisService
    @type  Metodo
    @author André Maximo 
    @since  Novembro 10, 2020
    @version 12.1.27
/*/
Method getFullQuery(lProc350, lInsert,oJbranches) CLASS acAnalysisResultsRepository
	
  Local cQuery 	   as Character
  Local cBranches  as Character
  Local cSharedSB1 as Character
  Local cSharedSB2 as Character
  Local cSharedSb9 as Character

  cSharedSB1 := ::checksSharing('SB1')
  cSharedSB2 := ::checksSharing('SB2')
  cSharedSb9 := ::checksSharing('SB9')

  cBranches :=  ::obranchesList:converListBranchesToString(oJbranches)
  cQuery := ''


  
	if ::lCusUnif
		cQuery+= "SELECT "
		cQuery+= "B9_FILIAL, "
		cQuery+= "B9_COD, "
		cQuery+= "B1_DESC, "
		cQuery+= "B1_TIPO, "
		cQuery+= "B1_GRUPO, "
		cQuery+= "MAX(PERCPOSIT) PERCPOSIT , "
		cQuery+= "MAX(PERCPOSIT2)PERCPOSIT2,  "
		cQuery+= "MAX(PERCPOSIT3)PERCPOSIT3,  "
		cQuery+= "MAX(PERCPOSIT4)PERCPOSIT4,  "
		cQuery+= "MAX(PERCPOSIT5)PERCPOSIT5,  "
		cQuery+= "MAX(CUSTFIM)  CUSTFIM   ,   "
		cQuery+= "MAX(CUSTINI)  CUSTINI   ,   "
		cQuery+= "MAX(CUSTFIM2) CUSTFIM2  ,   "
		cQuery+= "MAX(CUSTINI2) CUSTINI2  ,   "
		cQuery+= "MAX(CUSTFIM3) CUSTFIM3  ,   "
		cQuery+= "MAX(CUSTINI3) CUSTINI3  ,   "
		cQuery+= "MAX(CUSTFIM4) CUSTFIM4  ,   "
		cQuery+= "MAX(CUSTINI4) CUSTINI4  ,   "
		cQuery+= "MAX(CUSTFIM5) CUSTFIM5  ,   "
		cQuery+= "MAX(CUSTINI5) CUSTINI5      "
		cQuery+= "FROM (
	EndIf
	cQuery+=      " SELECT "
	cQuery+=      "B9_FILIAL ,"
	cQuery+=      "B9_COD,    "
	cQuery+=      "B1_DESC  , "
	cQuery+= 	  "B1_TIPO, "
	cQuery+=      "B1_GRUPO, "
	Iif(::lCusUnif, cQuery+= "", cQuery+=      "B9_LOCAL , ")
	If ::lCusFIFO .Or. ::lCusLIFO
		cQuery+= "CASE WHEN B2_VFIMFF1 = B9_VINIFF1 THEN 0 ELSE CASE WHEN B9_VINIFF1 = 0 OR B2_VFIMFF1 = 0  THEN 1  ELSE ABS(((B2_VFIMFF1/B2_QFIM)/(B9_VINIFF1/B9_QINI)-1)) END END *100 PERCPOSIT, "
		cQuery+= "CASE WHEN B2_VFIMFF2 = B9_VINIFF2 THEN 0 ELSE CASE WHEN B9_VINIFF2 = 0 OR B2_VFIMFF2 = 0 THEN 1 ELSE ABS(((B2_VFIMFF2/B2_QFIM)/(B9_VINIFF2/B9_QINI)-1)) END END *100 PERCPOSIT2, "
		cQuery+= "CASE WHEN B2_VFIMFF3 = B9_VINIFF3 THEN 0 ELSE CASE WHEN B9_VINIFF3 = 0 OR B2_VFIMFF3 = 0 THEN 1 ELSE ABS(((B2_VFIMFF3/B2_QFIM)/(B9_VINIFF3/B9_QINI)-1)) END END *100 PERCPOSIT3, "
		cQuery+= "CASE WHEN B2_VFIMFF4 = B9_VINIFF4 THEN 0 ELSE CASE WHEN B9_VINIFF4 = 0 OR B2_VFIMFF4 = 0 THEN 1 ELSE ABS(((B2_VFIMFF4/B2_QFIM)/(B9_VINIFF4/B9_QINI)-1)) END END *100 PERCPOSIT4, "
		cQuery+= "CASE WHEN B2_VFIMFF5 = B9_VINIFF5 THEN 0 ELSE CASE WHEN B9_VINIFF5 = 0 OR B2_VFIMFF5 = 0 THEN 1 ELSE ABS(((B2_VFIMFF5/B2_QFIM)/(B9_VINIFF5/B9_QINI)-1)) END END *100 PERCPOSIT5, "

		cQuery+= "CASE WHEN B2_QFIM = 0 THEN CASE WHEN B2_VFIMFF1 <> 0 THEN B2_VFIMFF1 ELSE 0 END ELSE B2_VFIMFF1/B2_QFIM END CUSTFIM   , "
		cQuery+= "CASE WHEN B9_QINI = 0 THEN CASE WHEN B9_VINIFF1 <> 0 THEN B9_VINIFF1 ELSE 0 END ELSE B9_VINIFF1/B9_QINI END CUSTINI   , "

		cQuery+= "CASE WHEN B2_QFIM = 0 THEN CASE WHEN B2_VFIMFF2 <> 0 THEN B2_VFIMFF2 ELSE 0 END ELSE B2_VFIMFF2/B2_QFIM END CUSTFIM2   , "
		cQuery+= "CASE WHEN B9_QINI = 0 THEN CASE WHEN B9_VINIFF2 <> 0 THEN B9_VINIFF2 ELSE 0 END ELSE B9_VINIFF2/B9_QINI END CUSTINI2   , "

		cQuery+= "CASE WHEN B2_QFIM = 0 THEN CASE WHEN B2_VFIMFF3 <> 0 THEN B2_VFIMFF3 ELSE 0 END ELSE B2_VFIMFF3/B2_QFIM END CUSTFIM3   , "
		cQuery+= "CASE WHEN B9_QINI = 0 THEN CASE WHEN B9_VINIFF3 <> 0 THEN B9_VINIFF3 ELSE 0 END ELSE B9_VINIFF3/B9_QINI END CUSTINI3   , "

		cQuery+= "CASE WHEN B2_QFIM = 0 THEN CASE WHEN B2_VFIMFF4 <> 0 THEN B2_VFIMFF4 ELSE 0 END ELSE B2_VFIMFF4/B2_QFIM END CUSTFIM4   , "
		cQuery+= "CASE WHEN B9_QINI = 0 THEN CASE WHEN B9_VINIFF4 <> 0 THEN B9_VINIFF4 ELSE 0 END ELSE B9_VINIFF4/B9_QINI END CUSTINI4   , "

		cQuery+= "CASE WHEN B2_QFIM = 0 THEN CASE WHEN B2_VFIMFF5 <> 0 THEN B2_VFIMFF5 ELSE 0 END ELSE B2_VFIMFF5/B2_QFIM END CUSTFIM5   , "
		cQuery+= "CASE WHEN B9_QINI = 0 THEN CASE WHEN B9_VINIFF1 <> 0 THEN B9_VINIFF5 ELSE 0 END ELSE B9_VINIFF5/B9_QINI END CUSTINI5    "
	else
       
        cQuery+= "CASE WHEN B9_CM1 = B2_CMFIM1 THEN 0 ELSE CASE WHEN B9_CM1 = 0 OR B2_CMFIM1 = 0 THEN 1  ELSE ABS(((B2_CMFIM1/B9_CM1)-1))END END *100 PERCPOSIT , "
        cQuery+= "CASE WHEN B9_CM2 = B2_CMFIM2 THEN 0 ELSE CASE WHEN B9_CM2 = 0 OR B2_CMFIM2 = 0 THEN 1  ELSE ABS(((B2_CMFIM2/B9_CM2)-1))END END *100 PERCPOSIT2 , "
        cQuery+= "CASE WHEN B9_CM3 = B2_CMFIM3 THEN 0 ELSE CASE WHEN B9_CM3 = 0 OR B2_CMFIM3 = 0 THEN 1  ELSE ABS(((B2_CMFIM3/B9_CM3)-1))END END *100 PERCPOSIT3 , "
        cQuery+= "CASE WHEN B9_CM4 = B2_CMFIM4 THEN 0 ELSE CASE WHEN B9_CM4 = 0 OR B2_CMFIM4 = 0 THEN 1  ELSE ABS(((B2_CMFIM4/B9_CM4)-1))END END *100 PERCPOSIT4 , "
        cQuery+= "CASE WHEN B9_CM5 = B2_CMFIM5 THEN 0 ELSE CASE WHEN B9_CM5 = 0 OR B2_CMFIM5 = 0 THEN 1  ELSE ABS(((B2_CMFIM5/B9_CM5)-1))END END *100 PERCPOSIT5 , "


		cQuery+=	    "B2_CMFIM1 CUSTFIM, "
		cQuery+=	    "B9_CM1    CUSTINI, "
		cQuery+=	    "B2_CMFIM2 CUSTFIM2, "
		cQuery+=	    "B9_CM2    CUSTINI2, "
		cQuery+=	    "B2_CMFIM3 CUSTFIM3, "
		cQuery+=	    "B9_CM3    CUSTINI3, "
		cQuery+=	    "B2_CMFIM4 CUSTFIM4, "
		cQuery+=	    "B9_CM4    CUSTINI4, "
		cQuery+=	    "B2_CMFIM5 CUSTFIM5, "
		cQuery+=	    "B9_CM5    CUSTINI5  "
	Endif
	cQuery+="FROM "
	cQuery+=         + RetSqlName( "SB9" ) + " SB9 "
	
	If cSharedSB1 == "E"
		If cSharedSB9 == "E" .And. !lProc350
			cQuery+="INNER JOIN "
			cQuery+=         + RetSqlName( "SB1" ) + " SB1 "
			cQuery+="ON "
			cQuery+=        "SB1.B1_FILIAL  = SB9.B9_FILIAL "
			cQuery+="AND     SB1.B1_COD     = SB9.B9_COD "
			cQuery+="AND     SB1.D_E_L_E_T_ = ' '  "
		Else
			cQuery += ::queryWhithResourceIn(cBranches, "SB1")
		EndIf
	Else
		cQuery+="INNER JOIN "
		cQuery+=         + RetSqlName( "SB1" ) + " SB1 "
		cQuery+="ON "
		cQuery+=        "SB1.B1_FILIAL  = '"+xFilial("SB1")+"' "
		cQuery+="AND     SB1.B1_COD     = SB9.B9_COD "
		cQuery+="AND     SB1.D_E_L_E_T_ = ' '  "
	EndIf

	If cSharedSB2 == "E"
		IF cSharedSB9 == "E" .And. !lProc350
			cQuery+="INNER JOIN "
			cQuery+=         + RetSqlName( "SB2" ) + " SB2 "
			cQuery+="ON "
			cQuery+=        "SB2.B2_FILIAL  = SB9.B9_FILIAL "
			cQuery+="AND     SB2.B2_COD     = SB9.B9_COD "
			cQuery+="AND     SB2.B2_LOCAL   = SB9.B9_LOCAL "
			cQuery+="AND     SB2.D_E_L_E_T_ = ' ' "
		Else
			cQuery += ::queryWhithResourceIn(cBranches, "SB2")
		EndIf
	Else
		cQuery+="INNER JOIN "
		cQuery+=         + RetSqlName( "SB2" ) + " SB2 "
		cQuery+="ON "
		cQuery+=        "SB2.B2_FILIAL  = '"+xFilial("SB2")+"' "
		cQuery+="AND     SB2.B2_COD     = SB9.B9_COD "
		cQuery+="AND     SB2.D_E_L_E_T_ = ' '  "
	Endif

	If !lProc350
		cQuery+="INNER JOIN "
		cQuery+=        "(
		cQuery+=                "SELECT "
		cQuery+=                        "TRB_COD , "
		cQuery+=                        "TRB_FILIAL, "
		cQuery+=                        "TRB_LOCAL "
		cQuery+=                "FROM "  +::cAliasTRB+ " "
		cQuery+=                " WHERE
		cQuery+=                        " D_E_L_E_T_ =' ' "
		cQuery+=                "GROUP BY "
		cQuery+=                        "TRB_COD, "
		cQuery+=                        "TRB_FILIAL, "
		cQuery+=                        "TRB_LOCAL ) TRB_REC "
		cQuery+="ON "
		cQuery+=        "TRB_COD       = SB9.B9_COD "
		cQuery+=        "AND TRB_LOCAL = SB9.B9_LOCAL "
		If cSharedSB9 == "E" 
			cQuery+="AND     TRB_FILIAL    = SB9.B9_FILIAL "
		EndIf 
		cQuery+="AND     TRB_FILIAL   IN ("+cBranches+")  "
	EndIF
	cQuery+=" WHERE
	cQuery+=        " SB9.B9_DATA = "
	cQuery+=        "( "
	cQuery+=                "SELECT "
	cQuery+=                        "MAX(SB9B.B9_DATA) "
	cQuery+=                "FROM "
	cQuery+=                        + RetSqlName( "SB9" ) + " SB9B "
	cQuery+=                "WHERE "
	cQuery+=                        "SB9B.B9_FILIAL = SB9.B9_FILIAL "
	cQuery+=                "AND     SB9B.B9_COD    = SB9.B9_COD "
	cQuery+=                "AND     SB9B.B9_LOCAL  = SB9.B9_LOCAL "
	cQuery+=                "AND     SB9B.B9_DATA <>' ') "

	if !::lCusUnif
		cQuery+="ORDER BY 7 DESC  "
	Else
		cQuery+= " ) CUSTUNIF "
		cQuery+= "GROUP BY B9_FILIAL, B9_COD, B1_DESC, B1_TIPO , B1_GRUPO ORDER BY 7 DESC"
	EndIF
Return cQuery


/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acClosingCalc
    @type  Metodo
    @author André Maximo 
/*/

Method queryWhithResourceIn(cBranches, cAliasSBX) class acAnalysisResultsRepository
	local cQuery := ""	
		Do Case
			Case  cAliasSBX = "SB1"
				
				cQuery:="INNER JOIN "
				cQuery+=         + RetSqlName( "SB1" ) + " SB1 "
				cQuery+="ON "
				cQuery+=        "SB1.B1_FILIAL   IN ("+cBranches+") "
				cQuery+=" AND     SB1.B1_FILIAL = SB9.B9_FILIAL"
				cQuery+=" AND     SB1.B1_COD     = SB9.B9_COD "
				cQuery+=" AND     SB1.D_E_L_E_T_ = ' '  "
			case  cAliasSBX = "SB2"

				cQuery:="INNER JOIN "
				cQuery+=         + RetSqlName( "SB2" ) + " SB2 "
				cQuery+="ON "
				cQuery+=        "SB2.B2_FILIAL   IN ("+cBranches+") "
				cQuery+=" AND     SB2.B2_FILIAL  = SB9.B9_FILIAL
				cQuery+=" AND     SB2.B2_COD     = SB9.B9_COD "
				cQuery+=" AND     SB2.B2_LOCAL   = SB9.B9_LOCAL "
				cQuery+=" AND     SB2.D_E_L_E_T_ = ' ' "
		EndCase

return cQuery 

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acClosingCalc
    @type  Metodo
    @author André Maximo 

/*/
Method insertTable(cInsert) class acAnalysisResultsRepository

Local lRet as Logical

lRet := .T.

If (TcSqlExec(cInsert) < 0)
	::cMensErro := TCSQLError() + " ocorrida função " +ProcName(-1)+ " na linha " +cValtoChar(ProcLine(-1))+ ". "
  lRet := .F. 
EndIf

return lRet
/*/{Protheus.doc} acResultsAnalysisService
    Metodo responsavel por padronizar os dados que serão utilizados na FWAdapterBaseV2
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27
/*/
Method getItems(cTable, aCampos, page, pagesize, aFilter) Class acAnalysisResultsRepository

Local nX            as numeric 
Local nY			as numeric
Local nRoundPercent := 2 as numeric 
Local cWhere        as Character
Local aFields       
Local jsonResponse  as Object

nX      := 1
cWhere  := " D_E_L_E_T_=' ' "
aFields := {}

for nX := 1 To len(aCampos)
  aAdd( aFields,  JsonObject():New() )
  aFields[nX]['field']  :=  aCampos[nX][1]
  aFields[nX]['size']   :=  aCampos[nX][3]
  aFields[nX]['decimal']:=  aCampos[nX][4]
  aFields[nX]['type']   :=  aCampos[nX][2]
next Nx

::AddGenericMapFields(aFields)
::setPage(page)
::setPageSize(pagesize)
::setQuery(::getSimplifiedQuery(cTable))
::setWhere(cWhere)
::SetOrder( "PERCPOSIT DESC" )
::SetUrlFilter(aFilter)

If ::Execute()
   ::FillGetResponse()
   For nY := 1 to len(self:OJSONOBJ:OJSONOBJ['items'])		
		self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit']  := noRound(self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit'] , nRoundPercent ) 
		self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit2'] := noRound(self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit2'], nRoundPercent ) 
		self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit3'] := noRound(self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit3'], nRoundPercent )
	    self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit4'] := noRound(self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit4'], nRoundPercent )
		self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit5'] := noRound(self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit5'], nRoundPercent )

		Iif( self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit'] == 0 ,; 
		self:OJSONOBJ:OJSONOBJ['items'][nY]['status'] := STR0005, self:OJSONOBJ:OJSONOBJ['items'][nY]['status']   := STR0004  )// Neutro // Divergente
		Iif( self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit2'] == 0,; 
		self:OJSONOBJ:OJSONOBJ['items'][nY]['status2'] := STR0005, self:OJSONOBJ:OJSONOBJ['items'][nY]['status2'] := STR0004  )// Neutro // Divergente
		Iif( self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit3'] == 0,; 
		self:OJSONOBJ:OJSONOBJ['items'][nY]['status3'] := STR0005, self:OJSONOBJ:OJSONOBJ['items'][nY]['status3'] := STR0004  )// Neutro // Divergente
		Iif( self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit4'] == 0,; 
		self:OJSONOBJ:OJSONOBJ['items'][nY]['status4'] := STR0005, self:OJSONOBJ:OJSONOBJ['items'][nY]['status4'] := STR0004  )// Neutro // Divergente
		Iif( self:OJSONOBJ:OJSONOBJ['items'][nY]['percposit5'] == 0 ,; 
		self:OJSONOBJ:OJSONOBJ['items'][nY]['status5'] := STR0005, self:OJSONOBJ:OJSONOBJ['items'][nY]['status5'] := STR0004  )// Neutro // Divergente
   next nY
  jsonResponse := ::GetJsonResponse()
EndIf

Return jsonResponse

/*/{Protheus.doc} constructFields
  (long_description)
  Metodo responsavel por receber e converter os campos para query
  @author andre.maximo
  @since nov. 04 2020
/*/
Method addGenericMapFields(aFields) Class acAnalysisResultsRepository
	Local nX := 0

	for nX := 1 to Len(aFields)
		::AddMapFields(aFields[nX]['field'], aFields[nX]['field'] , .T.,.T.,{aFields[nX]['field'] , aFields[nX]['type'], aFields[nX]['size'], aFields[nX]['decimal']})
	next Nx

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@author andre.maximo
@since nov. 04 2020 
@version 1.0
/*/
//-------------------------------------------------------------------
method getSimplifiedQuery(cTable) Class acAnalysisResultsRepository
	Local cQuery := ''
	cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " + cTable + "  "
	cQuery += " WHERE #QueryWhere#  "
Return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@author andre.maximo
@since nov. 04 2020 
@version 1.0
/*/
//-------------------------------------------------------------------

Method logErrorProc(errorMessage, errorStack,JourneyLog) class acAnalysisResultsRepository

JourneyLog:LogProAtu('ERRO', errorMessage, errorMessage + errorStack, cFilAnt, 'ER', dDataBase, cFilAnt, .T.)
userException(errorMessage)

return 


//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@author andre.maximo
@since nov. 04 2020 
@version 1.0
/*/
//-------------------------------------------------------------------
method getCountAnalysis(id) Class acAnalysisResultsRepository
	
   	Local cQuery as Character
	Local cAlias as Character
	Local cQuantity as Character
	
	cAlias 		:= GetNextAlias()
	cQuery 		:= ''
	cQuantity 	:= ''
	   
	cQuery:= "SELECT COUNT(B9_COD) QUANT "
	cQuery+= "FROM "+id+" WHERE  D_E_L_E_T_=' ' " 
	cQuery:= changeQuery(cQuery)
	dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery),cAlias, .F., .T.) 
    
    cQuantity  := (cAlias)->QUANT

    (cAlias)->(DbCloseArea())

Return cQuantity


//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@author andre.maximo
@since nov. 04 2020 
@version 1.0
/*/
//-------------------------------------------------------------------
method checksSharing(cTable) Class acAnalysisResultsRepository
	

Return FWModeAccess(cTable)




