#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acclosingcontroller.ch"

namespace ac.acClosing.Controller

using namespace ac.acCalc.Service
using namespace ac.Log.Repository
using namespace ac.acBalanceClosing.Service
using namespace ac.acContab.Service
using namespace ac.acDistribute.service
using namespace ac.acDistribute.repository
using namespace ac.acStockClosing.Service
using namespace ac.branchesList.Serv
using namespace ac.BasicValidation.Controller

class acClosingCalc from acBasicValidationController

    public data  oResponse as Object
    public data  jBody     as Object
    public data  jbranches as Object
    public data  oLog      as object
    public data  jParams   as Object
    public data  cRoutine  as character
    public data cData as character
    
    public method New()

    @Post("api/stock/calculation/v1/mata280")
    public method postProc280()
    
    @Post("api/stock/calculation/v1/mata330")
    public method postProc330()

    @Post("api/stock/calculation/v1/mata331")
    public method postProc331()

    @Post("api/stock/calculation/v1/mata350")
    public method postProc350()

    @Post("api/stock/proccess/v1/branches")
    public method postBranches()

    @Post("api/stock/calculation/v1/distribute")
    public method postBalanceToDistribute()

    @Post("api/stock/calculation/v1/countresults")
    public method getCountResults()

    @Get("api/stock/calculation/v1/divergence")
    public method getBalanceToDivergence()

    @Get("api/stock/calculation/v1/countDivergence")
    public method getCountDivergence()

    @Get("api/stock/process/v1/fullBranches")
    public method getFullBranches()

endclass


/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acClosingCalc
    @type  Metodo
    @author André Maximo 
    @since  Novembro 10, 2020
    @version 12.1.27
/*/
Method new() class acClosingCalc
    _Super:New()
    ::jBody     := JsonObject():New() 
    ::jParams   := JsonObject():New() 
    ::oResponse := JsonObject():New()  
    ::cData     := ''
    ::cRoutine  := ''
return Self

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @author André Maximo 
    @since  Novembro 10, 2020
    @version 12.1.27
/*/
Method postProc330() Class acClosingCalc
Local cResponse             as character
Local oClosingService       as  object
Local oCalcService          as  object
Local oService              as  object
Local oContabService        as  object
Local aParansfil            as  Array
Local aAllFils              as  Array
Local cCompany              as  character
Local cBranch               as  character
Local cCgc                  as  character
Local cId                   as  character
Local cDataBase             as  character
Local lInvalid              as  Logical
Local jbranches             as  Object
Local oLog                  as  Object
Local lAutoExec             as  Logical
Local oDictionaryValidator  as  Object
Local oLogService           as  Object
Local dInicio               := SuperGetMv("MV_ULMES") + 1
Local nContabAux := 0       as numeric
Private a330ParamZX         as  Array
    
oDictionaryValidator  := _Super:GetDictionaryValid()
oLogService           := ac.Log.Service.acLogService():new()
cCompany              := ''
cBranch               := ''
cCgc                  := ''
cId                   := ''
lInvalid := .F.
::oResponse := JsonObject():New() 

oRest:setKeyHeaderResponse("Content-Type", "application/json")
::jBody:fromJson(oRest:GetBodyRequest()) 
cCompany    := ::jBody:GetJsonText("company")
cBranch     := ::jBody:GetJsonText("branch")
cId         := ::jBody:GetJsonText("id")
jbranches   := oLogService:decodeUTF(::jBody:GetJsonObject("config"))
cDataBase   := ::jBody:GetJsonText("dataBase")

oClosingService:= ac.acClosing.Service.acClosingServ():new()
oService := ac.branchesList.Serv.acBranchesListServ():new()

aParansfil:= oService:preparParamsfil(jbranches)
aAllFils := aClone(aParansfil)

oContabService  := ac.acContab.Service.acContabServ():new()

lAutoExec := jbranches["recalculationAndContabilization"] 

oCalcService:= ac.acCalc.Service.acCalcService():new()
a330ParamZX:= oCalcService:preparParamsPerg(jbranches, 'MATA330')

if !oDictionaryValidator['bIsValid']
    oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
    oRest:setResponse(oDictionaryValidator['cErrorMsg'])
else
    oLog                  := acJourneyLog():New()
    If oClosingService:isAllBranches(a330ParamZX)
        aParansfil:= oClosingService:getBranches()
        If empty(aParansfil) 
            If !oCalcService:areBranchesValid(aAllFils, cBranch)
                lInvalid := .T.
                ::jParams["errors"] := oCalcService:oParams
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(400)
                oRest:setResponse(::cData)
            Endif

        Endif
    Endif
    If lAutoExec 
        nContabAux := a330ParamZX[10]
        a330ParamZX[10] := 1

        If oContabService:isCalendarInvalid(dInicio,a330ParamZX[1])
            ::jParams["message"] := STR0003 //"Check your contabil calendar settings."
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:setResponse(::cData)
            lInvalid:= .T.
        Endif
        
        a330ParamZX[10] := nContabAux

    EndIf

    If !lInvalid
        If oCalcService:areBranchesValid(aParansfil, cBranch)
            If !oClosingService:isNotProcLocked(aParansfil)
                ::jParams["message"] := STR0002 //'Already running a MATA330 job.'
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(409)
                oRest:setResponse(::cData)
            Else
                oClosingService:unlockProc(aParansfil)

                if !(cId == "null") .and. !empty(cId)
                    oLog:cIdParent := cId
                endif

                oCalcService:eventRecalc(a330ParamZX[21],aParansfil,a330ParamZX,oLog:cIdParent,oLog:cIdChild,cCompany, cBranch, .F., lAutoExec,cDataBase)
                ::oResponse["id"] := oLog:cIdParent
                ::oResponse["idProccess"] := oLog:cIdChild
                cResponse := ::oResponse:toJson()
                oRest:SetResponse(cResponse)
            Endif
        Else
            ::jParams["errors"] := oCalcService:oParams
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:setResponse(::cData)
        Endif
    Endif 
    oLog:Destroy()
Endif

return .t.

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento da contabilizacao do recalculo do custo medio
    @type  Metodo
    @author Pedro Missaglia
    @since  Janeiro 12, 2021
    @version 12.1.27
/*/
Method postProc331() Class acClosingCalc

Local cResponse             as character
Local oClosingService       as Object
Local oCalcService          as Object
Local oServiceBranch        as Object
Local oLogService           as Object
Local aParansfil            as Array
Local aAllFils              as Array
Local cCompany              as character
Local cBranch               as character
Local cCgc                  as character
Local cId                   as character
Local cDataBase             as character
Local jbranches             as Object
Local oLog                  as Object
Local dInicio               := SuperGetMv("MV_ULMES") + 1
Local oDictionaryValidator  as Object
Local lInvalid              as Logical

Private a330ParamZX         as Array 
    
oDictionaryValidator := _Super:GetDictionaryValid()
oLogService          := ac.Log.Service.acLogService():new()
oRest:setKeyHeaderResponse("Content-Type", "application/json")

cCompany              := ''
cBranch               := ''
cCgc                  := ''
cId                   := ''            

::jBody:fromJson(oRest:GetBodyRequest()) 
cCompany        := ::jBody:GetJsonText("company")
cBranch         := ::jBody:GetJsonText("branch")
cId             := ::jBody:GetJsonText("id")
jbranches       := oLogService:decodeUTF(::jBody:GetJsonObject("config"))
cDataBase       := ::jBody:GetJsonText("dataBase")

oClosingService := ac.acClosing.Service.acClosingServ():new()
oCalcService    := ac.acCalc.Service.acCalcService():new()
oContabService  := ac.acContab.Service.acContabServ():new()
oServiceBranch := ac.branchesList.Serv.acBranchesListServ():new()

aParansfil:= oServiceBranch:preparParamsfil(jbranches)
aAllFils := aClone(aParansfil)

a330ParamZX     := oCalcService:preparParamsPerg(jbranches, 'MATA331')

if !oDictionaryValidator['bIsValid']
    oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
    oRest:setResponse(oDictionaryValidator['cErrorMsg'])
else
    oLog                  := acJourneyLog():New()
    If oContabService:isCalendarInvalid(dInicio,a330ParamZX[1])
        ::jParams["message"] := STR0003 //"Check your contabil calendar settings."
        ::cData := ::jParams:toJson()
        oRest:setStatusCode(400)
        oRest:setResponse(::cData) 
    Else 
        If oClosingService:isAllBranches(a330ParamZX)
            aParansfil:= oClosingService:getBranches()
            If empty(aParansfil)
                If !oCalcService:areBranchesValid(aAllFils, cBranch)
                    lInvalid := .T.
                Endif
            Endif 
        Endif
        
        If !lInvalid .AND. oCalcService:areBranchesValid(aParansfil)
            If !oClosingService:isNotProcLocked(aParansfil)
                ::jParams["message"] := STR0004 //'Already running a MATA331 job.'
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(409)
                oRest:setResponse(::cData) 
            Else
                oClosingService:unlockProc(aParansfil)

                if !(cId == "null") .and. !empty(cId)
                    oLog:cIdParent := cId
                endif

                oContabService:eventContab(aParansfil, a330ParamZX, cCompany, cBranch, oLog:cIdParent, oLog:cIdChild,,cDataBase)
                ::oResponse["id"] := oLog:cIdParent
                ::oResponse["idProccess"] := oLog:cIdChild
                cResponse := ::oResponse:toJson()
                oRest:SetResponse(cResponse)
            Endif
        Else
            ::jParams["errors"] := oCalcService:oParams
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:setResponse(::cData) 
        Endif

    Endif
    oLog:Destroy()
Endif

return .t.

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @author André Maximo 
    @since  Novembro 10, 2020
    @version 12.1.27
/*/
Method postBranches() Class acClosingCalc
Local cResponse      as character
Local oService       as Object
Local oConfig        as Object 
Private a330ParamZX  as Array 

oRest:setKeyHeaderResponse("Content-Type", "application/json")
::jBody:fromJson(oRest:GetBodyRequest()) 
oConfig := ::jBody:GetJsonObject("config")

::cRoutine := ::jBody:GetJsonText("routine")

oService := ac.branchesList.Serv.acBranchesListServ():new()

::oResponse["items"] := oService:listBranches(::cRoutine)
::oResponse["hasNext"] := .F.
cResponse := ::oResponse:toJson()
oRest:SetResponse(cResponse)

return .t.

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @author André Maximo 
    @since  Novembro 10, 2020
    @version 12.1.27
/*/
Method postProc350() Class acClosingCalc
Local cResponse             as character
Local oServiceBranch        as  object
Local oCalcBalanceService   as  object
Local aParansfil            as  Array
Local aListaFil             as  Array
Local cCompany              as character
Local cBranch               as character
Local cCgc                  as character
Local cId                   as character
Local oLog                  as Object
Local jbranches             as Object
Local oDictionaryValidator  as Object
Local oLogService           as Object
    
oLogService           := ac.Log.Service.acLogService():new()
oDictionaryValidator  := _Super:GetDictionaryValid()
cCompany              := ''
cBranch               := ''
cCgc                  := ''
cId                   := ''

oRest:setKeyHeaderResponse("Content-Type", "application/json")
::jBody:fromJson(oRest:GetBodyRequest()) 
cCompany    := ::jBody:GetJsonText("company")
cBranch     := ::jBody:GetJsonText("branch")
cCgc        := ::jBody:GetJsonText("cgc")
jbranches   := oLogService:decodeUTF(::jBody:GetJsonObject("config"))
cId         := ::jBody:GetJsonObject("id")

oServiceBranch := ac.branchesList.Serv.acBranchesListServ():new()

aParansfil:= oServiceBranch:preparParamsfil(jbranches, .t., aListaFil,cCompany, cBranch, cCgc)

oCalcBalanceService:= ac.acBalanceClosing.Service.acBalanceClosing():new()
if !oDictionaryValidator['bIsValid']
    oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
    oRest:setResponse(oDictionaryValidator['cErrorMsg'])
else
    oLog                  := acJourneyLog():New()
    If !(cId == "null") .and. !empty(cId)
        oLog:cIdParent := cId
    Endif

    oCalcBalanceService:eventViradaDeSaldo(aParansfil,oLog:cIdParent,oLog:cIdChild,cCompany, cBranch)
    ::oResponse["id"] := oLog:cIdParent
    ::oResponse["idProccess"] := oLog:cIdChild

    cResponse := ::oResponse:toJson()
    oRest:SetResponse(cResponse)
    oLog:Destroy()
Endif

return .t.


/*/{Protheus.doc} acConfigProf:getConfigProfile()
    Metodo responsavel retornar sx1 ou profile do usuário
    @type  Metodo
    @author pedro.missaglia
    @since  Janeiro 27, 2021
    @version 12.1.27
/*/

method postBalanceToDistribute() class acClosingCalc

    Local oService          as Object
    Local oServiceBranch    as Object
    Local oLogService       as Object
    Local cDate             as character
    Local jParams           as Object        
    Local jBodyResponse     as Object
    Local cData             as character
    Local jBranches         as Object
    Local aBranches         as Array  
    Local nPage
    Local nPageSize 
    Local aFilter   

    oServiceBranch := ac.branchesList.Serv.acBranchesListServ():new()
    oLogService    := ac.Log.Service.acLogService():new()
        
    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    jBodyResponse   := JsonObject():New()
    cData           := ''

    jParams         := oRest:GetQueryRequest()
    ::jBody:fromJson(oRest:GetBodyRequest()) 

    cDate           := jParams['date']
    nPage           := jParams['page']
    nPageSize       := jParams['pageSize']
    aFilter         := jParams['filter']

    jBranches       := oLogService:decodeUTF(::jBody:GetJsonObject("config"))

    oService  := ac.acDistribute.service.acDistributeService():new()
    if empty(cDate) .or. (cDate == "null")
        jBodyResponse["message"] := STR0013
        cData := jBodyResponse:toJson() 
        oRest:setStatusCode(400)
        oRest:setResponse(cData) 
    else 
        
        aBranches       := oServiceBranch:preparParamsfil(jBranches)
        if Len(aBranches) > 0
            cDate := CtoD(cDate)
            if empty(nPage)
                nPage := 1
            else
                nPage := val(nPage)    
            endif

            if empty(nPageSize)
                nPageSize := 10
            else 
                nPageSize := val(nPageSize)       
            endif

            if Empty(aFilter) .or. (aFilter == 'null') 
                aFilter := {{"FILTER", ''}}
            else 
                aFilter := {{"FILTER", jParams['filter']}}
            endif

            oRest:setResponse( oService:getBalanceToDistribute(nPage, nPageSize, cDate, aFilter, aBranches) ) 
        else
            oRest:setStatusCode(400)
            ::jParams["message"] := STR0014 //'Filiais inválidas.'
            oRest:setResponse(::jParams)
        endif
    endif
return .t.

/*/{Protheus.doc} acConfigProf:getConfigProfile()
    Metodo responsavel por realizar contagem de quantos resultados foram encontrados  
    @type  Metodo
    @author Denise Nogueira
    @since  Janeiro 29, 2021
    @version 12.1.27
/*/
method getCountResults() class acClosingCalc

    Local oRepository       as Object
    Local oService          as Object
    Local oCount            as Object
    Local oLogService       as Object
    Local cDate             as character
    Local jBranches         as Object
    Local aBranches         as Array

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    oLogService := ac.Log.Service.acLogService():new()
    
    jParams         := oRest:GetQueryRequest()
    ::jBody:fromJson(oRest:GetBodyRequest())

    cDate           := jParams['date']
    jBranches       := oLogService:decodeUTF(::jBody:GetJsonObject("config"))

    oService := ac.branchesList.Serv.acBranchesListServ():new()
    aBranches       := oService:preparParamsfil(jBranches)
    cDate := CtoD(cDate)
    
    oRepository := ac.acDistribute.repository.acDistributeRepository():new()

    oCount:= oRepository:GetCount(cDate, aBranches)
    oRest:setResponse( oCount)  
    

return .t.

/*/{Protheus.doc} acClosingCalc:postProc280()
    Metodo responsavel por acionar o startJob do processamento do fechamento de estoque
    @type  Metodo
    @author Samuel Macedo
    @since  Fevereiro 05, 2021
    @version 12.1.27
/*/
Method postProc280() Class acClosingCalc

Local cResponse             as character
Local oClosingService       as Object
Local oCalcService          as Object
Local oLogService           as Object
Local aParansfil            as Array
Local cCompany              as character
Local cBranch               as character
Local cCgc                  as character
Local cId                   as character
Local jbranches             as Object
Local oLog                  as Object
Local oBranchesInvalidDate  as Object
Local cMsgValidateParams    as character
Local jBodyResponse         := JsonObject():New()
Local oDictionaryValidator  as Object
Private a280ParamZX         as Array
    
oDictionaryValidator := _Super:GetDictionaryValid()
oRest:setKeyHeaderResponse("Content-Type", "application/json")
oLogService := ac.Log.Service.acLogService():new()

cCompany              := ''
cBranch               := ''
cCgc                  := ''
cId                   := ''

::jBody:fromJson(oRest:GetBodyRequest()) 
cCompany        := ::jBody:GetJsonText("company")
cBranch         := ::jBody:GetJsonText("branch") 
cId             := ::jBody:GetJsonText("id")
cDate           := ::jBody:GetJsonText("date")
jbranches       := oLogService:decodeUTF(::jBody:GetJsonObject("config"))

oStockClosingService  := ac.acStockClosing.Service.acStockClosingServ():new()
cMsgValidateParams := oStockClosingService:validateParams(cCompany, cBranch, cDate, jbranches)

if !oDictionaryValidator['bIsValid']
    oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
    oRest:setResponse(oDictionaryValidator['cErrorMsg'])
else 
    If !Empty(cMsgValidateParams)
        jBodyResponse["message"] := cMsgValidateParams
        cResponse := jBodyResponse:toJson()
        oRest:setStatusCode(400)
        oRest:setResponse(cResponse) 
    Else 
        oClosingService       := ac.branchesList.Serv.acBranchesListServ():new()
        oCalcService          := ac.acCalc.Service.acCalcService():new()    
        aParansfil            := oClosingService:preparParamsfil(jbranches)
        a280ParamZX           := oStockClosingService:preparParamsPerg(jbranches)
        oBranchesInvalidDate  := oStockClosingService:valitedBranchesDate(STOD(cDate), aParansfil)

        If oStockClosingService:lNotFoundCount
            oRest:setStatusCode(400)
            oRest:setResponse(oBranchesInvalidDate) 
        Else 
            oLog := acJourneyLog():New()

            If !(cId == "null") .and. !empty(cId)
                oLog:cIdParent := cId
            EndIf

            oStockClosingService:eventStockClosing(STOD(cDate), aParansfil, a280ParamZX, cCompany, cBranch, oLog:cIdParent, oLog:cIdChild)
            jBodyResponse["id"] := oLog:cIdParent
            jBodyResponse["idProccess"] := oLog:cIdChild
            cResponse := jBodyResponse:toJson()
            oRest:SetResponse(cResponse)        

            oLog:Destroy()
        EndIf    
    EndIf
EndIf

Return .t.

/*/{Protheus.doc} acClosingController:getBalanceToDivergence()
    Metodo responsavel retornar itens com problema após o fechamento de estoque
    @type  Metodo
    @author samuel.macedo
    @since  Fev 26, 2021
    @version 12.1.27
/*/

method getBalanceToDivergence() class acClosingCalc

    Local oService          as Object
    Local cId             as character
    Local jParams           as Object        
    Local jBodyResponse     as Object
    Local nPage
    Local nPageSize 
    Local aFilter   

    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    jBodyResponse   := JsonObject():New()

    jParams         := oRest:GetQueryRequest()

    cId       := jParams['id']
    nPage     := jParams['page']
    nPageSize := jParams['pageSize']
    aFilter   := jParams['filter']

    if Empty(cId)
        jParams["message"] := STR0005 //'Id is required.'
        cData := jParams:toJson()
        oRest:setStatusCode(400)
        oRest:setResponse(cData) 
    Else 
        oService  := ac.acDivergence.service.acDivergenceService():new()

        if empty(nPage)
            nPage := 1
        else
            nPage := val(nPage)    
        endif

        if empty(nPageSize)
            nPageSize := 10
        else 
            nPageSize := val(nPageSize)       
        endif

        if Empty(aFilter) .or. (aFilter == 'null') 
            aFilter := {{"FILTER", ''}}
        else 
            aFilter := {{"FILTER", jParams['filter']}}
        endif

        oRest:setResponse( oService:getBalanceToDivergence(cId, nPage, nPageSize, aFilter) ) 
    EndIf
return .t.

/*/{Protheus.doc} acClosingController:getCountDivergence()
    Metodo responsavel por realizar contagem de quantos resultados foram encontrados de itens com problema
    @type  Metodo
    @author samuel.macedo
    @since  Fev 26, 2021
    @version 12.1.27
/*/
method getCountDivergence() class acClosingCalc

    Local oResponse   as Object
    Local oService    as Object
    Local cId         as character
    Local cData       as character
    Local jParams     as Object    

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    
    jParams := oRest:GetQueryRequest()

    cId := jParams['id']

    if Empty(cId)
        jParams["message"] := STR0005 //'Id is required.'
        cData := jParams:toJson()
        oRest:setStatusCode(400)
        oRest:setResponse(cData) 
    Else 
        oService := ac.acDivergence.service.acDivergenceService():new()

        cResponse := oService:GetCount(cId) 

        oResponse := JsonObject():New()
        oResponse["quantity"] := cResponse
        oRest:setResponse(oResponse)  
    EndIf      
return .t.

/*/{Protheus.doc} getFullBranches
    Devolucao dos dados da MatFilCalc
    @type  Method
    @author carlos.capeli
    @since 20/05/2022
    @version 1.0
    /*/
Method getFullBranches() Class acClosingCalc
Local cResponse      as character
Local oService       as Object
Local lAllBranches   as Logical
Private a330ParamZX  as Array 

lAllBranches := .T.

oRest:setKeyHeaderResponse("Content-Type", "application/json")

oService := ac.branchesList.Serv.acBranchesListServ():new()

::oResponse["items"] := oService:listBranches('', lAllBranches)
::oResponse["hasNext"] := .F.

cResponse := ::oResponse:toJson()
oRest:SetResponse(cResponse)

Return .T.

