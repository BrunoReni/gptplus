#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"
#include "tlpp-core.th"
#include "tlpp-rest.th"
#INCLUDE "totvs.protheus.backoffice.est.closing.profile.ch"
#include "fwlibversion.ch"

namespace totvs.protheus.backoffice.est.closing.profile

class ClosingProfile
    public  data        oProcessings
    public  data        cId
    public  data        cIdChild
    public  data        cType
    public  data        cError
    public  data        cBranch
    public  data        cPosition
    public  data        dClosingDate
    public  data        dStartDate
    public  data        dEndDate
    public  data        cStartHour
    public  data        cEndHour
    public  data        cStatus
    public  data        oSX1
    public  data        oSX6
    public  data        oBranches
    public  data        oEnvironment
    public  method      new()
    private method      getProcessings()
    private method      getSx1()
    private method      getSx6()
    private method      getBranches()
    private method      isValid()
    private method      fillBasicFields()
    private method      closeD3Y()
    private method      getEnvironment()

    public  method      toJson()

endclass

/*/{Protheus.doc} ClosingProfile:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class ClosingProfile
    @type  Metodo
    @author squad.entradas
    @since  Fevereiro 04, 2022
    @version 12.1.33
/*/

Method new(idParent) class ClosingProfile
    ::cId           := Alltrim(idParent)
    If ::isValid(idParent)
        ::cId           := Alltrim(idParent)
        ::cError := ''
        ::oProcessings  := ::getProcessings()  
        ::fillBasicFields()
        ::getBranches()
        ::getSx6()
        ::getSx1()
        ::getEnvironment()
        ::closeD3Y()
    else
        ::cError := STR0001
    Endif
return Self

/*/{Protheus.doc} ClosingProfile:translateClass()
    Metodo responsavel por instanciar e iniciar as variaveis da class ClosingProfile
    @type  Metodo
    @author squad.entradas
    @since  Fevereiro 04, 2022
    @version 12.1.33
/*/

Method getProcessings() class ClosingProfile

Local cAliasQry	:= GetNextAlias()
Local oJson     := JsonObject():New()
Local cIdAux    := ''    
Local aAux      := {}
Local nX        := 0
Local nY        := 0

BeginSql alias cAliasQry 
	SELECT 
		D3X.D3X_PROC,
		D3X.D3X_IDPROS,
        D3X.D3X_STATUS,
        D3X.D3X_DATA,
        D3X.D3X_HORA
	FROM 
		%table:D3X% D3X 
	WHERE 
		D3X.D3X_IDEXEC =  %exp:self:cId % AND 
		(D3X.D3X_STATUS = '0' OR D3X.D3X_STATUS = '8') AND
        D3X.D3X_SBPROC = ' ' AND
        D3X.%notDel% ORDER BY D3X_IDPROS,D3X_STATUS
EndSql

nX := 1
nY := 1

WHILE (cAliasQry)->(!Eof())
    If nX == 1
        aAdd( aAux,  JsonObject():New() )
        cIdAux := (cAliasQry)->D3X_IDPROS
        aAux[nY]["idChild"] := Alltrim((cAliasQry)->D3X_IDPROS)
        aAux[nY]["process"] := Alltrim((cAliasQry)->D3X_PROC)
        aAux[nY]["startDate"] := (cAliasQry)->D3X_DATA
        aAux[nY]["startHour"] := (cAliasQry)->D3X_HORA
        nX++
    Else
        If (cAliasQry)->D3X_IDPROS == cIdAux
            aAux[nY]["endDate"] := (cAliasQry)->D3X_DATA
            aAux[nY]["endHour"] := (cAliasQry)->D3X_HORA
        Endif
        nX := 1
        nY++
    Endif
    (cAliasQry)->(dbSkip())
Enddo

oJson['items'] := aAux

return oJson

/*/{Protheus.doc} ClosingProfile:translateClass()
    Metodo responsavel por instanciar e iniciar as variaveis da class ClosingProfile
    @type  Metodo
    @author squad.entradas
    @since  Fevereiro 04, 2022
    @version 12.1.33
/*/

Method isValid(id) class ClosingProfile

DbSelectArea('D3Y')
D3Y->(DbSetOrder(1))

return D3Y->(DbSeek(xFilial('D3Y')+Alltrim(id)))


/*/{Protheus.doc} methodName
    (long_description)
    @author user
    @since 07/04/2022
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    /*/
Method fillBasicFields() class ClosingProfile
    ::cBranch       := D3Y->D3Y_FILIAL
    ::cType         := D3Y->D3Y_TYPE
    ::cPosition     := D3Y->D3Y_POSITI
    ::dClosingDate  := D3Y->D3Y_DTFECH
    ::dStartDate    := D3Y->D3Y_DATAIN
    ::dEndDate      := D3Y->D3Y_DATAFN
    ::cStartHour    := D3Y->D3Y_HORAIN      
    ::cEndHour      := D3Y->D3Y_HORAFN
    ::cStatus       := D3Y->D3Y_STATUS
    ::cIdChild      := D3Y->D3Y_IDPROS
Return

/*/{Protheus.doc} methodName
    (long_description)
    @author user
    @since 07/04/2022
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    /*/
Method getSx1() class ClosingProfile
    ::oSX1 := JsonObject():New()
    ::oSX1:fromJson(D3Y->D3Y_STRUCT)
Return 

/*/{Protheus.doc} methodName
    (long_description)
    @author user
    @since 07/04/2022
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    /*/
Method getSx6() class ClosingProfile
    ::oSX6 := JsonObject():New()
    ::oSx6:fromJson(D3Y->D3Y_PARAMS)
Return 

/*/{Protheus.doc} methodName
    (long_description)
    @author user
    @since 07/04/2022
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    /*/
Method getBranches() class ClosingProfile
Local oLocal    := JsonObject():New()
Local nX        := 0
Local aBranches := {}

    ::oBranches := JsonObject():New()
    oLocal:fromJson(D3Y->D3Y_BRANCH)
        For nX := 1 to Len(oLocal)
            Aadd(aBranches,JsonObject():new())
            aBranches[nX]["Code"]           := oLocal[nX]["Code"]
            aBranches[nX]["Description"]    := oLocal[nX]["Description"]  
            aBranches[nX]["Cgc"]            := oLocal[nX]["Cgc"]  
        Next nX
    ::oBranches := aBranches
Return 

/*/{Protheus.doc} methodName
    (long_description)
    @author user
    @since 07/04/2022
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    /*/
Method toJson() class ClosingProfile
Local oJson := JsonObject():New()

oJson['idParent']       := ::cId
If !Empty(::cError) 
    oJson['error'] := ::cError
else
    oJson['lastIdChild']    := Alltrim(::cIdChild)
    oJson['startBranch']    := ::cBranch
    oJson['endHour']        := ::cEndHour
    oJson['position']       := Alltrim(::cPosition)
    oJson['startHour']      := ::cStartHour
    oJson['status']         := ::cStatus
    oJson['type']           := Alltrim(::cType)
    oJson['startDate']      := DTOS(::dStartDate)
    oJson['endDate']        := DTOS(::dEndDate)
    oJson['closingDate']    := DTOS(::dClosingDate)
    oJson['processings']    := ::oProcessings['items']
    oJson['sx1']            := ::oSx1
    oJson['sx6']            := ::oSx6
    oJson['branches']       := ::oBranches    
    oJson['environment']    := ::oEnvironment['environment']   
Endif    

Return oJson

/*/{Protheus.doc} methodName
    (long_description)
    @author user
    @since 07/04/2022
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    /*/
Method closeD3Y() class ClosingProfile

D3Y->(DBCLOSEAREA())
Return 


Method getEnvironment() CLASS ClosingProfile

    Local cQuery    := ''
    Local cAliasD3X := GetNextAlias()
    Local cJson     := ''
    Local nX        := 0
    Local cAux      := ''
    Local oAux      := JsonObject():New()
    Local aAux      := {}

    cStateMemoryInQuery := TCConfig('GETMEMOINQUERY');

    If (cStateMemoryInQuery == 'OFF')
        TCConfig('SETMEMOINQUERY=ON')
    EndIf
    
    cQuery := "SELECT D3X_IDPROS,D3X_PROC,D3X_DET FROM " + RetSQLName('D3X') +  " WHERE D3X_IDEXEC = '" + ::cId + "' AND D3X_INFO = '7' AND D_E_L_E_T_ = ' ' ORDER BY D3X_DATA,D3X_HORA DESC"  
    cQuery := ChangeQuery(cQuery)
    dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasD3X, .F., .T.)

    If (cStateMemoryInQuery == 'OFF')
        TCConfig('SETMEMOINQUERY=OFF')
    EndIf

    ::oEnvironment := JsonObject():New()
    cJson := (cAliasD3X)->D3X_DET
    If !Empty(cJson)
        ::oEnvironment:fromJson(cJson)

        ::oEnvironment["environment"]["apoVersion"] := {}

        While (cAliasD3X)->(!Eof())
            cAux := (cAliasD3X)->D3X_DET
            oAux:fromJson(cAux)
            If Alltrim((cAliasD3X)->D3X_PROC) == 'EST282'
                For nX := 1 to Len(oAux["environment"]["apoVersion"])
                    aAdd( aAux, oAux["environment"]["apoVersion"][nX]) 
                Next nX
            Else 
                aAdd( aAux, oAux["environment"]["apoVersion"])  
            Endif

            (cAliasD3X)->(dbSkip())
        EndDo

        ::oEnvironment["environment"]["apoVersion"] := aAux
    Endif    
    (cAliasD3X)->(DbCloseArea())

Return



