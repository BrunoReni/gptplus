#include "tlpp-core.th"
#include "tlpp-rest.th"
#include 'protheus.ch'
#INCLUDE "TOPCONN.ch"
#INCLUDE "TBICONN.CH"
#INCLUDE "FWEVENTVIEWCONSTS.CH"


namespace ac.branchesList.Serv
using namespace ac.branchesList.Repository

Class acBranchesListServ
    public data  oRepository as Object
    public method New()
    public method preparParamsfil()
    public method listBranchesinformated()
    public method listBranches()
    public method valitedBranchesDate()
    public method converListBranchesToString()
EndClass



Method new() class acBranchesListServ    
    ::oRepository := ac.branchesList.Repository.acBranchesListRep():new()
return Self



/*/{Protheus.doc} preparParamsfil
    Metodo responsavel por selecionar as filiais que serão processadas 
    @type  Metodo
    @author André Maximo 
    @since  Novembro 26,2020
    @version 12.1.27
/*/
Method preparParamsfil(oJParams, lType, aListaFil,cCompany, cBranch, cCgc) class  acBranchesListServ
local   nX        := 0
Local   nY        := 0
Default aListaFil := {}
Default lType     := .F.
Default cCompany  := " "
Default cBranch   := " "
Default cCgc      := " "

if !lType .or. (lType .and. oJParams['type'] == 3)
    for nX := 1 to len(oJParams['branches'])
        Aadd(aListaFil,{.T.,oJParams['branches'][nX]['Code'], oJParams['branches'][nX]['Description'] ,oJParams['branches'][nX]['Cgc'], .F.})
    next nX
elseif (lType .and. oJParams['type'] == 2)
    Aadd(aListaFil,{.T.,cBranch, " ",cCgc })
elseif (lType .and. oJParams['type'] == 1)
    aListaFil := ::oRepository:listAllBranches()
    If len(aListaFil) > 0
        For nY := 1 To Len(aListaFil)
            //Seleciono todas as filias
             aListaFil[nY][1]:= .T.
        Next nY
    EndIf 
EndIF
return aListaFil 



/*/{Protheus.doc} acBranchesList
    Metodo responsavel por adicionar no array as filiais que serão processadas no recalculo
    @type  Metodo
    @author André Maximo 
    @since  Novembro 26,2020
    @version 12.1.27
/*/
Method listBranches(cRoutine, lAllBranches) class  acBranchesListServ

Local aListaFil             as Array
Local aListFilDTO           as Array
Local aMA330SFI             as Array
Local nI                    as Numeric
Local nX                    as Numeric
Local lRet                  as Logical

lRet := .F.
Default lAllBranches := .F.

aListFilDTO := {}
aMA330SFI   := {}

aListaFil := ::oRepository:listAllBranches(lAllBranches)

If ValType(aListaFil) ==  "A"
    For nX := 1 to Len(aListaFil) 
        aListaFil[nX][2]    := aListaFil[nX][2] //EncodeUTF8()
        aListaFil[nX][3]    := aListaFil[nX][3] //EncodeUTF8()
    Next nX
EndIf

if cRoutine == 'MATA330' .or. cRoutine == 'MATA331'
    If ExistBlock("MA330SFI")
        aMA330SFI := ExecBlock("MA330SFI",.F.,.F.,{aListaFil,.F.})
        lRet      := .T.
        
        If ValType(aMA330SFI) == "A" .And. Len(aMA330SFI) == 2
            aListaFil := aMA330SFI[1]
        EndIf
    EndIf
Endif

For nI := 1 to Len(aListaFil)
    AAdd( aListFilDTO, JsonObject():New())
    If lRet
        aListFilDTO[nI]["Tag"] := aListaFil[nI][1]
    Else
        aListFilDTO[nI]["Tag"] := .F.
    EndIf
	aListFilDTO[nI]["Code"]		        := aListaFil[nI][2]
	aListFilDTO[nI]["Description"]		:= aListaFil[nI][3]
	aListFilDTO[nI]["Cgc"]	            := aListaFil[nI][4] 
Next nI

return aListFilDTO 


/*/{Protheus.doc} acBranchesList
    Metodo responsavel por adicionar no array as filiais que serão processadas no recalculo
    @type  Metodo
    @author André Maximo 
    @since  Novembro 26,2020
    @version 12.1.27
/*/
Method listBranchesinformated(aListaFil) class  acBranchesListServ

Local aListFilDTO := {}     as Array 
Local nI := 0               as Numeric

For nI := 1 to Len(aListaFil)
    AAdd( aListFilDTO, JsonObject():New())
	aListFilDTO[nI]["Code"]		        := aListaFil[nI][2]
	aListFilDTO[nI]["Description"]		:= aListaFil[nI][3]
	aListFilDTO[nI]["Cgc"]	            := aListaFil[nI][4] 
Next nI

return aListFilDTO 



/*/{Protheus.doc} valitedBranchesDate
    Metodo responsavel por validar a data informada para processamento do MATA280
    @type  Metodo
    @author Samuel Macedo
    @Fevereiro 09,2021
    @version 12.1.27
/*/
Method valitedBranchesDate(dDataFec, aParansfil) class  acBranchesListServ
Local nX	   := 0
Local cMessage := ''
Local cFilBack := cFilAnt
Local MV_ULMES

For nX := 1 To Len(aParansfil)
    If aParansfil[nX,1]
        cFilAnt:=aParansfil[nX,2]
        MV_ULMES := GetMv("MV_ULMES")
        If dDataFec <= MV_ULMES 
            If Empty(cMessage)
                cMessage := 'Check the date informed for the branches: '
            EndIf

            If (nX == 1)
                cMessage += cFilAnt + ' - Last closing date: ' + DTOC(MV_ULMES)
            Else
                cMessage += ', ' + cFilAnt + ' - Last closing date: ' + DTOC(MV_ULMES)
            EndIf                
        EndIf
    EndIf
Next nX

cFilAnt := cFilBack

return cMessage

/*/{Protheus.doc} converListBranchesToString
    Metodo responsavel por transformar a lista de filiais em uma string para querys
    @type  Metodo
    @author André Maximo 
    @Abril 09,2021
    @version 12.1.27
/*/
Method converListBranchesToString(oJbranches) Class acBranchesListServ
    Local nX        := 0
    Local cBranches := " "
    for nX := 1 to len(oJbranches['branches']['items'])
        cBranches +=  "'"+ Iif(nX < len(oJbranches['branches']['items']) , oJbranches['branches']['items'][nX]['Code'] +"'"+', ', oJbranches['branches']['items'][nX]['Code']+"'" )
    next nX

return cBranches


