#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acclosingcontroller.ch"

namespace ac.Log.Controller

using namespace ac.acClosing.Repository
using namespace ac.acClosing.Service
using namespace ac.acStockClosing.Service
using namespace ac.Log.Service
using namespace ac.BasicValidation.Controller

class acLogController from acBasicValidationController

    public data  oResponse as object
    public data  jBody     as object
    public data  jbranches as object
    public data  oLog      as object
    public data  jParams   as object
    public data  cRoutine  as character
    public data  cData     as character
    
    public method New()

    @Get("api/stock/proccess/v1/status")
    public method getD3XStatus()

    @Get("api/stock/d3x/v1/item/:id")
    public method getD3X()

    @Post("api/stock/d3y/v1/status")
    public method getD3YStatus()

    @Post("api/stock/calculation/v1/recd3y")
    public method postRecd3y()

    @Delete("api/stock/calculation/v1/d3w/:id")
    public method postDeleteD3W()

    @Get("api/stock/d3y/v1/item/:id")
    public method getD3YItem()

    @Get("api/stock/d3y/v1/info/:id")
    public method getFullD3YItem()

    @Get("api/stock/d3w/v1/repair/:id")
    public method getD3WRepair()


endclass


/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acClosingCalc
    @type  Metodo
    @author André Maximo 
    @since  Novembro 10, 2020
    @version 12.1.27
/*/
Method new() class acLogController
    _Super:New()
    ::jBody     := JsonObject():New() 
    ::jParams   := JsonObject():New() 
    ::oResponse := JsonObject():New()  
    ::cData     := ''
    ::cRoutine  := ''
return Self

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

method getD3YItem() class acLogController

    Local jBodyResponse as Object
    Local cMessage      as character
    Local cId           as character
    Local oService      as Object
    Local jPath         as Object
    Local oDictionaryValidator  as  Object

    jPath := JsonObject():New()
    oDictionaryValidator := _Super:GetDictionaryValid()


    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else

        jBodyResponse   := JsonObject():New()
        cMessage        := ''
        jPath := oRest:getPathParamsRequest()
        cId := jPath[ 'id' ]   
        oService := ac.Log.Service.acLogService():new()
        If !empty(cId) .and. cId != 'null' 
            oRest:setResponse( oService:getD3YItem(cId):toJson())  
        Else 
            ::jParams["message"] := STR0008
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:SetResponse( ::cData ) 
        Endif

    endif

    FreeObj(jPath)
    
return .t.

Method getD3XStatus() class acLogController
    Local cId               as character
    Local cIdProccess       as character
    Local oStatus           as object
    Local cProccess         as character
    Local cBranch           as character
    Local oDictionaryValidator  as  Object

    oDictionaryValidator := _Super:GetDictionaryValid()
    oStatus := JsonObject():New()
    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    ::jParams := oRest:getQueryRequest()
    cId         := ::jParams['id']
    cProccess   := ::jParams['proccess']
    cIdProccess := ::jParams['idProccess']
    cBranch     := ::jParams['branch']

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else
        if empty(cId) .or. empty(cProccess) .or. empty(cIdProccess)
            if empty(cId)
                ::jParams["message"] := STR0005 //'Id is required.'
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(400)
                oRest:setResponse(::cData) 
            else 
                if empty(cProccess)
                    ::jParams["message"] := STR0006 //'Proccess is required.'
                    ::cData := ::jParams:toJson()
                    oRest:setStatusCode(400)
                    oRest:setResponse(::cData) 
                else
                    ::jParams["message"] := STR0007 //'IdProccess is required.'
                    ::cData := ::jParams:toJson()
                    oRest:setStatusCode(400)
                    oRest:setResponse(::cData) 

                endif
            
            endif
        else 
            cProccess := Upper(cProccess)
            oLogService := ac.Log.Service.acLogService():new()

            oStatus := oLogService:getD3XItem(cId, cProccess, cIdProccess, cBranch)
            
            oStatus:fromJson()
            if !empty(oStatus["status"])
                ::jParams := oStatus

                ::cData := ::jParams:toJson()
                oRest:setResponse( ::cData )
            else
                ::jParams["message"] := STR0008 //'Specified id was not found.'
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(400)
                oRest:setResponse(::cData) 
            endif
        endif
    endif
return .t.

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getD3YStatus() class acLogController

    Local oBranches             as Object
    Local jBodyResponse         as Object
    Local oDictionaryValidator  as Object
    Local oLogService           as Object

    oDictionaryValidator := _Super:GetDictionaryValid()
    oBranches := JsonObject():New()
    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    oLogService := ac.Log.Service.acLogService():new()
    
    ::jBody:fromJson(oRest:GetBodyRequest()) 
    oBranches := oLogService:decodeUTF(::jBody:GetJsonObject("branches"))
    cId         := ::jBody:GetJsonObject("id")

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else

        if empty(oBranches) .OR. oBranches == Nil
            jBodyResponse := JsonObject():New()
            jBodyResponse["message"] := STR0014
            ::cData := jBodyResponse:toJson()
            oRest:setStatusCode(400)
            oRest:setResponse( ::cData )
        else
            oService := ac.Log.Service.acLogService():new()
            jBodyResponse := oService:getUnavailableBranches(oBranches, cId)   

            ::cData := oLogService:decodeUTF(jBodyResponse:toJson())
            oRest:setResponse( ::cData )

        endif
    endif
return .t.

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por gravar informações na D3Y
    @type  Metodo
    @author Denise Nogueira
    @since  Janeiro 14, 2021
    @version 12.1.27
/*/
method postRecd3y() Class acLogController
    Local oClosingService       as object
    Local cIdParent             as character
    Local cIdChild              as character
    Local cPosition             as character
    Local cType                 as character
    Local cFinish               as character
    Local cError                as character
    Local cStruct               as character
    Local cParams               as character
    Local lRet                  as Logical
    Local lReopening            as Logical
    local dDataFech             as Date
    Local jBranches             as Object
    Local jBranchesCancel       as Object
    Local oDictionaryValidator  as Object
    Local oLogService           as Object

    oDictionaryValidator := _Super:GetDictionaryValid()
    oLogService          := ac.Log.Service.acLogService():new()
    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jBody:fromJson(oRest:GetBodyRequest()) 
    cIdParent       := ::jBody:GetJsonText("id")
    cIdChild        := ::jBody:GetJsonText("idProccess")
    cPosition       := ::jBody:GetJsonText("position")
    cType           := ::jBody:GetJsonText("type")
    cFinish         := ::jBody:GetJsonText("finish")
    cError          := ::jBody:GetJsonText("error")
    cStruct         := ::jBody:GetJsonText("struct")
    cParams         := ::jBody:GetJsonText("params")
    jBranches       := oLogService:decodeUTF(::jBody:GetJsonText("branches"))
    jBranchesCancel := ::jBody:GetJsonObject("branchesCancel")

    oLogService     := ac.Log.Service.acLogService():new()
    cError          := oLogService:decodeUTF(cError)
    cStruct         := oLogService:decodeUTF(cStruct)
    cParams         := oLogService:decodeUTF(cParams)
    jBranches       := oLogService:decodeUTF(jBranches)
    jBranchesCancel := oLogService:decodeUTF(jBranchesCancel)

    dDataFech       := ::jBody:GetJsonText("dataClosing")
    lReopening      := Iif(::jBody:GetJsonText("reopening") =="true", .T., .F.)

    oClosingService:= ac.Log.Service.acLogService():new()

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else
        If !oClosingService:ValidInfo( ::jBody)
            ::jParams["message"] := STR0010 //'missing information for processing '
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:SetResponse( ::cData )
        else
            if oClosingService:validD3y(cIdParent, cPosition, cIdChild)
                lRecord := oClosingService:GetCanSave(cIdParent,lReopening ,cIdChild)
                lRet :=  oClosingService:analyzesDataForRecording(cIdParent, cPosition, cFinish, cError, cStruct, cType, cParams, cIdChild, jBranches, dDataFech , lRecord, jBranchesCancel)
                If lRet
                    ::jParams["status"]     := STR0011 //sucesso
                    ::cData := ::jParams:toJson()
                    oRest:SetResponse( ::cData )
                else
                    oRest:setStatusCode(500)
                    oRest:setResponse(oClosingService:cMessage)
                EndIf
            else
                ::jParams["message"] := (STR0009) //"Id, IdProccess and Position is required."
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(400)
                oRest:SetResponse( ::cData )
            EndIF
        EndIf
    endif    
    oRest:Destroy()
return

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

method postDeleteD3W() class acLogController

    Local jBodyResponse as Object
    Local cMessage      as character
    Local cId           as character
    Local oService      as Object
    Local jPath         as Object
    Local oDictionaryValidator  as  Object

    jPath := JsonObject():New()
    oDictionaryValidator := _Super:GetDictionaryValid()


    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else

        jBodyResponse   := JsonObject():New()
        cMessage        := ''
        jPath := oRest:getPathParamsRequest()
        cId := jPath[ 'id' ]   
        oService := ac.Log.Service.acLogService():new()
        If !empty(cId) .and. cId != 'null' 
            
            If oService:deleteFromD3W(cId)
                jBodyResponse["id"] := cId
                jBodyResponse["message"] := 'Registros deletados com sucesso.'
                oRest:setResponse( jBodyResponse:toJson() )  
            else
                jBodyResponse["id"] := cId
                jBodyResponse["message"] := oService:getErrorSQLFromD3W()
                oRest:setStatusCode(500)
                oRest:setResponse( jBodyResponse:toJson() )  
            Endif
        Else 
            ::jParams["message"] := STR0008
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:SetResponse( ::cData ) 
        Endif

    endif

    FreeObj(jPath)
    
return .t.

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/


Method getD3X() class acLogController
    Local cId                   as character
    Local oDictionaryValidator  as Object
    Local jPath                 as Object
    Local jParams               as Object
    Local page                  as Numeric
    Local pageSize              as Numeric
    Local cData                 as character
    Local oResponse             as Object
    Local oStatus           as object

    oStatus := JsonObject():New()

    oDictionaryValidator := _Super:GetDictionaryValid()
    oRest:setKeyHeaderResponse("Content-Type", "application/json")


    jPath   := JsonObject():New()
    jPath   := oRest:getPathParamsRequest()
    cId     := jPath[ 'id' ]   

    jParams       := oRest:getQueryRequest()
    page          := Iif(!empty(jParams['page']), val(jParams['page']), 1)
    pageSize      := Iif(!empty(jParams['pageSize']), val(jParams['pageSize']), 10)

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else
        oResponse := JsonObject():New()
        oLogService := ac.Log.Service.acLogService():new()
        If oLogService:idChildIsValid(cId)
            cData := oLogService:getD3X(cId, page, pageSize)
            oRest:setResponse( cData )
        Else
            oResponse["message"] := STR0008 //'Specified id was not found.'
            cData := oResponse:toJson()
            oRest:setStatusCode(400)
            oRest:setResponse(cData) 
        Endif
    endif
return .t.

/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

method getFullD3YItem() class acLogController

    Local jBodyResponse         as Object
    Local cMessage              as character
    Local cId                   as character
    Local oService              as Object
    Local jPath                 as Object
    Local oDictionaryValidator  as Object

    jPath := JsonObject():New()
    oDictionaryValidator := _Super:GetDictionaryValid()

    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    If !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    Else

        jBodyResponse   := JsonObject():New()
        cMessage        := ''
        jPath := oRest:getPathParamsRequest()
        cId := jPath[ 'id' ]   
        oService := ac.Log.Service.acLogService():new()
        If !empty(cId) .and. cId != 'null' 
            oRest:setResponse( oService:getFullD3YItem(cId))
        Else 
            ::jParams["message"] := STR0008
            ::cData := EncodeUTF8(::jParams:toJson())
            ::cData := DecodeUTF8(::cData)
            oRest:setStatusCode(400)
            oRest:SetResponse( ::cData ) 
        Endif

    Endif

    FreeObj(jPath)
    
Return .T.


/*/{Protheus.doc} acClosingCalc:New()
    Metodo responsavel por acionar o startJob do processamento do recalculo
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getD3WRepair() class acLogController
    Local cId                   as character
    Local oDictionaryValidator  as Object
    Local jPath                 as Object
    Local page                  as Numeric
    Local pageSize              as Numeric
    Local cData                 as character
    Local oResponse             as Object
    Local oStatus               as object
    Local oRet                  as Object

    oStatus := JsonObject():New()

    oDictionaryValidator := _Super:GetDictionaryValid()
    oRest:setKeyHeaderResponse("Content-Type", "application/json")


    jPath   := JsonObject():New()
    jPath   := oRest:getPathParamsRequest()
    cId     := jPath[ 'id' ]   

    if !oDictionaryValidator['bIsValid']
        oRest:setStatusCode(oDictionaryValidator['nErrorNumber'])
        oRest:setResponse(oDictionaryValidator['cErrorMsg'])
    else
        oResponse := JsonObject():New()
        oLogService := ac.Log.Service.acLogService():new()
        if Empty(cId)
                ::jParams["message"] := STR0005
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(400)
                oRest:SetResponse( ::cData ) 
        else
            oRet := oLogService:getD3WRepair(cId, page, pageSize)
            if (Valtype(oRet['idRepair']) == 'C')
                cData := oRet:toJson()
                oRest:setResponse( cData )   
            else
                ::jParams["message"] := STR0008
                ::cData := ::jParams:toJson()
                oRest:setStatusCode(400)
                oRest:SetResponse( ::cData )  
            endif
         
        endif

    Endif
return .t.


