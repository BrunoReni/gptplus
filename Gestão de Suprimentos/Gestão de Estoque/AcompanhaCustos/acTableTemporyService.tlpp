#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "actabletemporyservice.ch"

namespace ac.TableTempory.Service
using namespace ac.acDivergence.Repository
using namespace ac.Results.Analysis.Repository
using namespace ac.TableTempory.Repository

CLASS acTableTemporyService

	Public method New()
	public method dropTableTemp()

EndClass

/*/{Protheus.doc} acTableTemporyService:New()
    Metodo responsavel por acTableTemporyService
    @type  Metodo
    @author samuel.macedo
    @since  Março 12, 2021
    @version 12.1.27
/*/
Method new() CLASS acTableTemporyService

Return Nil

/*/{Protheus.doc} 
    Metodo responsavel por excluir a tabela temporaria
    @type  Metodo
    @author samuel.macedo
    @since  Março 12, 2021
    @version 12.1.27
/*/

method dropTableTemp(id, type) class acTableTemporyService

    Local oRepository  as Object
    Local oRepository2 as Object
    Local cTable       as character
	Local cReturn      as character

	oRepository := ac.TableTempory.Repository.acTableTemporyRepository():new()

    If type == 'A'
        oRepository2 := ac.Results.Analysis.Repository.acAnalysisResultsRepository():new()
    ElseIf type == 'D'
        oRepository2 := ac.acDivergence.repository.acDivergenceRepository():new()
    EndIf

    cTable := oRepository2:getTableIdName(id)

	If oRepository:doesTableIdExist(cTable) 
		DbUseArea(.T.,"TOPCONN",cTable,cTable,.T.)
		If !oRepository:deletedTableId(cTable) 
			cReturn := STR0001 //'Delete table failed.'
		EndIf
	Else 
		cReturn:= STR0002 //'Temporary table not found.'
	Endif

Return cReturn


