#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acclosingcontroller.ch"


namespace ac.Log.Service
using namespace ac.Log.Repository
using namespace totvs.protheus.backoffice.est.closing.profile

Class acLogService
    public  Method New()
    public  Method getUnavailableBranches()
    public  Method ValidInfo()
    public  Method validD3y()
    public  Method GetCanSave()
    public  Method analyzesDataForRecording()
    private Method areBranchesValid()
    public  Method getD3YItem()
    public  Method getFullD3YItem()
    private Method compareBranches()
    public  Method getD3XItem()
    public  method getAsyncJobName()
    public  method setErrorLog()
    public  method deleteFromD3W()
    public  method getErrorSQLFromD3W()
    public  method updateParameterDblqmovWithMvulmes()
    public  method getD3X()
    public  method getD3WRepair()
    public  method idChildIsValid()
    public  method endCancelledReopening()
    public  method convertBranchesToD3YBranch()
    public  method checkSetupStatus()
    public  method decodeUTF()
    public  method getDetailThreadMessage()
    public  method threadCheckup()

    public data cMessage as character

EndClass

/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method new() class acLogService   
    ::cMessage := ''
return Self

/*/{Protheus.doc} acLogService:getUnavailableBranches()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getUnavailableBranches(oReceivedBranches, cReceivedId) class acLogService

    Local oRepository           as Object
    Local oResponse             as Object
    Local oSelectedBranches     as Object

    oResponse := JsonObject():New()

    If ::areBranchesValid(oReceivedBranches)
        oRepository             := ac.Log.Repository.acLogRepository():new()
        oSelectedBranches    := JsonObject():New()
        oSelectedBranches    := oRepository:GetStatusD3Y()  

        oResponse := ::compareBranches(oReceivedBranches, cReceivedId, oSelectedBranches)
    Else

        oResponse["message"] := STR0015 //Filiais devem conter as seguintes propriedades: Code, Description, Cgc.
    Endif

    FreeObj(oSelectedBranches)

return oResponse

/*/{Protheus.doc} acLogService:getD3YItem()
    Metodo responsavel por retornar um item de fechamento especifico por id
    @type  Metodo
    @since  Novembro 10, 2020
    @author pedro.missaglia
    @version 12.1.27
/*/

Method getD3YItem(cReceivedId) class acLogService

    Local oRepository           as Object
    Local oResponse             as Object

    oResponse := JsonObject():New()
    oRepository             := ac.Log.Repository.acLogRepository():new()
    oResponse := oRepository:getQueryById(cReceivedId)

    if oResponse:GetJsonText("idParent") == "null" .or. empty(oResponse:GetJsonText("idParent"))
        oResponse := JsonObject():New()
        oResponse["message"] := STR0008 //O ID especificado não foi encontrado.
    endif 
    FreeObj(oRepository)

return oResponse


/*/{Protheus.doc} acLogService:getD3YItem()
    Metodo responsavel por retornar um item de fechamento especifico por id
    @type  Metodo
    @since  Novembro 10, 2020
    @author pedro.missaglia
    @version 12.1.27
/*/
Method getFullD3YItem(cReceivedId) class acLogService

    Local oProfileClosing       as Object
    Local oResponse             as Object
    Local nX                    as Numeric

    oResponse       := JsonObject():New()
    oProfileClosing := totvs.protheus.backoffice.est.closing.profile.ClosingProfile():New(cReceivedId)
    oResponse := oProfileClosing:ToJson()

    If Valtype(oResponse) == "J" .AND. oResponse["branches"] != NIL
        For nX := 1 to Len(oResponse["branches"]) 
            oResponse["branches"][nX]["Code"]        := DecodeUtf8(oResponse["branches"][nX]["Code"])
            oResponse["branches"][nX]["Description"] := DecodeUtf8(oResponse["branches"][nX]["Description"])
        Next nX
    EndIf

Return oResponse

/*/{Protheus.doc} acLogService:compareBranches()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method compareBranches(oReceivedBranches, cReceivedId, oUnavailableBranches) class acLogService

    Local aBranches     := {}
    Local nX            := 0
    Local nZ            := 0
    Local cAuxBranch    := ''

    For nX := 1 to Len(oReceivedBranches)
        cAuxBranch := oReceivedBranches[nX]:GetJsonText('Code')
        For nZ := 1 to len(oUnavailableBranches["branches"])
            if cAuxBranch == oUnavailableBranches["branches"][nZ]:GetJsonText("Code") .and. Alltrim(cReceivedId) <> Alltrim(oUnavailableBranches["branches"][nZ]:GetJsonText("IdExec"))
                Aadd(aBranches,oUnavailableBranches["branches"][nZ]) 
            endif
        Next nZ
    Next 

    oUnavailableBranches["branches"] := aBranches
    oUnavailableBranches["quantity"] := len(oUnavailableBranches["branches"])

    FreeObj(oReceivedBranches)

return oUnavailableBranches

/*/{Protheus.doc} acLogService:areBranchesValid()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method areBranchesValid(oBranches) class acLogService

    Local nX            as Numeric
    Local lRet          as Logical

    lRet          := .T.

    For nX := 1 to len(oBranches) 
        if empty(oBranches[nX]['Code']) .or. empty(oBranches[nX]['Description']) .or. empty(oBranches[nX]['Cgc'])
            lRet := .F.
        endif
    Next nX

return lRet

/*/{Protheus.doc} validD3y
    Metodo responsavel por validar parametros
    @type  Metodo
    @author Denise Nogueira 
    @since  Janeiro 14,2021
    @version 12.1.27
/*/
method validD3y(cIdParent, cPosition, cIdChild) class acLogService

    local lRet := .T.

    if (empty(cIdParent) .or. cIdParent == 'null') .OR. (empty(cPosition) .or. cPosition == 'null') .OR. (empty(cIdChild) .or. cIdChild == 'null')
        lRet := .F.    
    endif

return lRet




/*/{Protheus.doc} ValidInfo
    Metodo responsavel por validar informações direcionadas para post
    @type  Metodo
    @author Denise Nogueira 
    @since  Janeiro 14,2021
    @version 12.1.27
/*/

Method ValidInfo(jBody) class acLogService
   Local lType       as Logical
   Local lStruct     as Logical
   Local lParams     as Logical
   Local lBranches   as Logical
   Local lRet        as Logical


    lRet := .T.

    lType       := Iif(jBody:GetJsonText("type") == 'null'.or. Empty(jBody:GetJsonText("type")),.F.,.T.)
    lStruct     := Iif(jBody:GetJsonText("struct") == 'null'.or. Empty(jBody:GetJsonText("struct")),.F.,.T.)
    lParams     := Iif(jBody:GetJsonText("params") == 'null'.or. Empty(jBody:GetJsonText("params")),.F.,.T.)
    lBranches   := Iif(jBody:GetJsonText("branches") == 'null'.or. Empty(jBody:GetJsonText("branches")),.F.,.T.)

    If !lType .Or. !lStruct .Or. !lParams .Or. !lBranches
        lRet := .F.
    EndIF

Return lRet

/*/{Protheus.doc} GetCanSave
    Metodo responsavel por verificar se registro existe e deixar posicionado.
    @type  Metodo
    @author Denise Nogueira 
    @since  Janeiro 14,2021
    @version 12.1.27
/*/

Method GetCanSave(cIdParent, lReopening ,cIdChild) Class acLogService
    Local lRet := .F.
    Default  lReopening := .F.
    D3Y->(DBSetOrder(1))
    If lReopening
        lRet := D3Y->(DBSeek(xFilial("D3Y")+padR(cIdParent, TAMSX3("D3Y_IDEXEC")[1])+cIdChild))
    Else
        lRet := D3Y->(DBSeek(xFilial("D3Y")+padR(cIdParent, TAMSX3("D3Y_IDEXEC")[1])))
    EndIF
Return lRet



/*/{Protheus.doc} analyzesDataForRecording
    Metodo responsavel por verificar se registro existe e deixar posicionado.
    @type  Metodo
    @author Denise Nogueira 
    @since  Janeiro 14,2021
    @version 12.1.27
/*/

Method analyzesDataForRecording(cIdParent, cPosition, cFinish, cError, cStruct, cType, cParams, cIdChild, jBranches, dDataFech , lRecordD3y, jBranchesCancel) Class acLogService
    Local dD3yDATAFN    as date
    Local dD3yDTFECH    as date 
    Local cD3yHORAFN    as Character
    Local oRepository   as Object
    Local oError        as Object
    Local lRet          as Logical
    Local oJourneyLog   as Object
    Default dDataFech := CtoD("  /  /    ")
    lRet := .T.
    dD3yDATAFN := CtoD("  /  /    ")
    dD3yDTFECH := CtoD("  /  /    ")
    cD3yHORAFN := " "
    oError:= ErrorBlock({|e| ::cMessage := STR0012, lRet := .F.}) // "Erro no Processo de gravação "

    oJourneyLog := acJourneyLog():New()

    Begin Sequence
        oRepository := ac.Log.Repository.acLogRepository():new()
        If lRecordD3y
            If Upper(Substr(cPosition, 0, 2)) ==  'RE' .and. Alltrim(cFinish) == 'C'
                lRet := ::endCancelledReopening(cIdParent)
            Else 
                If cFinish == 'FN' .or. cFinish == 'C'
                    dD3yDATAFN := MsDate()
                    cD3yHORAFN := SubStr(Time(),1,TamSx3("D3X_HORA")[1])
                elseif cFinish == 'P' .and. (!(dDataFech == "null") .and. !Empty(dDataFech))
                    dD3yDTFECH := CtoD(dDataFech)
                EndIf
                If !Empty(jBranchesCancel)
                    ::updateParameterDblqmovWithMvulmes(jBranchesCancel)
                EndIf
                oJourneyLog:UpdateD3y(cIdParent, cPosition, cFinish, cError, cStruct, cType, cParams, cIdChild, jBranches,dDataFech, dD3yDATAFN, cD3yHORAFN, dD3yDTFECH ) 
            Endif          
        else
            oJourneyLog:InsertD3y(cIdParent, cPosition, cFinish, cError, cStruct, cType, cParams, cIdChild, jBranches,dDataFech)
        EndIf
    End Sequence
    ErrorBlock(oError) 

Return lRet

/*/{Protheus.doc} updateParameterDblqmovWithMvulmes
    Metodo responsavel por atualizar MV_DBLQMOV quando for canelamento
    @type  Metodo
    @author Felipe / Denise 
    @since  Julho 12,2021
    @version 12.1.27
/*/
Method updateParameterDblqmovWithMvulmes(jBranchesCancel) class acLogService
    Local nX        :=  0
    Local lCMDBLQV  := SuperGetMv("MV_CMDBLQV",.F.,.F.) ==  .T.
    Local cFilAux   := cFilAnt

    If Len(jBranchesCancel) > 0
        For nX := 1 To len(jBranchesCancel)
            cFilAnt := jBranchesCancel[nx]['Code']
            If lCMDBLQV 
                PutMV("MV_DBLQMOV",GetMv("MV_ULMES"))
            ENDIf 
        next nX
        cFilAnt := cFilAux
    EndIf
Return

/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getD3XItem(cId, cProccess, cIdProccess, cBranch,lRepair) class acLogService    

Local oLogRepository    := ac.Log.Repository.acLogRepository():new()
Local oJourney          := acJourneyLog():New()	
Local oStatus           := Nil
Local lRet              := .F.       
Local oParams           := JsonObject():New()
Local nX                := 0

oStatus := oLogRepository:GetStatusD3X(cId, cProccess, cIdProccess, cBranch)
//if !lRepair
    ::checkSetupStatus(cId, cIdProccess, cProccess, cBranch, oJourney, oLogRepository, @oStatus, @oParams)
//EndIF

If !empty(oStatus["status"])
    oParams["status"]         := alltrim(oStatus["status"])
    oParams["idProccess"]     := alltrim(oStatus["idProccess"])
    oParams["info"]           := alltrim(oStatus["info"])
    oParams["infoDetail"]     := alltrim(oStatus["infoDetail"])
    oParams["idThread"]       := alltrim(oStatus["idThread"])
    oParams["hour"]           := alltrim(oStatus["hour"])
    oParams["date"]           := alltrim(oStatus["date"])
    
    If oJourney:processHasStarted(cId, cIdProccess, cProccess)
        lRet :=  oJourney:lockTable()
        If lRet .AND. Alltrim(D3W->D3W_STATUS) == 'FINISHED'
            while nX <= 3 .And. oParams["status"] != '8' .AND. oParams["status"] != 'ER' 
                sleep(3000)
                oStatus := oLogRepository:GetStatusD3X(cId, cProccess, cIdProccess, cBranch)
                oParams["status"]         := alltrim(oStatus["status"])
                oParams["idProccess"]     := alltrim(oStatus["idProccess"])
                oParams["info"]           := alltrim(oStatus["info"])
                oParams["infoDetail"]     := alltrim(oStatus["infoDetail"])
                oParams["idThread"]       := alltrim(oStatus["idThread"])
                nX++
            ENDDO
        Endif

        If lRet 
            oJourney:unlockTable()
        Endif
    Else 
        ::threadCheckup(Alltrim(oParams["status"]), oStatus, cId, cProccess, cIdProccess)
    Endif

    If (oParams["status"] != '8' .and. lRet)
        If (oParams["status"] != 'ER')
            ::setErrorLog(cId, cIdProccess, UPPER(cProccess), oStatus["idMov"], oStatus["idThread"], oStatus["branch"], STOD(oStatus["proccessDate"]))
        Endif
    Endif
    oParams["branch"] := alltrim(oStatus["currentBranch"])
    If (oParams["status"] == 'ER')
        oParams["errorStep"] := alltrim(oStatus["errorStep"])
    Endif
Endif

FreeObj(oLogRepository)
FreeObj(oStatus)

return oParams

/*/{Protheus.doc} acLogService:checkSetupStatus()
    @type  Metodo
    @since  Julho 21, 2022
    @version 12.1.33
/*/

Method checkSetupStatus(cId, cIdProccess, cProccess, cBranch, oJourney, oLogRepository, oStatus, oParams) class acLogService

If oJourney:processHasStarted(cId, cIdProccess, cProccess)
    If AllTrim(D3W->D3W_STATUS) == "SETUP" .And. oJourney:lockTable()
        If (AllTrim(oStatus["status"]) != "ER")
            ::setErrorLog(cId, cIdProccess, UPPER(cProccess), " ", " ", cBranch, STOD(" "))
            oParams["status"]         := alltrim("ER")
            oParams["idProccess"]     := alltrim(cIdProccess)
            oParams["info"]           := alltrim(STR0016)
            oParams["infoDetail"]     := alltrim(STR0017)
            oParams["idThread"]       := alltrim("")
            oParams["branch"]         := alltrim("")
            oParams["errorStep"]      := alltrim("")
        EndIf
        oJourney:unlockTable()
    EndIf
EndIf

Return 

/*/{Protheus.doc} acLogService:threadCheckup()
    @type  Metodo
    @since  Julho 21, 2022
    @version 12.1.33
/*/

Method threadCheckup(cStatus, oStatus, cId, cProccess, cIdProccess) class acLogService

Local nTimeDif              := 0
Local lSameDate             := .F.    
Local cGlbValue             := ''
Local cGlbName              := cIdProccess
Local aClasses              := {}
Local lVClasses             := .F.
Local lVJourney             := FindFunction("ACVERVLD") .AND. Valtype(ACVERVLD()) == 'N'
Local nX                    := 0

Local oRepository           := ac.Log.Repository.acLogRepository():new()
Local oProfile              := totvs.protheus.backoffice.est.closing.profile.ClosingProfile():New(cId)
Local oAux                  := JsonObject():New()
Local oBranchAux            := Nil
Local oParamAux             := Nil
Local aParansfil            := {}

Local oBranch               := Nil
//MATA330
Local oCalcService          := Nil
//MATA331
Local oContabService        := Nil
//MATA280
Local oStockClosingService  := Nil
//MATA350
Local oCalcBalanceService   := Nil

Private a330ParamZX         := {}
Private a280ParamZX         := {}

//Fontes respectivos do MATA330
AADD( aClasses, 'ac.acCalc.Service.acCalcService' )
AADD( aClasses, 'ac.acCalc.Repository.acCalcRep' )
//Fontes respectivos do MATA331
AADD( aClasses, 'ac.acContab.Service.acContabServ' )
AADD( aClasses, 'ac.acContab.Repository.acContabRep' )
//Fontes respectivos do MATA350
AADD( aClasses, 'ac.acBalanceClosing.Service.acBalanceClosing' )
AADD( aClasses, 'ac.acBalanceClosing.Repository.acBalanceClosing' )
//Fontes respectivos do MATA280
AADD( aClasses, 'ac.acStockClosing.Repository.acStockClosingRep' )
AADD( aClasses, 'ac.acStockClosing.Service.acStockClosingServ' )

//Verificacao de versionamento dos fontes para garantir comportamento correto
For nX := 1 to Len(aClasses)

    lVClasses := ASCAN(&(aClasses[nX] + '():TGetMethods()'), "VERSION") > 0

    If !lVClasses 
        Exit
    Endif

Next nX

If lVClasses .and. lVJourney

    If Alltrim(oStatus["status"]) == '0'
        lSameDate := StoD(oStatus["date"]) == MsDate()

        If lSameDate
            nTimeDif := SubHoras(SubStr(Time(),1,TamSx3("D3X_HORA")[1]), oStatus["hour"]) 
        Endif 

        If !lSameDate .OR. nTimeDif > 0.01
            If LockByName(Alltrim(Upper(cProccess))+ "_" +  cIdProccess, .F. , .F.)
                UnLockByName(Alltrim(Upper(cProccess))+ "_" +  cIdProccess, .F., .F.)
                cGlbValue := GetGlbValue(cGlbName)

                //Consulta na D3X para verificar se ja houve tentativa de reprocessamento
                oAux:FromJson(oRepository:GetD3X(cIdProccess, 1, 10)) 

                //Nao existe tentativa de reprocessamento previa
                If Trim(cGlbValue) == "" .AND. Valtype(oAux["items"]) == 'A' .AND. Len(oAux["items"]) == 1

                    //Consulta na D3Y para receber parametros de configuracao para reprocessamento
                    cGlbValue := 'PROCESSING'
                    PutGlbValue( cGlbName, cGlbValue )

                    oBranch := ac.branchesList.Serv.acBranchesListServ():new()

                    If cProccess == 'MATA330'
                        
                        oCalcService := ac.acCalc.Service.acCalcService():new()
                        
                        //Configuracao de filiais para o reprocessamento
                        oBranchAux := JsonObject():New()
                        oBranchAux["branches"] := oProfile:oBranches
                        aParansfil  := oBranch:preparParamsfil(oBranchAux, .F.)

                        //Configuracao de perguntes para o reprocessamento
                        oParamAux := JsonObject():New()
                        oParamAux["recalculation"] := oProfile:oSx1["recalculation"]["mta330"]
                        a330ParamZX:= oCalcService:preparParamsPerg(oParamAux, 'MATA330')

                        oCalcService:eventRecalc(a330ParamZX[21],aParansfil,a330ParamZX, cId, cIdProccess, cEmpAnt, cFilAnt, .T.)

                    Elseif cProccess == 'MATA331'
                        
                        oContabService := ac.acContab.Service.acContabServ():new()
                        oCalcService := ac.acCalc.Service.acCalcService():new()

                        //Configuracao de filiais para o reprocessamento
                        oBranchAux := JsonObject():New()
                        oBranchAux["branches"] := oProfile:oBranches
                        aParansfil  := oBranch:preparParamsfil(oBranchAux, .F.)

                        //Configuracao de perguntes para o reprocessamento
                        oParamAux := JsonObject():New()
                        oParamAux["contabilization"] := oProfile:oSx1["contabilization"]["mta331"]
                        a330ParamZX:= oCalcService:preparParamsPerg(oParamAux, 'MATA331')

                        oContabService:eventContab(aParansfil, a330ParamZX, cEmpAnt, cFilAnt, cId, cIdProccess, .T.)

                    Elseif cProccess == 'MATA280'
                        
                        oStockClosingService  := ac.acStockClosing.Service.acStockClosingServ():new()
                        oCalcService          := ac.acCalc.Service.acCalcService():new() 
        
                        //Configuracao de filiais para o reprocessamento
                        oBranchAux := JsonObject():New()
                        oBranchAux["branches"] := oProfile:oBranches
                        aParansfil  := oBranch:preparParamsfil(oBranchAux, .F.)

                        //Configuracao de perguntes para o reprocessamento
                        oParamAux := JsonObject():New()
                        oParamAux["closing"] := oProfile:oSx1["closing"]["mta280"]

                        a280ParamZX := oStockClosingService:preparParamsPerg(oParamAux)
                        
                        oStockClosingService:eventStockClosing(oProfile:dClosingDate, aParansfil, a280ParamZX, cEmpAnt, cFilAnt, cId, cIdProccess, .T.)
                    Elseif cProccess == 'MATA350'
                        
                        oCalcBalanceService   := ac.acBalanceClosing.Service.acBalanceClosing():new()

                        //Configuracao de filiais para o reprocessamento
                        oBranchAux := JsonObject():New()
                        oBranchAux["branches"] := oProfile:oBranches
                        aParansfil  := oBranch:preparParamsfil(oBranchAux, .F.)

                        oCalcBalanceService:eventViradaDeSaldo(aParansfil, cId, cIdProccess, cEmpAnt, cFilAnt, .T.)

                    Endif
                Else 
                    //Inserir log de erro ao tentar subir a thread para o processamento
                    ::setErrorLog(  cId,cIdProccess, UPPER(cProccess), oStatus["idMov"], oStatus["idThread"], ;
                                    oStatus["branch"], STOD(oStatus["proccessDate"]), ;
                                    STR0018, ::getDetailThreadMessage(oStatus) )
                    ClearGlbValue( cGlbName )
                Endif
            Endif
        Endif
    Endif
Endif

Return 

/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getAsyncJobName(cRoutine) class acLogService   

Local cAsyncJob := ''

If cRoutine == 'MATA330'
    cAsyncJob := 'INIPROC330'
Elseif cRoutine == 'MATA331'
    cAsyncJob := 'INIPROC331'
Elseif cRoutine == 'MATA350'
    cAsyncJob := 'INIPROC350'
Elseif cRoutine == 'MATA280'
    cAsyncJob := 'INIPROC280'
Elseif cRoutine == 'EST282'
    cAsyncJob := 'INIPROC282'
Endif

return cAsyncJob


/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method setErrorLog(cId, cIdProccess, cProccess, cIdMov, cIdThread, cBranch, cProccessDate, cMessage, cDet) class acLogService   

Local oJourney      :=  acJourneyLog():New()

Default cMessage    := STR0016 //Interrupção abrupta do processamento.
Default cDet        := STR0017 //Conexão entre TOTVS SmartClient e TOTVS Application Server interrompida. Contate o administrador do sistema. Erro de comunicação: Erro de sincronismo.

oJourney:envValid(.T.)
oJourney:cIdParent  := cId 
oJourney:cIdChild   := cIdProccess 
oJourney:cProcess   := cProccess
oJourney:cIdD3X     := cIdMov
oJourney:cThreadID  := cIdThread
oJourney:LogProAtu('ERRO', cMessage, cDet, cBranch, 'ER', cProccessDate, cBranch, .T.)

FreeObj(oJourney)

return

/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method deleteFromD3W(cId) class acLogService   

Local oJourney := acJourneyLog():New()

return oJourney:deleteTable(cId)

/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getErrorSQLFromD3W(cId) class acLogService   

return TCSQLError()


/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method getD3X(cId, page, pageSize) class acLogService    

Local oLogRepository := ac.Log.Repository.acLogRepository():new()
Local oStatus       := JsonObject():New()

oStatus := oLogRepository:GetD3X(cId, page, pageSize)

FreeObj(oLogRepository)

return oStatus

/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method idChildIsValid(cId) class acLogService    

Local oLogRepository := ac.Log.Repository.acLogRepository():new()
Local lValid   := .F.

lValid := oLogRepository:getIdChild(cId)

FreeObj(oLogRepository)

return lValid


/*/{Protheus.doc} acLogService:New()
    @type  Metodo
    @since  Novembro 10, 2020
    @version 12.1.27
/*/

Method endCancelledReopening(cId) class acLogService  

Local oLogRepository := ac.Log.Repository.acLogRepository():new()
Local oJourney := acJourneyLog():New()
Local oResponse := JsonObject():New()
Local cBranches := ''
Local isParcial := .F.
Local isSB9     := .F.
Local lRet := .F.

oResponse   := oLogRepository:getQueryById(cId)
isParcial   := oLogRepository:countD3YFromId(cId) > 1
IsSB9       := oLogRepository:isD3YSB9(cId)
cBranches   := ::convertBranchesToD3YBranch(oResponse["branches"])

BEGIN TRANSACTION
    If isSB9 
        lRet := oLogRepository:deleteLatestD3YFromId(cId)    
    Else 
        If isParcial
            lRet := oLogRepository:deleteLatestD3YFromId(cId)
            If lRet 
                lRet := oJourney:PatchD3Y(cId, , , , , , , , cBranches, , , , )
            Endif    
        Else 
            lRet := oJourney:PatchD3Y(cId, 'T', 'FN', , , , , , , , , , )
        Endif
    Endif

    If !lRet
        DisarmTransaction()
    EndIf 
END TRANSACTION

FreeObj(oLogRepository)

return lRet

/*/{Protheus.doc} converListBranchesToString
    Metodo responsavel por transformar a lista de filiais em uma string para querys
    @type  Metodo
    @author Squad Entradas
    @Abril 09,2021
    @version 12.1.27
/*/
Method convertBranchesToD3YBranch(jBranches) Class acLogService
    Local nX        := 0
    Local cBranches := "["

    For nX := 1 to Len(jBranches)
        cBranches += jBranches[nX]:toJson() + Iif(nX == Len(jBranches),"",", ")
    Next nX

    cBranches += "]"

return cBranches


/*/{Protheus.doc} converListBranchesToString
    Metodo responsavel por transformar a lista de filiais em uma string para querys
    @type  Metodo
    @author Squad Entradas
    @Abril 09,2021
    @version 12.1.27
/*/
Method getD3WRepair(cId) Class acLogService

    Local oLogRepository := ac.Log.Repository.acLogRepository():new()
    Local oD3W := JsonObject():New()
    Local oRet := JsonObject():New()

    oD3W := oLogRepository:getD3W(cId, 'REPAIR')

    If oD3W['founded']
        oRet['idRepair'] := Alltrim(oD3W['idRepair'])
    Else 
        oRet['message'] := STR0008
    Endif

return oRet

/*/{Protheus.doc} encodeJsonUTF8
    Metodo responsavel por realizar o EndCode para as variaveis do tipo json
    @type  Metodo
    @autor  Adriano Vieira
    @since  Dezembro 26,2022
    @version 12.1.33
/*/
Method decodeUTF(jChar) Class acLogService
   Local nX   := 0
   Local cAux := ''

    If ValType(jChar) ==  "C"
        cAux := DecodeUtf8(jChar)
        If !EMPTY( cAux )
            jChar := cAux
        Endif    
    ElseIf ValType(jChar) ==  "A"
        For nX := 1 to Len(jChar) 
            cAux := DecodeUtf8(jChar[nX]["Code"] )
            If !EMPTY( cAux ) 
                jChar[nX]["Code"]        := cAux
            Endif
            cAux := DecodeUtf8(jChar[nX]["Description"] )
            If !EMPTY( cAux ) 
                jChar[nX]["Description"]        := cAux
            Endif
        Next nX
    EndIf

Return jChar

/*/{Protheus.doc} encodeJsonUTF8
    Metodo responsavel por realizar o EndCode para as variaveis do tipo json
    @type  Metodo
    @autor  pedro.missaglia
    @since  Dezembro 26,2022
    @version 12.1.33
/*/
Method getDetailThreadMessage(oObj) Class acLogService

Local cRet := ""

cRet := STR0019 + oObj["idThread"] + "."
cRet += STR0020 + DtoC(sToD(oObj["date"])) + STR0021 + oObj["hour"] + "."

Return cRet
