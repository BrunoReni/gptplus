#include "tlpp-core.th"
#include "tlpp-rest.th"

namespace ac.config.profile.repository

class acProfRepository 

    data oObj               as Object 
    data oJsonProfileConfig as Object
    data aPergunt           as Array
    data cContent           as Character
    

    public method new()
    public method getAcSX1()
    public method getHaveConfigProfile()
    public method postConfigProfile()
    public method putConfigProfile()
    public method insertNewOptionsSX1()
    public method fixAndUpdateParametersProperty()

endclass

/*/{Protheus.doc} acProfRepository:new()
    Metodo responsavel para instanciar a classe
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020>
    @version 12.1.27
/*/

method New () class acProfRepository
    ::oObj      := FWSX1Util():New()
    ::cContent  := ''
    ::aPergunt  := {}

return Self

/*/{Protheus.doc} acProfRepository:getHaveConfigProfile()
    Metodo responsavel consultar perfil existente no banco
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method getHaveConfigProfile(cId, cCompany, cBranch) class acProfRepository

If FindProfDef(cId, 'MATA038', 'CONFIG', 'CFG_PRO',,,cCompany,cBranch)
    ::cContent := RetProfDef(cId, 'MATA038', 'CONFIG', 'CFG_PRO',' ',.F.,cCompany, cBranch)
Endif

Return ::cContent

/*/{Protheus.doc} acProfRepository:postConfigProfile()
    Metodo responsavel cadastrar um log de usuario caso nao haja um previo cadastrado
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method postConfigProfile(cId, cBody,cCompany, cBranch) class acProfRepository

Local lWrite as logical

lWrite := WriteNewProf(cId, 'MATA038', 'CONFIG', 'CFG_PRO',cBody, ,cCompany, cBranch)

Return lWrite

/*/{Protheus.doc} acProfRepository:putLogUser()
    Metodo responsavel alterar/atualizar os dados no perfil
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
     @version 12.1.27
/*/

method putConfigProfile(cId, cBody, cCompany, cBranch) class acProfRepository

Local lWrite as logical

lWrite := WriteProfDef(cId, 'MATA038', 'CONFIG', 'CFG_PRO', cId, 'MATA038', 'CONFIG', 'CFG_PRO', cBody, ,cCompany, cBranch )

Return lWrite

/*/{Protheus.doc} acProfRepository:getAcSX1()
    Metodo responsavel por obter os dados do SX1
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method getAcSX1(cPergunt, cTitle,aRet) class  acProfRepository
Local oJsonProfileConfig  := JsonObject():New()  
Local aJSx1       := {} as  array
Local aJSx2       := {} as  array
Local nX          := 0  as  numeric 
Default aRet      := {}   

oConfigProfileService := ac.config.profile.service.acProfService():new()
::oObj:AddGroup(cPergunt)
::oObj:SearchGroup()
::aPergunt := ::oObj:GetGroup(cPergunt)
if len(::aPergunt) > 0 .And. !oConfigProfileService:lNewperg 
    For nX := 1 To len(::aPergunt[2])
        aAdd( aJSx1,  JsonObject():New() )
        aJSx1[nX]['parameter'] := lower(AllTrim(::aPergunt[2][nx]:cX1_VAR01)) 
        aJSx1[nX]['value']     := oConfigProfileService:convertsParameterValues(lower(AllTrim(::aPergunt[2][nx]:cX1_VAR01)),::aPergunt[2][nx]:nX1_PRESEL,::aPergunt[1]) 
        aJSx1[nX]['blocked_user'] := .F.
    Next nX
    oJsonProfileConfig[lower(cTitle)] := aJSx1
elseif  oConfigProfileService:lNewperg 
    if cPergunt == 'MTA330'
        aRet := aClone(oConfigProfileService:aRet330)
    elseIf cPergunt == 'MTA280' 
        aRet := aClone(oConfigProfileService:aRet280)
    EndIf
    For nX := 1 To len(aRet)
        aAdd( aJSx2,  JsonObject():New() )
        if aRet[nx][22] .And. aRet[nx][6] <> "C"
            xReval :=  aRet[nx][8] // content
        else
            xReval :=  aRet[nx][5] // presel
        Endif
        aJSx2[nX]['parameter'] := lower(AllTrim(aRet[nx][14])) 
        aJSx2[nX]['value']      := oConfigProfileService:convertsParameterValues(lower(AllTrim(aRet[nx][14])),xReval,cPergunt) 
        aJSx2[nX]['blocked_user'] := aRet[nx][22]
    Next nX
    oJsonProfileConfig[lower(cTitle)] := aJSx2
EndIf
return oJsonProfileConfig


/*/{Protheus.doc} acProfRepository:getAcSX1()
    Metodo responsavel por obter os dados do SX1
    @type  Metodo
    @author Andre Maximo
    @since  Outubro 15, 2020
    @version 12.1.27
/*/

method insertNewOptionsSX1(oSX1) class  acProfRepository
    Local nX          := 0  as  numeric 
    for nx := 1 to len(oSX1['recalculation']['mta330'])
        oSX1['recalculation']['mta330'][nx]['blocked_user']:= .F.
    next nx

    for nx := 1 to len(oSX1['contabilization']['mta331'])
            oSX1['contabilization']['mta331'][nx]['blocked_user'] := .F.  
    next nx 

     for nx := 1 to len(oSX1['closing']['mta280'])
        oSX1['closing']['mta280'][nx]['blocked_user']:= .F.
     next nx 

    for nx := 1 to len(oSX1['consumptionProduction']['parameters'])
            oSX1['consumptionProduction']['parameters'][nx]['blocked_user'] := .F. 
    next nx

    for nx := 1 to len(oSX1['recalculationAndAccounting']['parameters'])
            oSX1['recalculationAndAccounting']['parameters'][nx]['blocked_user'] := .F. 
     next nx

return oSX1:toJson()


method fixAndUpdateParametersProperty(oSX1, aRet330, aRet280) class acProfRepository
    Local nx := 0 as numeric
    Local oConfigProfileService := ac.config.profile.service.acProfService():new() as  object
    
    default aRet330 := {}
    default aRet280 := {}
    default oSX1    := JsonObject():new() 
    if len(aRet280) >0 .and. len(aRet330) >0 
        for nx := 1 to len(oSX1['recalculation']['mta330'])
            oSX1['recalculation']['mta330'][nx]['blocked_user']:= aRet330[nx][22]
            If aRet330[nx][22]
                If aRet330[nx][6] == "C"
                    oSX1['recalculation']['mta330'][nx]['value'] := oConfigProfileService:convertsParameterValues(lower(AllTrim(aRet330[nx][14])),aRet330[nx][5],"MTA330") 
                Else 
                    oSX1['recalculation']['mta330'][nx]['value'] := oConfigProfileService:convertsParameterValues(lower(AllTrim(aRet330[nx][14])),aRet330[nx][8],"MTA330") 
                Endif
            endIf
        next nx
    //---------------------------------------------------------------------------//
        for nx := 1 to len(oSX1['contabilization']['mta331'])
            oSX1['contabilization']['mta331'][nx]['blocked_user']:= aRet330[nx][22]
            If aRet330[nx][22]
                If aRet330[nx][6] == "C"
                    oSX1['contabilization']['mta331'][nx]['value'] := oConfigProfileService:convertsParameterValues(lower(AllTrim(aRet330[nx][14])),aRet330[nx][5],"MTA330") 
                Else 
                    oSX1['contabilization']['mta331'][nx]['value'] := oConfigProfileService:convertsParameterValues(lower(AllTrim(aRet330[nx][14])),aRet330[nx][8],"MTA330") 
                Endif
                
            endIf
        next nx 
    //---------------------------------------------------------------------------//
        for nx := 1 to len(oSX1['closing']['mta280'])
            oSX1['closing']['mta280'][nx]['blocked_user']:= aRet280[nx][22]
            If aRet280[nx][22]
                If aRet280[nx][6] == "C"
                    oSX1['closing']['mta280'][nx]['value'] := oConfigProfileService:convertsParameterValues(lower(AllTrim(aRet280[nx][14])),aRet280[nx][5],"MTA280") 
                Else 
                    oSX1['closing']['mta280'][nx]['value'] := oConfigProfileService:convertsParameterValues(lower(AllTrim(aRet280[nx][14])),aRet280[nx][8],"MTA280")
                Endif
    
            endIf
        next nx 
    //---------------------------------------------------------------------------//
        for nx := 1 to len(oSX1['consumptionProduction']['parameters'])
            oSX1['consumptionProduction']['parameters'][nx]['blocked_user'] := .F. 
        next nx
    //---------------------------------------------------------------------------//

        for nx := 1 to len(oSX1['recalculationAndAccounting']['parameters'])
            oSX1['recalculationAndAccounting']['parameters'][nx]['blocked_user'] := .F. 
        next nx
    EndIf

    
Return oSX1:tojson()


 