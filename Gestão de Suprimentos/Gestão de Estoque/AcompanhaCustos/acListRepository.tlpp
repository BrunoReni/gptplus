#include "tlpp-core.th"
#INCLUDE "FWMVCDEF.CH"

namespace ac.acList.repository

using namespace ac.branchesList.Repository

CLASS acListRepository FROM FWAdapterBaseV2
  Public DATA fields  AS Object 
  Public Data aFields AS Array
  Public Data aCampos AS Array
  Public Data cQuery  AS Character
  Public data cStateMemoryInQuery AS Character 
  Public method New()
  Public method acConstructFields()
  Public method getQueryD3yXSb9()
  public method getFullFields()
  public method getFieldSettings()
  public method getTheQueryResponse()
  public method getQueryOnlyD3X()
  public method getAllBranchesForClosingList()
EndClass

/*/{Protheus.doc} acListRepository:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acListRepositor
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27
/*/
Method new(cVerbo as Character, lList as Logical) CLASS acListRepository
    Default cVerbo  := 'GET'
    Default lList   := .T.
    _Super:New(cVerbo, lList)
    ::cQuery  := ''
    ::aCampos := {}
    ::aFields := {}
    ::aCampos := ::getFullFields()
    ::aFields := ::getFieldSettings()
    ::cStateMemoryInQuery := TCConfig('GETMEMOINQUERY')
Return Nil


/*/{Protheus.doc} constructFields
  (long_description)
  Metodo responsavel por receber e converter os campos para query
  @author andre.maximo
  @since nov. 04 2020
/*/
Method acConstructFields() Class acListRepository
  Local nX := 0 

  for nX := 1 to Len(::aFields)
		::AddMapFields(::aFields[nX]['field'], ::aFields[nX]['field'] , .T.,.T.,{::aFields[nX]['field'] , ::aFields[nX]['type'], ::aFields[nX]['size'], ::aFields[nX]['decimal']})
	next Nx

Return 


//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Retorna a query usada no serviço
@author andre.maximo
@since nov. 04 2020 
@version 1.0
/*/
//-------------------------------------------------------------------
method getQueryD3yXSb9(finish) Class acListRepository
	Local cquery1:= ''

  cQuery1 +=" SELECT "
  cQuery1 +="       'D3Y' TABELA, "
  cQuery1 +="        D3Y_FILIAL filial  , "
  cQuery1 +="        D3Y_DTFECH dtfech  , "
  cQuery1 +="        D3Y_POSITI positi , "
  cQuery1 +="        D3Y_TYPE   typeReg , "
  cQuery1 +="        D3Y_DATAIN initialDate , "
  cQuery1 +="        D3Y_DATAFN finalDate , "
  cQuery1 +="        D3Y_HORAIN initialHour , "
  cQuery1 +="        D3Y_HORAFN finalHour , "  
  cQuery1 +="        D3Y_STATUS statusD3y, "
  cQuery1 +="        D3Y_IDEXEC idexec , "
  cQuery1 +="        D3Y_IDPROS idpros , "
  cQuery1 +="        D3Y_STRUCT struct , "
  cQuery1 +="        D3Y_PARAMS params , "
  cQuery1 +="        D3Y_BRANCH  branch "
  cQuery1 +="FROM "
  cQuery1 +="        "+ RetSqlName( "D3Y" ) + " D3Y "
  cQuery1 +="WHERE "
  
  
  cQuery1 +=" D3Y_FILIAL "  + ::getAllBranchesForClosingList() + " AND "

  If finish
    cQuery1 +="        D3Y_POSITI = 'T' AND  "
  EndIF

  cQuery1 +="  D_E_L_E_T_ = ' ' "
  cQuery1 +="UNION ALL "
  cQuery1 +="SELECT "
  cQuery1 +="        'SB9' TABELA   , "
  cQuery1 +="         SB9.B9_FILIAL , "
  cQuery1 +="         SB9.B9_DATA   , "
  cQuery1 +="        ' ' D3Y_POSITI , "
  cQuery1 +="        ' ' D3Y_TYPE   , "
  cQuery1 +="         ' ' D3Y_DATAIN , "
  cQuery1 +="        ' ' D3Y_DATAFN , "
  cQuery1 +="        ' ' D3Y_HORAIN , "
  cQuery1 +="        ' ' D3Y_HORAFN , "
  cQuery1 +="        'FN' D3Y_STATUS , "
  cQuery1 +="        ' ' D3Y_IDEXEC , "
  cQuery1 +="        ' ' D3Y_IDPROS , "
  cQuery1 +="        NULL D3Y_STRUCT, "
  cQuery1 +="        NULL D3Y_PARAMS, "
  cQuery1 +="        SB9.B9_FILIAL D3Y_BRANCH  "
  cQuery1 +="FROM "
  cQuery1 +="        "+ RetSqlName( "SB9" ) + " SB9 "
  cQuery1 +="LEFT JOIN "
  cQuery1 +="        "+ RetSqlName( "D3Y" ) + " D3Y1 " 
  cQuery1 +="ON "
  cQuery1 +="        SB9.B9_DATA = D3Y1.D3Y_DTFECH AND "
  cQuery1 += MatiSubStr() + "(D3Y1.D3Y_POSITI,1,2) IN ('M2','M3','M4','M7','M8','M9','O2','O3','O4','O5','O7','O8','O9','M5','M6','O8', 'T ') "
  cQuery1 +="WHERE "
  cQuery1 +="        D3Y1.D3Y_DTFECH IS NULL "
  cQuery1 +=" AND SB9.B9_DATA > '19000101' AND "
  cQuery1 += " SB9.B9_FILIAL " + ::getAllBranchesForClosingList()
  cQuery1 +=" AND     SB9.D_E_L_E_T_        =' ' "
  cQuery1 +=" GROUP BY "
  cQuery1 +="        SB9.B9_FILIAL, "
  cQuery1 +="        SB9.B9_DATA "

  ::cQuery := " SELECT #QueryFields#"
  ::cQuery += " FROM ("+ (cQuery1)+") "
  ::cQuery += " CLOSING "
  ::cQuery += " WHERE #QueryWhere#"

  conout(::cQuery)  

Return ::cQuery


/*/{Protheus.doc} acResultsAnalysisRepository:getFullFields()
    Metodo responsavel por verificar se existe uma tabela com o Id informado
    @type  Metodo
    @author andre.maximo
    @since  Jan 29, 2021
    @version 12.1.27
/*/
Method getFullFields() CLASS acListRepository

Local aTam          := TamSX3("D3Y_FILIAL")
Local aTamDtFech    := TamSX3("D3Y_DTFECH")
Local aTamPosit     := TamSX3("D3Y_POSITI")
Local aTamType      := TamSX3("D3Y_TYPE")
Local aTamDTIN      := TamSX3("D3Y_DATAIN")
Local aTamDtFn      := TamSX3("D3Y_DATAFN")
Local aTamHrIn      := TamSX3("D3Y_HORAIN")
Local aTamHrFn      := TamSX3("D3Y_HORAFN")
Local aTamStatus    := TamSX3("D3Y_STATUS")
Local aTamStrut     := TamSX3("D3Y_STRUCT")
Local aTamParans    := TamSX3("D3Y_PARAMS")
Local aTamBranch    := TamSX3("D3Y_BRANCH")
Local aTamIdExec    := TamSX3("D3Y_IDEXEC")
Local aTamIdPros    := TamSX3("D3Y_IDPROS")

Aadd(::aCampos ,{"TABELA","C",3,0})
Aadd(::aCampos ,{"filial",aTam[3],aTam[1],aTam[2]})
Aadd(::aCampos ,{"dtfech",aTamDtFech[3],aTamDtFech[1],aTamDtFech[2]})
Aadd(::aCampos ,{"positi",aTamPosit[3],aTamPosit[1],aTamPosit[2]})
Aadd(::aCampos ,{"typeReg",aTamType[3],aTamType[1],aTamType[2]})
Aadd(::aCampos ,{"initialDate",aTamDTIN[3],aTamDTIN[1],aTamDTIN[2]})
Aadd(::aCampos ,{"finalDate",aTamDtFn[3],aTamDtFn[1],aTamDtFn[2]})
Aadd(::aCampos ,{"initialHour",aTamHrIn[3],aTamHrIn[1],aTamHrIn[2]})
Aadd(::aCampos ,{"finalHour",aTamHrFn[3],aTamHrFn[1],aTamHrFn[2]})
Aadd(::aCampos ,{"statusD3y",aTamStatus[3],aTamStatus[1],aTamStatus[2]})
Aadd(::aCampos ,{"struct",aTamStrut[3],aTamStrut[1],aTamStrut[2]})
Aadd(::aCampos ,{"params",aTamParans[3],aTamParans[1],aTamParans[2]})
Aadd(::aCampos ,{"branch",aTamBranch[3],aTamBranch[1],aTamBranch[2]})
Aadd(::aCampos ,{"idexec",aTamIdExec[3],aTamIdExec[1],aTamIdExec[2]})
Aadd(::aCampos ,{"idpros",aTamIdPros[3],aTamIdPros[1],aTamIdPros[2]})

Return ::aCampos

/*/{Protheus.doc} acResultsAnalysisRepository:getFieldSettings()
    Metodo responsavel por verificar se existe uma tabela com o Id informado
    @type  Metodo
    @author andre.maximo
    @since  Jan 29, 2021
    @version 12.1.27
/*/
Method getFieldSettings() CLASS acListRepository

Local nX   as numeric 

nX := 0
::aFields:= {}

for nX := 1 To len(::aCampos)
  aAdd( ::aFields,  JsonObject():New() )
  ::aFields[nX]['field']  :=  ::aCampos[nX][1]
  ::aFields[nX]['size']   :=  ::aCampos[nX][3]
  ::aFields[nX]['decimal']:=  ::aCampos[nX][4]
  ::aFields[nX]['type']   :=  ::aCampos[nX][2]
next Nx

Return ::aFields

/*/{Protheus.doc} acResultsAnalysisService
    Metodo responsavel por padronizar os dados que serão utilizados na FWAdapterBaseV2
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27
/*/
Method getTheQueryResponse(page, pagesize, finish, aFilter, lOnlyD3X) Class acListRepository

Local jsonResponse  as object
Local cWhere        as Character

If (::cStateMemoryInQuery == 'OFF')
  TCConfig('SETMEMOINQUERY=ON')
EndIf

cWhere := "TABELA <> ' ' "

::acConstructFields()
::setPage(page)
::setPageSize(pagesize)
If lOnlyD3X
  ::setQuery(::getQueryOnlyD3X(finish))
Else 
  ::setQuery(::getQueryD3yXSb9(finish))
Endif
::SetWhere( cWhere )
::SetOrder( "dtfech DESC, initialDate DESC , initialHour DESC" )
::SetUrlFilter(aFilter)

If ::Execute()
  ::FillGetResponse()
  jsonResponse := ::GetJsonResponse()
EndIf

If (::cStateMemoryInQuery == 'OFF')
  TCConfig('SETMEMOINQUERY=OFF')
EndIf
  
Return jsonResponse

/*/{Protheus.doc} acResultsAnalysisService
    Metodo responsavel por padronizar os dados que serão utilizados na FWAdapterBaseV2
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27
/*/
Method getQueryOnlyD3X(lFinish) Class acListRepository

  Local cQueryAux := ""
  Local cQuery := ""

  cQueryAux +=" SELECT "
  cQueryAux +="       'D3Y' TABELA, "
  cQueryAux +="        D3Y_FILIAL filial  , "
  cQueryAux +="        D3Y_DTFECH dtfech  , "
  cQueryAux +="        D3Y_POSITI positi , "
  cQueryAux +="        D3Y_TYPE   typeReg , "
  cQueryAux +="        D3Y_DATAIN initialDate , "
  cQueryAux +="        D3Y_DATAFN finalDate , "
  cQueryAux +="        D3Y_HORAIN initialHour , "
  cQueryAux +="        D3Y_HORAFN finalHour , "  
  cQueryAux +="        D3Y_STATUS statusD3y, "
  cQueryAux +="        D3Y_IDEXEC idexec , "
  cQueryAux +="        D3Y_IDPROS idpros , "
  cQueryAux +="        D3Y_STRUCT struct , "
  cQueryAux +="        D3Y_PARAMS params , "
  cQueryAux +="        D3Y_BRANCH  branch "
  cQueryAux +=" FROM "
  cQueryAux +="        "+ RetSqlName( "D3Y" ) + " D3Y "
  cQueryAux +=" WHERE "

  If lFinish
    cQueryAux +="        D3Y_POSITI = 'T' AND  "
  Else 
    cQueryAux += MatiSubStr() + "(D3Y_POSITI,1,2) IN ('M2','M3','M4','M7','M8','M9','O2','O3','O4','O5','O7','O8','O9','M5','M6','O8', 'T ') AND "
  Endif

  cQueryAux += " D3Y_DTFECH > '19000101' AND "
  cQueryAux += " D3Y_FILIAL " + ::getAllBranchesForClosingList() + " AND "
  cQueryAux += " D_E_L_E_T_ = ' ' "

  cQuery := " SELECT #QueryFields#"
  cQuery += " FROM ("+ (cQueryAux)+") "
  cQuery += " CLOSING "
  cQuery += " WHERE #QueryWhere#"

Return cQuery

/*/{Protheus.doc} acResultsAnalysisService
    Metodo responsavel por padronizar os dados que serão utilizados na FWAdapterBaseV2
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27
/*/

Method getAllBranchesForClosingList()  Class acListRepository

Local cBranches := "IN ("
Local aBranches := {}
Local nX  := 0
Local oBranchRep := ac.branchesList.Repository.acBranchesListRep():New()

aBranches := oBranchRep:listAllBranches(.T.)

For nX := 1 to Len(aBranches)
  
  If !(nX == 1)
    cBranches += ", "
  Endif
  cBranches += "'" + aBranches[nX][2] + "'"  

Next nX

cBranches += ")"
  
return cBranches
