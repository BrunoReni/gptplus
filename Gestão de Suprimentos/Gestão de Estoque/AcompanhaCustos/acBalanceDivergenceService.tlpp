#include "tlpp-core.th"
#INCLUDE "FWMVCDEF.CH"

namespace ac.acDivergence.service
using namespace ac.acDivergence.repository

CLASS acDivergenceService
    data JsonResponse as Object
    public method New()
    public method getBalanceToDivergence()
    public method getCount()
    public method dataDivergence()
    public method dropTableTemp()
EndClass


//-------------------------------------------------------------------
/*/{Protheus.doc} new
Instancia a classe
@author samuel.macedo
@since Fev 26 2021
@version 1.0
/*/
//-------------------------------------------------------------------

Method new() CLASS acDivergenceService 
    ::JsonResponse := JsonObject():new()
Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} getBalanceToDivergence
metodo responsavel por montar a query
@author samuel.macedo
@since Fev 26 2021
@version 1.0
/*/
//-------------------------------------------------------------------
Method getBalanceToDivergence(id, page, pageSize, aFilter) Class acDivergenceService

  Local oRepository AS Object 
  Default page := 1
  Default pageSize := 10

  oRepository:= ac.acDivergence.repository.acDivergenceRepository():new('GET',.T.)
  oRepository:setQueryFields()
  oRepository:setPage(page)
  oRepository:setPageSize(pageSize)
  oRepository:setQuery(oRepository:GetQuery(id))
  oRepository:setWhere(oRepository:GetWhere())
  oRepository:setOrder("TRC_FILIAL, TRC_COD")
  oRepository:SetUrlFilter(aFilter)
  
  If oRepository:Execute()
    oRepository:FillGetResponse()
    ::JsonResponse := oRepository:GetJsonResponse()
  EndIf

  oRepository := NIL
     
Return ::JsonResponse

/*/{Protheus.doc} dataDivergence
    Metodo responsavel por receber os dados identificados com divergências
    @type  Metodo
    @author samuel.macedo
    @since  Março 02,2021
    @version 12.1.27
/*/
Method dataDivergence(cId, aLogs, cFil) class acDivergenceService
  Local oRepository          as Object
  Local oTableTempRepository as Object
  Local cTableName          as Character

  oRepository := ac.acDivergence.repository.acDivergenceRepository():new('GET',.T.)
  oTableTempRepository := ac.TableTempory.Repository.acTableTemporyRepository():new()

  cTableName := oRepository:getTableIdName(cId)

  If !oTableTempRepository:doesTableIdExist(cTableName)
    oRepository:createTable(cTableName)
  EndIf  

  cInsertCommand 	:= oRepository:getInsertCommand(cTableName, aLogs, cFil)

  oRepository:insertTable(cInsertCommand)
return .T. 

/*/{Protheus.doc} 
    Metodo responsavel por enviar a quantidade de registros da tabela.
    @type  Metodo
    @author samuel.macedo
    @since  Março 12 2021
    @version 12.1.27
/*/

method GetCount(id) class acDivergenceService

  Local oRepository 	        as Object
	Local oTableTempRepository 	as Object
	Local cQuery 		            as Character
	Local cTableName 		        as Character
	Local cQuantity             := 0
	
	cQuery		:= ''
	oRepository	:= ac.acDivergence.Repository.acDivergenceRepository():new('GET',.T.)
	oTableTempRepository := ac.TableTempory.Repository.acTableTemporyRepository():new()

	cTableName := oRepository:getTableIdName(id)
	
	If oTableTempRepository:doesTableIdExist(cTableName)
		cQuantity	:= oRepository:getCount(cTableName)
	Endif

Return cQuantity
