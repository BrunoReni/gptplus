#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acresultsanalysiscontroller.ch"

namespace ac.Results.Analysis.Controller
using namespace ac.Results.Analysis.Repository


class acResultsAnalysis

    public data cId as Character
    public data cProccess as Character
    public data cReproccess as  Character
    public data page as Character
    public data pageSize as Character
    public data cFilter as Character
    public data cData as Character
    public data jParams as   Object    
    public data jBranches as Object

    public method New()

    @post("api/stock/analysis/v1/resultsanalysis")
    public method PostResultsAnalysis()

    @Get("api/stock/analysis/v1/countresults")
    public method getCountResults()

endclass

/*/{Protheus.doc} acResultsAnalysis:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acList
    @type  Metodo
    @author Andre Maximo
    @since  Dezembro  28, 2020
    @version 12.1.27
/*/
method new() class acResultsAnalysis

    ::cId           := ''
    ::cProccess     := ''
    ::cReproccess   := ''
    ::page          := ''
    ::pageSize      := ''
    ::cFilter       := ''
    ::cData         := ''
    ::jParams       := JsonObject():New()    
    ::jBranches     := JsonObject():New() 
  
return Self

/*/{Protheus.doc} acResultsAnalysis:getResultsAnalysis()
    Metodo responsavel por realizar analise do custo do 
    ultimo fechamento comparado com custo pós recalculo 
    @type  Metodo
    @author Andre Maximo
    @since  Dezembro  28, 2020
    @version 12.1.27
/*/

method PostResultsAnalysis() class acResultsAnalysis

    Local lReproccess as logical
    Local aFilter     as Array
    Local lProc350    as Logical
    Local oService    as Object
    Local nPage       
    Local nPageSize   

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jParams        := oRest:getQueryRequest()
    ::jbranches:fromJson(oRest:GetBodyRequest()) 

    ::cId           := ::jParams['id']
    ::cProccess     := ::jParams['proccess']
    ::cReproccess   := ::jParams['reproccess']
    ::page          := ::jParams['page']
    ::pageSize      := ::jParams['pageSize']
    ::cFilter       := ::jParams['filter']
    
    If Empty(::cId) .or. ::cId == 'null'
        ::jParams["message"] := STR0001 //'Id is required.'
        ::cData := ::jParams:toJson()
        oRest:setStatusCode(400)
        oRest:setResponse(::cData)
    Else
        If Empty(::cProccess) .or. ::cProccess == 'null'
            ::jParams["message"] := STR0002 //'Proccess is required.'
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:setResponse(::cData) 
        Else  
            IIf(Alltrim(::cProccess) == 'O', lProc350 := .T., lProc350 := .F.)

            If Empty(::cReproccess) .or. (::cReproccess == 'null')
                lReproccess := .F.
            Else 
                Iif((::cReproccess == "true"), lReproccess := .T., lReproccess := .F.)
            Endif  

            if empty(::page)
                nPage := 1
            else
                nPage := VAL(::page) 
            endif

            if empty(::pageSize)
                nPageSize := 10
            else 
                nPageSize := Val(::pageSize) 
            endif

            if Empty(::cFilter) .or. (::cFilter == 'null') 
                aFilter := {{"FILTER", ''}}
            else 
                aFilter := {{"FILTER", ::cFilter}}
            endif  

            oService     := ac.Results.Analysis.Service.acResultsAnalysisService():new()

            oRest:setResponse( oService:doTheAnalysis(::cId, lProc350, lReproccess, nPage, nPageSize, aFilter,::jbranches))
        Endif
    EndIf

return .t.


/*/{Protheus.doc} acResultsAnalysis:getResultsAnalysis()
    Metodo responsavel por realizar contagem de quantos 
    resultados foram encontrados  
    @type  Metodo
    @author Andre Maximo
    @since  janeiro  19, 2021
    @version 12.1.27
/*/

method getCountResults() class acResultsAnalysis

    Local oService      as Object
    Local lResponse     as Logical
    Local oResponse     as Object 

    
    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    ::jParams   := oRest:getQueryRequest()

    ::cId :=    ::jParams["id"]
    
    If Empty(::cId) .or. ::cId == 'null'
        ::jParams["message"] := STR0001 //'Id is required.'
        ::cData := ::jParams:toJson()
        oRest:setStatusCode(400)
        oRest:setResponse(::cData) 
    Else
        oService:= ac.Results.Analysis.Service.acResultsAnalysisService():new()
        lResponse := oService:GetCount(::cId) 
        If lResponse
            oResponse := JsonObject():New()
            oResponse["quantity"] := oService:nQuantity
            oRest:setResponse(oResponse)  
        Else 
            ::jParams["message"] := STR0003 //'Informed id was not found.'
            ::cData := ::jParams:toJson()
            oRest:setStatusCode(400)
            oRest:setResponse(::cData)  
        Endif
    EndIf


return .t.
