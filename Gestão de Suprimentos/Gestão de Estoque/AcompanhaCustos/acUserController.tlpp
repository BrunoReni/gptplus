#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "acusercontroller.ch"

using namespace ac.user.service

class acUser

    public data cId as character
    public data cData as character
    public data jPath as object
    public data jBody as object
    public data httpCode as numeric

    public method New()

    @Get("api/v1/acUser/:id")
    public method getAcUser()

    @Post("api/v1/acUser/:id")
    public method postAcUser()

    @Put("api/v1/acUser/:id")
    public method putAcUser()

endclass

/*/{Protheus.doc} acUser:New()
    Metodo responsavel por instanciar e iniciar as variaveis da class acUser
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/
method new() class acUser
    ::cId   := ''
    ::cData := ''
    ::jPath := Nil
    ::jBody := JsonObject():New()
    ::httpCode := 0
return Self

/*/{Protheus.doc} acUser:getAcUser()
    Metodo responsavel retornar um log de usuario
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method getAcUser() class acUser

    Local jBodyResponse as Object
    Local cMessage      as character
    Local lShowModal    as logical
    Local oAcUserService as Object


    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    jBodyResponse   := JsonObject():New()
    cMessage        := ''
    ::jPath := oRest:getPathParamsRequest()
    if ( ::jPath <> Nil )
        ::cId := ::jPath[ 'id' ]   
        oAcUserService := ac.user.service.acUserService():new()
        lShowModal := oAcUserService:getShowModal(::cId)
        jBodyResponse["showModal"] := lShowModal
        jBodyResponse["userId"] := ::cId
        jBodyResponse["userName"] := encodeutf8(usrfullname(::cId))
        ::cData := jBodyResponse:toJson()
        oRest:setResponse( ::cData )  
    endif
return .t.

/*/{Protheus.doc} acUser:postAcUser()
    Metodo responsavel para incluir um log de usuario
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method postAcUser() class acUser

Local jBodyResponse     as Object
Local cMessage          as character
Local lWrite            as logical
Local oAcUserService    as Object
Local cBody             as character

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    jBodyResponse   := JsonObject():New()
    cMessage        := ''
    ::jPath := oRest:getPathParamsRequest()
    if ( ::jPath <> Nil )
        ::cId := ::jPath[ 'id' ] 
        ::jBody:fromJson(oRest:GetBodyRequest()) 
        cBody := ::jBody:GetJsonText("showModal")
        oAcUserService := ac.user.service.acUserService():new()
        lWrite := oAcUserService:postLogUser(::cId, cBody)
        if lWrite
            jBodyResponse["showModal"]  := cBody
            jBodyResponse["userId"]     := ::cId
            jBodyResponse["userName"]   := encodeutf8(usrfullname(::cId))
            ::cData := jBodyResponse:toJson()
            oRest:setResponse( ::cData ) 
        endif

       
    endif

return .t.

/*/{Protheus.doc} acUser:postAcUser()
    Metodo responsavel para alterar a propriedade showModal do log do usuario
    @type  Metodo
    @author Pedro Missaglia
    @since  Outubro 02, 2020
    @version 12.1.27
/*/

method putAcUser() class acUser

    Local jBodyResponse as Object
    Local cMessage      as character
    Local lWrite    as logical
    Local oAcUserService as Object
    Local cBody         as character

    oRest:setKeyHeaderResponse("Content-Type", "application/json")
    jBodyResponse   := JsonObject():New()
    cMessage        := ''
    ::jPath := oRest:getPathParamsRequest()
    if ( ::jPath <> Nil )
        ::cId := ::jPath[ 'id' ] 

        ::jBody:fromJson(oRest:GetBodyRequest()) 
        cBody := ::jBody:GetJsonText("showModal")
        oAcUserService := ac.user.service.acUserService():new()
        lWrite := oAcUserService:putLogUser(::cId, cBody)
        if lWrite
            jBodyResponse["showModal"]  := cBody
            jBodyResponse["userId"]     := ::cId
            jBodyResponse["userName"]   := encodeutf8(usrfullname(::cId))
            ::cData := jBodyResponse:toJson()
            oRest:setResponse( ::cData ) 
        else
            jBodyResponse["message"] := STR0001 //'Unable to log.'
            ::cData := jBodyResponse:toJson()   
            oRest:setStatusCode(400)
            oRest:setResponse( ::cData )
        endif
    endif

return .t.
