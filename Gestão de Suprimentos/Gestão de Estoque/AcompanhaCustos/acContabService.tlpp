#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "accontabservice.ch"

namespace ac.acContab.Service

Class acContabServ
    public data  oResponse as Object
    public data  oLog      as object
    public data  lautoexec as logical
    public method New()
    public method eventContab()
    public method isCalendarInvalid()
	public method version()
	public method except331()
    public method validAutExecOfTheAccounting()
    public method StructSx1330with331()

EndClass

/*/{Protheus.doc} eventRecalc
    Metodo responsavel por abrir o startJob para processamento do recalculo
    @type  Metodo
    @author Pedro Missaglia
    @since  Janeiro 13,2021
    @version 12.1.27
/*/

Method new() class acContabServ
    ::lautoexec := .f.
return Self


/*/{Protheus.doc} eventRecalc
    Metodo responsavel por abrir o startJob para processamento do recalculo
    @type  Metodo
    @author Pedro Missaglia
    @since  Janeiro 13,2021
    @version 12.1.27
/*/

Method eventContab(aListaFil, aParAuto, cCompany, cBranch, cId, cIdChild, lReproc,cDataBase) class acContabServ

Local cAcUserId := ""
Local oLog 		:= acJourneyLog():New()

Default lReproc := .F.

oLog:logIni()
oLog:envValid(.T.)
oLog:idMovD3X()
oLog:setThreadId( Strzero(ThreadID(),15))
oLog:cIdParent := cId
oLog:cIdChild := cIdChild

If lReproc 
    oLog:LogProAtu('INIJOB', STR0001, '' , cBranch, , aParAuto[1], cBranch, .T.) //'Segunda tentativa de subida de thread para o processamento da rotina MATA331'
Else 
	oLog:LogProAtu('INIJOB', STR0002, '' , cBranch, , aParAuto[1], cBranch, .T.) //'Tentativa de subida de thread para o processamento da rotina MATA331'
Endif

If Type("__cUserId") == "C" .And. !Empty(__cUserId)
    cAcUserId := __cUserId
EndIf

StartJob('IniProc331',GetEnvServer(),.F.,aListaFil, aParAuto, cCompany, cBranch, cId, cIdChild, cUsername, cAcUserId,cDataBase)

return .T.

/*/{Protheus.doc} eventRecalc
    Metodo responsavel por abrir o startJob para processamento do recalculo
    @type  Metodo
    @author Pedro Missaglia
    @since  Janeiro 13,2021
    @version 12.1.27
/*/

Method isCalendarInvalid(dDtIni,dDtFim) class acContabServ

return A330VldCal(dDtIni,dDtFim)

/*/{Protheus.doc} version
    Metodo responsavel por indicar a versao da classe
    @type  Metodo
    @author pedro.missaglia 
    @since  Marco 01, 2023
    @version 12.1.22.10
/*/
method version() class acContabServ
return 100

/*/{Protheus.doc} validAutExecOfTheAccounting
    Metodo responsavel por iniciar processamento automático MATA331
    @type  Metodo
    @author andre.maximo 
    @since  Marco 01, 2023
    @version 12.1.22.10
/*/

Method validAutExecOfTheAccounting(idfindsx1 , aAllFils, cBranch, cCompany) class acContabServ
    Local oLog := acJourneyLog():New()  as Object
    Local cDataBase                     as character
    Local oClosingService := ac.acClosing.Service.acClosingServ():new()
    aParansfil  := aClone(aAllFils)
    a330ParamZX := ::StructSx1330with331(idfindsx1)
    oLog := acJourneyLog():New()    
    If !oClosingService:isNotProcLocked(aParansfil)
        ::except331()
    Else
        cDataBase := DTOC(dDataBase)
        oClosingService:unlockProc(aParansfil)
        oLog:cIdParent := idfindsx1
        oLog:updateD3YPositi("MATA331",,,,.T.)
        SLEEP( 3000 )
        ::eventContab(aParansfil, a330ParamZX, cCompany, cBranch, oLog:cIdParent, oLog:cIdChild,,cDataBase)
    Endif
    oLog:Destroy()
   
return

/*/{Protheus.doc} StructSx1330with331
    Metodo responsavel por apresentar Sx1 e validação se executa automatico o MATA331
    @type  Metodo
    @author andre.maximo 
    @since  Marco 01, 2023
    @version 12.1.22.10
/*/

Method StructSx1330with331(id) class acContabServ
    Local oProfileClosing                       as Object
    Local oSX1            := JsonObject():New() as Object
    Local a330ParamZX                           as array
    Local oCalcService    := ac.acCalc.Service.acCalcService():new()

    oProfileClosing := totvs.protheus.backoffice.est.closing.profile.ClosingProfile():New(id)
    oSX1['recalculatioAndAccouting'] := oProfileClosing:oSx1["recalculationAndAccounting"]["parameters"];
    [len(oProfileClosing:oSx1["recalculationAndAccounting"]["parameters"])]["value"] 
    oSX1['contabilization'] := oProfileClosing:oSx1['contabilization']['mta331']
    a330ParamZX     := oCalcService:preparParamsPerg(oSX1, 'MATA331')
    if a330ParamZX[10]==1 .and.oSX1['recalculatioAndAccouting']
        ::lautoexec := .T.
    EndIf

return a330ParamZX


/*/{Protheus.doc} nomeFunction
    (long_description)
    @type  Function
    @author user
    @since 13/03/2023
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    @example
    (examples)
    @see (links_or_references)
    /*/
Method except331() class acContabServ

 USEREXCEPTION( STR0003 ) 
    
Return 
