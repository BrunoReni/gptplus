#include "tlpp-core.th"
#include "tlpp-rest.th"

namespace ac.Results.Analysis.Service
using namespace ac.Results.Analysis.Repository
using namespace ac.TableTempory.Repository

CLASS acResultsAnalysisService

	Public Data nQuantity as numeric
	Public method New()
	public Method GetCount()
	public method doTheAnalysis()
	

EndClass

/*/{Protheus.doc} acResultsAnalysisService:New()
    Metodo responsavel por acResultsAnalysisService
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27
/*/
Method new() CLASS acResultsAnalysisService

	::nQuantity := 0

Return Nil
/*/{Protheus.doc} acResultsAnalysisService:New()
    Metodo responsavel por acResultsAnalysisService
    @type  Metodo
    @author andre.maximo
    @since  Nov  04, 2020
    @version 12.1.27 */
Method doTheAnalysis(id, lProc350, lReproccess, page, pageSize, aFilter,oJbranches) CLASS acResultsAnalysisService

	Local oRepository 	   	   as Object
	Local oTableTempRepository as Object
	Local cQuery	  	       as Character
	Local aCampos			   as Array
	Local cTable			   as Character
	Local cTableName  	       as Character
	Local cInsertCommand	   as Character
	Local jsonResponse		   as Object

	cQuery 		:= ''	
	aCampos		:= {}	
	oRepository := ac.Results.Analysis.Repository.acAnalysisResultsRepository():new('GET',.T.)
	oTableTempRepository := ac.TableTempory.Repository.acTableTemporyRepository():new()
	cTableName := oRepository:getTableIdName(id)

	If oTableTempRepository:doesTableIdExist(cTableName)
		DbUseArea(.T.,"TOPCONN",cTableName,cTableName,.T.)
		If lReproccess
			oTableTempRepository:deletedTableId(cTableName)
			
			cQuery 			:= oRepository:getFullQuery(lProc350, .F., oJbranches)

			aCampos 		:= oRepository:getFullFields(aCampos)	

			cTable 			:= oRepository:createTable(id, aCampos)

			cInsertCommand 	:= oRepository:getInsertCommand(cTable, oRepository:getFullQuery(lProc350, .T., oJbranches))

			If oRepository:insertTable(cInsertCommand)
				jsonResponse := oRepository:getItems(cTable, aCampos, page, pageSize, aFilter)
			Endif 
		Else
			aCampos 	 := oRepository:getFullFields(aCampos)

			jsonResponse := oRepository:getItems( oRepository:getTableIdName(id), aCampos, page, pageSize, aFilter)
		Endif
	Else
		cQuery 			:= oRepository:getFullQuery(lProc350,,oJbranches)

		aCampos 		:= oRepository:getFullFields(aCampos)	

		cTable 			:= oRepository:createTable(id, aCampos)

		cInsertCommand 	:= oRepository:getInsertCommand(cTable, cQuery)

		If oRepository:insertTable(cInsertCommand)
			jsonResponse := oRepository:getItems(cTable, aCampos, page, pageSize, aFilter)
		Endif 
	Endif

	(oRepository:getTableIdName(id))->(dbCloseArea())

Return jsonResponse


/*/{Protheus.doc} 
    Metodo responsavel por enviar o status do fechamento.
    @type  Metodo
    @author andre.maximo 
    @since  22012021
    @version 12.1.27
/*/

Method GetCount(id) class acResultsAnalysisService

    Local oRepository 	        as Object
	Local oTableTempRepository 	as Object
	Local cTableName 		    as Character
	Local lRet					as Logical

	lRet		:= .F.
	oRepository	:= ac.Results.Analysis.Repository.acAnalysisResultsRepository():new('GET',.T.)
	oTableTempRepository := ac.TableTempory.Repository.acTableTemporyRepository():new()

	cTableName := oRepository:getTableIdName(id)
	If oTableTempRepository:doesTableIdExist(cTableName)
		lRet		:= .T.
		::nQuantity	:= oRepository:getCountAnalysis(cTableName)
	Endif

Return lRet


