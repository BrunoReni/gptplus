#INCLUDE 'APWEBEX.CH' 
#INCLUDE "APWEBSRV.CH" 
#INCLUDE "PROTHEUS.CH"
#INCLUDE "AP5MAIL.CH"   
	
//---------------------------------------------------------------------------
// Estrutura de matriz do cabecalho da guia								   
//---------------------------------------------------------------------------
WSSTRUCT SBeneficiario

	wsdata OpeUsr			as String	OPTIONAL //BD5_OPEUSR | BD6_OPEUSR
	wsdata MatAnt			as String	OPTIONAL //BD5_MATANT | BD6_MATANT
	wsdata NomUsr			as String	OPTIONAL //BD5_NOMUSR | BD6_NOMUSR
	wsdata MatXml			as String	OPTIONAL //BD5_MATXML |
	wsdata CodEmp			as String	OPTIONAL //BD5_CODEMP | BD6_CODEMP
	wsdata Matric			as String	OPTIONAL //BD5_MATRIC | BD6_MATRIC
	wsdata TipReg			as String	OPTIONAL //BD5_TIPREG | BD6_TIPREG
	wsdata CpfUsr			as String	OPTIONAL //BD5_CPFUSR | 
	wsdata IdUsr 			as String	OPTIONAL //BD5_IDUSR  | BD6_IDUSR
	wsdata DatNas			as Date  	OPTIONAL //BD5_DATNAS | BD6_DATNAS
	wsdata Digito			as String	OPTIONAL //BD5_DIGITO | BD6_DIGITO
	wsdata ConEmp			as String	OPTIONAL //BD5_CONEMP | BD6_CONEMP
	wsdata VerCon			as String	OPTIONAL //BD5_VERCON | BD6_VERCON
	wsdata SubCon			as String	OPTIONAL //BD5_SUBCON | BD6_SUBCON
	wsdata VerSub			as String	OPTIONAL //BD5_VERSUB | BD6_VERSUB
	wsdata MatVid			as String	OPTIONAL //BD5_MATVID | BD6_MATVID
	wsdata TipPac			as String	OPTIONAL //BD5_TIPPAC | 
   	wsdata MatUsa			as String	OPTIONAL //BD5_MATUSA | BD6_MATUSA
   	wsdata AteRna			as String	OPTIONAL //BD5_ATERNA |
	wsdata PadCon			as String	OPTIONAL //BD5_PADCON |
	wsdata PadInt			as String	OPTIONAL //BD5_PADINT |

	wsdata OpeOri			as String	OPTIONAL	//BD6_OPEORI
	wsdata CodPla			as String	OPTIONAL	//BD6_CODPLA
	wsdata ModPag			as String	OPTIONAL	//BD6_MODCOB
	wsdata TipUsr			as String	OPTIONAL	//BD6_TIPUSR
	wsdata Interc			as String	OPTIONAL 	//BD6_INTERC	
	wsdata ValCar			as Date	 	OPTIONAL
	wsdata NumCNS			as String	OPTIONAL
	wsdata NomSoci			as String	OPTIONAL

ENDWSSTRUCT

WSSTRUCT SContratado

	wsdata CodRda    		as String	OPTIONAL //BD5_CODRDA | BD6_CODRDA
	wsdata OpeRda    		as String	OPTIONAL //BD5_OPERDA
	wsdata NomRda    		as String	OPTIONAL //BD5_NOMRDA | BD6_NOMRDA
	wsdata TipRda    		as String	OPTIONAL //BD5_TIPRDA | BD6_TIPRDA
	wsdata CodLoc    		as String	OPTIONAL //BD5_CODLOC | BD6_CODLOC
	wsdata Local     		as String	OPTIONAL //BD5_LOCAL  | BD6_LOCAL
	wsdata CodEsp    		as String	OPTIONAL //BD5_CODESP | 
	wsdata CpfCnpjRda		as String	OPTIONAL //BD5_CPFRDA | BD6_CPFRDA
	wsdata DesLoc    		as String	OPTIONAL //BD5_DESLOC | BD6_DESLOC
	wsdata EndLoc    		as String	OPTIONAL //BD5_ENDLOC | BD6_ENDLOC
	wsdata TipPre    		as String	OPTIONAL //BD5_TIPPRE | 
	wsdata Cnes      		as String	OPTIONAL //BD5_CNES   | 

ENDWSSTRUCT

WSSTRUCT SProfissional

	wsdata CodOpe 			as String 	OPTIONAL        //BD5_OPEEXE      //BD5_OPESOL
	wsdata EstProf			as String 	OPTIONAL        //BD5_ESTEXE      //BD5_ESTSOL
	wsdata SigCr  			as String 	OPTIONAL        //BD5_SIGEXE      //BD5_SIGLA
	wsdata NumCr  			as String 	OPTIONAL        //BD5_REGEXE      //BD5_REGSOL
	wsdata NomProf			as String 	OPTIONAL        //BD5_NOMEXE      //BD5_NOMSOL
	wsdata CdProf 			as String 	OPTIONAL        //BD5_CDPFRE      //BD5_CDPFSO
	wsdata EspProf			as String 	OPTIONAL        //BD5_ESPEXE      //BD5_ESPSOL
	wsdata CodBAQ 			as String 	OPTIONAL
	wsdata DesBAQ 			as String 	OPTIONAL
	
ENDWSSTRUCT


WSSTRUCT SProfisBD7

	wsdata Sequen 			as String 	OPTIONAL        //BD5_OPEEXE      //BD5_OPESOL
	wsdata GrPart 			as String 	OPTIONAL
	wsdata DocPro 			as String 	OPTIONAL
	wsdata NomProf			as String 	OPTIONAL        //BD5_NOMEXE      //BD5_NOMSOL
	wsdata SigCr  			as String 	OPTIONAL        //BD5_SIGEXE      //BD5_SIGLA
	wsdata NumCr  			as String 	OPTIONAL        //BD5_REGEXE      //BD5_REGSOL
	wsdata EstProf			as String 	OPTIONAL        //BD5_ESTEXE      //BD5_ESTSOL
	wsdata EspProf			as String 	OPTIONAL        //BD5_ESPEXE      //BD5_ESPSOL	
	wsdata CdProf 			as String 	OPTIONAL        //BD5_CDPFRE      //BD5_CDPFSO
	wsdata NomEsp 			as String 	OPTIONAL
	wsdata Cbos   			as String 	OPTIONAL
	
ENDWSSTRUCT


WSSTRUCT SConsulta
	wsdata RegAns	 		as String 	OPTIONAL
	wsdata CodOpe	 		as String 	OPTIONAL
	wsdata CodLdp	 		as String 	OPTIONAL
	wsdata LibAte    		as String 	OPTIONAL
	wsdata CodPeg	 		as String 	OPTIONAL
	wsdata Numero	 		as String 	OPTIONAL
	wsdata NumAut	 		as String 	OPTIONAL
	wsdata Fase    	 		as String 	OPTIONAL
	wsdata Situac	 		as String 	OPTIONAL
	wsdata DatPro	 		as Date   	OPTIONAL
	wsdata HorPro	 		as String 	OPTIONAL
	wsdata NumImp	 		as String 	OPTIONAL
	wsdata NraOpe	 		as String 	OPTIONAL
	wsdata LotGui	 		as String 	OPTIONAL                     
	wsdata TipGui	 		as String 	OPTIONAL
	wsdata GuiOri	 		as String 	OPTIONAL
	wsdata DtDigi	 		as Date   	OPTIONAL
	wsdata MesPag	 		as String 	OPTIONAL
	wsdata AnoPag	 		as String 	OPTIONAL
	wsdata Pacote	 		as String 	OPTIONAL
	wsdata OriMov	 		as String 	OPTIONAL
	wsdata GuiAco	 		as String 	OPTIONAL
	wsdata Libera	 		as String 	OPTIONAL
	wsdata RgImp	 		as String 	OPTIONAL
	wsdata TpGrv	 		as String 	OPTIONAL
	wsdata TipAte	 		as String 	OPTIONAL
	wsdata Cid		 		as String 	OPTIONAL
	wsdata TipFat	 		as String 	OPTIONAL
	wsdata QtdEve	 		as Integer 	OPTIONAL
	wsdata IndAci	 		as String  	OPTIONAL
	wsdata TipSai	 		as String  	OPTIONAL
	wsdata TipAdm	 		as String  	OPTIONAL
	wsdata Msg01	 		as String  	OPTIONAL
	wsdata Msg02 	 		as String  	OPTIONAL
	wsdata UtpDoe	 		as String  	OPTIONAL
	wsdata TpOdoe	 		as Integer 	OPTIONAL
	wsdata TipDoe	 		as String  	OPTIONAL
	wsdata NrlBor	 		as String  	OPTIONAL
	wsdata GuiPri	 		as String  	OPTIONAL
	wsdata Senha	 		as String  	OPTIONAL
	wsdata TipCon	 		as String  	OPTIONAL
	wsdata DatSol	 		as Date    	OPTIONAL
	wsdata DadBenef	 		as SBeneficiario OPTIONAL 
	wsdata ContExec	 		as SContratado   OPTIONAL
	wsdata TipAto    		as String  	OPTIONAL
	wsdata ContSol   		as SContratado   OPTIONAL
	wsdata ProfExec	 		as SProfissional OPTIONAL
	wsdata ProfSol	 		as SProfissional OPTIONAL
	wsdata Procedimentos	as Array of Procedimentos OPTIONAL
	wsdata ProfisBD7		as Array of SProfisBD7    OPTIONAL
	wsdata Protoc			as String 	OPTIONAL
	wsdata NumAux			as String 	OPTIONAL
	wsdata DtAutO			as Date		OPTIONAL
	wsdata DtVldO			as Date 	OPTIONAL 
	wsdata ProcLib			as String 	OPTIONAL
	wsdata VlOutS			as String 	OPTIONAL
	wsdata CobEspNwS		AS String	OPTIONAL				//Cobertura Especial
	wsdata RegAtdNwS		AS String	OPTIONAL				//Regime de Atendimento
	wsdata SaudOcNwS		AS String	OPTIONAL				//Saúde Ocupacional
	
	//Honorários
	wsdata guiSolInt     	as String 	OPTIONAL
	wsdata dtIniFat     	as Date   	OPTIONAL
	wsdata dtFimFat      	as Date   	OPTIONAL
	wsdata valTotHon     	as Float 	OPTIONAL
	wsdata dtEmiGui      	as Date  	OPTIONAL 
	wsdata RegFor       	as String 	OPTIONAL
	wsdata GuiInt       	as String 	OPTIONAL
	wsdata CnpjRdaInt		as String 	OPTIONAL
	wsdata NomeRdaInt		as String 	OPTIONAL
	wsdata CnesRdaInt		as String 	OPTIONAL
	
	//SADT
   	wsdata IndCli			as String 	OPTIONAL
   	wsdata Obs				as String 	OPTIONAL
	wsdata DtRelS  			as Date 	OPTIONAL
	wsdata DtRelS2 			as Date 	OPTIONAL
	wsdata DtRelS3 			as Date 	OPTIONAL
	wsdata DtRelS4 			as Date 	OPTIONAL
	wsdata DtRelS5 			as Date 	OPTIONAL
	wsdata DtRelS6 			as Date 	OPTIONAL
	wsdata DtRelS7 			as Date 	OPTIONAL
	wsdata DtRelS8 			as Date 	OPTIONAL
	wsdata DtRelS9 			as Date 	OPTIONAL
	wsdata DtRelS1 			as Date 	OPTIONAL

	//Resumo
	wsdata HrInicFat		as String 	OPTIONAL
   	wsdata HrFimcFat		as String 	OPTIONAL
   	wsdata Cid2				as String 	OPTIONAL
   	wsdata Cid3				as String 	OPTIONAL
   	wsdata Cid4				as String 	OPTIONAL
   	wsdata CidObt			as String 	OPTIONAL
   	wsdata TipIntR			as String 	OPTIONAL
   	wsdata NumDcViv			as String 	OPTIONAL
   	wsdata NumDcObt			as String 	OPTIONAL
   	wsdata	RegInt			as String 	OPTIONAL
   	wsdata IndDORN			as String 	OPTIONAL
ENDWSSTRUCT

WSSTRUCT Procedimentos

	wsdata SeqMov        	as String  	OPTIONAL
	wsdata CodPad        	as String  	OPTIONAL

	wsdata SlvPad        	as String  	OPTIONAL
	wsdata CodPro        	as String  	OPTIONAL
	wsdata SlvPro        	as String  	OPTIONAL
	wsdata DesPro        	as String  	OPTIONAL

	wsdata Nivel         	as String  	OPTIONAL
	wsdata VlrApr        	as Float   	OPTIONAL
	wsdata VlrMan		 	as Float   	OPTIONAL
	wsdata Qtd           	as Integer 	OPTIONAL
	wsdata PerVia        	as Integer 	OPTIONAL
	wsdata CodVia        	as String  	OPTIONAL
	wsdata ProcCirurgico 	as String  	OPTIONAL
	wsdata DtPro         	as Date    	OPTIONAL
	wsdata HorIni        	as String  	OPTIONAL
	wsdata HorFim        	as String  	OPTIONAL

	wsdata IncAut        	as String  	OPTIONAL
	wsdata Status        	as String  	OPTIONAL
	wsdata ChvNiv        	as String  	OPTIONAL
	wsdata NivAut        	as String  	OPTIONAL

	wsdata CodTab        	as String  	OPTIONAL
	wsdata AliaTb        	as String  	OPTIONAL
	wsdata BloqPag       	as String  	OPTIONAL
	wsdata Interc        	as String  	OPTIONAL
	wsdata TipInt        	as String  	OPTIONAL
	wsdata TecUti        	as String  	OPTIONAL
	wsdata TipProc       	as String  	OPTIONAL//BR8->BR8_TPPROC
	wsdata PrPrRl			as Float   	OPTIONAL
	//OUTRAS DESPESAS	
	wsdata CodDes        	as String  	OPTIONAL
	wsdata AoDesp        	as Boolean 	OPTIONAL
	wsdata AutFun        	as String  	OPTIONAL
	wsdata RefMatFab     	as String  	OPTIONAL
	wsdata RegAnvisa     	as String  	OPTIONAL
	wsdata UniMedida     	as String  	OPTIONAL	
	
	//PROC_ODONTO
	wsdata DenReg     		as String   OPTIONAL//BD6->BD6_DENREG
	wsdata FaDent     		as String   OPTIONAL//BD6->BD6_FADENT
	wsdata DesReg     		as String   OPTIONAL//BD6->BD6_DESREG
	wsdata FacDes     		as String   OPTIONAL//BD6->BD6_FACDES
	wsdata QtdUS      		as Float	OPTIONAL
	wsdata ValFran    		as Float    OPTIONAL
	wsdata Autorizado 		as Boolean  OPTIONAL

ENDWSSTRUCT

WSSTRUCT SOutrasDesp
	wsdata RegAns	   		as String	OPTIONAL
	wsdata NumGuiRef 		as String	OPTIONAL
	wsdata AteRn	   		as String	OPTIONAL
	wsdata CID  	   		as String	OPTIONAL
	wsdata ContExec  		as SContratado OPTIONAL 
	wsdata dtIniFat      	as Date		OPTIONAL
	wsdata dtFimFat      	as Date		OPTIONAL
	wsdata Procedimentos 	as Array of Procedimentos OPTIONAL
ENDWSSTRUCT

WSSTRUCT SExecutante
	wsdata CodInt	   		as String	OPTIONAL
	wsdata CodRda	   		as String	OPTIONAL
	wsdata QtGrPart  		as String	OPTIONAL
	wsdata CodLoc	   		as String	OPTIONAL
	wsdata Profissional 	as SProfisBD7 OPTIONAL 
	wsdata Procedimento 	as Procedimentos OPTIONAL
ENDWSSTRUCT

WSSTRUCT SGUIAUD
	WSDATA CodOpe			AS String 	OPTIONAL
	WSDATA AnoAut			AS String 	OPTIONAL
	WSDATA MesAut			AS String 	OPTIONAL
	WSDATA AliMov			AS String 	OPTIONAL
	WSDATA NumAut			AS String 	OPTIONAL
	WSDATA SeqProc			AS String 	OPTIONAL
ENDWSSTRUCT

WSSERVICE PLSGUIAS DESCRIPTION "Funções que manipulam as guias Inclusões, Alterações, Consultas"
	//--------------------------------------------------------------------------
	// Definição de entradas/saídas
	//--------------------------------------------------------------------------
	//WSDATA GuiaConsulta  AS VO_Consulta  OPTIONAL
	//WSDATA GuiaSADT      AS VO_SADT      OPTIONAL
	//WSDATA GuiaOdonto    AS VO_Odonto    OPTIONAL
	//WSDATA GuiaHonorario AS VO_Honorario OPTIONAL
	WSDATA UserCode			AS String 	OPTIONAL
	WSDATA Recno			AS String 	OPTIONAL
	WSDATA GuiaConsulta		AS SConsulta 
	WSDATA WSNULL			AS String 	OPTIONAL
	WSDATA Odonto			AS Boolean  OPTIONAL
	WSDATA NumGuiRef		AS String 	OPTIONAL    
	WSDATA TpGuiRef      	AS String 	OPTIONAL
	WSDATA RecGuiRef     	AS String 	OPTIONAL
	WSDATA GuiaOutDesp   	AS SOutrasDesp 
	WSDATA EditedCab		AS String 	OPTIONAL
	WSDATA AddedItems		AS String 	OPTIONAL
	WSDATA EditedItems		AS String 	OPTIONAL
	WSDATA DeletedItems		AS String 	OPTIONAL
	WSDATA AddedExec		AS String 	OPTIONAL
	WSDATA DeletedExec		AS String 	OPTIONAL
	WSDATA	TipoConfirm		AS String 	OPTIONAL
	WSDATA ResumoInt		AS Boolean	OPTIONAL
	WSDATA Executante		AS SExecutante OPTIONAL
	WSDATA TipGui			AS String 	OPTIONAL
	WSDATA NumGuiRes		AS String 	OPTIONAL
	WSDATA DadGuiAud		AS SGUIAUD
	//--------------------------------------------------------------------------
	// Definição de metodos																   
	//--------------------------------------------------------------------------
	WSMETHOD CarregaConsulta	DESCRIPTION "Preenche objeto consulta para carregar uma guia no portal"
	WSMETHOD CarregaOutDesp		DESCRIPTION "Preenche objeto Outras Despesas para carregar a guia no portal"
	WSMETHOD grvOutDes 			DESCRIPTION "Grava outras despesas"
	WSMETHOD GrvOdonto      	DESCRIPTION "Gravacao de alteracoes da guia odontologica"
	WSMETHOD GrvSADT   			DESCRIPTION "Gravacao de alteracoes da guia SP/SADT"
	WSMETHOD GrvHON				DESCRIPTION "Gravacao de alteracoes da guia Honorario Individual"
	WSMETHOD VldExe				DESCRIPTION "Valida Executantes da guia"
	WSMETHOD GetObsAudito		DESCRIPTION "Retorna dados das observações da auditoria para os itens selecionados."
ENDWSSERVICE

//-------------------------------------------------------------------
/*/{Protheus.doc} CarregaConsulta
Metodo para preencher uma guia a partir do recno 
@author Karine Riquena Limp
@since 20/06/2016
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD CarregaConsulta WSRECEIVE UserCode, Recno, Odonto, ResumoInt  WSSEND GuiaConsulta WSSERVICE PLSGUIAS
local aArea	      := GetArea()
local lRet        := .T.
local oObjControl := CO_Guia():New()
local oConsulta   := nil
local nI		  := 0
local aTabDup 	  := PlsBusTerDup(SuperGetMv("MV_TISSCAB", .F. ,"87"))
local aExec		  := {}
local cPadBkp	  := ""
local cCnes		  := ""
local cCodVia	  := ""
local cLocAte	  := ""
Default ResumoInt	:= .F.
//--------------------------------------------------------------------------
// Checa rotina														   
//--------------------------------------------------------------------------
if PrtChkUser( ::UserCode , "PLSGUIAS", "CarregaConsulta" )
	If !ResumoInt
		oConsulta := oObjControl:loadGuiaRecno(val(::Recno), ::Odonto)
	Else
		oConsulta := oObjControl:loadGuiRecBE4(val(::Recno))
	EndIf
		
	::GuiaConsulta 			:= WsClassNew( "SConsulta" )
	
	cLocAte 	  := IIF(PLSOBRPRDA(oConsulta:getContExec():getCodRda()),PLSRETLDP(9),GetNewPar("MV_PLSPEGE","0000"))

	::GuiaConsulta:RegAns 	:= oConsulta:getRegAns() 	 
	::GuiaConsulta:CodOpe 	:= oConsulta:getCodOpe()
	::GuiaConsulta:CodLdp	:= oConsulta:getCodLdp()
	::GuiaConsulta:LibAte	:= iif( alltrim(cLocAte) = alltrim(oConsulta:getCodLdp()) , "S", "N")
	::GuiaConsulta:CodPeg	:= oConsulta:getCodPeg()
	::GuiaConsulta:Numero	:= oConsulta:getNumero()
	::GuiaConsulta:NumAut	:= oConsulta:getNumAut()
	::GuiaConsulta:Fase		:= oConsulta:getFase()  
	::GuiaConsulta:Situac	:= oConsulta:getSituac()
	::GuiaConsulta:DatPro	:= oConsulta:getDatPro()
	::GuiaConsulta:HorPro	:= oConsulta:getHorPro()
	::GuiaConsulta:NumImp	:= oConsulta:getNumImp()
	::GuiaConsulta:NraOpe	:= oConsulta:getNraOpe()
	::GuiaConsulta:LotGui	:= oConsulta:getLotGui()                  
	::GuiaConsulta:TipGui	:= oConsulta:getTipGui()
	::GuiaConsulta:GuiOri	:= oConsulta:getGuiOri()
	::GuiaConsulta:DtDigi	:= oConsulta:getDtDigi()
	::GuiaConsulta:MesPag	:= oConsulta:getMesPag()
	::GuiaConsulta:AnoPag	:= oConsulta:getAnoPag()
	::GuiaConsulta:Pacote	:= oConsulta:getPacote()
	::GuiaConsulta:OriMov	:= oConsulta:getOriMov()
	::GuiaConsulta:GuiAco	:= oConsulta:getGuiAco()
	::GuiaConsulta:Libera	:= oConsulta:getLibera()
	::GuiaConsulta:RgImp	:= oConsulta:getRgImp()  
	::GuiaConsulta:TpGrv	:= oConsulta:getTpGrv()  
	::GuiaConsulta:TipAte	:= PLSGETVINC("BTU_CDTERM", "", .F., "50",  oConsulta:getTipAte(),.T.)
	::GuiaConsulta:Cid		:= IIF (::GuiaConsulta:TipGui == "02", oConsulta:getCid(), "")
	::GuiaConsulta:TipFat	:= IIF(oConsulta:getTipFat() $ "P", "1", "2")
	::GuiaConsulta:QtdEve	:= oConsulta:getQtdEve()
	::GuiaConsulta:IndAci	:= PLSGETVINC("BTU_CDTERM", "BEA", .F., "36",  oConsulta:getIndAci()) //oConsulta:getIndAci()
	::GuiaConsulta:TipSai	:= PLSGETVINC("BTU_CDTERM", "BIY", .F., "39",  oConsulta:getTipSai())//oConsulta:getTipSai()
	::GuiaConsulta:TipAdm	:= oConsulta:getTipAdm()
	::GuiaConsulta:Msg01	:= oConsulta:getMsg01()  
	::GuiaConsulta:Msg02   	:= oConsulta:getMsg02() 
	::GuiaConsulta:UtpDoe	:= oConsulta:getUtpDoe()
	::GuiaConsulta:TpOdoe	:= oConsulta:getTpOdoe()
	::GuiaConsulta:TipDoe	:= oConsulta:getTipDoe()
	::GuiaConsulta:NrlBor	:= oConsulta:getNrlBor()
	::GuiaConsulta:GuiPri 	:= oConsulta:getGuiPri()
	::GuiaConsulta:Senha	:= oConsulta:getSenha() 
	::GuiaConsulta:NumAux	:= oConsulta:getNumAux() 
	::GuiaConsulta:VlOutS	:= oConsulta:getVlOutS()

	//Consulta e SADT
	if (oConsulta:getTipGui() $ "01/02")
		::GuiaConsulta:CobEspNwS	:= oConsulta:getCobEsp()
		::GuiaConsulta:RegAtdNwS	:= oConsulta:getTmRega() 	
		::GuiaConsulta:SaudOcNwS	:= oConsulta:getSauOcu() 	 		
	endif 
	
	if (::Odonto)
		::GuiaConsulta:DtAutO	:= oConsulta:getDatAutO() 
		::GuiaConsulta:DtVldO	:= oConsulta:getVldSenO() 
		::GuiaConsulta:ProcLib	:= oConsulta:getProcLib()
	endif
	
	
	IF (oConsulta:getTipGui() == "05" .and. oConsulta:getDadAut() <> NIL)
		::GuiaConsulta:DatPro := oConsulta:getDadAut():getDataAut()
	endif	
	 
	If (oConsulta:getTipGui() == "05")
		::GuiaConsulta:Msg01		:= oConsulta:getObsFim()
	EndIf
	 
	::GuiaConsulta:TipCon	:= PLSGETVINC("BTU_CDTERM", "", .F., "52",  oConsulta:getTipCon(),.T.)
	::GuiaConsulta:Obs		:= oConsulta:getObs()
	//::GuiaConsulta:Protoc	:= oConsulta:getProtoc() //-> No CO_GUIA usado na Cemig, não existe a Chamada ainda
	
	//Só para SADT
	if(oConsulta:getTipGui() == "02" .and. !::Odonto)
		::GuiaConsulta:IndCli 	:= oConsulta:getIndCli()
		::GuiaConsulta:DatSol 	:= oConsulta:getDatSol()
		
		::GuiaConsulta:DtRelS 	:= oConsulta:getdDtRlS()
		::GuiaConsulta:DtRelS2 	:= oConsulta:getdDtRlS2()
		::GuiaConsulta:DtRelS3 	:= oConsulta:getdDtRlS3()
		::GuiaConsulta:DtRelS4 	:= oConsulta:getdDtRlS4()
		::GuiaConsulta:DtRelS5 	:= oConsulta:getdDtRlS5()
		::GuiaConsulta:DtRelS6 	:= oConsulta:getdDtRlS6()
		::GuiaConsulta:DtRelS7 	:= oConsulta:getdDtRlS7()
		::GuiaConsulta:DtRelS8 	:= oConsulta:getdDtRlS8()
		::GuiaConsulta:DtRelS9 	:= oConsulta:getdDtRlS9()
		::GuiaConsulta:DtRelS1 	:= oConsulta:getdDtRlS1()
	endif
	
	::GuiaConsulta:TipAto 	:= oConsulta:getTipAto()
   	

   	//BENEFICIARIO	
   	::GuiaConsulta:DadBenef 		:= WsClassNew( "SBeneficiario" )
	::GuiaConsulta:DadBenef:OpeUsr 	:= oConsulta:getDadBenef():getOpeUsr() 
	::GuiaConsulta:DadBenef:MatAnt 	:= oConsulta:getDadBenef():getMatAnt()
	::GuiaConsulta:DadBenef:NomUsr 	:= oConsulta:getDadBenef():getNomUsr()
	::GuiaConsulta:DadBenef:MatXml 	:= oConsulta:getDadBenef():getMatXml()
	::GuiaConsulta:DadBenef:CodEmp 	:= oConsulta:getDadBenef():getCodEmp()
	::GuiaConsulta:DadBenef:Matric 	:= oConsulta:getDadBenef():getMatric()
	::GuiaConsulta:DadBenef:TipReg 	:= oConsulta:getDadBenef():getTipReg()
	::GuiaConsulta:DadBenef:CpfUsr 	:= oConsulta:getDadBenef():getCpfUsr()
	::GuiaConsulta:DadBenef:IdUsr  	:= oConsulta:getDadBenef():getIdUsr()
	::GuiaConsulta:DadBenef:DatNas 	:= oConsulta:getDadBenef():getDatNas()
	::GuiaConsulta:DadBenef:Digito 	:= oConsulta:getDadBenef():getDigito()
	::GuiaConsulta:DadBenef:ConEmp 	:= oConsulta:getDadBenef():getConEmp()
	::GuiaConsulta:DadBenef:VerCon 	:= oConsulta:getDadBenef():getVerCon()
	::GuiaConsulta:DadBenef:SubCon 	:= oConsulta:getDadBenef():getSubCon()
	::GuiaConsulta:DadBenef:VerSub 	:= oConsulta:getDadBenef():getVerSub()
	::GuiaConsulta:DadBenef:MatVid 	:= oConsulta:getDadBenef():getMatVid()
	::GuiaConsulta:DadBenef:TipPac 	:= oConsulta:getDadBenef():getTipPac()
	::GuiaConsulta:DadBenef:MatUsa 	:= oConsulta:getDadBenef():getMatUsa()
	::GuiaConsulta:DadBenef:AteRna 	:= oConsulta:getDadBenef():getAteRna()
	::GuiaConsulta:DadBenef:PadCon 	:= oConsulta:getDadBenef():getPadCon()
	::GuiaConsulta:DadBenef:PadInt	:= oConsulta:getDadBenef():getPadInt()	
	::GuiaConsulta:DadBenef:OpeOri 	:= oConsulta:getDadBenef():getOpeOri()
	::GuiaConsulta:DadBenef:CodPla 	:= oConsulta:getDadBenef():getCodPla()
	::GuiaConsulta:DadBenef:ModPag 	:= oConsulta:getDadBenef():getModPag()
	::GuiaConsulta:DadBenef:TipUsr 	:= oConsulta:getDadBenef():getTipUsr()
	::GuiaConsulta:DadBenef:Interc 	:= oConsulta:getDadBenef():getInterc()
	::GuiaConsulta:DadBenef:ValCar 	:= oConsulta:getDadBenef():getValCar()
	::GuiaConsulta:DadBenef:NumCNS 	:= oConsulta:getDadBenef():getCrtCNS()
	::GuiaConsulta:DadBenef:NomSoci	:= oConsulta:getDadBenef():getNomSoci()
	
	//Contratado Executante
	::GuiaConsulta:ContExec	:= WsClassNew("SContratado")		
	::GuiaConsulta:ContExec:CodRda     := oConsulta:getContExec():getCodRda() 
	::GuiaConsulta:ContExec:OpeRda     := oConsulta:getContExec():getOpeRda()   
	::GuiaConsulta:ContExec:NomRda     := oConsulta:getContExec():getNomRda()  
	::GuiaConsulta:ContExec:TipRda     := oConsulta:getContExec():getTipRda()   
	::GuiaConsulta:ContExec:CodLoc     := oConsulta:getContExec():getCodLoc()  
	::GuiaConsulta:ContExec:Local      := oConsulta:getContExec():getLocal()  
	::GuiaConsulta:ContExec:CodEsp     := oConsulta:getContExec():getCodEsp() 
	::GuiaConsulta:ContExec:CpfCnpjRda := oConsulta:getContExec():getCpfCnpjRda()
	::GuiaConsulta:ContExec:DesLoc     := oConsulta:getContExec():getDesLoc()
	::GuiaConsulta:ContExec:EndLoc     := oConsulta:getContExec():getEndLoc()
	::GuiaConsulta:ContExec:TipPre     := oConsulta:getContExec():getTipPre()
	cCnes := oConsulta:getContExec():getCnes()
	If Empty(cCnes)
		BAU->(DbSetOrder(4))
		MsSeek(xFilial("BAU") + ::GuiaConsulta:ContExec:CpfCnpjRda)
		cCnes := Alltrim(BAU->BAU_CNES)		
		
		if oConsulta:getTipGui() = "06"
			BB8->( DbSetOrder(1) )
			BB8->( MsSeek( xFilial("BB8")+BE4->(BE4_CODRDA+BE4_CODOPE+BE4_CODLOC) ) )
		
			cCnes := BB8->BB8_CNES
		endif		
	EndIf
	::GuiaConsulta:ContExec:Cnes       := cCnes
	
	//Profissional Executante
	IF (oConsulta:getProfExec() <> NIL)
		::GuiaConsulta:ProfExec := WsClassNew("SProfissional")
		::GuiaConsulta:ProfExec:CodOpe  := oConsulta:getProfExec():getCodOpe()    
		::GuiaConsulta:ProfExec:EstProf := oConsulta:getProfExec():getEstProf()  
		::GuiaConsulta:ProfExec:SigCr   := oConsulta:getProfExec():getSigCr()    
		::GuiaConsulta:ProfExec:NumCr   := oConsulta:getProfExec():getNumCr()    
		::GuiaConsulta:ProfExec:NomProf := oConsulta:getProfExec():getNomProf()
		::GuiaConsulta:ProfExec:CdProf  := oConsulta:getProfExec():getCdProf()   
		::GuiaConsulta:ProfExec:EspProf := oConsulta:getProfExec():getEspProf()  
		if ( ::Odonto )
			if ( !empty(oConsulta:getProfExec():getEspProf()) )
				::GuiaConsulta:ProfExec:CodBAQ := BAQ->(Posicione("BAQ",1,xFilial("BAQ") + oConsulta:getProfExec():getCodOpe() + oConsulta:getProfSol():getEspProf(),"BAQ_CBOS")) 
				::GuiaConsulta:ProfExec:DesBAQ := BAQ->(Posicione("BAQ",1,xFilial("BAQ") + oConsulta:getProfExec():getCodOpe() + oConsulta:getProfSol():getEspProf(),"BAQ_DESCBO"))
			else
				::GuiaConsulta:ProfExec:CodBAQ := "" 
				::GuiaConsulta:ProfExec:DesBAQ := ""
			endif	
		endif  
	ENDIF
	//Profissional Solicitante
	IF oConsulta:getTipGui() <> "05" .And. ( oConsulta:getProfSol() <> NIL) 
		::GuiaConsulta:ProfSol 		   := WsClassNew("SProfissional")            
		::GuiaConsulta:ProfSol:CodOpe  := oConsulta:getProfSol():getCodOpe()
	    ::GuiaConsulta:ProfSol:EstProf := oConsulta:getProfSol():getEstProf()
		::GuiaConsulta:ProfSol:SigCr   := oConsulta:getProfSol():getSigCr()  
		::GuiaConsulta:ProfSol:NumCr   := oConsulta:getProfSol():getNumCr()  
		::GuiaConsulta:ProfSol:NomProf := oConsulta:getProfSol():getNomProf()
		::GuiaConsulta:ProfSol:CdProf  := oConsulta:getProfSol():getCdProf() 
		::GuiaConsulta:ProfSol:EspProf := oConsulta:getProfSol():getEspProf()
		if ( ::Odonto )
			if ( !empty(oConsulta:getProfSol():getEspProf()) )
				::GuiaConsulta:ProfSol:CodBAQ := BAQ->(Posicione("BAQ",1,xFilial("BAQ") + oConsulta:getProfSol():getCodOpe() + oConsulta:getProfSol():getEspProf(),"BAQ_CBOS")) 
				::GuiaConsulta:ProfSol:DesBAQ := BAQ->(Posicione("BAQ",1,xFilial("BAQ") + oConsulta:getProfSol():getCodOpe() + oConsulta:getProfSol():getEspProf(),"BAQ_DESCBO"))
			else
				::GuiaConsulta:ProfSol:CodBAQ := ""
				::GuiaConsulta:ProfSol:DesBAQ := ""			
			endif
		endif
	ENDIF	
	
	//Campos da guia de honorarios
	If(oConsulta:getTipGui() == "06")
		::GuiaConsulta:dtIniFat 	:= oConsulta:getDtIniFat()
		::GuiaConsulta:dtFimFat 	:= oConsulta:getDtFimFat()    
		::GuiaConsulta:dtEmiGui 	:= oConsulta:getDtEmiGui()     
		::GuiaConsulta:RegFor  	:= oConsulta:getRegFor() 
		::GuiaConsulta:CnpjRdaInt := oConsulta:getCnpjRdaInt()
		::GuiaConsulta:NomeRdaInt := oConsulta:getNomeRdaInt()
		::GuiaConsulta:CnesRdaInt := oConsulta:getCnesRdaInt()				
	EndIf
	   
	//Campos da guia de Resumo
	If(oConsulta:getTipGui() == "05")
		::GuiaConsulta:dtIniFat 	:= oConsulta:getDtIniFat()
		::GuiaConsulta:dtFimFat 	:= oConsulta:getDtFimFat()   
		::GuiaConsulta:HrInicFat := oConsulta:getHrIniFat()
		::GuiaConsulta:HrFimcFat := oConsulta:getHrFimFat()  
		::GuiaConsulta:TipIntR 	 := oConsulta:getTpInt()  
		::GuiaConsulta:Cid2 	 	:= oConsulta:getCid2() 
		::GuiaConsulta:Cid3 	 	:= oConsulta:getCid3() 
		::GuiaConsulta:Cid4 	 	:= oConsulta:getCid4() 
		::GuiaConsulta:CidObt 	:= oConsulta:getdiagObito() 
		::GuiaConsulta:NumDcViv	:= oConsulta:getdecNascVivo()
   		::GuiaConsulta:NumDcObt	:= oConsulta:getDecObito()
   		::GuiaConsulta:RegInt	:= PLSGETVINC('BTU_CDTERM', 'BQR', .F., '41', ALLTRIM(oConsulta:getRegInt()), .T. ) 
		::GuiaConsulta:Cid		:= oConsulta:getCid()
		::GuiaConsulta:IndDORN	:= IIF (Valtype(oConsulta:getIndDORN()) <> "C", AllTrim(STR(oConsulta:getIndDORN())), oConsulta:getIndDORN()) 
		
	EndIf			   
	   
	//Procedimentos
	::GuiaConsulta:Procedimentos := {}
	::GuiaConsulta:valTotHon := 0.0
	FOR nI := 1 TO LEN(oConsulta:getProcedimentos())
		AaDd( ::GuiaConsulta:Procedimentos, WsClassNew( "Procedimentos" ) )
		::GuiaConsulta:Procedimentos[nI]:SeqMov	:=  oConsulta:getProcedimentos()[nI]:getSeqMov() 
		
		cPadBkp := PLSGETVINC("BTU_CDTERM", "BR4", .F., "87",  oConsulta:getProcedimentos()[nI]:getCodPad(),.T.)
		
		::GuiaConsulta:Procedimentos[nI]:CodPad	:=  IIF (Valtype(cPadBkp) <> "C", STR(cPadBkp), cPadBkp) //Não remover, pois estava dando erro, sendo considerado como númerico
		::GuiaConsulta:Procedimentos[nI]:SlvPad	:=  oConsulta:getProcedimentos()[nI]:getSlvPad() 
		::GuiaConsulta:Procedimentos[nI]:CodPro	:=  IIF(PLSGETVINC("BTU_CDTERM", "BR8", .F., cPadBkp,  Alltrim(oConsulta:getProcedimentos()[nI]:getCodPad() + oConsulta:getProcedimentos()[nI]:getCodPro()), .F. ,aTabDup, @cPadBkp) == Alltrim(oConsulta:getProcedimentos()[nI]:getCodPad() + oConsulta:getProcedimentos()[nI]:getCodPro()), Alltrim(oConsulta:getProcedimentos()[nI]:getCodPro()), PLSGETVINC("BTU_CDTERM", "BR8", .F., cPadBkp,  Alltrim(oConsulta:getProcedimentos()[nI]:getCodPad() + oConsulta:getProcedimentos()[nI]:getCodPro()), .F. ,aTabDup, @cPadBkp) ) // oConsulta:getProcedimentos()[nI]:getCodPro()  
		::GuiaConsulta:Procedimentos[nI]:SlvPro :=  oConsulta:getProcedimentos()[nI]:getSlvPro() 
		::GuiaConsulta:Procedimentos[nI]:DesPro	:=  IIF(PLSGETVINC("BTQ_DESTER", "BR8", .F., ::GuiaConsulta:Procedimentos[nI]:CodPad,  Alltrim(oConsulta:getProcedimentos()[nI]:getCodPad() + oConsulta:getProcedimentos()[nI]:getCodPro())) == Alltrim(oConsulta:getProcedimentos()[nI]:getCodPad() + oConsulta:getProcedimentos()[nI]:getCodPro()), Alltrim(oConsulta:getProcedimentos()[nI]:getDesPro()), PLSGETVINC("BTQ_DESTER", "BR8", .F., ::GuiaConsulta:Procedimentos[nI]:CodPad,  Alltrim(oConsulta:getProcedimentos()[nI]:getCodPad() + oConsulta:getProcedimentos()[nI]:getCodPro())) ) // oConsulta:getProcedimentos()[nI]:getDesPro() 	 	
		::GuiaConsulta:Procedimentos[nI]:Nivel 	:=  oConsulta:getProcedimentos()[nI]:getNivel()  
		::GuiaConsulta:Procedimentos[nI]:VlrApr	:=  oConsulta:getProcedimentos()[nI]:getVlrApr() 
		::GuiaConsulta:Procedimentos[nI]:VlrMan	:=  oConsulta:getProcedimentos()[nI]:getVlrMan() 
		::GuiaConsulta:Procedimentos[nI]:Qtd	:=  oConsulta:getProcedimentos()[nI]:getQtd() 	 
		::GuiaConsulta:Procedimentos[nI]:PerVia :=  oConsulta:getProcedimentos()[nI]:getPerVia() 		
		cCodVia := oConsulta:getProcedimentos()[nI]:getCodVia()
		If !Empty(cCodVia)
			::GuiaConsulta:Procedimentos[nI]:CodVia :=  PLSGETVINC("BTU_CDTERM", "BGR", .F., "61",  cCodVia )//oConsulta:getProcedimentos()[nI]:getCodVia()
		Else
			::GuiaConsulta:Procedimentos[nI]:CodVia := "" 	 
		EndIf		
		::GuiaConsulta:Procedimentos[nI]:ProcCirurgico 	:=  oConsulta:getProcedimentos()[nI]:getProcCirurgico()  
		::GuiaConsulta:Procedimentos[nI]:DtPro	:=  oConsulta:getProcedimentos()[nI]:getDtPro() 
		::GuiaConsulta:Procedimentos[nI]:HorIni :=  oConsulta:getProcedimentos()[nI]:getHorIni() 	 	                            	 
		::GuiaConsulta:Procedimentos[nI]:HorFim :=  oConsulta:getProcedimentos()[nI]:getHorFim()  
		::GuiaConsulta:Procedimentos[nI]:IncAut	:=  oConsulta:getProcedimentos()[nI]:getIncAut() 
		::GuiaConsulta:Procedimentos[nI]:Status :=  oConsulta:getProcedimentos()[nI]:getStatus()                 
 		::GuiaConsulta:Procedimentos[nI]:ChvNiv :=  oConsulta:getProcedimentos()[nI]:getChvNiv() 	 
		::GuiaConsulta:Procedimentos[nI]:NivAut :=  oConsulta:getProcedimentos()[nI]:getNivAut()  
		::GuiaConsulta:Procedimentos[nI]:CodTab	:=  oConsulta:getProcedimentos()[nI]:getCodTab() 
		::GuiaConsulta:Procedimentos[nI]:AliaTb :=  oConsulta:getProcedimentos()[nI]:getAliaTb()      	
 		::GuiaConsulta:Procedimentos[nI]:BloqPag :=  oConsulta:getProcedimentos()[nI]:getBloqPag() 	 
		::GuiaConsulta:Procedimentos[nI]:Interc :=  oConsulta:getProcedimentos()[nI]:getInterc()  
		::GuiaConsulta:Procedimentos[nI]:TipInt	:=  oConsulta:getProcedimentos()[nI]:getTipInt() 
		::GuiaConsulta:Procedimentos[nI]:PrPrRl	:=  oConsulta:getProcedimentos()[nI]:getPrPrRl()  
		::GuiaConsulta:Procedimentos[nI]:TipProc :=  oConsulta:getProcedimentos()[nI]:getTpProc()
		::GuiaConsulta:Procedimentos[nI]:TecUti	:= PLSGETVINC("BTU_CDTERM", "B0E", .F., "48",  oConsulta:getProcedimentos()[nI]:getTecUti())
		IF ::Odonto
			::GuiaConsulta:Procedimentos[nI]:DenReg	:=  oConsulta:getProcedimentos()[nI]:getDenReg() 
			::GuiaConsulta:Procedimentos[nI]:FaDent :=  oConsulta:getProcedimentos()[nI]:getFaDent()      	
	 		::GuiaConsulta:Procedimentos[nI]:DesReg :=  oConsulta:getProcedimentos()[nI]:getDesReg() 	 
			::GuiaConsulta:Procedimentos[nI]:FacDes :=  oConsulta:getProcedimentos()[nI]:getFacDes()  
			// Falta TIPATO ::GuiaConsulta:TipAte				:= oConsulta:getTipAte()
        ENDIF
        
        if(oConsulta:getProcedimentos()[nI]:getPrPrRl() > 1 .or. oConsulta:getProcedimentos()[nI]:getPrPrRl() < 1 )
        	::GuiaConsulta:valTotHon += ( (oConsulta:getProcedimentos()[nI]:getVlrApr() * oConsulta:getProcedimentos()[nI]:getQtd()) )
        else
        	::GuiaConsulta:valTotHon += ( ((oConsulta:getProcedimentos()[nI]:getVlrApr() * oConsulta:getProcedimentos()[nI]:getQtd()) * oConsulta:getProcedimentos()[nI]:getPrPrRl()) )
        endif		
        
    Next
    
    
    aExec := PLSREBD7PRO(::Recno, ::ResumoInt)
    ::GuiaConsulta:ProfisBD7 := {}
    For nI := 1 TO LEN (aExec)
    	AaDd( ::GuiaConsulta:ProfisBD7, WsClassNew( "SProfisBD7" ) )
    	//::GuiaConsulta:ProfisBD7 := WsClassNew("SProfisBD7")
    	::GuiaConsulta:ProfisBD7[nI]:Sequen := aExec[nI][1]
    	::GuiaConsulta:ProfisBD7[nI]:GrPart := PLSGETVINC("BTU_CDTERM", "BWT", .F., "35",  aExec[nI][2]) //aExec[nI][2]
    	::GuiaConsulta:ProfisBD7[nI]:DocPro := aExec[nI][3] //cpf
    	
    	::GuiaConsulta:ProfisBD7[nI]:NomProf := aExec[nI][4]
    	::GuiaConsulta:ProfisBD7[nI]:SigCr   := aExec[nI][5]
    	::GuiaConsulta:ProfisBD7[nI]:NumCr   := aExec[nI][6]    
    
     	::GuiaConsulta:ProfisBD7[nI]:EstProf := aExec[nI][7]
    	::GuiaConsulta:ProfisBD7[nI]:EspProf := aExec[nI][8]
    	::GuiaConsulta:ProfisBD7[nI]:CdProf  := aExec[nI][9] 
    	::GuiaConsulta:ProfisBD7[nI]:NomEsp  := aExec[nI][10] 
    	::GuiaConsulta:ProfisBD7[nI]:Cbos 	  := aExec[nI][11]
    	      
    Next
else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
endIf

restArea( aArea )

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} CarregaOutDesp
Metodo para preencher uma guia de outras despesas a partir do recno da guia referenciada
@author Karine Riquena Limp
@since 29/06/2016
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD CarregaOutDesp WSRECEIVE UserCode, NumGuiRef, TpGuiRef, RecGuiRef  WSSEND GuiaOutDesp WSSERVICE PLSGUIAS
local aArea	      	:= GetArea()
local lRet          := .T.
local oObjControl   := CO_Guia():New()
local oOutrasDesp   := nil
local nI			:= 1
local aTabDup       := PlsBusTerDup(SuperGetMv("MV_TISSCAB", .F. ,"87"))
local cPadBkp		:= ""
local cCnes			:= ""
//--------------------------------------------------------------------------
// Checa rotina														   
//--------------------------------------------------------------------------
if PrtChkUser( ::UserCode , "PLSGUIAS", "CarregaOutDesp" )
	oOutrasDesp := oObjControl:loadOutrasDesp(val(::RecGuiRef), ::NumGuiRef, ::TpGuiRef)
	
	::GuiaOutDesp 			:= WsClassNew( "SOutrasDesp" )
	
	::GuiaOutDesp:RegAns 	:= oOutrasDesp:getRegAns() 	 
	::GuiaOutDesp:NumGuiRef := oOutrasDesp:getNumGuiRef()
	::GuiaOutDesp:Cid 		:= oOutrasDesp:getCid()
	::GuiaOutDesp:AteRn 	:= oOutrasDesp:getAteRn()
	
	if ::TpGuiRef == "5"
		::GuiaOutDesp:dtIniFat 	:= oOutrasDesp:getDtIniFat() 	 
		::GuiaOutDesp:dtFimFat  := oOutrasDesp:getDtFimFat()
	endif
	
	//Contratado Executante
	::GuiaOutDesp:ContExec	:= WsClassNew("SContratado")		
	::GuiaOutDesp:ContExec:CodRda     := oOutrasDesp:getContExec():getCodRda() 
	::GuiaOutDesp:ContExec:OpeRda     := oOutrasDesp:getContExec():getOpeRda()   
	::GuiaOutDesp:ContExec:NomRda     := oOutrasDesp:getContExec():getNomRda()  
	::GuiaOutDesp:ContExec:TipRda     := oOutrasDesp:getContExec():getTipRda()   
	::GuiaOutDesp:ContExec:CodLoc     := oOutrasDesp:getContExec():getCodLoc()  
	::GuiaOutDesp:ContExec:Local      := oOutrasDesp:getContExec():getLocal()  
	::GuiaOutDesp:ContExec:CodEsp     := oOutrasDesp:getContExec():getCodEsp() 
	::GuiaOutDesp:ContExec:CpfCnpjRda := oOutrasDesp:getContExec():getCpfCnpjRda()
	::GuiaOutDesp:ContExec:DesLoc     := oOutrasDesp:getContExec():getDesLoc()
	::GuiaOutDesp:ContExec:EndLoc     := oOutrasDesp:getContExec():getEndLoc()
	::GuiaOutDesp:ContExec:TipPre     := oOutrasDesp:getContExec():getTipPre()
	
	cCnes := oOutrasDesp:getContExec():getCnes()
	If Empty(cCnes)
		BAU->(DbSetOrder(4))
		MsSeek(xFilial("BAU") + Alltrim(::GuiaOutDesp:ContExec:CpfCnpjRda))
		
		
		BB8->( DbSetOrder(1) )
	    BB8->( MsSeek( xFilial("BB8")+ BAU->BAU_CODIGO + oOutrasDesp:getCodOpe() +  oOutrasDesp:getContExec():getCodLoc() ) )
	    
		//cCnes := Alltrim(BAU->BAU_CNES)
		cCnes := Alltrim(BB8->BB8_CNES)		
		
		if empty(cCnes)
			cCnes := Alltrim(BAU->BAU_CNES)		
		EndIf
	EndIf
	::GuiaOutDesp:ContExec:Cnes       := cCnes
	   
	//Procedimentos
	::GuiaOutDesp:Procedimentos := {}
	for nI := 1 to len(oOutrasDesp:getProcedimentos())
		aAdd( ::GuiaOutDesp:Procedimentos, WsClassNew( "Procedimentos" ) )
		
		cPadBkp := PLSGETVINC("BTU_CDTERM", "BR4", .F., "87",  oOutrasDesp:getProcedimentos()[nI]:getCodPad(),.T.)		
		
		::GuiaOutDesp:Procedimentos[nI]:SeqMov	:=  oOutrasDesp:getProcedimentos()[nI]:getSeqMov() 		
		::GuiaOutDesp:Procedimentos[nI]:CodPad	:=	IIF (Valtype(cPadBkp) <> "C", STR(cPadBkp), cPadBkp) //Não remover, pois estava dando erro, sendo considerado como númerico
		::GuiaOutDesp:Procedimentos[nI]:SlvPad	:=	oOutrasDesp:getProcedimentos()[nI]:getSlvPad() 
		::GuiaOutDesp:Procedimentos[nI]:CodPro  :=  IIF(PLSGETVINC("BTU_CDTERM", "BR8", .F., cPadBkp,  Alltrim(oOutrasDesp:getProcedimentos()[nI]:getCodPad() + oOutrasDesp:getProcedimentos()[nI]:getCodPro()), .F. ,aTabDup, @cPadBkp) == Alltrim(oOutrasDesp:getProcedimentos()[nI]:getCodPad() + oOutrasDesp:getProcedimentos()[nI]:getCodPro()), Alltrim(oOutrasDesp:getProcedimentos()[nI]:getCodPro()), PLSGETVINC("BTU_CDTERM", "BR8", .F., cPadBkp,  Alltrim(oOutrasDesp:getProcedimentos()[nI]:getCodPad() + oOutrasDesp:getProcedimentos()[nI]:getCodPro()), .F. ,aTabDup, @cPadBkp) )//oOutrasDesp:getProcedimentos()[nI]:getCodPro()  
		::GuiaOutDesp:Procedimentos[nI]:SlvPro	:=	oOutrasDesp:getProcedimentos()[nI]:getSlvPro() 
		::GuiaOutDesp:Procedimentos[nI]:DesPro	:=	IIF(PLSGETVINC("BTQ_DESTER", "BR8", .F., ::GuiaOutDesp:Procedimentos[nI]:CodPad,  Alltrim(oOutrasDesp:getProcedimentos()[nI]:getCodPad() + oOutrasDesp:getProcedimentos()[nI]:getCodPro())) ==  Alltrim(oOutrasDesp:getProcedimentos()[nI]:getCodPad() + oOutrasDesp:getProcedimentos()[nI]:getCodPro()), Alltrim(oOutrasDesp:getProcedimentos()[nI]:getDesPro()), PLSGETVINC("BTQ_DESTER", "BR8", .F., ::GuiaOutDesp:Procedimentos[nI]:CodPad,  Alltrim(oOutrasDesp:getProcedimentos()[nI]:getCodPad() + oOutrasDesp:getProcedimentos()[nI]:getCodPro())) ) // oOutrasDesp:getProcedimentos()[nI]:getDesPro()
		::GuiaOutDesp:Procedimentos[nI]:VlrApr	:=	oOutrasDesp:getProcedimentos()[nI]:getVlrApr() 
		::GuiaOutDesp:Procedimentos[nI]:Qtd   	:=	oOutrasDesp:getProcedimentos()[nI]:getQtd() 	 
		::GuiaOutDesp:Procedimentos[nI]:DtPro 	:=	oOutrasDesp:getProcedimentos()[nI]:getDtPro() 
		::GuiaOutDesp:Procedimentos[nI]:HorIni	:=	oOutrasDesp:getProcedimentos()[nI]:getHorIni() 	 	                            	 
		::GuiaOutDesp:Procedimentos[nI]:HorFim	:=	oOutrasDesp:getProcedimentos()[nI]:getHorFim()  
		::GuiaOutDesp:Procedimentos[nI]:CodDes	:=	oOutrasDesp:getProcedimentos()[nI]:getCodDes() 
		::GuiaOutDesp:Procedimentos[nI]:AoDesp	:=	oOutrasDesp:getProcedimentos()[nI]:getAoDesp() 
		::GuiaOutDesp:Procedimentos[nI]:PrPrRl	:= 	oOutrasDesp:getProcedimentos()[nI]:getPrPrRl() 
		::GuiaOutDesp:Procedimentos[nI]:AutFun	:= 	oOutrasDesp:getProcedimentos()[nI]:getAutFun() 
		::GuiaOutDesp:Procedimentos[nI]:RefMatFab := oOutrasDesp:getProcedimentos()[nI]:getRefMatFab() 
		::GuiaOutDesp:Procedimentos[nI]:RegAnvisa := oOutrasDesp:getProcedimentos()[nI]:getRegAnvisa() 
		::GuiaOutDesp:Procedimentos[nI]:UniMedida := oOutrasDesp:getProcedimentos()[nI]:getUniMedida() 
		
    Next
else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
endIf

restArea( aArea )

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} grvOutDes
Metodo para gravar itens de uma guia de outras despesas
@author Karine Riquena Limp
@since 07/07/2016
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD grvOutDes WSRECEIVE UserCode, NumGuiRef, TpGuiRef, RecGuiRef, AddedItems, EditedItems, DeletedItems  WSSEND WSNULL WSSERVICE PLSGUIAS
local aArea			:= GetArea()
local nI			:= 1
local lRet			:= .T.
local oCoGuia		:= CO_Guia():New()
local aAddedItems 	:= Separa(::AddedItems, "&")
local aEditedItems	:= Separa(::EditedItems, "&")
local aDeletedItems := Separa(::DeletedItems, "&")
local aAddItem 		:= {}
local aEditItem 	:= {}
local aAux  		:= {}
local aAux1 		:= {}
local aDelItem 		:= {}
local lRetorno 		:= .T.
local aCriticas 	:= {}
local aCritRet		:= {}
local aRet 			:= {}

local cCritica 		:= ""

local lNMultT		:= .f.
local lMudaFase		:= .f.

local nQtdP			:= 0
local nQtdPJbMF		:= GetNewPar("MV_JBPROFF",25)


if PrtChkUser( ::UserCode , "PLSGUIAS", "grvOutDes" )

	for nI := 1 to len(aAddedItems)						
		aAdd(aAddItem, depOutDesp(Separa(aAddedItems[nI], "$"))[1])		
	next nI
	
	for nI := 1 to len(aEditedItems)						
		
		aAux := {}
		aAux1 := depOutDesp(Separa(aEditedItems[nI], "$"))
		//adiciono a chave
		aAdd(aAux, aAux1[2])
		//adiciono os demais campos
		aAdd(aAux, aAux1[1])
		
		aAdd(aEditItem, aAux)
	next nI
	
	for nI := 1 to len(aDeletedItems)						
		aAdd(aDelItem, depOutDesp(Separa(aDeletedItems[nI], "$"))[2])	
	next nI
	
	aRet := oCoGuia:grvOutDes(val(::RecGuiRef), aAddItem, aEditItem, aDelItem, ::TpGuiRef)
	
	lRetorno := aRet[1]
	aCriticas := aRet[2]
	lMudaFase	:= aRet[3]
	
	nQtdP := oCoGuia:cntProced(val(::RecGuiRef))
			
	//Se quantidade de procedimentos da guia maior ou igual que o valor definido em parâmetro, é automático o uso de multithread
	//Se não, é verificado a configuração da RDA
	If nQtdP >= nQtdPJbMF
		lNMultT := .F.
	Else	 
		lNMultT := PLSExbCrOff(val(::RecGuiRef))
	EndIf	
		
	if lMudaFase
		if ( lNMultT ) //Se não trabalha com multithread
			aCriticas := PLSMDFSGDIG (::RecGuiRef, ::TpGuiRef )
			if !aCriticas[1] .AND. Len(aCriticas) > 2			
				cCritica := "<br>Foram encontradas críticas no processamento: <br>"
				for nI := 1 TO Len(aCriticas[3])
					if ( !Empty(aCriticas[3,nI,1]) )
						aRet := PLSRETCRI( AllTrim( aCriticas[3,nI,1]))
					if empty(aRet[1][2])
							aRet[1][1] := aCriticas[3][nI][1]
							aRet[1][2] := aCriticas[3][nI][2]
					endif
						
						//Evitar que coloque críticas repetidas para o mesmo procedimento, como a crítica de De/Para
						if ( Ascan(aCritRet, {|y| y[1] == aCriticas[3,nI,7] .AND. y[2] == aRet[1,1] }) == 0 ) 
							aAdd(aCritRet, {aCriticas[3,nI,7], aRet[1,1], PadR( AllTrim(aRet[1,2]),75 ) })	
						endif					
					endIf
				next	
			endIf
		elseif (!lNMultT) 
			PLSMDFSGDIG (::RecGuiRef, ::TpGuiRef, "S")
				endif
				
		If (len(aCritRet) > 0 )	
			For nI := 1 To len(aCritRet)
				cCritica += WCTextNeg( "Procedimento: "+ aCritRet[nI,1] + ' - ' + aCritRet[nI,2]+ " - " + aCritRet[nI,3])
			next
			aCritRet 	:= {}
			aCriticas	:= {}		
		EndIf	
	endif	
		
	if (lRetorno .and. !lNMultT .and. lMudaFase)
		::WSNULL := "true|warning|Guia está sendo gravada, pois o sistema está validando os dados da Guia."
	elseif ((lRetorno .and. Empty(cCritica)) .or. !lMudaFase)
		::WSNULL := "true|success|Guia gravada com sucesso"	
	elseif (lRetorno .and. !Empty(cCritica))
		::WSNULL := "true|fail| Guia gravada. <br>" + cCritica		
	else		
		::WSNULL := "true|fail|Ocorreu um erro ao realizar a gravação. Entre em contato com a operadora"
	endIf
	
else

	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
	
endIf

restArea( aArea )

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} depOutDesp
Faz o depara dos campos das outras despesas
@author Karine Riquena Limp
@since 07/07/2016
@version P12
/*/
//-------------------------------------------------------------------
static function depOutDesp(aItems)

local nJ := 1
local aAux := {}
local aVal := {}
local aKey := {}
local cPadBkp := ""
local cCodPad := ""
local cCodPro := ""
local aTabDup := PlsBusTerDup(SuperGetMv("MV_TISSCAB", .F. ,"87"))
local nPos 	:= 0

	for nJ := 1 to len(aItems)
			
		aVal := Separa(aItems[nJ], "=")
		
		//campos chave quando eh edicao/delecao
		if(aVal[1] $ "cCodPadKey,cCodProKey,cSeqMov")
			
			do case
						
				case aVal[1] == "cCodPadKey"
					
					aAdd(aKey,{"BD6_CODPAD", aVal[2] })
				
				case aVal[1] == "cCodProKey"
					
					aAdd(aKey,{"BD6_CODPRO", aVal[2] })
									
				case aVal[1] == "cSeqMov"
					
					aAdd(aKey,{"BD6_SEQUEN", aVal[2] })
					
			endCase
				 
		else
			
			do case
						
				case aVal[1] == "cCodDesp"
					
					aAdd(aAux,{"BX6_CODDES", aVal[2] })
								
				case aVal[1] == "dDtExe"	
				
					aAdd(aAux,{"BD6_DATPRO", ctod(aVal[2]) })
								
				case aVal[1] == "cHorIniSExe"
					
					aAdd(aAux,{"BD6_HORPRO", strTran(aVal[2], ":") })
							
				case aVal[1] == "cHorFimSExe"
					
					aAdd(aAux,{"BD6_HORFIM", strTran(aVal[2], ":") })
							
				case aVal[1] == "cCodPadSExe"
					
					cCodPad := aVal[2]
						
				case aVal[1] == "cCodProSExe"
					
					cCodPro := aVal[2]
						
				case aVal[1] == "cQtdSExe"
					
					aVal[2] := val(alltrim(aVal[2]))
					aAdd(aAux,{"BD6_QTDSOL", aVal[2] })
					aAdd(aAux,{"BD6_QTDPRO", aVal[2] })
							
				case aVal[1] == "nRedAcreSExe"
					
					aAdd(aAux,{"BD6_PRPRRL", Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100 })
								
				case aVal[1] == "nVlrUniSExe"
					
					aAdd(aAux,{"BD6_VLRAPR", Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100 })	
				
				case aVal[1] == "cRegAnvisa"
					
					aAdd(aAux,{"BX6_REGANV", aVal[2] })
					
				case aVal[1] == "cRefFabricante"
					
					aAdd(aAux,{"BD6_REFFED", aVal[2] })
					
				case aVal[1] == "cAutFuncEmp"
					
					aAdd(aAux,{"BX6_AUTFUN", aVal[2] })
					
				case aVal[1] == "cUnMedidaSExe"
					
					aAdd(aAux,{"BX6_CODUNM", aVal[2] })		
				
				case aVal[1] == "nVlrTotSExe"
				
					aAdd(aAux,{"BD6_VALORI", Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100 })					
			endcase
			
		endIf
	next nJ
	
	//faço o depara da tabela e do procedimento do depois pois o procedimento depende sempre da tabela		
	if(!empty(cCodPad) .and. !empty(cCodPro))

		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aAdd(aAux,{"BD6_CODPAD", cPadBkp })
		aAdd(aAux,{"BD6_CODPRO", allTrim(PLSVARVINC(cCodPad,'BR8',cCodPro,cCodPad+cCodPro,,aTabDup,@cPadBkp)) })
		
	elseif(!empty(cCodPad))
		
		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aAdd(aAux,{"BD6_CODPAD", cPadBkp })		
		
	endif
	
	if(len(aKey) > 0 )
	
		nPos := aScan(aKey, { |x| x[1] == "BD6_CODPAD" } )
		
		cCodPad := aKey[nPos][2]
		
		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aKey[nPos][2] := cPadBkp
		
		nPos := aScan(aKey, { |x| x[1] == "BD6_CODPRO" } )
		cCodPro := aKey[nPos][2]
			
		aKey[nPos][2] := allTrim(PLSVARVINC(cCodPad,'BR8',cCodPro,cCodPad+cCodPro,,aTabDup,@cPadBkp))
	
	endIf
	
return {aAux, aKey}

//-------------------------------------------------------------------
/*/{Protheus.doc} GravaOdonto
Metodo para preencher os dados da guia odontologica a partir de recno e string de campos alterados enviados.

@author Rodrigo Morgon
@since 08/07/2016
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD GrvOdonto WSRECEIVE UserCode, Recno, EditedCab, AddedItems, EditedItems, DeletedItems, TipoConfirm WSSEND WSNULL WSSERVICE PLSGUIAS

local nI		  	:= 1
local aArea	    	:= GetArea()
local aEditedCab	:= Separa(::EditedCab, ";")
local aAddedItems 	:= Separa(::AddedItems, "&")
local aEditedItems	:= Separa(::EditedItems, "&")
local aDeletedItems := Separa(::DeletedItems, "&")
local aAddItem 		:= {}
local aEditItem 	:= {}
local aAux  		:= {}
local aAux1 		:= {}
local aDelItem 		:= {}
local aCampoVal		:= ""
local aCampoCabec 	:= {}
local aCriticas		:= {}
local aCritRet		:= {}
local aRet			:= {}

local cRet			:= ""
local cCritica		:= ""

local lRet       	:= .T.
local lNMultT		:= .F.

local nQtdP			:= 0
local nQtdPJbMF		:= GetNewPar("MV_JBPROFF",25)

local oCoGuia		:= CO_Guia():New()

//--------------------------------------------------------------------------
// Checa rotina														   
//-------------------------------------------------------------------------
if PrtChkUser( ::UserCode , "PLSGUIAS", "GrvOdonto" )	
	
	for nI := 1 to len(aEditedCab)			
			if aEditedCab[nI] <> ""
			aCampoVal := Separa(aEditedCab[nI], "$")			
			if (len(aCampoVal) == 2 .and. aCampoVal[1] <> "" .and. aCampoVal[2] <> "")	
				Do Case
				   	Case aCampoVal[1] == 'cAtendRN'
				   	  aAdd(aCampoCabec,  {"BD5_ATERNA", aCampoVal[2]})
						
				   	Case aCampoVal[1] == 'cProSol'
				   	  aAdd(aCampoCabec,  {"BD5_CDPFSO", aCampoVal[2]})
												
				   	Case aCampoVal[1] == 'cCodSigSol'
				   	  aAdd(aCampoCabec,  {"BD5_SIGLA", aCampoVal[2]})
				
				   	Case aCampoVal[1] == 'cNumCrSol'
				   	  aAdd(aCampoCabec,  {"BD5_REGSOL", aCampoVal[2]})
				
				   	Case aCampoVal[1] == 'cEstSigSol'
				   	  aAdd(aCampoCabec,  {"BD5_ESTSOL", aCampoVal[2]})
		
				   	Case aCampoVal[1] == 'cCbosSol'
				   	  aAdd(aCampoCabec,  {"BD5_CODESP", SubString(aCampoVal[2],1,3)})
		
				   	Case aCampoVal[1] == 'cProExe'
				   	  aAdd(aCampoCabec,  {"BD5_CDPFRE", aCampoVal[2]})
			   
				   	Case aCampoVal[1] == 'cCnpjCpfExe'
				   	  aAdd(aCampoCabec,  {"BD5_CPFRDA", aCampoVal[2]})
				
				   	Case aCampoVal[1] == 'cNumCrExe'
				   	  aAdd(aCampoCabec,  {"BD5_REGEXE", aCampoVal[2]})
				
				   	Case aCampoVal[1] == 'cEstSigExe'
				   	  aAdd(aCampoCabec,  {"BD5_ESTEXE", aCampoVal[2]})	
				
				   	Case aCampoVal[1] == 'cCbosExe'
				   	  aAdd(aCampoCabec,  {"BD5_ESPEXE", SubString(aCampoVal[2],1,3)})			
				
				   	Case aCampoVal[1] == 'cTpAto'
				   	  aAdd(aCampoCabec,  {"BD5_TIPATO", alltrim(PLSVARVINC('51', nil, aCampoVal[2]))})
				   	  	
				   	Case aCampoVal[1] == 'dDtEmissao'
				   	  aAdd(aCampoCabec,  {"BD5_DATPRO", aCampoVal[2]})
		
			       Case aCampoVal[1] == 'cGuiaPrincipal'  
			      	  aadd(aCampoCabec, {"BD5_NRLBOR", aCampoVal[2]})
		
				   	Case aCampoVal[1] == 'cTpFat'
				   	  aAdd(aCampoCabec, {"BD5_TIPFAT", "T"})//alltrim(PLSVARVINC('55', nil, aCampoVal[2]))})
				  
				   	Case aCampoVal[1] == 'cTpDoe'   
					  aadd(aCampoCabec, {"BD5_TIPDOE", aCampoVal[2]})				  
			   
					Case aCampoVal[1] == 'cTmpDoe'
				  	  aadd(aCampoCabec, {"BD5_TPODOE", aCampoVal[2]})
				   
					Case aCampoVal[1] == 'cTmpDoeC'
				      aadd(aCampoCabec, {"BD5_UTPDOE", aCampoVal[2]})					      	  	  	 	   	 
				      
				   	Case aCampoVal[1] == 'cObs'
				   	   aadd(aCampoCabec, {"BD5_OBSGUI", SubStr(alltrim(aCampoVal[2]),1,250)})					      	  	  	 	   	 
				EndCase
				endif
			endif
		next nI		
	
	//Procedimentos incluídos na Guia
	for nI := 1 to len(aAddedItems)						
		aAdd(aAddItem, depOdonto(Separa(aAddedItems[nI], "$"))[1])		
	next nI
	
	//Procedimentos alterados na Guia
	for nI := 1 to len(aEditedItems)				
		aAux := {}
		aAux1 := depOdonto(Separa(aEditedItems[nI], "$"))
		
		//adiciono a chave
		aAdd(aAux, aAux1[2])
		//adiciono os demais campos
		aAdd(aAux, aAux1[1])
		
		aAdd(aEditItem, aAux)
	next nI
	
	//Procedimentos deletados da Guia
	for nI := 1 to len(aDeletedItems)						
		aAdd(aDelItem, depOdonto(Separa(aDeletedItems[nI], "$"))[2])	
	next nI	
	
	cRet := oCoGuia:grvAltOdon(val(::Recno), aCampoCabec, aAddItem, aEditItem, aDelItem)
	nQtdP := oCoGuia:cntProced(val(::Recno))

	//Se quantidade de procedimentos da guia maior ou igual que o valor definido em parâmetro, é automático o uso de multithread
	//Se não, é verificado a configuração da RDA
	If nQtdP >= nQtdPJbMF
		lNMultT := .F.
	Else	 
		lNMultT := PLSExbCrOff(val(::Recno))
	EndIf	
	
	If ( ::TipoConfirm == "1" .And. lNMultT ) //Se não trabalha com multithreasd
		aCriticas := PLSMDFSGDIG (::Recno, ::TipoConfirm)
		If !aCriticas[1] .AND. Len(aCriticas) > 2			
			cCritica := "Foram encontradas críticas no processo: <br>"
			For nI := 1 TO Len(aCriticas[3])
				If ( !Empty(aCriticas[3,nI,1]) )
					aRet := PLSRETCRI( AllTrim( aCriticas[3,nI,1]))
					If Empty(aRet[1][2])
						aRet[1][1] := aCriticas[3][nI][1]
						aRet[1][2] := aCriticas[3][nI][2]
					EndIf
					
					//Evitar que coloque críticas repetidas para o mesmo procedimento, como a crítica de De/Para
					if ( Ascan(aCritRet, {|y| y[1] == aCriticas[3,nI,7] .AND. y[2] == aRet[1,1] }) == 0 ) 
						aAdd(aCritRet, {aCriticas[3,nI,7], aRet[1,1], PadR( AllTrim(aRet[1,2]),75 ) })	
					endif					
				EndIf
			Next	
		EndIf
	Elseif (::TipoConfirm == "1" .And. !lNMultT) 
		PLSMDFSGDIG (::Recno, ::TipoConfirm, "S")
	EndIf
	
	If (len(aCritRet) > 0 )	
		For nI := 1 To len(aCritRet)
			cCritica += WCTextNeg( "Procedimento: "+ aCritRet[nI,1] + ' - ' + aCritRet[nI,2]+ " - " + aCritRet[nI,3])
		Next
		aCritRet 	:= {}
		aCriticas	:= {}		
	EndIf	
		
	if (!lNMultT .And. !Empty(cRet) .And. ::TipoConfirm == "1") //Trabalha com multithreads, mas garanto que não ocorreu erro na gravação, ao verificar o retorno do oCoGuia
		::WSNULL := "true|warning|Número da Guia gravada: " + cRet + "<br> Verifique a situação da guia em instantes na tela de Digitação de Contas, pois o sistema está validando os dados da Guia."
	elseif (!lNMultT .And. !Empty(cRet) .And. ::TipoConfirm <> "1") //Não Trabalha com multithreads, mas garanto que não ocorreu erro na gravação, ao verificar o retorno do oCoGuia
		::WSNULL := "true|success|Número da Guia gravada: " + cRet 
	elseif(!Empty(cRet)) .AND. Empty(cCritica)
		::WSNULL := "true|success|Guia gravada com sucesso. Número: " + cRet
	elseif !Empty(cCritica)
		::WSNULL := "true|warning|Número da Guia gravada: " + cRet + "<br>" + cCritica
	else 
		::WSNULL := "true|fail|Ocorreu um erro ao realizar a gravação. Entre em contato com a operadora"
	endIf	

else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
endIf

restArea( aArea )

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} GrvSADT 
Metodo para gravar os dados da guia sadt a partir de recno e string de campos alterados enviados.

@author Karine Riquena Limp
@since 29/08/2016
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD GrvSADT WSRECEIVE UserCode, Recno, EditedCab, AddedItems, EditedItems, DeletedItems, TipoConfirm WSSEND WSNULL WSSERVICE PLSGUIAS

local nI		  	:= 1
local aArea	    	:= GetArea()
local aEditedCab	:= Separa(::EditedCab, ";")
local aAddedItems 	:= Separa(::AddedItems, "&")
local aEditedItems	:= Separa(::EditedItems, "&")
local aDeletedItems := Separa(::DeletedItems, "&")
local aAddItem 		:= {}
local aEditItem 	:= {}
local aAux  		:= {}
local aAux1 		:= {}
local aDelItem 		:= {}
local aCampoVal		:= ""
local aCampoCabec 	:= {}
local aCriticas		:= {}
local aCritRet		:= {}
local cIndCliSol	:= ""
local nTaman		:= 0
local cCbosSol		:= ""
local cRet			:= ""
local cCritica		:= ""
local nJ			:= 0

local lRet       	:= .T.
local lNMultT		:= .F.

local nQtdP			:= 0
local nQtdPJbMF		:= GetNewPar("MV_JBPROFF",25)

local oCoGuia 		:= CO_Guia():New()
local lTiss4New 	:= BD5->(FieldPos("BD5_COBESP")) > 0 .and. BD5->(FieldPos("BD5_SAUOCU")) > 0 .AND. BD5->(FieldPos("BD5_TMREGA")) > 0 

Default ::TipoConfirm := "2"
//--------------------------------------------------------------------------
// Checa rotina														   
//-------------------------------------------------------------------------
if PrtChkUser( ::UserCode , "PLSGUIAS", "GrvSADT" )	
	
	for nI := 1 to len(aEditedCab)			
			if aEditedCab[nI] <> ""
				aCampoVal := Separa(aEditedCab[nI], "$")			
				if ( len(aCampoVal) == 2 .and. aCampoVal[1] <> "" .and. ( (aCampoVal[2] <> "") .or. ('dDtRlz' $  aCampoVal[1]) ) )	
					Do Case
				   		Case aCampoVal[1] == 'cAtendRN'

				   	  			aAdd(aCampoCabec,  {"BD5_ATERNA", aCampoVal[2]})
					  
				   		Case aCampoVal[1]  == 'cObs'				   
				   	  		
				   	  			aadd(aCampoCabec, {"BD5_OBSGUI", Alltrim(aCampoVal[2])})
						
					 	Case aCampoVal[1]  == 'cProSol'
		
						 		aAdd(aCampoCabec,  {"BD5_CDPFSO", aCampoVal[2] })
					   
						Case aCampoVal[1]  == 'cCodSigSol'
							  
						   		aAdd(aCampoCabec,  {"BD5_SIGLA", aCampoVal[2] })
						
						Case aCampoVal[1] == 'cNumCrSol'
							  
						   		aAdd(aCampoCabec,  {"BD5_REGSOL", aCampoVal[2]})
						
						Case aCampoVal[1] == 'cEstSigSol'
		
					   	 		aAdd(aCampoCabec,  {"BD5_ESTSOL", aCampoVal[2]})	
						
					   Case aCampoVal[1] == 'cCbosSol'
					
						  	cCbosSol := SubString(aCampoVal[2],1,3)				  
					   	  	aAdd(aCampoCabec,  {"BD5_ESPSOL", cCbosSol,1,3})			   	  
					   	  	aAdd(aCampoCabec,  {"BD5_CODESP", cCbosSol,1,3})		
						
					   Case aCampoVal[1] == 'cCarSolicit' 
							  
					   	  	aAdd(aCampoCabec,  {"BD5_TIPADM", aCampoVal[2]})				
						
					   Case aCampoVal[1] == 'dDtSolicit'
		
					   	  	aAdd(aCampoCabec,  {"BD5_DATSOL", ctod(aCampoVal[2])})
				
					   Case aCampoVal[1] == 'cIndCliSol'
					  	  	
					  	  	nTaman	 := (TamSX3("BD5_INDCLI")[1])
						  	cIndCliSol := aCampoVal[2]
					   	  	aAdd(aCampoCabec,  {"BD5_INDCLI", SubStr(AllTrim(cIndCliSol),1, nTaman) })
					   	  	aAdd(aCampoCabec,  {"BD5_INDCL2", IIF (Len(cIndCliSol) > nTaman, SubStr(cIndCliSol,nTaman+1,Len(cIndCliSol) ), "")})	
						  		  		  
					   Case aCampoVal[1] == 'cCnesExe'
		 
					   	  	aAdd(aCampoCabec,  {"BD5_CNES", aCampoVal[2] })
					
					   Case aCampoVal[1] == 'cTpAteExe'   //De/Para

					   	  	aAdd(aCampoCabec,  {"BD5_TIPATE", alltrim(PLSVARVINC('50', nil, aCampoVal[2]) ) })
					
					   Case aCampoVal[1] == 'cIndAcid'   //De/Para
					   
					   	  	aAdd(aCampoCabec,  {"BD5_INDACI", alltrim(PLSVARVINC('36', nil, aCampoVal[2]) ) })
				
					   Case aCampoVal[1] == 'cTpCon'    //De/Para

					   	  	aAdd(aCampoCabec,  {"BD5_TIPCON", alltrim(PLSVARVINC('52', nil, aCampoVal[2]) )})	
					
					   Case aCampoVal[1] == 'cTpSai'    //De/Para
					  		
					  		aAdd(aCampoCabec,  {"BD5_TIPSAI", alltrim( PLSVARVINC('39', nil, aCampoVal[2]) ) })	
						   	  	  
					   Case aCampoVal[1] == 'cTpDoe'   
		
						 	aadd(aCampoCabec, {"BD5_TIPDOE", aCampoVal[2]})				  
					   
					   Case aCampoVal[1] == 'cTmpDoe'
	
					  	  	aadd(aCampoCabec, {"BD5_TPODOE", aCampoVal[2]})
					   
				       Case aCampoVal[1] == 'cTmpDoeC'
		
				      	  	aadd(aCampoCabec, {"BD5_UTPDOE", aCampoVal[2]})		  
					
				       Case aCampoVal[1] == 'cNumInt'  
				       
				      	  	aadd(aCampoCabec, {"BD5_NRLBOR", aCampoVal[2]})	
				      	
				      	Case aCampoVal[1] == 'dDataCorDig' 	//A data do atendimento será atualizada sempre com a data do procedimento de menor data
				      		aadd(aCampoCabec, {"BD5_DATPRO", CtoD(aCampoVal[2])})		
				      	
				      	case 'dDtRlz' $  aCampoVal[1]
				      		if aCampoVal[1] == 'dDtRlz'
				      			aadd(aCampoCabec, {"BD5_DTRLZ", cToD(aCampoVal[2])})
				      		else 
				      			for nJ := 1 to 9
				      				if aCampoVal[1] == 'dDtRlz' + alltrim(STR(nJ))
				      					aadd(aCampoCabec, {"BD5_DTRLZ" + alltrim(STR(nJ)), ctod(aCampoVal[2])})	
				      					exit
				      				endif
				      			next
				      		endif 
							  
						//Campos novos TISS 4.00
						Case lTiss4New .and. aCampoVal[1]  == 'cCobertEsp'
							aadd(aCampoCabec, {"BD5_COBESP", aCampoVal[2]})

						Case lTiss4New .and. aCampoVal[1]  == 'cRegAtendim'
							aadd(aCampoCabec, {"BD5_TMREGA", aCampoVal[2]})

						Case lTiss4New .and. aCampoVal[1]  == 'cSaudeOcupac'
							aadd(aCampoCabec, {"BD5_SAUOCU", aCampoVal[2]})
		        	EndCase
				endif
			endif
		next nI		
	
	//Procedimentos incluídos na Guia
	for nI := 1 to len(aAddedItems)						
		aAdd(aAddItem, depSadt(Separa(aAddedItems[nI], "$"))[1])		
	next nI
	
	//Procedimentos alterados na Guia
	for nI := 1 to len(aEditedItems)				
		aAux := {}
		aAux1 := depSadt(Separa(aEditedItems[nI], "$"))
		
		//adiciono a chave
		aAdd(aAux, aAux1[2])
		//adiciono os demais campos
		aAdd(aAux, aAux1[1])
		
		aAdd(aEditItem, aAux)
	next nI
	
	//Procedimentos deletados da Guia
	for nI := 1 to len(aDeletedItems)						
		aAdd(aDelItem, depSadt(Separa(aDeletedItems[nI], "$"))[2])	
	next nI	
	
	cRet := oCoGuia:grvAltSadt(val(::Recno), aCampoCabec, aAddItem, aEditItem, aDelItem)
	nQtdP := oCoGuia:cntProced(val(::Recno))

	//Se quantidade de procedimentos da guia maior ou igual que o valor definido em parâmetro, é automático o uso de multithread
	//Se não, é verificado a configuração da RDA
	If nQtdP >= nQtdPJbMF
		lNMultT := .F.
	Else	 
		lNMultT := PLSExbCrOff(val(::Recno))
	EndIf	
	
	If ( ::TipoConfirm == "1" .And. lNMultT ) //Se não trabalha com multithreasd
		aCriticas := PLSMDFSGDIG (::Recno, ::TipoConfirm)
		If !aCriticas[1] .AND. Len(aCriticas) > 2			
			cCritica := "Foram encontradas críticas no processo: <br>"
			For nI := 1 TO Len(aCriticas[3])
				If ( !Empty(aCriticas[3,nI,1]) )
					aRet := PLSRETCRI( AllTrim( aCriticas[3,nI,1]))
					If Empty(aRet[1][2])
						aRet[1][1] := aCriticas[3][nI][1]
						aRet[1][2] := aCriticas[3][nI][2]
					EndIf
					
					//Evitar que coloque críticas repetidas para o mesmo procedimento, como a crítica de De/Para
					if ( Ascan(aCritRet, {|y| y[1] == aCriticas[3,nI,7] .AND. y[2] == aRet[1,1] }) == 0 ) 
						aAdd(aCritRet, {aCriticas[3,nI,7], aRet[1,1], PadR( AllTrim(aRet[1,2]),75 ) })	
					endif					
				EndIf
			Next	
		EndIf
	Elseif (::TipoConfirm == "1" .And. !lNMultT) 
		PLSMDFSGDIG (::Recno, ::TipoConfirm, "S")
	EndIf
	
	If (len(aCritRet) > 0 )	
		For nI := 1 To len(aCritRet)
			cCritica += WCTextNeg( "Procedimento: "+ aCritRet[nI,1] + ' - ' + aCritRet[nI,2]+ " - " + aCritRet[nI,3])
		Next
		aCritRet 	:= {}
		aCriticas	:= {}		
	EndIf	
		
	if (!lNMultT .And. !Empty(cRet) .And. ::TipoConfirm == "1") //Trabalha com multithreads, mas garanto que não ocorreu erro na gravação, ao verificar o retorno do oCoGuia
		::WSNULL := "true|warning|Número da Guia gravada: " + cRet + "<br> Verifique a situação da guia em instantes na tela de Digitação de Contas, pois o sistema está validando os dados da Guia."
	elseif (!lNMultT .And. !Empty(cRet) .And. ::TipoConfirm <> "1") //Não Trabalha com multithreads, mas garanto que não ocorreu erro na gravação, ao verificar o retorno do oCoGuia
		::WSNULL := "true|success|Número da Guia gravada: " + cRet 
	elseif(!Empty(cRet)) .AND. Empty(cCritica)
		::WSNULL := "true|success|Guia gravada com sucesso. Número: " + cRet
	elseif !Empty(cCritica)
		::WSNULL := "true|warning|Número da Guia gravada: " + cRet + "<br>" + cCritica
	else 
		::WSNULL := "true|fail|Ocorreu um erro ao realizar a gravação. Entre em contato com a operadora"
	endIf	

else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
endIf

restArea( aArea )

return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} GrvHON 
Metodo para gravar os dados da guia honorario a partir de recno e string de campos alterados enviados.

@author Karine Riquena Limp
@since 08/11/2016
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD GrvHON WSRECEIVE UserCode, Recno, EditedCab, AddedItems, EditedItems, DeletedItems, AddedExec, DeletedExec, TipoConfirm, TipGui, NumGuiRes WSSEND WSNULL WSSERVICE PLSGUIAS

local nI		  	:= 1

local aArea	    	:= GetArea()
local aEditedCab	:= Separa(::EditedCab, ";")
local aAddedItems 	:= Separa(::AddedItems, "&")
local aEditedItems	:= Separa(::EditedItems, "&")
local aDeletedItems := Separa(::DeletedItems, "&")
local aAddedExec 	:= Separa(::AddedExec, "&")
local aDeletedExec 	:= Separa(::DeletedExec, "&")
local aAddItem 		:= {}
local aEditItem 	:= {}
local aDelItem 		:= {}
local aAux  		:= {}
local aAux1 		:= {}
local aAddExec 		:= {}
local aDelExec 		:= {}
local aCampoVal		:= ""
local aCampoCabec 	:= {}
local lRet       	:= .T.

local oCoGuia 		:= CO_Guia():New()
local cNumGui		:= ""

local lNMultT		:= .F.
local nQtdP			:= 0
local cRet			:= ""
local cCritica		:= ""
local aCriticas		:= {}
local aCritRet		:= {}
local cAliasCab		:= {}
local nQtdPJbMF		:= GetNewPar("MV_JBPROFF",25)

Default ::TipoConfirm 	:= "2"
Default ::TipGui 		:= ""
Default ::NumGuiRes 	:= ""

cNumGui := AllTrim(StrTran(::NumGuiRes,";",""))

//--------------------------------------------------------------------------
// Checa rotina														   
//-------------------------------------------------------------------------
if PrtChkUser( ::UserCode , "PLSGUIAS", "GrvHON" )	
	
	if(::TipGui <> "5")
		for nI := 1 to len(aEditedCab)			
			
			if aEditedCab[nI] <> ""
				aCampoVal := Separa(aEditedCab[nI], "$")			
				
				if (len(aCampoVal) == 2 .and. aCampoVal[1] <> "" .and. aCampoVal[2] <> "")	
					
					Do Case
					
						Case aCampoVal[1] == 'cAtendRN'
							aAdd(aCampoCabec,  {"BD5_ATERNA", aCampoVal[2]})
						Case aCampoVal[1] == 'cCnpjCpfExe'
							aAdd(aCampoCabec,  {"BD5_CPFRDA", aCampoVal[2]})
						Case aCampoVal[1] == 'cNomeRdaExe'
							aAdd(aCampoCabec,  {"BD5_CODRDA", aCampoVal[2]})
						Case aCampoVal[1] == 'cCnesExe'
							aAdd(aCampoCabec,  {"BD5_CNES", aCampoVal[2]})
						Case aCampoVal[1] == 'dDataIniFat'
							aAdd(aCampoCabec,  {"BD5_DTFTIN", aCampoVal[2]})
						Case aCampoVal[1] == 'dDadaFimFat'
							aAdd(aCampoCabec,  {"BD5_DTFTFN", aCampoVal[2]}) 
						Case aCampoVal[1] == 'cObs'
							aAdd(aCampoCabec,  {"BD5_OBSGUI", aCampoVal[2]})
						Case aCampoVal[1] == 'dDataCorDig' 	//A data do atendimento será atualizada sempre com a data do procedimento de menor data
				      		aadd(aCampoCabec, {"BD5_DATPRO", CtoD(aCampoVal[2])})		
				   						      	  	 	   	 
		        	EndCase
				
				endif
			
			endif
		
		next nI		
	
	else
		
			for nI := 1 to len(aEditedCab)			
				
				if aEditedCab[nI] <> ""
					aCampoVal := Separa(aEditedCab[nI], "$")			
					
					if (len(aCampoVal) == 2 .and. aCampoVal[1] <> "" .and. aCampoVal[2] <> "")	
						
						Do Case				   			
						   	Case aCampoVal[1] == 'cAtendRN'	
						   		aAdd(aCampoCabec,  {"BE4_ATERNA", aCampoVal[2]})
							Case aCampoVal[1] == 'cCnes'	
								aAdd(aCampoCabec,  {"BE4_CNES", aCampoVal[2]})
							Case aCampoVal[1] == 'cCarSolicit'	
								aAdd(aCampoCabec,  {"BE4_TIPADM", alltrim(PLSVARVINC('23', nil, aCampoVal[2]) ) })
							Case aCampoVal[1] == 'cTipFaT'	
								aAdd(aCampoCabec,  {"BE4_TIPFAT", aCampoVal[2]})
							Case aCampoVal[1] == 'dDataIniFat'	
								aAdd(aCampoCabec,  {"BE4_DTINIF", aCampoVal[2]})
							Case aCampoVal[1] == 'dDataFimFat'	
								aAdd(aCampoCabec,  {"BE4_DTFIMF", aCampoVal[2]})
							Case aCampoVal[1] == 'cHorIniFat'
								aAdd(aCampoCabec,  {"BE4_HRINIF", aCampoVal[2]})	
							Case aCampoVal[1] == 'cHorFimFat'	
								aAdd(aCampoCabec,  {"BE4_HRFIMF", aCampoVal[2]})
							Case aCampoVal[1] == 'cTpIntern'
								aAdd(aCampoCabec,  {"BE4_TIPINT", alltrim(PLSVARVINC('57', nil, aCampoVal[2]) )})	
							Case aCampoVal[1] == 'cRegInter'
								aAdd(aCampoCabec,  {"BE4_REGINT", alltrim(PLSVARVINC('41', nil, aCampoVal[2]) )})	
							Case aCampoVal[1] == 'cCid'
								aAdd(aCampoCabec,  {"BE4_CID", aCampoVal[2]})
							Case aCampoVal[1] == 'cCid2'
								aAdd(aCampoCabec,  {"BE4_CIDSEC", aCampoVal[2]})	
							Case aCampoVal[1] == 'cCid3'	
								aAdd(aCampoCabec,  {"BE4_CID3", aCampoVal[2]})
							Case aCampoVal[1] == 'cCid4'
								aAdd(aCampoCabec,  {"BE4_CID4", aCampoVal[2]})	
							Case aCampoVal[1] == 'cIndAcid'	
								aAdd(aCampoCabec,  {"BE4_INDACI", alltrim(PLSVARVINC('36', nil, aCampoVal[2]) ) })
							Case aCampoVal[1] == 'cTpSai'	
								aAdd(aCampoCabec,  {"BE4_TIPALT", alltrim( PLSVARVINC('39', nil, aCampoVal[2]) ) })
							Case aCampoVal[1] == 'cNumDecVivo'		
								aAdd(aCampoCabec,  {"BE4_NRDCNV", aCampoVal[2]})
							Case aCampoVal[1] == 'cCidObt'	
								aAdd(aCampoCabec,  {"BE4_CIDOBT", aCampoVal[2]})
							Case aCampoVal[1] == 'cNumDecObt'	
								aAdd(aCampoCabec,  {"BE4_NRDCOB", aCampoVal[2]})
							Case aCampoVal[1] == 'cIndicRN'	   
								aAdd(aCampoCabec,  {"BE4_IDDORN", aCampoVal[2]})	  	 	   	 
							Case aCampoVal[1] == 'cObs'	 
								If ( Len(aCampoVal[2]) > 250)  
									aAdd(aCampoCabec,  {"BE4_MSG01", Substr(aCampoVal[2], 1,250)})	 	
									aAdd(aCampoCabec,  {"BE4_MSG02", Substr(aCampoVal[2], 251,500)})
								Else
									aAdd(aCampoCabec,  {"BE4_MSG01", aCampoVal[2]})	
								EndIf			   	 
							
							Case aCampoVal[1] == 'dDataCorDig' 	//A data do atendimento será atualizada sempre com a data do procedimento de menor data
				      			aadd(aCampoCabec, {"BE4_DATPRO", CtoD(aCampoVal[2])})	
									   	 
		        		EndCase

					
					endif
				
				endif
			
			next nI
			
	endIf		
	
	if !empty(cNumGui)
		
		BE4->( DbSetOrder(1) )//BE4_FILIAL+BE4_CODOPE+BE4_CODLDP+BE4_CODPEG+BE4_NUMERO+BE4_SITUAC+BE4_FASE                                                                                      
		If ( BE4->( DbSeek(xFilial("BE4")+cNumGui) ) )
			::Recno := str(BE4->(recno()))
		endif
		
		BE4->( DbSetOrder(1) ) //BE4_FILIAL+BE4_CODOPE+BE4_CODLDP+BE4_CODPEG+BE4_NUMERO+BE4_SITUAC+BE4_FASE
		If ( BE4->( DbSeek(xFilial("BE4")+alltrim(BE4->BE4_GUIINT)) ) )
	
			//Atualiza cabeçalho do BE4 - Copiar da solicitação
			
			aAdd(aCampoCabec,  {"BE4_PRVINT", BE4->BE4_PRVINT })
			
			
			aAdd(aCampoCabec,  {"BE4_SENHA",  BE4->BE4_SENHA  })
			
			aAdd(aCampoCabec,  {"BE4_TIPUSR", BE4->BE4_TIPUSR })
			aAdd(aCampoCabec,  {"BE4_DIASIN", BE4->BE4_DIASIN })
			aAdd(aCampoCabec,  {"BE4_REGSOL", BE4->BE4_REGSOL })
			aAdd(aCampoCabec,  {"BE4_ESPSOL", BE4->BE4_ESPSOL }) 
			aAdd(aCampoCabec,  {"BE4_NOMSOL", BE4->BE4_NOMSOL })
			
			aAdd(aCampoCabec,  {"BE4_CDPFSO", BE4->BE4_CDPFSO })
			aAdd(aCampoCabec,  {"BE4_DTALTA", BE4->BE4_DTALTA })
			aAdd(aCampoCabec,  {"BE4_HRALTA", BE4->BE4_HRALTA })
			aAdd(aCampoCabec,  {"BE4_CGCRDA", BE4->BE4_CGCRDA })
			aAdd(aCampoCabec,  {"BE4_TIPPRE", BE4->BE4_TIPPRE })
			aAdd(aCampoCabec,  {"BE4_DIASSO", BE4->BE4_DIASSO })
			aAdd(aCampoCabec,  {"BE4_TRACON", BE4->BE4_TRACON })
		endif
		
		BE4->(DbGoto(val(::Recno)))
				
	endif
	 
	//Procedimentos incluídos na Guia
	for nI := 1 to len(aAddedItems)						
		aAdd(aAddItem, depSadt(Separa(aAddedItems[nI], "$"))[1])		
	next nI
	
	//Procedimentos alterados na Guia
	for nI := 1 to len(aEditedItems)				
		aAux := {}
		aAux1 := depSadt(Separa(aEditedItems[nI], "$"))
		
		//adiciono a chave
		aAdd(aAux, aAux1[2])
		//adiciono os demais campos
		aAdd(aAux, aAux1[1])
		
		aAdd(aEditItem, aAux)
	next nI
	
	//Procedimentos deletados da Guia
	for nI := 1 to len(aDeletedItems)						
		aAdd(aDelItem, depSadt(Separa(aDeletedItems[nI], "$"))[2])	
	next nI
	
	//Executantes incluídos na Guia
	for nI := 1 to len(aAddedExec)						
		aAdd(aAddExec, depExec(Separa(aAddedExec[nI], "$")))		
	next nI
	
	//Executantes deletados da Guia
	for nI := 1 to len(aDeletedExec)						
		aAdd(aDelExec, depExec(Separa(aDeletedExec[nI], "$")))	
	next nI	
	
	if(::TipGui <> "5")
		cAliasCab := "BD5"
	else
		cAliasCab := "BE4"
	endif

	cRet := oCoGuia:grvAltHon(val(::Recno), aCampoCabec, aAddItem, aEditItem, aDelItem, aAddExec, aDelExec, ::TipGui)
	nQtdP := oCoGuia:cntProced(val(::Recno),, cAliasCab)
	
	//Se quantidade de procedimentos da guia maior ou igual que o valor definido em parâmetro, é automático o uso de multithread
	//Se não, é verificado a configuração da RDA
	If nQtdP >= nQtdPJbMF
		lNMultT := .F.
	Else	 
		lNMultT := PLSExbCrOff(val(::Recno), cAliasCab)
	EndIf	
	
	If ( ::TipoConfirm == "1" .And. lNMultT ) //Se não trabalha com multithreasd
		aCriticas := PLSMDFSGDIG (::Recno, ::TipGui)
		If !aCriticas[1] .AND. Len(aCriticas) > 2			
			cCritica := "Foram encontradas críticas no processo: <br>"
			For nI := 1 TO Len(aCriticas[3])
				If ( !Empty(aCriticas[3,nI,1]) )
					aRet := PLSRETCRI( AllTrim( aCriticas[3,nI,1]))
					If Empty(aRet[1][2])
						aRet[1][1] := aCriticas[3][nI][1]
						aRet[1][2] := aCriticas[3][nI][2]
					EndIf
					
					//Evitar que coloque críticas repetidas para o mesmo procedimento, como a crítica de De/Para
					if ( Ascan(aCritRet, {|y| y[1] == aCriticas[3,nI,7] .AND. y[2] == aRet[1,1] }) == 0 ) 
						aAdd(aCritRet, {aCriticas[3,nI,7], aRet[1,1], PadR( AllTrim(aRet[1,2]),75 ) })	
					endif					
				EndIf
			Next	
		EndIf
	Elseif (::TipoConfirm == "1" .And. !lNMultT) 
		PLSMDFSGDIG (::Recno, ::TipGui, "S")
	EndIf
	
	
	If (len(aCritRet) > 0 )	
		For nI := 1 To len(aCritRet)
			cCritica += WCTextNeg( "Procedimento: "+ aCritRet[nI,1] + ' - ' + aCritRet[nI,2]+ " - " + aCritRet[nI,3])
		Next
		aCritRet 	:= {}
		aCriticas	:= {}		
	EndIf	
		
	if (!lNMultT .And. !Empty(cRet) .And. ::TipoConfirm == "1") //Trabalha com multithreads, mas garanto que não ocorreu erro na gravação, ao verificar o retorno do oCoGuia
		::WSNULL := "true|warning|Número da Guia gravada: " + cRet + "<br> Verifique a situação da guia em instantes na tela de Digitação de Contas, pois o sistema está validando os dados da Guia."
	elseif (!lNMultT .And. !Empty(cRet) .And. ::TipoConfirm <> "1") //Não Trabalha com multithreads, mas garanto que não ocorreu erro na gravação, ao verificar o retorno do oCoGuia
		::WSNULL := "true|success|Número da Guia gravada: " + cRet 
	elseif(!Empty(cRet)) .AND. Empty(cCritica)
		::WSNULL := "true|success|Guia gravada com sucesso. Número: " + cRet
	elseif !Empty(cCritica)
		::WSNULL := "true|warning|Número da Guia gravada: " + cRet + "<br>" + cCritica
	else 
		::WSNULL := "true|fail|Ocorreu um erro ao realizar a gravação. Entre em contato com a operadora"
	endIf	
	
else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
endIf

restArea( aArea )

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} depOdonto
Faz o depara dos campos da guia odontologica
@author Rodrigo Morgon
@since 07/07/2016
@version P12
/*/
//-------------------------------------------------------------------
static function depOdonto(aItems)

local nJ := 1
local aAux := {}
local aVal := {}
local aKey := {}
local cPadBkp := ""
local cCodPad := ""
local cCodPro := ""
local aTabDup := PlsBusTerDup(SuperGetMv("MV_TISSCAB", .F. ,"87"))
local nPos 	:= 0
local nVlrApr := 0
local nQtdPro := 0

	for nJ := 1 to len(aItems)			
		aVal := Separa(aItems[nJ], "=")
		
		//campos chave quando eh edicao/delecao
		if(aVal[1] $ "cCodPadKey,cCodProKey,cDentRegKey,cFaceKey,cSeqMov")			
			do case						
				case aVal[1] == "cCodPadKey"					
					aAdd(aKey,{"BD6_CODPAD", aVal[2] })				
				case aVal[1] == "cCodProKey"					
					aAdd(aKey,{"BD6_CODPRO", aVal[2] })
				case aVal[1] == "cDentRegKey"					
					aAdd(aKey,{"BD6_DENREG", aVal[2] })
				case aVal[1] == "cFaceKey"					
					aAdd(aKey,{"BD6_FADENT", aVal[2] })											
				case aVal[1] == "cSeqMov"					
					aAdd(aKey,{"BD6_SEQUEN", aVal[2] })					
			endCase				 
		else			
			do case				
				case aVal[1] == "cAutSE"			
					//aAdd(aAux,{"", aVal[2] }) 
				case aVal[1] == "cCodNeg"					
					//aAdd(aAux,{"", aVal[2] })
				case aVal[1] == "cCodPadSE"					
					cCodPad := aVal[2]						
				case aVal[1] == "cCodProSE"					
					cCodPro := aVal[2]			
				case aVal[1] == "cDenteReg"					
					aAdd(aAux,{"BD6_DENREG", aVal[2] })
				case aVal[1] == "cFaceNova"					
					aAdd(aAux,{"BD6_FADENT", aVal[2] })		
				case aVal[1] == "cQtdSE"					
					aVal[2] := val(alltrim(aVal[2]))
					aAdd(aAux,{"BD6_QTDSOL", aVal[2] })
					aAdd(aAux,{"BD6_QTDPRO", aVal[2] })	
					nQtdPro := aVal[2]															
				case aVal[1] == "dDtExe"					
					aAdd(aAux,{"BD6_DATPRO", ctod(aVal[2]) })						
				case aVal[1] == "nVlrUniSE"					
					aAdd(aAux,{"BD6_VLRAPR", Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100 })
					nVlrApr := Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100											
			endcase			
		endIf
	next nJ
	
	if(nVlrApr > 0 .AND. nQtdPro > 0)
		AAdd(aAux,{"BD6_VALORI", (nVlrApr * nQtdPro) })
	endif
	//faço o depara da tabela e do procedimento do depois pois o procedimento depende sempre da tabela		
	if(!empty(cCodPad) .and. !empty(cCodPro))
		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aAdd(aAux,{"BD6_CODPAD", cPadBkp })
		aAdd(aAux,{"BD6_CODPRO", allTrim(PLSVARVINC(cCodPad,'BR8',cCodPro,cCodPad+cCodPro,,aTabDup,@cPadBkp)) })		
	elseif(!empty(cCodPad))		
		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aAdd(aAux,{"BD6_CODPAD", cPadBkp })		
	endif
	
	if(len(aKey) > 0 )	
		nPos := aScan(aKey, { |x| x[1] == "BD6_CODPAD" } )		
		
		cCodPad := aKey[nPos][2]		
		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aKey[nPos][2] := cPadBkp	
		
		nPos := aScan(aKey, { |x| x[1] == "BD6_CODPRO" } )
		
		cCodPro := aKey[nPos][2]			
		aKey[nPos][2] := allTrim(PLSVARVINC(cCodPad,'BR8',cCodPro,cCodPad+cCodPro,,aTabDup,@cPadBkp))	
	endIf
	
return {aAux, aKey}

//-------------------------------------------------------------------
/*/{Protheus.doc} depSadt
Faz o depara dos campos da guia SP/SADT
@author Karine Riquena Limp
@since 26/08/2016
@version P12
/*/
//-------------------------------------------------------------------
static function depSadt(aItems)

local nJ := 1
local aAux := {}
local aVal := {}
local aKey := {}
local cPadBkp := ""
local cCodPad := ""
local cCodPro := ""
local aTabDup := PlsBusTerDup(SuperGetMv("MV_TISSCAB", .F. ,"87"))
local nPos 	:= 0
local nRedAcr	:= 0
local nVlrApr	:= 0
Local nQtdPro	:= 1
Local lRedAlt	:= .f.
Local lVlrAlt	:= .f.

	for nJ := 1 to len(aItems)
			
		aVal := Separa(aItems[nJ], "=")
		
		//campos chave quando eh edicao/delecao
		if(aVal[1] == "cCodPadKey" .OR. aVal[1] == "cCodProKey" .OR. aVal[1] == "cSeqMov")
			
			do case
						
				case aVal[1] == "cCodPadKey"
					
					aAdd(aKey,{"BD6_CODPAD", aVal[2] })
				
				case aVal[1] == "cCodProKey"
					
					aAdd(aKey,{"BD6_CODPRO", aVal[2] })
									
				case aVal[1] == "cSeqMov"
					
					aAdd(aKey,{"BD6_SEQUEN", aVal[2] })
					
			endCase
				 
		else
			
			do case
														
				case aVal[1] == "dDtExePro"	
				
					aAdd(aAux,{"BD6_DATPRO", ctod(aVal[2]) })
								
				case aVal[1] == "cHorIni"
					
					aAdd(aAux,{"BD6_HORPRO", strTran(aVal[2], ":") })
							
				case aVal[1] == "cHorFim"
					
					aAdd(aAux,{"BD6_HORFIM", strTran(aVal[2], ":") })
							
				case aVal[1] == "cCodPad"
					
					cCodPad := aVal[2]
						
				case aVal[1] == "cCodPro"
					
					cCodPro := aVal[2]
						
				case aVal[1] == "nQtdSol"
				
					aVal[2] := val(alltrim(aVal[2]))
					nQtdPro := aVal[2]
					aAdd(aAux,{"BD6_QTDSOL", aVal[2] })
					aAdd(aAux,{"BD6_QTDPRO", aVal[2] })							
							
				case aVal[1] == "nRedAcre"
					
					aAdd(aAux,{"BD6_PRPRRL", Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100 })
					nRedAcr := Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100
					lRedAlt := .t.
								
				case aVal[1] == "nVlrApr"
					nVlrApr := Val(StrTran(StrTran(aVal[2], ",", ""), ".", ""))/100
					lVlrAlt := .t.
					
				case aVal[1] == "cTecUt"
					
					aVal[2] := alltrim(PLSVARVINC('48', nil, aVal[2]) )
					aAdd(aAux,{"BD6_TECUTI", aVal[2] })		
				
				case aVal[1] == "cViaAc"
					
					aAdd(aAux,{"BD6_VIA", aVal[2] })	
					aAdd(aAux,{"BD6_PERVIA", plRtPerV(aVal[2])})	
					
				case aVal[1] == "sequen"	 // sequen de tela do grid para vincular os profissionais executantes
				
					aAdd(aAux,{"TELA_SEQ", aVal[2] })	
													
			endcase
			
		endIf
	next nJ

	//Caso o valor unitário ou redução acréscimo tenham sido alterados, devemos calcular, para gerar o valor da BD6_VLRAPR
	if ( nVlrApr > 0 .And. nRedAcr > 0)
		aAdd(aAux,{"BD6_VLRAPR", (nVlrApr * nRedAcr) })	
		Aadd(aAux,{"BD6_VALORI", (nVlrApr * nRedAcr * nQtdPro) })
	elseif (lVlrAlt .or. lRedAlt)
		aAdd(aAux,{"BD6_VLRAPR", (nVlrApr) })
		AAdd(aAux,{"BD6_VALORI", (nVlrApr * nQtdPro) })
	endif	
	
	//faço o depara da tabela e do procedimento do depois pois o procedimento depende sempre da tabela		
	if(! empty(cCodPad) .and. ! empty(cCodPro))

		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aAdd(aAux,{"BD6_CODPAD", cPadBkp })
		aAdd(aAux,{"BD6_CODPRO", allTrim(PLSVARVINC(cCodPad,'BR8',cCodPro,cCodPad+cCodPro,,aTabDup,@cPadBkp)) })
		
	elseif(!empty(cCodPad))
		
		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aAdd(aAux,{"BD6_CODPAD", cPadBkp })		
		
	endif
	
	if(len(aKey) > 0 )
	
		nPos := aScan(aKey, { |x| x[1] == "BD6_CODPAD" } )
		
		cCodPad := aKey[nPos][2]
		
		cPadBkp := allTrim(PLSVARVINC('87','BR4', cCodPad))
		aKey[nPos][2] := cPadBkp
		
		nPos := aScan(aKey, { |x| x[1] == "BD6_CODPRO" } )
		cCodPro := aKey[nPos][2]
			
		aKey[nPos][2] := allTrim(PLSVARVINC(cCodPad,'BR8',cCodPro,cCodPad+cCodPro,,aTabDup,@cPadBkp))
	
	endIf
	
	
return {aAux, aKey}

//-------------------------------------------------------------------
/*/{Protheus.doc} depExec
Faz o depara dos campos de executantes da guia de Honorarios
@author Karine Riquena Limp
@since 09/11/2016
@version P12
/*/
//-------------------------------------------------------------------
static function depExec(aItems)

local aAux 			:= {}
local nPos 			:= 0
local cGrPar 		:= ""
local cCbos			:= ""
local cCpfExe		:= ""
local cNomExe		:= ""
local cCodExe		:= ""
local cNumCrExe 	:= ""
local cCodSigExe 	:= ""
local cEstSigExe 	:= ""
local nSeqRef 		:= ""
local nTam 			:= 0

		nPos := aScan(aItems, { |x| "cGraPartExe" $ x })
		if(nPos > 0)
			nTam := tamsx3("BWT_CODPAR")[1]
			cGrPar := AllTrim(PLSVARVINC('35','BWT', Separa(aItems[nPos], "=")[2]))
			cGrPar := cGrPar + space(nTam - len(cGrPar))
		endIf
		
		nPos := aScan(aItems, { |x| "cCbosExe" $ x})
		if(nPos > 0)
			cCbos := AllTrim(PLSVARVINC('24','B0X', Separa(aItems[nPos], "=")[2]))	
		endIf
		
		nPos := aScan(aItems, { |x| "cCpfExe" $ x})
		if(nPos > 0)
			cCpfExe := Separa(aItems[nPos], "=")[2]
		endIf
		
		nPos := aScan(aItems, { |x| "cProExe" $ x})
		if(nPos > 0)
			cCodExe := Separa(aItems[nPos], "=")[2]
		endIf
		
		
		nPos := aScan(aItems, { |x| "cNomExe" $ x})
		if(nPos > 0)
			
			aAux := Separa(aItems[nPos], "=")[2]
			if len(aAux) > 0
				aAux := Separa(aAux, "*")
			
				if len(aAux) > 1
					cCodExe := aAux[1]
					cNomExe := aAux[2]
				endIf
				
			endIf
			
		endIf
		
		nPos := aScan(aItems, { |x| "cNumCrExe" $ x})
		if(nPos > 0)
			cNumCrExe := Separa(aItems[nPos], "=")[2]
		endIf
		
		nPos := aScan(aItems, { |x| "cCodSigExe" $ x})
		if(nPos > 0)
			cCodSigExe := Separa(aItems[nPos], "=")[2]
		endIf
		
		nPos := aScan(aItems, { |x| "cEstSigExe" $ x})
		if(nPos > 0)
			cEstSigExe := Separa(aItems[nPos], "=")[2]
		endIf
		
		nPos := aScan(aItems, { |x| "nSeqRef" $ x})
		if(nPos > 0)
			nSeqRef := Separa(aItems[nPos], "=")[2]
		endIf
				
		//O nSeqRef aqui é só o sequencial de tela, na gravação será trocado pelo sequen do procedimento gravado na BD6
		aAux := {cGrPar,cCpfExe,cNomExe,cNumCrExe,cCodSigExe,cEstSigExe,cCodExe,.T.,cCodExe,nSeqRef,cCbos}																

return aAux


//-------------------------------------------------------------------
/*/{Protheus.doc} VldExe 
Metodo para validar os executantes da guia

@author Francisco Edcarlo
@since 16/02/2017
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD VldExe WSRECEIVE UserCode, Executante WSSEND WSNULL WSSERVICE PLSGUIAS
local lRet 			:= .T.
local aVetTab  		:= {}
local aTpPIte 		:= {}
local cCodPad 		:= ::Executante:Procedimento:CodPad
local cCodPro 		:= ::Executante:Procedimento:CodPro
local dDatPro 		:= ::Executante:Procedimento:DtPro
local cCodRDA 		:= ::Executante:CodRda
local cCodEsp 		:= ::Executante:Profissional:Cbos
local cGrPar 		:= ::Executante:Profissional:GrPart
local nGrpPar 		:= ::Executante:QtGrPart
local cGrpParDePara := PLSVARVINC('35', "BWT", cGrPar)
local cOpeMov 		:= PLSINTPAD()
local lPart   		:= .F.
local cCodLoc 		:= ::Executante:CodLoc
local nFor 			:= 1
local nTotGrPar 	:= 0
PRIVATE aTabDup 	:= PlsBusTerDup(SuperGetMv("MV_TISSCAB",.F.,"87"))

if PrtChkUser( ::UserCode , "PLSGUIAS", "VldExe" )	
	//aRetab := PLSRetEPro(::Executante:Procedimento:CodPad,::Executante:Procedimento:CodPro,::Executante:CodRda,::Executante:Procedimento:DtPro,"","")
	
	
	cCodPad := AllTrim(PLSVARVINC('87','BR4',cCodPad))
	cCodPro := AllTrim(PLSVARVINC(::Executante:Procedimento:CodPad,'BR8', ::Executante:Procedimento:CodPro, cCodPad+::Executante:Procedimento:CodPro,,aTabDup,@CCODPAD))
	
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Participacao																³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	AaDd( aTpPIte,{ cGrPar,;
					cCodRDA,;
					"",;
					"",;
					"",;
					"",;
					"",;
					.T. } )
	
	aVetTab := PLSRETTAB(cCodPad,cCodPro,dDatPro,cOpeMov,cCodRDA,cCodEsp,NIL,;
				cCodLoc,dDatPro,NIL,NIL,NIL,nil,"2",NIL,NIL,NIL,NIL,NIL,nil,nil,NIL,NIL)
	
	If aVetTab[1]
		cAliasTab := aVetTab[4]
		cCodTab   := aVetTab[3]
		aCompo := PLSCOMEVE(aVetTab[3],cCodPad,cCodPro,cOpeMov,dDatPro)
	Endif
	
	lPart := .F.
	For nFor := 1 To Len(aCompo)
		If (alltrim(aCompo[nFor][16]) == alltrim(cGrPar) .or. alltrim(aCompo[nFor][16]) == alltrim(cGrpParDePara)) .OR. Empty(aCompo[nFor][16])
			nTotGrPar += 1
		EndIf
	Next
	
	If Val(nGrpPar) >= nTotGrPar
		lPart := .F.
	ElseIf !Empty(cGrPar)
		If !Empty(cCodTab) .and. PLSCHKGPA(cOpeMov,cCodTab,cCodPad,cCodPro,alltrim(cGrPar),,dToc(Date()))
			lPart := .T.
		Endif
	Else
		lPart := .T.
	Endif
	
	if(!lPart)
		::WSNULL := "Não é possível incluir o executante com o grau de participação indicado. (" + cGrPar +")"
	endIf	

else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
endIf

return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} GetObsAudito 
Método para retornar o texto imputado pelo auditor, após guia em auditoria, para exibir no Portal.
@since 12/2021
@version P12
/*/
//-------------------------------------------------------------------
WSMETHOD GetObsAudito WSRECEIVE UserCode, DadGuiAud  WSSEND WSNULL WSSERVICE PLSGUIAS
local lRet     	:= .t.
local cAliasG	:= ::DadGuiAud:AliMov
local cCodOpe  	:= ::DadGuiAud:CodOpe
local cAnoAut  	:= ::DadGuiAud:AnoAut
local cMesAut  	:= ::DadGuiAud:MesAut
local cNumAut  	:= ::DadGuiAud:NumAut
local cSeqProc 	:= ::DadGuiAud:SeqProc

if PrtChkUser( ::UserCode , "PLSGUIAS", "GetObsAudito" )
	::WSNULL := PlRetObsB72(cAliasG, cCodOpe, cAnoAut, cMesAut, cNumAut, cSeqProc)
else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
endif

return lRet
