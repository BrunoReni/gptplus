#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "AP5MAIL.CH"
#INCLUDE "PLSMGER.CH"
#INCLUDE "WSPLRECGLO.CH"
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³RECGLO   ³ Autor ³Rogerio Tabosa          ³ Data ³28.03.2012  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Web Service das funcionalidades de Recurso de Glosa do PLS   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao da estruturas da composicao da solicitacao					   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

WSSTRUCT RecGloDocs
	WSDATA Entidade	AS String OPTIONAL
	WSDATA CodEnt	AS String OPTIONAL
	WSDATA CodObj	AS String OPTIONAL
	WSDATA Objeto	AS String OPTIONAL
	WSDATA Descri	AS String OPTIONAL
ENDWSSTRUCT

// A partir daqui, estruturas
WSSTRUCT RecGloEvents
	WSDATA Protocolo	 AS String OPTIONAL // Codigo do protocolo da nova tentatica de Recurso de Glosa.
	WSDATA Sequencia	 AS String OPTIONAL // Sequencial que representa o numeral da tentativa.
	WSDATA DataRecurso	 AS Date   OPTIONAL // Data em que foi feita a tentativa.
	WSDATA StatusRecurso AS String OPTIONAL // Status do protocolo.
	WSDATA DescStatus    AS String OPTIONAL // Status do protocolo.
	WSDATA GuiaOpe		 AS String OPTIONAL // Codigo da operadora da guia gerada quando o recurso de glosa é acadado.
	WSDATA GuiaLdp		 AS String OPTIONAL // Codigo do local de digitação da guia gerada quando o recurso de glosa é acadado.
	WSDATA GuiaPeg		 AS String OPTIONAL // Codigo da Peg da guia gerada quando o recurso de glosa é acadado.
	WSDATA GuiaNum		 AS String OPTIONAL // Numero da guia gerada quando o recurso de glosa é acadado.
	WSDATA GuiaTip		 AS String OPTIONAL // Tipo de  da guia gerada quando o recurso de glosa é acadado.
	WSDATA Observacao	 AS String OPTIONAL // Observações
	WSDATA Titulo		 AS String OPTIONAL // Numero do titulo gerado pelo pagamento medico.
	WSDATA Vencimento	 AS Date   OPTIONAL // Vencimento do titulo
	WSDATA Documentos	 AS Array of RecGloDocs OPTIONAL// Documentos do banco de conhecimento
ENDWSSTRUCT

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao do Web Service de Controle do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSERVICE PLRECGLO		 			DESCRIPTION "Funções para uso nas rotinas de recurso de glosa."
	WSDATA UserCode					AS String
	WSDATA CodOpe				       AS String OPTIONAL
	WSDATA CodLdp						AS String 	OPTIONAL
	WSDATA CodPeg						AS String 	OPTIONAL
	WSDATA NumGuia					AS String 	OPTIONAL
	WSDATA OriMov						AS String 	OPTIONAL
	WSDATA CodPad						AS String 	OPTIONAL
	WSDATA CodPro						AS String 	OPTIONAL
	WSDATA Sequen						AS String 	OPTIONAL
	WSDATA TipGui						AS String 	OPTIONAL
	WSDATA CodRDA						AS String 	OPTIONAL
	WSDATA CodLoc						AS String 	OPTIONAL
	WSDATA CodEsp						AS String 	OPTIONAL
	WSDATA DenReg						AS String 	OPTIONAL
	WSDATA Face						AS String 	OPTIONAL
	WSDATA QtdPro						AS Float 	OPTIONAL
	WSDATA DatPro						AS Date 	OPTIONAL
	WSDATA VlrGlo						AS Float 	OPTIONAL
	WSDATA VlrPag						AS Float 	OPTIONAL
	WSDATA DataRecGlo					AS Date 	OPTIONAL
	WSDATA GuiaOpe					AS String 	OPTIONAL
	WSDATA GuiaLdp					AS String 	OPTIONAL
	WSDATA GuiaPeg					AS String 	OPTIONAL
	WSDATA GuiaNum					AS String 	OPTIONAL
	WSDATA GuiTip						AS String 	OPTIONAL
	WSDATA Status						AS String 	OPTIONAL
	WSDATA Obs							AS String 	OPTIONAL
	WSDATA Operador					AS String 	OPTIONAL
	WSDATA Parecer					AS String 	OPTIONAL
	WSDATA Protocolo					AS String 	OPTIONAL
	WSDATA RecnoB4D					AS String 	OPTIONAL
	WSDATA RecnoBVO					AS String 	OPTIONAL
	WSDATA Arq1						AS String 	OPTIONAL
	WSDATA Arq2						AS String 	OPTIONAL
	WSDATA RecursoGlosa				AS Array of RecGloEvents
	WSDATA Recno						AS String OPTIONAL
	WSDATA TipoGlosa					AS String OPTIONAL
	WSDATA Justif						AS String OPTIONAL
	WSDATA VisDad						AS String OPTIONAL
	WSDATA ProDad						AS String OPTIONAL
	WSDATA Itens						AS String OPTIONAL
	WSDATA OrigEnt						AS String OPTIONAL
	WSDATA Alias						AS String OPTIONAL
	WSDATA Chave						AS String OPTIONAL
	WSDATA WSNULL						AS String

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Metodo																   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	WSMETHOD GetRecGloEvents		DESCRIPTION "Retorna os eventos do recurso de glosa de um procedimento da guia."
	WSMETHOD PutRecGloDoc		DESCRIPTION "Grava anexo de recurso de glosa"
	WSMETHOD GetDadGuiGlo		DESCRIPTION "Retorna os dados do evento e guia glosada"
	WSMETHOD GetDadEveGui		DESCRIPTION "Retorna os dados do evento e guia "
	WSMETHOD PutDocGuiEvents		DESCRIPTION "Grava documento vinculado ao evento da guia (conhecimento) "
	WSMETHOD GetRecGloB4D		DESCRIPTION "Retorna os dados do Recurso de Glosa contidos nas tabelas B4D e B4E."
	WSMETHOD ProcJustfRecGlo		DESCRIPTION "Processa as justificativas do Recurso de Glosa do Prestador"
	WSMETHOD VldRecGlo		 	DESCRIPTION "Valida parametrizacoes para inclusao de Recurso de Glosa"
	WSMETHOD ExcRecGlo		 	DESCRIPTION "Cancela um recurso de Glosa"	
	WSMETHOD CheckPeg	    	DESCRIPTION "Verifica situação da PEG"
	WSMETHOD IncluiRec			DESCRIPTION "Inclui um novo recurso"
	WSMETHOD CheckGui 			DESCRIPTION "Verifica situação da Guia"
	WSMETHOD WLisCriRG 			DESCRIPTION "Lista as observações da Operadora"
ENDWSSERVICE

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GetDadG     ³Autor³ Alexander Santos      ³ Data ³22.02.2010 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Retorna dados especificos por tipo de guia				   |±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

WSMETHOD GetRecGloEvents WSRECEIVE UserCode, RecnoBVO WSSEND WSNULL WSSERVICE PLRECGLO
LOCAL lRet  	:= .T.
LOCAL aStat	:= {}//"Sem recurso de Glosa","Recurso Protocolado","Recurso em análise", "Recurso Autorizado","Recurso Negado"}
Local nStatus
Local cStatus := "Sem recurso"
Local cTit		:= ""
Local cVecto	:= ""
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Checa rotina														   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PrtChkUser( ::UserCode, "PLRECGLO", "GetRecGloEvents" )
	If ::RecnoBVO == Nil
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', "RECNO BVO eh nil:::::::" , 0, 0, {})
	EndIf
	If !Empty(::RecnoBVO) //Recno da BVO
		BVO->(dbGoto(Val(::RecnoBVO)))

		//posiciona BD6
		BD6->(dbSetorder(1))
		BD6->( dbSeek(xFilial("BD6") + BVO->(BVO_GUIOPE+BVO_GUILDP+BVO_GUIPEG+BVO_GUINUM)))

		// Dados do titulo para guia faturada
		If !Empty(BD6->BD6_NUMTIT)
			SE1->(dbSetorder(1))
			SE1->( dbSeek(xFilial("SE1") + BD6->(BD6_PREFIX+BD6_NUMTIT ) ) )

			cTit 	:= Alltrim(BD6->BD6_NUMTIT)
			cVecto := DTOC(SE1->E1_VENCTO)
		EndIf

		aStat := {}
		aStat := RetSx3Box( X3CBox( Posicione('SX3',2,"BVO_STATUS",'X3_CBOX') ),,,1 )
		nStatus := Val(BVO->BVO_STATUS)
		If nStatus > 0 .and. nStatus <= Len(aStat)
			cStatus := aStat[nStatus][3]
		Endif
		::WSNULL := "true|" + cStatus + "|" + DTOC(BVO->BVO_DATA) + "|" + Alltrim(BVO->BVO_GUINUM) + "|" + cTit + "|" + cVecto + "|" + BVO->BVO_OBS
	Else
		::WSNULL := "false|Registro nao encontrado"
	EndIf
Else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
EndIf

Return lRet


WSMETHOD PutRecGloDoc WSRECEIVE UserCode,RecnoB4D, Arq1 WSSEND WSNULL WSSERVICE PLRECGLO

Local aRet 		:= {}
Local lRet 		:= .T.
Local dData 		:= Date()
Local cNomeArq1 	:= ""
Local cRet			:= ""
Local cDirRaiz 	:= PLSMUDSIS( GetNewPar("MV_TISSDIR","\TISS\") )
Local cDirWeb		:= 	PLSMUDSIS( cDirRaiz+"UPLOAD\")//getWebDir("UPLOADPATH")
Local cUpldPath	:= getWebDir("UPLOADPATH")
Local cPartArq		:= "_"+ Alltrim(Str(month(date()))) + "_" + ( Alltrim(Str(Year(date()))) ) + "_" +;
                       Left(Time(),2) + "_" + Substr(Time(),4,2) + "_" + Right(Time(),2) 
Local cNomeExibe	:= ""
Local cExtArq		:= ""

If PrtChkUser( ::UserCode, "PLRECGLO", "PutRecGloDoc" )
		
	If !Empty(::Arq1) 
		If "ERROR" $ upper(alltrim(cUpldPath)) 
	
			FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', "----------INICIO: LOG DE ERRO NO UPLOAD PATH----------" , 0, 0, {})
			FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', GetEnvHost() , 0, 0, {})
			FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', "UPLOADPATH" , 0, 0, {})
			FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', GetADV97() , 0, 0, {})
			FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', Upper( GetPvProfString( GetEnvHost(), "UPLOADPATH", "ERROR", GetADV97() ) ) , 0, 0, {})
			FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', "----------FIM: LOG DE ERRO NO UPLOAD PATH----------" , 0, 0, {})
	
			cRet := "Diretorio de upload nao informado no .INI do SERVER."
	
		Endif

		//Adiciona o dia no cPartArq
		cPartArq := AllTrim(Str(Day(Date()))) + cPartArq
	
		cNomeArq1 	:= Lower( AllTrim( SubStr( ::Arq1, Rat(PLSMUDSIS('\'),::Arq1)+1) ) )
		//Copia nome Arquivo para montar nome exibição
		cNomeExibe := cNomeArq1
		//Pega a extensão do arquivo
		cExtArq	:= SubStr(cNomeArq1, RAT(".", cNomeArq1)+1)
		//Monta nome de exibição
		cNomeExibe := SubStr(cNomeExibe, 1, RAT(".", cNomeExibe)) + cExtArq
		//Pega o nome do arquivo
		cNomeArq1	:= SubStr(cNomeArq1, 1, RAT(".", cNomeArq1)-1)
		//Renomeia o aruqivo para nome nome + data atual + horário atual
		FRenameEx(cDirWeb+cNomeArq1+"."+cExtArq, cDirWeb+cNomeArq1+"_"+cPartArq+"."+cExtArq)
		
		cNomeArq1 := cNomeArq1+"_"+cPartArq+"."+cExtArq
		
		If Empty(cRet) .AND. File(cDirWeb+cNomeArq1) //Tem que verificar se o arquivo ainda está lá, pq ele tenta passar aqui até o timeout..
			
			If Empty(cNomeArq1)
				cRet :=  "Falha ao incluir (Verifique se o arquivo já foi inserido ou entre em contato com a operadora)"
			Endif

			ACB->(DbSetOrder(2))
			If ACB->(MsSeek(xFilial("ACB") + Upper(Alltrim(cNomeArq1))))
				cRet := "Arquivo [" + cNomeExibe + "] ja existe no banco de conhecimento, altere o nome e tente novamente!"
			EndIf		
		EndIf
	
		If Empty(cRet) .AND. File(cDirWeb+cNomeArq1) //Tem que verificar se o arquivo ainda está lá, pq ele tenta passar aqui até o timeout..
			B4D->(dbGoto(Val(::RecnoB4D)))
			If !Empty(cNomeArq1)
				PLSINCONH(cDirWeb + cNomeArq1, "B4D", B4D->(B4D_FILIAL+B4D_OPEMOV+B4D_CODLDP+B4D_CODPEG+B4D_NUMAUT),.T.)
				FERASE(cDirWeb + cNomeArq1) //apaga arquivo do diretorio WEB e deixa apenas no conhecimento
			EndIf			  
		EndIf
	Else
		cRet := "Arquivo não informado!" 
	EndIf
	If Empty(cRet)
		::WSNULL := "true|Arquivo inserido com sucesso!"
	Else
		::WSNULL := "false|" + cRet
	EndIf


Else
	lRet := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
EndIf

Return lRet


/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GetDadGuiGlo  ³Autor  ³ Rogerio Tabosa      ³ Data ³18.03.2013 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Retorna os dados de procedimento e guia glosada              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD GetDadGuiGlo WSRECEIVE UserCode, Recno, VisDad WSSEND WSNULL WSSERVICE PLRECGLO
Local lRetorno 	:= .T.
Local aArea 		:= GetArea()
Local cMsg			:= ""
Local cObjRec		:= ""
Local cStatus		:= ""
Local aRetBox		:= {}
Local nPos			:= 0

::WSNULL := "true|"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³Acesso ao metodo
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
If PrtChkUser( ::UserCode, "PLRECGLO","GetDadGuiGlo" )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³Posiciona no registro
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
    B4D->( DbGoTo( Val(::Recno) ) )

	aRetBox := RetSx3Box( X3CBox( Posicione('SX3',2,"B4D_OBJREC",'X3_CBOX') ),,,1 )
	If (nPos := AsCan( aRetBox , {|x| AllTrim(x[2]) == B4D->B4D_OBJREC} ))>0
		cObjRec := aRetBox[nPos,3]
	Else
		cObjRec := B4D->B4D_OBJREC
	EndIf
    
	aRetBox := RetSx3Box( X3CBox( Posicione('SX3',2,"B4D_STATUS",'X3_CBOX') ),,,1 )
	If (nPos := AsCan( aRetBox , {|x| AllTrim(x[2]) == B4D->B4D_STATUS} ))>0
		cStatus := aRetBox[nPos,3]
	Else
		cStatus := B4D->B4D_STATUS
	EndIf    
    
    ::WSNULL := "true|"
	::WSNULL +=  "|" + B4D->B4D_NGLOPE
	::WSNULL +=  "|" + B4D->B4D_GUIREF		
	::WSNULL +=  "|" + DTOC(B4D->B4D_DATSOL)
	::WSNULL +=  "|" + cStatus
	::WSNULL +=  "|" + B4D->B4D_NOMUSR
	::WSNULL +=  "|" + cObjRec
	::WSNULL +=  "|" + alltrim(TransForm(B4D->B4D_VLRGLO,"@E 99,999,999,999.99"))//Alltrim(Str(B4D->B4D_VLRGLO))
	::WSNULL +=  "|" + alltrim(TransForm(B4D->B4D_TOTREC,"@E 99,999,999,999.99"))//Alltrim(Str(B4D->B4D_TOTREC))
	::WSNULL +=  "|" + DTOC(B4D->B4D_DATREC)
	::WSNULL +=  "|" + ::Recno
Else
	lRetorno := .F.
	SetSoapFault( "", "Usuário não autorizado" )
EndIf

RestArea( aArea )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Fim da Rotina
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Return lRetorno
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GetDadEveGui  ³Autor  ³ Rogerio Tabosa      ³ Data ³18.03.2013 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Retorna os dados de procedimento e guia 		                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD GetDadEveGui WSRECEIVE UserCode, Recno WSSEND WSNULL WSSERVICE PLRECGLO
LOCAL lRetorno 	:= .T.
LOCAL aArea 		:= GetArea()
LOCAL cNumGuia	:= ""
LOCAL cBenefic	:= ""
LOCAL cCodTab		:= ""
LOCAL cCodPro		:= ""

::WSNULL := "true|"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³Acesso ao metodo
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
If PrtChkUser( ::UserCode, "PLRECGLO","GetDadEveGui" )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³Posiciona no registro
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
    BE2->( DbGoTo( Val(::Recno) ) )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³Dados da guia e procedimento
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	cNumGuia		:= BE2->( BE2_OPEMOV+BE2_ANOAUT+BE2_MESAUT+BE2_NUMAUT)//BD6_ANOPAG+BD6_MESPAG+BD6_NUMERO)
	cBenefic		:= BE2->BE2_NOMUSR
	cCodTab		:= BE2->BE2_CODPAD
	cCodPro		:= Alltrim(BE2->BE2_CODPRO) + "-" + Alltrim(BE2->BE2_DESPRO)

	::WSNULL := "true|" + Alltrim(cNumGuia) + "|" + Alltrim(cBenefic) + "|" + Alltrim(cCodTab) + "|" + Alltrim(cCodPro) + "|" + ::Recno

Else
	lRetorno := .F.
	SetSoapFault( "", "Usuário não autorizado" )
EndIf

RestArea( aArea )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Fim da Rotina
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Return lRetorno

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Inclui os arquivos no conhecimento
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Inclui os arquivos no conhecimento
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
WSMETHOD PutDocGuiEvents WSRECEIVE UserCode, Recno, Arq1, Arq2, CodRda WSSEND WSNULL WSSERVICE PLRECGLO

LOCAL lRetorno	:= .T.
LOCAL aArea 		:= GetArea()
LOCAL cRet 		:= ""
LOCAL cNomeArq1	:= ""
LOCAL cNomeArq2	:= ""
LOCAL cUpldPath	:= getWebDir("UPLOADPATH")
LOCAL cDirRaiz 	:= PLSMUDSIS( GetNewPar("MV_TISSDIR","\TISS\") )
LOCAL cDirWeb		:= 	PLSMUDSIS( cDirRaiz+"UPLOAD\")//getWebDir("UPLOADPATH")

DEFAULT ::WSNULL 	:= ""
DEFAULT ::Arq1 	:= ""
DEFAULT ::Arq2 	:= ""
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se tem direito para executar o metodo								   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PrtChkUser( ::UserCode ,"PLRECGLO","PutDocGuiEvents" )

	If "ERROR" $ upper(alltrim(cUpldPath))
		
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', "----------INICIO: LOG DE ERRO NO UPLOAD PATH----------" , 0, 0, {})
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', GetEnvHost() , 0, 0, {})
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', "UPLOADPATH" , 0, 0, {})
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', GetADV97() , 0, 0, {})
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', Upper( GetPvProfString( GetEnvHost(), "UPLOADPATH", "ERROR", GetADV97() ) ) , 0, 0, {})
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', "----------FIM: LOG DE ERRO NO UPLOAD PATH----------" , 0, 0, {})		

		cRet := "Diretorio de upload nao informado no .INI do SERVER."

	Endif
	If !Empty(::Arq1) .AND. Empty(cRet)
		cNomeArq1 := Lower( AllTrim( SubStr( ::Arq1, Rat(PLSMUDSIS('\'),::Arq1)+1) ) )
		If Empty(cNomeArq1)
			cRet :=  "Falha ao incluir (Verifique se o arquivo já foi inserido ou entre em contato com a operadora)"
		Endif
		ACB->(DbSetOrder(2))
		If ACB->(MsSeek(xFilial("ACB") + Upper(Alltrim(cNomeArq1))))
			cRet := "Arquivo [" + cNomeArq1 + "] ja existe no banco de conhecimento, altere o nome e tente novamente!"
		EndIf
	Else
		cRet := "Arquivo nao informado."
	EndIf

	If !Empty(::Arq2) .AND. Empty(cRet)
		cNomeArq2 := Lower( AllTrim( SubStr( ::Arq2, Rat(PLSMUDSIS('\'),::Arq2)+1) ) )
		If Empty(cNomeArq2)
			cRet :=  "Falha ao incluir (Verifique se o arquivo já foi inserido ou entre em contato com a operadora)"
		Endif
		FWLogMsg('WARN',, 'SIGAPLS', funName(), '', '01', xFilial("ACB") + Upper(Alltrim(cNomeArq2)) , 0, 0, {})
		ACB->(DbSetOrder(2))
		If ACB->(MsSeek(xFilial("ACB") + Upper(Alltrim(cNomeArq2))))
			cRet := "Arquivo [" + cNomeArq2 + "] ja existe no banco de conhecimento, altere o nome e tente novamente!"
		EndIf
	EndIf

	If Empty(cRet)
		BE2->( DbGoTo( Val(::Recno) ) )
		If !Empty(cNomeArq1)
			PLSINCONH(cDirWeb + cNomeArq1, "BE2", BE2->(BE2_FILIAL + BE2_OPEMOV + BE2_ANOAUT + BE2_MESAUT + BE2_NUMAUT + BE2_SEQUEN),.T.)
			FERASE(cDirWeb + cNomeArq1) //apaga arquivo do diretorio WEB e deixa apenas no conhecimento
		EndIf
		If !Empty(cNomeArq2)
			PLSINCONH(cDirWeb + cNomeArq2, "BE2", BE2->(BE2_FILIAL + BE2_OPEMOV + BE2_ANOAUT + BE2_MESAUT + BE2_NUMAUT + BE2_SEQUEN),.T.)
			FERASE(cDirWeb + cNomeArq2) //apaga arquivo do diretorio WEB e deixa apenas no conhecimento
		EndIf
		cRet := "Arquivo processado com exito."  // AO ALTERAR ESSA STRING ALTERAR TB NA CONDICAO DO PPLADDOCG
	EndIf
	::WSNULL := cRet
	//::WSNULL := PLSINALUP(::UserPlsName, ::RDACode,.T.,.T.,::DirArqIn)
Else
	lRetorno := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
EndIf

RestArea( aArea )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Fim do metodo														   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Return lRetorno

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Retorna os dados de uma Glosa ou do seu Recurso. B4D e B$E
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
WSMETHOD GetRecGloB4D WSRECEIVE UserCode, Recno, VisDad WSSEND WSNULL WSSERVICE PLRECGLO
LOCAL lRet 		:= .T.
LOCAL cRet 		:= ""
LOCAL aArea 		:= GetArea()
LOCAL R1 			:= 0
LOCAL R2 			:= 0
LOCAL lItem 		:= .F.
LOCAL lShowItem	:= .T.
LOCAL cCdTerm		:= ""
LOCAL cDesPro		:= ""
LOCAL cEncode   	:= NIL 
LOCAL cDecode   	:= NIL 
Local cString		:= ""
LOCAL nVlrRec		:= 0
LOCAL nVlrGlo 	:= 0

DEFAULT ::Recno 	:= ""
DEFAULT ::WSNULL 	:= ""

If PrtChkUser( ::UserCode ,"PLRECGLO","GetRecGloB4D" )
	If Empty(::Recno)
		cRet := STR0001//"Cabeçalho da Glosa não encontrado."
	Else
		//B4D e B4E
		DbSelectArea("B4D")
		B4D->(dbGoto(Val(::Recno)))

		DbSelectArea("B4E")
		B4E->(DbSetOrder(1))

		cRet := B4D->B4D_REGANS	  //1 - Registro ANS
		cRet += "|" + B4D->B4D_GUIPRE //2 - Nº Guia no Prestador
		cRet += "|" + AllTrim(B4D->B4D_NOMOPE) //3 - Nome da Operadora
		cRet += "|" + B4D->B4D_OBJREC //4 - Objeto do Recurso
		cRet += "|" + B4D->B4D_NGLOPE //5 - Número da Guia de Recurso de Glosas Atribuído pela Operadora
		cRet += "|" + B4D->B4D_CODRDA //6- Código na Operadora //B4D_CODOPE
		cRet += "|" + AllTrim(B4D->B4D_NOMCON) //7 - Nome do Contratado
		cRet += "|" + B4D->B4D_NUMLOT //8 - Número do Lote
		cRet += "|" + B4D->B4D_CODPEG //9 - Número do Protocolo     
		cRet += "|" + B4D->B4D_GLOPRT //10 - Código da Glosa do Protocolo *DP* (DEPARA)
		cRet += "|" + AllTrim(B4D->B4D_JUSPRO) //11 - Justificativa (no caso de recurso integral do protocolo)
		cRet += "|" + B4D->B4D_ACAPRO //12 - Acatado
		cRet += "|" + B4D->B4D_GUIPRE //13- Número da guia no prestador
		cRet += "|" + B4D->B4D_ATROPE //14- Número da guia atribuído pela operadora
		cRet += "|" + B4D->B4D_SENHA  //15-Senha
		cRet += "|" + B4D->B4D_GLOGUI //16-Código da glosa da guia *DP* (DEPARA)
		cRet += "|" + AllTrim(B4D->B4D_JUSGUI) //17-Justificativa (no caso de recurso integral da guia)
		cRet += "|" + B4D->B4D_ACAGUI //18 - Acatado
	
		cRet += "|"
		If B4E->(MsSeek(xFilial("B4E")+B4D->(B4D_OPEMOV+B4D_ANOAUT+B4D_MESAUT+B4D_NUMAUT)))
			While !B4E->(Eof()) .And. B4E->(B4E_FILIAL+B4E_OPEMOV+B4E_ANOAUT+B4E_MESAUT+B4E_NUMAUT)== xFilial("B4E")+B4D->(B4D_OPEMOV+B4D_ANOAUT+B4D_MESAUT+B4D_NUMAUT)
				
				If B4D->B4D_CODPEG <> B4E->B4E_CODPEG
					B4E->(dbSkip())
					Loop
				EndIf
				
				If ::VisDad <> "1" // Se nao for apenas visualizacao mostro somente o que pode ser recursado
					lShowItem := (B4E->B4E_STATUS $ " ,0,4,5")
				EndIf
				
				BVO->(DbSetOrder(1))
				If !lShowItem .AND. BVO->(MsSeek(xFilial("BVO") + B4E->(B4E_SEQB4D+B4E_SEQREC+B4E_SEQUEN)))
					nVlrRec := BVO->BVO_VLRREC
				Else
					nVlrRec := B4E->B4E_SLDREC
				EndIf
				nVlrGlo := B4E->B4E_VLRGLO
				
				if R1 == 0
					R1 := B4E->(Recno())
				else
					R2 := B4E->(Recno())
				EndIf
				If  lShowItem
					//cRet += B4E->B4E_SEQUEN
					lItem := .T.
					cRet += DTOC(B4E->B4E_DATPRO) //19-Data de realização
					cRet += ";" + DTOC(B4E->B4E_DATFIN) //20-Data final período

					BR8->(DbSelectArea("BR8"))
					BR8->(DbSetOrder(3)) //BR8_FILIAL+BR8_CODPSA+BR8_CODPAD
			
					If (BR8->(MsSeek(xFilial("BR8")+B4E->B4E_CODPRO+B4E->B4E_CODPAD)))
						cCdTerm	:= PLSGETVINC("BTU_CDTERM", "BR4", .F.)
						cRet += ";" + IIf(!Empty(cCdTerm),Alltrim(cCdTerm),B4E->B4E_CODPAD) //21-Tabela *DP* (DEPARA)
						cCdTerm	:= PLSGETVINC("BTU_CDTERM", "BR8", .F.)					
						cRet += ";" + IIf(!Empty(cCdTerm),Alltrim(cCdTerm),B4E->B4E_CODPRO)
						cCdTerm	:= PLSGETVINC("BTU_DESTER", "BR8", .F.)	
						
						cDesPro := IIf(!Empty(cCdTerm),decodeUTF8(AllTrim(cCdTerm)),decodeUTF8(Alltrim(B4E->B4E_DESPRO))) //23-Descrição
						cString := LOWERACE(AllTrim(cDesPro))
						cEncode := encodeUTF8(cString)
						cDecode := decodeUTF8(cEncode)
						cDesPro := UPPER(cDecode)
						//cRet += ";" + IIf(!Empty(cCdTerm),cCdTerm,Alltrim(B4E->B4E_DESPRO)) //23-Descrição
					Else
						cRet += ";" + B4E->B4E_CODPAD //21-Tabela 
						cRet += ";" + B4E->B4E_CODPRO //22-Procedimento/Item assistencial
						cDesPro :=  decodeUTF8(AllTrim(B4E->B4E_DESPRO)) //23-Descrição
						cString := LOWERACE(AllTrim(cDesPro))
						cEncode := encodeUTF8(cString)
						cDecode := decodeUTF8(cEncode)
						cDesPro := UPPER(cDecode)
						
						//cRet += ";" + AllTrim(B4E->B4E_DESPRO) //23-Descrição
					EndIf
					If Empty(cDesPro)
						cDesPro := decodeUTF8(AllTrim(BR8->BR8_DESCRI))
						cString := LOWERACE(AllTrim(cDesPro))
						cEncode := encodeUTF8(cString)
						cDecode := decodeUTF8(cEncode)
						cDesPro := UPPER(cDecode)
					EndIf				
					cRet += ";" + AllTrim(cDesPro) //23-Descrição	
					cRet += ";" + B4E->B4E_GRAUPA //24-Grau de Participação *DP* (DEPARA)
					
					BCT->( DbSetOrder(1) ) //BCT_FILIAL + BCT_CODOPE + BCT_PROPRI + BCT_CODGLO
					If BCT->( MsSeek( xFilial('BCT')+B4E->B4E_OPEMOV+B4E->B4E_CODGLO ) )					
						//através da tabela de De/Para(BTU) seleciona os dados da Terminologia da TISS
						cCdTerm := PLSGETVINC("BTU_CDTERM", "BCT", .F.,"38") //cDesTer := PLSGETVINC("BTQ_DESTER", "BCT", .F.)
					EndIf					
					cRet += ";" + IIf(!Empty(cCdTerm),cCdTerm,B4E->B4E_CODGLO) //Còdigo da Glosa na BCT *DP* (DEPARA)
					
					//cRet += ";" + B4E->B4E_GLOTIS //25-Código da glosa TISS
					cRet += ";" + IIf(::VisDad <> "0","", IIF(EMPTY(AllTrim(Str(nVlrRec))), "", AllTrim(Transform(nVlrRec, "@E 999,999,999.99")))) //26-Valor Recursado
					cRet += ";" + IIf(::VisDad <> "0","", AllTrim(B4E->B4E_JUSPRE)) //27-Justificativa do Prestador
					cRet += ";" + IIf(::VisDad <> "0","", IIF(EMPTY(AllTrim(Str(B4E->B4E_VLRACA))), "", AllTrim(Transform(B4E->B4E_VLRACA, "@E 999,999,999.99")))) //28-Valor Acatado
					cRet += ";" + AllTrim(B4E->B4E_JUSOPE) //29-Justificativa da Operadora
					cRet += ";" + AllTrim(Str(B4E->(Recno())))
					cRet += "$" //separa os procedimentos
				EndIf
				B4E->(DbSkip())
			End
			cRet := SUBSTRING(cRet, 1, LEN(cRet)-1)
		EndIf

		if R1 > R2
			R1:=R1
		endIf

		cRet += "|" + IIF(EMPTY(AllTrim(Str(B4D->B4D_TOTREC))), "", AllTrim(Transform(B4D->B4D_TOTREC, "@E 999,999,999.99")))  //30 - Valor Total Recursado (R$)
		cRet += "|" + IIF(EMPTY(AllTrim(Str(B4D->B4D_TOTACA))), "", AllTrim(Transform(B4D->B4D_TOTACA, "@E 999,999,999.99")))  //31 - Valor Total Acatado (R$)
		cRet += "|" + DTOC(B4D->B4D_DATREC) //32 - Data do Recurso
		cRet += "|" + IIf(B4D->B4D_OBJREC == "2" .AND. lItem, "3", B4D->B4D_OBJREC) //Tipo de Recurso
	EndIf
	::WSNULL := cRet
Else
	lRetorno := .F.
	SetSoapFault( "", "Usuário não autorizado" )
EndIf

RestArea( aArea )

return lRet

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Insere a justificativa do prestador para o recurso de glosa de acordo com o tipo da glosa
//³ TipoGlosa: 1 = Protocolo
//³ 			 2 = Guia
//³ 			 3 = Alguns Procedimentos da Guia
//³ Justif: Quando for para alguns procedimentos, a justificativa de cada um estará separada
//³ por '|' de acordo com a sequencia de cada um
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
WSMETHOD ProcJustfRecGlo WSRECEIVE UserCode, Recno, TipoGlosa, Justif, Arq1 WSSEND WSNULL WSSERVICE PLRECGLO
LOCAL lRet 		:= .T.
LOCAL cRet 		:= ""
LOCAL nIndex 		:= 0
LOCAL aJustif 	:= {}
LOCAL aArea 		:= GetArea()
LOCAL nValTot		:= 0
LOCAL nI			:= 0
LOCAL nPos			:= 0
LOCAL nTotRec		:= 0
LOCAL nValAtu		:= 0
LOCAL cSequen		:= ""
LOCAL cSeqBVO		:= "000"
LOCAL cSeqRec		:= ""
LOCAL cSeqB4D		:= ""
LOCAL lIdGrv		:= .F.
LOCAL nQtdTent	:= 0
LOCAL nCalTotGlo := 0
LOCAL aTotGlo := {}
LOCAL nY := 0

DEFAULT ::Recno 	:= ""
DEFAULT ::TipoGlosa := ""
DEFAULT ::Justif  := ""
//0=Sem rec de glosa;1=Rec Glosa Protocolado;2=Rec Glosa Em Analise;3=Rec Glosa Autorizado;4=Rec Glosa Negado
If PrtChkUser( ::UserCode ,"PLRECGLO","GetRecGloB4D" )
	If Empty(::Recno) .OR. Empty(::TipoGlosa) .OR. Empty(::Justif)
		cRet := STR0002 //"Dados recebidos inválidos."
	Else
		//B4D
		DbSelectArea("B4D")
		B4D->(dbGoto(Val(::Recno)))
		cSeqB4D := B4D->B4D_SEQB4D
		
		aTotGlo := StrToKArr(::Justif, '|')
		For nY:= 1 To Len(aTotGlo)
			If LEN(StrToKArr(aTotGlo[nY], ';')) >= 3
				If AT(",",StrToKArr(aTotGlo[nY], ';')[3]) > 0 .AND. AT(".",StrToKArr(aTotGlo[nY], ';')[3]) > 0
					nCalTotGlo += VAL(StrTran(StrToKArr(aTotGlo[nY], ';')[3],",","",1)) // [1] = sequencia portal  [2] = justificativa [3] = valor
				Else 
					nCalTotGlo += VAL(StrToKArr(aTotGlo[nY], ';')[3]) // [1] = sequencia portal  [2] = justificativa [3] = valor
				EndIf
			EndIf
		Next
		//GLOSA TIPO PROTOCOLO
		If ::TipoGlosa == "1"
			lIdGrv := .T. // Indica que gravei algum recurso
			nQtdTent := B4D->B4D_QTDIRP + 1
			B4D->(RecLock("B4D", .F.))
				B4D->B4D_JUSPRO := ALLTRIM(::Justif)
				B4D->B4D_STATUS := "1"
				B4D->B4D_QTDIRP := nQtdTent
				B4D->B4D_ACAPRO := ""
			B4D->(MsUnlock())	
			// Envio o Email
			BVO->(DbSetOrder(1))  // BVO_FILIAL+BVO_SEQB4D+BVO_SEQREC+BVO_SEQUEN
			If BVO->(MsSeek(xFilial("BVO") + cSeqB4D + cSeqRec))
				PLS498EML ("1", BVO->(Recno()),.T.)
			EndIf								
		//GLOSA TIPO GUIA
		ElseIf ::TipoGlosa == "2" .AND. !("|" $ ::Justif .AND. ";" $ ::Justif )
			lIdGrv := .T. // Indica que gravei algum recurso
			nQtdTent := B4D->B4D_QTDIRP + 1
			B4D->(RecLock("B4D", .F.))
				B4D->B4D_JUSGUI :=  ALLTRIM(::Justif)
				B4D->B4D_STATUS := "1"
				B4D->B4D_QTDIRP := nQtdTent
				B4D->B4D_ACAGUI := ""																						
			B4D->(MsUnlock())			
			// Envio o Email
			BVO->(DbSetOrder(1))  // BVO_FILIAL+BVO_SEQB4D+BVO_SEQREC+BVO_SEQUEN If BVO->(MsSeek(xFilial("BVO") + B4D->B4D_SEQB4D + B4D->B4D_SEQREC))			
			If BVO->(MsSeek(xFilial("BVO") + cSeqB4D + cSeqRec))
				PLS498EML ("1", BVO->(Recno()),.T.)
			EndIf
		ElseIf nCalTotGlo > (B4D->B4D_VLRGLO - B4D->B4D_TOTACA)
			cRet := "O Valor Total Recursado é superior ao valor de glosa do item!"
		//GLOSA TIPO PROCEDIMENTOS DA GUIA
		Else
			//cria array das justificativas dos procedimentos
			aJustif := StrToKArr(::Justif, '|')
			If Len(aJustif) == 0
				cRet := STR0003 //"Dados da justificativa invalidos!"
			Else
				DbSelectArea("B4E")
				B4E->(DbSetOrder(1))
				If B4E->(MsSeek(xFilial("B4E")+B4D->(B4D_OPEMOV+B4D_ANOAUT+B4D_MESAUT+B4D_NUMAUT)))
		
					While !B4E->(Eof()) .And. B4E->(B4E_FILIAL+B4E_OPEMOV+B4E_ANOAUT+B4E_MESAUT+B4E_NUMAUT)== xFilial("B4D")+B4D->(B4D_OPEMOV+B4D_ANOAUT+B4D_MESAUT+B4D_NUMAUT)
						
						If B4E->B4E_CODPEG <> B4D->B4D_CODPEG
							B4E->(DbSkip())
							Loop
						EndIf
						
						If !(B4E->B4E_STATUS $ " ,0,4,5") // Se não esta nos status possiveis de recurso pulo pro proximo
							B4E->(DbSkip())
							Loop
						EndIf
						nPos++ // Eu utilizo a mesma posicao do Grid do portal para atualizar
						aAux := StrToKArr(aJustif[nPos], ';') // [1] = sequencia portal  [2] = justificativa [3] = valor
						If Len(aAux) < 3 // se nao tem as informacoes nao foi recursado
							B4E->(DbSkip())
							Loop
						EndIf
						If !Empty(aAux[2]) .AND. nPos == Val(aAux[1])
							cSequen := B4E->B4E_SEQUEN
							cSeqBVO := B4E->B4E_SEQREC
							lIdGrv := .T. // Indica que gravei algum recurso
							// Trato as casas decimais para todas as possibilidades de pictures
							If "," $ aAux[3] .AND. "." $ aAux[3] .AND. At( ",", aAux[3] ) < At( ".", aAux[3] ) 
								nValAtu := Val( StrTran(StrTran(StrTran(aAux[3],',',''),'.',','),",",".") ) //Val( StrTran(StrTran(aAux[3],',',''),'.',',') )
							ElseIf ("," $ aAux[3] .AND. "." $ aAux[3] .AND. At( ",", aAux[3] ) > At( ".", aAux[3] )) .OR. "," $ aAux[3]
								nValAtu := Val( StrTran(StrTran(aAux[3],'.',''),',','.') )															
							Else
								nValAtu := Val(aAux[3])
							EndIf
							nTotRec := IIf( nValAtu == 0 .OR. nValAtu > B4E->B4E_SLDREC , B4E->B4E_SLDREC, nValAtu)
							B4E->(RecLock("B4E", .F.))
								B4E->B4E_JUSPRE := aAux[2]
								B4E->B4E_STATUS := "1"
								B4E->B4E_VLRREC := nTotRec//IIf( nValAtu == 0 .OR. nValAtu > B4E->B4E_SLDREC , B4E->B4E_SLDREC, nValAtu)
								B4E->B4E_SLDREC	:= nTotRec
								B4E->B4E_VLRACA := 0 // Zero o valor acatado caso pra nao gerar confusao com o anterior 
							B4E->(MsUnlock())														
							nValTot += nTotRec	
							// Envio o Email
							BVO->(DbSetOrder(1))  // BVO_FILIAL+BVO_SEQB4D+BVO_SEQREC+BVO_SEQUEN
							If BVO->(MsSeek(xFilial("BVO") + cSeqB4D + cSeqRec + cSequen))
								PLS498EML ("1", BVO->(Recno()),.T.)
							EndIf							
						EndIf
						B4E->(DbSkip())
					EndDo
				EndIf
			EndIf
			//nValTot += B4D->B4D_TOTREC não posso gravar com o total pois tem varias iterações isso pode caracterizar falsamente que o valor do recurso é maior que o glosado
			// Atualizo o cabeçalho B4D
			
			If lIdGrv // Caso tenha algum procedimento recursado atualizo o cabeçalho
				nQtdTent := B4D->B4D_QTDIRP + 1
				B4D->(RecLock("B4D", .F.))
					//B4D->B4D_JUSGUI :=  ""ALLTRIM(::Justif)
					B4D->B4D_STATUS := "1"
					B4D->B4D_DATREC := dDataBase
					B4D->B4D_TOTREC := nValTot
					B4D->B4D_QTDIRP := nQtdTent
				B4D->(MsUnlock())				
			Endif
		EndIf
			
		If Empty(cRet)
			If !lIdGrv
				::WSNULL := "false|" + STR0004 //"Não foi recursado nenhum item, verifique os dados informados!" //
			Else
				::WSNULL := "true|" + STR0005 //"Recurso inserido com sucesso!"
			EndIf
		Else
			::WSNULL := "false|" + cRet
		EndIf
		
	EndIf
Else
	lRet := .F.
	SetSoapFault( "", "Usuário não autorizado" )
EndIf

RestArea( aArea )

return lRet

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Valida parametrizações do recurso de glosa
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
WSMETHOD VldRecGlo WSRECEIVE UserCode, Recno WSSEND WSNULL WSSERVICE PLRECGLO
Local aArea 	:= GetArea()
Local lRet 	:= .T.
Local cMsg		:= ""
Local lItem	:= .F.


//0=Sem rec de glosa;1=Rec Glosa Protocolado;2=Rec Glosa Em Analise;3=Rec Glosa Autorizado;4=Rec Glosa Negado
If PrtChkUser( ::UserCode ,"PLRECGLO","VldRecGlo" )
	If Empty(::Recno) 
		cMsg := STR0002 //"Dados recebidos inválidos."
	Else
		//B4D
		//DbSelectArea("B4D")
		B4D->(dbGoto(Val(::Recno)))
		
		// Verifico o status
		If !(B4D->B4D_STATUS $ " ,0,4,5")
			cMsg += STR0006 //"Não é possivel incluir um recurso para o status atual! "
		EndIf 
		
		///DbSelectArea("B4E")
		B4E->(dbSetOrder(2))
		lItem := B4E->(MsSeek(xFilial("B4E")+B4D->B4D_SEQB4D))
		
		//DbSelectArea("BA0")
		BA0->(MsSeek(xFilial("BA0") + B4D->B4D_OPEMOV))		
		
		// Valido quantidade maxima de tentativas de recurso
		If lItem .AND. BA0->BA0_MAXRG > 0 .AND. Empty(cMsg)// por itens eu verifico quantas vezes tentou confirmar o recurso
			If B4D->B4D_QTDIRP >= BA0->BA0_MAXRG
				cMsg += STR0007 //"O limite de tentativas de recurso dessa glosa já foi atingido, entre em contato com a operadora! "
			EndIf // por guia e PEG apenas somo a BVO
		ElseIf BA0->BA0_MAXRG > 0 .AND. Empty(cMsg)
			If HS_CountTB("BVO", "BVO_SEQB4D = '" + B4D->B4D_SEQB4D + "' ") >= BA0->BA0_MAXRG
				cMsg += STR0007 //"O limite de tentativas de recurso dessa glosa já foi atingido, entre em contato com a operadora! "
			EndIf
		EndIf 
		
		// Valido prazo maximo para recurso		
		If BA0->BA0_PRZREC > 0 .AND. Empty(cMsg)
			If B4D->B4D_DATSOL < (dDataBase - BA0->BA0_PRZREC)
				cMsg += STR0008 //"O prazo limite para recurso dessa glosa já foi atingido! "
			EndIf
		EndIf
		
	EndIf
	If !Empty(cMsg)
		::WSNULL := "false|" + cMsg
	Else
		::WSNULL := "true|" + ::Recno + "|" + B4D->B4D_CODRDA
	EndIf
Else
	lRet := .F.
	SetSoapFault( "", "Usuário não autorizado" )
EndIf

RestArea( aArea )

return lRet

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Cancela o recurso de glosa
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
WSMETHOD ExcRecGlo WSRECEIVE UserCode, Recno WSSEND WSNULL WSSERVICE PLRECGLO
Local aArea 	:= GetArea()
Local lRet 	:= .T.
Local cMsg		:= ""

If PrtChkUser( ::UserCode ,"PLRECGLO","ExcRecGlo" )
	If Empty(::Recno) 
		cMsg := "Dados recebidos inválidos."
	Else		
		DbSelectArea("B4D")
		B4D->(dbGoto(Val(::Recno)))				
	EndIf
	If !Empty(cMsg)
		::WSNULL := "false|" + cMsg
	Else
		::WSNULL := "true|" + STR0009 //"Recurso cancelado!"
	EndIf
Else
	lRet := .F.
	SetSoapFault( "", "Usuário não autorizado" )
EndIf

RestArea( aArea )

return lRet

/* {Protheus.doc} CheckPeg
Utilizada pelo portal para chamada da função PegExiste
PegExiste: verifica se o PEG informado possibilita continuar o processo
@since    05/2019 */
WSMETHOD CheckPeg WSRECEIVE UserCode, CodPeg, CodRDA, OrigEnt WSSEND WSNULL WSSERVICE PLRECGLO

local aReturn := {}
local lRes    := .T.
local nResult := 0
local cVlrGlosa := ''

If PrtChkUser( ::UserCode ,"PLRECGLO","CheckPeg" )
	aReturn := callPegExi(::CodPeg, ::CodRDA, .T., ::OrigEnt)
	cMsg 	:= aReturn[1][2]
	nResult := aReturn[2]
	cGlos   := aReturn[3]
	cVlrGlosa := TransForm( aReturn[4],"@E 999,999,999.99" )

	::WSNULL := "true|" + cMsg + "|" + allTrim(str(nResult)) + "|" + cGlos + "|" + cVlrGlosa 
else 
	lRes := .F.
	SetSoapFault( "", "Usuário não autorizado" )
endif

return lRes

/* {Protheus.doc} IncluiRec
Inclui um novo recurso
@since    05/2019 */
WSMETHOD IncluiRec WSRECEIVE UserCode, CodPeg, GuiaNum, CodRDA, Justif, Operador, Itens, OrigEnt WSSEND WSNULL WSSERVICE PLRECGLO

local aReturn := {}
local lRes    := .T.
local nResult := 0
local cPro 	  := ""

If PrtChkUser( ::UserCode ,"PLRECGLO","IncluiRec" )
	aReturn := callIncRec(::CodPeg, ::CodRDA, ::GuiaNum, ::Justif, ::Operador, ::Itens, ::OrigEnt)
	cMsg 	:= aReturn[1]
	nResult := aReturn[2]
	cPro    := aReturn[3]
	
	::WSNULL := "true|" + cMsg + "|" + allTrim(str(nResult)) + "|" + cPro
else 
	lRes := .F.
	SetSoapFault( "", "Usuário não autorizado" )
endif

return lRes

/* {Protheus.doc} CheckGui
Utilizada pelo portal para chamada da função HaGlosa
PegExiste: verifica se a Guia informada possibilita continuar o processo
@since    05/2019 */
WSMETHOD CheckGui WSRECEIVE UserCode, CodPeg, GuiaNum, OrigEnt WSSEND WSNULL WSSERVICE PLRECGLO

local aReturn := {}
local lRes    := .T.
local nResult := 0
local cVlrGlosa := ""

If PrtChkUser( ::UserCode ,"PLRECGLO","CheckPeg" )
	aReturn := callGuiExi(::CodPeg, ::GuiaNum, .T., ::OrigEnt)
	cMsg 	:= aReturn[1][2]
	nResult := aReturn[2]
	cGlos   := aReturn[3]
	cItens  := aReturn[4]
	cVlrGlosa := TransForm( aReturn[5],"@E 999,999,999.99" )
	
	::WSNULL := "true|" + cMsg + "|" + allTrim(str(nResult)) + "|" + cGlos + "|" + cItens + "|" + cVlrGlosa
else 
	lRes := .F.
	SetSoapFault( "", "Usuário não autorizado" )
endif

return lRes


/*/{Protheus.doc} WLisCriRG
Retorna as críticas para o usuário
@since 06/2018
@version P12
/*/
WSMETHOD WLisCriRG WSRECEIVE UserCode, Chave, Alias WSSEND WSNULL WSSERVICE PLRECGLO
LOCAL lRetorno 	:= .T.
LOCAL cCrit		:= {}
LOCAL ctexto	:= ""
LOCAL nI		:= 0

IF PrtChkUser( ::UserCode, "PLRECGLO", "WLisCriRG" )
	cCrit := PLRGLICriticas(::Chave, ::Alias)
Else
	lRetorno := .F.
	SetSoapFault( "", "Não autorizado a utilização do metodo" )
EndIf

::WSNULL := cCrit
Return lRetorno