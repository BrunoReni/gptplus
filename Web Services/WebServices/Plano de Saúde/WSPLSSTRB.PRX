#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"

WSSTRUCT SRetSt
    WSDATA Erro 			    AS String 	OPTIONAL
    WSDATA DescErro			    AS String 	OPTIONAL
ENDWSSTRUCT

//////////////////////////////////////////////////////////////////////////////////////////
//Definicao do Web Service de Controle do Usuario
//////////////////////////////////////////////////////////////////////////////////////////
WSSERVICE PLSSTRB	 				DESCRIPTION "Alteração do status do reembolso"

    WSDATA UserCode					AS String
    WSDATA NumProt                  AS String
    WSDATA Status                   AS String
    WSDATA MsgErro                  AS String
    WSDATA RetSt    				AS Array Of SRetSt

    //////////////////////////////////////////////////////////////////////////////////////
    //Metodo
    //////////////////////////////////////////////////////////////////////////////////////
    WSMETHOD AltStatRb			 DESCRIPTION "Altera o status do reembolso"

ENDWSSERVICE

//-------------------------------------------------------------------------------------------
/*/{Protheus.doc} AltStatRb
Altera o status do protocolo de reembolso (mobile)

@author Ribas
@since 22/01/2018
@version P12
/*/
//--------------------------------------------------------------------------------------------
WSMETHOD AltStatRb WSRECEIVE UserCode, NumProt, Status, MsgErro WSSEND RetSt WSSERVICE PLSSTRB

    LOCAL lRet         := .T.
    LOCAL lAltStat     := .F.

    DEFAULT ::NumProt  := ""
    DEFAULT ::MsgErro  := "Não foi possível alterar o status do protocolo de reembolso"
    DEFAULT ::Status   := "ZZ"

    If PrtChkUser( ::UserCode, "PLSSTRB", "AltStatRb" )

        If ASCAN( STRTOKARR(PLStatusBox(), ";"), ::Status ) > 0 .AND. !EMPTY(::NumProt)

            BOW->(DbSetOrder(1))
            If BOW->(MsSeek(xFilial("BOW") + ::NumProt))

                BOW->(RecLock('BOW',.F.))
                BOW->BOW_STATUS:= ::Status
                BOW->( MsUnlock() )

                AaDd( ::RetSt, WsClassNew( "SRetSt" ))
                ::RetSt[1]:Erro     := "false"
                ::RetSt[1]:DescErro := ""

                lAltStat := .T.
            EndIf
        EndIf

        If !lAltStat
            AaDd( ::RetSt, WsClassNew( "SRetSt" ))
            ::RetSt[1]:Erro     := "true"
            ::RetSt[1]:DescErro := ::MsgErro
        EndIf
    Else
        lRet := .F.
        SetSoapFault( "", "Não autorizado a utilização do metodo" )
    EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} reemobup
Após a gravação do arquivo na pasta upload, o servidor web executa
esta web function para gravar o arquivo na base de dados.

@author Ribas
@since 22/01/2018
@version P12
/*/
//-------------------------------------------------------------------
Web Function ReemObUp()
local oObj 		:= NIL
local cResult  	:= ''
local cExecPos	:= ''
local aFunPos	:= {}
local cFunction	:= ''
local cPar		:= ''
local cHtml 	:= ''

httpHeadOut->Access_Control_Allow_Origin 	:= "*"
httpHeadOut->Access_Control_Expose_Headers 	:= "Origin, X-Requested-With, Content-Type, Accept"
httpHeadOut->Access_Control_Allow_Headers 	:= "X-Authorization,X-Requested-With"
httpHeadOut->Access_Control_Allow_Methods		:= "GET, POST, OPTIONS"

// Apenas para validar a existencia da webfuncion
If valType(HttpGet->cDirArq) == "U"
    Return PLSDECODE("false|cDirArq não foi informado")
Endif

oObj := WSPLSXFUN():New()
IIf (!Empty(PlsGetAuth()),oObj:_HEADOUT :=  { PlsGetAuth() },)
WsChgURL( @oObj, "PLSXFUN.APW" )

If valtype(oObj) == "U" .or. empty(oObj)
    Return PLSDECODE("false|erro ao declarar o client do webservice WSPLSXFUN")
Endif

oObj:cUserCode	:= "MSALPHA"
oObj:cCRecno	:= iIf( valType(HttpGet->cRecno)  == "C", HttpGet->cRecno, "")
oObj:cCArquivo	:= iIf( valType(HttpGet->cDirArq) == "C", HttpGet->cDirArq, "")
oObj:cChave	:= iIf( valType(Httpget->cChave)  == "C", Httpget->cChave, "")
oObj:cAlias	:= iIf( valType(HttpGet->cAlitab) == "C", HttpGet->cAlitab, "")
oObj:cIndice	:= iIf( valType(HttpGet->cNumInd) == "C", HttpGet->cNumInd, "")

if ValType(HttpGet->cNoArqComp) <>  'U' .and. !empty(HttpGet->cNoArqComp)
    oObj:cNoArqComp := RC4Crypt(HttpGet->cNoArqComp, '123456789')
endif

//Retorna dados do upload
If oObj:UplConhec()
    cResult 			 := oObj:cUplConhecRESULT
    HttpSession->cUpload := cResult
Else
    HttpSession->cUpload := ""
    cResult 			 := "Não foi possível efetuar o upload do arquivo"
EndIf

Return PLSDECODE(cResult)