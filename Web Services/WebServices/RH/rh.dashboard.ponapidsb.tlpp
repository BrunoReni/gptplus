#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "TOTVS.CH"
#include "PONAPIDSB.CH"
#include "PONCALEN.CH"

NameSpace totvs.protheus.rh.dashboard.sigapon

//---------------------------------------------------------------------
/*/{Protheus.doc} DbHrBranches
@type			method
@description	Serviço para retornar as filiais do Protheus
@author			Marco Nakazawa
@since			19/08/2022
/*/
//---------------------------------------------------------------------
@GET("api/rh/v1/DbHrBranches")
Function dbHrBranches()
Local oResp		:= JsonObject():New()	as Json
Local aFiliais	:= {}					as Array

	aGetFil := GetFilRecnos(cEmpAnt , Space(FWGETTAMFILIAL), Replicate("Z", FWGETTAMFILIAL))
	
	aEval(aGetFil,{|x| aAdd(aFiliais,AllTrim(x[1]))})

	oResp["branches"] := aFiliais
	oResp := oResp:ToJson()
Return oRest:setResponse(oResp)

//---------------------------------------------------------------------
/*/{Protheus.doc} DbHrAttendanceControl
@type			method
@description	Serviço para retornar total de funcionários com o ponto completo e incompleto - Gadget Funcionários com pontos completos e Funcionários com pontos incompletos
@author			Marco Nakazawa
@since			25/05/2022
/*/
//---------------------------------------------------------------------
@POST("api/rh/v1/DbHrAttendanceControl")
Function dbHrAttendanceControl()
Local aTabCalend	:= {}										as Array
Local aFiliais		:= {}										as Array
Local aTabCalQtd	:= {}										as Array
Local aMarcFunc		:= {}										as Array
Local cBody	    	:= oRest:getBodyRequest()					as Character
Local cAlias		:= GetNextAlias()							as Character
Local cJoiFilSP8	:= "%" + FWJoinFilial("SP8", "SRA") + "%"	as Character
Local cJoiFilSQB	:= "%" + FWJoinFilial("SQB", "SRA") + "%"	as Character
local cDataDe		:= ""										as Character
local cDataAte		:= "" 										as Character
Local cWhereFil		:= ""										as Character
Local cFilAnt		:= ""										as Character
Local cMatAnt		:= ""										as Character
Local cNomeFil		:= ""										as Character
Local dDateDe		:= sToD("  /  /  ") 						as Date
Local dDateAte		:= sToD("  /  /  ") 						as Date
Local oResp			:= JsonObject():New()						as Json
Local oJparams		:= JsonObject():New()						as Json
Local lEof			:= .T.										as Logical
Local nLenFil		:= 0										as Numeric
Local nI			:= 0										as Numeric

Static aTodasMarc	:= {}										as Json
Static aPtCompl		:= {}										as Json
Static aPtIncomp	:= {} 										as Json
Static aSemMarc		:= {} 										as Json
Static aTodosFil	:= {}										as Json
Static aPtCompFil	:= {}										as Json
Static aPtIncFil	:= {} 										as Json
Static aSemMrcFil	:= {} 										as Json
Static nTotIncomp	:= 0 										as Numeric
Static nTotInFil	:= 0 										as Numeric

	oJparams:FromJSON(cBody)

	If checkParams(oJparams)
		cDataDe		:= StrTran(oJparams["startDate"],"-","")
		cDataAte	:= StrTran(oJparams["endDate"],"-","")
		aFiliais	:= oJparams["branches"]
		nLenFil		:= Len(aFiliais)

		fLimpVarPt()

		If nLenFil == 1 .And. aFiliais[1] == "todas"
			cWhereFil := "%SRA.RA_FILIAL <> ' '%"
		ElseIf nLenFil == 1 .And. aFiliais[1] <> "todas"
			cWhereFil := "%SRA.RA_FILIAL = '" + aFiliais[1] + "'%"
		Else
			cWhereFil := "%SRA.RA_FILIAL IN ('" + ArrTokStr(aFiliais,"','") + "')%"
		EndIf

		BeginSql alias cAlias
			SELECT
			  SRA.RA_FILIAL,
			  SRA.RA_MAT,
			  SRA.RA_NOME,
			  SRA.RA_CC,
			  SQB.QB_DESCRIC,
			  SRA.RA_DEMISSA,
			  SRA.R_E_C_N_O_ AS RECNO,
			  SP8.DATAMARC,
			  COALESCE(SP8.TOTALMARCS,0) AS TOTALMARCS,
			  SP8.REALIZADO
			FROM %table:SRA% SRA
			LEFT JOIN %table:SQB% SQB ON %exp:cJoiFilSQB% AND SQB.QB_DEPTO = SRA.RA_DEPTO
			LEFT JOIN (
				SELECT
				  SP8.P8_FILIAL,
				  SP8.P8_MAT,
				  SP8.P8_DATAAPO AS DATAMARC,
				  COUNT(SP8.P8_MAT) AS TOTALMARCS,
				  STRING_AGG(REPLICATE('0', 5 - len(lTrim(STR(P8_HORA,5,2)))) + lTrim(TRANSLATE(STR(P8_HORA,5,2),'.',':')), ' - ') WITHIN GROUP (ORDER BY P8_DATA,P8_HORA ASC) AS REALIZADO
				FROM %table:SP8% SP8
				WHERE SP8.P8_TPMCREP <> 'D'
				  AND (SP8.P8_DATAAPO >= %exp:cDataDe% AND SP8.P8_DATAAPO <= %exp:cDataAte%)
				  AND SP8.%notDel%
				GROUP BY SP8.P8_FILIAL, SP8.P8_MAT, SP8.P8_DATAAPO
				UNION ALL
				SELECT
				  SPG.PG_FILIAL,
				  SPG.PG_MAT,
				  SPG.PG_DATAAPO AS DATAMARC,
				  COUNT(SPG.PG_MAT) AS TOTALMARCS,
				  STRING_AGG(REPLICATE('0', 5 - len(lTrim(STR(PG_HORA,5,2)))) + lTrim(TRANSLATE(STR(PG_HORA,5,2),'.',':')), ' - ') WITHIN GROUP (ORDER BY PG_DATA,PG_HORA ASC) AS REALIZADO
				FROM %table:SPG% SPG
				WHERE SPG.PG_TPMCREP <> 'D'
				  AND (SPG.PG_DATAAPO >= %exp:cDataDe% AND SPG.PG_DATAAPO <= %exp:cDataAte%)
				  AND SPG.%notDel%
				GROUP BY SPG.PG_FILIAL, SPG.PG_MAT, SPG.PG_DATAAPO
			) SP8 ON %exp:cJoiFilSP8% AND SP8.P8_MAT = SRA.RA_MAT
			WHERE SRA.RA_TNOTRAB <> ' '
			  AND SRA.RA_SEQTURN <> ' '
			  AND SRA.RA_REGRA <> ' '
			  AND (SRA.RA_DEMISSA = ' ' OR SRA.RA_DEMISSA >= %exp:cDataDe%)
			  AND SRA.RA_ADMISSA <= %exp:cDataAte%
			  AND (SRA.RA_DEMISSA = ' ' OR SP8.DATAMARC < SRA.RA_DEMISSA)
			  AND %exp:cWhereFil%
			  AND SRA.%notDel%
			GROUP BY SRA.RA_FILIAL, SRA.RA_MAT, SRA.RA_NOME, SRA.RA_CC, SQB.QB_DESCRIC, SRA.RA_DEMISSA, SRA.R_E_C_N_O_, SP8.DATAMARC, SP8.TOTALMARCS, SP8.REALIZADO
			ORDER BY SRA.RA_FILIAL, SRA.RA_MAT, SRA.RA_NOME, SRA.RA_CC, SQB.QB_DESCRIC, SRA.RA_DEMISSA, SRA.R_E_C_N_O_, SP8.DATAMARC, SP8.TOTALMARCS, SP8.REALIZADO
		EndSql
		
		DbSelectArea("SRA")

		dDateDe := sToD(cDataDe)
		dDateAte := sToD(cDataAte)

		While lEof
			lEof := !(cAlias)->(Eof())

			If Empty(cFilAnt) .And. Empty(cMatAnt)
				If lEof
					aAdd(aMarcFunc,{(cAlias)->RA_FILIAL,(cAlias)->RA_MAT,(cAlias)->RA_NOME,(cAlias)->QB_DESCRIC,sToD((cAlias)->DATAMARC),(cAlias)->TOTALMARCS,(cAlias)->REALIZADO,(cAlias)->RA_CC,(cAlias)->RECNO})
				EndIf
			ElseIf (cAlias)->RA_FILIAL == cFilAnt .And. (cAlias)->RA_MAT == cMatAnt
				If (lEof,aAdd(aMarcFunc,{(cAlias)->RA_FILIAL,(cAlias)->RA_MAT,(cAlias)->RA_NOME,(cAlias)->QB_DESCRIC,sToD((cAlias)->DATAMARC),(cAlias)->TOTALMARCS,(cAlias)->REALIZADO,(cAlias)->RA_CC,(cAlias)->RECNO}),Nil)
			ElseIf Empty(aMarcFunc) .And. ((cAlias)->RA_FILIAL <> cFilAnt .Or. (cAlias)->RA_MAT <> cMatAnt)
				If (lEof,aAdd(aMarcFunc,{(cAlias)->RA_FILIAL,(cAlias)->RA_MAT,(cAlias)->RA_NOME,(cAlias)->QB_DESCRIC,sToD((cAlias)->DATAMARC),(cAlias)->TOTALMARCS,(cAlias)->REALIZADO,(cAlias)->RA_CC,(cAlias)->RECNO}),Nil)
			EndIf

			If (cAlias)->RA_FILIAL <> cFilAnt .Or. (cAlias)->RA_MAT <> cMatAnt .Or. !lEof
				If !Empty((cAlias)->RA_FILIAL) .And. !Empty((cAlias)->RA_MAT) .And. aScan(aTodasMarc, {|x| x["branch"] == (cAlias)->RA_FILIAL .And. x["registration"] == (cAlias)->RA_MAT}) == 0
					AAdd(aTodasMarc,{"branch":(cAlias)->RA_FILIAL,"registration":(cAlias)->RA_MAT,"name":AllTrim((cAlias)->RA_NOME),"department":(cAlias)->QB_DESCRIC})
				EndIf

				If !Empty(aMarcFunc)
					SRA->(dbGoto(aMarcFunc[1,9]))
					If (!Empty((cAlias)->RA_DEMISSA) .And. sToD((cAlias)->RA_DEMISSA) < dDateAte, dDateAte := sToD((cAlias)->RA_DEMISSA),Nil)

					CriaCalend(	dDateDe					,;	//01 -> Data Inicial do Periodo
								dDateAte				,;	//02 -> Data Final do Periodo
								Nil						,;	//03 -> Turno Para a Montagem do Calendario
								Nil						,;	//04 -> Sequencia Inicial para a Montagem Calendario
								Nil						,;	//05 -> Array Tabela de Horario Padrao
								@aTabCalend				,;	//06 -> Array com o Calendario de Marcacoes
								aMarcFunc[1,1]			,;	//07 -> Filial para a Montagem da Tabela de Horario
								aMarcFunc[1,2]			,;	//08 -> Matricula para a Montagem da Tabela de Horario
								aMarcFunc[1,8]			,;	//09 -> Centro de Custo para a Montagem da Tabela
								Nil		     			,;	//10 -> Array com as Trocas de Turno
								Nil						,;	//11 -> Array com Todas as Excecoes do Periodo
								Nil						,;	//12 -> Se executa Query para a Montagem da Tabela Padrao
								Nil						,;	//13 -> Se executa a funcao se sincronismo do calendario
								.F.			 			,;	//14 -> Se Forca a Criacao de Novo Calendario
								Nil		 				,;  //15 -> Array com marcacoes para tratamento de Turnos Opcionais
								Nil		 				,;  //16 -> Se considera as exceções cadastradas
								Nil 	 				 ;  //17 -> Chamada do GPEXPER
					)
					
					aTabCalQtd := fFrtCalen(aTabCalend)
				EndIf

				If !Empty(cFilAnt) .And. !Empty(cMatAnt)
					If Empty(aMarcFunc[Len(aMarcFunc),5]) .And. !Empty(aTabCalQtd)
						fValdMarca(aMarcFunc,aTabCalQtd,.T.)

						If lEof .And. !Empty(cFilAnt) .And. !Empty(cMatAnt) .And. aScan(aMarcFunc, {|x| x[1] == (cAlias)->RA_FILIAL .And. x[2] == (cAlias)->RA_MAT}) == 0
							aMarcFunc := {}
							AAdd(aMarcFunc,{(cAlias)->RA_FILIAL,(cAlias)->RA_MAT,(cAlias)->RA_NOME,(cAlias)->QB_DESCRIC,sToD((cAlias)->DATAMARC),(cAlias)->TOTALMARCS,(cAlias)->REALIZADO,(cAlias)->RA_CC,(cAlias)->RECNO})
						Else
							aMarcFunc := {}
							aTabCalQtd := {}
						EndIf
					Else
						fValdMarca(aMarcFunc,aTabCalQtd,.F.)
						aMarcFunc := {}
						aTabCalQtd := {}
						
						If lEof
							AAdd(aMarcFunc,{(cAlias)->RA_FILIAL,(cAlias)->RA_MAT,(cAlias)->RA_NOME,(cAlias)->QB_DESCRIC,sToD((cAlias)->DATAMARC),(cAlias)->TOTALMARCS,(cAlias)->REALIZADO,(cAlias)->RA_CC,(cAlias)->RECNO})
						EndIf
					EndIf
				EndIf
			EndIf
			
			cMatAnt := (cAlias)->RA_MAT
			cFilAnt := (cAlias)->RA_FILIAL
			(cAlias)->(dbSkip())
		Enddo

		For nI := 1 To nLenFil
			If nLenFil == 1
				If (aFiliais[nI] == "todas",cNomeFil := STR0020, cNomeFil := aFiliais[nI])
					oResp[cValToChar(nI)] := {;
						"branch":cNomeFil,;
						"totalEmployees":Len(aTodasMarc),;
						"totalDetails":aTodasMarc,;
						"clockMarkingsComplete":Len(aPtCompl),;
						"completeDetails":aPtCompl,;
						"clockMarkingsIncomplete":nTotIncomp,;
						"incompleteDetails":aPtIncomp,;
						"withoutClockMarkings":Len(aSemMarc),;
						"withoutDetails":aSemMarc;
					}
			Else
				If nI == 1
					cNomeFil := STR0020
					oResp[cValToChar(nI)] := {;
						"branch":cNomeFil,;
						"totalEmployees":Len(aTodasMarc),;
						"totalDetails":aTodasMarc,;
						"clockMarkingsComplete":Len(aPtCompl),;
						"completeDetails":aPtCompl,;
						"clockMarkingsIncomplete":nTotIncomp,;
						"incompleteDetails":aPtIncomp,;
						"withoutClockMarkings":Len(aSemMarc),;
						"withoutDetails":aSemMarc;
					}
				EndIf

				aTodosFil	:= {}
				aPtCompFil	:= {}
				aPtIncFil	:= {}
				nTotInFil	:= 0
				aSemMrcFil	:= {}

				fIndFunc(aFiliais[nI])
					cNomeFil := aFiliais[nI]
					oResp[cValToChar(nI+1)] := {;
						"branch":cNomeFil,;
						"totalEmployees":Len(aTodosFil),;
						"totalDetails":aTodosFil,;
						"clockMarkingsComplete":Len(aPtCompFil),;
						"completeDetails":aPtCompFil,;
						"clockMarkingsIncomplete":nTotInFil,;
						"incompleteDetails":aPtIncFil,;
						"withoutClockMarkings":Len(aSemMrcFil),;
						"withoutDetails":aSemMrcFil;
					}
			EndIf
		Next

		oResp := oResp:ToJson()
				
		SRA->(DbCloseArea())
		(cAlias)->(DbCloseArea())
	Else
		lRet := .F.
		SetRestFault(400, EncodeUTF8(STR0012)) // "Parâmetros inválidos: Verifique se os parâmetros startDate, endDate e branches foram enviados."
	EndIf
Return oRest:setResponse(oResp)

//---------------------------------------------------------------------
/*/{Protheus.doc} DashbHrClockin
@type			method
@description	Serviço para retornar as informações dos Gadgets do Clock In do Dashboard RH - Gadget Total de Marcações, Marcações Integradas, Existentes para Integração e Marcações sem NSR
@author			Marco Nakazawa
@since			25/05/2022
/*/
//---------------------------------------------------------------------
@POST("api/rh/v1/DbHrClockin")
Function dbHrClockin()
Local aDisps		:= {}								as Array
Local aMarcs		:= {}								as Array
Local aRetDisps		:= {}								as Array
Local aFiliais		:= {}								as Array
Local aFiltro		:= {}								as Array
Local aIntegrads	:= {} 								as Array
local cBody			:= oRest:getBodyRequest()			as Character
local cDataDe		:= ""								as Character
local cDataAte		:= ""								as Character
Local oResp			:= JsonObject():New()				as Json
Local oJparams		:= JsonObject():New()				as Json
Local lMSA			:= TcCanOpen("MSA_CONTROL_MARCAC")	as Logical
Local lRet			:= .T.								as Logical
Local lDashBoard	:= .T.								as Logical
Local lRR1			:= .F.								as Logical
Local nI			:= 0								as Numeric
Local nTotMarc		:= 0								as Numeric
Local nLenFil		:= 0								as Numeric
Local nLenaMarcs	:= 0								as Numeric

Static aTodasCk		:= {}								as Json
Static aProc		:= {}								as Json
Static aPenden		:= {} 								as Json
Static aSemNsr		:= {} 								as Json
Static aTodCkFil	:= {} 								as Json
Static aProcFil		:= {}								as Json
Static aPendenFil	:= {}								as Json
Static aSemNsrFil	:= {} 								as Json

Private aLog		:= {{}}								as Array
Private aLogIntegC	:= {}								as Array
Private aLogTecInt	:= {}								as Array
Private aParams		:= {}								as Array
Private lApiToken	:= .F.								as Logical
Private lGeraTokn	:= .F.								as Logical


	lRR1 := SuperGetMV("MV_APICLOD", .F., .F.) .And. TcCanOpen(RetSqlName("RR1"))
	
	oJparams:FromJSON(cBody)

	If checkParams(oJparams)
		cDataDe		:= StrTran(oJparams["startDate"],"-","")
		cDataAte	:= StrTran(oJparams["endDate"],"-","")
		cDataDe		:= Substr(cDataDe,1,4) + '-' + Substr(cDataDe,5,2) + '-' + Substr(cDataDe,7,2)
		cDataAte	:= Substr(cDataAte,1,4) + '-' + Substr(cDataAte,5,2) + '-' + Substr(cDataAte,7,2)
		aFiliais	:= oJparams["branches"]
		nLenFil		:= Len(aFiliais)

		fLimpVarCk()
		
		aParams := fBuscaParam()
		aDisps := fDispBusc()
		
		If aDisps[1] .and. Len(aDisps[3]) > 0
			aRetDisps := aDisps[3,1]
		EndIf
		
		If nLenFil == 1 .And. aFiliais[1] == "todas"
			aFiltro := {}
		Else
			aFiltro := aClone(aFiliais)
		EndIf
				
		aDados := fMarcBusc(Nil, aRetDisps, Nil, cDataDe, cDataAte, lDashBoard, aFiltro)

		If aDados[1] .And. Len(aDados[3]) > 0
			For nI := 1 To Len(aDados[3])
				If (ValType(aDados[3,nI,7]) == "C", aDados[3,nI,7] := Val(aDados[3,nI,7]), Nil)
				aDados[3,nI,8] := aDados[3,nI,8] := SubStr(aDados[3,nI,8],9,2) + "/" + SubStr(aDados[3,nI,8],6,2) + "/" + SubStr(aDados[3,nI,8],1,4) + " " + SubStr(aDados[3,nI,8],12,5)
				aAdd(aTodasCk,{"cnpj":aDados[3,nI,1],"cpf":aDados[3,nI,2],"pis":aDados[3,nI,3],"branch":aDados[3,nI,4],"name":aDados[3,nI,5],"device":aDados[3,nI,6],"nsr":aDados[3,nI,7],"dateTime":aDados[3,nI,8]})
			Next
			
			aSort(aDados[3],,,{|x,y| (x[6] < y[6]) .Or. (x[6] == y[6] .And. x[7] < y[7])})

			nTotMarc := Len(aDados[3])
			aMarcs := fFormDados(aDados[3])
			nLenaMarcs := Len(aMarcs)

			If lRR1 .And. !Empty(aParams[4])				
				For nI := 1 To nLenaMarcs
					fBuscClkIn(aMarcs[nI,1],aMarcs[nI,2],lRR1,@aIntegrads)
				Next
			ElseIf !lRR1 .And. lMSA .And. !Empty(aParams[4])
				For nI := 1 To nLenaMarcs
					fBuscClkIn(aMarcs[nI,1],aMarcs[nI,2],lRR1,@aIntegrads)
				Next
			EndIf

			fGerTdsVar(aTodasCk,aIntegrads)
		EndIf

		For nI := 1 To nLenFil
			If nLenFil == 1
				If (aFiliais[nI] == "todas",cNomeFil := STR0020, cNomeFil := aFiliais[nI])
					oResp[cValToChar(nI)] := {;
						"branch":cNomeFil,;
						"totalClockMarkings":Len(aTodasCk),;
						"totalDetails":aTodasCk,;
						"totalIntegrated":Len(aProc),;
						"integratedDetails":aProc,;
						"totalToBeIntegrated":Len(aPenden),;
						"toBeIntegratedDetails":aPenden,;
						"totalWhitoutNSR":Len(aSemNsr),;
						"whitoutNsrDetails":aSemNsr;
					}
			Else
				If nI == 1
					cNomeFil := STR0020
					oResp[cValToChar(nI)] := {;
						"branch":cNomeFil,;
						"totalClockMarkings":Len(aTodasCk),;
						"totalDetails":aTodasCk,;
						"totalIntegrated":Len(aProc),;
						"integratedDetails":aProc,;
						"totalToBeIntegrated":Len(aPenden),;
						"toBeIntegratedDetails":aPenden,;
						"totalWhitoutNSR":Len(aSemNsr),;
						"whitoutNsrDetails":aSemNsr;
					}
				EndIf

				aTodCkFil	:= {}
				aProcFil	:= {}
				aPendenFil	:= {}
				aSemNsrFil	:= {}

				fIndClockI(aFiliais[nI])
					cNomeFil := aFiliais[nI]
					oResp[cValToChar(nI+1)] := {;
						"branch":cNomeFil,;
						"totalClockMarkings":Len(aTodCkFil),;
						"totalDetails":aTodCkFil,;
						"totalIntegrated":Len(aProcFil),;
						"integratedDetails":aProcFil,;
						"totalToBeIntegrated":Len(aPendenFil),;
						"toBeIntegratedDetails":aPendenFil,;
						"totalWhitoutNSR":Len(aSemNsrFil),;
						"whitoutNsrDetails":aSemNsrFil;
					}
			EndIf
		Next

		oResp := oResp:ToJson()
	Else
		lRet := .F.
		SetRestFault(400, EncodeUTF8(STR0012))  // "Parâmetros inválidos: Verifique se os parâmetros startDate, endDate e branches foram enviados."
	EndIf
Return oRest:setResponse(oResp)

@POST("api/rh/v1/DbHrEmail")
Function dbHrEmail()
Local oResp			:= JsonObject():New()												as Json
Local oJparams		:= JsonObject():New()												as Json
Local cBody    		:= ""																as Character
Local cGpeMail		:= SuperGetMV("MV_GPEMAIL",.F.,"")									as Character
Local cRelausr		:= SuperGetMV("MV_RELAUSR",.F.,"")									as Character
	
	cBody := oRest:getBodyRequest()
	oJparams:fromJson(cBody)

	If ValType(oJparams) == "J" .And. oJparams['details'] <> Nil .And. !Empty(oJparams['details'])
		If Empty(cGpeMail) .And. Empty(cRelausr)
			lRet := .F.
			SetRestFault(400, EncodeUTF8(STR0019)) //"Falha no envio do e-mail, verifique as configurações do sistema para o envio de e-mails."
		Else
			If !PONA480A(.T.,oJparams)
				lRet := .F.
				SetRestFault(400, EncodeUTF8(STR0019)) //"Falha no envio do e-mail, verifique as configurações do sistema para o envio de e-mails."
			EndIf
		EndIf
	Else
		lRet := .F.
		SetRestFault(401, EncodeUTF8(STR0024)) //"Parâmetros inválidos: Verifique se todos os parâmetros foram enviados corretamente."
	EndIf
Return oRest:setResponse(oResp)

/*/{Protheus.doc} checkParams
Validação dos parâmetros recebidos.
@author Marco Nakazawa
@since 25/05/2022
/*/
Static Function checkParams(oJparams)
Local lRet 	:= .T. 		as Logical

Default oJparams = ""

If ValType(oJparams) == "J" .And. (oJparams['startDate'] == Nil .Or. oJparams['endDate'] == Nil .Or. oJparams['branches'] == Nil .Or. Empty(oJparams['branches']))
	lRet := .F.
EndIf

Return lRet

/*/{Protheus.doc} fFormDados
Formata os dados de retorno da Carol para utilizar na query de marcações integradas.
@author Marco Nakazawa
@since 25/05/2022
/*/
Static Function fFormDados(aDados)
Local nI		:= 0	as Numeric
Local nLenDados	:= 0	as Numeric
Local cDisp		:= ""	as Character
Local aRetDados	:= {}	as Array

Default aDados := {}

If !Empty(aDados)
	nLenDados := Len(aDados)

	For nI := 1 To nLenDados
		If cDisp <> aDados[nI,6] .And. aDados[nI,7] > 0
			cDisp := aDados[nI,6]
			aAdd(aRetDados,{cDisp,{cValToChar(aDados[nI,7])}})
		ElseIf cDisp == aDados[nI,6] .And. aDados[nI,7] > 0
			aAdd(aRetDados[Len(aRetDados),2],cValToChar(aDados[nI,7]))
		EndIf
	Next
EndIf

Return aClone(aRetDados)

/*/{Protheus.doc} fBuscClkIn
Verifica quais marcações já estão integradas com o Protheus
@author Marco Nakazawa
@since 25/05/2022
/*/
Static Function fBuscClkIn(cDisp,aNSR,lRR1,aIntegrads)
Local nI			:= 0			as Numeric
Local nLenNSR		:= 0			as Numeric
Local nLimite		:= 0			as Numeric
Local cAlias		:= "TMPMARC"	as Character
Local cQuery		:= ""			as Character
Local aNsrWhere		:= {}			as Array

Static __oST1						as Object

Default cDisp		:= ""
Default aNSR		:= {}
Default aIntegrads	:= {}
Default lRR1		:= .F.

If __oSt1 == Nil
	__oSt1 := FWPreparedStatement():New()
	
	If !lRR1
		cQuery := "SELECT COD_RELOGIO_EXT_CHAVE AS DISPOSITIVO, COD_NSR AS NSR FROM MSA_CONTROL_MARCAC "
		cQuery += "WHERE COD_RELOGIO_EXT_CHAVE = ?"
		cQuery += "  AND COD_NSR IN (?)"
		cQuery += "  AND COD_UNID_EXT_CHAVE = '" + aParams[4] + "'"
	Else
		cQuery := "SELECT RR1.RR1_CODREL AS DISPOSITIVO, RR1.RR1_CODNSR AS NSR FROM "
		cQuery += RetSqlName("RR1") + " RR1 "
		cQuery += "WHERE RR1.RR1_CODREL = ?"
		cQuery += "  AND RR1.RR1_CODNSR IN (?)"
		cQuery += "  AND RR1.RR1_CODUNI = '" + aParams[4] + "'"
		cQuery += "  AND RR1.D_E_L_E_T_ = ' '"
	EndIf

	cQuery := ChangeQuery(cQuery)
    
    __oSt1:SetQuery(cQuery)
EndIf

If !Empty(aNSR)
	nLenNSR := Len(aNSR)

	If nLenNSR > 2000
		nLimite := 2000
		
		For nI := 1 To nLenNSR
			aAdd(aNsrWhere,aNSR[nI])
			
			If nI == nLimite .Or. nI == nLenNSR
				__oSt1:SetString(1,cDisp)
				__oSt1:SetIn(2,aNsrWhere)
				
				cQuery := __oSt1:getFixQuery()

				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias)

				nLimite += 2000
				aNsrWhere := {}

				While !(cAlias)->(Eof())
					aAdd(aIntegrads,{AllTrim((cAlias)->DISPOSITIVO),(cAlias)->NSR})
					(cAlias)->(dbSkip())
				Enddo
				
				dbSelectArea(cAlias)
				dbCloseArea()
			EndIf
		Next
	Else
		__oSt1:SetString(1,cDisp)
		__oSt1:SetIn(2,aNSR)
				
		cQuery := __oSt1:getFixQuery()

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias)
		
		While !(cAlias)->(Eof())
			aAdd(aIntegrads,{AllTrim((cAlias)->DISPOSITIVO),(cAlias)->NSR})
			(cAlias)->(dbSkip())
		Enddo
		
		dbSelectArea(cAlias)
		dbCloseArea()
	EndIf

EndIf
Return

/*/{Protheus.doc} fFrtCalen
Formata o aTabCalend para reusimir as informações por dia.
@author Marco Nakazawa
@since 03/04/2023
/*/
Static Function fFrtCalen(aTabCalend)
Local cPrevisto		:= ""					as Character
Local nI			:= 0					as Numeric
Local nLenTabCal	:= 0					as Numeric
Local nQtdmar		:= 0					as Numeric
Local aCalenFrt		:= {}					as Array
Local dDateAtu		:= sToD("  /  /  ")		as Date
Local dDateAnt		:= sToD("  /  /  ")		as Date
local lPrimeiro		:= .T.					as Logical

Default aTabCalend := {}

nLenTabCal := len(aTabCalend)

For nI := 1 To nLenTabCal
	dDateAtu := aTabCalend[nI,CALEND_POS_DATA_APO]

	If aTabCalend[nI,CALEND_POS_TIPO_DIA] <> "S" .And. nQtdmar == 0
		dDateAnt := aTabCalend[nI,CALEND_POS_DATA_APO]
		loop
	EndIf

	If lPrimeiro
		dDateAnt := aTabCalend[nI,CALEND_POS_DATA_APO]
		lPrimeiro := .F.
	EndIf
		
	If nI == nLenTabCal
		cPrevisto += StrZero(aTabCalend[nI,CALEND_POS_HORA],5,2)
		cPrevisto := StrTran(cPrevisto,".",":")

		aAdd(aCalenFrt,{dDateAtu,++nQtdmar,cPrevisto})
		
		nQtdmar := 0
		cPrevisto := ""
		Loop
	EndIf

	If dDateAtu <> dDateAnt .And. nQtdmar > 0
		cPrevisto := SubStr(cPrevisto,1,Len(cPrevisto)-3)
		cPrevisto := StrTran(cPrevisto,".",":")
		
		aAdd(aCalenFrt,{dDateAnt,nQtdmar,cPrevisto})
		
		dDateAnt := dDateAtu
		nQtdmar := 0
		cPrevisto := ""
	EndIf
	
	If aTabCalend[nI,CALEND_POS_TIPO_DIA] == "S"
		nQtdmar++
		cPrevisto += StrZero(aTabCalend[nI,CALEND_POS_HORA],5,2) + " - "
		dDateAnt := aTabCalend[nI,CALEND_POS_DATA_APO]
	EndIf
Next
Return aCalenFrt

/*/{Protheus.doc} fValdMarca
Valida se o ponto do funcionário está completo, incompleto ou o funcionário não possui marcações no período
@author Marco Nakazawa
@since 03/04/2023
/*/
Static Function fValdMarca(aMarcFunc,aTabCalQtd,lFuncSMarc)
local cDataFormt	:= ""				as Character
Local nI			:= 0				as Numeric
Local nLenTabCal	:= 0				as Numeric
Local nPosMarc		:= 0				as Numeric
Local lPtComplet	:= .T.				as Logical

Default aMarcFunc	:= {}
Default aTabCalQtd	:= {}
Default lFuncSMarc	:= .F.

If lFuncSMarc
	aAdd(aSemMarc,{"branch":aMarcFunc[1,1],"registration":aMarcFunc[1,2],"name":aMarcFunc[1,3],"department":aMarcFunc[1,4]})
Else
	nLenTabCal := len(aTabCalQtd)

	If nLenTabCal == 0
		aAdd(aPtCompl,{"branch":aMarcFunc[1,1],"registration":aMarcFunc[1,2],"name":aMarcFunc[1,3],"department":aMarcFunc[1,4]})
	EndIf

	For nI := 1 To nLenTabCal
		If (nPosMarc := aScan(aMarcFunc, {|x| x[5] == aTabCalQtd[nI,1]})) > 0
			cDataFormt := dToS(aTabCalQtd[nI,1])
			cDataFormt := SubStr(cDataFormt,7,2) + "/" + SubStr(cDataFormt,5,2) + "/" + SubStr(cDataFormt,1,4)
			
			If aMarcFunc[nPosMarc,6] < aTabCalQtd[nI,2]
				If aTabCalQtd[nI,2] - aMarcFunc[nPosMarc,6] == 1
					aAdd(aPtIncomp,{"branch":aMarcFunc[1,1],"registration":aMarcFunc[1,2],"name":aMarcFunc[1,3],"department":aMarcFunc[1,4],"dateTime":cDataFormt,"reason":STR0022, "estimated":aTabCalQtd[nI,3],"performed":aMarcFunc[nPosMarc,7]})
				Else
					aAdd(aPtIncomp,{"branch":aMarcFunc[1,1],"registration":aMarcFunc[1,2],"name":aMarcFunc[1,3],"department":aMarcFunc[1,4],"dateTime":cDataFormt,"reason":cValToChar((aTabCalQtd[nI,2] - aMarcFunc[nPosMarc,6])) + " " + STR0021, "estimated":aTabCalQtd[nI,3],"performed":aMarcFunc[nPosMarc,7]})
				EndIf
				
				lPtComplet := .F.
				Loop
			EndIf
		Else
			cDataFormt := dToS(aTabCalQtd[nI,1])
			cDataFormt := SubStr(cDataFormt,7,2) + "/" + SubStr(cDataFormt,5,2) + "/" + SubStr(cDataFormt,1,4)

			aAdd(aPtIncomp,{"branch":aMarcFunc[1,1],"registration":aMarcFunc[1,2],"name":aMarcFunc[1,3],"department":aMarcFunc[1,4],"dateTime":cDataFormt,"reason":STR0023, "estimated":aTabCalQtd[nI,3],"performed":""})
			
			lPtComplet := .F.
			Loop
		EndIf

		If nI == nLenTabCal .And. lPtComplet
			aAdd(aPtCompl,{"branch":aMarcFunc[1,1],"registration":aMarcFunc[1,2],"name":aMarcFunc[1,3],"department":aMarcFunc[1,4]})
		EndIf
	Next
EndIf

If (!lPtComplet,nTotIncomp++,Nil)

Return

/*/{Protheus.doc} fIndFunc
Separa os indicadores de funcionários por filial
@author Marco Nakazawa
@since 03/04/2023
/*/
Static Function fIndFunc(cFil)
Local nI 			:= 0					as Numeric
Local nLenPtComp	:= Len(aPtCompl)		as Numeric
Local nLenPtInco	:= Len(aPtIncomp)		as Numeric
Local nLenSemMar	:= Len(aSemMarc)		as Numeric
Local cMatAnt		:= ""					as Character

Default cFil := ""

If !Empty(cFil)
	cFil := AllTrim(cFil)
	
	For nI := 1 To nLenPtComp
		If AllTrim(aPtCompl[nI,"branch"]) == cFil
			aAdd(aTodosFil,aPtCompl[nI])
			aAdd(aPtCompFil,aPtCompl[nI])
		EndIf
	Next

	For nI := 1 To nLenPtInco
		If AllTrim(aPtIncomp[nI,"branch"]) == cFil
			aAdd(aPtIncFil,aPtIncomp[nI])
			
			If AllTrim(aPtIncomp[nI,"registration"]) <> cMatAnt
				aAdd(aTodosFil,{"branch":aPtIncomp[nI,"branch"],"registration":aPtIncomp[nI,"registration"],"name":aPtIncomp[nI,"name"],"department":aPtIncomp[nI,"department"]})
				nTotInFil++
				cMatAnt := AllTrim(aPtIncomp[nI,"registration"])
			EndIf
		EndIf
	Next

	For nI := 1 To nLenSemMar
		If AllTrim(aSemMarc[nI,"branch"]) == cFil
			aAdd(aTodosFil,aSemMarc[nI])
			aAdd(aSemMrcFil,aSemMarc[nI])
		EndIf
	Next
EndIf
Return 

/*/{Protheus.doc} fLimpVarPt
Limpa as variáveis estáticas dos indicadores de funcionários
@author Marco Nakazawa
@since 03/04/2023
/*/
Static Function fLimpVarPt()
aTodasMarc	:= {}
aPtCompl	:= {}
aPtIncomp	:= {}
nTotIncomp	:= 0
aSemMarc	:= {}
aTodosFil	:= {}
aPtCompFil	:= {}
aPtIncFil	:= {}
nTotInFil	:= 0 
aSemMrcFil	:= {}
Return

/*/{Protheus.doc} fLimpVarCk
Limpa as variáveis estáticas dos indicadores do Clock In
@author Marco Nakazawa
@since 03/04/2023
/*/
Static Function fLimpVarCk()
aTodasCk	:= {}
aProc		:= {}
aPenden		:= {}
aSemNsr		:= {}
aTodCkFil	:= {}
aProcFil	:= {}
aPendenFil	:= {}
aSemNsrFil	:= {}
Return

/*/{Protheus.doc} fGerTdsVar
Gera o array com todas as marcações e suas situaçãoes (Integradas ou não integradas)
@author Marco Nakazawa
@since 03/04/2022
/*/
Static Function fGerTdsVar(aTodasCk,aIntegrads)
Local nI			:= 0					as Numeric

Default aTodasCk	:= {}
Default aIntegrads	:= {}

If !Empty(aTodasCk)
	For nI := 1 To Len(aTodasCk)
		If aTodasCk[nI,"nsr"] == 0
			aAdd(aSemNsr,aTodasCk[nI])
		ElseIf aScan(aIntegrads,{|x| x[1] == aTodasCk[nI,"device"] .And. x[2] == aTodasCk[nI,"nsr"]}) > 0
			aAdd(aProc,aTodasCk[nI])
		Else
			aAdd(aPenden,aTodasCk[nI])
		EndIf
	Next
EndIf
Return

/*/{Protheus.doc} fIndClockI
Separa os indicadores do Clock In por filial
@author Marco Nakazawa
@since 03/04/2023
/*/
Static Function fIndClockI(cFil)
Local nI 			:= 0					as Numeric
Local nLenProc		:= Len(aProc)			as Numeric
Local nLenPend		:= Len(aPenden)			as Numeric
Local nLenSemNsr	:= Len(aSemNsr)			as Numeric

Default cFil := ""

If !Empty(cFil)
	cFil := AllTrim(cFil)
	
	For nI := 1 To nLenProc
		If AllTrim(aProc[nI,"branch"]) == cFil
			aAdd(aTodCkFil,aProc[nI])
			aAdd(aProcFil,aProc[nI])
		EndIf
	Next

	For nI := 1 To nLenPend
		If AllTrim(aPenden[nI,"branch"]) == cFil
			aAdd(aTodCkFil,aPenden[nI])
			aAdd(aPendenFil,aPenden[nI])
		EndIf
	Next

	For nI := 1 To nLenSemNsr
		If AllTrim(aSemNsr[nI,"branch"]) == cFil
			aAdd(aTodCkFil,aSemNsr[nI])
			aAdd(aSemNsrFil,aSemNsr[nI])
		EndIf
	Next
EndIf
Return 
