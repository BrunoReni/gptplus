#INCLUDE "wspms040.ch"
#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"

#DEFINE _TaskType						1
#DEFINE _TaskCode						2
#DEFINE _TaskDescription			3
#DEFINE _EstimatedInitialDate	 	4
#DEFINE _EstimatedFinalDate		5
#DEFINE _EstimatedInitialHour		6
#DEFINE _EstimatedFinalHour		7
#DEFINE _ExecutionInitialDate		8
#DEFINE _ExecutionFinalDate		9
#DEFINE _POC                		10
#DEFINE _CPM                		11
#DEFINE _TimeDuration       	   12
#DEFINE _DbRecord           		13
#DEFINE _Resources          		14
#DEFINE _Level              		15
#DEFINE _ProjectCode            16
#DEFINE _BitMap                 17

#DEFINE _GANTT_ELEMENTS    		17


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³WSPMS040  ³ Autor ³Cristiano Denardi      ³ Data ³03.08.2005  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Web Service responsavel pela manutencao das informacoes      ³±±
±±³          ³de Projetos/Consultas                                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function WSPmsReport()
Return
WSSERVICE PmsReport	            DESCRIPTION STR0001 NAMESPACE "" //"Servico de consulta de alocacoes e graficos dos projetos ativos"
	WSDATA UserCode               AS String
	WSDATA ProtheusUserCode       AS String
	WSDATA Header                 As Array Of BrwHeader
	WSDATA HeaderPms              As Array Of BrwHeaderPms
	WSDATA HeaderType             As String
	WSDATA ProjectList				As Array Of ProjectListView
	WSDATA ResourceList				As Array Of ResourceView
	WSDATA TeamList					As Array Of TeamView
	WSDATA ResourceInitial			As String
	WSDATA ResourceFinal				As String
	WSDATA OcorrenceInitial			As String
	WSDATA OcorrenceFinal			As String
	WSDATA TeamInitial				As String
	WSDATA TeamFinal					As String
	WSDATA DateInitial				As Date
	WSDATA DateFinal					As Date
	WSDATA ProjectInitial			As String
	WSDATA ProjectFinal				As String
	WSDATA ProjectCode				As String
	WSDATA ResourcesCodes			As String
	WSDATA TeamsCodes   				As String
	WSDATA TasksOption  				As Integer Optional
	WSDATA WBSCode                As String
	WSDATA Gantt						As Array Of GanttTaskView
	WSDATA TaskList   				As Array Of GanttTaskView
	WSDATA OcorrenceList   			As Array Of OcorrenceView
   WSDATA PageLen                AS Integer OPTIONAL
   WSDATA PageFirst              AS Integer OPTIONAL
   WSDATA QryAdd                 AS String OPTIONAL
   WSDATA IndexKey               AS Integer OPTIONAL
	WSDATA ResourceView				As ResourceView
	WSDATA ClientInitial   As String
	WSDATA ClientFinal As String
	
	WSMETHOD GetHeader        			DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetHeaderPms     			DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetProjectList   			DESCRIPTION STR0003 //"Metodo que descreve os projetos do sistema"
	WSMETHOD GetResourceList			DESCRIPTION STR0004 //"Metodo que descreve os recursos do sistema"
	WSMETHOD GetMyResource				DESCRIPTION "Metodo que retorna que recurso esta logado no sistema"
	WSMETHOD GetTeamList    			DESCRIPTION "Metodo que descreve as equipes do sistema"
	WSMETHOD GetTaskList    			DESCRIPTION "Metodo que descreve as tarefas de um projeto"
	WSMETHOD GetOcorrenceList  		DESCRIPTION "Metodo que descreve as tarefas de um projeto"
	WSMETHOD GetGantt	      			DESCRIPTION STR0005 //"Metodo que retorna os dados para montar o Gantt"
	WSMETHOD GetGanttRes					DESCRIPTION "Metodo que retorna os dados para montar o Gantt por recursos"
	WSMETHOD GetGanttTeam				DESCRIPTION "Metodo que retorna os dados para montar o Gantt por equipe"
	WSMETHOD GetProjListByClient	DESCRIPTION "Teste"
ENDWSSERVICE

/*/===========================================================/*/
WSMETHOD GetHeader WSRECEIVE HeaderType WSSEND Header WSSERVICE PmsReport

::Header := PmsHeader(::HeaderType)

Return(.T.)    

/*/===========================================================/*/
WSMETHOD GetHeaderPms WSRECEIVE HeaderType WSSEND HeaderPms WSSERVICE PmsReport

::HeaderPms := PmsHeader(::HeaderType)

Return(.T.)
/*/===========================================================/*/
WSMETHOD GetTaskList WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, PageLen,PageFirst,QryAdd,IndexKey WSSEND TaskList WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local cRev		:= ""
Local cUsuario	:= ""
Local nX			:= 0
Local nY       := 0
Local	cAliasQry:=	"AF9QRY"
Local	lQuery  	:= .F.
Local	cQuery  	:= ""
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."

DEFAULT ::PageLen   := 0
DEFAULT ::PageFirst := 0
DEFAULT ::IndexKey  := 1

If PrtChkUser(::UserCode,"PmsReport","GetTaskList")

	cUsuario	:= UsrPrtErp( ::UserCode )
//	cUsuario	:= ::ProtheusUserCode 
	If !Empty( ::ProjectCode )
		::ProjectCode	:=	Padr(SubStr(::ProjectCode,1,TamSX3('AF8_PROJET')[1]),TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ::ProjectCode )
	Endif

	dbSelectArea("AF9")
	dbSetOrder(1) //AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
	#IFDEF TOP
		cAliasQry	:=	"AF9QRY"
		lQuery  := .T.
		cQuery  := "SELECT AF9_FILIAL,AF9_PROJET,AF9_REVISA,AF9_TAREFA,AF9_NIVEL,AF9_DESCRI,AF9_HDURAC,AF9_START,AF9_FINISH,AF9_HORAI,AF9_HORAF,AF9_DTATUI,AF9_DTATUF,AF9_EDTPAI,AF9_QUANT"
		cQuery  += GetUserFields("AF9")
		cQuery  += " FROM "+RetSqlName("AF9") +" AF9 "
		cQuery  += " WHERE AF9.AF9_FILIAL='"+xFilial("AF9")+"' AND "
		cQuery  += " AF9.AF9_PROJET = '"+::ProjectCode+"' AND "
		cQuery  += " AF9.AF9_REVISA = '"+cRev+"' AND "
		cQuery  += " AF9.D_E_L_E_T_=' ' "
		If !Empty(::QryAdd)
			cQuery  := WsQueryAdd(cQuery,::QryAdd)
		Endif
		dbSetOrder(::IndexKey)
		cQuery  += "ORDER BY "+SqlOrder(IndexKey())
		cQuery := ChangeQuery(cQuery)
		
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
		aStruct := AF9->(dbStruct())
		For nX := 1 To Len(aStruct)
			If aStruct[nX][2]<>"C" .And. FieldPos(aStruct[nX][1])<>0
				TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		    EndIf
		Next nX
	#ELSE
		cAliasQry	:=	"AF9"      
		MsSeek( xFilial("AF9")+ ProjectCode + cRev   )
	#ENDIF		
	dbSelectArea(cAliasQry)
	::TaskList	:=	{}
	nX	:=	0
	While !Eof()	.And. (xFilial("AF9") == AF9_FILIAL) .And. (AF9_PROJET == ::ProjectCode) ;
						.And. (AF9_REVISA == cRev) 
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valida acesso a Tarefa pelo Usuario do Portal ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !PmsChkUser(AF9_PROJET,AF9_TAREFA,,AF9_EDTPAI,1,"ESTRUT",cRev,cUsuario)
			dbSelectArea(cAliasQry)
			dbSkip()
			Loop
		Endif
		If !lQuery	
			If !Empty(QryAdd)
				If !(&(QryAdd))
					DbSelectArea(cAliasQry)
					dbSkip()
					Loop
				Endif
			Endif						  
		Endif	
		nY++
			
		If ::PageFirst==0 .Or. nY >= ::PageFirst
			aadd(::TaskList,WsClassNew("GanttTaskView"))
			nX++
			::TaskList[nX]:ProjectCode					:=	::ProjectCode
			::TaskList[nX]:TaskType						:=	1
			::TaskList[nX]:TaskCode						:= AF9_TAREFA
			::TaskList[nX]:Level							:= AF9_NIVEL
			::TaskList[nX]:TaskDescription 			:= AF9_DESCRI
			::TaskList[nX]:TimeDuration 				:= AF9_HDURAC
			::TaskList[nX]:EstimatedInitialDate		:= AF9_START
			::TaskList[nX]:EstimatedFinalDate 		:= AF9_FINISH
			::TaskList[nX]:EstimatedInitialHour		:= AF9_HORAI
			::TaskList[nX]:EstimatedFinalHour   	:= AF9_HORAF
			::TaskList[nX]:ExecutionInitialDate		:= AF9_DTATUI
			::TaskList[nX]:ExecutionFinalDate		:= AF9_DTATUF
			::TaskList[nX]:Quantity           		:= AF9_QUANT 
		Endif
		
		If nX >= ::PageLen .And. ::PageLen <> 0
			Exit
		EndIf
		
		dbSelectArea(cAliasQry)
		dbSkip()
	EndDo
	If lQuery
		dbSelectArea(cAliasQry)
		dbCloseArea()
		dbSelectArea("AF9")
	Endif	
Else          
	SetSoapFault("GETTASKLIST",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)            

/*/===========================================================/*/
WSMETHOD GetProjectList WSRECEIVE UserCode, ProtheusUserCode, ;
                                  DateInitial, DateFinal, ;
                                  ProjectInitial, ProjectFinal, ;
                                  PageLen, PageFirst, ;
                                  QryAdd, IndexKey ;
                           WSSEND ProjectList ;
                        WSSERVICE PmsReport
	Local lReturn := .F.
	Local cMsg    := "PmsChkUser: Usuário sem permissão para executar este webservice."

	lReturn := GetProj(UserCode, ProtheusUserCode, DateInitial, DateFinal, ;
	                   ProjectInitial, ProjectFinal, ;
	                   "", "Z", ;
	                   ::ProjectList, PageLen, PageFirst, QryAdd, IndexKey)
	                   
	If !lReturn
		SetSoapFault("GETPROJECTLIST", cMsg)
	EndIf

Return lReturn

/*/===========================================================/*/
WSMETHOD GetResourceList WSRECEIVE UserCode, ProtheusUserCode, ResourceInitial, ResourceFinal,PageLen,PageFirst,QryAdd,IndexKey WSSEND ResourceList WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local nX       := 0
Local nY       := 0
Local	cAliasQry:=	"AE8QRY"
Local	lQuery  	:= .F.
Local	cQuery  	:= ""
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."

DEFAULT ::PageLen   := 0
DEFAULT ::PageFirst := 0
DEFAULT ::IndexKey  := 1

If PrtChkUser(::UserCode,"PmsReport","GetResourceList")
	dbSelectArea("AE8")
	#IFDEF TOP
		cAliasQry	:=	"AE8QRY"
		lQuery  := .T.
		cQuery  := "SELECT AE8_FILIAL,AE8_RECURS,AE8_CALEND,AE8_DESCRI,AE8_EQUIP,AE8_PRODUT,AED_DESCRI "
		cQuery  += GetUserFields("AE8")
		cQuery  += " FROM "+RetSqlName("AE8")+" AE8 LEFT JOIN " + RetSqlName("AED")+ ' AED '
		cQuery	+= " ON AED.AED_FILIAL = '"+xFilial("AED")+"' "
		cQuery  += " AND AED.AED_EQUIP = AE8.AE8_EQUIP "
		cQuery  += " AND AED.D_E_L_E_T_=' ' "              
		cQuery  += " WHERE "
  		cQuery  += " AE8.AE8_FILIAL='"+xFilial("AE8")+"' AND "
		cQuery  += " AE8.AE8_RECURS BETWEEN '"+::ResourceInitial+"' AND '"+::ResourceFinal+"' AND "
		cQuery  += " AE8.D_E_L_E_T_=' ' "

		If !Empty(::QryAdd)
			cQuery  := WsQueryAdd(cQuery,::QryAdd)
		Endif
		dbSetOrder(::IndexKey)
		cQuery  += "ORDER BY "+SqlOrder(IndexKey())
		
		cQuery := ChangeQuery(cQuery)
		
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
		aStruct := AE8->(dbStruct())
		For nX := 1 To Len(aStruct)
			If aStruct[nX][2]<>"C" .And. FieldPos(aStruct[nX][1])<>0
				TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		    EndIf
		Next nX
	#ELSE
		cAliasQry	:=	"AE8"
		dbSetOrder(1) //AF8_FILIAL+AF8_PROJET
		MsSeek( xFilial("AE8")+::ResourceInitial,.T. )
	#ENDIF 
	nX	:=	0		
	dbSelectArea(cAliasQry)
	::ResourceList	:=	{}
	While	!Eof() .And. xFilial("AE8") == AE8_FILIAL .And. AE8_RECURS <= ::ResourceFinal
		If !lQuery	
			If !Empty(QryAdd)
				If !(&(QryAdd))
					DbSelectArea(cAliasQry)
					dbSkip()
					Loop
				Endif
			Endif						  
		Endif	
		nY++
		
		If ::PageFirst==0 .Or. nY >= ::PageFirst
		
			aadd(::ResourceList,WsClassNew("ResourceView"))
			nX++
			::ResourceList[nX]:ResourceCode			:= AE8_RECURS
			::ResourceList[nX]:ResourceName			:= AE8_DESCRI
			::ResourceList[nX]:Calendar				:= AE8_CALEND
			::ResourceList[nX]:TeamCode				:= AE8_EQUIP
			::ResourceList[nX]:TeamName				:= "" //AED_DESCRI
			::ResourceList[nX]:ProductCode			:= AE8_PRODUT   
			If lQuery			
				::ResourceList[nX]:TeamName				:= AED_DESCRI
			Else
				dbSelectArea("AED")
				dbSetOrder(1) // AED_FILIAL+AED_EQUIP
				If MsSeek( xFilial("AED")+AE8->AE8_EQUIP )
					::ResourceList[nX]:TeamName				:= AED->AED_DESCRI
				Endif
			Endif				
		Endif	
	
		If nX >= ::PageLen .And. ::PageLen <> 0
			Exit
		EndIf

		DbSelectArea(cAliasQry)
		dbSkip()
	EndDo
	If lQuery
		dbSelectArea(cAliasQry)
		dbCloseArea()
		dbSelectArea("AE8")
	Endif	
Else       
	SetSoapFault("GETRESOURCELIST",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)



/*/===========================================================/*/
WSMETHOD GetMyResource WSRECEIVE UserCode, ProtheusUserCode WSSEND ResourceView WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local nX       := 0
Local	cAliasQry:=	"AE8QRY"
Local	lQuery  	:= .F.
Local	cQuery  	:= ""
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."
Local	cUsuario	:= ""


If PrtChkUser(::UserCode,"PmsReport","GetMyResource")
	cUsuario	:= UsrPrtErp( ::UserCode )
	::ResourceView	:=	WsClassNew("ResourceView")
	If !Empty(cUsuario)
		dbSelectArea("AE8")
	#IFDEF TOP
		cAliasQry	:=	"AE8QRY"
		lQuery  := .T.
		cQuery  := "SELECT AE8_FILIAL,AE8_RECURS,AE8_CALEND,AE8_DESCRI,AE8_EQUIP,AE8_PRODUT "
		cQuery  += " FROM "+RetSqlName("AE8")+" AE8 " 
		cQuery  += " WHERE AE8.AE8_FILIAL='"+xFilial("AE8")+"' AND "
		cQuery  += " AE8.AE8_USER = '"+cUsuario+"' AND "
		cQuery  += " AE8.D_E_L_E_T_=' ' "
		dbSetOrder(::IndexKey)
		cQuery  += "ORDER BY "+SqlOrder(IndexKey())         
		       
		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)

		aStruct := AE8->(dbStruct())
		For nX := 1 To Len(aStruct)
			If aStruct[nX][2]<>"C" .And. FieldPos(aStruct[nX][1])<>0
				TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		    EndIf
		Next nX
	#ELSE
		cAliasQry	:=	"AE8"
		dbSetOrder(3) //Ae8_FILIAL+AE8_user
		MsSeek( xFilial("AE8")+cUsuario)
	#ENDIF 
		If !Eof()
			::ResourceView:ResourceCode		:= AE8_RECURS
			::ResourceView:ResourceName		:= AE8_DESCRI
			::ResourceView:Calendar				:= AE8_CALEND
			::ResourceView:TeamCode				:= AE8_EQUIP
			::ResourceView:TeamName				:= "" //AED_DESCRI
			::ResourceView:ProductCode			:= AE8_PRODUT   
			dbSelectArea("AED")
			dbSetOrder(1) // AED_FILIAL+AED_EQUIP
			If MsSeek( xFilial("AED")+AE8->AE8_EQUIP )
				::ResourceView:TeamName				:= AED->AED_DESCRI
			Endif
		Endif	

		If lQuery
			dbSelectArea(cAliasQry)
			dbCloseArea()
			dbSelectArea("AE8")
		Endif	
	Endif
Else       
	SetSoapFault("GETMYRESOURCE",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetTeamList WSRECEIVE UserCode, ProtheusUserCode, TeamInitial, TeamFinal,PageLen,PageFirst,QryAdd,IndexKey WSSEND TeamList WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local nX       := 0
Local nY       := 0
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."
Local	cAliasQry:=	"AEDQRY"
Local	lQuery  	:= .F.
Local	cQuery  	:= ""

DEFAULT ::PageLen   := 0
DEFAULT ::PageFirst := 0
DEFAULT ::IndexKey  := 1

If PrtChkUser(::UserCode,"PmsReport","GetTeamList")
	dbSelectArea("AED")
	dbSetOrder(1) // 
	
	#IFDEF TOP
		cAliasQry	:=	"AEDQRY"
		lQuery  := .T.
		cQuery  := "SELECT AED_FILIAL,AED_EQUIP,AED_DESCRI"
		cQuery  += GetUserFields("AED")
		cQuery  += " FROM "+RetSqlName("AED")+" AED  "
		cQuery  += " WHERE AED.AED_FILIAL='"+xFilial("AED")+"' AND "
		cQuery  += " AED.AED_EQUIP BETWEEN '"+::TeamInitial+"' AND '"+::TeamFinal+"' AND "
		cQuery  += " AED.D_E_L_E_T_=' ' "
		If !Empty(::QryAdd)
			cQuery  := WsQueryAdd(cQuery,::QryAdd)
		Endif
		dbSetOrder(::IndexKey)
		cQuery  += "ORDER BY "+SqlOrder(IndexKey())
		
		cQuery := ChangeQuery(cQuery)
		
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
		aStruct := AED->(dbStruct())
		For nX := 1 To Len(aStruct)
			If aStruct[nX][2]<>"C" .And. FieldPos(aStruct[nX][1])<>0
				TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		    EndIf
		Next nX
		dbSelectArea(cAliasQry)
	#ELSE
		cAliasQry:=	"AED"
		MsSeek( xFilial("AED")+::TeamInitial,.T. )
	#ENDIF 
	nX:=0	
	::TeamList	:=	{}
	While	!Eof() .And.; 
			(xFilial("AED") == AED_FILIAL) .And.; 
			(AED_EQUIP  <= ::TeamFinal)
		nY++
		
		If ::PageFirst==0 .Or. nY >= ::PageFirst
			aadd(::TeamList,WsClassNew("TeamView"))
			nX++
			::TeamList[nX]:TeamCode					:= AED_EQUIP
			::TeamList[nX]:TeamName					:= AED_DESCRI
		Endif

		If nX >= ::PageLen .And. ::PageLen <> 0
			Exit
		EndIf

		dbSelectArea(cAliasQry)
		(cAliasQry)->( dbSkip() )
	EndDo
	If lQuery
		dbSelectArea(cAliasQry)
		dbCloseArea()
		dbSelectArea("AED")
	Endif	

Else
	SetSoapFault("GETTEAMLIST",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetOcorrenceList WSRECEIVE UserCode, ProtheusUserCode, OcorrenceInitial, OcorrenceFinal,PageLen,PageFirst,QryAdd,IndexKey WSSEND OcorrenceList WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local nX       := 0
Local nY       := 0
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."
Local	cAliasQry:=	"AE7"
Local	lQuery  	:= .F.
Local	cQuery  	:= ""

DEFAULT ::PageLen   := 0
DEFAULT ::PageFirst := 0
DEFAULT ::IndexKey  := 1

If PrtChkUser(::UserCode,"PmsReport","GetOcorrenceList")
	dbSelectArea("AE7")
	dbSetOrder(1) // 
	#IFDEF TOP
		cAliasQry	:=	"AE7QRY"
		lQuery  := .T.
		cQuery  := "SELECT AE7_FILIAL,AE7_CODIGO,AE7_DESCRI"
		cQuery  += GetUserFields("AE7")
		cQuery  += " FROM "+RetSqlName("AE7")+" AE7  "
		cQuery  += " WHERE AE7.AE7_FILIAL='"+xFilial("AE7")+"' AND "
		cQuery  += " AE7.AE7_CODIGO BETWEEN '"+::OcorrenceInitial+"' AND '"+::OcorrenceFinal+"' AND "
		cQuery  += " AE7.D_E_L_E_T_=' ' "
		If !Empty(::QryAdd)
			cQuery  := WsQueryAdd(cQuery,::QryAdd)
		Endif
		dbSetOrder(::IndexKey)
		cQuery  += "ORDER BY "+SqlOrder(IndexKey())
		
		cQuery := ChangeQuery(cQuery)
		
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
		aStruct := AE7->(dbStruct())
		For nX := 1 To Len(aStruct)
			If aStruct[nX][2]<>"C" .And. FieldPos(aStruct[nX][1])<>0
				TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		    EndIf
		Next nX                                         
		dbSelectArea(cAliasQry)
	#ELSE
		MsSeek( xFilial("AE7")+::OcorrenceInitial,.T. )
	#ENDIF 
	nX:=0	
	::OcorrenceList	:=	{}
	While	!Eof() .And.; 
			(xFilial("AE7") == AE7_FILIAL) .And.; 
			(AE7_CODIGO  <= OcorrenceFinal)
	
		nY++
		
		If ::PageFirst==0 .Or. nY >= ::PageFirst
		
			aadd(::OcorrenceList,WsClassNew("OcorrenceView"))
			nX++
			::OcorrenceList[nX]:OcorrenceCode			:= AE7_CODIGO
			::OcorrenceList[nX]:OcorrenceDescription	:= AE7_DESCRI
		Endif
		If nX >= ::PageLen .And. ::PageLen <> 0
			Exit
		EndIf
		dbSelectArea(cAliasQry)
		(cAliasQry)->( dbSkip() )
	EndDo
	If lQuery
		dbSelectArea(cAliasQry)
		dbCloseArea()
		dbSelectArea("AE7")
	Endif	

Else            
	SetSoapFault("GETOCORRENCELIST",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetGantt WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, WBSCode WSSEND Gantt WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local cRev     := ""
Local cUsuario	:= ""
Local nX,nZ    := 0
Local aGantt	:=	{}
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."
Local i := 0

If PrtChkUser(::UserCode,"PmsReport","GetGantt")

	cUsuario	:= UsrPrtErp( ::UserCode )

	dbSelectArea("AFC")
	ProjectCode := padr(ProjectCode,len(AFC->AFC_PROJET)) 
	WBSCODE := padr(WBSCODE,len(AFC->AFC_EDT))
	cRev     := PmsRevAtu( ProjectCode )

	dbSetOrder(1) //AFC_FILIAL+AFC_PROJET +REVISA+EDT
	If DbSeek(xFilial()+ProjectCode+cRev+WBSCODE)
		WSArrGantt(aGantt,ProjectCode+cRev+Padr(WBSCODE,TamSX3('AFC_EDT')[1]),,,,,,,cUsuario)
		If Len(aGantt) > 0
		
			If AllTrim(ProjectCode) == AllTrim(WbsCode) .And. ;
				!PmsChkUser(AFC->AFC_PROJET,,AFC->AFC_EDT,AFC->AFC_EDTPAI,1,"ESTRUT",AFC->AFC_REVISA,cUsuario)			
			
				::Gantt	:=	{}
	
				// adiciona elemento vazio
				aadd(::Gantt, WsClassNew("GanttTaskView"))
	
				i	:= Len(::Gantt)
				::Gantt[i]:ProjectCode := AFC->AFC_PROJET
				::Gantt[i]:TaskType := 2 //1=Tarefa 2=EDT 3=Recurso e 4=Equipe
				::Gantt[i]:TaskCode := WBSCODE
				::Gantt[i]:TaskDescription := "PROJETO"
				::Gantt[i]:EstimatedInitialDate := AFC->AFC_START
				::Gantt[i]:EstimatedFinalDate := AFC->AFC_FINISH
				::Gantt[i]:EstimatedInitialHour := AFC->AFC_HORAI
				::Gantt[i]:EstimatedFinalHour := AFC->AFC_HORAF
				::Gantt[i]:ExecutionInitialDate := AFC->AFC_DTATUI
				::Gantt[i]:ExecutionFinalDate := AFC->AFC_DTATUF
				::Gantt[i]:POC := 0
				::Gantt[i]:CPM := 0
				::Gantt[i]:TimeDuration := 0
				::Gantt[i]:Level := "000" 
				::Gantt[i]:DbRecord := 0
				::Gantt[i]:Bitmap := "PMSUSER"
				::Gantt[i]:Resources := ""			
			EndIf
			
			For nX := 1 To Len(aGantt)
				aadd(::Gantt,WsClassNew("GanttTaskView"))
				
				i := Len(::Gantt)
				
				::Gantt[i]:ProjectCode				:=	ProjectCode
				::Gantt[i]:TaskType					:=	aGantt[nX,_TaskType				]
				::Gantt[i]:TaskCode					:=	aGantt[nX,_TaskCode				]
				::Gantt[i]:TaskDescription			:=	aGantt[nX,_TaskDescription		]
				::Gantt[i]:EstimatedInitialDate		:=	aGantt[nX,_EstimatedInitialDate	] 
				::Gantt[i]:EstimatedFinalDate		:=	aGantt[nX,_EstimatedFinalDate	]
				::Gantt[i]:EstimatedInitialHour		:=	aGantt[nX,_EstimatedInitialHour	] 
				::Gantt[i]:EstimatedFinalHour		:=	aGantt[nX,_EstimatedFinalHour	]
				::Gantt[i]:ExecutionInitialDate		:=	aGantt[nX,_ExecutionInitialDate	] 
				::Gantt[i]:ExecutionFinalDate		:=	aGantt[nX,_ExecutionFinalDate 	]
				::Gantt[i]:POC						:=	aGantt[nX,_POC					] 
				::Gantt[i]:CPM						:=	aGantt[nX,_CPM					] 
				::Gantt[i]:TimeDuration				:=	aGantt[nX,_TimeDuration			] 
				::Gantt[i]:Level          	  		:=	aGantt[nX,_Level					] 
				::Gantt[i]:DbRecord					:=	aGantt[nX,_DbRecord				] 
				::Gantt[i]:Bitmap            	  	:=	aGantt[nX,_BitMap					] 
				::Gantt[i]:Resources					:= ""

				For nZ:=1 To Len(aGantt[nX,_Resources])
					cRec := StrTran(aGantt[nX,_Resources,nZ],";",",")
					cRec := StrTran(cRec,"#","_")
					::Gantt[i]:Resources   +=	cRec+";"
				Next
			Next
		Endif
	Else                                                
		SetSoapFault("GETGANTT","EDT "+ WBSCODE+ " do projeto "+ProjectCode+"/"+cRev+ " nao encontrado")
		lRetorno := .F.
	EnDif
Else
	SetSoapFault("GETGANTT",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetGanttRes WSRECEIVE UserCode, ProtheusUserCode, ResourcesCodes, DateInitial, DateFinal,TasksOption WSSEND Gantt WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local cUsuario	:= ""
Local nX,nI,nZ := 0
Local aGantt	:=	{}
Local aRecursos:=	{}
Local nLen     :=	0
Local nSizeRec	:=	0
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."
Local dDataMin :=	Ctod('')
Local dDataMax	:=	Ctod('')
Local dDataMinE:=	Ctod('')
Local dDataMaxE:=	Ctod('')
Local cHoraMin	:=	""
Local cHoraMax	:=	"00:00"
Local dDataMinR:=	Ctod('')
Local dDataMaxR:=	Ctod('')
Local dDataMinER:=	Ctod('')
Local dDataMaxER:=	Ctod('')
Local cHoraMinR:=	""
Local cHoraMaxR:=	"00:00"


If PrtChkUser(::UserCode,"PmsReport","GetGanttRes")
	::Gantt	:=	{}
	nSizeRec	:=	TamSX3('AE8_RECURS')[1]
	nLen	:=	Len(ResourcesCodes)
	For nX:= 1 To nLen STEP nSizeRec
		AAdd(aRecursos,Substr(ResourcesCodes,nX,nSizeRec))
	Next
	cUsuario	:= UsrPrtErp( ::UserCode )
//	cUsuario	:= ::ProtheusUserCode 
	For nI := 1 To Len(aRecursos)
	 	dDataMinR :=	Ctod('')
 		dDataMaxR	:=	Ctod('')
		dDataMinER:=	Ctod('')
		dDataMaxER:=	Ctod('')
		cHoraMinR	:=	""
		cHoraMaxR	:=	"00:00"
		aGantt		:=	{}
		WSRecGantt(aGantt,aRecursos[nI],.T.,TasksOption,DateInitial,DateFinal,cUsuario)
		If Len(aGantt) > 0
			aadd(::Gantt,WsClassNew("GanttTaskView"))
			nPosRec	:=	Len(::Gantt)
			::Gantt[nPosRec]:ProjectCode				:=	"NONE"
			::Gantt[nPosRec]:TaskType					:=	3 //1=Tarefa 2=EDT 3=Recurso e 4=Equipe
			::Gantt[nPosRec]:TaskCode					:=	aRecursos[nI]
			::Gantt[nPosRec]:TaskDescription			:=	Posicione('AE8',1,xFilial('AE8')+aRecursos[nI],'AE8_DESCRI')
			::Gantt[nPosRec]:POC							:=	0
			::Gantt[nPosRec]:CPM							:=	0
			::Gantt[nPosRec]:TimeDuration				:=	0
			::Gantt[nPosRec]:Level          	  		:=	"0011" 
			::Gantt[nPosRec]:DbRecord						:=	0
			::Gantt[nPosRec]:Bitmap            	  	:=	"PMSUSER"
			::Gantt[nPosRec]:Resources					:= ""
			For nX := 1 To Len(aGantt)
				aadd(::Gantt,WsClassNew("GanttTaskView"))
				nLastPos	:=	Len(::Gantt)
				::Gantt[nLastPos]:ProjectCode					:=	aGantt[nX,_ProjectCode          ]
				::Gantt[nLastPos]:TaskType						:=	aGantt[nX,_TaskType             ]
				::Gantt[nLastPos]:TaskCode						:=	aGantt[nX,_TaskCode             ]
				::Gantt[nLastPos]:TaskDescription			:=	aGantt[nX,_TaskDescription      ]
				::Gantt[nLastPos]:EstimatedInitialDate		:=	aGantt[nX,_EstimatedInitialDate ] 
				::Gantt[nLastPos]:EstimatedFinalDate		:=	aGantt[nX,_EstimatedFinalDate	  ]
				::Gantt[nLastPos]:EstimatedInitialHour		:=	aGantt[nX,_EstimatedInitialHour ] 
				::Gantt[nLastPos]:EstimatedFinalHour		:=	aGantt[nX,_EstimatedFinalHour	  ]
				::Gantt[nLastPos]:ExecutionInitialDate		:=	aGantt[nX,_ExecutionInitialDate ] 
				::Gantt[nLastPos]:ExecutionFinalDate		:=	aGantt[nX,_ExecutionFinalDate	  ]
				::Gantt[nLastPos]:POC							:=	aGantt[nX,_POC                  ] 
				::Gantt[nLastPos]:CPM							:=	aGantt[nX,_CPM                  ] 
				::Gantt[nLastPos]:TimeDuration				:=	aGantt[nX,_TimeDuration         ] 
				::Gantt[nLastPos]:Level          	  		:=	aGantt[nX,_Level                ] 
				::Gantt[nLastPos]:DbRecord						:=	aGantt[nX,_DbRecord             ] 
				::Gantt[nLastPos]:Bitmap            	  	:=	aGantt[nX,_BitMap               ] 
				::Gantt[nLastPos]:Resources					:= ""

				For nZ:=1 To Len(aGantt[nX,_Resources])
					cRec := StrTran(aGantt[nX,_Resources,nZ],";",",")
					cRec := StrTran(cRec,"#","_")
					::Gantt[nLastPos]:Resources   +=	cRec+";"
				Next
				//Pega os minimos e maximos de data para cada recurso
				If Empty(dDataMinR) .Or. dDataMinR	>=	aGantt[nX,_EstimatedInitialDate ] 
					dDataMinR	:=	aGantt[nX,_EstimatedInitialDate ] 
					If Empty(cHoraMinR).Or. cHoraMinR>	aGantt[nX,_EstimatedInitialHour ]  
						cHoraMinR	:=	aGantt[nX,_EstimatedInitialHour ]  					
					Endif
				Endif	
				If dDataMaxR	<=	aGantt[nX,_EstimatedFinalDate ] 
					dDataMaxR	:=	aGantt[nX,_EstimatedFinalDate ] 
					If cHoraMaxR	<	aGantt[nX,_EstimatedFinalHour ]  
						cHoraMaxR	:=	aGantt[nX,_EstimatedFinalHour ]  
					Endif
				Endif	
				If Empty(dDataMinER) .Or. dDataMinER	>=aGantt[nX,_ExecutionInitialDate ]  
					dDataMinER	:=	aGantt[nX,_ExecutionInitialDate ] 
				Endif	
				If dDataMaxER	<=	aGantt[nX,_ExecutionFinalDate	  ] 
					dDataMaxER	:=aGantt[nX,_ExecutionFinalDate	  ]
				Endif	

			Next
			::Gantt[nPosRec]:EstimatedInitialHour	:=	cHoraMinR
			::Gantt[nPosRec]:EstimatedFinalHour		:=	cHoraMaxR
			::Gantt[nPosRec]:EstimatedInitialDate	:=	dDataMinR
			::Gantt[nPosRec]:EstimatedFinalDate		:=	dDataMaxR
			::Gantt[nPosRec]:ExecutionInitialDate	:=	dDataMinER
			::Gantt[nPosRec]:ExecutionFinalDate		:=	dDataMaxER
			//Pega os minimos e maximos de data para todos os recursos 
			If Empty(dDataMin) .Or. dDataMin	>=dDataMinR
				dDataMin	:=	dDataMinR
				If Empty(cHoraMin).Or. cHoraMin>cHoraMinR
					cHoraMin	:=	cHoraMinR
				Endif
			Endif	
			If dDataMax	<=	dDataMaxR
				dDataMax	:=	dDataMaxR
				If cHoraMax	<	cHoraMaxR
					cHoraMax	:=	cHoraMaxR
				Endif
			Endif	
			If Empty(dDataMinE) .Or. dDataMinE	>=dDataMinER
				dDataMinE	:=	dDataMinER
			Endif	
			If dDataMaxE	<=	dDataMaxER
				dDataMaxE	:= dDataMaxER
			Endif	

		EnDif
	Next
	aSize(::Gantt,Len(::Gantt)+1)
	aIns(::Gantt,1)
	::Gantt[1]	:=	WsClassNew("GanttTaskView")
	::Gantt[1]:ProjectCode				:=	"NONE"
	::Gantt[1]:TaskType					:=	3 //1=Tarefa 2=EDT 3=Recurso e 4=Equipe
	::Gantt[1]:TaskCode					:=	"Recursos"
	::Gantt[1]:TaskDescription			:=	"Recursos"
	::Gantt[1]:POC							:=	0
	::Gantt[1]:CPM							:=	0
	::Gantt[1]:TimeDuration				:=	0
	::Gantt[1]:Level          	  		:=	"001" 
	::Gantt[1]:DbRecord						:=	0
	::Gantt[1]:Bitmap            	  	:=	"PMSUSERS"
	::Gantt[1]:Resources					:= ""
	::Gantt[1]:EstimatedInitialHour	:=	cHoraMin
	::Gantt[1]:EstimatedFinalHour		:=	cHoraMax
	::Gantt[1]:EstimatedInitialDate	:=	dDataMin
	::Gantt[1]:EstimatedFinalDate		:=	dDataMax
	::Gantt[1]:ExecutionInitialDate	:=	dDataMinE
	::Gantt[1]:ExecutionFinalDate		:=	dDataMaxE
Else
	SetSoapFault("GETGANTTRES",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return lRetorno 

/*/===========================================================/*/
WSMETHOD GetGanttTeam WSRECEIVE UserCode, ProtheusUserCode, TeamsCodes, DateInitial, DateFinal, TasksOption WSSEND Gantt WSSERVICE PmsReport

Local aArea    := GetArea()
Local lRetorno := .T.
Local cUsuario	:= ""
Local nX,nI,nZ := 0
Local aGantt	:=	{}
Local aTeams	:=	{}
Local nLen     :=	0
Local nSizeRec	:=	0
Local cMsg		:=	"PmsChkUser : Usuario sem permissao para executar este webservice."
Local dDataMin :=	Ctod('')
Local dDataMax	:=	Ctod('')
Local dDataMinE:=	Ctod('')
Local dDataMaxE:=	Ctod('')
Local cHoraMin	:=	""
Local cHoraMax	:=	"00:00"
Local dDataMinR:=	Ctod('')
Local dDataMaxR:=	Ctod('')
Local dDataMinER:=Ctod('')
Local dDataMaxER:=Ctod('')
Local cHoraMinR:=	""
Local cHoraMaxR:=	"00:00"


If PrtChkUser(::UserCode,"PmsReport","GetGanttTeam")
	::Gantt	:=	{}
	nSizeRec	:=	TamSX3('AED_EQUIP')[1]
	nLen	:=	Len(TeamsCodes)
	For nX:= 1 To nLen STEP nSizeRec
		AAdd(aTeams,Substr(TeamsCodes,nX,nSizeRec))
	Next
	cUsuario	:= UsrPrtErp( ::UserCode )
//	cUsuario	:= ::ProtheusUserCode 
	For nI := 1 To Len(aTeams)
	 	dDataMinR :=	Ctod('')
 		dDataMaxR	:=	Ctod('')
		dDataMinER:=	Ctod('')
		dDataMaxER:=	Ctod('')
		cHoraMinR	:=	""
		cHoraMaxR	:=	"00:00"
		aGantt		:=	{}
		WSTeamGantt(aGantt,aTeams[nI],.T.,TasksOption,DateInitial,DateFinal,cUsuario)
		If Len(aGantt) > 0
			aadd(::Gantt,WsClassNew("GanttTaskView"))
			nPosRec	:=	Len(::Gantt)
			::Gantt[nPosRec]:ProjectCode				:=	"NONE"
			::Gantt[nPosRec]:TaskType					:=	4 //1=Tarefa 2=EDT 3=Recurso e 4=Equipe
			::Gantt[nPosRec]:TaskCode					:=	aTeams[nI]
			::Gantt[nPosRec]:TaskDescription			:=	Posicione('AED',1,xFilial('AED')+aTeams[nI],'AED_DESCRI')
			::Gantt[nPosRec]:POC							:=	0
			::Gantt[nPosRec]:CPM							:=	0
			::Gantt[nPosRec]:TimeDuration				:=	0
			::Gantt[nPosRec]:Level          	  		:=	"0011" 
			::Gantt[nPosRec]:DbRecord						:=	0
			::Gantt[nPosRec]:Bitmap            	  	:=	"PMSUSERS"
			::Gantt[nPosRec]:Resources					:= ""
			For nX := 1 To Len(aGantt)
				aadd(::Gantt,WsClassNew("GanttTaskView"))
				nLastPos	:=	Len(::Gantt)
				::Gantt[nLastPos]:ProjectCode					:=	aGantt[nX,_ProjectCode          ]
				::Gantt[nLastPos]:TaskType						:=	aGantt[nX,_TaskType             ]
				::Gantt[nLastPos]:TaskCode						:=	aGantt[nX,_TaskCode             ]
				::Gantt[nLastPos]:TaskDescription			:=	aGantt[nX,_TaskDescription      ]
				::Gantt[nLastPos]:EstimatedInitialDate		:=	aGantt[nX,_EstimatedInitialDate ] 
				::Gantt[nLastPos]:EstimatedFinalDate		:=	aGantt[nX,_EstimatedFinalDate	  ]
				::Gantt[nLastPos]:EstimatedInitialHour		:=	aGantt[nX,_EstimatedInitialHour ] 
				::Gantt[nLastPos]:EstimatedFinalHour		:=	aGantt[nX,_EstimatedFinalHour	  ]
				::Gantt[nLastPos]:ExecutionInitialDate		:=	aGantt[nX,_ExecutionInitialDate ] 
				::Gantt[nLastPos]:ExecutionFinalDate		:=	aGantt[nX,_ExecutionFinalDate	  ]
				::Gantt[nLastPos]:POC							:=	aGantt[nX,_POC                  ] 
				::Gantt[nLastPos]:CPM							:=	aGantt[nX,_CPM                  ] 
				::Gantt[nLastPos]:TimeDuration				:=	aGantt[nX,_TimeDuration         ] 
				::Gantt[nLastPos]:Level          	  		:=	aGantt[nX,_Level                ] 
				::Gantt[nLastPos]:DbRecord						:=	aGantt[nX,_DbRecord             ] 
				::Gantt[nLastPos]:Bitmap            	  	:=	aGantt[nX,_BitMap               ] 
				::Gantt[nLastPos]:Resources					:= ""

				For nZ:=1 To Len(aGantt[nX,_Resources])
					cRec := StrTran(aGantt[nX,_Resources,nZ],";",",")
					cRec := StrTran(cRec,"#","_")
					::Gantt[nLastPos]:Resources   +=	cRec+";"
				Next
				//Pega os minimos e maximos de data para cada recurso
				If Empty(dDataMinR) .Or. dDataMinR	>=	aGantt[nX,_EstimatedInitialDate ] 
					dDataMinR	:=	aGantt[nX,_EstimatedInitialDate ] 
					If Empty(cHoraMinR).Or. cHoraMinR>	aGantt[nX,_EstimatedInitialHour ]  
						cHoraMinR	:=	aGantt[nX,_EstimatedInitialHour ]  					
					Endif
				Endif	
				If dDataMaxR	<=	aGantt[nX,_EstimatedFinalDate ] 
					dDataMaxR	:=	aGantt[nX,_EstimatedFinalDate ] 
					If cHoraMaxR	<	aGantt[nX,_EstimatedFinalHour ]  
						cHoraMaxR	:=	aGantt[nX,_EstimatedFinalHour ]  
					Endif
				Endif	
				If Empty(dDataMinER) .Or. dDataMinER	>=aGantt[nX,_ExecutionInitialDate ]  
					dDataMinER	:=	aGantt[nX,_ExecutionInitialDate ] 
				Endif	
				If dDataMaxER	<=	aGantt[nX,_ExecutionFinalDate	  ] 
					dDataMaxER	:=aGantt[nX,_ExecutionFinalDate	  ]
				Endif	

			Next
			::Gantt[nPosRec]:EstimatedInitialHour	:=	cHoraMinR
			::Gantt[nPosRec]:EstimatedFinalHour		:=	cHoraMaxR
			::Gantt[nPosRec]:EstimatedInitialDate	:=	dDataMinR
			::Gantt[nPosRec]:EstimatedFinalDate		:=	dDataMaxR
			::Gantt[nPosRec]:ExecutionInitialDate	:=	dDataMinER
			::Gantt[nPosRec]:ExecutionFinalDate		:=	dDataMaxER
			//Pega os minimos e maximos de data para todos os recursos 
			If Empty(dDataMin) .Or. dDataMin	>=dDataMinR
				dDataMin	:=	dDataMinR
				If Empty(cHoraMin).Or. cHoraMin>cHoraMinR
					cHoraMin	:=	cHoraMinR
				Endif
			Endif	
			If dDataMax	<=	dDataMaxR
				dDataMax	:=	dDataMaxR
				If cHoraMax	<	cHoraMaxR
					cHoraMax	:=	cHoraMaxR
				Endif
			Endif	
			If Empty(dDataMinE) .Or. dDataMinE	>=dDataMinER
				dDataMinE	:=	dDataMinER
			Endif	
			If dDataMaxE	<=	dDataMaxER
				dDataMaxE	:= dDataMaxER
			Endif	

		EnDif
	Next
	aSize(::Gantt,Len(::Gantt)+1)
	aIns(::Gantt,1)
	::Gantt[1]	:=	WsClassNew("GanttTaskView")
	::Gantt[1]:ProjectCode				:=	"NONE"
	::Gantt[1]:TaskType					:=	4 //1=Tarefa 2=EDT 3=Recurso e 4=Equipe
	::Gantt[1]:TaskCode					:=	"Equipes"
	::Gantt[1]:TaskDescription			:=	"Equipes"
	::Gantt[1]:POC							:=	0
	::Gantt[1]:CPM							:=	0
	::Gantt[1]:TimeDuration				:=	0
	::Gantt[1]:Level          	  		:=	"001" 
	::Gantt[1]:DbRecord						:=	0
	::Gantt[1]:Bitmap            	  	:=	"PMSUSERS"
	::Gantt[1]:Resources					:= ""
	::Gantt[1]:EstimatedInitialHour	:=	cHoraMin
	::Gantt[1]:EstimatedFinalHour		:=	cHoraMax
	::Gantt[1]:EstimatedInitialDate	:=	dDataMin
	::Gantt[1]:EstimatedFinalDate		:=	dDataMax
	::Gantt[1]:ExecutionInitialDate	:=	dDataMinE
	::Gantt[1]:ExecutionFinalDate		:=	dDataMaxE
Else
	SetSoapFault("GETGANTTTEAM",cMsg)
	lRetorno := .F.
EndIf
RestArea(aArea)
Return lRetorno 


Static Function GetProj(UserCode, ProtheusUserCode, DateInitial, DateFinal, ;
                 ProjectInitial, ProjectFinal, ;
                 ClientInitial, ClientFinal, ;
                 ProjectList, PageLen, PageFirst, QryAdd, IndexKey)

	Local aArea     := GetArea()
	Local lReturn   := .T.
	Local nX        := 0
	Local nY        := 0
	Local	cAliasQry := "AF8QRY"
	Local	lQuery    := .F.
	Local	cQuery    := ""

	Default PageLen   := 0
	Default PageFirst := 0
	Default IndexKey  := 1
	
	If !PrtChkUser(UserCode, "PmsReport", "GetProjectList")
		//SetSoapFault("GETPROJECTLIST", cMsg)
		
		lReturn := .F.
		RestArea(aArea)
		Return lReturn
	EndIf
	
	dbSelectArea("AF8")
	DbSetOrder(IndexKey)

	#IFDEF TOP
		cAliasQry	:=	"AF8QRY"
		lQuery  := .T.
		cQuery  := "SELECT AF8_FILIAL,AF8_PROJET,AF8_DATA,AF8_DESCRI,AF8_REVISA,AF8_CLIENT,AF8_LOJA,AEA_DESCRI "
		cQuery  += GetUserFields("AF8")
		cQuery  += " FROM "+RetSqlName("AF8")+" AF8 ,"+RetSqlName("AEA")+" AEA "
		cQuery  += " WHERE AF8.AF8_FILIAL='"+xFilial("AF8")+"' AND "
		cQuery  += " AF8.AF8_PROJET BETWEEN '"+ ProjectInitial+"' AND '"+ProjectFinal+"' AND "
		cQuery  += " AF8.AF8_CLIENT BETWEEN '"+ ClientInitial+"' AND '"+ClientFinal+"' AND "		
		cQuery  += " AF8.AF8_DATA BETWEEN '"+Dtos(DateInitial)+"' AND '"+Dtos(DateFinal)+"' AND "
		cQuery  += " AEA.AEA_FILIAL='"+xFilial("AEA")+"' AND "
		cQuery  += " AEA.AEA_COD = AF8.AF8_FASE AND "
		cQuery  += " AF8.D_E_L_E_T_=' ' AND "
		cQuery  += " AEA.D_E_L_E_T_=' ' "

		If !Empty(QryAdd)
			cQuery := WsQueryAdd(cQuery, QryAdd)
		Endif

		dbSetOrder(IndexKey)
		cQuery += "ORDER BY " + SqlOrder(IndexKey())
		
		cQuery := ChangeQuery(cQuery)
		
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
		aStruct := AF8->(dbStruct())

		For nX := 1 To Len(aStruct)
			If aStruct[nX][2]<>"C" .And. FieldPos(aStruct[nX][1])<>0
				TcSetField(cAliasQry, aStruct[nX][1], aStruct[nX][2], ;
				           aStruct[nX][3], aStruct[nX][4])
	    EndIf
		Next nX
	#ELSE
		cAliasQry	:=	"AF8"
		dbSelectArea(cAliasQry)
		dbSetOrder(1) //AF8_FILIAL+AF8_PROJET
		MsSeek(xFilial("AF8") + ProjectInitial, .T.)

	#ENDIF		


	ProjectList	:=	{}
	nX	:=	0

	While !(cAliasQry)->(Eof()) .And. xFilial('AF8') == (cAliasQry)->AF8_FILIAL .And. ;
		                        (cAliasQry)->AF8_PROJET <= ProjectFinal
		
		If !lQuery	

			If ((cAliasQry)->AF8_CLIENT < ClientInitial) .Or. ((cAliasQry)->AF8_CLIENT > ClientFinal)
				DbSelectArea(cAliasQry)
				(cAliasQry)->( dbSkip() )
				Loop
			Endif		
		
			If (cAliasQry)->AF8_DATA < DateInitial .OR. (cAliasQry)->AF8_DATA >  DateFinal
				DbSelectArea(cAliasQry)
				dbSkip()
				Loop
			Endif
			If !Empty(QryAdd)
				If !(&(QryAdd))
					DbSelectArea(cAliasQry)
					dbSkip()
					Loop
				Endif
			Endif						  
		Endif	
		
		nY++
			
		If PageFirst==0 .Or. nY >= PageFirst
		
			Aadd(ProjectList, WsClassNew("ProjectListView"))
			nX++
			
			ProjectList[nX]:ProjectCode 		:= (cAliasQry)->AF8_PROJET
			ProjectList[nX]:ProjectDate 		:= (cAliasQry)->AF8_DATA
			ProjectList[nX]:Description 		:= (cAliasQry)->AF8_DESCRI
			ProjectList[nX]:ProjectRevision	:= (cAliasQry)->AF8_REVISA
			ProjectList[nX]:ProjectCliente	:= (cAliasQry)->AF8_CLIENT
			ProjectList[nX]:ProjectUnit			:= (cAliasQry)->AF8_LOJA
			
			If !lQuery
				dbSelectArea("AEA")
				dbSetOrder(1) // AEA_FILIAL+AEA_COD
				If MsSeek( xFilial("AEA")+AF8->AF8_FASE )
					ProjectList[nX]:ProjectStage	:= AEA->AEA_DESCRI
				Endif
			Else
				ProjectList[nX]:ProjectStage	:= (cAliasQry)->AEA_DESCRI
			Endif
		Endif
		
		If nX >= PageLen .And. PageLen <> 0
			Exit
		EndIf
	
		dbSelectArea(cAliasQry)
		dbSkip()
	EndDo

	If lQuery
		dbSelectArea(cAliasQry)
		dbCloseArea()
		dbSelectArea("AF8")
	Endif	

	RestArea(aArea)
Return lReturn

/*/===========================================================/*/
WSMETHOD GetProjListByClient WSRECEIVE UserCode, ProtheusUserCode, ;
                                       DateInitial, DateFinal, ;
                                       ProjectInitial, ProjectFinal, ;
                                       ClientInitial, ClientFinal, ;
                                       PageLen, PageFirst, ;
                                       QryAdd, IndexKey ;
                                WSSEND ProjectList ;
                             WSSERVICE PmsReport
	Local lReturn := .F.
	Local cMsg    := "PmsChkUser: Usuário sem permissão para executar este webservice."

	lReturn := GetProj(UserCode, ProtheusUserCode, DateInitial, DateFinal, ;
	                   ProjectInitial, ProjectFinal, ;
	                   ClientInitial, ClientFinal, ;
	                   ::ProjectList, PageLen, PageFirst, QryAdd, IndexKey)
	                   
	If !lReturn
		SetSoapFault("GETPROJECTLIST", cMsg)
	EndIf

Return lReturn
