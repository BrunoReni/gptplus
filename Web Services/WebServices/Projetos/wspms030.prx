#INCLUDE "wspms030.ch"
#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³WSPMS030  ³ Autor ³Cristiano Denardi      ³ Data ³03.08.2005  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Web Service para realizar Confirmacoes de tarefas.			³±±
±±³          ³ ( Realizado sem estar posicionado na tarefa do Projeto )     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function WSPmsConfirmations() // (Gambiarra) Somente para poder gerar patch
Return
WSSERVICE PmsConfirmations       DESCRIPTION STR0001  //"Servico que permite realizar confirmacoes de tarefas de um projeto ativo."
	WSDATA UserCode               AS String
	WSDATA ProtheusUserCode       AS String
	WSDATA Header                 As Array Of BrwHeader
	WSDATA HeaderPms              As Array Of BrwHeaderPms
	WSDATA HeaderType             As String
	WSDATA TaskInitial            As String
	WSDATA TaskFinal          		As String
	WSDATA ProjectInitial        	As String
	WSDATA ProjectFinal         	As String
	WSDATA ProjectCode				As String 
	WSDATA TaskCode					As String 
	WSDATA DateConf					As Date		OPTIONAL 
	WSDATA DbRecord					As Integer 
	WSDATA OperationNumber			As Integer
	WSDATA OperationMessage			As Array of MessageView
	WSDATA ConfirmationsList		As Array of ConfirmationsListView
	WSDATA Confirmation				As Array of ConfirmationView
	WSDATA ConfirmationHandle		As ConfirmationView
   WSDATA PageLen                AS Integer OPTIONAL
   WSDATA PageFirst              AS Integer OPTIONAL
   WSDATA QryAdd                 AS String OPTIONAL
   WSDATA IndexKey               AS Integer OPTIONAL

	WSMETHOD GetHeader        			DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetHeaderPms     			DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetConfirmationsList		DESCRIPTION STR0003 //"Metodo que descreve a lista de Confirmacoes das tarefas dos projetos do sistema"
	WSMETHOD GetConfirmation			DESCRIPTION "Metodo que descreve detalhes de uma determinada Confirmaca para uma tarefa em una data"
	WSMETHOD GetConfirmationByRecord	DESCRIPTION "Metodo que descreve detalhes de uma determinada Confirmaca a partir de seu numero de registro"
	WSMETHOD ConfirmationHandle		DESCRIPTION STR0005 //"Metodo que Inclui/Exclui/Edita uma determinada Confirmacao"
ENDWSSERVICE

/*/===========================================================/*/
WSMETHOD GetHeader WSRECEIVE HeaderType WSSEND Header WSSERVICE PmsConfirmations

::Header := PmsHeader(::HeaderType)

Return(.T.)    

/*/===========================================================/*/
WSMETHOD GetHeaderPms WSRECEIVE HeaderType WSSEND HeaderPms WSSERVICE PmsConfirmations

::HeaderPms := PmsHeader(::HeaderType)

Return(.T.)

/*/===========================================================/*/
WSMETHOD GetConfirmationsList WSRECEIVE UserCode, ProtheusUserCode, TaskInitial, TaskFinal, ProjectInitial, ProjectFinal,PageLen,PageFirst,QryAdd,IndexKey WSSEND ConfirmationsList WSSERVICE PmsConfirmations

Local aArea    := GetArea() 
Local cPrjIni	:= ""
Local cRev		:= ""
Local lRetorno := .T.
Local nX       := 0
Local nY       := 0
Local cUsuario	:= ""

Local cTaskIni := PadR(TaskInitial, Len(AFF->AFF_TAREFA))
Local cTaskFin := PadR(TaskFinal, Len(AFF->AFF_TAREFA))

DEFAULT ::PageLen   := 0
DEFAULT ::PageFirst := 0
DEFAULT ::IndexKey  := 1

If PrtChkUser(UserCode,"PmsConfirmations","GetConfirmationsList")
	dbSelectArea("AFF")
	dbSetOrder(1) //AFF_FILIAL+AFF_PROJET+AFF_REVISA+AFF_TAREFA+DTOS(AFF_DATA)
	
	cPrjIni := PadR(ProjectInitial, Len(AFF->AFF_PROJET))
	
	cAliasQry	:=	"AFFQRY"
	lQuery  := .T.
	cQuery  := "SELECT AFF_FILIAL,AFF_PROJET,AFF_DATA,AFF_REVISA,AFF_TAREFA,AFF_OCORRE,AFF_QUANT,AFF_CONFIR, AFF.R_E_C_N_O_ RECAFF"
	If AFF->(FieldPos('AFF_HORAI')) > 0
		cQuery	+=	",AFF_HORAI"
	Endif
	If AFF->(FieldPos('AFF_HORAF')) > 0
		cQuery	+=	",AFF_HORAF"
	Endif
	cQuery  += GetUserFields("AFF")
	cQuery  += " FROM "+RetSqlName("AFF") +" AFF, "+RetSqlName("AF8" ) +" AF8 "
	cQuery  += " WHERE AFF.AFF_FILIAL='"+xFilial("AF9")+"' AND "
	cQuery  += " AFF.AFF_PROJET BETWEEN '"+cPrjIni+"' AND '"+::ProjectFinal +"' AND "
	cQuery  += " AFF.AFF_TAREFA BETWEEN '" + cTaskIni + "' AND '" + cTaskFin + "' AND "
	cQuery  += " AF8.AF8_FILIAL='"+xFilial("AF8")+"' AND "
	cQuery  += " AFF.AFF_PROJET = AF8.AF8_PROJET AND "
	cQuery  += " AFF.AFF_REVISA = AF8.AF8_REVISA AND "
	cQuery  += " AF8.D_E_L_E_T_=' ' AND "
	cQuery  += " AFF.D_E_L_E_T_=' ' "
	If !Empty(::QryAdd)
		cQuery  := WsQueryAdd(cQuery,::QryAdd)
	Endif
	dbSetOrder(::IndexKey)
	cQuery  += "ORDER BY "+SqlOrder(IndexKey())
	cQuery := ChangeQuery(cQuery)
	
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
	aStruct := AFF->(dbStruct())
	For nX := 1 To Len(aStruct)
		If aStruct[nX][2]<>"C" .And. FieldPos(aStruct[nX][1])<>0
			TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		EndIf
	Next nX
	
	nX	:=	0
	::ConfirmationsList := {}
	While !Eof() .And. xFilial("AFF") == (cAliasQry)->AFF_FILIAL

		If !lQuery		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Valida Cod. Projeto ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ((cAliasQry)->AFF_PROJET < ProjectInitial) .Or. ((cAliasQry)->AFF_PROJET > ProjectFinal)
				(cAliasQry)->( dbSkip() )
				Loop
			Endif
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Valida Cod. Tarefa  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ((cAliasQry)->AFF_TAREFA < TaskInitial) .Or. ((cAliasQry)->AFF_TAREFA > TaskFinal)
				(cAliasQry)->( dbSkip() )
				Loop
			Endif
			
			cUsuario	:= UsrPrtErp( ::UserCode )
			If !Empty( (cAliasQry)->AFF_PROJET )
				cRev := PmsRevAtu( (cAliasQry)->AFF_PROJET )
			Endif

			If (cAliasQry)->AFF_REVISA <> cRev
				(cAliasQry)->( dbSkip() )
				Loop
   		Endif	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Valida acesso a Tarefa pelo Usuario do Portal ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !PmsChkUser((cAliasQry)->AFF_PROJET,(cAliasQry)->AFF_TAREFA,,"",2,"CONFIR",(cAliasQry)->AFF_REVISA,cUsuario)
				dbSelectArea((cAliasQry))
				(cAliasQry)->( dbSkip() )
				Loop
			Endif
			
			
		Endif

		nY++
			
		If ::PageFirst==0 .Or. nY >= ::PageFirst
	  
			aadd(::ConfirmationsList,WsClassNew("ConfirmationsListView"))
			nX++                               
			::ConfirmationsList[nX]:ProjectCode           	:= (cAliasQry)->AFF_PROJET
			::ConfirmationsList[nX]:TaskCode              	:= (cAliasQry)->AFF_TAREFA
			::ConfirmationsList[nX]:ReferenceDate         	:= (cAliasQry)->AFF_DATA
			::ConfirmationsList[nX]:QuantityExecuted      	:= (cAliasQry)->AFF_QUANT
			::ConfirmationsList[nX]:PercentageExecuted    	:= ((cAliasQry)->AFF_QUANT * 100 ) / PmsRetDesc((cAliasQry)->AFF_PROJET+(cAliasQry)->AFF_REVISA+(cAliasQry)->AFF_TAREFA,"AF9_QUANT",1) //AFF->AFF_PERC
			::ConfirmationsList[nX]:OcorrenceCode        	:= (cAliasQry)->AFF_OCORRE
			::ConfirmationsList[nX]:OcorrenceDescription 	:= PmsRetDesc((cAliasQry)->AFF_OCORRE,"AE7_DESCRI") // AFF->AFF_OCDESC
			::ConfirmationsList[nX]:DeliveryAuthorization := (cAliasQry)->AFF_CONFIR
			::ConfirmationsList[nX]:DeliveryComboBoxText  := Posicione("SX3", 2, "AFF_CONFIR", "X3CBox()" )
			::ConfirmationsList[nX]:DbRecord					:= If(!lQuery,(cAliasQry)->(RECNO()),(cAliasQry)->RECAFF)

			If AFF->(FieldPos('AFF_HORAI')) > 0
				::ConfirmationsList[nX]:InitialHour  := (cAliasQry)->AFF_HORAI
	   	Endif
			If AFF->(FieldPos('AFF_HORAF')) > 0
				::ConfirmationsList[nX]:FinalHour    := (cAliasQry)->AFF_HORAF
	   	Endif
		Endif                                                            

		If nX >= ::PageLen .And. ::PageLen <> 0
			Exit
		EndIf
		dbSelectArea( cAliasQry )
		(cAliasQry)->( dbSkip() )
	EndDo

	dbSelectArea( cAliasQry )
	DbCloseArea()
	
Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetConfirmation WSRECEIVE UserCode, OperationNumber, ProtheusUserCode, ProjectCode, TaskCode, DateConf WSSEND Confirmation WSSERVICE PmsConfirmations

If PrtChkUser(UserCode,"PmsConfirmations","GetConfirmation")
	lRetorno :=  GetConfirmation("GetConfirmation",::UserCode,::OperationNumber,::ProtheusUserCode,::Confirmation,.F.,Nil,::ProjectCode,::TaskCode,::DateConf)
Else
	lRetorno	:=	.F.
Endif
Return lRetorno

/*/===========================================================/*/
WSMETHOD GetConfirmationByRecord WSRECEIVE UserCode, OperationNumber, ProtheusUserCode, DbRecord WSSEND Confirmation WSSERVICE PmsConfirmations

If PrtChkUser(UserCode,"PmsConfirmations","GetConfirmationByRecord")
	lRetorno :=  GetConfirmation("GetConfirmationByRecord",::UserCode,::OperationNumber,::ProtheusUserCode,::Confirmation,.T.,::DbRecord)
Else
	lRetorno	:=	.F.
Endif
Return lRetorno


	
/*/===========================================================/*/
WSMETHOD ConfirmationHandle WSRECEIVE UserCode, ProtheusUserCode, ConfirmationHandle, OperationNumber WSSEND OperationMessage WSSERVICE PmsConfirmations

Local aArea    := GetArea() 
Local lRetorno := .T.
Local aCpos		:= {}
Local dData		:= ConfirmationHandle:ReferenceDate //ConfirmationDate
Local lAcesso  := .F.
Local cEvento  := ""
Local cMsg     := ""
Local cPrjCode := ""

////////////////////////////
// Para a rotina automatica
Private lMsHelpAuto := .T. // se .t. direciona as mensagens de help para o arq. de log
Private lMsErroAuto := .F. //necessario a criacao, pois sera //atualizado quando houver erro 

/*
 .: Valores do aRotina do PMS311 :.
3 - Incluir
4 - Editar
5 - Excluir
*/

If PrtChkUser(UserCode,"PmsConfirmations","ConfirmationHandle")

	/////////////////////////
	//	Valida Fase do Projeto
	Do Case
		Case OperationNumber == 3 // 3 - Incluir    
			cEvento := "91"
		Case OperationNumber == 4 // 4 - Editar                    
			cEvento := "93"
		Case OperationNumber == 5 // 5 - Excluir
			cEvento := "95"
		OtherWise
			cEvento := ""
	EndCase
	cMsg     := ""
	cPrjCode := PadR(ConfirmationHandle:ProjectCode,TamSx3("AFF_PROJET")[1])
	lAcesso  := Empty(cEvento) .Or. PmsVldFase("AF8",cPrjCode,cEvento,.F.,@cMsg)

	If !lAcesso
		SetSoapFault("ConfirmationHandle","<b>"+cMsg+"</b>")
		lRetorno := .F.
	Else

		dbSelectArea("AFF")
		dbSetOrder(1) //AFF_FILIAL+AFF_PROJET+AFF_REVISA+AFF_TAREFA+DTOS(AFF_DATA)
	
		If ::ConfirmationHandle:DbRecord <> Nil
			MsGoTo(::ConfirmationHandle:DbRecord)
		Endif		
	
		::OperationMessage := {}
			aadd(::OperationMessage,WsClassNew("MessageView"))	
	
		If  ( OperationNumber == 3 )	.Or. ::ConfirmationHandle:DbRecord == AFF->(Recno())	
				If Empty(ConfirmationHandle:ProjectVersion)
		 			cRev := PmsRevAtu( ConfirmationHandle:ProjectCode )
				Else
					cRev := PadR(ConfirmationHandle:ProjectVersion,TamSx3("AFF_REVISA")[1])		
				Endif
				aCpos :=		{	{"AFF_PROJET",PadR(ConfirmationHandle:ProjectCode,TamSx3("AFF_PROJET")[1])				,Nil}	,;
								{"AFF_REVISA",cRev																							,Nil}	,;
								{"AFF_DATA"  ,dData																							,Nil}	,;
								{"AFF_TAREFA",PadR(ConfirmationHandle:TaskCode,TamSx3("AFF_TAREFA")[1])					,Nil}	,;
								{"AFF_QUANT" ,ConfirmationHandle:QuantityExecuted													,Nil}	,;
								{"AFF_PERC"  ,ConfirmationHandle:PercentageExecuted												,Nil}	,;
								{"AFF_OCORRE",PadR(ConfirmationHandle:OcorrenceCode,TamSx3("AFF_OCORRE")[1])			,Nil}	,;
								{"AFF_CODMEM",PadR(ConfirmationHandle:ProjectCode,TamSx3("AFF_CODMEM")[1])				,Nil}	,;
								{"AFF_USER"  ,PadR(ConfirmationHandle:UserCode,TamSx3("AFF_USER")[1])						,Nil}	,;
								{"AFF_CONFIR",PadR(ConfirmationHandle:DeliveryAuthorization,TamSx3("AFF_CONFIR")[1])	,Nil}	,;
								{"AFF_OBS"   ,PadR(ConfirmationHandle:Obs,TamSx3("AFF_OBS")[1])								,Nil}	}
				If AFF->(FieldPos('AFF_HORAI')) > 0
					aadd(aCpos,{'AFF_HORAI',PadR(ConfirmationHandle:InitialHour,TamSx3("AFF_HORAI")[1]),Nil})
		   	Endif
				If AFF->(FieldPos('AFF_HORAF')) > 0
					aadd(aCpos,{'AFF_HORAF',PadR(ConfirmationHandle:InitialHour,TamSx3("AFF_HORAF")[1]),Nil})
		   	Endif
			
			////////////////////
			// Rotina automatica
			PMSA311Aut( aCpos, OperationNumber, {"Sim","Sim"} )
			                               	
			If lMsErroAuto
				cMemo := MemoRead(NomeAutoLog())
				::OperationMessage[1]:MessageText := cMemo
				::OperationMessage[1]:MessageType := -1 // Erro
			Else
				::OperationMessage[1]:MessageType := 1 // Sucesso
				Do Case
					Case OperationNumber == 3
						::OperationMessage[1]:MessageText := STR0012 //"Confirmacao incluida com sucesso !"
					Case OperationNumber == 4
						::OperationMessage[1]:MessageText := STR0013 //"Confirmacao alterada com sucesso !"
					Case OperationNumber == 5
						::OperationMessage[1]:MessageText := STR0014 //"Confirmacao excluida com sucesso !"
				EndCase
			Endif
	
		Else
			::OperationMessage[1]:MessageText := STR0009 //"Nao encontrado registro na base para efetuar a operacao."
			::OperationMessage[1]:MessageType := -1 // Erro
		Endif
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)



Static Function  GetConfirmation(cMetodo,cUserCode,nOperationNumber,cProtheusUserCode,aConfirmation,lRecno,nRecno,cProjectCode,cTaskCode,dDateConf)
Local aArea    := GetArea() 
Local lRetorno := .T.
Local lAcesso	:= .T.
Local lFind		:= .F.
Local nX       := 0
Local nY       := 0
Local cSeq		:= ""
Local cMsg		:= STR0011 //"PmsChkUser : Usuario sem permissao para "
Local nChk		:= 0
Local cUsuario	:= ""
Local nQtdTot   := 0
Local		cDate
Local cKeyAF9	:=	""
Local cEvento	:= ""

Default dDateConf	:=	MsDate()
aConfirmation	:=	{}
cDate	:=	Dtos(dDateConf)			
Do Case
	Case nOperationNumber == 3 // incluir
		cMsg += "incluir."
		nChk := 1 // Libera, pois ainda nao sabemos em que projeto e tarefa sera' incluido, a rotina automatica que validara.
	Case nOperationNumber == 4 // alterar
		cMsg += "alterar."
		nChk := 3
	Case nOperationNumber == 5 // excluir
		cMsg += "excluir."
		nChk := 4
	Otherwise
		cMsg += "visualizar."
		nChk := 2
EndCase

If !lRecno
	cRev := PmsRevAtu( cProjectCode )
	cProjectCode	:=	Padr(cProjectCode	,TamSX3('AFF_PROJET')[1])
	cTaskCode		:=	Padr(cTaskCode		,TamSX3('AFF_TAREFA')[1])
	cKeyAF9			:=	cProjectCode+cRev+cTaskCode 
	dbSelectArea("AFF")
	dbSetOrder(1) //AFF_FILIAL+AFF_PROJET+AFF_REVISA+AFF_TAREFA+DTOS(AFF_DATA)
	If MsSeek( xFilial()+cProjectCode+cRev+cTaskCode+cDate )
		lFind := .T.
		If nOperationNumber ==3
			nChk := 3 // Valida, pois ja se sabe qual sera o projeto
		Endif
	Endif  
Else 
	dbSelectArea("AFF")
	DbGoTo( nRecno)
	cProjectCode := AFF->AFF_PROJET
	cKeyAF9	:=AFF->(	AFF_PROJET+AFF_REVISA+AFF_TAREFA)
	lFind := .T.
	If nOperationNumber ==3
		nChk := 3 // Valida, pois ja se sabe qual sera o projeto
	Endif
Endif		
cUsuario	:= UsrPrtErp( cUserCode )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Valida permissao de Manutencao de Confirmacoes³
//³ pelo Usuario do Portal. 							  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOperationNumber<>3 .Or. lFind
	lAcesso := PmsChkUser(AFF->AFF_PROJET,AFF->AFF_TAREFA,,"",nChk,"CONFIR",AFF->AFF_REVISA,cUsuario)
Else
	// Inclusao, somente sera' validado pela rotina automatica.
	// pois ainda nao se sabe qual projeto+tarefa sera' testado a permissao de acesso.
	lAcesso := .T.
Endif
If !lAcesso
	SetSoapFault(cMetodo,cMsg) // Permissao de acesso negada.
	lRetorno := .F.
Else

	/////////////////////////
	//	Valida Fase do Projeto
	Do Case
		Case nOperationNumber == 3 // 3 - Incluir    
			cEvento := "91"
		Case nOperationNumber == 4 // 4 - Editar                    
			cEvento := "93"
		Case nOperationNumber == 5 // 5 - Excluir
			cEvento := "95"
		OtherWise
			cEvento := ""
	EndCase
	cMsg    := ""
	lAcesso := Empty(cEvento) .Or. PmsVldFase("AF8",cProjectCode,cEvento,.F.,@cMsg)
	If !lAcesso
		SetSoapFault(cMetodo,"<b>"+cMsg+"</b>")
		lRetorno := .F.
	Else

		If nOperationNumber == 3 .Or. lFind
			lRetorno := .T.
			cUsuario	:= UsrPrtErp( cUserCode )

			If lFind
				nQtdTot  := PmsRetDesc(AFF->AFF_PROJET+AFF->AFF_REVISA+AFF->AFF_TAREFA,"AF9_QUANT",1)
				aConfirmation	:=	{}
				aadd(aConfirmation,WsClassNew("ConfirmationView"))
				nX++
				aConfirmation[nX]:ReferenceDate           	:= AFF->AFF_DATA
				aConfirmation[nX]:QuantityExecuted        	:= AFF->AFF_QUANT
				aConfirmation[nX]:PercentageExecuted      	:= (AFF->AFF_QUANT * 100 ) / nQtdTot //AFF->AFF_PERC
				aConfirmation[nX]:OcorrenceCode          	:= AFF->AFF_OCORRE
				aConfirmation[nX]:OcorrenceDescription 		:= PmsRetDesc(AFF->AFF_OCORRE,"AE7_DESCRI") // AFF->AFF_OCDESC
				aConfirmation[nX]:UserCode              		:= AFF->AFF_USER
				aConfirmation[nX]:DeliveryAuthorization		:= AFF->AFF_CONFIR
				aConfirmation[nX]:Obs 								:= ""
				aConfirmation[nX]:Notes 							:= {}
				aConfirmation[nX]:TaskQtdTot              	:= Str(nQtdTot)
				aConfirmation[nX]:DbRecord 						:= AFF->(Recno())
	
				If FieldPos('AFF_HORAI') > 0
					aConfirmations[nX]:InitialHour           := AFF->AFF_HORAI
		   	Endif
				If FieldPos('AFF_HORAF') > 0
					aConfirmations[nX]:FinalHour           := AFF->AFF_HORAF
		   	Endif
		      dbSelectArea("AE7")
				dbSetOrder(1) // AE7_FILIAL+AE7_CODIGO
				If MsSeek( AFF->AFF_FILIAL+AFF->AFF_OCORRE )
					aConfirmation[nX]:OcorrenceDescription	:= AE7->AE7_DESCRI
		      Endif
				aConfirmation[nX]:UserName                	:= UsrRetName( AFF->AFF_USER )
				//ÚÄÄÄÄÄÄÄÄÄ¿
				//³ AFF_OBS ³
				//ÀÄÄÄÄÄÄÄÄÄÙ			
				cSeq 	:= StrZero(0,TamSX3("YP_SEQ")[1])
				dbSelectArea("SYP")
				dbSetOrder(1) // YP_FILIAL+YP_CHAVE+YP_SEQ
				
				While .T.
					cSeq := Soma1(cSeq)
					If MsSeek( xFilial("SYP") + AFF->AFF_CODMEM + cSeq )
						aadd(aConfirmation[nX]:Notes,WsClassNew("NotesView"))
						nY++
						aConfirmation[nX]:Notes[nY]:Notes := SYP->YP_TEXTO
			      Else
			      	Exit
			      Endif
		      EndDo
			Else
				aConfirmation	:=	{}
				aadd(aConfirmation,WsClassNew("ConfirmationView"))
				nX++
				aConfirmation[nX]:ReferenceDate           	:= MsDate()
			Endif                                                       
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Campos Virtuais ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Empty(cKeyAF9)
				dbSelectArea("AF9")
				dbSetOrder(1) // AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
				If MsSeek( xFilial('AF9')+cKeyAF9 )
					aConfirmation[nX]:TaskDescription := AF9->AF9_DESCRI
					aConfirmation[nX]:ProjectCode     := AF9->AF9_PROJET
					aConfirmation[nX]:ProjectVersion  	:= AF9->AF9_REVISA
					aConfirmation[nX]:TaskCode        	:= AF9->AF9_TAREFA
					aConfirmation[nX]:TaskQtdTot      	:= Str(AF9->AF9_QUANT)
		      Endif
			Endif
		Endif
	EndIf
Endif
RestArea(aArea)
Return(lRetorno)

