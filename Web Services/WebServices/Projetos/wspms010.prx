#INCLUDE "wspms010.ch"
#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³WSPMS010  ³ Autor ³Cristiano Denardi      ³ Data ³03.08.2005  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Web Service responsavel pela manutencao das informacoes      ³±±
±±³          ³de Projetos                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function WSPmsProjects()
Return
WSSERVICE PmsProjects            DESCRIPTION STR0001 NAMESPACE "" //"Servico de consulta e atualizacao dos projetos ativos"
	WSDATA UserCode               AS String
	WSDATA ProtheusUserCode       AS String
	WSDATA Header                 As Array Of BrwHeader
	WSDATA HeaderPms              As Array Of BrwHeaderPms
	WSDATA HeaderType             As String
	WSDATA ProjectList				As Array Of ProjectListView
	WSDATA TaskList					As Array Of TaskListView
	WSDATA TaskProductsList			As Array Of TaskProductsView
	WSDATA TaskAllocationList		As Array Of TaskAllocationView
	WSDATA EventList					As Array Of EventListView
	WSDATA ExpenseList				As Array Of ExpenseListView
	WSDATA RelationShipList			As Array Of RelationShipListView
	WSDATA DateInitial				As Date
	WSDATA DateFinal					As Date
	WSDATA ProjectInitial			As String
	WSDATA ProjectFinal				As String
	WSDATA ClientInitial				As String
	WSDATA ClientFinal				As String
	WSDATA ProjectCode				As String
	WSDATA WbsOrTask					As String
	WSDATA WbsTaskCode				As String
	WSDATA WbsCode						As String
	WSDATA TaskCode					As String
	WSDATA WbsFather					As String
	WSDATA Target						As String	OPTIONAL
	WSDATA WbsTarget					As String	OPTIONAL
	WSDATA ProjectStruct				As Array Of ProjectStructView
	WSDATA ProjectHeader				As Array Of ProjectHeaderView
	WSDATA ProjectDetail				As Array Of ProjectDetailView
	WSDATA WbsDetail					As Array Of WbsDetailView
	WSDATA TaskDetail					As Array Of TaskDetailView
   WSDATA PageLen                AS Integer OPTIONAL
   WSDATA PageFirst              AS Integer OPTIONAL
   WSDATA QryAdd                 AS String OPTIONAL
	
	WSMETHOD GetHeader        			DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetHeaderPms     			DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetProject       			DESCRIPTION STR0003 //"Metodo que descreve os projetos do sistema"
	WSMETHOD GetTaskList      			DESCRIPTION STR0004 //"Metodo que descreve as tarefas de uma determinada EDT do sistema"
	WSMETHOD GetTaskProductsList		DESCRIPTION STR0005 //"Metodo que descreve os produtos de uma tarefa do sistema"
	WSMETHOD GetTaskAllocationList	DESCRIPTION STR0006 //"Metodo que descreve as alocacoes de recursos em uma tarefa do sistema"
	WSMETHOD GetEventList     			DESCRIPTION STR0007 //"Metodo que descreve os eventos de uma determinada EDT do sistema"
	WSMETHOD GetExpenseList   			DESCRIPTION STR0008 //"Metodo que descreve as despesas de uma determinada tarefa do sistema"
	WSMETHOD GetRelationShipList		DESCRIPTION STR0009 //"Metodo que descreve os relacionamento entre as tarefa do sistema"
	WSMETHOD GetProjectStruct			DESCRIPTION STR0010 //"Metodo que descreve as estruturas de um determinado projeto do sistema"
	WSMETHOD GetProjectTopHeader		DESCRIPTION STR0011 //"Metodo que descreve as estruturas que estao acima da atual estrutura posicionada"
	WSMETHOD GetWBSDetail				DESCRIPTION STR0013 //"Metodo que descreve os detalhes da EDT"
	WSMETHOD GetTaskDetail				DESCRIPTION STR0014 //"Metodo que descreve os detalhes da Tarefa"
ENDWSSERVICE

/*/===========================================================/*/
WSMETHOD GetHeader WSRECEIVE HeaderType WSSEND Header WSSERVICE PmsProjects

::Header := PmsHeader(::HeaderType)

Return(.T.)    

/*/===========================================================/*/
WSMETHOD GetHeaderPms WSRECEIVE HeaderType WSSEND HeaderPms WSSERVICE PmsProjects

::HeaderPms := PmsHeader(::HeaderType)

Return(.T.)

/*/===========================================================/*/
WSMETHOD GetProject WSRECEIVE UserCode, ProtheusUserCode, DateInitial, DateFinal, ProjectInitial, ProjectFinal, ClientInitial, ClientFinal,PageLen,PageFirst,QryAdd WSSEND ProjectList WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local lFind	   := .F.
Local nX       := 0
Local nY       := 0

DEFAULT ::PageLen   := 0
DEFAULT ::PageFirst := 0

If PrtChkUser(::UserCode,"PmsProjects","GetProject")
	dbSelectArea("AF8")
	dbSetOrder(1) //AF8_FILIAL+AF8_PROJET
	
	MsSeek( xFilial("AF8")+ProjectInitial,.T. )
	::ProjectList	:=	{}
	While !Eof() .And. xFilial() == AF8->AF8_FILIAL  .And. AF8->AF8_PROJET <= ProjectFinal
	
		If (AF8->AF8_CLIENT < ClientInitial) .Or. (AF8->AF8_CLIENT > ClientFinal)
			AF8->( dbSkip() )
			Loop
		Endif
		If DTOS(AF8->AF8_DATA) >= DTOS(DateInitial) .And. DTOS(AF8->AF8_DATA) <= DTOS(DateFinal)  
			If !Empty(QryAdd)
				If !(&(QryAdd))
					AF8->( dbSkip() )
					Loop
				Endif
			Endif						  
			lFind := .T.
			nY++
			
			If ::PageFirst==0 .Or. nY >= ::PageFirst
			
				aadd(::ProjectList,WsClassNew("ProjectListView"))
				nX++
				::ProjectList[nX]:ProjectCode 		:= AF8->AF8_PROJET
				::ProjectList[nX]:ProjectDate 		:= AF8->AF8_DATA
				::ProjectList[nX]:Description 		:= AF8->AF8_DESCRI
				::ProjectList[nX]:ProjectRevision	:= AF8->AF8_REVISA
				::ProjectList[nX]:ProjectCliente		:= AF8->AF8_CLIENT
				::ProjectList[nX]:ProjectUnit			:= AF8->AF8_LOJA
				
				dbSelectArea("AEA")
				dbSetOrder(1) // AEA_FILIAL+AEA_COD
				If MsSeek( xFilial("AEA")+AF8->AF8_FASE )
					::ProjectList[nX]:ProjectStage	:= AEA->AEA_DESCRI
				Endif
			Endif
		Endif

		If nX >= ::PageLen .And. ::PageLen <> 0
			Exit
		EndIf
	
		dbSelectArea("AF8")
		AF8->( dbSkip() )
	EndDo

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)            


/*/===========================================================/*/
WSMETHOD GetTaskList WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, WBSFather WSSEND TaskList WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local cRev		:= ""
Local cUsuario	:= ""
Local nX			:= 0

If PrtChkUser(::UserCode,"PmsProjects","GetTaskList")

	cUsuario	:= UsrPrtErp( ::UserCode )
//	cUsuario	:= ::ProtheusUserCode 
	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif

	dbSelectArea("AF9")
	dbSetOrder(2) //AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_EDTPAI+AF9_ORDEM
	
	ProjectCode := Pad(ProjectCode,Len(AF9->AF9_PROJET))
	WbsFather := Pad( WbsFather, Len( AF9->AF9_EDTPAI ) )
	
	If MsSeek( xFilial("AF9")+ ProjectCode + cRev + WBSFather  )
		::TaskList	:=	{}
		While !Eof()	.And. (xFilial("AF9") == AF9->AF9_FILIAL) .And. (AF9_PROJET == ProjectCode) ;
							.And. (AF9_REVISA == cRev) .And. (AF9_EDTPAI == WBSFather)
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Valida acesso a Tarefa pelo Usuario do Portal ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !PmsChkUser(AF9->AF9_PROJET,AF9->AF9_TAREFA,,AF9->AF9_EDTPAI,1,"ESTRUT",AF9->AF9_REVISA,cUsuario)
				dbSelectArea("AF9")
				AF9->( dbSkip() )
				Loop
			Endif
			
			aadd(::TaskList,WsClassNew("TaskListView"))
				nX++
				::TaskList[nX]:Task							:= AF9_TAREFA
				::TaskList[nX]:Level							:= AF9_NIVEL
				::TaskList[nX]:Description 				:= AF9_DESCRI
				::TaskList[nX]:MU  							:= AF9_UM
				::TaskList[nX]:Quantity    				:= AF9_QUANT
				::TaskList[nX]:TimeDuration 				:= AF9_HDURAC
				::TaskList[nX]:Calendar    				:= AF9_CALEND
				::TaskList[nX]:EstimatedInitialDate		:= AF9_START
				::TaskList[nX]:EstimatedFinalDate 		:= AF9_FINISH
				::TaskList[nX]:EstimatedInitialHour		:= AF9_HORAI
				::TaskList[nX]:EstimatedFinalHour   	:= AF9_HORAF
				::TaskList[nX]:MeasurementMethod			:= AF9_TPMEDI
				::TaskList[nX]:UsefulHours    			:= AF9_HUTEIS
				::TaskList[nX]:ExecutionInitialDate		:= AF9_DTATUI
				::TaskList[nX]:ExecutionFinalDate		:= AF9_DTATUF
				::TaskList[nX]:CostCenter 					:= AF9_CCUSTO
				::TaskList[nX]:AccountingItem       	:= AF9_ITEMCC
				::TaskList[nX]:ValueClass 					:= AF9_CLVL
				::TaskList[nX]:Invoiced    				:= AF9_FATURA
				::TaskList[nX]:CurrentValue1   			:= AF9_VATU1
				::TaskList[nX]:CurrentValue2 				:= AF9_VATU2
				::TaskList[nX]:CurrentValue3 				:= AF9_VATU3
				::TaskList[nX]:CurrentValue4 				:= AF9_VATU4
				::TaskList[nX]:CurrentValue5 				:= AF9_VATU5
				::TaskList[nX]:FinalValue1  				:= AF9_VFIM1
				::TaskList[nX]:FinalValue2 				:= AF9_VFIM2
				::TaskList[nX]:FinalValue3 				:= AF9_VFIM3
				::TaskList[nX]:FinalValue4 				:= AF9_VFIM4
				::TaskList[nX]:FinalValue5 				:= AF9_VFIM5
				::TaskList[nX]:InitialValue1   			:= AF9_VINI1
				::TaskList[nX]:InitialValue2 				:= AF9_VINI2
				::TaskList[nX]:InitialValue3 				:= AF9_VINI3
				::TaskList[nX]:InitialValue4 				:= AF9_VINI4
				::TaskList[nX]:InitialValue5 				:= AF9_VINI5
				::TaskList[nX]:MainWBS    					:= AF9_EDTPAI
				::TaskList[nX]:ExpenseValue1				:= AF9_VDSP1
				::TaskList[nX]:ExpenseValue2 				:= AF9_VDSP2
				::TaskList[nX]:ExpenseValue3 				:= AF9_VDSP3
				::TaskList[nX]:ExpenseValue4 				:= AF9_VDSP4
				::TaskList[nX]:ExpenseValue5 				:= AF9_VDSP5
				::TaskList[nX]:CompositionCode 			:= AF9_COMPOS     
				::TaskList[nX]:CurrencyConversion		:= AF9_CNVPRV
				::TaskList[nX]:SendEMail 					:= AF9_EMAIL
				::TaskList[nX]:Group							:= AF9_GRPCOM
				::TaskList[nX]:Priority						:= AF9_PRIORI
				::TaskList[nX]:ConversionDate 			:= AF9_DTCONV
				::TaskList[nX]:CurrencyCost1 				:= AF9_CUSTO
				::TaskList[nX]:CurrencyCost2 				:= AF9_CUSTO2
				::TaskList[nX]:CurrencyCost3 				:= AF9_CUSTO3
				::TaskList[nX]:CurrencyCost4 				:= AF9_CUSTO4
				::TaskList[nX]:CurrencyCost5 				:= AF9_CUSTO5
				::TaskList[nX]:StructureOrder   			:= AF9_ORDEM
				::TaskList[nX]:Restriction 				:= AF9_RESTRI
				::TaskList[nX]:RestrictDate 				:= AF9_DTREST
				::TaskList[nX]:RestrictTime 				:= AF9_HRREST
				::TaskList[nX]:CurrencyRate2 				:= AF9->(IIf(FieldPos('AF9_TXMO2')	>0	,AF9_TXMO2,0))
				::TaskList[nX]:CurrencyRate3 				:= AF9->(IIf(FieldPos('AF9_TXMO3')	>0	,AF9_TXMO3,0))
				::TaskList[nX]:CurrencyRate4 				:= AF9->(IIf(FieldPos('AF9_TXMO4')	>0	,AF9_TXMO4,0))
				::TaskList[nX]:CurrencyRate5 				:= AF9->(IIf(FieldPos('AF9_TXMO5')	>0	,AF9_TXMO5,0))
				::TaskList[nX]:MarkupPercent 				:= AF9->(IIf(FieldPos('AF9_BDI')  	>0	,AF9_BDI,0))
				::TaskList[nX]:MarkupValue 				:= AF9->(IIf(FieldPos('AF9_VALBDI')>0	,AF9_VALBDI,0))
				::TaskList[nX]:GrandTotal 					:= AF9->(IIf(FieldPos('AF9_TOTAL') >0	,AF9_TOTAL,0))
				::TaskList[nX]:InvoiceProductCode 		:= AF9->(IIf(FieldPos('AF9_PRODFA')>0	,AF9_PRODFA,CriaVar('B1_COD')))
		
			AF9->( dbSkip() )
		EndDo
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)            


/*/===========================================================/*/
WSMETHOD GetTaskProductsList WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, TaskCode WSSEND TaskProductsList WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local lFind 	:= .T.
Local cRev		:= ""
Local nX			:= 0

If PrtChkUser(::UserCode,"PmsProjects","GetTaskProductsList")

	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif

	dbSelectArea("AFA")
	dbSetOrder(1) // AFA_FILIAL+AFA_PROJET+AFA_REVISA+AFA_TAREFA+AFA_ITEM
	
	ProjectCode := Pad(ProjectCode,Len(AFA->AFA_PROJET))
	TaskCode	:= Pad( TaskCode, Len( AFA->AFA_TAREFA ) )
	
	If MsSeek( xFilial("AFA")+ ProjectCode + cRev + TaskCode )
		::TaskProductsList :=	{}
		While !Eof()	.And. (xFilial("AFA") == AFA->AFA_FILIAL) .And. (AFA_PROJET == ProjectCode) ;
							.And. (AFA_REVISA == cRev) .And. (AFA_TAREFA == TaskCode)
		
			If Empty(AFA_PRODUT) .OR. Empty(AFA_RECURS)
				dbSelectArea("AFA")
				AFA->( dbSkip() )
				Loop
			Endif
		
			aadd(::TaskProductsList,WsClassNew("TaskProductsView"))
				nX++
				::TaskProductsList[nX]:Item							:= AFA_ITEM
				::TaskProductsList[nX]:ProductCode					:= AFA_PRODUT
				::TaskProductsList[nX]:Quantity						:= AFA_QUANT
				::TaskProductsList[nX]:Quantity2						:= AFA_QTSEGU
				::TaskProductsList[nX]:Currency						:= AFA_MOEDA
				::TaskProductsList[nX]:CurrencySymbol				:= GetMv("MV_SIMB"+Alltrim(STR(AFA_MOEDA,2,0)))
				::TaskProductsList[nX]:StandardCost					:= AFA_CUSTD
				::TaskProductsList[nX]:NecessityDate				:= AFA_DATPRF
				::TaskProductsList[nX]:CostCalculationMethod		:= AFA_ACUMUL
				::TaskProductsList[nX]:SubcompostionCode			:= AFA_COMPOS
				::TaskProductsList[nX]:PlanningCode					:= AFA_PLANEJ
				::TaskProductsList[nX]:RecalculateCosts			:= AFA->(IIf(FieldPos('AFA_RECALC')	>0	,AFA_RECALC,"1"))
				::TaskProductsList[nX]:InvoiceProductCode			:= AFA->(IIf(FieldPos('AFA_PRODFA')	>0	,AFA_PRODFA,CriaVar('B1_COD')))
				
				dbSelectArea("SB1")
				dbSetOrder(1) // B1_FILIAL+B1_COD
				lFind := MsSeek( xFilial("SB1")+ AFA->AFA_PRODUT )
				::TaskProductsList[nX]:ProductType					:= If( lFind, B1_TIPO , "" )
				::TaskProductsList[nX]:Description					:= If( lFind, B1_DESC , "" )
				::TaskProductsList[nX]:Unit							:= If( lFind, B1_UM   , "" )
				::TaskProductsList[nX]:Unit2							:= If( lFind, B1_SEGUM, "" )
		
			dbSelectArea("AFA")
			AFA->( dbSkip() )
		EndDo
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)


/*/===========================================================/*/
WSMETHOD GetTaskAllocationList WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, TaskCode WSSEND TaskAllocationList WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local lFind 	:= .F.
Local cRev		:= ""
Local nX			:= 0

If PrtChkUser(::UserCode,"PmsProjects","GetTaskAllocationList")

	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif

	dbSelectArea("AFA")
	dbSetOrder(1) // AFA_FILIAL+AFA_PROJET+AFA_REVISA+AFA_TAREFA+AFA_ITEM
	
	ProjectCode := Pad(ProjectCode,Len(AFA->AFA_PROJET))
	TaskCode	:= Pad( TaskCode, Len( AFA->AFA_TAREFA ) )
	
	If MsSeek( xFilial("AFA")+ ProjectCode + cRev + TaskCode )
		::TaskAllocationList :=	{}
		While !Eof()	.And. (xFilial("AFA") == AFA->AFA_FILIAL) .And. (AFA_PROJET == ProjectCode) ;
							.And. (AFA_REVISA == cRev) .And. (AFA_TAREFA == TaskCode)
		
			If Empty(AFA_RECURS)
				dbSelectArea("AFA")
				AFA->( dbSkip() )
				Loop
			Endif
		
			aadd(::TaskAllocationList,WsClassNew("TaskAllocationView"))
				nX++
				::TaskAllocationList[nX]:Item							:= AFA_ITEM
				::TaskAllocationList[nX]:ResourceCode				:= AFA_RECURS
				::TaskAllocationList[nX]:Quantity					:= AFA_QUANT
				::TaskAllocationList[nX]:AllocatedPercentage		:= AFA_ALOC
				::TaskAllocationList[nX]:Establish					:= AFA_FIX
				::TaskAllocationList[nX]:ProductCode				:= AFA_PRODUT
				::TaskAllocationList[nX]:Currency					:= AFA_MOEDA
				::TaskAllocationList[nX]:CurrencySymbol			:= GetMv("MV_SIMB"+Alltrim(STR(AFA_MOEDA,2,0)))
				::TaskAllocationList[nX]:StandardCost				:= AFA_CUSTD
				::TaskAllocationList[nX]:Quantity2					:= AFA_QTSEGU
				::TaskAllocationList[nX]:NecessityDate				:= AFA_DATPRF
				::TaskAllocationList[nX]:CostCalculationMethod	:= AFA_ACUMUL
				::TaskAllocationList[nX]:RecalculateCosts			:= AFA->(IIf(FieldPos('AFA_RECALC')	>0	,AFA_RECALC,'1'))
				::TaskAllocationList[nX]:InvoiceProductCode		:= AFA->(IIf(FieldPos('AFA_PRODFA')	>0	,AFA_PRODFA,CriaVar('B1_COD') ))
				
				dbSelectArea("AE8")
				dbSetOrder(1) // AE8_FILIAL+AE8_RECURS+AE8_DESCRI
				lFind := MsSeek( xFilial("AE8")+ AFA->AFA_RECURS )
				::TaskAllocationList[nX]:Description				:= If( lFind, AE8_DESCRI, "" )

				dbSelectArea("SB1")
				dbSetOrder(1) // B1_FILIAL+B1_COD
				lFind := MsSeek( xFilial("SB1")+ AFA->AFA_PRODUT )
				::TaskAllocationList[nX]:Unit							:= If( lFind, B1_UM     , "" )
				::TaskAllocationList[nX]:Unit2						:= If( lFind, B1_SEGUM  , "" )
		
			dbSelectArea("AFA")
			AFA->( dbSkip() )
		EndDo
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)
                

/*/===========================================================/*/
WSMETHOD GetEventList WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, WbsTaskCode, WbsOrTask WSSEND EventList WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local cRev		:= ""
Local cItem		:= ""
Local nX			:= 0
Local lTask		:= ( WbsOrTask == "2" )

// WbsOrTask - define se a busca eh pelo Codigo da EDT ou Tarefa
//             ajustando os indices e chave do While

If PrtChkUser(::UserCode,"PmsProjects","GetEventList")

	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif

	dbSelectArea("AFP")
	If lTask
		dbSetOrder(1) //AFP_FILIAL+AFP_PROJET+AFP_REVISA+AFP_TAREFA+AFP_ITEM
	Else
		dbSetOrder(2) //AFP_FILIAL+AFP_PROJET+AFP_REVISA+AFP_EDT+AFP_ITEM   
	Endif
	
	ProjectCode := Pad(ProjectCode,Len(AFP->AFP_PROJET))
	WbsTaskCode	:= Pad( WbsTaskCode, If(lTask,Len(AFP->AFP_TAREFA),Len(AFP->AFP_EDT)) )
	cItem			:= StrZero(0,TamSX3("AFP_ITEM")[1])
	cItem 		:= Soma1(cItem)
	
	If MsSeek( xFilial("AFP")+ ProjectCode + cRev + WbsTaskCode + cItem  )
		::EventList :=	{}
		While !Eof()	.And. (xFilial("AFP") == AFP->AFP_FILIAL) .And. (AFP_PROJET == ProjectCode) ;
							.And. (AFP_REVISA == cRev) .And. ( If(lTask,(AFP_TAREFA==WbsTaskCode),(AFP_EDT==WbsTaskCode)) ) ;
							.And. (AFP_ITEM == cItem)
		
			aadd(::EventList,WsClassNew("EventListView"))
				nX++
				::EventList[nX]:TaskCode 					:= AFP_TAREFA
				::EventList[nX]:Item 						:= AFP_ITEM
				::EventList[nX]:UsageCode 					:= AFP_USO
				::EventList[nX]:EventDescription 		:= AFP_DESCRI
				::EventList[nX]:EventEstimatedDate 		:= AFP_DTPREV
				::EventList[nX]:EstimatedDate 			:= AFP_DTCALC
				::EventList[nX]:EventExecutionDate 		:= AFP_DTATU
				::EventList[nX]:PercentageExecuted 		:= AFP_PERC
				::EventList[nX]:SendEmail 					:= AFP_EMAIL
				::EventList[nX]:ExecuteUserFunction 	:= AFP_USRFUN
				::EventList[nX]:WbsCode 					:= AFP_EDT
				::EventList[nX]:CustomerCode 				:= AFP_CLIENT
				::EventList[nX]:CustomerBranch 			:= AFP_LOJA
				::EventList[nX]:BillValue 					:= AFP_VALOR
				::EventList[nX]:BillCurrency 				:= AFP_MOEDA
				::EventList[nX]:GenerateTemporaryBill	:= AFP_GERPRV
				::EventList[nX]:GenerateBillReceivable	:= AFP_GERTIT
				::EventList[nX]:PaymentTerm 				:= AFP_COND
				::EventList[nX]:BillNumber 				:= AFP_NUM
				::EventList[nX]:BillPrefix 				:= AFP_PREFIX
				::EventList[nX]:ClassCode 					:= AFP_NATURE
				::EventList[nX]:SalesOrderNumber 		:= AFP_CTV
				::EventList[nX]:SalesOrderNumberItem 	:= AFP_CTVITE
				::EventList[nX]:SalesOrderRelease 		:= AFP_CTVPER
		
			cItem := Soma1(cItem)
			AFP->( dbSkip() )
		EndDo
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)


/*/===========================================================/*/
WSMETHOD GetExpenseList WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, TaskCode WSSEND ExpenseList WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local cRev		:= ""
Local cItem		:= ""
Local nX			:= 0

If PrtChkUser(::UserCode,"PmsProjects","GetExpenseList")

	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif

	dbSelectArea("AFB")
	dbSetOrder(1) //AFB_FILIAL+AFB_PROJET+AFB_REVISA+AFB_TAREFA+AFB_ITEM
	
	ProjectCode := Pad(ProjectCode,Len(AFB->AFB_PROJET))
	TaskCode	:= Pad( TaskCode, Len( AFB->AFB_TAREFA ) )
	cItem		:= StrZero(0,TamSX3("AFB_ITEM")[1])
	cItem 	:= Soma1(cItem)
	
	If MsSeek( xFilial("AFB")+ ProjectCode + cRev + TaskCode + cItem  )
		::ExpenseList :=	{}
		While !Eof()	.And. (xFilial("AFB") == AFB->AFB_FILIAL) .And. (AFB_PROJET == ProjectCode) ;
							.And. (AFB_REVISA == cRev) .And. (AFB_TAREFA == TaskCode) .And. (AFB_ITEM == cItem)
		
			aadd(::ExpenseList,WsClassNew("ExpenseListView"))
				nX++
				::ExpenseList[nX]:Item							:= AFB_ITEM
				::ExpenseList[nX]:ExpensesType				:= AFB_TIPOD
				::ExpenseList[nX]:Description					:= AFB_DESCRI
				::ExpenseList[nX]:TaskCode						:= AFB_TAREFA
				::ExpenseList[nX]:Currency						:= AFB_MOEDA
				::ExpenseList[nX]:CurrencySymbol				:= GetMv("MV_SIMB"+Alltrim(STR(AFB->AFB_MOEDA,2,0)))
				::ExpenseList[nX]:ExpensesAmount				:= AFB_VALOR
				::ExpenseList[nX]:ProjectCode 				:= AFB_PROJET
				::ExpenseList[nX]:ProjectVersion				:= AFB_REVISA
				::ExpenseList[nX]:AccumulateCosts			:= AFB_ACUMUL
				::ExpenseList[nX]:NecessityDate				:= AFB_DATPRF
				::ExpenseList[nX]:ResourceCode				:= AFB_RECURS
				::ExpenseList[nX]:AllocatedPercentage		:= AFB_ALOC
				::ExpenseList[nX]:InitialAllocationDate	:= AFB_START
				::ExpenseList[nX]:AllocationInitialHour	:= AFB_HORAI
				::ExpenseList[nX]:FinalAllocationDate		:= AFB_FINISH
				::ExpenseList[nX]:AllocationFinalHour		:= AFB_HORAF
				::ExpenseList[nX]:SubcompositionCode		:= AFB_COMPOS
				::ExpenseList[nX]:InvoiceProductCode		:= AFB_PRODFA
		
			cItem := Soma1(cItem)
			AFB->( dbSkip() )
		EndDo
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetRelationShipList WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, TaskCode WSSEND RelationShipList WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local lFind		:= .T.
Local cRev		:= ""
Local cItem		:= ""
Local nX			:= 0

If PrtChkUser(::UserCode,"PmsProjects","GetRelationShipList")

	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif

	dbSelectArea("AFD")
	dbSetOrder(1) // AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_TAREFA+AFD_ITEM
	
	ProjectCode := Pad(ProjectCode,Len(AFD->AFD_PROJET))
	TaskCode	:= Pad( TaskCode, Len( AFD->AFD_TAREFA ) )
	cItem		:= StrZero(0,TamSX3("AFD_ITEM")[1])
	cItem 	:= Soma1(cItem)
	
	If MsSeek( xFilial("AFD")+ ProjectCode + cRev + TaskCode + cItem  )
		::RelationShipList :=	{}
		While !Eof()	.And. (xFilial("AFD") == AFD->AFD_FILIAL) .And. (AFD_PROJET == ProjectCode) ;
							.And. (AFD_REVISA == cRev) .And. (AFD_TAREFA == TaskCode) .And. (AFD_ITEM == cItem)
		
			aadd(::RelationShipList,WsClassNew("RelationShipListView"))
				nX++
				::RelationShipList[nX]:PredecessorItem			:= AFD_ITEM
				::RelationShipList[nX]:PredecessorTaskCode	:= AFD_PREDEC
				::RelationShipList[nX]:RelationshipType		:= AFD_TIPO
				::RelationShipList[nX]:ProjectVersion			:= AFD_REVISA
				::RelationShipList[nX]:RelationshipDelay		:= AFD_HRETAR
				
				dbSelectArea("AF9")
				dbSetOrder(1) // AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
				lFind := MsSeek( xFilial("AF9")+ ProjectCode + cRev + TaskCode )
				::RelationShipList[nX]:TaskDescription			:= If( lFind, AF9_DESCRI, "" )
		
			cItem := Soma1(cItem)
			dbSelectArea("AFD")
			AFD->( dbSkip() )
		EndDo
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetProjectStruct WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, WBSFather, Target, WbsTarget, DateInitial, DateFinal WSSEND ProjectStruct WSSERVICE PmsProjects

Local aArea		:= GetArea()
Local lRetorno	:= .T.
Local nX		:= 0
Local cRev		:= ""
Local cUsuario	:= ""
Local cImg		:= ""
Local lFiltro	:= .F.
Local lWbsFlt	:= .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Aplica filtro na seleção da Estrutura do Projeto ³
//³ 1 - Mostrar Todos                                ³
//³ 2 - Somente Finalizados                          ³
//³ 3 - Somente A executar                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ValType( Target ) <> "C"
	lFiltro := .F.
Else	
	lFiltro := Target $ "1#2#3" // .F. = Seleciona todos os projetos
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Aplica o filtro nas estruturas abaixo.           ³
//³ 1 - Somente Tarefas                              ³
//³ 2 - EDT e Tarefas                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ValType( WbsTarget ) <> "C"
	lWbsFlt	:= .F.
Else	
	lWbsFlt	:= ( WbsTarget $ "1#2" .And. WbsTarget == "2" ) // .F. = Aplica somente nas tarefas
Endif

If PrtChkUser(::UserCode,"PmsProjects","GetProjectStruct")
	::ProjectStruct := {}

	//cUsuario	:= ::ProtheusUserCode 
	cUsuario	:= UsrPrtErp( ::UserCode )
	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                                                   
	//³ Ajusta espacamentos para Seek ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	WbsFather   := Pad( WbsFather  , Len( AFC->AFC_EDTPAI ) )
	ProjectCode := Pad( ProjectCode, Len( AFC->AFC_PROJET ) )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Busca a EDT principal ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Alltrim(ProjectCode) == Alltrim(WBSFather)
		dbSelectArea("AFC")
		dbSetOrder(1) // AFC_FILIAL+AFC_PROJET+AFC_REVISA+AFC_EDT+AFC_ORDEM
	
		If MsSeek( xFilial("AFC")+ProjectCode+cRev+WBSFather )

			If PmsChkUser(AFC->AFC_PROJET, AFC->AFC_EDT, , AFC->AFC_EDTPAI, ;
			              1 , "ESTRUT", AFC->AFC_REVISA, cUsuario)
		
			cImg := PmsRtResWb( "AFC" )
		
			aadd(::ProjectStruct,WsClassNew("ProjectStructView"))
			nX++
			::ProjectStruct[nX]:WbsJobCode				:= AFC->AFC_EDT
			::ProjectStruct[nX]:Description				:= AFC->AFC_DESCRI
			::ProjectStruct[nX]:WbsOrJob 					:= cImg //WBS - EDT
			::ProjectStruct[nX]:TimeDuration				:= AFC->AFC_HDURAC
			::ProjectStruct[nX]:EstimatedInitialDate	:= AFC->AFC_START
			::ProjectStruct[nX]:EstimatedFinalDate		:= AFC->AFC_FINISH
			::ProjectStruct[nX]:ExecutionInitialDate	:= AFC->AFC_DTATUI
			::ProjectStruct[nX]:ExecutionFinalDate		:= AFC->AFC_DTATUF
			::ProjectStruct[nX]:ExecutionPercentage	:= PmsPocAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,Date())
			::ProjectStruct[nX]:OrderList					:= "0" // Ordem Zero para que a EDT principal seja a primeira da lista
			::ProjectStruct[nX]:Level						:= AFC->AFC_NIVEL
			::ProjectStruct[nX]:WbsFather					:= AFC->AFC_EDTPAI
			EndIf
		EndIf
	EndIf

	dbSelectArea("AFC")
	AFC->(dbSetOrder(2))

	AFC->(MsSeek(xFilial("AFC") + ProjectCode + cRev + WbsFather))
		
	While !AFC->(Eof()) .And. AFC->AFC_FILIAL == xFilial("AFC") .And. ;
	                          AFC->AFC_PROJET == ProjectCode .And. ;
	                          AFC->AFC_REVISA == cRev .And. ;
	                          AFC->AFC_EDTPAI == WbsFather
	
		PmsCreateStruct(AFC->AFC_PROJET, AFC->AFC_EDT, cUsuario, Self, Target, DateInitial, DateFinal, lFiltro, lWbsFlt)
		
		AFC->(dbSkip())
	End
	
		dbSelectArea("AF9")
		AF9->(dbSetOrder(2))
		AF9->(MsSeek(xFilial("AF9") + ProjectCode + cRev + WbsFather))
	
		// procura por tarefas filhas
		While !AF9->(Eof()) .And. AF9->AF9_FILIAL == xFilial("AF9") .And. ;
		                          AF9->AF9_PROJET == ProjectCode .And. ;
		                          AF9->AF9_REVISA == cRev .And. ;
		                          AF9->AF9_EDTPAI == WbsFather
		      
			// verificar as tarefas que o usuário têm direito
			If PmsChkUser(AF9->AF9_PROJET, AF9->AF9_TAREFA, , AF9->AF9_EDTPAI, ;
			              1 , "ESTRUT", AF9->AF9_REVISA, cUsuario)

				cImg := PmsRtResWb("AF9")
				
				// Filtro definido pela pagina HTML
				// .: Aplica no Loop do AF9 :.
				If lFiltro .And. Target <> "1"
					If (Target == "2" .And. cImg <> "J4") .Or. ;
					   (Target == "3" .And. cImg == "J4")
						dbSelectArea("AF9")
						AF9->(dbSkip())
						Loop
					EndIf
				EndIf

				// Filtro definido pela pagina HTML
				// .: INTERVALO DE DATAS :.
				If !Empty(AF9->AF9_START)
					If (AF9_FINISH < DateInitial .Or. AF9_START > DateFinal)
						dbSelectArea("AF9")
						AF9->(dbSkip())
						Loop
					EndIf
				EndIf

				// adiciona a tarefa a estrutura do projeto resultante
				Aadd(Self:ProjectStruct, WsClassNew("ProjectStructView"))
				nx := Len(Self:ProjectStruct)
				
				Self:ProjectStruct[nx]:WbsJobCode := AF9->AF9_TAREFA
				Self:ProjectStruct[nx]:Description := AF9->AF9_DESCRI
				Self:ProjectStruct[nx]:WbsOrJob := cImg //JOB - Tarefa
				Self:ProjectStruct[nx]:TimeDuration := AF9->AF9_HDURAC
				Self:ProjectStruct[nx]:EstimatedInitialDate := AF9->AF9_START
				Self:ProjectStruct[nx]:EstimatedFinalDate := AF9->AF9_FINISH
				Self:ProjectStruct[nx]:ExecutionInitialDate := AF9->AF9_DTATUI
				Self:ProjectStruct[nx]:ExecutionFinalDate := AF9->AF9_DTATUF

				Self:ProjectStruct[nx]:ExecutionPercentage := ;
					PmsPocAF9(AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA, Date())
					
				Self:ProjectStruct[nx]:OrderList := AF9->AF9_TAREFA
				Self:ProjectStruct[nx]:Level := AF9->AF9_NIVEL
				Self:ProjectStruct[nx]:WbsFather := AF9->AF9_EDTPAI
			EndIf
	
			AF9->(dbSkip())	
		End		
	
Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetProjectTopHeader WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, WBSFather WSSEND ProjectHeader WSSERVICE PmsProjects

Local aArea		:= GetArea()
Local lRetorno	:= .T.
Local nX		:= 0
Local cRev		:= ""
Local cImg		:= ""
Local cEDTPai	:= ""

If PrtChkUser(::UserCode,"PmsProjects","GetProjectTopHeader")

	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif
	
	dbSelectArea("AFC")
	dbSetOrder(2) //AFC_FILIAL+AFC_PROJET+AFC_REVISA+AFC_EDTPAI+AFC_ORDEM
	
	ProjectCode := Pad(ProjectCode,Len(AFC->AFC_PROJET))
	WbsFather := Pad( WbsFather, Len( AFC->AFC_EDTPAI ) )
	cEDTPai	  := WBSFather

	
	dbSetOrder(1) //AFC_FILIAL+AFC_PROJET+AFC_REVISA+AFC_EDT+AFC_ORDEM
	::ProjectHeader	:=	{}
	
	While cEDTPai <> Pad( ProjectCode, Len( AFC->AFC_EDTPAI ) )
	
		If MsSeek( xFilial("AFC")+ProjectCode+cRev+cEDTPai )
			cImg := PmsRtResWb( "AFC" )

			aadd(::ProjectHeader,WsClassNew("ProjectHeaderView"))
			nX++
			::ProjectHeader[nX]:WbsCode  		:= AFC->AFC_EDT
			::ProjectHeader[nX]:Description	:= AFC->AFC_DESCRI
			::ProjectHeader[nX]:ImageColor 	:= cImg // Status que esta EDT
			
			cEDTPai := AFC->AFC_EDTPAI
		Endif
	EndDo
	
	If MsSeek( xFilial("AFC")+ProjectCode+cRev+ProjectCode )
		cImg := PmsRtResWb( "AFC" )
	
		aadd(::ProjectHeader,WsClassNew("ProjectHeaderView"))
		nX++
		::ProjectHeader[nX]:WbsCode 		:= AFC->AFC_EDT
		::ProjectHeader[nX]:Description	:= AFC->AFC_DESCRI
		::ProjectHeader[nX]:ImageColor 	:= cImg // Status que esta EDT
	Endif
	
Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)


/*/===========================================================/*/
WSMETHOD GetWbsDetail WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, WbsCode WSSEND WbsDetail WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local cRev		:= ""
Local cUsuario	:= ""
Local nX			:= 0
Local nY			:= 0
Local cSeq		:= ""
Local cMsg		:= STR0015 //"PmsChkUser : Usuario sem permissao para visualizar EDT."

If PrtChkUser(::UserCode,"PmsProjects","GetWbsDetail")
	
	cUsuario	:= UsrPrtErp( ::UserCode )
//	cUsuario	:= ::ProtheusUserCode 
	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif
	
	ProjectCode	:= PADR( ProjectCode, TamSX3('AFC_PROJET')[1] )
	cRev		:= PADR( cRev		, TamSX3('AFC_REVISA')[1] )
	WbsCode		:= PADR( WbsCode	, TamSX3('AFC_EDT'   )[1] )

	dbSelectArea("AFC")
	dbSetOrder(1) // AFC_FILIAL+AFC_PROJET+AFC_REVISA+AFC_EDT+AFC_ORDEM

	If MsSeek( xFilial("AFC") + ProjectCode + cRev + WbsCode )
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valida acesso a EDT pelo Usuario do Portal ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !PmsChkUser(AFC->AFC_PROJET,,AFC->AFC_EDT,AFC->AFC_EDTPAI,1,"ESTRUT",AFC->AFC_REVISA,cUsuario)
			SetSoapFault("GETWBSDETAIL",cMsg)
			lRetorno := .F.
		Else
			::WbsDetail	:=	{}
				aadd(::WbsDetail,WsClassNew("WbsDetailView"))
				nX++
				::WbsDetail[nX]:ProjectCode				:= AFC->AFC_PROJET
				::WbsDetail[nX]:WBSCode						:= AFC->AFC_EDT
				::WbsDetail[nX]:Revision					:= AFC->AFC_REVISA
				::WbsDetail[nX]:Level						:= AFC->AFC_NIVEL
				::WbsDetail[nX]:Description				:= AFC->AFC_DESCRI
				::WbsDetail[nX]:WBSFather					:= AFC->AFC_EDTPAI
				::WbsDetail[nX]:Unity						:= AFC->AFC_UM
				::WbsDetail[nX]:Quantity					:= AFC->AFC_QUANT
				::WbsDetail[nX]:TimeDuration				:= AFC->AFC_HDURAC
				::WbsDetail[nX]:Calendar					:= AFC->AFC_CALEND
				::WbsDetail[nX]:EstimatedInitialDate	:= AFC->AFC_START
				::WbsDetail[nX]:EstimatedFinalDate		:= AFC->AFC_FINISH
				::WbsDetail[nX]:EstimatedInitialHour	:= AFC->AFC_HORAI
				::WbsDetail[nX]:EstimatedFinalHour		:= AFC->AFC_HORAF
				::WbsDetail[nX]:TaskUsefulHours			:= AFC->AFC_HUTEIS
				::WbsDetail[nX]:ExecutedInitialDate		:= AFC->AFC_DTATUI
				::WbsDetail[nX]:ExecutedFinalDate		:= AFC->AFC_DTATUF
				::WbsDetail[nX]:CostCurrencyOne			:= AFC->AFC_CUSTO
				::WbsDetail[nX]:CostCurrencyTwo			:= AFC->AFC_CUSTO2
				::WbsDetail[nX]:CostCurrencyThree		:= AFC->AFC_CUSTO3
				::WbsDetail[nX]:CostCurrencyFor			:= AFC->AFC_CUSTO4
				::WbsDetail[nX]:CostCurrencyFive			:= AFC->AFC_CUSTO5
				::WbsDetail[nX]:StructureOrder			:= AFC->AFC_ORDEM
				::WbsDetail[nX]:Invoiced					:= AFC->AFC_FATURA
				::WbsDetail[nX]:MarkupValue				:= If( AFC->(FieldPos("AFC_VALBDI"))>0, AFC->AFC_VALBDI, 0 )
				::WbsDetail[nX]:SalesGrandTotal			:= If( AFC->(FieldPos("AFC_TOTAL"))>0, AFC->AFC_TOTAL, 0 )
				::WbsDetail[nX]:Obs							:=	""
				::WbsDetail[nX]:Notes						:=	{}
				//ÚÄÄÄÄÄÄÄÄÄ¿
				//³ AFC_OBS ³
				//ÀÄÄÄÄÄÄÄÄÄÙ			
				cSeq 	:= StrZero(0,TamSX3("YP_SEQ")[1])
				dbSelectArea("SYP")
				dbSetOrder(1) // YP_FILIAL+YP_CHAVE+YP_SEQ
				
				While .T.
					cSeq := Soma1(cSeq)
					If MsSeek( xFilial("SYP") + AFC->AFC_CODMEM + cSeq )
						aadd(::WbsDetail[nX]:Notes,WsClassNew("NotesView"))
						nY++
						::WbsDetail[nX]:Notes[nY]:Notes := SYP->YP_TEXTO
			      Else
			      	Exit
			      Endif
		      EndDo
		Endif
	Endif
	
Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)           


/*/===========================================================/*/
WSMETHOD GetTaskDetail WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, TaskCode WSSEND TaskDetail WSSERVICE PmsProjects

Local aArea    := GetArea()
Local lRetorno := .T.
Local cRev		:= ""
Local cUsuario	:= ""
Local nX			:= 0
Local nY			:= 0
Local cSeq		:= ""
Local cMsg		:= STR0016 //"PmsChkUser : Usuario sem permissao para visualizar Tarefa."

If PrtChkUser(::UserCode,"PmsProjects","GetTaskDetail")
	
	cUsuario	:= UsrPrtErp( ::UserCode )
//	cUsuario	:= ::ProtheusUserCode 
	If !Empty( ProjectCode )
		ProjectCode	:=	SubStr(ProjectCode,1,TamSX3('AF8_PROJET')[1])
		cRev := PmsRevAtu( ProjectCode )
	Endif

	ProjectCode	:= PADR( ProjectCode, TamSX3('AF9_PROJET')[1] )
	cRev		:= PADR( cRev		, TamSX3('AF9_REVISA')[1] )
	TaskCode	:= PADR( TaskCode	, TamSX3('AF9_TAREFA')[1] )
	
	dbSelectArea("AF9")
	dbSetOrder(1) // AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM

	If MsSeek( xFilial("AF9") + ProjectCode + cRev + TaskCode )
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valida acesso a Tarefa pelo Usuario do Portal ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !PmsChkUser(AF9->AF9_PROJET,AF9->AF9_TAREFA,,AF9->AF9_EDTPAI,1,"ESTRUT",AF9->AF9_REVISA,cUsuario)
			SetSoapFault("GETTASKDETAIL",cMsg)
			lRetorno := .F.
		Else
			::TaskDetail	:=	{}
				aadd(::TaskDetail,WsClassNew("TaskDetailView"))
				nX++
				::TaskDetail[nX]:ProjectCode 				:= AF9_PROJET
				::TaskDetail[nX]:Version 					:= AF9_REVISA
				::TaskDetail[nX]:TaskCode 					:= AF9_TAREFA
				::TaskDetail[nX]:TaskLevel	 				:= AF9_NIVEL
				::TaskDetail[nX]:Description 				:= AF9_DESCRI
				::TaskDetail[nX]:Unit 						:= AF9_UM
				::TaskDetail[nX]:Quantity 					:= AF9_QUANT
				::TaskDetail[nX]:TaskDurationHours 		:= AF9_HDURAC
				::TaskDetail[nX]:Calendar 					:= AF9_CALEND
				::TaskDetail[nX]:EstimatedInitialDate	:= AF9_START
				::TaskDetail[nX]:EstimatedFinalDate 	:= AF9_FINISH
				::TaskDetail[nX]:EstimatedInitialHour	:= AF9_HORAI
				::TaskDetail[nX]:EstimatedFinalHour 	:= AF9_HORAF
				::TaskDetail[nX]:MeasurementMethod 		:= AF9_TPMEDI
				::TaskDetail[nX]:TaskUsefulHours 		:= AF9_HUTEIS
				::TaskDetail[nX]:ExecutionInitialDate	:= AF9_DTATUI
				::TaskDetail[nX]:ExecutionFinalDate 	:= AF9_DTATUF
				::TaskDetail[nX]:CostCenter 				:= AF9_CCUSTO
				::TaskDetail[nX]:AccountingItem 			:= AF9_ITEMCC
				::TaskDetail[nX]:ValueClass 				:= AF9_CLVL
				::TaskDetail[nX]:Invoiced					:= AF9_FATURA
				::TaskDetail[nX]:CurrencyActualValue1	:= AF9_VATU1
				::TaskDetail[nX]:CurrencyActualValue2	:= AF9_VATU2
				::TaskDetail[nX]:CurrencyActualValue3	:= AF9_VATU3
				::TaskDetail[nX]:CurrencyActualValue4	:= AF9_VATU4
				::TaskDetail[nX]:CurrencyActualValue5	:= AF9_VATU5
				::TaskDetail[nX]:FinalValue1 				:= AF9_VFIM1
				::TaskDetail[nX]:FinalValue2 				:= AF9_VFIM2
				::TaskDetail[nX]:FinalValue3 				:= AF9_VFIM3
				::TaskDetail[nX]:FinalValue4 				:= AF9_VFIM4
				::TaskDetail[nX]:FinalValue5 				:= AF9_VFIM5
				::TaskDetail[nX]:InitialValue1 			:= AF9_VINI1
				::TaskDetail[nX]:InitialValue2 			:= AF9_VINI2
				::TaskDetail[nX]:InitialValue3 			:= AF9_VINI3
				::TaskDetail[nX]:InitialValue4 			:= AF9_VINI4
				::TaskDetail[nX]:InitialValue5 			:= AF9_VINI5
				::TaskDetail[nX]:MainWBSCode 				:= AF9_EDTPAI
				::TaskDetail[nX]:ExpenseValue1 			:= AF9_VDSP1
				::TaskDetail[nX]:ExpenseValue2 			:= AF9_VDSP2
				::TaskDetail[nX]:ExpenseValue3 			:= AF9_VDSP3
				::TaskDetail[nX]:ExpenseValue4 			:= AF9_VDSP4
				::TaskDetail[nX]:ExpenseValue5 			:= AF9_VDSP5
				::TaskDetail[nX]:CompositionCode			:= AF9_COMPOS
				::TaskDetail[nX]:CurrencyConversion		:= AF9_CNVPRV
				::TaskDetail[nX]:Sendemail 				:= AF9_EMAIL
				::TaskDetail[nX]:TaskGroup 				:= AF9_GRPCOM
				::TaskDetail[nX]:TaskPriority	 			:= AF9_PRIORI
				::TaskDetail[nX]:ConversionDate 			:= AF9_DTCONV
				::TaskDetail[nX]:TaksCost1 				:= AF9_CUSTO
				::TaskDetail[nX]:TaksCost2 				:= AF9_CUSTO2
				::TaskDetail[nX]:TaksCost3 				:= AF9_CUSTO3
				::TaskDetail[nX]:TaksCost4 				:= AF9_CUSTO4
				::TaskDetail[nX]:TaksCost5 				:= AF9_CUSTO5
				::TaskDetail[nX]:StructureOrder 			:= AF9_ORDEM
				::TaskDetail[nX]:RestrictionType	 		:= AF9_RESTRI
				::TaskDetail[nX]:RestrictionDate	 		:= AF9_DTREST
				::TaskDetail[nX]:RestrictionTime 		:= AF9_HRREST
				::TaskDetail[nX]:RateEntered2	 			:= AF9->(IIf(FieldPos('AF9_TXMO2')	>0	,AF9_TXMO2,0))
				::TaskDetail[nX]:RateEntered3	 			:= AF9->(IIf(FieldPos('AF9_TXMO3')	>0	,AF9_TXMO3,0))
				::TaskDetail[nX]:RateEntered4 			:= AF9->(IIf(FieldPos('AF9_TXMO4')	>0	,AF9_TXMO4,0))
				::TaskDetail[nX]:RateEntered5	 			:= AF9->(IIf(FieldPos('AF9_TXMO5')	>0	,AF9_TXMO5,0))
				::TaskDetail[nX]:MarkupCoust 				:= AF9->(IIf(FieldPos('AF9_BDI')  	>0	,AF9_BDI,0))
				::TaskDetail[nX]:MarkupValue 				:= AF9->(IIf(FieldPos('AF9_VALBDI')>0	,AF9_VALBDI,0))
				::TaskDetail[nX]:SalesGrandTotal 		:= AF9->(IIf(FieldPos('AF9_TOTAL') >0	,AF9_TOTAL,0))
				::TaskDetail[nX]:InvoiceProductCode 	:= AF9->(IIf(FieldPos('AF9_PRODFA')>0	,AF9_PRODFA,CriaVar('B1_COD')))
				::TaskDetail[nX]:Obs 						:= ""
				::TaskDetail[nX]:Notes 						:= {}
				//ÚÄÄÄÄÄÄÄÄÄ¿
				//³ AFC_OBS ³
				//ÀÄÄÄÄÄÄÄÄÄÙ			
				cSeq 	:= StrZero(0,TamSX3("YP_SEQ")[1])
				dbSelectArea("SYP")
				dbSetOrder(1) // YP_FILIAL+YP_CHAVE+YP_SEQ
				
				While .T.
					cSeq := Soma1(cSeq)
					If MsSeek( xFilial("SYP") + AF9->AF9_CODMEM + cSeq )
						aadd(::TaskDetail[nX]:Notes,WsClassNew("NotesView"))
						nY++
						::TaskDetail[nX]:Notes[nY]:Notes := SYP->YP_TEXTO
			      Else
			      	Exit
			      Endif
		      EndDo
		Endif
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

Static Function PmsCreateStruct(cProject, cWbs, cUser, oWebservice, Target, DateInitial, DateFinal, lFiltro, lWbsFlt)

	Local cVersion := PmsAF8Ver(cProject)

	Local aArea := GetArea()
	Local aAreaAF9 := AF9->(GetArea())
	Local aAreaAFC := AFC->(GetArea())

	Local cImg := ""
	Local i := 0

	/*
	  
	Projeto de exemplo:

	Considere o projeto com a seguinte estrutura, com os usuários
	especificado entre parênteses:
	
	nível - tarefa/EDT
	 00   - bops (administrador)
	 01   -   edt 01
	 02   -     edt 02
	 03   -       edt 03
	 04   -         tarefa 01 (usuário 1)
	 01   -   edt 04
	 02   -     edt 05 (usuário 1)
	 03   -       tarefa 02

	Neste caso, para o usuário 1 serão mostradas as tarefas:

	 04   -         tarefa 01
	 02   -     edt 05
	 03   -       tarefa 02
	 
	 Perceba a diferença entre o comportamento atual e o
	 comportamento anterior: antes, o método trazia apenas
	 as tarefas de um determinado nível.
	 
	 Assim, neste caso, o usuário 1 no portal não acessava
	 nenhuma tarefa deste projeto. O acesso seria concecido
	 apenas se o usuário tivesse acesso a edt 01 ou edt 02,
	 pois elas estava no primeiro nível, o qual é o primeiro
	 nível a ser mostrado (e consequentemente, a ser
	 verificado o direito de acesso).
	
	*/

	dbSelectArea("AFC")
	AFC->(dbSetOrder(1))
	AFC->(MsSeek(xFilial("AFC") + cProject + cVersion + cWbs))
	// AFC_FILIAL + AFC_PROJET + AFC_REVISA + AFC_EDT + AFC_ORDEM

	// verificar as tarefas que o usuário têm direito	
  If PmsChkUser(AFC->AFC_PROJET, , AFC->AFC_EDT, AFC->AFC_EDTPAI, ;
		              1, "ESTRUT", AFC->AFC_REVISA, cUser)

		// se o usuário possuir direito nesta tarefa,
		// adicioná-la a lista de resultados
		
		// como queremos as EDTs de apenas um nível,
		// não procuramos no nível abaixo
		//ConOut(AFC->AFC_EDT)
	
		// define cores das imagens conform status
		cImg := PmsRtResWb("AFC")
	
		// filtro definido pela pagina HTML
		//  .: Aplica no Loop do AFC :.
		If lFiltro .And. lWbsFlt .And. (Target <> "1")
			If (Target == "2" .And. cImg <> "E4") .Or. ;
			   (Target == "3" .And. cImg == "E4")
			   
				RestArea(aAreaAFC)  
				RestArea(aAreaAF9)
				RestArea(aArea)
				Return Nil
			EndIf
		EndIf

		// Filtro definido pela pagina HTML
		// .: INTERVALO DE DATAS :.
		If lWbsFlt
			If !Empty(AFC->AFC_START)
				If (AFC_FINISH < DateInitial .OR. AFC_START > DateFinal)
				
					RestArea(aAreaAFC)  
					RestArea(aAreaAF9)
					RestArea(aArea)
					Return Nil
				EndIf
			EndIf
		EndIf

		// adiciona a tarefa a estrutura do projeto resultante
		Aadd(oWebService:ProjectStruct, WsClassNew("ProjectStructView"))
		i := Len(oWebservice:ProjectStruct)
		
		oWebService:ProjectStruct[i]:WbsJobCode := AFC->AFC_EDT
		oWebService:ProjectStruct[i]:Description := AFC->AFC_DESCRI
		oWebService:ProjectStruct[i]:WbsOrJob := cImg

		oWebService:ProjectStruct[i]:TimeDuration := AFC->AFC_HDURAC
		oWebService:ProjectStruct[i]:EstimatedInitialDate := AFC->AFC_START
		oWebService:ProjectStruct[i]:EstimatedFinalDate := AFC->AFC_FINISH
		oWebService:ProjectStruct[i]:ExecutionInitialDate := AFC->AFC_DTATUI
		oWebService:ProjectStruct[i]:ExecutionFinalDate := AFC->AFC_DTATUF

		oWebService:ProjectStruct[i]:ExecutionPercentage := ;
		       PmsPocAFC(AFC->AFC_PROJET, AFC->AFC_REVISA, AFC->AFC_EDT, Date())
		       
		oWebService:ProjectStruct[i]:OrderList := AFC->AFC_EDT  
		oWebService:ProjectStruct[i]:Level := AFC->AFC_NIVEL 
		oWebService:ProjectStruct[i]:WbsFather := AFC->AFC_EDTPAI
	Else
		dbSelectArea("AF9")
		AF9->(dbSetOrder(2))
		AF9->(MsSeek(xFilial("AF9") + cProject + cVersion + cWbs))
	
		// procura por tarefas filhas
		While !AF9->(Eof()) .And. AF9->AF9_FILIAL == xFilial("AF9") .And. ;
		                          AF9->AF9_PROJET == cProject .And. ;
		                          AF9->AF9_REVISA == cVersion .And. ;
		                          AF9->AF9_EDTPAI == cWbs
		      
			// verificar as tarefas que o usuário têm direito
			If PmsChkUser(AF9->AF9_PROJET, AF9->AF9_TAREFA, , AF9->AF9_EDTPAI, ;
			              1 , "ESTRUT", AF9->AF9_REVISA, cUser)

				cImg := PmsRtResWb("AF9")
				
				// Filtro definido pela pagina HTML
				// .: Aplica no Loop do AF9 :.
				If lFiltro .And. Target <> "1"
					If (Target == "2" .And. cImg <> "J4") .Or. ;
					   (Target == "3" .And. cImg == "J4")
						dbSelectArea("AF9")
						AF9->(dbSkip())
						Loop
					EndIf
				EndIf

				// Filtro definido pela pagina HTML
				// .: INTERVALO DE DATAS :.
				If !Empty(AF9->AF9_START)
					If (AF9_FINISH < DateInitial .Or. AF9_START > DateFinal)
						dbSelectArea("AF9")
						AF9->(dbSkip())
						Loop
					EndIf
				EndIf

				// adiciona a tarefa a estrutura do projeto resultante
				Aadd(oWebservice:ProjectStruct, WsClassNew("ProjectStructView"))
				i := Len(oWebservice:ProjectStruct)
				
				oWebservice:ProjectStruct[i]:WbsJobCode := AF9->AF9_TAREFA
				oWebservice:ProjectStruct[i]:Description := AF9->AF9_DESCRI
				oWebservice:ProjectStruct[i]:WbsOrJob := cImg //JOB - Tarefa
				oWebservice:ProjectStruct[i]:TimeDuration := AF9->AF9_HDURAC
				oWebservice:ProjectStruct[i]:EstimatedInitialDate := AF9->AF9_START
				oWebservice:ProjectStruct[i]:EstimatedFinalDate := AF9->AF9_FINISH
				oWebservice:ProjectStruct[i]:ExecutionInitialDate := AF9->AF9_DTATUI
				oWebservice:ProjectStruct[i]:ExecutionFinalDate := AF9->AF9_DTATUF

				oWebservice:ProjectStruct[i]:ExecutionPercentage := ;
					PmsPocAF9(AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA, Date())
					
				oWebservice:ProjectStruct[i]:OrderList := AF9->AF9_TAREFA
				oWebservice:ProjectStruct[i]:Level := AF9->AF9_NIVEL
				oWebservice:ProjectStruct[i]:WbsFather := AF9->AF9_EDTPAI
			EndIf
	
			AF9->(dbSkip())	
		End	
		
		// se o usuário não possuir direito nesta tarefa,
		// procura nas tarefas filhas uma tarefa elegível
		dbSelectArea("AFC")
		AFC->(dbSetOrder(2))
		AFC->(MsSeek(xFilial("AFC") + cProject + cVersion + cWbs))

		While !AFC->(Eof()) .And. AFC->AFC_FILIAL == xFilial("AFC") .And. ;
		                          AFC->AFC_PROJET == cProject .And. ;
		                          AFC->AFC_REVISA == cVersion .And. ;
		                          AFC->AFC_EDTPAI == cWbs
	
			PmsCreateStruct(AFC->AFC_PROJET, AFC->AFC_EDT, cUser, oWebservice, Target, DateInitial, DateFinal, lFiltro, lWbsFlt)
		
			AFC->(dbSkip())
		End			
	EndIf

	RestArea(aAreaAFC)  
	RestArea(aAreaAF9)
	RestArea(aArea)
Return Nil

Function WSPmsInfoUSER()
Return
WSSERVICE PmsInfoUSER            DESCRIPTION STR0019 NAMESPACE "" //"Servico de consulta de recursos ativos do Portal PMS"
	WSDATA USERCODEPORTAL         AS String
	WSDATA USERCODERESOURCE       AS String
	WSDATA USERTYPERESOURCE       AS String

	WSMETHOD GetResourceCode	DESCRIPTION STR0017 //"Metodo que Consulta codigo do Usuario x Recurso PMS."
	WSMETHOD GetResourceType	DESCRIPTION STR0018 //"Metodo que verifica se o cadastro do usuario no Portal é de admin."
ENDWSSERVICE

/*/===========================================================/*/

WSMETHOD GetResourceCode WSRECEIVE USERCODEPORTAL WSSEND USERCODERESOURCE WSSERVICE PmsInfoUSER
Local cCodSystem := ""
                                       
dbSelectArea("AI3")
dbSetOrder(1)	//AI3_FILIAL+AI3_CODUSU 
If dbSeek(xFilial("AI3")+::USERCODEPORTAL)   
	cCodSystem := AI3->AI3_USRSIS
else 
   cCodSystem := ""
EndIf                              


If !Empty(cCodSystem)
	dbSelectArea("AE8")
	dbSetOrder(3)	//AE8_FILIAL+AE8_USER
	If dbSeek(xFilial("AE8")+cCodSystem)
	   ::USERCODERESOURCE := AE8->AE8_RECURS
	else
	   ::USERCODERESOURCE := ""
	EndIf
Else
   ::USERCODERESOURCE := ""
Endif

Return .T.

WSMETHOD GetResourceType WSRECEIVE USERCODEPORTAL WSSEND USERTYPERESOURCE WSSERVICE PmsInfoUSER
               
dbSelectArea("AI3")
dbSetOrder(1)	//AI3_FILIAL+AI3_CODUSU 
If dbSeek(xFilial("AI3")+::USERCODEPORTAL)
	::USERTYPERESOURCE:=AI3->AI3_ADMIN
EndIf                                         

Return .T.
