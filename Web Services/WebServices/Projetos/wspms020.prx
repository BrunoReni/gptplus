#INCLUDE "wspms020.ch"
#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³WSPMS020  ³ Autor ³Cristiano Denardi      ³ Data ³03.08.2005  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Web Service para realizar Apontamentos de tarefas.			³±±
±±³          ³ ( Realizado sem estar posicionado na tarefa do Projeto )     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function WSPmsAnnotations()
Return                     

WSSERVICE PmsAnnotations DESCRIPTION STR0001  //"Servico que permite realizar apontamentos de tarefas de um projeto ativo."
	WSDATA UserCode				AS String
	WSDATA ProtheusUserCode		AS String
	WSDATA Header					As Array Of BrwHeader
	WSDATA HeaderPms				As Array Of BrwHeaderPms
	WSDATA HeaderType				As String
	WSDATA ResourceInitial		As String
	WSDATA ResourceFinal			As String
	WSDATA ProjectInitial		As String
	WSDATA ProjectFinal			As String
	WSDATA ProjectCode			As String
	WSDATA ProjectRevision		As String
	WSDATA TaskCode				As String
	WSDATA DbRecord				As Integer
	WSDATA OperationNumber		As Integer
	WSDATA OperationMessage		As Array of MessageView
	WSDATA AnnotationsList		As Array of AnnotationsListView
	WSDATA Annotation				As Array of AnnotationView
	WSDATA RecordCount			AS Integer
	WSDATA AnnotationHandle		As AnnotationView
	WSDATA PageLen				AS Integer OPTIONAL
	WSDATA PageFirst				AS Integer OPTIONAL
	WSDATA QryAdd					AS String OPTIONAL
	WSDATA IndexKey				AS Integer OPTIONAL
	
	WSMETHOD GetHeader				DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetHeaderPms			DESCRIPTION STR0002 //"Metodo que descreve as estruturas de retorno do servico"
	WSMETHOD GetAnnotationsList		DESCRIPTION STR0003 //"Metodo que descreve a lista de Apontamentos das tarefas dos projetos do sistema"
	WSMETHOD GetAnnotation			DESCRIPTION STR0004 //"Metodo que descreve detalhes de um determinado Apontamento"
	WSMETHOD AnnotationHandle		DESCRIPTION STR0005 //"Metodo que Inclui/Exclui/Edita um determinado Apontamento"
	WSMETHOD GetInsertAnnotation	DESCRIPTION STR0010 //"Metodo que busca a revisao de um projeto para a Inclusao de um novo Apontamento"
	WSMETHOD GetRecordCount			DESCRIPTION "Metodo que calcula a quantidade de registros existentes"
ENDWSSERVICE

/*/===========================================================/*/
WSMETHOD GetHeader WSRECEIVE HeaderType WSSEND Header WSSERVICE PmsAnnotations

::Header := PmsHeader(::HeaderType)

Return(.T.)    

/*/===========================================================/*/
WSMETHOD GetHeaderPms WSRECEIVE HeaderType WSSEND HeaderPms WSSERVICE PmsAnnotations

::HeaderPms := PmsHeader(::HeaderType)

Return(.T.)

/*/===========================================================/*/
WSMETHOD GetAnnotationsList WSSEND AnnotationsList WSRECEIVE UserCode, ProtheusUserCode, ResourceInitial, ResourceFinal, ProjectInitial, ProjectFinal,PageLen,PageFirst,QryAdd WSSERVICE PmsAnnotations
Local aArea		:= GetArea() 
Local cPrjIni		:= ""
Local cPrjFim		:= ""
Local lRetorno	:= .T.
Local nX			:= 0
Local nY			:= 0
Local cUsuario	:= ""
Local cAliasAFU	:=	"AFU"
Local cQuery		:=	""
Local nPageFirst	:= 0
Local lTop := .T.

DEFAULT ::PageLen   := 0
DEFAULT ::PageFirst := 0

If PrtChkUser(UserCode,"PmsAnnotations","GetAnnotationsList")

	dbSelectArea("AFU")
	dbSetOrder(1) //AFU_FILIAL+AFU_CTRRVS+AFU_PROJET+AFU_REVISA+AFU_TAREFA+AFU_RECURS+DTOS(AFU_DATA)+AFU_HORAI+AFU_HORAF
	
	cPrjIni := Pad( ProjectInitial, Len(AFU->AFU_PROJET) )
	cPrjFim := Pad( ProjectFinal, Len(AFU->AFU_PROJET) )
	cUsuario	:= UsrPrtErp( ::UserCode )
	nX := 0
	
	::AnnotationsList	:=	{}
	cAliasAFU	:=	"QRYAFU"
	cQuery	:=	" SELECT AFU_PROJET,AFU_REVISA,AFU_TAREFA,AFU_RECURS,AFU_DATA,AFU_HORAI,AFU_HORAF,AFU_HQUANT,AFU_DOCUME,AFU_ITEM, AFU.R_E_C_N_O_ AS RECNO "
	cQuery	+=	" FROM "+RetSqlName('AFU')+" AFU, "+RetSqlName('AF8')+" AF8 "
	cQuery	+=	" WHERE AFU_FILIAL = '"+xFilial("AFU")+"' "
	cQuery	+=	" AND AFU_CTRRVS   = '1' "
	cQuery	+=	" AND AFU_PROJET BETWEEN '"+cPrjIni+"' AND '"+cPrjFim+"' "
	cQuery	+=	" AND AFU_RECURS BETWEEN '"+Pad( ResourceInitial, Len(AFU->AFU_RECURS) )+"' AND '"+Pad( ResourceFinal, Len(AFU->AFU_RECURS) )+"' "
	cQuery	+=	" AND AF8_FILIAL = '"+xFilial("AF8")+"' "
	cQuery	+=	" AND AF8_PROJET = AFU_PROJET "
	cQuery	+=	" AND AF8_REVISA = AFU_REVISA "
	cQuery	+=	" AND AF8.D_E_L_E_T_ = ' ' "
	cQuery	+=	" AND AFU.D_E_L_E_T_ = ' ' "
	
	// adiciono a clausula WHERE para os registros de apontamentos
	cQuery	+=	" ORDER BY "+SqlOrder(AFU->(IndexKey()))
	
	cQuery	:=	ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasAFU)
	
	TcSetField(cAliasAFU,'AFU_DATA'		,'D',8,0)
	TcSetField(cAliasAFU,'AFU_HQUANT'	,'N',TamSX3('AFU_HQUANT')[1],TamSX3('AFU_HQUANT')[2])

	While !(cAliasAFU)->(Eof())
		nY++
		If ::PageFirst==0 .OR. nY >= ::PageFirst
			aadd(::AnnotationsList,WsClassNew("AnnotationsListView"))
			nX++
			::AnnotationsList[nX]:ProjectCode				:= (cAliasAFU)->AFU_PROJET
			::AnnotationsList[nX]:ProjectTask				:= (cAliasAFU)->AFU_TAREFA
			::AnnotationsList[nX]:ResourceCode				:= (cAliasAFU)->AFU_RECURS
			::AnnotationsList[nX]:Annotationdate			:= (cAliasAFU)->AFU_DATA
			::AnnotationsList[nX]:ExecutedInitialHour		:= (cAliasAFU)->AFU_HORAI
			::AnnotationsList[nX]:FinalHourExecuted		:= (cAliasAFU)->AFU_HORAF
			::AnnotationsList[nX]:NumberofHours			:= (cAliasAFU)->AFU_HQUANT
			::AnnotationsList[nX]:DocumentCode				:= (cAliasAFU)->AFU_DOCUME
			::AnnotationsList[nX]:DocumentItem				:= (cAliasAFU)->AFU_ITEM
			::AnnotationsList[nX]:DbRecord       			:= (cAliasAFU)->RECNO
			
			If nX >= ::PageLen .AND. ::PageLen <> 0
				exit
			Endif
		EndIf

		(cAliasAFU)->( dbSkip() )
	EndDo
	
	(cAliasAFU)->(dbCloseArea())

Else
	lRetorno := .F.
EndIf

RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetAnnotation WSRECEIVE UserCode, ProtheusUserCode, DbRecord, OperationNumber WSSEND Annotation WSSERVICE PmsAnnotations

Local aArea    := GetArea() 
Local lRetorno := .T.
Local lAcesso	:= .T.
Local lSegue	:= .T.
Local lFind		:= .F. 
Local nX       := 0
Local nY       := 0
Local cSeq		:= ""
Local cMsg		:= STR0011 //"PmsChkUser : Usuario sem permissao para "
Local nChk		:= 0
Local cUsuario	:= ""

If PrtChkUser(UserCode,"PmsAnnotations","GetAnnotation")
	
	Do Case
		Case OperationNumber == 3 // incluir
			cMsg += "incluir."
			nChk := 1 // Libera, pois ainda nao sabemos em que projeto e tarefa sera' incluido, a rotina automatica que validara.
		Case OperationNumber == 4 .Or. OperationNumber == 7 // alterar
			cMsg += "alterar."
			nChk := 3
		Case OperationNumber == 5 .Or. OperationNumber == 8 // excluir
			cMsg += "excluir."
			nChk := 4
		Otherwise
			cMsg += "visualizar."
			nChk := 2
	EndCase
	
	cUsuario	:= UsrPrtErp( ::UserCode )
	//cUsuario	:= ::ProtheusUserCode 
	
	dbSelectArea("AFU")
	dbSetOrder(1) //AFU_FILIAL+AFU_CTRRVS+AFU_PROJET+AFU_REVISA+AFU_TAREFA+AFU_RECURS+DTOS(AFU_DATA)+AFU_HORAI+AFU_HORAF
	lFind	:= (::DbRecord<>Nil)
	MsGoto( ::DbRecord )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Valida permissao de Manutencao de Apontamentos³
	//³ pelo Usuario do Portal. 							  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If OperationNumber<>3
		//lAcesso := PmsChkUser(AFU->AFU_PROJET,AFU->AFU_TAREFA,,"",nChk,"RECURS",AFU->AFU_REVISA,cUsuario)
	//Else
		// Inclusao, somente sera' validado pela rotina automatica.
		lAcesso := .T.
	Endif
	
	If !lAcesso
		SetSoapFault("GETANNOTATION",cMsg) // Permissao de acesso negada.
		lRetorno := .F.
	Else
		If OperationNumber == 3
			lRetorno := .T.
			lSegue   := .F.
		Endif
		If lSegue .And. lFind
		
			::Annotation := {}
				
			aadd(::Annotation,WsClassNew("AnnotationView"))
			nX++
			::Annotation[nX]:ProjectCode				:= AFU->AFU_PROJET
			::Annotation[nX]:ProjectVersion			:= AFU->AFU_REVISA
			::Annotation[nX]:ProjectTask				:= AFU->AFU_TAREFA
			::Annotation[nX]:ResourceCode				:= AFU->AFU_RECURS
			::Annotation[nX]:AnnotationDate			:= AFU->AFU_DATA
			::Annotation[nX]:ExecutedInitialHour	:= AFU->AFU_HORAI
			::Annotation[nX]:FinalHourExecuted		:= AFU->AFU_HORAF
			::Annotation[nX]:NumberOfHours			:= AFU->AFU_HQUANT
			::Annotation[nX]:SequentialNumber		:= AFU->AFU_NUMSEQ
			::Annotation[nX]:ProductCode				:= AFU->AFU_COD
			::Annotation[nX]:WarehouseCode			:= AFU->AFU_LOCAL
			::Annotation[nX]:RevisionControl			:= AFU->AFU_CTRRVS
			::Annotation[nX]:AnnotationCost1      	:= AFU->AFU_CUSTO1
			::Annotation[nX]:DbRecord		      	:= AFU->(Recno())
			::Annotation[nX]:Obs 						:= ""
			::Annotation[nX]:Notes 						:= {}
			//ÚÄÄÄÄÄÄÄÄÄ¿
			//³ AFC_OBS ³
			//ÀÄÄÄÄÄÄÄÄÄÙ
			UserFields("AFU",@::Annotation[nX]:UserFields)
	
			cSeq 	:= StrZero(0,TamSX3("YP_SEQ")[1])
			dbSelectArea("SYP")
			dbSetOrder(1) // YP_FILIAL+YP_CHAVE+YP_SEQ
			
			While .T.
				cSeq := Soma1(cSeq)
				If MsSeek( xFilial("SYP") + AFU->AFU_CODMEM + cSeq )
					aadd(::Annotation[nX]:Notes,WsClassNew("NotesView"))
					nY++
					::Annotation[nX]:Notes[nY]:Notes := SYP->YP_TEXTO
		      Else
		      	Exit
		      Endif
	      EndDo
		
		Endif
	Endif
Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD AnnotationHandle WSRECEIVE UserCode, ProtheusUserCode, AnnotationHandle, OperationNumber WSSEND OperationMessage WSSERVICE PmsAnnotations

Local aArea    := GetArea() 
Local lRetorno := .T.
Local aCpos		:= {}
Local dData		:= AnnotationHandle:AnnotationDate
Local cUsuario := ""
Local cRev 		:=	""

////////////////////////////
// Para a rotina automatica
Private lMsHelpAuto := .T. // se .t. direciona as mensagens de help para o arq. de log
Private lMsErroAuto := .F. //necessario a criacao, pois sera //atualizado quando houver erro 

/*
 .: Valores do aRotina do PMS320 :.
3 - Incluir
7 - Editar
8 - Excluir
*/

If PrtChkUser(UserCode,"PmsAnnotations","AnnotationHandle")
	dbSelectArea("AFU")
	dbSetOrder(1) //AFU_FILIAL+AFU_CTRRVS+AFU_PROJET+AFU_REVISA+AFU_TAREFA+AFU_RECURS+DTOS(AFU_DATA)+AFU_HORAI+AFU_HORAF
                                      
	If ::AnnotationHandle:DbRecord <> Nil
		MsGoTo(::AnnotationHandle:DbRecord)
	Endif		
	::OperationMessage := {}
	aadd(::OperationMessage,WsClassNew("MessageView"))	

	If  ( OperationNumber == 3 )	.Or. ::AnnotationHandle:DbRecord == AFU->(Recno())
	   
		aCpos := {}
			Aadd( aCpos, {"AFU_PROJET",PadR(AnnotationHandle:ProjectCode,TamSx3("AFU_PROJET")[1])			,Nil} )
			If Empty(AnnotationHandle:ProjectVersion)
	 			cRev := PmsRevAtu( AnnotationHandle:ProjectCode )
			Else
				cRev	:=	PadR(AnnotationHandle:ProjectVersion,TamSx3("AFU_REVISA")[1])			
			Endif
			Aadd( aCpos, {"AFU_REVISA",cRev		,Nil}	)
			Aadd( aCpos, {"AFU_TAREFA",PadR(AnnotationHandle:ProjectTask,TamSx3("AFU_TAREFA")[1])			,Nil}	)
			Aadd( aCpos, {"AFU_RECURS",PadR(AnnotationHandle:ResourceCode,TamSx3("AFU_RECURS")[1])		,Nil}	)
			Aadd( aCpos, {"AFU_DATA"  ,dData																					,Nil}	)
			Aadd( aCpos, {"AFU_HORAI" ,PadR(AnnotationHandle:ExecutedInitialHour,TamSx3("AFU_HORAI")[1]),Nil}	)
			Aadd( aCpos, {"AFU_HORAF" ,PadR(AnnotationHandle:FinalHourExecuted,TamSx3("AFU_HORAF")[1])	,Nil}	)
			Aadd( aCpos, {"AFU_NUMSEQ",PadR(AnnotationHandle:SequentialNumber,TamSx3("AFU_NUMSEQ")[1])	,Nil}	)
			Aadd( aCpos, {"AFU_COD"   ,PadR(AnnotationHandle:ProductCode,TamSx3("AFU_COD")[1])				,Nil}	)
			Aadd( aCpos, {"AFU_LOCAL" ,PadR(AnnotationHandle:WarehouseCode,TamSx3("AFU_LOCAL")[1])		,Nil}	)

			Aadd( aCpos, {"AFU_CTRRVS","1"																					,Nil}	)
			Aadd( aCpos, {"AFU_CODMEM",""																						,Nil}	)
			Aadd( aCpos, {"AFU_OBS"   ,AnnotationHandle:Obs																,Nil}	)
			Aadd( aCpos, {"AFU_CUSTO1",AnnotationHandle:AnnotationCost1												,Nil}	)
			Aadd( aCpos, {"AFU_CUSTO2",0																						,Nil}	)
			Aadd( aCpos, {"AFU_CUSTO3",0																						,Nil}	)
			Aadd( aCpos, {"AFU_CUSTO4",0																						,Nil}	)
			Aadd( aCpos, {"AFU_CUSTO5",0																						,Nil}	)
			Aadd( aCpos, {"AFU_TPREAL",""																						,Nil}	)
			Aadd( aCpos, {"AFU_DOCUME",""																						,Nil}	)
			Aadd( aCpos, {"AFU_ITEM"  ,""																						,Nil}	)
			Aadd( aCpos, {"AFU_HQUANT",AnnotationHandle:NumberOfHours												,Nil}	)

			PutUserFields("AFU",@::AnnotationHandle:UserFields,@aCpos)
							
		cUsuario	:= UsrPrtErp( ::UserCode )
	//	cUsuario	:= ::ProtheusUserCode 
		
		////////////////////
		// Rotina automatica

		PMSA320(aCpos, OperationNumber, ,cUsuario )
		If lMsErroAuto
			cMemo :=MemoRead( NomeAutoLog() )
				::OperationMessage[1]:MessageText := cMemo
				::OperationMessage[1]:MessageType := -1 // Erro
			Ferase( NomeAutoLog() )
		Else
			::OperationMessage[1]:MessageType := 1 // Sucesso

			Do Case
				Case OperationNumber == 3
					::OperationMessage[1]:MessageText := STR0006 //"Apontamento incluido com sucesso !"
				Case OperationNumber == 8
					::OperationMessage[1]:MessageText := STR0007 //"Apontamento alterado com sucesso !"
				Case OperationNumber == 9
					::OperationMessage[1]:MessageText := STR0008	 //"Apontamento excluido com sucesso !"
			EndCase
		Endif
	Else
		::OperationMessage[1]:MessageText := STR0009 //"Nao encontrado registro na base para efetuar a operacao."
		::OperationMessage[1]:MessageType := -1 // Erro
	Endif

Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)


/*/===========================================================/*/
WSMETHOD GetInsertAnnotation WSRECEIVE UserCode, ProtheusUserCode, ProjectCode, TaskCode WSSEND ProjectRevision WSSERVICE PmsAnnotations

Local aArea    := GetArea() 
Local lRetorno := .T.
Local cMsg		:= STR0012 //"PmsChkUser : Usuario sem permissao para incluir."
Local cUsuario	:= ""
Local cRev		:= ""
Local cEdtpai := ""

If PrtChkUser(UserCode,"PmsAnnotations","GetInsertAnnotation")
	
	cUsuario	:= UsrPrtErp( ::UserCode )
	//	cUsuario	:= ::ProtheusUserCode 
	If !Empty( ::ProjectCode )
		cRev := PmsRevAtu( ::ProjectCode )
	Endif
	
	// valida permissao de Inclusao de Apontamentos
	// pelo Usuario do Portal
	cEDTpai := PMSReadValue("AF9", 1, ;
	                        xFilial("AF9") + Padr(::ProjectCode, Len(AF8->AF8_PROJET)) + ;
	                        cRev + Padr(::TaskCode, Len(AF9->AF9_TAREFA)), ;
	                        "AF9_EDTPAI", "")

	If !PmsChkUser(Padr(::ProjectCode, Len(AF8->AF8_PROJET)), ;
		             Padr(::TaskCode, Len(AF9->AF9_TAREFA)),, cEDTPai,3,"RECURS", cRev,cUsuario)	
		SetSoapFault("GETINSERTANNOTATION",cMsg)
		lRetorno := .F.
	Else
		::ProjectRevision := cRev
	Endif
Else
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/===========================================================/*/
WSMETHOD GetRecordCount WSSEND RecordCount WSRECEIVE UserCode, ProtheusUserCode, ResourceInitial, ResourceFinal, ProjectInitial, ProjectFinal WSSERVICE PmsAnnotations
Local aArea		:= GetArea() 
Local cPrjIni		:= ""
Local cPrjFim		:= ""
Local lRetorno	:= .T.
Local cUsuario	:= ""
Local cAliasAFU	:=	"AFU"
Local cQuery		:=	""
Local nTotReg		:= 0
Local lTop := .T.

If PrtChkUser(UserCode,"PmsAnnotations","GetAnnotationsList")

	dbSelectArea("AFU")
	dbSetOrder(1) //AFU_FILIAL+AFU_CTRRVS+AFU_PROJET+AFU_REVISA+AFU_TAREFA+AFU_RECURS+DTOS(AFU_DATA)+AFU_HORAI+AFU_HORAF
	
	cPrjIni := Pad( ProjectInitial, Len(AFU->AFU_PROJET) )
	cPrjFim := Pad( ProjectFinal, Len(AFU->AFU_PROJET) )
	cUsuario	:= UsrPrtErp( ::UserCode )
	
	cAliasAFU	:=	"QRYAFU"
	cQuery	:=	" SELECT COUNT(*) AS RECORDCOUNT "
	cQuery	+=	" FROM "+RetSqlName('AFU')+" AFU, "+RetSqlName('AF8')+" AF8 "
	cQuery	+=	" WHERE AFU_FILIAL = '"+xFilial("AFU")+"' "
	cQuery	+=	" AND AFU_CTRRVS   = '1' "
	cQuery	+=	" AND AFU_PROJET BETWEEN '"+cPrjIni+"' AND '"+cPrjFim+"' "
	cQuery	+=	" AND AFU_RECURS BETWEEN '"+Pad( ResourceInitial, Len(AFU->AFU_RECURS) )+"' AND '"+Pad( ResourceFinal, Len(AFU->AFU_RECURS) )+"' "
	cQuery	+=	" AND AF8_FILIAL = '"+xFilial("AF8")+"' "
	cQuery	+=	" AND AF8_PROJET = AFU_PROJET "
	cQuery	+=	" AND AF8_REVISA = AFU_REVISA "
	cQuery	+=	" AND AF8.D_E_L_E_T_ = ' ' "
	cQuery	+=	" AND AFU.D_E_L_E_T_ = ' ' "
	
	cQuery	:=	ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasAFU)

	If select(cAliasAFU) >0
		nTotReg := (cAliasAFU)->RECORDCOUNT
	EndIf 
	(cAliasAFU)->(dbCloseArea())
	
	
	::RecordCount := nTotReg
Else
	lRetorno := .F.
EndIf

RestArea(aArea)
Return(lRetorno)