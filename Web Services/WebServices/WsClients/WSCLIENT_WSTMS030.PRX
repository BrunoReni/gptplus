#INCLUDE "PROTHEUS.CH"
#INCLUDE "APWEBSRV.CH"

/* ===============================================================================
WSDL Location    http://localhost/ws/TMSTRACKING.apw?WSDL
Gerado em        09/15/14 16:53:37
Observações      Código-Fonte gerado por ADVPL WSDL Client 1.120703
                 Alterações neste arquivo podem causar funcionamento incorreto
                 e serão perdidas caso o código-fonte seja gerado novamente.
=============================================================================== */

User Function _JPXMHNY ; Return  // "dummy" function - Internal Use 

/* -------------------------------------------------------------------------------
WSDL Service WSTMSTRACKING
------------------------------------------------------------------------------- */

WSCLIENT WSTMSTRACKING

	WSMETHOD NEW
	WSMETHOD INIT
	WSMETHOD RESET
	WSMETHOD CLONE
	WSMETHOD GETBRWTRACKING
	WSMETHOD GETTRACKINGVIEW

	WSDATA   _URL                      AS String
	WSDATA   _HEADOUT                  AS Array of String
	WSDATA   _COOKIES                  AS Array of String
	WSDATA   cUSERCODE                 AS string
	WSDATA   cDOCTYPE                  AS string
	WSDATA   cDOCNUMBER                AS string
	WSDATA   cDATEFROM                 AS string
	WSDATA   cDATETO                   AS string
	WSDATA   oWSGETBRWTRACKINGRESULT   AS TMSTRACKING_ARRAYOFTRACKINGDOC
	WSDATA   oWSDOCINFORMATION         AS TMSTRACKING_TRACKINGDOC
	WSDATA   oWSGETTRACKINGVIEWRESULT  AS TMSTRACKING_ARRAYOFTRACKINGVIEW

	// Estruturas mantidas por compatibilidade - NÃO USAR
	WSDATA   oWSTRACKINGDOC            AS TMSTRACKING_TRACKINGDOC

ENDWSCLIENT

WSMETHOD NEW WSCLIENT WSTMSTRACKING
::Init()
If !FindFunction("XMLCHILDEX")
	UserException("O Código-Fonte Client atual requer os executáveis do Protheus Build [7.00.131227A-20140911] ou superior. Atualize o Protheus ou gere o Código-Fonte novamente utilizando o Build atual.")
EndIf
Return Self

WSMETHOD INIT WSCLIENT WSTMSTRACKING
	::oWSGETBRWTRACKINGRESULT := TMSTRACKING_ARRAYOFTRACKINGDOC():New()
	::oWSDOCINFORMATION  := TMSTRACKING_TRACKINGDOC():New()
	::oWSGETTRACKINGVIEWRESULT := TMSTRACKING_ARRAYOFTRACKINGVIEW():New()

	// Estruturas mantidas por compatibilidade - NÃO USAR
	::oWSTRACKINGDOC     := ::oWSDOCINFORMATION
Return

WSMETHOD RESET WSCLIENT WSTMSTRACKING
	::cUSERCODE          := NIL 
	::cDOCTYPE           := NIL 
	::cDOCNUMBER         := NIL 
	::cDATEFROM          := NIL 
	::cDATETO            := NIL 
	::oWSGETBRWTRACKINGRESULT := NIL 
	::oWSDOCINFORMATION  := NIL 
	::oWSGETTRACKINGVIEWRESULT := NIL 

	// Estruturas mantidas por compatibilidade - NÃO USAR
	::oWSTRACKINGDOC     := NIL
	::Init()
Return

WSMETHOD CLONE WSCLIENT WSTMSTRACKING
Local oClone := WSTMSTRACKING():New()
	oClone:_URL          := ::_URL 
	oClone:cUSERCODE     := ::cUSERCODE
	oClone:cDOCTYPE      := ::cDOCTYPE
	oClone:cDOCNUMBER    := ::cDOCNUMBER
	oClone:cDATEFROM     := ::cDATEFROM
	oClone:cDATETO       := ::cDATETO
	oClone:oWSGETBRWTRACKINGRESULT :=  IIF(::oWSGETBRWTRACKINGRESULT = NIL , NIL ,::oWSGETBRWTRACKINGRESULT:Clone() )
	oClone:oWSDOCINFORMATION :=  IIF(::oWSDOCINFORMATION = NIL , NIL ,::oWSDOCINFORMATION:Clone() )
	oClone:oWSGETTRACKINGVIEWRESULT :=  IIF(::oWSGETTRACKINGVIEWRESULT = NIL , NIL ,::oWSGETTRACKINGVIEWRESULT:Clone() )

	// Estruturas mantidas por compatibilidade - NÃO USAR
	oClone:oWSTRACKINGDOC := oClone:oWSDOCINFORMATION
Return oClone

// WSDL Method GETBRWTRACKING of Service WSTMSTRACKING

WSMETHOD GETBRWTRACKING WSSEND cUSERCODE,cDOCTYPE,cDOCNUMBER,cDATEFROM,cDATETO WSRECEIVE oWSGETBRWTRACKINGRESULT WSCLIENT WSTMSTRACKING
Local cSoap := "" , oXmlRet

BEGIN WSMETHOD

cSoap += '<GETBRWTRACKING xmlns="http://localhost/">'
cSoap += WSSoapValue("USERCODE", ::cUSERCODE, cUSERCODE , "string", .T. , .F., 0 , NIL, .F.) 
cSoap += WSSoapValue("DOCTYPE", ::cDOCTYPE, cDOCTYPE , "string", .T. , .F., 0 , NIL, .F.) 
cSoap += WSSoapValue("DOCNUMBER", ::cDOCNUMBER, cDOCNUMBER , "string", .F. , .F., 0 , NIL, .F.) 
cSoap += WSSoapValue("DATEFROM", ::cDATEFROM, cDATEFROM , "string", .F. , .F., 0 , NIL, .F.) 
cSoap += WSSoapValue("DATETO", ::cDATETO, cDATETO , "string", .F. , .F., 0 , NIL, .F.) 
cSoap += "</GETBRWTRACKING>"

oXmlRet := SvcSoapCall(	Self,cSoap,; 
	"http://localhost/GETBRWTRACKING",; 
	"DOCUMENT","http://localhost/",,"1.031217",; 
	"http://localhost/ws/TMSTRACKING.apw")

::Init()
::oWSGETBRWTRACKINGRESULT:SoapRecv( WSAdvValue( oXmlRet,"_GETBRWTRACKINGRESPONSE:_GETBRWTRACKINGRESULT","ARRAYOFTRACKINGDOC",NIL,NIL,NIL,NIL,NIL,NIL) )

END WSMETHOD

oXmlRet := NIL
Return .T.

// WSDL Method GETTRACKINGVIEW of Service WSTMSTRACKING

WSMETHOD GETTRACKINGVIEW WSSEND cUSERCODE,cDOCTYPE,oWSDOCINFORMATION WSRECEIVE oWSGETTRACKINGVIEWRESULT WSCLIENT WSTMSTRACKING
Local cSoap := "" , oXmlRet

BEGIN WSMETHOD

cSoap += '<GETTRACKINGVIEW xmlns="http://localhost/">'
cSoap += WSSoapValue("USERCODE", ::cUSERCODE, cUSERCODE , "string", .T. , .F., 0 , NIL, .F.) 
cSoap += WSSoapValue("DOCTYPE", ::cDOCTYPE, cDOCTYPE , "string", .T. , .F., 0 , NIL, .F.) 
cSoap += WSSoapValue("DOCINFORMATION", ::oWSDOCINFORMATION, oWSDOCINFORMATION , "TRACKINGDOC", .T. , .F., 0 , NIL, .F.) 
cSoap += "</GETTRACKINGVIEW>"

oXmlRet := SvcSoapCall(	Self,cSoap,; 
	"http://localhost/GETTRACKINGVIEW",; 
	"DOCUMENT","http://localhost/",,"1.031217",; 
	"http://localhost/ws/TMSTRACKING.apw")

::Init()
::oWSGETTRACKINGVIEWRESULT:SoapRecv( WSAdvValue( oXmlRet,"_GETTRACKINGVIEWRESPONSE:_GETTRACKINGVIEWRESULT","ARRAYOFTRACKINGVIEW",NIL,NIL,NIL,NIL,NIL,NIL) )

END WSMETHOD

oXmlRet := NIL
Return .T.


// WSDL Data Structure ARRAYOFTRACKINGDOC

WSSTRUCT TMSTRACKING_ARRAYOFTRACKINGDOC
	WSDATA   oWSTRACKINGDOC            AS TMSTRACKING_TRACKINGDOC OPTIONAL
	WSMETHOD NEW
	WSMETHOD INIT
	WSMETHOD CLONE
	WSMETHOD SOAPRECV
ENDWSSTRUCT

WSMETHOD NEW WSCLIENT TMSTRACKING_ARRAYOFTRACKINGDOC
	::Init()
Return Self

WSMETHOD INIT WSCLIENT TMSTRACKING_ARRAYOFTRACKINGDOC
	::oWSTRACKINGDOC       := {} // Array Of  TMSTRACKING_TRACKINGDOC():New()
Return

WSMETHOD CLONE WSCLIENT TMSTRACKING_ARRAYOFTRACKINGDOC
	Local oClone := TMSTRACKING_ARRAYOFTRACKINGDOC():NEW()
	oClone:oWSTRACKINGDOC := NIL
	If ::oWSTRACKINGDOC <> NIL 
		oClone:oWSTRACKINGDOC := {}
		aEval( ::oWSTRACKINGDOC , { |x| aadd( oClone:oWSTRACKINGDOC , x:Clone() ) } )
	Endif 
Return oClone

WSMETHOD SOAPRECV WSSEND oResponse WSCLIENT TMSTRACKING_ARRAYOFTRACKINGDOC
	Local nRElem1, oNodes1, nTElem1
	::Init()
	If oResponse = NIL ; Return ; Endif 
	oNodes1 :=  WSAdvValue( oResponse,"_TRACKINGDOC","TRACKINGDOC",{},NIL,.T.,"O",NIL,NIL) 
	nTElem1 := len(oNodes1)
	For nRElem1 := 1 to nTElem1 
		If !WSIsNilNode( oNodes1[nRElem1] )
			aadd(::oWSTRACKINGDOC , TMSTRACKING_TRACKINGDOC():New() )
			::oWSTRACKINGDOC[len(::oWSTRACKINGDOC)]:SoapRecv(oNodes1[nRElem1])
		Endif
	Next
Return

// WSDL Data Structure TRACKINGDOC

WSSTRUCT TMSTRACKING_TRACKINGDOC
	WSDATA   cTDBRANCH                 AS string
	WSDATA   dTDDATE                   AS date OPTIONAL
	WSDATA   cTDDOCNUMBER              AS string
	WSDATA   cTDDOCSERIES              AS string
	WSDATA   cTDSTATUS                 AS string OPTIONAL
	WSDATA   cTDTIME                   AS string OPTIONAL
	WSMETHOD NEW
	WSMETHOD INIT
	WSMETHOD CLONE
	WSMETHOD SOAPSEND
	WSMETHOD SOAPRECV
ENDWSSTRUCT

WSMETHOD NEW WSCLIENT TMSTRACKING_TRACKINGDOC
	::Init()
Return Self

WSMETHOD INIT WSCLIENT TMSTRACKING_TRACKINGDOC
Return

WSMETHOD CLONE WSCLIENT TMSTRACKING_TRACKINGDOC
	Local oClone := TMSTRACKING_TRACKINGDOC():NEW()
	oClone:cTDBRANCH            := ::cTDBRANCH
	oClone:dTDDATE              := ::dTDDATE
	oClone:cTDDOCNUMBER         := ::cTDDOCNUMBER
	oClone:cTDDOCSERIES         := ::cTDDOCSERIES
	oClone:cTDSTATUS            := ::cTDSTATUS
	oClone:cTDTIME              := ::cTDTIME
Return oClone

WSMETHOD SOAPSEND WSCLIENT TMSTRACKING_TRACKINGDOC
	Local cSoap := ""
	cSoap += WSSoapValue("TDBRANCH", ::cTDBRANCH, ::cTDBRANCH , "string", .T. , .F., 0 , NIL, .F.) 
	cSoap += WSSoapValue("TDDATE", ::dTDDATE, ::dTDDATE , "date", .F. , .F., 0 , NIL, .F.) 
	cSoap += WSSoapValue("TDDOCNUMBER", ::cTDDOCNUMBER, ::cTDDOCNUMBER , "string", .T. , .F., 0 , NIL, .F.) 
	cSoap += WSSoapValue("TDDOCSERIES", ::cTDDOCSERIES, ::cTDDOCSERIES , "string", .T. , .F., 0 , NIL, .F.) 
	cSoap += WSSoapValue("TDSTATUS", ::cTDSTATUS, ::cTDSTATUS , "string", .F. , .F., 0 , NIL, .F.) 
	cSoap += WSSoapValue("TDTIME", ::cTDTIME, ::cTDTIME , "string", .F. , .F., 0 , NIL, .F.) 
Return cSoap

WSMETHOD SOAPRECV WSSEND oResponse WSCLIENT TMSTRACKING_TRACKINGDOC
	::Init()
	If oResponse = NIL ; Return ; Endif 
	::cTDBRANCH          :=  WSAdvValue( oResponse,"_TDBRANCH","string",NIL,"Property cTDBRANCH as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
	::dTDDATE            :=  WSAdvValue( oResponse,"_TDDATE","date",NIL,NIL,NIL,"D",NIL,NIL) 
	::cTDDOCNUMBER       :=  WSAdvValue( oResponse,"_TDDOCNUMBER","string",NIL,"Property cTDDOCNUMBER as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
	::cTDDOCSERIES       :=  WSAdvValue( oResponse,"_TDDOCSERIES","string",NIL,"Property cTDDOCSERIES as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
	::cTDSTATUS          :=  WSAdvValue( oResponse,"_TDSTATUS","string",NIL,NIL,NIL,"S",NIL,NIL) 
	::cTDTIME            :=  WSAdvValue( oResponse,"_TDTIME","string",NIL,NIL,NIL,"S",NIL,NIL) 
Return

// WSDL Data Structure ARRAYOFTRACKINGVIEW

WSSTRUCT TMSTRACKING_ARRAYOFTRACKINGVIEW
	WSDATA   oWSTRACKINGVIEW           AS TMSTRACKING_TRACKINGVIEW OPTIONAL
	WSMETHOD NEW
	WSMETHOD INIT
	WSMETHOD CLONE
	WSMETHOD SOAPRECV
ENDWSSTRUCT

WSMETHOD NEW WSCLIENT TMSTRACKING_ARRAYOFTRACKINGVIEW
	::Init()
Return Self

WSMETHOD INIT WSCLIENT TMSTRACKING_ARRAYOFTRACKINGVIEW
	::oWSTRACKINGVIEW      := {} // Array Of  TMSTRACKING_TRACKINGVIEW():New()
Return

WSMETHOD CLONE WSCLIENT TMSTRACKING_ARRAYOFTRACKINGVIEW
	Local oClone := TMSTRACKING_ARRAYOFTRACKINGVIEW():NEW()
	oClone:oWSTRACKINGVIEW := NIL
	If ::oWSTRACKINGVIEW <> NIL 
		oClone:oWSTRACKINGVIEW := {}
		aEval( ::oWSTRACKINGVIEW , { |x| aadd( oClone:oWSTRACKINGVIEW , x:Clone() ) } )
	Endif 
Return oClone

WSMETHOD SOAPRECV WSSEND oResponse WSCLIENT TMSTRACKING_ARRAYOFTRACKINGVIEW
	Local nRElem1, oNodes1, nTElem1
	::Init()
	If oResponse = NIL ; Return ; Endif 
	oNodes1 :=  WSAdvValue( oResponse,"_TRACKINGVIEW","TRACKINGVIEW",{},NIL,.T.,"O",NIL,NIL) 
	nTElem1 := len(oNodes1)
	For nRElem1 := 1 to nTElem1 
		If !WSIsNilNode( oNodes1[nRElem1] )
			aadd(::oWSTRACKINGVIEW , TMSTRACKING_TRACKINGVIEW():New() )
			::oWSTRACKINGVIEW[len(::oWSTRACKINGVIEW)]:SoapRecv(oNodes1[nRElem1])
		Endif
	Next
Return

// WSDL Data Structure TRACKINGVIEW

WSSTRUCT TMSTRACKING_TRACKINGVIEW
	WSDATA   cTVBRANCH                 AS string
	WSDATA   dTVDATE                   AS date
	WSDATA   cTVOPEROCCUR              AS string
	WSDATA   cTVTIME                   AS string
	WSDATA   cTVTRANSSERV              AS string
	WSDATA   cTVTRIP                   AS string
	WSMETHOD NEW
	WSMETHOD INIT
	WSMETHOD CLONE
	WSMETHOD SOAPRECV
ENDWSSTRUCT

WSMETHOD NEW WSCLIENT TMSTRACKING_TRACKINGVIEW
	::Init()
Return Self

WSMETHOD INIT WSCLIENT TMSTRACKING_TRACKINGVIEW
Return

WSMETHOD CLONE WSCLIENT TMSTRACKING_TRACKINGVIEW
	Local oClone := TMSTRACKING_TRACKINGVIEW():NEW()
	oClone:cTVBRANCH            := ::cTVBRANCH
	oClone:dTVDATE              := ::dTVDATE
	oClone:cTVOPEROCCUR         := ::cTVOPEROCCUR
	oClone:cTVTIME              := ::cTVTIME
	oClone:cTVTRANSSERV         := ::cTVTRANSSERV
	oClone:cTVTRIP              := ::cTVTRIP
Return oClone

WSMETHOD SOAPRECV WSSEND oResponse WSCLIENT TMSTRACKING_TRACKINGVIEW
	::Init()
	If oResponse = NIL ; Return ; Endif 
	::cTVBRANCH          :=  WSAdvValue( oResponse,"_TVBRANCH","string",NIL,"Property cTVBRANCH as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
	::dTVDATE            :=  WSAdvValue( oResponse,"_TVDATE","date",NIL,"Property dTVDATE as s:date on SOAP Response not found.",NIL,"D",NIL,NIL) 
	::cTVOPEROCCUR       :=  WSAdvValue( oResponse,"_TVOPEROCCUR","string",NIL,"Property cTVOPEROCCUR as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
	::cTVTIME            :=  WSAdvValue( oResponse,"_TVTIME","string",NIL,"Property cTVTIME as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
	::cTVTRANSSERV       :=  WSAdvValue( oResponse,"_TVTRANSSERV","string",NIL,"Property cTVTRANSSERV as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
	::cTVTRIP            :=  WSAdvValue( oResponse,"_TVTRIP","string",NIL,"Property cTVTRIP as s:string on SOAP Response not found.",NIL,"S",NIL,NIL) 
Return


