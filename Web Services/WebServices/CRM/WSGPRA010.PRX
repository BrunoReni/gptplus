#INCLUDE "PROTHEUS.CH"
#INCLUDE "APWEBSRV.CH"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Tipos de Questao³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
#DEFINE UNICA_ESCOLHA 		"1"		//Unica Escolha
#DEFINE MULTIPLA_ESCOLHA 	"2"		//Multipla Escolha
#DEFINE DISSERTATIVA 		"3"		//Dissertativa

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Tipos de exibicao da alternativa³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
#DEFINE SEQUENCIAL 			"1"		//Sequencial
#DEFINE COLUNAS 				"2"		//Colunas
#DEFINE LINHAS 				"3"		//Linhas

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³WSGPRA010 ºAutor  ³Luiz Felipe Couto    º Data ³  23/02/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Este fonte possui as funcoes utilizadas para inclusao,      º±±
±±º          ³ alteracao, exclusao e busca de Pesquisas.                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³                                                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³SIGAGPR     						                           º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±ºAnalista  ³ Data/Bops/Ver ³Manutencao Efetuada                      	   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao do WebServices de Pesquisa³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSERVICE GPRResearch DESCRIPTION "" //NAMESPACE "http://.apw"
	WSDATA UserCode			AS String									//Codigo do Usuario (seguranca WS)
	WSDATA QueryAddWhere	AS String OPTIONAL							//Filtro
	WSDATA PageLen			AS Integer OPTIONAL							//Limite de registros por Pagina (paginacao)
	WSDATA PageFirst		AS Integer OPTIONAL							//Primeira Pagina (paginacao)
	WSDATA IndexKey 		AS String OPTIONAL							//Ordenacao
	WSDATA ResearchCode		AS String									//Codigo da Pesquisa
	WSDATA ListOfResearch 	AS Array Of ResearchView					//Lista de Pesquisas
	WSDATA Research			AS ResearchView								//Pesquisa

	WSMETHOD BrwResearch DESCRIPTION ""
	WSMETHOD GetResearch DESCRIPTION ""
	WSMETHOD PutResearchResult DESCRIPTION ""
ENDWSSERVICE

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³BrwResearcºAutor  ³Luiz Felipe Couto    º Data ³  23/02/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Retorna as Pesquisas cadastradas no sistema.                º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ ExpC1 : Codigo do Usuario WS                                º±±
±±º          ³ ExpC2 : Filtro                                              º±±
±±º          ³ ExpN3 : Limite de registros por pagina (paginacao)          º±±
±±º          ³ ExpN4 : Primeira pagina (paginacao)                         º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³SIGAGPR     						                           º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±ºAnalista  ³ Data/Bops/Ver ³Manutencao Efetuada                      	   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
WSMETHOD BrwResearch WSRECEIVE UserCode, QueryAddWhere, PageLen, PageFirst, IndexKey WSSEND ListOfResearch WSSERVICE GPRResearch

Local lRetorno 				:= .T.					//Retorno da Funcao
Local aArea					:= GetArea()			//Area atual
Local cAliasSKC 			:= "SKC"				//Alias da tabela SKC
Local cQuery 				:= ""					//String para armazenagem da Query
Local aStruSKC 				:= {}					//Estrutura da tabela SKC
Local nI					:= 0					//Variavel de apoio
Local nJ					:= 0					//Variavel de apoio

SKC->( DbSetOrder( 1 ) )

DEFAULT ::QueryAddWhere 	:= ""					//Filtro
DEFAULT ::PageLen 			:= 0					//Limite de registros por pagina (paginacao)
DEFAULT ::PageFirst 		:= 0					//Primeira pagina (paginacao)
DEFAULT ::IndexKey 			:= SKC->( IndexKey() )	//Ordenacao

If ::UserCode == "MSALPHA"
	aStruSKC 	:= SKC->( DbStruct() )
	cAliasSKC 	:= GetNextAlias()
	
	cQuery 	:= "SELECT * "
	cQuery 	+= "FROM " + RetSqlName( "SKC" ) + " SKC "
	cQuery 	+= "WHERE "
	cQuery 	+= "SKC.KC_FILIAL = '" + xFilial( "SKC" ) + "' AND "
	cQuery 	+= "SKC.D_E_L_E_T_ = ' ' "
	cQuery 	:= WsQueryAdd( cQuery, ::QueryAddWhere )
	cQuery 	+= "ORDER BY " + WsSqlOrder( ::IndexKey )
	
	cQuery 	:= ChangeQuery( cQuery )
	
	DbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasSKC, .T., .T. )
	
	For nI := 1 To Len( aStruSKC )
		If aStruSKC[nI][2] <> "C" .AND. aStruSKC[nI][2] <> "M"
			TcSetField( cAliasSKC, aStruSKC[nI][1], aStruSKC[nI][2], aStruSKC[nI][3], aStruSKC[nI][4] )
		EndIf
	Next nI
	
	nI := 0
	
	While !( cAliasSKC )->( EOF() )
		nI++
	
		If ::PageFirst == 0 .OR. nI >= ::PageFirst
			If nJ == 0
				::ListOfResearch := {}
			EndIf
			
			aAdd( ::ListOfResearch, WsClassNew( "ResearchView" ) )

			nJ++

			GetResearch( @::ListOfResearch[nJ], cAliasSKC )
		EndIf
	
		If nJ >= ::PageLen .And. ::PageLen <> 0
			Exit
		EndIf
		
		( cAliasSKC )->( DbSkip() )
	End
	
	( cAliasSKC )->( DbCloseArea() )
Else
	lRetorno := .F.
	SetSoapFault( "BRWRESEARCH", "UserCode invalido." )
EndIf

RestArea( aArea )

Return lRetorno

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GetResearcºAutor  ³Luiz Felipe Couto    º Data ³  23/02/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Retorna uma pesquisa cadastrada no sistema.                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ ExpC1 : Codigo do Usuario WS                                º±±
±±º          ³ ExpC2 : Codigo da Pesquisa                                  º±±
±±º          ³ ExpC3 : Filtro                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³SIGAGPR     						                           º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±ºAnalista  ³ Data/Bops/Ver ³Manutencao Efetuada                      	   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºMichel M. |08/05/07|8.11  |Bops:125285 - Corrigido a montagem do objeto º±±
±±º          |        |      |Questionary para agrupar em Grupo e SubGrupo º±±   
±±º          |        |      |as questoes em uma pesquisa.                 º±±
±±º          |        |      |                                             º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
WSMETHOD GetResearch WSRECEIVE UserCode, ResearchCode, QueryAddWhere WSSEND Research WSSERVICE GPRResearch

Local lRetorno 				:= .T.			//Retorno da Funcao
Local aArea					:= GetArea()	//Area atual
Local cAliasSKC				:= "SKC"		//Alias da tabela SKC
Local cAliasSKD				:= "SKD"		//Alias da tabela SKD
Local cAliasSKE				:= "SKE"		//Alias da tabela SKE
Local cAliasSKF				:= "SKF"		//Alias da tabela SKF
Local cAliasSKG				:= "SKG"		//Alias da tabela SKG
Local cAliasSKH				:= "SKH"		//Alias da tabela SKH
Local cAliasSKI				:= "SKI"		//Alias da tabela SKI
Local cAliasSKP				:= "SKP"		//Alias da tabela SKP
Local cAliasSKR				:= "SKR"		//Alias da tabela SKR
Local nLenQuest				:= 0			//Ultima posicao do array de Questionario
Local nLenGroup				:= 0			//Ultima posicao do array de Grupo
Local nLenQst				:= 0			//Ultima posicao do array de Questao
Local nLenOption			:= 0			//Ultima posicao do array de Opcao
Local nLenAlt				:= 0			//Ultima posicao do array de Alternativa
Local nLenSubGroup			:= 0			//Ultima posicao do array de SubGrupo
Local nPosSubGroup			:= 0			//Posicao no array do SubGrupo
Local oObjTmp				:= 0			//Objeto de apoio (temporario)

DEFAULT ::QueryAddWhere 	:= ""			//Filtro

If ::UserCode == "MSALPHA"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Tabelas:                     ³
	//³SKC - Pesquisa               ³
	//³SKD - Questionario x Pesquisa³
	//³SKE - Grupo                  ³
	//³SKF - Grupo x SubGrupo       ³
	//³SKG - Questao                ³
	//³SKH - Alternativa            ³
	//³SKI - Linha e Coluna         ³
	//³SKP - Questionario           ³
	//³SKR - Questao x Questionario ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Busca Pesquisa³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	( cAliasSKC )->( DbSetOrder( 1 ) )
	
	If ( cAliasSKC )->( DbSeek( xFilial( "SKC" ) + ::ResearchCode ) )
		::Research := WsClassNew( "ResearchView" )
		
		GetResearch( @::Research, cAliasSKC )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Busca todos os Questionarios da Pesquisa³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		( cAliasSKD )->( DbSetOrder( 1 ) )
	
		If ( cAliasSKD )->( DbSeek( xFilial( "SKD" ) + ( cAliasSKC )->KC_CODPQ ) )
			::Research:ListOfQuestionary := {}
		
			While !( cAliasSKD )->( EOF() ) .AND. ( cAliasSKD )->KD_FILIAL == xFilial( "SKD" ) .AND. ;
				( cAliasSKD )->KD_CODPQ == ( cAliasSKC )->KC_CODPQ
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Busca Dados do Questionario³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				( cAliasSKP )->( DbSetOrder( 1 ) )
				
				If ( cAliasSKP )->( DbSeek( xFilial( "SKP" ) + ( cAliasSKD )->KD_CODQT ) )
					aAdd( ::Research:ListOfQuestionary, WsClassNew( "QuestionaryView" ) )
					nLenQuest := Len( ::Research:ListOfQuestionary )
					
					GetQuest( @::Research:ListOfQuestionary[nLenQuest], cAliasSKP )
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Busca as Questoes do Questionario³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				( cAliasSKR )->( DbSetOrder( 1 ) )
				
				If ( cAliasSKR )->( DbSeek( xFilial( "SKR" ) + ( cAliasSKD )->KD_CODQT ) )
					::Research:ListOfQuestionary[nLenQuest]:ListOfGroup 	:= {}
					::Research:ListOfQuestionary[nLenQuest]:ListOfQuestion 	:= {}
					::Research:ListOfQuestionary[nLenQuest]:ListOfItem 		:= {}

					While !( cAliasSKR )->( EOF() ) .AND. ( cAliasSKR )->KR_FILIAL == xFilial( "SKR" ) .AND. ;
						( cAliasSKR )->KR_CODQUE == ( cAliasSKD )->KD_CODQT
						
						aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfItem, ( cAliasSKR )->KR_ITEM )
						
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Tipos de Busca:                                       ³
						//³1 - Todas as questoes do Grupo                        ³
						//³2 - Todas as questoes do Grupo e SubGrupo             ³
						//|3 - Uma questao do Grupo                              |
						//³4 - Uma questao do Grupo e do SubGrupo                |
						//|5 - Todas as questoes independente do Grupo e SubGrupo³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						Do Case
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Busca todas as Questoes do Grupo³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							Case !Empty( ( cAliasSKR )->KR_CODGRU ) .AND. ;
								Empty( ( cAliasSKR )->KR_CODSGR ) .AND. ;
								Empty( ( cAliasSKR )->KR_CODQST )
								
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados do Grupo³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKE )->( DbSetOrder( 1 ) )
		
								If ( cAliasSKE )->( DbSeek( xFilial( "SKE" ) + ( cAliasSKR )->KR_CODGRU ) )
									aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup, WsClassNew( "GroupView" ) )
									nLenGroup := Len( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup )
									
									GetGroup( @::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup], cAliasSKE, cAliasSKR )

									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Busca dados do SubGrupo³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									( cAliasSKF )->( DbSetOrder( 1 ) )
									
									If ( cAliasSKF )->( DbSeek( xFilial( "SKF" ) + ( cAliasSKE )->KE_CODGRP ) )
										::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup := {}
										
										While !( cAliasSKF )->( EOF() ) .AND. ;
											( cAliasSKF )->KF_FILIAL == xFilial( "SKF" ) .AND. ;
											( cAliasSKF )->KF_CODGRP == ( cAliasSKE )->KE_CODGRP
											
											aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup, WsClassNew( "SubGroupView" ) )
											nLenSubGroup := Len( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup )
											
											GetSubGroup( @::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup], cAliasSKF, cAliasSKR )
											
											( cAliasSKF )->( DbSkip() )
										End
									EndIf

									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Busca dados da questao³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									( cAliasSKG )->( DbSetOrder( 2 ) )
									
									If ( cAliasSKG )->( DbSeek( xFilial( "SKG" ) + ( cAliasSKR )->KR_CODGRU ) )
										While !( cAliasSKG )->( EOF() ) .AND. ;
											( cAliasSKG )->KG_FILIAL == xFilial( "SKG" ) .AND. ;
											( cAliasSKG )->KG_CODGRP == ( cAliasSKR )->KR_CODGRU
											
											If Empty( ( cAliasSKG )->KG_CODSUBG )
												oObjTmp := ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]
												
												If Empty( oObjTmp:ListOfQuestion )
													oObjTmp:ListOfQuestion := {}
												EndIf
											Else
												nPosSubGroup := aScan( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup, { |x| x:Code == ( cAliasSKG )->KG_CODSUBG } )
												
												If nPosSubGroup > 0
													oObjTmp := ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nPosSubGroup]
													
													If Empty( oObjTmp:ListOfQuestion )
														oObjTmp:ListOfQuestion := {}
													EndIf
												EndIf
											EndIf
											
											aAdd( oObjTmp:ListOfQuestion, WsClassNew( "QuestionView" ) )
											nLenQst := Len( oObjTmp:ListOfQuestion )
											
											GetQuestion( @oObjTmp:ListOfQuestion[nLenQst], cAliasSKG, cAliasSKE, cAliasSKF, cAliasSKR )
			
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³Multipla Escolha em Linhas ou Colunas³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											If ( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA .AND. ;
												( ( cAliasSKG )->KG_TIPEXIB == LINHAS .OR. ;
												( cAliasSKG )->KG_TIPEXIB == COLUNAS )
												
												//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
												//³Linhas ou Colunas³
												//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
												( cAliasSKI )->( DbSetOrder( 1 ) )
												
												If ( cAliasSKI )->( DbSeek( xFilial( "SKI" ) + ;
													( cAliasSKG )->KG_CODQST ) )
													
													oObjTmp:ListOfQuestion[nLenQst]:ListOfOption := {}
													
													While !( cAliasSKI )->( EOF() ) .AND. ;
														( cAliasSKI )->KI_FILIAL == xFilial( "SKI" ) .AND. ;
														( cAliasSKI )->KI_CODQST == ( cAliasSKG )->KG_CODQST
														
														aAdd( oObjTmp:ListOfQuestion[nLenQst]:ListOfOption, WsClassNew( "OptionView" ) )
														nLenOption := Len( oObjTmp:ListOfQuestion[nLenQst]:ListOfOption )
														
														GetOption( @oObjTmp:ListOfQuestion[nLenQst]:ListOfOption[nLenOption], cAliasSKI )
														
														( cAliasSKI )->( DbSkip() )
													End
												EndIf
											EndIf
										
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³Unica Escolha e Multipla Escolha³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											If ( cAliasSKG )->KG_TIPOQST == UNICA_ESCOLHA .OR. ;
												( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA

												//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
												//³Busca Alternativas³
												//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
												( cAliasSKH )->( DbSetOrder( 1 ) )
												
												If ( cAliasSKH )->( DbSeek( xFilial( "SKH" ) + ( cAliasSKG )->KG_CODQST ) )
													oObjTmp:ListOfQuestion[nLenQst]:ListOfAlternative := {}
													
													While !( cAliasSKH )->( EOF() ) .AND. ;
														( cAliasSKH )->KH_FILIAL == xFilial( "SKH" ) .AND. ;
														( cAliasSKH )->KH_CODQST == ( cAliasSKG )->KG_CODQST
														
														aAdd( oObjTmp:ListOfQuestion[nLenQst]:ListOfAlternative, WsClassNew( "AlternativeView" ) )
														nLenAlt := Len( oObjTmp:ListOfQuestion[nLenQst]:ListOfAlternative )
														
														GetAlternative( @oObjTmp:ListOfQuestion[nLenQst]:ListOfAlternative[nLenAlt], cAliasSKH )
														
														( cAliasSKH )->( DbSkip() )
													End
												EndIf
											EndIf

											( cAliasSKG )->( DbSkip() )
										End
									EndIf
								EndIf
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Busca todas as questoes do Grupo e SubGrupo³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							Case !Empty( ( cAliasSKR )->KR_CODGRU ) .AND. !Empty( ( cAliasSKR )->KR_CODSGR ) .AND. ;
								Empty( ( cAliasSKR )->KR_CODQST )
		
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados do Grupo³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKE )->( DbSetOrder( 1 ) )
		
								If ( cAliasSKE )->( DbSeek( xFilial( "SKE" ) + ( cAliasSKR )->KR_CODGRU ) )
									aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup, WsClassNew( "GroupView" ) )
									nLenGroup := Len( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup )
									
									GetGroup( @::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup], cAliasSKE, cAliasSKR )
								EndIf
		
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados do SubGrupo³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKF )->( DbSetOrder( 1 ) )
		
								If ( cAliasSKF )->( DbSeek( xFilial( "SKF" ) + ( cAliasSKR )->KR_CODGRU + ( cAliasSKR )->KR_CODSGR ) )
									::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup := {}
									
									aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup, WsClassNew( "SubGroupView" ) )
									nLenSubGroup := Len( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup )
									
									GetSubGroup( @::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup], cAliasSKF, cAliasSKR )
									
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Busca dados da questao³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									( cAliasSKG )->( DbSetOrder( 2 ) )
									
									If ( cAliasSKG )->( DbSeek( xFilial( "SKG" ) + ( cAliasSKF )->KF_CODGRP + ( cAliasSKF )->KF_CODSUBG ) )
										::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup]:ListOfQuestion := {}
										oObjTmp := ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup]:ListOfQuestion
									
										While !( cAliasSKG )->( EOF() ) .AND. ;
											( cAliasSKG )->KG_FILIAL == xFilial( "SKG" ) .AND. ;
											( cAliasSKG )->KG_CODSUBG == ( cAliasSKF )->KF_CODSUBG
											
											aAdd( oObjTmp, WsClassNew( "QuestionView" ) )
											nLenQst := Len( oObjTmp )
											
											GetQuestion( @oObjTmp[nLenQst], cAliasSKG, cAliasSKE, cAliasSKF, cAliasSKR )
			
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³Multipla Escolha em Linhas ou Colunas³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											If ( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA .AND. ;
												( ( cAliasSKG )->KG_TIPEXIB == LINHAS .OR. ;
												( cAliasSKG )->KG_TIPEXIB == COLUNAS )
												
												//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
												//³Linhas ou Colunas³
												//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
												( cAliasSKI )->( DbSetOrder( 1 ) )
												
												If ( cAliasSKI )->( DbSeek( xFilial( "SKI" ) + ;
													( cAliasSKG )->KG_CODQST ) )
													
													oObjTmp[nLenQst]:ListOfOption := {}
													
													While !( cAliasSKI )->( EOF() ) .AND. ;
														( cAliasSKI )->KI_FILIAL == xFilial( "SKI" ) .AND. ;
														( cAliasSKI )->KI_CODQST == ( cAliasSKG )->KG_CODQST
														
														aAdd( oObjTmp[nLenQst]:ListOfOption, WsClassNew( "OptionView" ) )
														nLenOption := Len( oObjTmp[nLenQst]:ListOfOption )
														
														GetOption( @oObjTmp[nLenQst]:ListOfOption[nLenOption], cAliasSKI )
														
														( cAliasSKI )->( DbSkip() )
													End
												EndIf
											EndIf
										
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³Busca Alternativas³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³Unica Escolha e Multipla Escolha³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											If ( cAliasSKG )->KG_TIPOQST == UNICA_ESCOLHA .OR. ;
												( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA

												( cAliasSKH )->( DbSetOrder( 1 ) )
												
												If ( cAliasSKH )->( DbSeek( xFilial( "SKH" ) + ( cAliasSKG )->KG_CODQST ) )
													oObjTmp[nLenQst]:ListOfAlternative := {}
													
													While !( cAliasSKH )->( EOF() ) .AND. ;
														( cAliasSKH )->KH_FILIAL == xFilial( "SKH" ) .AND. ;
														( cAliasSKH )->KH_CODQST == ( cAliasSKG )->KG_CODQST
														
														aAdd( oObjTmp[nLenQst]:ListOfAlternative, WsClassNew( "AlternativeView" ) )
														nLenAlt := Len( oObjTmp[nLenQst]:ListOfAlternative )
														
														GetAlternative( @oObjTmp[nLenQst]:ListOfAlternative[nLenAlt], cAliasSKH )
														
														( cAliasSKH )->( DbSkip() )
													End
												EndIf
											EndIf

											( cAliasSKG )->( DbSkip() )
										End
									EndIf
								EndIf
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Busca a questao do Grupo³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							Case !Empty( ( cAliasSKR )->KR_CODGRU ) .AND. Empty( ( cAliasSKR )->KR_CODSGR ) .AND. ;
								!Empty( ( cAliasSKR )->KR_CODQST )
		
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados do Grupo³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKE )->( DbSetOrder( 1 ) )
		
								If ( cAliasSKE )->( DbSeek( xFilial( "SKE" ) + ( cAliasSKR )->KR_CODGRU ) )
									aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup, WsClassNew( "GroupView" ) )
									nLenGroup := Len( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup )
									
									GetGroup( @::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup], cAliasSKE, cAliasSKR )
								EndIf
		
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados da questao³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKG )->( DbSetOrder( 1 ) )
								
								If ( cAliasSKG )->( DbSeek( xFilial( "SKG" ) + ( cAliasSKR )->KR_CODQST ) )
									::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfQuestion := {}
									oObjTmp := ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfQuestion
								
									aAdd( oObjTmp, WsClassNew( "QuestionView" ) )
									nLenQst := Len( oObjTmp )
									
									GetQuestion( @oObjTmp[nLenQst], cAliasSKG, cAliasSKE, cAliasSKF, cAliasSKR )
	
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Multipla Escolha em Linhas ou Colunas³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									If ( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA .AND. ;
										( ( cAliasSKG )->KG_TIPEXIB == LINHAS .OR. ;
										( cAliasSKG )->KG_TIPEXIB == COLUNAS )
										
										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
										//³Linhas ou Colunas³
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
										( cAliasSKI )->( DbSetOrder( 1 ) )
										
										If ( cAliasSKI )->( DbSeek( xFilial( "SKI" ) + ;
											( cAliasSKG )->KG_CODQST ) )
											
											oObjTmp[nLenQst]:ListOfOption := {}
											
											While !( cAliasSKI )->( EOF() ) .AND. ;
												( cAliasSKI )->KI_FILIAL == xFilial( "SKI" ) .AND. ;
												( cAliasSKI )->KI_CODQST == ( cAliasSKG )->KG_CODQST
												
												aAdd( oObjTmp[nLenQst]:ListOfOption, WsClassNew( "OptionView" ) )
												nLenOption := Len( oObjTmp[nLenQst]:ListOfOption )
												
												GetOption( @oObjTmp[nLenQst]:ListOfOption[nLenOption], cAliasSKI )
												
												( cAliasSKI )->( DbSkip() )
											End
										EndIf
									EndIf

									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Busca Alternativas³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Unica Escolha e Multipla Escolha³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									If ( cAliasSKG )->KG_TIPOQST == UNICA_ESCOLHA .OR. ;
										( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA

										( cAliasSKH )->( DbSetOrder( 1 ) )
										
										If ( cAliasSKH )->( DbSeek( xFilial( "SKH" ) + ( cAliasSKG )->KG_CODQST ) )
											oObjTmp[nLenQst]:ListOfAlternative := {}
											
											While !( cAliasSKH )->( EOF() ) .AND. ;
												( cAliasSKH )->KH_FILIAL == xFilial( "SKH" ) .AND. ;
												( cAliasSKH )->KH_CODQST == ( cAliasSKG )->KG_CODQST
												
												aAdd( oObjTmp[nLenQst]:ListOfAlternative, WsClassNew( "AlternativeView" ) )
												nLenAlt := Len( oObjTmp[nLenQst]:ListOfAlternative )
												
												GetAlternative( @oObjTmp[nLenQst]:ListOfAlternative[nLenAlt], cAliasSKH )
												
												( cAliasSKH )->( DbSkip() )
											End
										EndIf
									EndIf
								EndIf
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Busca a questao do Grupo e SubGrupo³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							Case !Empty( ( cAliasSKR )->KR_CODGRU ) .AND. !Empty( ( cAliasSKR )->KR_CODSGR ) .AND. ;
								!Empty( ( cAliasSKR )->KR_CODQST )
		
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados do Grupo³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKE )->( DbSetOrder( 1 ) )
		
								If ( cAliasSKE )->( DbSeek( xFilial( "SKE" ) + ( cAliasSKR )->KR_CODGRU ) )
									nLenGroup := aScan(::Research:ListOfQuestionary[nLenQuest]:ListOfGroup, {|Group| Group:Code == ( cAliasSKR )->KR_CODGRU })
									If nLenGroup <= 0 
										aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup, WsClassNew( "GroupView" ) )
										nLenGroup := Len( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup )
										GetGroup( @::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup], cAliasSKE, cAliasSKR )
									EndIf
								EndIf
		
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados do SubGrupo³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKF )->( DbSetOrder( 1 ) )
		
								If ( cAliasSKF )->( DbSeek( xFilial( "SKF" ) + ( cAliasSKR )->KR_CODGRU + ( cAliasSKR )->KR_CODSGR ) )
									If ValType(::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup)<>"A"
										::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup := {}
									EndIf

									nLenSubGroup := aScan(::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup, {|SubGroup| SubGroup:Code == ( cAliasSKR )->KR_CODSGR})
									If nLenSubGroup <= 0
										aAdd( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup, WsClassNew( "SubGroupView" ) )
										nLenSubGroup := Len( ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup )
										
										GetSubGroup( @::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup], cAliasSKF, cAliasSKR )
									EndIf
									
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Busca dados da questao³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									( cAliasSKG )->( DbSetOrder( 1 ) )
									
									If ( cAliasSKG )->( DbSeek( xFilial( "SKG" ) + ( cAliasSKR )->KR_CODQST ) )
										If ValType(::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup]:ListOfQuestion)<>"A"
											::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup]:ListOfQuestion := {}
										EndIf
										oObjTmp := ::Research:ListOfQuestionary[nLenQuest]:ListOfGroup[nLenGroup]:ListOfSubGroup[nLenSubGroup]:ListOfQuestion
									
										aAdd( oObjTmp, WsClassNew( "QuestionView" ) )
										nLenQst := Len( oObjTmp )
										
										GetQuestion( @oObjTmp[nLenQst], cAliasSKG, cAliasSKE, cAliasSKF, cAliasSKR )
		
										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
										//³Multipla Escolha em Linhas ou Colunas³
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
										If ( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA .AND. ;
											( ( cAliasSKG )->KG_TIPEXIB == LINHAS .OR. ;
											( cAliasSKG )->KG_TIPEXIB == COLUNAS )
											
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³Linhas ou Colunas³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											( cAliasSKI )->( DbSetOrder( 1 ) )
											
											If ( cAliasSKI )->( DbSeek( xFilial( "SKI" ) + ;
												( cAliasSKG )->KG_CODQST ) )
												
												oObjTmp[nLenQst]:ListOfOption := {}
												
												While !( cAliasSKI )->( EOF() ) .AND. ;
													( cAliasSKI )->KI_FILIAL == xFilial( "SKI" ) .AND. ;
													( cAliasSKI )->KI_CODQST == ( cAliasSKG )->KG_CODQST
													
													aAdd( oObjTmp[nLenQst]:ListOfOption, WsClassNew( "OptionView" ) )
													nLenOption := Len( oObjTmp[nLenQst]:ListOfOption )
													
													GetOption( @oObjTmp[nLenQst]:ListOfOption[nLenOption], cAliasSKI )
													
													( cAliasSKI )->( DbSkip() )
												End
											EndIf
										EndIf

										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
										//³Busca Alternativas³
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
										//³Unica Escolha e Multipla Escolha³
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
										If ( cAliasSKG )->KG_TIPOQST == UNICA_ESCOLHA .OR. ;
											( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA

											( cAliasSKH )->( DbSetOrder( 1 ) )
											
											If ( cAliasSKH )->( DbSeek( xFilial( "SKH" ) + ( cAliasSKG )->KG_CODQST ) )
												oObjTmp[nLenQst]:ListOfAlternative := {}
												
												While !( cAliasSKH )->( EOF() ) .AND. ;
													( cAliasSKH )->KH_FILIAL == xFilial( "SKH" ) .AND. ;
													( cAliasSKH )->KH_CODQST == ( cAliasSKG )->KG_CODQST
													
													aAdd( oObjTmp[nLenQst]:ListOfAlternative, WsClassNew( "AlternativeView" ) )
													nLenAlt := Len( oObjTmp[nLenQst]:ListOfAlternative )
													
													GetAlternative( @oObjTmp[nLenQst]:ListOfAlternative[nLenAlt], cAliasSKH )
													
													( cAliasSKH )->( DbSkip() )
												End
											EndIf
										EndIf
									EndIf
								EndIf
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Busca a questao, independente do Grupo e SubGrupo³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							Case Empty( ( cAliasSKR )->KR_CODGRU ) .AND. Empty( ( cAliasSKR )->KR_CODSGR ) .AND. ;
								!Empty( ( cAliasSKR )->KR_CODQST )
		
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Busca dados da questao³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								( cAliasSKG )->( DbSetOrder( 1 ) )
								
								If ( cAliasSKG )->( DbSeek( xFilial( "SKG" ) + ( cAliasSKR )->KR_CODQST ) )
									oObjTmp := ::Research:ListOfQuestionary[nLenQuest]:ListOfQuestion
									aAdd( oObjTmp, WsClassNew( "QuestionView" ) )
									nLenQst := Len( oObjTmp )
									
									GetQuestion( @oObjTmp[nLenQst], cAliasSKG, cAliasSKE, cAliasSKF, cAliasSKR )
	
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Multipla Escolha em Linhas ou Colunas³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									If ( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA .AND. ;
										( ( cAliasSKG )->KG_TIPEXIB == LINHAS .OR. ;
										( cAliasSKG )->KG_TIPEXIB == COLUNAS )
										
										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
										//³Linhas ou Colunas³
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
										( cAliasSKI )->( DbSetOrder( 1 ) )
										
										If ( cAliasSKI )->( DbSeek( xFilial( "SKI" ) + ;
											( cAliasSKG )->KG_CODQST ) )
											
											oObjTmp[nLenQst]:ListOfOption := {}
											
											While !( cAliasSKI )->( EOF() ) .AND. ;
												( cAliasSKI )->KI_FILIAL == xFilial( "SKI" ) .AND. ;
												( cAliasSKI )->KI_CODQST == ( cAliasSKG )->KG_CODQST
												
												aAdd( oObjTmp[nLenQst]:ListOfOption, WsClassNew( "OptionView" ) )
												nLenOption := Len( oObjTmp[nLenQst]:ListOfOption )
												
												GetOption( @oObjTmp[nLenQst]:ListOfOption[nLenOption], cAliasSKI )
												
												( cAliasSKI )->( DbSkip() )
											End
										EndIf
									EndIf

									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Busca Alternativas³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Unica Escolha e Multipla Escolha³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									If ( cAliasSKG )->KG_TIPOQST == UNICA_ESCOLHA .OR. ;
										( cAliasSKG )->KG_TIPOQST == MULTIPLA_ESCOLHA

										( cAliasSKH )->( DbSetOrder( 1 ) )
										
										If ( cAliasSKH )->( DbSeek( xFilial( "SKH" ) + ( cAliasSKG )->KG_CODQST ) )
											oObjTmp[nLenQst]:ListOfAlternative := {}
											
											While !( cAliasSKH )->( EOF() ) .AND. ;
												( cAliasSKH )->KH_FILIAL == xFilial( "SKH" ) .AND. ;
												( cAliasSKH )->KH_CODQST == ( cAliasSKG )->KG_CODQST
												
												aAdd( oObjTmp[nLenQst]:ListOfAlternative, WsClassNew( "AlternativeView" ) )
												nLenAlt := Len( oObjTmp[nLenQst]:ListOfAlternative )
												
												GetAlternative( @oObjTmp[nLenQst]:ListOfAlternative[nLenAlt], cAliasSKH )
												
												( cAliasSKH )->( DbSkip() )
											End
										EndIf
									EndIf
								EndIf
						EndCase
						
						( cAliasSKR )->( DbSkip() )
					End
				EndIf
				
				( cAliasSKD )->( DbSkip() )
			End
		EndIf
	Else
		lRetorno := .F.
		SetSoapFault( "GETRESEARCH", "Pesquisa inválida." )
	EndIf
Else
	lRetorno := .F.
	SetSoapFault( "GETRESEARCH", "UserCode invalido." )
EndIf

RestArea( aArea )

Return lRetorno

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PutResearcºAutor  ³Luiz Felipe Couto    º Data ³  09/03/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Salva ou Finaliza uma pesquisa.                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ ExpC1 : Codigo do Usuario WS                                º±±
±±º          ³ ExpC2 : Objeto com o Resultado da Pesquisa                  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³SIGAGPR     						                           º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±ºAnalista  ³ Data/Bops/Ver ³Manutencao Efetuada                      	   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
WSMETHOD PutResearchResult WSRECEIVE UserCode, Research WSSEND ResearchCode WSSERVICE GPRResearch

Local cAliasSKS := "SKS"						//Alias da Tabela SKS
Local cAliasSKT := "SKT"						//Alias da Tabela SKT
Local cAliasSKU := "SKU"						//Alias da Tabela SKU

Local lRetorno 	:= .T.							//Retorno da Funcao

Local aArea		:= GetArea()					//Area atual

If ::UserCode == "MSALPHA"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Cria e Abre as Tabelas SKS, SKT e SKU³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DbSelectArea( cAliasSKS )
	DbSelectArea( cAliasSKT )
	DbSelectArea( cAliasSKU )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Grava Resultado³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PutResult( ::Research )
Else
	lRetorno := .F.
	SetSoapFault( "PUTRESEARCH", "UserCode invalido." )
EndIf

RestArea( aArea )

Return lRetorno