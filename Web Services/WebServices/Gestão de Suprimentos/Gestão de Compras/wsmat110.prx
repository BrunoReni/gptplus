#include "WSMAT110.CH"
#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH" 

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³WSMAT110  ³ Autor ³Erike Yuri da Silva    ³ Data ³20.06.2006  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Web Service das funcionalidades de Solicitacao de Compras    ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Portais                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±     	
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao da estruturas utilizadas                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

WSSTRUCT PurchasesRequestHeaderView
	WSDATA PurchaseRequisNumber			As String  OPTIONAL //Numero da Solic.de Compra	02	C1_NUM (eh optional, pois caso nao informado no put, o sistema gerara um numero sequencial)
	WSDATA NameofPetitioner				As String  OPTIONAL //Nome do Solicitante	23	C1_SOLICIT  
	WSDATA IssueDate					As Date             //Data de Emissao da SC	16	C1_EMISSAO	
	WSDATA DeliveryBranch				As String			//Filial de Entrega	45	C1_FILENT		
	WSDATA RequesterUnit				As String  OPTIONAL //Unidade Requisitante	30	C1_UNIDREQ	
	WSDATA PurchaserCode				As String  OPTIONAL //Codigo do Comprador	31	C1_CODCOMP	
ENDWSSTRUCT

WSSTRUCT PurchasesRequestItensView
	WSDATA PurchaseRequisNumberItem		As String			//Item da Solicitacao				03	C1_ITEM
	WSDATA Product						As String			//Codigo do Produto					04	C1_PRODUTO
	WSDATA MeasureUnit					As String OPTIONAL	//Unidade de medida					05	C1_UM
	WSDATA Quantity						As Float			//Quantidade da SC					06	C1_QUANT
	WSDATA Unit2ofMeasure				As String OPTIONAL  //Segunda Unidade de Medida			07	C1_SEGUM
	WSDATA Quantityin2MeasUnit			As Float  OPTIONAL  //Qtde na Segunda Unidade			08	C1_QTSEGUM
	WSDATA Necessity					As Date             //Data prev. da Necessidade			09	C1_DATPRF
	WSDATA Warehouse					As String           //e	Armazem							10	C1_LOCAL
	WSDATA Notes						As String OPTIONAL  //Observacao						11	C1_OBS
	WSDATA ProductionOrder				As String OPTIONAL  //Ordem de Producao					12	C1_OP
	WSDATA CostCenter					As String OPTIONAL  //Centro de Custo					13	C1_CC
	WSDATA AccountCode					As String OPTIONAL  //Conta Contabil do Produto			14	C1_CONTA
	WSDATA AccountItem					As String OPTIONAL  //Item Da Conta Contabil			15	C1_ITEMCTA
	WSDATA DescriptionofProduct			As String OPTIONAL  //Descricao do Produto	18	C1_DESCRI
	WSDATA QuantityinOrders				As Float  OPTIONAL  //Quantidade em Pedido	25	C1_QUJE
	WSDATA TypeofProductionOrder		As String OPTIONAL	//Tipo da Ordem de ProduşÒo	36	C1_TPOP
	WSDATA BuyersGroup					As String OPTIONAL	//Grupo de Compradores	37	C1_GRUPCOM
	WSDATA AccountValueClass			As String OPTIONAL	//Classe Valor Contabil	41	C1_CLVL
	WSDATA MrpSeqOriginatedPR			As String OPTIONAL	//Seq MRP que originou SC	46	C1_SEQMRP
	WSDATA UnitValue					As Float  OPTIONAL	//Valor Unitario	47	C1_VUNIT
	WSDATA AUTVLDCONT					As String OPTIONAL	//Validacao de contrato para rotina automatica
	WSDATA UserFields                   As Array Of UserField OPTIONAL	
	WSDATA ApportItens					AS Array Of ApportPurchaseRequestView OPTIONAL // Rateio Centro de Custo
	WSDATA IDAPS						As String OPTIONAL  //ID APS para obter numero da OP
ENDWSSTRUCT

WSSTRUCT ApportPurchaseRequestView
	WSDATA ItemApportionment 			As Float			//% Rateio do Item					CX_PERC
	WSDATA CostCenter					As String OPTIONAL  //Codigo do Centro de Custo			CX_CC
	WSDATA LedgerAccount				As String OPTIONAL  //Conta Contabil					CX_CONTA	
	WSDATA LedgerAccountItem			As String OPTIONAL  //Item da Conta Contabil			CX_ITEMCTA	
	WSDATA ClassValue					As String OPTIONAL  //Classe Valor Contabil				CX_CLVL		
ENDWSSTRUCT

WSSTRUCT PurchasesRequestView
	WSDATA PRHeader 					As PurchasesRequestHeaderView  
	WSDATA PRItem						As ARRAY OF PurchasesRequestItensView
ENDWSSTRUCT

WSSTRUCT PurchasesRequestBrwView
	WSDATA PurchaseRequisNumber			As String			//Numero da Solic.de Compra	02	C1_NUM
	WSDATA PurchaseRequisNumberItem		As String			//Item da Solicitacao				03	C1_ITEM
	WSDATA Product						As String			//Codigo do Produto					04	C1_PRODUTO
	WSDATA MeasureUnit					As String			//Unidade de medida					05	C1_UM
	WSDATA Quantity						As Float			//Quantidade da SC					06	C1_QUANT
	WSDATA NameofPetitioner				As String           //Nome do Solicitante	23	C1_SOLICIT  
	WSDATA IssueDate					As Date             //Data de Emissao da SC	16	C1_EMISSAO	
	WSDATA DeliveryBranch				As String			//Filial de Entrega	45	C1_FILENT		
	WSDATA RequesterUnit				As String           //Unidade Requisitante	30	C1_UNIDREQ	
	WSDATA PurchaserCode				As String           //Codigo do Comprador	31	C1_CODCOMP	
ENDWSSTRUCT

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao do Web Service de Controle do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSERVICE MtPurchasesRequest DESCRIPTION STR0001 NAMESPACE "http://webservices.microsiga.com.br/mtpurchasesrequest.apw" //"Serviço de consulta e atualização de solicitação de Compras"
	WSDATA Header                 		As Array OF BrwHeader
	WSDATA HeaderType             		As String
	WSDATA UserCode               		As String
	WSDATA PurchaseRequisNumber			As String
	WSDATA PurchasesRequestID	  		As String
	WSDATA PurchaseRequisNumberFrom 	As String 	OPTIONAL
	WSDATA PurchaseRequisNumberTo		As String 	OPTIONAL
	WSDATA Status						As String 	OPTIONAL
	WSDATA DateFrom						As Date 	OPTIONAL
	WSDATA DateTo						As Date		OPTIONAL
	WSDATA PurchasesRequest       		As PurchasesRequestView
	WSDATA PurchasesRequestBrwItView	As Array OF PurchasesRequestBrwView
	WSDATA QueryAddWhere          		As String 	OPTIONAL
	WSDATA IndexKey               		As String 	OPTIONAL
	WSDATA Option						As String 	OPTIONAL
	WSDATA WsNull                 		As String   
	WSDATA CreatedSC		        	As String

	WSMETHOD GetHeader        		   DESCRIPTION STR0002 //"Método que descreve as estruturas de retorno do serviço"
	WSMETHOD GetPurchasesRequest	   DESCRIPTION STR0003 //"Método de consulta das informacoes da solicitação de compras"
	WSMETHOD BrwPurchasesRequest       DESCRIPTION STR0004 //"Método de listagem das solicitações de compras"
	WSMETHOD PutPurchasesRequest	   DESCRIPTION STR0005 //"Método de atualização das informacoes da solicitação de compras"
	WSMETHOD DelPurchasesRequest	   DESCRIPTION STR0006 //"Método de exclusão da solicitação de compras"
ENDWSSERVICE

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GetHeader ³Autor  ³ Erike Yuri da Silva   ³ Data ³20.06.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de recuperacao dos headers deste WS                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Nome da Estrutura                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo devolve o header de uma estrutura                ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ WEB SERVICES                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD GetHeader WSRECEIVE HeaderType WSSEND Header WSSERVICE MtPurchasesRequest
Local aRetIni	:= {}
Local nX 		:= 0

IF FindFunction("PCPWSInit")
	aRetIni := PCPWSInit()
Else
	aRetIni := {.T.,""}
EndIf	

IF aRetIni[1]
	::Header := MtHeader(::HeaderType)
	If Empty(::Header)                   
		Do Case 
			Case ::HeaderType == "PurchasesRequestHeaderView"
				WsPutHead(::Header,"C1_NUM","CODE")
				WsPutHead(::Header,"C1_SOLICIT","PETITIONER")
				WsPutHead(::Header,"C1_EMISSAO","ISSUE")
				WsPutHead(::Header,"C1_FILENT","DELIVERYBRANCH")
				WsPutHead(::Header,"C1_UNIDREQ","REQUESTERUNIT")
				WsPutHead(::Header,"C1_CODCOMP","PURCHASERCODE")		
				
			Case ::HeaderType == "PURCHASESREQUESTBRWVIEW" 
				WsPutHead(::Header,"C1_NUM","CODE")
				WsPutHead(::Header,"C1_ITEM","ITEMCODE")
				WsPutHead(::Header,"C1_PRODUTO","PRODUCTCODE")
				WsPutHead(::Header,"C1_UM","MEASUREUNIT")
				WsPutHead(::Header,"C1_QUANT","QUANTITY")
				WsPutHead(::Header,"C1_QUJE2","QUANTITYSEDSECONDUNIT")
				WsPutHead(::Header,"C1_SOLICIT","PETITIONER")
				WsPutHead(::Header,"C1_EMISSAO","ISSUE")
				WsPutHead(::Header,"C1_FILENT","DELIVERYBRANCH")
				WsPutHead(::Header,"C1_UNIDREQ","REQUESTERUNIT")
				WsPutHead(::Header,"C1_CODCOMP","PURCHASERCODE")

			Case ::HeaderType == "PURCHASESREQUESTITENSVIEW"  
				WsPutHead(::Header,"C1_ITEM","PURCHASEREQUISNUMBERITEM")
				WsPutHead(::Header,"C1_PRODUTO","PRODUCT")
				WsPutHead(::Header,"C1_UM","MEASUREUNIT")
				WsPutHead(::Header,"C1_QUANT","QUANTITY")
				WsPutHead(::Header,"C1_SEGUM","UNIT2OFMEASURE")
				WsPutHead(::Header,"C1_QTSEGUM","QUANTITYUNIT2OFMEASURE")
				WsPutHead(::Header,"C1_DATPRF","NECESSITY")
				WsPutHead(::Header,"C1_LOCAL","WAREHOUSE")
				WsPutHead(::Header,"C1_OBS","NOTES")
				WsPutHead(::Header,"C1_OP","PRODUCTIONORDER")
				WsPutHead(::Header,"C1_CC","COSTCENTER")
				WsPutHead(::Header,"C1_CONTA","ACCOUNTCODE")
				WsPutHead(::Header,"C1_ITEMCTA","ACCOUNTITEM")
				WsPutHead(::Header,"C1_DESCRI","DESCRIPTIONPRODUCT")
				WsPutHead(::Header,"C1_QUJE","QUANTITYINORDERS")
				WsPutHead(::Header,"C1_TPOP","TYPEPRODUCTIONORDER")
				WsPutHead(::Header,"C1_GRUPCOM","BUYERSGROUP")
				WsPutHead(::Header,"C1_CLVL","ACCOUNTVALUECLASS")
				WsPutHead(::Header,"C1_SEQMRP","MRPSEQORIGINATED")
				WsPutHead(::Header,"C1_VUNIT","UNITVALUE")

				AAdd(::Header,WSClassNew("BrwHeader"))                                                             
				nX := Len(::Header)		                                                                                   
				::Header[nX]:HeaderTitle   := STR0007 //"Valida Contrato"
				::Header[nX]:HeaderField   := "AUTVLDCONT"
				::Header[nX]:HeaderPicture := "!"
				::Header[nX]:HeaderSize    := 1
				::Header[nX]:HeaderDec     := 0
				::Header[nX]:HeaderType    := "C"
				::Header[nX]:HeaderComboBox:= ""
				::Header[nX]:HeaderOblig   := .F.
		EndCase
	Endif
Else
	SetSoapFault("GetHeader",aRetIni[2])
	Return(.F.)
EndIf	
Return(.T.)


/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³BrwPurchasesRequest³Autor ³Erike Yuri     ³ Data ³22.06.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de recuperacao das solicitacoes de compras            ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpC2: Da SC                                                 ³±±
±±³          ³ExpC3: Ate SC                                                ³±±
±±³          ³ExpC4: Status da SC (1 = Abertas, 2 = Fechadas)              ³±±
±±³          ³ExpD1: Emissao de                                            ³±±
±±³          ³ExpD2: Emissao Ate                                           ³±±
±±³          ³ExpC5: Query adicional utilizada no filtro                   ³±±
±±³          ³ExpC6: Chave de indice utilizada para ordenar os campos      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo devolve as solicitacoes de compras conforme para-³±±
±±³          ³metrizacao.                                                  ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Portais                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
Da SC	: <branco>
Ate SC  : <ZZZZZZ>
Status	: Todos, ou em aberto
Data De	:
Data Ate:
Considera SC : Ambas, Firmes , Previstas

/*/
WSMETHOD BrwPurchasesRequest WSRECEIVE UserCode,PurchaseRequisNumberFrom,PurchaseRequisNumberTo,Status,DateFrom,DateTo,QueryAddWhere,IndexKey WSSEND PurchasesRequestBrwItView WSSERVICE MtPurchasesRequest

Local aArea		:= {}	
Local aRetIni	:= {}
Local cAliasSC1	:= "SC1"    
Local cArqInd	:= ""
Local cNumSCIni	:= ::PurchaseRequisNumberFrom
Local cNumSCFim	:= If(Empty(::PurchaseRequisNumberTo),"ZZZZZZ",::PurchaseRequisNumberTo)
Local cQuery	:= ""
Local dDatIni  	
Local dDatFim  	
Local lAbertos 	:= If(Empty(::Status) .Or. ::Status=="2" ,.F.,.T.)
Local lQuery	:= .F.
Local lRetorno	:= .T.
Local nY		:= 0

IF FindFunction("PCPWSInit")
	aRetIni := PCPWSInit()
Else
	aRetIni := {.T.,""}
EndIf	

IF aRetIni[1]
	aArea		:= GetArea()
	dDatIni  	:= If(Empty(::DateFrom),dDataBase-30,::DateFrom)
	dDatFim  	:= If(Empty(::DateTo),dDataBase,::DateTo)

	If PrtChkUser(::UserCode,"MtPurchasesRequest","BrwPurchasesRequest")  
		DbSelectArea("SC1")
		DbSetOrder(1)
		#IFDEF TOP
			If (TcSrvType()#'AS/400')
				lQuery		:= .T.
				cAliasSC1	:= GetNextAlias()

				cQuery := "SELECT * "
				cQuery += "FROM "	    + RetSqlName( 'SC1' ) +" SC1 "
				cQuery += " WHERE "
				cQuery += "C1_FILIAL='" + xFilial( 'SC1' )    	+ "' AND "
				cQuery += "C1_NUM>='"   + cNumSCIni           	+ "' AND "
				cQuery += "C1_NUM<='"   + cNumSCFim          	+ "' AND "
				cQuery += "C1_EMISSAO>='"  + DTOS(dDatIni)   	+ "' AND "
				cQuery += "C1_EMISSAO<='"  + DTOS(dDatFim)   	+ "' AND "
				If lAbertos
					cQuery += "C1_QUANT<>C1_QUJE  AND "
				EndIf
				cQuery += "SC1.D_E_L_E_T_<>'*' "
				cQuery := WsQueryAdd(cQuery,::QueryAddWhere)
				cQuery += "ORDER BY "+WsSqlOrder(IIf(Empty(::IndexKey),SC1->(IndexKey()),::IndexKey))

				cQuery := ChangeQuery(cQuery)
				
				dbUseArea( .T., 'TOPCONN', TCGENQRY(,,cQuery), cAliasSC1, .F., .T.)
				aEval(SC1->(dbStruct()),{|x| If(x[2]<>"C" .And. x[2]<>"M",TcSetField(cAliasSC1,AllTrim(x[1]),x[2],x[3],x[4]),Nil)})
			EndIf
		#ENDIF
		If !lQuery
			cArqInd   := CriaTrab( , .F. )
			cQuery := "C1_FILIAL=='" +xFilial("SC1")+"'.AND."
			cQuery += "C1_NUM>='"+cNumSCIni+"'.AND."
			cQuery += "C1_NUM<='"+cNumSCFim+"'.AND."
			cQuery += "DTOS(C1_EMISSAO)>='"+DTOS(dDatIni)+"'.AND."
			cQuery += "DTOS(C1_EMISSAO)<='"+DTOS(dDatFim)+"'"
			If lAbertos
				cQuery += " .AND. C1_QUANT<>C1_QUJE "
			EndIf
			
			IndRegua("SC1",cArqInd,IIf(Empty(::IndexKey),SC1->(IndexKey()),::IndexKey),,cQuery)
			dbGotop()		
		EndIf              
		
		While (cAliasSC1)->( !Eof() )
			aadd(::PurchasesRequestBrwItView, WsClassNew("PurchasesRequestBrwView"))
			nY++
			PutScHead(@::PurchasesRequestBrwItView[nY],cAliasSC1,,.T.)	
			(cAliasSC1)->( DbSkip() )
		EndDo	

		If lQuery
			dbSelectArea(cAliasSC1)		
			dbCloseArea()	
			dbSelectArea("SC1")
		Else
			dbSelectArea("SC1")
			RetIndex("SC1")
			FErase(cArqInd+OrdBagExt())
		EndIf
	Else
		lRetorno := .F.
	EndIf
	RestArea(aArea)
Else
	lRetorno := .F.
	SetSoapFault("BrwPurchasesRequest",aRetIni[2])
EndIf	

Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GetPurchasesR³Autor  ³Erike Yuri da Silva ³Data  ³20.06.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de recuperacao dos pedidos de venda de um cliente     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpC2: Numero da solicitacao de compras                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Metodo de recuperacao dos pedidos de venda de um cliente     ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD GetPurchasesRequest WSRECEIVE UserCode, PurchasesRequestID WSSEND PurchasesRequest WSSERVICE MtPurchasesRequest

Local aArea   	:= {}  
Local aRetIni	:= {}
Local cAliasSC1 := "SC1"
Local cQuery    := ""
Local lQuery    := .F.
Local lRetorno  := .T.
Local nY        := 0

IF FindFunction("PCPWSInit")
	aRetIni := PCPWSInit()
Else
	aRetIni := {.T.,""}
EndIf	

IF aRetIni[1]
	aArea     := GetArea()
	If PrtChkUser(::UserCode,"MtPurchasesRequest","GetPurchasesRequest")
		DbSelectArea("SC1")
		DbSetOrder(1)
		If Empty(::PurchasesRequestID)
			lRetorno := .F.
		Else
			#IFDEF TOP
				lQuery	:= .T.
				cAliasSC1:= GetNextAlias()

				cQuery	:= "SELECT * "
				cQuery	+= "FROM "+RetSqlName("SC1")+" SC1 "
				cQuery	+= "WHERE "
				cQuery	+= "SC1.C1_FILIAL = '"+xFilial("SC1")+"' AND "
				cQuery	+= "SC1.C1_NUM='"+::PurchasesRequestID+"' AND "
				cQuery	+= "SC1.D_E_L_E_T_=' ' "
				cQuery	+= "ORDER BY "+SqlOrder(SC1->(IndexKey()))

				cQuery	:= ChangeQuery(cQuery)

				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSC1,.T.,.T.)
				aEval(SC1->(dbStruct()), {|x| If(x[2] <> "C" .And. x[2] <> "M" .And. FieldPos(x[1]) > 0, TcSetField(cAliasSC1,x[1],x[2],x[3],x[4]),Nil)})	
				lRetorno := (cAliasSC1)->(!Eof())
			#ELSE
				lRetorno := MsSeek(xFilial("SC1")+::PurchasesRequestID)
			#Endif
		EndIf                            
			
		If lRetorno
			DbSelectArea(cAliasSC1)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Cabecalho da Solicitacao de Compras³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			::PurchasesRequest:PRHeader	:= WsClassNew("PurchasesRequestHeaderView")
			PutScHead(@::PurchasesRequest:PRHeader,cAliasSC1)	
						
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Itens da solicitacao de compras³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			While !Eof() .AND. xFilial("SC1") == (cAliasSC1)->C1_FILIAL .AND.;
					::PurchasesRequestID == (cAliasSC1)->C1_NUM

				AAdd(::PurchasesRequest:PRItem,WSClassNew("PurchasesRequestItensView"))
				nY++
				PutScItem(@::PurchasesRequest:PRItem[nY],cAliasSC1,,,,,,nY)
				(cAliasSC1)->( dbSkip() )
			EndDo
			If lQuery
				(cAliasSC1)->( dbCloseArea() )
				DbSelectArea("SC1")
			Endif
		Else
			lRetorno := .F.
			SetSoapFault("GetPurchasesRequest",STR0008) //"Solicitação de Compras nao encontrada"
		Endif
	Else
		lRetorno := .F.
	Endif
	RestArea(aArea)
Else
	lRetorno := .F.
	SetSoapFault("GetPurchasesRequest",aRetIni[2])
EndIf	

Return(lRetorno)




/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PutPurchasesR³Autor  ³Erike Yuri da Silva ³Data  ³21.06.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de inclusao/alteracao de solicitacao de compras       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpC2: Dados do Solicitacao de compras                       ³±±
±±³          ³ExpC3: Opcao 3-Inclusao; 4-Alteracao                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Metodo de inclusao de solicitacao de compras.                ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Portais                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PutPurchasesRequest WSRECEIVE UserCode,PurchasesRequest,Option WSSEND CreatedSC WSSERVICE MtPurchasesRequest
Local aRetIni	  :={}
Local cNumSolic	  := ""
Local lRetorno	  := .T.

IF FindFunction("PCPWSInit") 
	aRetIni := PCPWSInit()
Else
	aRetIni := {.T.,""}
EndIf	

IF aRetIni[1]
	If PrtChkUser(::UserCode,"MtPurchasesRequest","PutPurchasesRequest")
		cNumSolic := WS110PPR(::PurchasesRequest,::Option)
		If Empty(cNumSolic)
			lRetorno := .F.
		Else
			::CreatedSC := cNumSolic
		EndIf
	Else
		lRetorno := .F.
	EndIf
Else
	lRetorno := .F.
	SetSoapFault("PutPurchasesRequest",aRetIni[2])
EndIf	

Return(lRetorno)


/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³DelPurchasesR³Autor  ³Erike Yuri da Silva ³Data  ³21.06.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de inclusao/alteracao de solicitacao de compras       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpC2: Dados do Solicitacao de compras                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Metodo de inclusao de solicitacao de compras.                ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Portais                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD DelPurchasesRequest WSRECEIVE UserCode,PurchaseRequisNumber WSSEND WSNULL WSSERVICE MtPurchasesRequest

Local aArea		 := {}	 
Local aRetIni	 := {}
Local aCab		 := {}
Local aErro      := {}
Local aItem		 := {}
Local cErro      := ""
Local lRetorno	 := .T.
Local nX         := 0

PRIVATE lAutoErrNoFile := .T.
PRIVATE lMsErroAuto    := .F.

IF FindFunction("PCPWSInit")
	aRetIni := PCPWSInit()
Else
	aRetIni := {.T.,""}
EndIf	

IF aRetIni[1]
	aArea		 := GetArea()
	If PrtChkUser(::UserCode,"MtPurchasesRequest","DelPurchasesRequest")
		WsChangeModule( "SIGACOM" )   
		dbSelectArea("SC1")
		dbSetOrder(1)
	    
		If Empty(::PurchaseRequisNumber) .Or. !MsSeek(xFilial("SC1")+::PurchaseRequisNumber)	
			lRetorno := .F.        
			SetSoapFault("DelPurchasesRequest",STR0009)   //"Solicitação de compras inválida"
		EndIf
		
		If lRetorno
			aadd(aCab	,{"C1_NUM"	,::PurchaseRequisNumber,NIL})	
			aadd(aItem	,{"C1_NUM"	,::PurchaseRequisNumber,NIL})
			MSExecAuto({|v,x,y| MATA110(v,x,y)},aCab,aItem,5)
			If lMsErroAuto
				aErro := GetAutoGRLog()
				For nX := 1 To Len(aErro)
					cErro += aErro[nX] + Chr(13)+Chr(10)
				Next nX
				SetSoapFault("DelPurchasesRequest",cErro)
				lRetorno := .F.
			EndIf
		EndIf
	Else
		lRetorno := .F.
	EndIf
	RestArea(aArea)
Else
	lRetorno := .F.
	SetSoapFault("DelPurchasesRequest",aRetIni[2])
EndIf	
Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PutScHead ³Autor  ³ Erike Yuri da Silva   ³ Data ³21.06.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de preenchimento do header da solicitacao de compras  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto do Header da SC                                ³±±
±±³          ³ExpC1: Alias da tabela de SC                                 ³±±
±±³          ³ExpA2: Array da rotina automatica                            ³±±
±±³          ³ExpL1: Indica se sera para visualizacao do Browse            ³±±
±±³          ³ExpC2: Variavel para retorno com numero do documento gerado  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo preenche o array da rotina automatica com os     ³±±
±±³          ³dados do objeto                                              ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Portais                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PutScHead(oObjeto,cAliasSC1,aCab,lBrw,cNumSC)
Default cAliasSC1 	:= "SC1"
Default lBrw		:= .F.

If aCab == NIL
	oObjeto:PurchaseRequisNumber 	:= (cAliasSC1)->C1_NUM 
	oObjeto:NameofPetitioner		:= (cAliasSC1)->C1_SOLICIT
	oObjeto:IssueDate				:= (cAliasSC1)->C1_EMISSAO
	oObjeto:DeliveryBranch			:= (cAliasSC1)->C1_FILENT
	oObjeto:RequesterUnit			:= (cAliasSC1)->C1_UNIDREQ
	oObjeto:PurchaserCode			:= (cAliasSC1)->C1_CODCOMP
	If lBrw
		oObjeto:PurchaseRequisNumberItem	:= (cAliasSC1)->C1_ITEM
		oObjeto:Product						:= (cAliasSC1)->C1_PRODUTO
		oObjeto:MeasureUnit					:= (cAliasSC1)->C1_UM
		oObjeto:Quantity					:= (cAliasSC1)->C1_QUANT
		oObjeto:NameofPetitioner			:= (cAliasSC1)->C1_SOLICIT  	
	EndIf
Else
	If Empty(oObjeto:PurchaseRequisNumber)
		cNumSC := CriaVar("C1_NUM")
	Else
		cNumSC := oObjeto:PurchaseRequisNumber
	EndIf
	aadd(aCab,{"C1_NUM"		,cNumSC,})
	aadd(aCab,{"C1_SOLICIT"	,If(oObjeto:NameofPetitioner==NIL,CriaVar("C1_SOLICIT"),oObjeto:NameofPetitioner),})
	aadd(aCab,{"C1_EMISSAO"	,oObjeto:IssueDate,})
	aadd(aCab,{"C1_FILENT"	,oObjeto:DeliveryBranch,})
	aadd(aCab,{"C1_UNIDREQ"	,oObjeto:RequesterUnit,})
	aadd(aCab,{"C1_CODCOMP"	,oObjeto:PurchaserCode,})
	aCab := WsAutoOpc(aCab)
EndIf	
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PutScItem ³Autor  ³ Erike Yuri da Silva   ³ Data ³21.06.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de preenchimento dos itens da solicitacao de compras  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto do item da solicitacao de compras              ³±±
±±³          ³ExpC1: Alias da tabela de SC                                 ³±±
±±³          ³ExpA2: Array da rotina automatica                            ³±±
±±³          ³ExpC2: Codigo da Solicitacao de Compras                      ³±±
±±³          ³ExpN1: Indica a opcao a ser executada 3-Inclusao, 4-Alteracao³±±
±±³          ³ExpC3: Numero da Ordem de Producao                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo preenche o array da rotina automatica com os     ³±±
±±³          ³dados do objeto                                              ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Portais                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PutScItem(oObjeto,cAliasSC1,aItens,cNumSC,nOpc,cNumOP,aItensRat,nPosObj)
Local aArea       := GetArea()
Local aItem       := {}
Local aItemRat	  := {}
Local nY          := 0
Local nX		  := 0
Local lApsInUse   := SuperGetMv("MV_APS",.F.,"") $ "DRUMMER*TOTVS"
Local cItemSCX	  := ""
Local cAliasTmp	  := ""
Local nItemSCX	  := 0
Default cAliasSC1 := "SC1"
Default cNumOP	  := ""
Default aItensRat := {}
Default nPosObj	  := 0

If aItens == NIL
	oObjeto:PurchaseRequisNumberItem 	:= (cAliasSC1)->C1_ITEM
	oObjeto:Product						:= (cAliasSC1)->C1_PRODUTO
	oObjeto:MeasureUnit					:= (cAliasSC1)->C1_UM
	oObjeto:Quantity					:= (cAliasSC1)->C1_QUANT
	oObjeto:Unit2ofMeasure				:= (cAliasSC1)->C1_SEGUM
	oObjeto:Quantityin2MeasUnit			:= (cAliasSC1)->C1_QTSEGUM
	oObjeto:Necessity					:= (cAliasSC1)->C1_DATPRF
	oObjeto:Warehouse					:= (cAliasSC1)->C1_LOCAL
	oObjeto:Notes						:= (cAliasSC1)->C1_OBS
	oObjeto:ProductionOrder				:= (cAliasSC1)->C1_OP
	oObjeto:CostCenter					:= (cAliasSC1)->C1_CC
	oObjeto:AccountCode					:= (cAliasSC1)->C1_CONTA
	oObjeto:AccountItem					:= (cAliasSC1)->C1_ITEMCTA
	oObjeto:DescriptionofProduct		:= (cAliasSC1)->C1_DESCRI
	oObjeto:QuantityinOrders			:= (cAliasSC1)->C1_QUJE
	oObjeto:TypeofProductionOrder		:= (cAliasSC1)->C1_TPOP
	oObjeto:BuyersGroup					:= (cAliasSC1)->C1_GRUPCOM
	oObjeto:AccountValueClass			:= (cAliasSC1)->C1_CLVL
	oObjeto:MrpSeqOriginatedPR			:= (cAliasSC1)->C1_SEQMRP
	oObjeto:UnitValue					:= (cAliasSC1)->C1_VUNIT
	UserFields("SC1",@oObjeto:UserFields,cAliasSC1)
	If AliasIndic("SCX")
		SCX->(dbSetOrder(1))
		SCX->(dbSeek(xFilial("SCX")+PurchasesRequest:PRHEADER:PURCHASEREQUISNUMBER+oObjeto:PurchaseRequisNumberItem))
		While SCX->(!Eof()) .And. xFilial("SCX") == SCX->CX_FILIAL .And.;
			PurchasesRequest:PRHEADER:PURCHASEREQUISNUMBER == SCX->CX_SOLICIT .And. oObjeto:PurchaseRequisNumberItem == SCX->CX_ITEMSOL
			If nX < 1
				PurchasesRequest:PRITEM[nPosObj]:APPORTITENS := {}
			EndIf
			AAdd(PurchasesRequest:PRItem[nPosObj]:ApportItens,WSClassNew("ApportPurchaseRequestView"))
			nX++			
			PurchasesRequest:PRITEM[nPosObj]:APPORTITENS[nX]:ITEMAPPORTIONMENT := SCX->CX_PERC
			PurchasesRequest:PRITEM[nPosObj]:APPORTITENS[nX]:COSTCENTER := SCX->CX_CC
			PurchasesRequest:PRITEM[nPosObj]:APPORTITENS[nX]:LEDGERACCOUNT := SCX->CX_CONTA
			PurchasesRequest:PRITEM[nPosObj]:APPORTITENS[nX]:LEDGERACCOUNTITEM := SCX->CX_ITEMCTA
			PurchasesRequest:PRITEM[nPosObj]:APPORTITENS[nX]:CLASSVALUE := SCX->CX_CLVL
			SCX->(dbSkip())
		EndDo
	EndIf
Else
	For nY := 1 To Len(oObjeto:PRItem)
		If nOpc == 4 .And. (cAliasSC1)->( MsSeek(xFilial("SC1")+cNumSC+oObjeto:PRItem[nY]:PurchaseRequisNumberItem) )
			AAdd( aItem, { "LINPOS", "C1_ITEM",oObjeto:PRItem[nY]:PurchaseRequisNumberItem} )		
		EndIf
   		aadd(aItem,{"C1_ITEM"		,oObjeto:PRItem[nY]:PurchaseRequisNumberItem,NIL})
		aadd(aItem,{"C1_PRODUTO"	,oObjeto:PRItem[nY]:Product					,NIL})
		aadd(aItem,{"C1_QUANT"		,oObjeto:PRItem[nY]:Quantity				,NIL})
		aadd(aItem,{"C1_SEGUM"		,oObjeto:PRItem[nY]:Unit2ofMeasure			,NIL})
		aadd(aItem,{"C1_QTSEGUM"	,oObjeto:PRItem[nY]:Quantityin2MeasUnit		,NIL})
		aadd(aItem,{"C1_DATPRF"		,oObjeto:PRItem[nY]:Necessity				,NIL})
		aadd(aItem,{"C1_LOCAL"		,oObjeto:PRItem[nY]:Warehouse				,NIL})
		aadd(aItem,{"C1_OBS"		,oObjeto:PRItem[nY]:Notes					,NIL})
		aadd(aItem,{"C1_CC"			,oObjeto:PRItem[nY]:CostCenter				,NIL})
		aadd(aItem,{"C1_CONTA"		,oObjeto:PRItem[nY]:AccountCode				,NIL})
		aadd(aItem,{"C1_ITEMCTA"	,oObjeto:PRItem[nY]:AccountItem				,NIL})
		aadd(aItem,{"C1_DESCRI"		,oObjeto:PRItem[nY]:DescriptionofProduct	,NIL})
		aadd(aItem,{"C1_QUJE"		,oObjeto:PRItem[nY]:QuantityinOrders		,NIL})
		aadd(aItem,{"C1_TPOP"		,oObjeto:PRItem[nY]:TypeofProductionOrder	,NIL})
		aadd(aItem,{"C1_GRUPCOM"	,oObjeto:PRItem[nY]:BuyersGroup				,NIL})
		aadd(aItem,{"C1_CLVL"		,oObjeto:PRItem[nY]:AccountValueClass		,NIL})
		aadd(aItem,{"C1_SEQMRP"		,oObjeto:PRItem[nY]:MrpSeqOriginatedPR		,NIL})
		aadd(aItem,{"C1_VUNIT"		,oObjeto:PRItem[nY]:UnitValue				,NIL})
		aadd(aItem,{"C1_IDAPS"		,oObjeto:PRItem[nY]:IDAPS					,NIL})
	    aadd(aItem,{"AUTVLDCONT"	,oObjeto:PRItem[nY]:AUTVLDCONT				,NIL})

		If Empty(cNumOP)
			If !Empty(oObjeto:PRItem[nY]:ProductionOrder)
				cNumOP := oObjeto:PRItem[nY]:ProductionOrder
			ElseIf lApsInUse .And. SC2->(FieldPos("C2_IDAPS")) > 0 .And. !Empty(oObjeto:PRItem[nY]:IDAPS)
				cAliasTmp := GetNextAlias()
	
				BeginSQL Alias cAliasTmp
					SELECT 	SC2.C2_NUM||SC2.C2_ITEM||SC2.C2_SEQUEN||SC2.C2_ITEMGRD C2_OP 
					FROM %Table:SC2% SC2 
					WHERE 	SC2.%NotDel% AND 
							SC2.C2_IDAPS = %Exp:oObjeto:PRItem[nY]:IDAPS%
				EndSQL

				cNumOP := (cAliasTmp)->C2_OP
			
				(cAliasTmp)->(dbCloseArea())
			EndIf
		EndIf
		aadd(aItem,{"C1_OP",cNumOP,NIL})

		PutUserFields("SC1",@oObjeto:PRItem[nY]:UserFields,@aItem)
		aItem:= WsAutoOpc(aItem,lApsInUse)
		aadd(aItens,aItem)
		aItem:= {}
		If AliasIndic("SCX")
			nItemSCX := 0
			For nX := 1 To Len(PURCHASESREQUEST:PRITEM[nY]:APPORTITENS)
				aAdd(aItemRat,{"CX_ITEM",StrZero(nX,Len(SCX->CX_ITEM)),NIL})
				aAdd(aItemRat,{"CX_PERC",PURCHASESREQUEST:PRITEM[nY]:APPORTITENS[nX]:ITEMAPPORTIONMENT,NIL})
				aAdd(aItemRat,{"CX_CC",PURCHASESREQUEST:PRITEM[nY]:APPORTITENS[nX]:COSTCENTER,NIL})
				aAdd(aItemRat,{"CX_CONTA",PURCHASESREQUEST:PRITEM[nY]:APPORTITENS[nX]:LEDGERACCOUNT,NIL})
				aAdd(aItemRat,{"CX_ITEMCTA",PURCHASESREQUEST:PRITEM[nY]:APPORTITENS[nX]:LEDGERACCOUNTITEM,NIL})
				aAdd(aItemRat,{"CX_CLVL",PURCHASESREQUEST:PRITEM[nY]:APPORTITENS[nX]:CLASSVALUE,NIL})
				aItemRat := WsAutoOpc(aItemRat,lApsInUse)
				If cItemSCX <> 	oObjeto:PRItem[nY]:PurchaseRequisNumberItem
					cItemSCX := oObjeto:PRItem[nY]:PurchaseRequisNumberItem
					aAdd(aItensRat,{cItemSCX,{}})
					nItemSCX++
				EndIf
				aAdd(aItensRat[nItemSCX][2],aItemRat)
				aItemRat := {}
			Next nX
		EndIf
	Next nY
EndIf	
RestArea(aArea)
Return(.T.)

Function wsmat110()
Return

/*/{Protheus.doc} PutByAPS
// Função para inclusão de documento e compra pela integração APS
@author TOTVS
@since 14/10/2019
@version 1.0
@return lGeraSC, Flag para geração de SC
@param oItem, object, Objeto parametro do WS com os dados dos itens
@param cNumAE, characters, Número do documento gerado (referência)
@param cSolicit, characters, Nome do solicitante
@type function
/*/
Static Function PutByAPS(oItem, cNumAE, cSolicit)
Local lGeraSC	:= .T.
Local aCampos	:= {}
Local aPequena	:= {}

Default cSolicit := ""

If Len(oItem) == 1	//-- Integração com APS sempre mandará item a item
	lGeraSC := .F.
	
	Aadd(aCampos,{"SOLICIT",cSolicit})
	Aadd(aCampos,{"DATPRF",oItem[1]:Necessity}) 
	Aadd(aCampos,{"TPOP",oItem[1]:TypeofProductionOrder}) 
	
	Aadd(aPequena,{oItem[1]:Product,oItem[1]:Quantity,cFilAnt,cFilAnt,"1","","","",0,{},"","",aCampos})
    aDocsCom := ComGeraDoc(aPequena,.T.,.F.,.F.,.T.,ComDTNeces({oItem[1]:Necessity}),"WSMAT110",.F.,1)
    
    If !Empty(aDocsCom[1])
	    If SuperGetMv("MV_APS",.F.,"") == "TOTVS"
	    	//-- DOC.ITEM.TIPO.XFILIAL
	    	cWSMAT110 := Substr(aDocsCom[1,1,2],1,6) +"." +Substr(aDocsCom[1,1,2],7) +"." 
	    	If aDocsCom[1,1,3] == "1"
	    		cWSMAT110 += "SC."	//-- Solicitação de compra
	    	ElseIf aDocsCom[1,1,3] == "2"
	    		cWSMAT110 += "PC."	//-- Pedido de compra
	    	ElseIf aDocsCom[1,1,3] == "3"
	    		cWSMAT110 += "AE."	//-- Autorização de entrega
	    	ElseIf aDocsCom[1,1,3] == "5"
	    		cWSMAT110 += "MD."	//-- Medição de contrato (GCT)
	    	ElseIf aDocsCom[1,1,3] == "6"
	    		cWSMAT110 += "SI."	//-- Solicitação de importação (EIC)
	    	EndIf
	    	cWSMAT110 += aDocsCom[1,1,1]
	    		
		    cNumAE := cWSMAT110
		Else
			cWSMAT110 := Substr(aDocsCom[1,1,2],1,6)
			cNumAE := cWSMAT110
		EndIf
	EndIf
EndIf

Return lGeraSC

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ WS110PPR	   ³Autor  ³Rodrigo Toledo Silva³Data  ³26.07.2012 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Funcao criada para execucao do metodo PUTPURCHASESREQUEST   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1: Codigo do usuario                                    ³±±
±±³          ³ ExpC2: Dados do Solicitacao de compras                      ³±±
±±³          ³ ExpC3: Opcao 3-Inclusao; 4-Alteracao                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpC1: Retorna o numero  da solicitacao de compra gravada   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ TOTVS APS                                           		   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function WS110PPR(PurchasesRequest,Option,cNumOP)
Local aArea		 := GetArea()
Local aCab		 := {}
Local aItens	 := {}
Local aItensRat	 := {}
Local aErro      := {}
Local cErro      := ""
Local lRetorno	 := .T.
Local nX         := 0
Local nOpc		 := If(Empty(Option) .Or. Option=="3",3,4)
Local lApsInUse  := SuperGetMv("MV_APS",.F.,"") $ "DRUMMER*TOTVS"
Local lGeraSC    := .T.    
Local cNumDoc	 := ""
Local cNumSC	 := ""
Default cNumOP	 := ""

PRIVATE cWSMAT110 := ""
PRIVATE lMsErroAuto := .F.
PRIVATE lAutoErrNoFile := .T.      

WsChangeModule("SIGACOM")
dbSelectArea("SC1")
dbSetOrder(1)

If nOpc==4
	If Empty(PurchasesRequest:PRHeader:PurchaseRequisNumber) .Or. ;
	   !MsSeek(xFilial("SC1")+PurchasesRequest:PRHeader:PurchaseRequisNumber)
		lRetorno := .F.
		SetSoapFault("PutPurchasesRequest",STR0009)  //"Solicitação de compras inválida"
	EndIf
EndIf
	
If lRetorno 
	If lApsInUse .And. nOpc==3
		If AllTrim(PurchasesRequest:PRHeader:NameofPetitioner) == "DRUMMER" .And. !Empty(cSoliDru := AllTrim(SuperGetMv("MV_SOLIDRU",.F.,"")))
			PurchasesRequest:PRHeader:NameofPetitioner := cSoliDru
		EndIf
		lGeraSC := PutByAPS(PurchasesRequest:PRItem,@cNumDoc,PurchasesRequest:PRHeader:NameofPetitioner)
	EndIf	
	If lRetorno .And. lGeraSC
		aEval(PurchasesRequest:PRItem,{|x| If(Empty(x:PurchaseRequisNumberItem),Nil,Aadd(aItens,x))})
		PurchasesRequest:PRItem := aClone(aItens)
		aItens := {}
		aItensRat := {}
		PutScHead(PurchasesRequest:PRHeader,,@aCab,,@cNumDoc)
		PutScItem(PurchasesRequest,,@aItens,PurchasesRequest:PRHeader:PurchaseRequisNumber,nOpc,cNumOP,@aItensRat)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Valida as informacoes de cabecalho e Itens antes de executar ³
		//³a rotina automatica                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ExistBlock("WSMT110A")
			aRetPe := ExecBlock("WSMT110A",.F.,.F.,{aCab,aItens})
			If ValType(aRetPe) == "A" .And. Len(aRetPe) == 2 .And. ValType(aRetPe[1]) == "A" .And. ValType(aRetPe[2]) == "A"
				aCab := aClone(aRetPe[1])
				aItens := aClone(aRetPe[2])
			EndIf
		EndIf
		If !Empty(aCab) .And. !Empty(aItens)
			MSExecAuto({|v,x,y,z| MATA110(v,x,y,,,z)},aCab,aItens,nOpc,aItensRat)
		Else
			lRetorno := .F.
		EndIf
		If lMsErroAuto
			aErro := GetAutoGRLog()
			For nX := 1 To Len(aErro)
				cErro += aErro[nX] + Chr(13)+Chr(10)
			Next nX
			SetSoapFault("PutPurchasesRequest",cErro)
			lRetorno := .F.
		EndIf
	EndIf
	If lRetorno
		cNumSC := If(Empty(cWSMAT110),cNumDoc,cWSMAT110)
	EndIf
EndIf

RestArea(aArea)
Return(cNumSC)
