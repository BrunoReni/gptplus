#include 'tlpp-core.th'
#include 'tlpp-rest.th'

namespace totvs.protheus.backoffice.bindingchartofaccounts.referenceaccount.service
using Namespace totvs.protheus.backoffice.bindingchartofaccounts.referenceaccount.data

Class bindingchartofaccountsReferenceAccountService

    Public Method New() Constructor
    Public Method GetData()
    Public Method Post( jData )
    Public Method Put( jData )

EndClass

Method New() Class bindingchartofaccountsReferenceAccountService

Return Self

Method GetData() Class bindingchartofaccountsReferenceAccountService

    Local jResult := JsonObject():New()
    Local obindingchartofaccountsReferenceAccountData := bindingchartofaccountsReferenceAccountData():New()

        obindingchartofaccountsReferenceAccountData:setPage(1)
        obindingchartofaccountsReferenceAccountData:setPageSize(10)
        obindingchartofaccountsReferenceAccountData:GetPage()

        jResult['success'] := obindingchartofaccountsReferenceAccountData:lOk
        jResult['payload'] := obindingchartofaccountsReferenceAccountData:GetJSONResponse()
        
    obindingchartofaccountsReferenceAccountData:DeActivate()
    FreeObj( obindingchartofaccountsReferenceAccountData )

Return jResult

/*Exemplo Json

{
  "filial": "D MG",
  "entref": "10",
  "codpla": "000001",
  "ctaref": "1.01.01.01.01",
  "classe": "2",
  "tputil": "A",
  "versao": "0001",
  "natcta": "01",
  "ctasup": "1.01.01.01",
  "cvdItens": [
    {
      "id": 8,
      "conta": "000000002",
      "desccta": "CONTROL CTA ANALI. DEBITO  CTBR265",
      "ccusto": "Selecione"
    }
  ],
  "date": "2023-03-02T20:07:10.195Z"
}

*/

Method Post( jData ) Class bindingchartofaccountsReferenceAccountService

    Local n
    Local jResponse := JsonObject():New()
    Local jBody     := JsonObject():New()
    Local aAreaCVD  := {}
    Local cxFilial  := PadR(jData['filial'], TamSX3("CVD_FILIAL")[1])
    Local cConta    := PadR(jData['conta' ],TamSX3("CVD_CONTA")[1])
    Local cEntRef   := PadR(jData['entref'],TamSX3("CVD_ENTREF")[1])
    Local cCtaref   := PadR(jData['ctaref'],TamSX3("CVD_CTAREF")[1]) 
    Local cCcusto   := PadR(jData['ccusto'],TamSX3("CVD_CUSTO")[1])
    Local cVersao   := PadR(jData['versao'],TamSX3("CVD_VERSAO")[1])
    Local aCVDItens := jData['cvdItens']
    
    aAreaCVD := CVD->( GetArea() )
    CVD->(DbSetOrder(1))//CVD_FILIAL+CVD_CONTA+CVD_ENTREF+CVD_CTAREF+CVD_CUSTO+CVD_VERSAO
    
    For n := 1 to Len(aCVDItens)

        cConta    := PadR(aCVDItens[n]["conta"],TamSX3("CVD_CONTA")[1])
        cCcusto   := PadR(aCVDItens[n]["ccusto"] ,TamSX3("CVD_CUSTO")[1])

        cCcusto := IIF(Alltrim(cCcusto) == "Selecione", PadR("",TamSX3("CVD_CUSTO")[1]), cCcusto)

        If ! CVD->( DbSeek( cxFilial + cConta + cEntRef + cCtaref + cCcusto + cVersao ) )
            RecLock('CVD',.T.)
                CVD->CVD_FILIAL := cxFilial
                CVD->CVD_CONTA  := cConta
                CVD->CVD_ENTREF := cEntRef
                CVD->CVD_CODPLA := jData['codpla'] 
                CVD->CVD_CTAREF := cCtaref
                CVD->CVD_CLASSE := jData['classe']
                CVD->CVD_CUSTO  := cCcusto
                CVD->CVD_TPUTIL := jData['tputil']
                CVD->CVD_VERSAO := cVersao
                CVD->CVD_NATCTA := jData['natcta']
                CVD->CVD_CTASUP := jData['ctasup']  
            CVD->(MSunlock())            
        EndIf

        jResponse['success'] := 200

        jBody := jResponse

    Next n    

Return jBody

/*
{
  "filial": "D MG",
  "entref": "10",
  "codpla": "000001",
  "ctaref": "1.01.01.01.01",
  "classe": "2",
  "tputil": "A",
  "versao": "0001",
  "natcta": "01",
  "ctasup": "1.01.01.01",
  "cvdItens": [
    {
      "id": 8,
      "conta": "000000002",
      "desccta": "CONTROL CTA ANALI. DEBITO  CTBR265",
      "ccusto": "Selecione"
    }
  ],
  "date": "2023-03-02T20:07:10.195Z"
}
*/

Method Put( jData ) Class bindingchartofaccountsReferenceAccountService

    Local n
    Local jResponse := JsonObject():New()
    Local jBody     := JsonObject():New()
    Local aAreaCVD  := {}
    Local cxFilial  := PadR(jData['filial'], TamSX3("CVD_FILIAL")[1])
    Local cConta    := PadR(jData['conta' ],TamSX3("CVD_CONTA")[1])
    Local cEntRef   := PadR(jData['entref'],TamSX3("CVD_ENTREF")[1])
    Local cCtaref   := PadR(jData['ctaref'],TamSX3("CVD_CTAREF")[1]) 
    Local cCcusto   := PadR(jData['ccusto'],TamSX3("CVD_CUSTO")[1])
    Local cVersao   := PadR(jData['versao'],TamSX3("CVD_VERSAO")[1])
    Local aCVDItens := jData['cvdItens']
    
    aAreaCVD := CVD->( GetArea() )
    CVD->(DbSetOrder(1))//CVD_FILIAL+CVD_CONTA+CVD_ENTREF+CVD_CTAREF+CVD_CUSTO+CVD_VERSAO
  
    For n := 1 to Len(aCVDItens)

        cConta    := PadR(aCVDItens[n]["conta"],TamSX3("CVD_CONTA")[1])
        cCcusto   := PadR(aCVDItens[n]["ccusto"] ,TamSX3("CVD_CUSTO")[1])

        cCcusto := IIF(Alltrim(cCcusto) == "Selecione", PadR("",TamSX3("CVD_CUSTO")[1]), cCcusto)

        If CVD->( DbSeek( cxFilial + cConta + cEntRef + cCtaref + cCcusto + cVersao ) )
            RecLock('CVD',.F.)
                CVD->(dbDelete())  
            CVD->(MSunlock())
            jResponse['success'] := 200
        else
            jResponse['errorCode'] := 400
            jResponse['errorMessage'] := "Registro não foi localizado para exclusao"
        EndIf

        jBody := jResponse

    Next n    

Return jBody
