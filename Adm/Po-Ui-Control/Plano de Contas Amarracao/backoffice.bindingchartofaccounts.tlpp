#Include "Protheus.ch"
#Include "RwMake.ch"
#Include "FwBrowse.ch"
#Include "FwMvcDef.ch"
#Include "TOPCONN.ch"
#INCLUDE "TBICONN.CH"
#include 'tlpp-core.th'
#include 'tlpp-rest.th'

namespace totvs.protheus.backoffice.bindingchartofaccounts

//-------------------------------------------------------------------
/*/{Protheus.doc} tcAnswerRest
Envia dados do plano de contas Protheus
@param jServiceResponse Objeto json com os seguintes atributos:
    - {
        "result" : .T.  ou .F.
        ,"result" : String com valor a retornar ou a msg de erro
        "status-code": Codigo http caso se queira mudar o default (200 pra .t., 500 para .f. o result)

    }
@author Douglas Silva
/*/
//-------------------------------------------------------------------

Class bindingchartofaccounts

    Public METHOD New() CONSTRUCTOR

    @Get("/v1/bindingchartofaccounts/loadcvn")
    Public METHOD getCVNLoad()
    
End Class

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método construtor da classe
@author  Douglas Rodrigues da Silva
@since   10/02/2023
@version 1.0
/*/
//-------------------------------------------------------------------

METHOD New() CLASS bindingchartofaccounts

Return

METHOD getCVNLoad() CLASS bindingchartofaccounts

Local tabela as character
Local cFilter as character
Local jQuery as object
Local cJson      := ''
Local nList      := 0
Local cCorte     := 10
Local aList      := {}
Local nX
Local nInit      := 1
Local nTerm      := cCorte
Local aAux      := {}
Private cEmp as character
Private cFil as character


jQuery      := oRest:GetQueryRequest()

cFilter   :=	'%' + IIF(jQuery['filter'] <> Nil,jQuery['filter'], '' ) + '%'
tabela    := IIF( jQuery['tabela'] <> Nil , jQuery['tabela'] , '' )

cEmp  := IIF( jQuery['empresa'] <> Nil, jQuery['empresa'], '' )
cFil  := IIF( jQuery['filial'] <> Nil , jQuery['filial'] , '' )

//Separa Grupo de Empresa e Filial
aGrupFil := SEPARA(cFil,"|")

If Len(aGrupFil) > 0
    cEmp := Alltrim(aGrupFil[1])
    cFil := Alltrim(aGrupFil[2])
EndIf

If (Type( "cEmpAnt" ) == "U" .or. Type( "cFilAnt" ) == "U") .Or. (cEmpAnt <> cEmp .Or. cFilAnt <> cFil)

    If Empty(cEmp) 
      oRest:setStatusCode(400)
      lOk := oRest:setFault('{"error": "' + "Empresa|Filial|tabela não informados nos parâmetros." + '"}')
      oRest:setStatusCode(400)
      Return lOk
    EndIf    
    
	RPCClearEnv()  
    RPCSetType( 3 )
    RpcSetEnv(cEmp, cFil)

EndIf

    aList  := fQryCabCvn(cFilter)
    nDivid := Ceiling(Len(aList)/cCorte)
    
    cJson := "{"
    cJson += ' "items": ['

    For nX := 1 To nDivid
        cJson += ''
        //CVN_FILIAL,CVN_CODPLA,CVN_VERSAO,CVN_DTVIGI,CVN_DTVIGF,CVN_ENTREF,CVN_DSCPLA
        For nList := nInit to Iif(nX=nDivid,Len(aList),nTerm)
            cJson += '{'
            cJson += '	"filial":"'+aList[nList,1]+'",'
            cJson += '	"codigo":"'+aList[nList,2]+'",'
            cJson += '	"versao":"'+aList[nList,3]+'",'
            cJson += '	"dtvigini":"'+DTOC(STOD(aList[nList,4]))+'",'
            cJson += '	"dtvigfim":"'+DTOC(STOD(aList[nList,5]))+'",'
            cJson += '	"entref":"'+aList[nList,6]+'",'
            cJson += '	"descricao":"'+aList[nList,7]+'",'
            cJson += '  "items": ['+ aList[nList,8]+']
            cJson += '},'
        Next nList

        nInit := nInit+cCorte
        nTerm := nTerm+cCorte
        cJson := Left(cJson, RAT(",", cJson) - 1)
        cJson += ']'

        Aadd(aAux,cJson)
    Next nX    

    cJson += '}'

Return oRest:setResponse(cJson)

Static Function fQryCabCvn(cSearch)

Local cAliasSQL  := GetNextAlias()
Local cAliasSQL2 := ''
Local cQuery     := ''
Local aRet       := {}
Local cJson      := ''
Local nX         := 1

    cQuery := " SELECT CVN_FILIAL,CVN_CODPLA,CVN_DSCPLA,CVN_DTVIGI,CVN_DTVIGF,CVN_ENTREF,CVN_VERSAO
    cQuery += " FROM "+RetSqlName('CVN')+" "
    cQuery += " WHERE D_E_L_E_T_=''
    cQuery += " AND CVN_CLASSE = '2' "
    cQuery += " AND CVN_FILIAL = '" + xFilial("CVN") +"'
    If cSearch <> "%%"
        cQuery += " AND CVN_CODPLA LIKE '"+cSearch+"' "
    EndIf
    cQuery += " GROUP BY CVN_FILIAL,CVN_CODPLA,CVN_DSCPLA,CVN_DTVIGI,CVN_DTVIGF,CVN_ENTREF,CVN_VERSAO  
    cQuery += " ORDER BY 1"
    
    MPSysOpenQuery(cQuery,cAliasSQL)

    While (cAliasSQL)->(!EoF())
        Aadd(aRet,{;
            RemoveEspec((cAliasSQL)->CVN_FILIAL),;
            RemoveEspec((cAliasSQL)->CVN_CODPLA),;
            RemoveEspec((cAliasSQL)->CVN_VERSAO),;
            RemoveEspec((cAliasSQL)->CVN_DTVIGI),;
            RemoveEspec((cAliasSQL)->CVN_DTVIGF),;
            RemoveEspec((cAliasSQL)->CVN_ENTREF),;
            RemoveEspec((cAliasSQL)->CVN_DSCPLA) })

            //If lSearch .And. !Empty(cSearch)
                cAliasSQL2 := GetNextAlias()

                cQuery := " SELECT CVN.* "
                cQuery += " FROM "+RetSqlName('CVN')+" CVN "
                cQuery += " WHERE D_E_L_E_T_=' '
                cQuery += " AND CVN_FILIAL = '"+(cAliasSQL)->CVN_FILIAL+"'"
                cQuery += " AND CVN_CODPLA = '"+(cAliasSQL)->CVN_CODPLA+"'"
                cQuery += " AND CVN_VERSAO = '"+(cAliasSQL)->CVN_VERSAO+"'"
                cQuery += " AND CVN_ENTREF = '"+(cAliasSQL)->CVN_ENTREF+"'"
                cQuery += " AND CVN_CLASSE = '2' "

                MPSysOpenQuery(cQuery,cAliasSQL2)

                dbSelectArea((cAliasSQL2))            
                (cAliasSQL2)->(DbGotop())
           
                if (cAliasSQL2)->(!EOF()) 
                    While (cAliasSQL2)->(!EOF()) 

                    //CVN_TPUTIL CVN_CTAREL	CVN_STAPLA                    
                    cJson += '{'
                    cJson += '	"id":"'       + cValToChar((cAliasSQL2)->R_E_C_N_O_)+'",'
                    cJson += '	"contaRef":"' +RemoveEspec((cAliasSQL2)->CVN_CTAREF)+'",'
                    cJson += '	"descricao":"'+RemoveEspec((cAliasSQL2)->CVN_DSCCTA)+'",'
                    cJson += '	"classe":"'   +RemoveEspec((cAliasSQL2)->CVN_CLASSE)+'",'
                    cJson += '	"natcta":"'   +RemoveEspec((cAliasSQL2)->CVN_NATCTA)+'",'
                    cJson += '	"ctasup":"'   +RemoveEspec((cAliasSQL2)->CVN_CTASUP)+'",'
                    cJson += '	"linha":"'    +RemoveEspec((cAliasSQL2)->CVN_LINHA) +'"'
                    cJson += '},


                    (cAliasSQL2)->(DBSKIP())  
                    endDo

                //EndIf 
                (cAliasSQL2)->(DBCloseArea()) 
                cJson := Left(cJson, RAT(",", cJson) - 1)
                aadd(aRet[nX],cJson)    
                cJson      := ''
            Endif     
        (cAliasSQL)->(DbSkip())
        nX++
    EndDo

Return aRet

Static Function RemoveEspec(cWord)
    cWord := OemToAnsi(AllTrim(cWord))
    cWord := FwNoAccent(cWord)
    cWord := FwCutOff(cWord)
    cWord := strtran(cWord,""+'"'+"","")
    cWord := AllTrim(cWord)
Return cWord
