#include "tlpp-core.th"
#include "backoffice.controlchecklist.ecdvalidators.data.protheus.ch"

namespace totvs.protheus.backoffice.controlchecklist.Ecdvalidators
using namespace totvs.protheus.backoffice.controlchecklist.util

//-------------------------------------------------------------------
/*/{Protheus.doc} EcdValidatorsProtheusData
Classe responsavel pelas consultas de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class EcdValidatorsProtheusData from FWAdapterBaseV2
    Private Data aOptionApi as Array
    Private Data aFieldsApi as Array
    
    Public  method new()
    Public  method getAllEcdValidators()
    Public  method setOptionsQuery()
    Public  method setOptionsManual() 
    Public  method getOptionsQuery() as Array 
    Public  method setFieldsQuery() 
    Public  method getFieldsQuery() as Array    
    Static  method getData()  as object
    Private method getOptionsApi() as Logical        
    Private method getWhere2() as Character
    Private method getWhere3() as Character
    Private method getQuery() as Character         
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} EcdValidatorsProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class EcdValidatorsProtheusData
    ::aOptionApi := {} 
    ::aFieldsApi := {} 

    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} EcdValidatorsProtheusData
Metodo para chamada e validacao do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class EcdValidatorsProtheusData as Object
    static __oActiveData as Object

    If ValType(__oActiveData) == "U"
        __oActiveData := EcdValidatorsProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAllEcdValidators
Metodo responsavel pela busca das validacoes Ecd

@author Totvs
/*/
//-------------------------------------------------------------------
method getAllEcdValidators(cOption as Character) class EcdValidatorsProtheusData
    Local aArea     := GetArea() as Array     
    Local aFields   := {} as Array
    Local nPage     := 0 as Numeric
    Local nPageSize := 0 as Numeric
    Local cTable    := "" as Character
                
    If ::getOptionsApi(cOption) //Armazena opcoes das queries                         
        aFields := ::getFieldsQuery()
        AddMapFields(self, aFields)

        ccGetPageAndPageSize(@nPage, @nPageSize)   

        If nPage==0
            nPage := 1
            nPageSize := 50
        EndIf 

        ::setPage(nPage)
        ::setPageSize(nPageSize)
        ::SetQuery(::getQuery())
        If (cOption == "1" .Or. cOption == "3")
            ::SetWhere(::getWhere2(@cTable))
        ElseIf (cOption == "2")
            ::SetWhere(::getWhere3(@cTable))        
        EndIf        
        ::SetOrder(cTable+".R_E_C_N_O_")                

        If ::Execute()
            ::FillGetResponse()
        EndIf
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)      
    FwFreeArray(::aFieldsApi)  
return

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function AddMapFields(oSelf as Object, aFields as Array)
    Local nI := 0 as Numeric
   
    If ValType(aFields) == "A"    
        For nI := 1 To Len(aFields)
            oSelf:addMapFields(aFields[nI][1], aFields[nI][1], .T., .F., {aFields[nI][1], aFields[nI][2],; 
                                    TamSx3(aFields[nI][4])[1], 0}, aFields[nI][3]+"."+aFields[nI][4])                        
        Next nI
    EndIf

    FwFreeArray(aFields) 
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getOptionsApi
Armazena as informacoes para cada consulta a ser realizada

@author Totvs
/*/
//-------------------------------------------------------------------
method getOptionsApi(cOption) class EcdValidatorsProtheusData as Logical
Local cExceptionApi  := "" as Character
Local lCTBSDOC	     := GetNewPar( 'MV_CTBSDOC' , .F. )
Local lGRVISOR	     := GetNewPar( 'MV_GRVISOR' , .F. )
Local clCTBSDOC      := "" As Character
Local clGRVISOR      := "" As Character
Local aTablesComp    := {} as Array
Local aTablesDiverge := {} as Array
Local aDateTaf       := {} as Array
Local aTimeTaf       := {} as Array
Local nX             := 0 As Numeric
Local aLayout        := {} As Array
Local aLayoutEnc     := {} As Array
Local cPath          := "" As Character
Local cFile          := "" As Character 
Local cError         := "" As Character 
Local cWarning       := "" As Character 
Local cBarra         := "" As Character
Local aDataSMOcc     := {} As Array
Local aManualDiverge := {} as Array
Local lRet           := .F. as Logical

::aOptionApi := {}
::aFieldsApi := {}

Do Case
    Case cOption == "1" //As contas contabeis listadas abaixo nao possuem conta referencial
        If ChkFile("CT1") .And. ChkFile("CVD")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0001 //"As contas contabeis listadas abaixo nao possuem conta referencial

            //Informacoes da query a ser realizada                                  
            ::setOptionsQuery("CT1", "CVD", "CVD.CVD_FILIAL = CT1.CT1_FILIAL AND CVD.CVD_CONTA = CT1.CT1_CONTA AND CVD.D_E_L_E_T_ = ' ' AND CT1.D_E_L_E_T_ = ' '","CVD_FILIAL IS NULL AND CT1_BLOQ <> '1' AND CT1_CLASSE = '2' AND CT1.D_E_L_E_T_ = ' '", cExceptionApi)                                
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CT1", "CT1_FILIAL")
            ::setFieldsQuery("accountreferential", "C", "CT1", "CT1_CONTA")
                        
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0002 //"Tabela CT1/CVD não encontrada no dicionário de dados"                                              
            ::setOptionsQuery(,,,, cExceptionApi)      
        EndIf
    Case cOption == "2" //Os planos de contas abaixo possuem os campos CT1_NATCTA ou CT1_NTSPED em branco
        If ChkFile("CT1")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0003 //"Os planos de contas abaixo possuem os campos CT1_NATCTA ou CT1_NTSPED em branco"

            //Informacoes da query a ser realizada                                  
            ::setOptionsQuery("CT1", "", "","(CT1.CT1_NATCTA = ' ' OR CT1.CT1_NTSPED = ' ') AND CT1.D_E_L_E_T_ = ' ' AND CT1_CLASSE = '2' AND CT1_BLOQ <> '1'", cExceptionApi)                                            
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CT1", "CT1_FILIAL")
            ::setFieldsQuery("accountreferential", "C", "CT1", "CT1_CONTA")
                        
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0004 //"Tabela CT1 não encontrada no dicionário de dados"                                      
            ::setOptionsQuery(,,,, cExceptionApi)      
        EndIf
    Case cOption == "3" //As contas contabeis(CT1) abaixo possuem conta, classe e natureza diferentes da CVD
        If ChkFile("CT1")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0005 //"As contas contabeis(CT1) abaixo possuem conta, classe e natureza diferentes da CVD" 

            //Informacoes da query a ser realizada
            ::setOptionsQuery("CT1", "CVD", "CVD.CVD_FILIAL = CT1.CT1_FILIAL AND CVD.CVD_CLASSE = CT1.CT1_CLASSE AND CVD.CVD_NATCTA = CT1.CT1_NATCTA AND CVD.CVD_CONTA = CT1.CT1_CONTA AND CT1.D_E_L_E_T_ = ' ' AND CVD.D_E_L_E_T_ = ' '","CVD_FILIAL IS NULL AND CT1_BLOQ <> '1' AND CT1_CLASSE = '2' AND CT1.D_E_L_E_T_ = ' '", cExceptionApi)

            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CT1", "CT1_FILIAL")
            ::setFieldsQuery("accountreferential", "C", "CT1", "CT1_CONTA")
                        
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0006  //"Tabela CT1 não encontrada no dicionário de dados"
            ::setOptionsQuery(,,,, cExceptionApi)      
        EndIf
    Case cOption == "4" //Compartilhamento entre tabelas (CT1, CVD e CVN)
        //Tabelas que precisam estar com o mesmo compartilhamento
        aAdd(aTablesComp, "CT1")
        aAdd(aTablesComp, "CVD")
        aAdd(aTablesComp, "CVN")     
        
        aTablesDiverge := ccSharedCompare(aTablesComp)

        If Len(aTablesDiverge) > 0
            //Mensagem de excecao a ser retornada caso divergencias de compartilhamento
            cExceptionApi := STR0007 // "O compartilhamento das tabelas CT1, CVD e CVN estão diferentes. É obrigatório a utilização do mesmo compartilhamento para essas tabelas"                      
            
            //Itens divergentes
            aAdd(aManualDiverge, {"table", "name", "shared"})
            aAdd(aManualDiverge, aTablesDiverge)                                                        
        EndIf

        ::setOptionsQuery(,,,, cExceptionApi) 
        ::setOptionsManual(aManualDiverge)
    Case cOption == "5" //Compartilhamento entre tabelas CTG e CQD
        //Tabelas que precisam estar com o mesmo compartilhamento
        aAdd(aTablesComp, "CTG")
        aAdd(aTablesComp, "CQD")   
        
        aTablesDiverge := ccSharedCompare(aTablesComp)

        If Len(aTablesDiverge) > 0
            //Mensagem de excecao a ser retornada caso divergencias de compartilhamento
            cExceptionApi := STR0008 //"O compartilhamento das tabelas CTG e CQD estão diferentes. A performance na contabilização poderá ser comprometida"                      
            
            //Itens divergentes
            aAdd(aManualDiverge, {"table", "name", "shared"})
            aAdd(aManualDiverge, aTablesDiverge)                                                        
        EndIf

        ::setOptionsQuery(,,,, cExceptionApi) 
        ::setOptionsManual(aManualDiverge)
    Case cOption == "6" //Percorre todos as tabelas verificando qual tem compartilhamento diferente da CT2
    //Tabelas que precisam estar com o mesmo compartilhamento
        aAdd(aTablesComp, "CT2")
        aAdd(aTablesComp, "CTC")  
        aAdd(aTablesComp, "CTF")   
        aAdd(aTablesComp, "CQ0")  
        aAdd(aTablesComp, "CQ1")  
        aAdd(aTablesComp, "CQ2")  
        aAdd(aTablesComp, "CQ3")  
        aAdd(aTablesComp, "CQ4")  
        aAdd(aTablesComp, "CQ5")  
        aAdd(aTablesComp, "CQ6")   
        aAdd(aTablesComp, "CQ7")  
        aAdd(aTablesComp, "CQ8")  
        aAdd(aTablesComp, "CQ9")  
        aAdd(aTablesComp, "CSQ")
        
        aTablesDiverge := ccSharedCompare(aTablesComp, .T.)

        If Len(aTablesDiverge) > 0
            //Mensagem de excecao a ser retornada caso divergencias de compartilhamento
            cExceptionApi := STR0009 //"Existem tabelas de movimentos/saldos com o compartilhamento diferente da CT2"                      
            
            //Itens divergentes
            aAdd(aManualDiverge, {"table", "name", "shared"})
            aAdd(aManualDiverge, aTablesDiverge)                                                        
        EndIf

        ::setOptionsQuery(,,,, cExceptionApi) 
        ::setOptionsManual(aManualDiverge)      
    Case cOption == "7" //Pesquiso em todas as empresas o tamanho do campo M0_NOMECOM
        aDataSMOcc = ccSM0Compare()
        aAdd(aManualDiverge, {"company", "branch", "lenghtname"})
        aAdd(aManualDiverge, aDataSMOcc)
        ::setOptionsQuery()
        ::setOptionsManual(aManualDiverge)  
    Case cOption == "8" //Compartilhamento entre tabelas
        //Tabelas que precisam estar com o mesmo compartilhamento
        aAdd(aTablesComp, "CT1")
        aAdd(aTablesComp, "CT5")  
        aAdd(aTablesComp, "CT8")   
        aAdd(aTablesComp, "CT9")  
        aAdd(aTablesComp, "CTA")  
        aAdd(aTablesComp, "CTB")  
        aAdd(aTablesComp, "CTD")  
        aAdd(aTablesComp, "CTE")  
        aAdd(aTablesComp, "CTG")  
        aAdd(aTablesComp, "CTH")   
        aAdd(aTablesComp, "CTJ")  
        aAdd(aTablesComp, "CTL")  
        aAdd(aTablesComp, "CTN")  
        aAdd(aTablesComp, "CTO")  
        aAdd(aTablesComp, "CTP") 
        aAdd(aTablesComp, "CTR")  
        aAdd(aTablesComp, "CTS")   
        aAdd(aTablesComp, "CTT")  
        aAdd(aTablesComp, "CV5")  
        aAdd(aTablesComp, "CV9")  
        aAdd(aTablesComp, "CVA")  
        aAdd(aTablesComp, "CVB") 
        aAdd(aTablesComp, "CVC")  
        aAdd(aTablesComp, "CVD")   
        aAdd(aTablesComp, "CVE")  
        aAdd(aTablesComp, "CVF")  
        aAdd(aTablesComp, "CVN")
        
        aTablesDiverge := ccSharedCompare(aTablesComp)

        If Len(aTablesDiverge) > 0
            //Mensagem de excecao a ser retornada caso divergencias de compartilhamento
            cExceptionApi := STR0010 // "Existem tabelas com compartilhamentos diferentes entre si"                      
            
            //Itens divergentes
            aAdd(aManualDiverge, {"table", "name", "shared"})
            aAdd(aManualDiverge, aTablesDiverge)                                                        
        EndIf

        ::setOptionsQuery(,,,, cExceptionApi) 
        ::setOptionsManual(aManualDiverge)
    Case cOption == "9" //Informações do Layout do ECD na pasta system
        cBarra  := If(issrvunix(), "/", "\")
        cPath   := GetSrvProfString("StartPath", "") + If( Right( GetSrvProfString("StartPath",""), 1 ) == cBarra, "", cBarra )
        
        // Muda para pasta SYSTEM
        CurDir(cPath)

        Aadd(aLayout,"ecdlivro_a.xml")
        Aadd(aLayout,"ecdlivro_b.xml")
        Aadd(aLayout,"ecdlivro_g.xml")
        Aadd(aLayout,"ecdlivro_r.xml")
        Aadd(aLayout,"ecdlivro_z.xml")

        // Percorro todos os elementos do array para bsucar os layouts e a versão utilizando o Parse do XML
        For nx := 1 To Len(aLayout)
            if File(cPath+"leiaute9"+cBarra+aLayout[nx])
            // Executo o Parse do XML (Busco o xml partir do rootpath do ambiente)
                cFile := cPath+"leiaute9"+cBarra+aLayout[nx]
                oXml  := XmlParserFile( cFile, "_", @cError, @cWarning )
                If Empty(cError) 
                    Aadd(aLayoutEnc, STR0011 + " - " + STR0012 + oXml:_LAYOUTCTB:_VERSION:Text) // "Encontrado com sucesso" // " Versao: "
                Endif
            Else
                Aadd(aLayoutEnc, STR0013) //"Não encontrado"
            EndIf
        Next nX

        // Adiciona os 5 layouts definidos inicialmente no array aLayout
        aAdd(aManualDiverge, {"ecdlivro_a", "ecdlivro_b", "ecdlivro_g", "ecdlivro_r", "ecdlivro_z"})
        aAdd(aManualDiverge, {{aLayoutEnc[1],aLayoutEnc[2],aLayoutEnc[3],aLayoutEnc[4],aLayoutEnc[5]}}) 

        ::setOptionsQuery()
        ::setOptionsManual(aManualDiverge) 
    Case cOption == "10" //Validação de Parametros
        If lCTBSDOC
            clCTBSDOC = STR0014 // "Parametro MV_CTBSDOC: Validar os Lançamentos por Documento."
        Else
            clCTBSDOC = STR0015 // "Parametro MV_CTBSDOC: Validar os Lançamentos por Lote."
        EndIf        
        If !lGRVISOR
            clGRVISOR = STR0016 // "Parâmetro MV_GRVISOR Desativado. Por favor, verifique."
        Else
            clGRVISOR = STR0017 //"Parâmetro MV_GRVISOR Ativado."
        EndIf

        aAdd(aManualDiverge, {"parameter_CTBSDOC", "parameter_GRVISOR"})
        aAdd(aManualDiverge, {{clCTBSDOC,clGRVISOR}}) 

        ::setOptionsQuery()
        ::setOptionsManual(aManualDiverge)     
EndCase
FwFreeArray(aTablesComp)
FwFreeArray(aTablesDiverge)
FwFreeArray(aDateTaf)
FwFreeArray(aTimeTaf)
FwFreeArray(aManualDiverge)
return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} getWhere2
Método para retornar o where da query

@author Totvs
/*/
//-------------------------------------------------------------------
method getWhere2(cTable) class EcdValidatorsProtheusData as Character
    Local cWhere := "" as Character
    Local aOptionsApi := ::getOptionsQuery() as Array    
    Local cRangeFil  := "" As Character      
    cTable := aOptionsApi[1] 

    cRangeFil := BranchsRng(aOptionsApi[1]) 

	cWhere := " LEFT JOIN "+RetSQLName(aOptionsApi[2])+" "+aOptionsApi[2]+" ON ("+aOptionsApi[3]+")"+;
	          " WHERE "+aOptionsApi[4]+" AND "+ cRangeFil
    
    FwFreeArray(aOptionsApi)
return cWhere

//-------------------------------------------------------------------
/*/{Protheus.doc} getWhere3
Método para retornar o where da query

@author Totvs
/*/
//-------------------------------------------------------------------
method getWhere3(cTable) class EcdValidatorsProtheusData as Character
    Local cWhere := "" as Character
    Local aOptionsApi := ::getOptionsQuery() as Array        
    Local cRangeFil  := "" As Character        
    cTable := aOptionsApi[1]

    cRangeFil := BranchsRng(aOptionsApi[1])    

	cWhere := "WHERE " + ::aOptionApi[1]+".D_E_L_E_T_ = ' ' AND "+aOptionsApi[4] + "AND " + cRangeFil 
        
    FwFreeArray(aOptionsApi)
return cWhere

//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Realiza a query para busca de informacoes

@author Totvs
/*/
//-------------------------------------------------------------------
method getQuery() class EcdValidatorsProtheusData as Character
    Local cQuery := "" as Character
    Local cMainTable := ::getOptionsQuery()[1] as Character   

    cQuery := " SELECT DISTINCT #QueryFields#"
    cQuery += " FROM " + RetSQLName(cMainTable) + " "+cMainTable
    cQuery += " #QueryWhere#"    
return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} setOptionsQuery
Insere informacoes para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method setOptionsQuery(cMainTable as Character, cJoinTable as Character,; 
                            cOnQuery as Character, cOnQuery2 as Character, cExceptionApi as Character) class EcdValidatorsProtheusData
Default cMainTable     := ""
Default cJoinTable     := ""
Default cOnQuery       := ""
Default cExceptionApi  := ""

aAdd(::aOptionApi, cMainTable)
aAdd(::aOptionApi, cJoinTable)
aAdd(::aOptionApi, cOnQuery)
aAdd(::aOptionApi, cOnQuery2)
aAdd(::aOptionApi, cExceptionApi)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getOptionsQuery
Retorna informacoes para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method getOptionsQuery() class EcdValidatorsProtheusData as Array
return aClone(::aOptionApi)

//-------------------------------------------------------------------
/*/{Protheus.doc} setFieldsQuery
Insere campos para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method setFieldsQuery(cLabel as Character, cType as Character,; 
                        cTable as Character, cField as Character) class EcdValidatorsProtheusData
Default cLabel := ""
Default cType  := ""
Default cTable := ""
Default cField := ""

aAdd(::aFieldsApi, {cLabel, cType, cTable, cField})
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getOptionsQuery
Retorna informacoes para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method getFieldsQuery() class EcdValidatorsProtheusData as Array
return aClone(::aFieldsApi)

//-------------------------------------------------------------------
/*/{Protheus.doc} setOptionsManual
Insere informacoes para itens manuais de retorno

@author Totvs
/*/
//-------------------------------------------------------------------
method setOptionsManual(aManualDiverge as Array) class EcdValidatorsProtheusData
Local nI := 0 as Numeric
Local nX := 0 as Numeric
Local aItemsManual := {} as Array

Default aManualDiverge := {}

If Len(aManualDiverge) > 0    
    For nI := 1 To Len(aManualDiverge[2])
        aAdd(aItemsManual, Array(Len(aManualDiverge[1])))        
        For nX := 1 To Len(aManualDiverge[1])
            aItemsManual[Len(aItemsManual)][nX] := {aManualDiverge[1][nX], aManualDiverge[2][nI][nX]}                         
        Next
    Next
EndIf
aAdd(::aOptionApi, aClone(aItemsManual))
FwFreeArray(aItemsManual)
return
