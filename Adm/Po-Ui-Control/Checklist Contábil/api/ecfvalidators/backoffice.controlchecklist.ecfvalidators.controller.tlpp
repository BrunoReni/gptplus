#include "tlpp-core.th"
#include "backoffice.controlchecklist.ecfvalidators.controller.ch"

namespace totvs.protheus.backoffice.controlchecklist.ecfvalidators
using namespace totvs.protheus.backoffice.controlchecklist.util

//-------------------------------------------------------------------
/*/{Protheus.doc} EcfValidators
Classe principal de controle, onde é inicializado o EndPoint

@author Totvs
/*/
//-------------------------------------------------------------------
class EcfValidators	    	
	public method new()
		
	@Get("/api/cc/ecfvalidators/")	
    public method getEcfValidatorByOption()
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} EcfValidators
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new() class EcfValidators	
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getEcfValidatorByOption
Metodo que inicia a chamada das validacoes de ECF por opcao enviada
na chamada do get

@author Totvs
/*/
//-------------------------------------------------------------------
method getEcfValidatorByOption() class EcfValidators		
	Local lResponse   := .F. as Logical
    Local cChaveRes   := "message" as Character
    Local cResponse   := "Invalid response." as Character
	Local cOption     := "" as Character
	Local aOptionsApi := {} as Array	
	Local jResponse   := JsonObject():New() as Json
	Local oService    := EcfValidatorsService():getInstance() as Object		

	If (oRest:getQueryRequest():GetJsonText("option") != "null")
    	cOption := oRest:getQueryRequest():GetJsonText("option")
	EndIf	            		               

	If ValType(cOption) == "C" .And. !Empty(cOption)
		If Val(cOption) >= 1 .And. Val(cOption) <= 11
			jResponse:fromJson(oService:getEcfValidatorByOption(cOption, aOptionsApi))
			If jResponse:GetJsonText("items") <> "[]" //Adiciona mensagem de exceção somente se encontrou itens
				If Empty(jResponse:GetJsonText("items")) .Or. jResponse:GetJsonText("items") == "null"				
					jResponse["items"] := {}
				EndIf
				If ValType(aOptionsApi) == "A"
					If Len(aOptionsApi) >= 4 //Mensagem de excecao
						jResponse["exceptionmessage"] := JsonObject():new()
						jResponse["exceptionmessage"] := aOptionsApi[4]
					EndIf
					If Len(aOptionsApi) >= 5 //Itens manuais
						SetManualItems(jResponse["items"], aOptionsApi[5])					
					EndIf
				EndIf
			EndIf
			ccAnswerRest(jResponse, .T.)
		Else
			cResponse := STR0001 // "Parâmetro incorreto enviado para a API, valores aceitos são: 1,2,3,4,5,6,7,8,9,10 ou 11"			
			ccSetResponse(lResponse, cChaveRes, cResponse, .F.)
		EndIf
	Else
		cResponse := STR0002 //"Não foi enviado parâmetro para a API, verifique a URL"
		ccSetResponse(lResponse, cChaveRes, cResponse, .F.)
	EndIf

FwFreeArray(aOptionsApi)
FreeObj(oService)	
return

//-------------------------------------------------------------------
/*/{Protheus.doc} SetManualItems
Adiciona items manuais no Json de retorno

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function SetManualItems(aItems as Array, aOptions as Array)
Local nI := 0 as Numeric
Local nX := 0 as Numeric

For nI := 1 To Len(aOptions)
	aAdd(aItems, JsonObject():new())
	
	For nX := 1 To Len(aOptions[nI])
		aItems[Len(aItems)][aOptions[nI][nX][1]] := aOptions[nI][nX][2]	
	Next	
Next
Return
