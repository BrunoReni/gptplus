#include "tlpp-core.th"
#include "backoffice.controlchecklist.ecfvalidators.data.protheus.ch"

namespace totvs.protheus.backoffice.controlchecklist.ecfvalidators
using namespace totvs.protheus.backoffice.controlchecklist.util

//-------------------------------------------------------------------
/*/{Protheus.doc} EcfValidatorsProtheusData
Classe responsavel pelas consultas de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class EcfValidatorsProtheusData from FWAdapterBaseV2
    Private Data aOptionApi as Array
    Private Data aFieldsApi as Array
    
    Public  method new()
    Public  method getAllEcfValidators()
    Public  method setOptionsQuery()
    Public  method setOptionsManual() 
    Public  method getOptionsQuery() as Array 
    Public  method setFieldsQuery() 
    Public  method getFieldsQuery() as Array    
    Static  method getData()  as object
    Private method getOptionsApi() as Logical    
    Private method getWhere() as Character
    Private method getQuery() as Character    
    Private method getManualC1OxCT1() as Array
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} EcfValidatorsProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class EcfValidatorsProtheusData
    ::aOptionApi := {} 
    ::aFieldsApi := {} 

    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} EcfValidatorsProtheusData
Metodo para chamada e validacao do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class EcfValidatorsProtheusData as Object
    static __oActiveData as Object

    If ValType(__oActiveData) == "U"
        __oActiveData := EcfValidatorsProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAllEcfValidators
Metodo responsavel pela busca das validacoes ECF

@author Totvs
/*/
//-------------------------------------------------------------------
method getAllEcfValidators(cOption as Character) class EcfValidatorsProtheusData
    Local aArea     := GetArea() as Array     
    Local aFields   := {} as Array
    Local nPage     := 0 as Numeric
    Local nPageSize := 0 as Numeric
    Local cTable := "" as Character
                
    If ::getOptionsApi(cOption) //Armazena opcoes das queries                         
        aFields := ::getFieldsQuery()
        AddMapFields(self, aFields)
        ccGetPageAndPageSize(@nPage, @nPageSize)    
        
        If nPage==0
            nPage := 1
            nPageSize := 50
        EndIf 
        
        ::setPage(nPage)
        ::setPageSize(nPageSize)
        ::SetQuery(::getQuery())
        ::SetWhere(::getWhere(@cTable))
        ::SetOrder(cTable+".R_E_C_N_O_")

        If ::Execute()
            ::FillGetResponse()
        EndIf
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)      
    FwFreeArray(::aFieldsApi)  
return

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function AddMapFields(oSelf as Object, aFields as Array)
    Local nI := 0 as Numeric
   
    If ValType(aFields) == "A"    
        For nI := 1 To Len(aFields)
            oSelf:addMapFields(aFields[nI][1], aFields[nI][1], .T., .F., {aFields[nI][1], aFields[nI][2],; 
                                    TamSx3(aFields[nI][4])[1], 0}, aFields[nI][3]+"."+aFields[nI][4])                        
        Next nI
    EndIf

    FwFreeArray(aFields) 
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getOptionsApi
Armazena as informacoes para cada consulta a ser realizada

@author Totvs
/*/
//-------------------------------------------------------------------
method getOptionsApi(cOption) class EcfValidatorsProtheusData as Logical
Local cExceptionApi  := "" as Character
Local cVersionTaf    := "" as Character
Local cAutoContidas  := "" as Character
Local nVerBase := 0000 as Numeric
Local nVerAtu  := GetNewPar("MV_VAUTCONT", 1000) //Parâmetro que indica qual a versão atual das autocontidas na base do cliente
Local aTablesComp    := {} as Array
Local aTablesDiverge := {} as Array
Local aDateTaf       := {} as Array
Local aTimeTaf       := {} as Array
Local aManualDiverge := {} as Array
Local lRet := .F. as Logical

::aOptionApi := {}
::aFieldsApi := {}

Do Case
    Case cOption == "1" //Naturezas da conta do plano referencial são diferentes da natureza da conta do plano associada (CT1_NTSPED)
        If ChkFile("CT1") .And. ChkFile("CVD")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0001 //"Os planos de contas listados abaixo possuem a natureza da conta do plano referencial (CVN_NATCTA) "
            cExceptionApi += STR0002 //"diferente da natureza da conta do plano associada (CT1_NTSPED)"

            //Informacoes da query a ser realizada                                  
            ::setOptionsQuery("CVD", "CT1", "CT1.CT1_FILIAL = CVD.CVD_FILIAL AND CT1.CT1_CONTA = CVD.CVD_CONTA","CT1.CT1_NTSPED <> CVD.CVD_NATCTA AND CVD.D_E_L_E_T_ = ' ' AND CT1.D_E_L_E_T_ = ' ' AND CT1_BLOQ <> '1'", cExceptionApi)
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CVD", "CVD_FILIAL")
            ::setFieldsQuery("accountreferential", "C", "CVD", "CVD_CONTA")
            ::setFieldsQuery("accountnature", "C", "CVD", "CVD_NATCTA")                               
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0003 // "Tabela CT1/CVN não encontrada no dicionário de dados"                                                  
            ::setOptionsQuery(,,, cExceptionApi)
        EndIf
    Case cOption == "2" //ID_Conta_Referencial (CEZ_IDCODC) existe na estrutura da visão gerencial utilizada (Tabela CHA)
        If ChkFile("CHA") .And. ChkFile("CEZ")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0004 //"Os ID_Conta_Referencial (CEZ_IDCODC) abaixo não existem na estrutura da visão "
            cExceptionApi += STR0005 //"gerencial utilizada (Tabela CHA)"

            //Informacoes da query a ser realizada
            ::setOptionsQuery("CEZ", "CHA", "CHA.CHA_ID = CEZ.CEZ_IDCODC AND CHA.D_E_L_E_T_ = ' ' AND CEZ.D_E_L_E_T_ = ' '","CHA_FILIAL IS NULL AND CEZ.D_E_L_E_T_ = ' '", cExceptionApi)                

            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CEZ", "CEZ_FILIAL")   
            ::setFieldsQuery("registerid", "C", "CEZ", "CEZ_ID")                            
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0006 //"Tabela CHA/CEZ não encontrada no dicionário de dados"                                                  
            ::setOptionsQuery(,,, cExceptionApi)     
        EndIf            
    Case cOption == "3" //ID_Conta_Referencial (CAQ_IDCODC) existe na estrutura da visão gerencial utilizada (Tabela CAQ)
        If ChkFile("CHA") .And. ChkFile("CAQ")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0007 // "Os ID_Conta_Referencial (CAQ_IDCODC) abaixo não existem na estrutura "
            cExceptionApi += STR0008 // "da visão gerencial utilizada (Tabela CHA)"
 
            //Informacoes da query a ser realizada
            ::setOptionsQuery("CAQ", "CHA", "CHA.CHA_ID = CAQ.CAQ_IDCODC AND CHA.D_E_L_E_T_ = ' ' AND CAQ.D_E_L_E_T_ = ' '","CHA_FILIAL IS NULL AND CAQ.D_E_L_E_T_ = ' '", cExceptionApi)               
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CAQ", "CAQ_FILIAL") 
            ::setFieldsQuery("registerid", "C", "CAQ", "CAQ_ID")
            ::setFieldsQuery("accountreferential", "C", "CAQ", "CAQ_IDCODC")
            ::setFieldsQuery("registerecf", "C", "CAQ", "CAQ_REGECF")   
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0009 // "Tabela CHA/CAQ não encontrada no dicionário de dados"
            ::setOptionsQuery(,,, cExceptionApi)    
        EndIf
    Case cOption == "4" //Conta superior (C1O_CTASUP) existe no plano de contas (CT1_CONTA)
        If ChkFile("CT1") .And. ChkFile("C1O")
		 //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0010 // "As contas superiores (C1O_CTASUP) abaixo não existem no plano "
            cExceptionApi += STR0011 // "de contas utilizado (Tabela CT1)"
            
            aAdd(aManualDiverge, {"branch","account","accounttop"})
            aAdd(aManualDiverge, ::getManualC1OxCT1())

            ::setOptionsQuery(,,,"CT1_BLOQ <> '1'", cExceptionApi)  
            ::setOptionsManual(aManualDiverge)
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0012 //"Tabela CT1/C1O não encontrada no dicionário de dados"
            ::setOptionsQuery(,,, cExceptionApi)                
        EndIf
    Case cOption == "5" //Natureza (C1O_CODNAT) existe no banco de dados (C2R_ID)
        If ChkFile("C2R") .And. ChkFile("C1O")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0013 // "As naturezaz (C1O_CODNAT) abaixo não existem no plano de contas contabil (Tabela C2R) "
            cExceptionApi += STR0014 // "ou as tabelas auto contidas estão desatualizadas"
            
            //Informacoes da query a ser realizada
            ::setOptionsQuery("C1O", "C2R", "C2R.C2R_ID = C1O.C1O_CODNAT  AND C1O.D_E_L_E_T_ = ' ' AND C2R.D_E_L_E_T_ = ' '","C2R_FILIAL IS NULL AND C1O.D_E_L_E_T_ = ' '", cExceptionApi)                
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "C1O", "C1O_FILIAL")
            ::setFieldsQuery("accountreferential", "C", "C1O", "C1O_CODIGO")
            ::setFieldsQuery("accountnature", "C", "C1O", "C1O_CODNAT")                
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0015 // "Tabela C2R/C1O não encontrada no dicionário de dados"
            ::setOptionsQuery(,,, cExceptionApi)    
        EndIf
    Case cOption == "6" //ID (CAP_IDPERA) existe no banco de dados (CAH_ID)
        If ChkFile("CAP") .And. ChkFile("CAH")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0016 // "Os ID Período Apuração (CAP_IDPERA) abaixo não existem na base de dados (Tabela CAH) "
            cExceptionApi += STR0017 // "ou as tabelas auto contidas estão desatualizadas"
            
            //Informacoes da query a ser realizada
            ::setOptionsQuery("CAP", "CAH", "CAH.CAH_ID = CAP.CAP_IDPERA AND CAP.D_E_L_E_T_ = ' ' AND CAH.D_E_L_E_T_ = ' '","CAH_FILIAL IS NULL AND CAP.D_E_L_E_T_ = ' '", cExceptionApi)                
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CAP", "CAP_FILIAL")
            ::setFieldsQuery("registerid", "C", "CAP", "CAP_ID")
            ::setFieldsQuery("idcalculation", "C", "CAP", "CAP_IDPERA")                
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0018 // "Tabela CAP/CAH não encontrada no dicionário de dados"
            ::setOptionsQuery(,,, cExceptionApi)    
        EndIf
    Case cOption == "7" //Entidade gerencial CTS_CONTAG existe na base do TAF (Tabela CHA/CHA_CODIGO)
        If ChkFile("CHA") .And. ChkFile("CTS")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0019 // "A Entidades Gerenciais abaixo não existem na base de dados do TAF (Tabela CHA)"                
            
            //Informacoes da query a ser realizada
            ::setOptionsQuery("CTS", "CHA", "CHA.CHA_CODIGO = CTS.CTS_CONTAG AND CTS.D_E_L_E_T_ = ' ' AND CHA.D_E_L_E_T_ = ' '", "CHA_FILIAL IS NULL AND CTS.D_E_L_E_T_ = ' '", cExceptionApi)                
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CTS", "CTS_FILIAL")
            ::setFieldsQuery("visionid", "C", "CTS", "CTS_CODPLA")
            ::setFieldsQuery("accountgerential", "C", "CTS", "CTS_CONTAG")
            ::setFieldsQuery("accounttop", "C", "CTS", "CTS_CTASUP")         
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0020 // "Tabela CHA/CTS não encontrada no dicionário de dados"
            ::setOptionsQuery(,,, cExceptionApi)    
        EndIf
    Case cOption == "8" //Entidade gerencial CVN_CTAREF existe na base do TAF (Tabela CHA/CHA_CODIGO)
        If ChkFile("CHA") .And. ChkFile("CVN")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0021 // "Os Planos Gerenciais abaixo não existem na base de dados do TAF (Tabela CHA)"                
            
            //Informacoes da query a ser realizada
            ::setOptionsQuery("CVN", "CHA", "CHA.CHA_CODIGO = CVN.CVN_CTAREF AND CVN.D_E_L_E_T_ = ' ' AND CHA.D_E_L_E_T_ = ' '", "CHA_FILIAL IS NULL AND CVN.D_E_L_E_T_ = ' '", cExceptionApi)               
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CVN", "CVN_FILIAL")
            ::setFieldsQuery("referentialplane", "C", "CVN", "CVN_CODPLA")
            ::setFieldsQuery("accountreferential", "C", "CVN", "CVN_CTAREF")
            ::setFieldsQuery("accounttop", "C", "CVN", "CVN_CTASUP")             
            lRet := .T.
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0022 // "Tabela CHA/CVN não encontrada no dicionário de dados"
            ::setOptionsQuery(,,, cExceptionApi)    
        EndIf
    Case cOption == "9" //Entidade gerencial CVF_CONTAG existe na base do TAF (Tabela CHA/CHA_CODIGO)
        If ChkFile("CHA") .And. ChkFile("CVF")
            //Mensagem de excecao a ser retornada caso encontre informacoes na query
            cExceptionApi := STR0023 // "A Entidades Gerenciais abaixo não existem na base de dados do TAF (Tabela CHA)"              
            
            //Informacoes da query a ser realizada
            ::setOptionsQuery("CVF", "CHA", "CHA.CHA_CODIGO = CVF.CVF_CONTAG AND CVF.D_E_L_E_T_ = ' ' AND CHA.D_E_L_E_T_ = ' '", "CHA_FILIAL IS NULL AND CVF.D_E_L_E_T_ = ' '", cExceptionApi)                
            
            //Campos do MapFields
            ::setFieldsQuery("branch", "C", "CVF", "CVF_FILIAL")
            ::setFieldsQuery("visionid", "C", "CVF", "CVF_CODIGO")
            ::setFieldsQuery("accountgerential", "C", "CVF", "CVF_CONTAG")
            ::setFieldsQuery("accounttop", "C", "CVF", "CVF_CTASUP")            
            lRet := .T.  
        Else
            //Excecao de tabela nao encontrada
            cExceptionApi := STR0024 // "Tabela CHA/CVF não encontrada no dicionário de dados"
            ::setOptionsQuery(,,, cExceptionApi)
        EndIf
    Case cOption == "10" //Compartilhamento entre tabelas
        //Tabelas que precisam estar com o mesmo compartilhamento
        aAdd(aTablesComp, "CT1")
        aAdd(aTablesComp, "CVD")
        aAdd(aTablesComp, "CVN")
        aAdd(aTablesComp, "C1O")
        aAdd(aTablesComp, "C2R")
        aAdd(aTablesComp, "CH5")
        aAdd(aTablesComp, "CHA")        
        
        aTablesDiverge := ccSharedCompare(aTablesComp)

        If Len(aTablesDiverge) > 0
            //Mensagem de excecao a ser retornada caso divergencias de compartilhamento
            cExceptionApi := STR0025 // "Existem tabelas com compartilhamentos diferentes entre si"                        
            
            //Itens divergentes
            aAdd(aManualDiverge, {"table", "name", "shared"})
            aAdd(aManualDiverge, aTablesDiverge)                                                        
        EndIf

        ::setOptionsQuery(,,, cExceptionApi) 
        ::setOptionsManual(aManualDiverge)
    Case cOption == "11" //Informações do Layout TAF
        GetFuncArray("taflayout",,,, aDateTaf, aTimeTaf)        		    	                        
        aAdd(aManualDiverge, {"version", "selfcontained"})
        
        //Versao Taf
        cVersionTaf := STR0027 // "Layout TAF não encontrado"
        If Len(aDateTaf) > 0 .And. Len(aTimeTaf) > 0		                                        
            cVersionTaf := STR0026 +cValToChar(aDateTaf[1])+" - "+cValToChar(aTimeTaf[1]) //  "Versão do layout TAF: "
	    EndIf

        //Informacoes Auto-Contidas
        If FindFunction("FTafVAutoC")
		    nVerBase :=	FTafVAutoC()
	    EndIf

        cAutoContidas := STR0031 + STR0029 +cValToChar(nVerAtu)+" - "+ STR0030 +cValToChar(nVerBase)             
        If nVerAtu >= nVerBase		               
            cAutoContidas := STR0028 + STR0029 +cValToChar(nVerAtu)+" - "+STR0030 +cValToChar(nVerBase) // "Auto-Contidas Atualizadas: " // "Versão Cliente: " // "Versão TOTVS: "      		                           	    
	    EndIf

        aAdd(aManualDiverge, {{cVersionTaf, cAutoContidas}}) 

        ::setOptionsQuery()
        ::setOptionsManual(aManualDiverge) 
EndCase
FwFreeArray(aTablesComp)
FwFreeArray(aTablesDiverge)
FwFreeArray(aDateTaf)
FwFreeArray(aTimeTaf)
FwFreeArray(aManualDiverge)
return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} getWhere
Método para retornar o where2 da query

@author Totvs
/*/
//-------------------------------------------------------------------
method getWhere(cTable) class EcfValidatorsProtheusData as Character
    Local cWhere := "" as Character
    Local cRangeFil  := "" As Character   
    Local aOptionsApi := ::getOptionsQuery() as Array 
    cTable := aOptionsApi[1]

    cRangeFil := BranchsRng(aOptionsApi[1])

    cWhere := " LEFT JOIN "+RetSQLName(aOptionsApi[2])+" "+aOptionsApi[2]+" ON ("+aOptionsApi[3]+")"+;
              " WHERE "+aOptionsApi[4]+" AND "+ cRangeFil

    FwFreeArray(aOptionsApi)
return cWhere

//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Realiza a query para busca de informacoes

@author Totvs
/*/
//-------------------------------------------------------------------
method getQuery() class EcfValidatorsProtheusData as Character
    Local cQuery := "" as Character
    Local cMainTable := ::getOptionsQuery()[1] as Character   

    cQuery := " SELECT DISTINCT #QueryFields#"
    cQuery += " FROM " + RetSQLName(cMainTable) + " "+cMainTable
    cQuery += " #QueryWhere#"    
return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} setOptionsQuery
Insere informacoes para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method setOptionsQuery(cMainTable as Character, cJoinTable as Character,; 
                            cOnQuery as Character, cExceptionApi as Character) class EcfValidatorsProtheusData
Default cMainTable     := ""
Default cJoinTable     := ""
Default cOnQuery       := ""
Default cExceptionApi  := ""

aAdd(::aOptionApi, cMainTable)
aAdd(::aOptionApi, cJoinTable)
aAdd(::aOptionApi, cOnQuery)
aAdd(::aOptionApi, cExceptionApi)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getOptionsQuery
Retorna informacoes para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method getOptionsQuery() class EcfValidatorsProtheusData as Array
return aClone(::aOptionApi)

//-------------------------------------------------------------------
/*/{Protheus.doc} setFieldsQuery
Insere campos para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method setFieldsQuery(cLabel as Character, cType as Character,; 
                        cTable as Character, cField as Character) class EcfValidatorsProtheusData
Default cLabel := ""
Default cType  := ""
Default cTable := ""
Default cField := ""

aAdd(::aFieldsApi, {cLabel, cType, cTable, cField})
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getOptionsQuery
Retorna informacoes para queries das APIs

@author Totvs
/*/
//-------------------------------------------------------------------
method getFieldsQuery() class EcfValidatorsProtheusData as Array
return aClone(::aFieldsApi)

//-------------------------------------------------------------------
/*/{Protheus.doc} setOptionsManual
Insere informacoes para itens manuais de retorno

@author Totvs
/*/
//-------------------------------------------------------------------
method setOptionsManual(aManualDiverge as Array) class EcfValidatorsProtheusData
Local nI := 0 as Numeric
Local nX := 0 as Numeric
Local aItemsManual := {} as Array

Default aManualDiverge := {}

If Len(aManualDiverge) > 0    
    For nI := 1 To Len(aManualDiverge[2])
        aAdd(aItemsManual, Array(Len(aManualDiverge[1])))        
        For nX := 1 To Len(aManualDiverge[1])
            aItemsManual[Len(aItemsManual)][nX] := {aManualDiverge[1][nX], aManualDiverge[2][nI][nX]}                         
        Next
    Next
EndIf
aAdd(::aOptionApi, aClone(aItemsManual))
FwFreeArray(aItemsManual)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getManualC1OxCT1
Query específica para a tabela C1O

@author Totvs
/*/
//-------------------------------------------------------------------
method getManualC1OxCT1() class EcfValidatorsProtheusData
Local aRet := {} as Array
Local cQuery := "" as Character
Local cAliasC1O := "" as Character
Local cRangeFil  := "" As Character        

cRangeFil := BranchsRng("C1O") 

cAliasC1O := GetNextAlias()

cQuery := " SELECT branch,account,accounttop, ITEM_ORDER  FROM ( "+;
                " SELECT "+;
	                " C1O.C1O_FILIAL branch, C1O.C1O_CODIGO account, SUP.C1O_CODIGO accounttop, "+;
                    " ROW_NUMBER() OVER (  ORDER BY C1O.R_E_C_N_O_ ) ITEM_ORDER "+;
	            " FROM "+RetSQLName("C1O")+" C1O "+;
		        " INNER JOIN "+RetSQLName("C1O")+" SUP ON SUP.C1O_ID = C1O.C1O_CTASUP "+;
		        " LEFT JOIN "+RetSQLName("CT1")+" CT1 ON CT1.CT1_CONTA = SUP.C1O_CODIGO "+;
	            " WHERE C1O.C1O_CTASUP <> ' ' AND CT1.CT1_CONTA IS NULL AND "+;
		        " C1O.D_E_L_E_T_ = ' ' AND C1O." + cRangeFil + " ) TRB WHERE ITEM_ORDER BETWEEN 1 AND 50 "

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasC1O,.T.,.T.)

While !(cAliasC1O)->(Eof())
    aAdd(aRet, {(cAliasC1O)->branch, (cAliasC1O)->account, (cAliasC1O)->accounttop})
    (cAliasC1O)->(dbSkip())
EndDo
(cAliasC1O)->(dbCloseArea())        

return aRet
