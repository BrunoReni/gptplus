#include "tlpp-core.th"

namespace totvs.protheus.backoffice.controlchecklist.util

//-------------------------------------------------------------------
/*/{Protheus.doc} ccGetPageAndPageSize
Retorna pagina e tamanho da pagina para a consulta
@param nPage: página
@param nPage: Tamanho da página

@author Totvs
/*/
//-------------------------------------------------------------------
Function ccGetPageAndPageSize(nPage as Numeric, nPageSize as Numeric)
    If (oRest:getQueryRequest():GetJsonText("pageSize") != "null")
        nPageSize := Val(oRest:getQueryRequest():GetJsonText("pageSize"))
    EndIf

    If (oRest:getQueryRequest():GetJsonText("page") != "null")
        nPage := Val(oRest:getQueryRequest():GetJsonText("page"))
    EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} ccSetResponse
Adiciona resposta padrao na api
Quando lPadrao = T, nao trata e utiliza retorno padrao ja enviado 
pela api

@author Totvs
/*/
//-------------------------------------------------------------------
Function ccSetResponse(lResponse As Logical, cChaveRes As Character, cResponse As Character, lPadrao As Logical)
Local cReturn := "" As Character

If ValType(oRest) == "O"            
    If ValType(lResponse) == "L" .And. ValType(cChaveRes) == "C" .And. ValType(cResponse) == "C"                                 
        oRest:setKeyHeaderResponse("Content-Type", "application/json") 
        
        If lPadrao
            cReturn := cResponse
        Else
            cReturn := If(!Empty(cChaveRes) .And. !Empty(cResponse), '{"'+cChaveRes+'": "'+cResponse+'"}', '{}')                               
        EndIf

        If lResponse                        
            oRest:setResponse(cReturn)                                        
        Else                      
            oRest:setFault(cReturn)                                        
        EndIf        
    EndIf
EndIf
return

//-------------------------------------------------------------------
/*/{Protheus.doc} ccAnswerRest
Envia o resultado de sucesso ou falha para o serviço rest,
fazendo ja o tratamento do statusCode
@param jServiceResponse Objeto json com os seguintes atributos:
    - {
        "result" : .T.  ou .F.
        ,"result" : String com valor a retornar ou a msg de erro
        "status-code": Codigo http caso se queira mudar o default (200 pra .t., 500 para .f. o result)

    }
@author Totvs
/*/
//-------------------------------------------------------------------
Function ccAnswerRest(jServiceResponse as Json, lList as Logical)
    oRest:setKeyHeaderResponse("Content-Type", "application/json")

    If jServiceResponse["items"] != Nil
        If lList
            jServiceResponse["po_sync_date"] := FWTimeStamp(6)
            oRest:setResponse(jServiceResponse)        
        EndIf
    EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} ccSharedCompare
Verifica se existem tabelas divergentes
@param aTablesComp: Array com tabelas a verificar
@return aTablesResp: Array com tabelas se houver divergencia
@author Totvs
/*/
//-------------------------------------------------------------------
Function ccSharedCompare(aTablesComp as Array, lOnlyDiverg as Variant) as Array
Local nI := 0 as Numeric
Local cCompTab := "" as Character
Local cCompara := "" as Character
Local aTablesResp := {} as Array
Local lExistDiverg := .F. as Logical

//Retorna somente as tabelas com divergência de compartilhamento
DEFAULT lOnlyDiverg := .F.

For nI := 1 to Len(aTablesComp)
    SX2->(dbSeek(aTablesComp[nI]))   
    If nI == 1
        cCompTab := FWModeAccess(aTablesComp[nI], 1)+;
                    FWModeAccess(aTablesComp[nI], 2)+;
                    FWModeAccess(aTablesComp[nI], 3)
        //Sempre incluo a primeira tabela no array (tabela para comparação)
        aAdd(aTablesResp, {aTablesComp[nI],; 
                            AllTrim(X2Nome()),; 
                            cCompTab}) 
    Else
        cCompara :=  FWModeAccess(aTablesComp[nI], 1)+;
                     FWModeAccess(aTablesComp[nI], 2)+;
                     FWModeAccess(aTablesComp[nI], 3)
        
        //Se for divergência adiciono no array independente do valor de lOnlyDiverge
        If cCompTab <> cCompara 
            lExistDiverg := .T.            
            aAdd(aTablesResp, {aTablesComp[nI],; 
                                    AllTrim(X2Nome()),; 
                                    cCompara})
        ElseIf !lOnlyDiverg //Se for igual, mas !lOnlyDiverge, adiciono no array
            aAdd(aTablesResp, {aTablesComp[nI],; 
                                    AllTrim(X2Nome()),; 
                                    cCompara})            
        EndIf
    EndIf
Next nI

//Se não houver divergência limpo o array
If !lExistDiverg 
    aTablesResp := {}
EndIf

Return aClone(aTablesResp)

//-------------------------------------------------------------------
/*/{Protheus.doc} ccSM0Compare
Verifica o tamanho do campo CODCOM de todas as empresas
@return aDataSMO: Array com dados do tamanho do campo M0_CODCON
@author Totvs
/*/
//-------------------------------------------------------------------
Function ccSM0Compare() as Array

Local nI         := 0 as Numeric
Local aDataSMO   := {} As Array
Local aSM0       := {} As Array

// Pesquiso em todas as empresas o tamanho do campo M0_NOMECOM
aDataSMO := FWLoadSM0()
If Len(aDataSMO) > 0
    For nI := 1 to Len(aDataSMO)        
        aAdd(aSM0, {aDataSMO[nI][1],; // SM0_GRPEMP,;
                    aDataSMO[nI][2],; // SM0_CODFIL
                    Len(aDataSMO[nI][17])}) // SM0_NOMECON
    Next nI
EndIf

Return aClone(aSM0)

//-------------------------------------------------------------------
/*/{Protheus.doc} BranchsRng
Retorna o range de filiais que será usado das buscas
@params cMainTable: Tabela utilizada na busca
@return cRngFil: Condição a ser inserida no where da quere contendo as filiais a serem buscadas
@author Totvs
/*/
//-------------------------------------------------------------------
Function BranchsRng(cMainTable) as Character

Local aFullSM0 := {} as Array
Local aFilSM0 := {} as Array
Local nI := 0 as Numeric
Local cRngFil := "" as Character

aFullSM0 := FWLoadSM0()
For nI := 1 to Len(aFullSM0)
    If aFullSM0[nI][1] == cEmpAnt
        aAdd(aFilSM0, aFullSM0[ni][2])
    EndIf
Next

cRngFil := cMainTable + "_FILIAL " + GetRngFil(aFilSM0, cMainTable , ,) + " " 

FWFreeArray(aFullSM0)
FWFreeArray(aFilSM0)

Return cRngFil 
