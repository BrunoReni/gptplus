#include "tlpp-core.th"

namespace totvs.protheus.backoffice.controlchecklist.balancetransfer
using namespace totvs.protheus.backoffice.controlchecklist.util


//-------------------------------------------------------------------
/*/{Protheus.doc} BalanceTransferProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class BalanceTransferProtheusData from FWAdapterBaseV2
    Public method new()
    Public method getAll()
    static method getData() As object
    static method getWhere() As Character
    static method getQuery() As Character
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} BalanceTransferProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class BalanceTransferProtheusData
    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} BalanceTransferProtheusData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class BalanceTransferProtheusData As Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := BalanceTransferProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} BalanceTransferProtheusData
Método para retornar o where da query

@author Totvs
/*/
//-------------------------------------------------------------------
method getWhere() class BalanceTransferProtheusData As Character
    Local cWhere := "" as Character

    cWhere := " CT2.D_E_L_E_T_ = ' ' AND "+;
	          " CT2.R_E_C_N_O_ IN ( SELECT DISTINCT CT2.R_E_C_N_O_ "+;
                                    " FROM "+RetSQLName("CT2")+" CT2 "+;											 
                                    " INNER JOIN "+RetSQLName("CQW")+" CQW "+;
                                    " ON (CQW.CQW_FILIAL = CT2.CT2_FILIAL AND "+;
                                        " CQW.CQW_DATA = CT2.CT2_DATA AND "+;
                                        " CQW.CQW_LOTE = CT2.CT2_LOTE AND "+;
                                        " CQW.CQW_SBLOTE = CT2.CT2_SBLOTE AND "+;
                                        " CQW.CQW_DOC = CT2.CT2_DOC AND "+;
                                        " CQW.CQW_LINHA = CT2.CT2_LINHA  ) "+;
                                    " WHERE  CQW.D_E_L_E_T_ = ' ') "
return cWhere
//-------------------------------------------------------------------
/*/{Protheus.doc} getAll
Metodo responsável pela busca das configuracoes do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAll(nPage as Numeric, nPageSize as Numeric) class BalanceTransferProtheusData
    Local aArea  := GetArea() As Array

    DEFAULT nPage      := 1
    DEFAULT nPageSize  := 10
    
    AddMapFields(self)

    ::setPage(nPage)
    ::setPageSize(nPageSize)
    ::SetQuery(::getQuery("CT2"))
        
    ::SetWhere(::getWhere())
    ::SetOrder("R_E_C_N_O_")    

    If ::Execute()
        ::FillGetResponse()
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)    
return

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function AddMapFields(oSelf as Object)
    oSelf:addMapFields("branch"         , "branch"          , .T., .F., {"branch"       , "C", TamSx3("CT2_FILIAL")[1], 0}, "CT2.CT2_FILIAL")
    oSelf:addMapFields("lotnumber"      , "lotnumber"       , .T., .F., {"lotnumber"    , "C", TamSx3("CT2_LOTE"  )[1], 0}, "CT2.CT2_LOTE"  )
    oSelf:addMapFields("sublot"         , "sublot"          , .T., .F., {"sublot"       , "C", TamSx3("CT2_SBLOTE")[1], 0}, "CT2.CT2_SBLOTE")
    oSelf:addMapFields("document"       , "document"        , .T., .F., {"document"     , "C", TamSx3("CT2_DOC"   )[1], 0}, "CT2.CT2_DOC"   )
    oSelf:addMapFields("rownumber"      , "rownumber"       , .T., .F., {"rownumber"    , "C", TamSx3("CT2_LINHA" )[1], 0}, "CT2.CT2_LINHA" )
    oSelf:addMapFields("entrydate"      , "entrydate"       , .T., .F., {"entrydate"    , "C", TamSx3("CT2_DATA"  )[1], 0}, "CT2.CT2_DATA"  )
    oSelf:addMapFields("debitaccount"   , "debitaccount"    , .T., .F., {"debitaccount" , "C", TamSx3("CT2_DEBITO")[1], 0}, "CT2.CT2_DEBITO")
    oSelf:addMapFields("creditaccount"  , "creditaccount"   , .T., .F., {"creditaccount", "C", TamSx3("CT2_CREDIT")[1], 0}, "CT2.CT2_CREDIT")
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetQuery
Realiza a query para busca de informações

@author Totvs
/*/
//-------------------------------------------------------------------
method getQuery(cTable) class BalanceTransferProtheusData As Character
    Local cQuery As Character

    cQuery := " SELECT #QueryFields#"
    cQuery += " FROM " + RetSQLName(cTable) + ' CT2 '
    cQuery += " WHERE #QueryWhere#"
    
Return cQuery
