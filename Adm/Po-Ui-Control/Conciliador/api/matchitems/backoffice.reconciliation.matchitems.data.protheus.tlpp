#include "tlpp-core.th"

namespace totvs.protheus.backoffice.reconciliation.matchitems

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchItemsProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class MatchItemsProtheusData from FWAdapterBaseV2
    Public method new()
    Public method getAll()
    static method getData() As object
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchItemsProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class MatchItemsProtheusData
    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchItemsProtheusData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class MatchItemsProtheusData As Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := MatchItemsProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAll
Metodo responsável pela busca das configuracoes do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAll(nPage as Numeric, nPageSize as Numeric,;
             cTable as Character, cIdMatch as Character) class MatchItemsProtheusData

    Local aArea := GetArea() As Array    

    Default nPage     := 1
    Default nPageSize := 10

    addMapFields(self,cTable)

    ::setPage(nPage)
    ::setPageSize(nPageSize)
    ::SetQuery(getQuery(cTable))

    ::SetWhere(getWhere(cIdMatch))
    ::SetOrder("R_E_C_N_O_")

    If ::Execute()
        ::FillGetResponse()
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} AddMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function AddMapFields(oSelf as Object, cRealName as Character)
    Local aStructTmp := {} As Array
    Local cAliasAux  := "" As Character
    Local cALiasOld  := "" As Character
    Local cField     := "" As Character
    Local cTipo      := "" As Character
    Local nTamanho   := 0  As Numeric
    Local nDecimal   := 0  As Numeric   
    Local nI         := 0  As Numeric 

    If !Empty(cRealName)
        cAliasAux := GetNextAlias()
        DBUseArea( .T., "TOPCONN", cRealName, (cAliasAux), .T., .T. )
        If Select(cAliasAux) > 0
            aStructTmp := (cAliasAux)->(dbStruct())
            (cAliasAux)->(dbCloseArea())
        EndIf        
        
        For nI := 1 to Len(aStructTmp)
            
            cField   := aStructTmp[nI,1]

            If cField$"REGMATCH|DESMATCH|SEQMATCH"
                Loop
            EndIf

            cTipo    := FWSX3Util():GetFieldType(aStructTmp[nI,1])
            nTamanho := aStructTmp[nI,3]
            nDecimal := aStructTmp[nI,4]
            
            cAliasAux := FwTabPref(cField)

            If cAliasOld <> cAliasAux 
                If !AliasInDic(cAliasAux)           
                    Loop //Prevenção de erros
                EndIf
                If !Empty(cAliasAux)
                    dbSelectArea(cAliasAux)
                    cAliasOld := cAliasAux
                Endif
            EndIf           

            oSelf:AddMapFields(cField, cField, .T., .F., {cField, cTipo, nTamanho, nDecimal}, "TMP."+cField)
        Next
    EndIf

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getQuery
Realiza a query para busca de informações

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function getQuery(cTable As Character) As Character
    Local cQuery As Character

    cQuery := " SELECT #QueryFields#"
    cQuery += " FROM " + cTable + " TMP "
    cQuery += " WHERE #QueryWhere#"
Return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} getWhere
Monta o Where para a query da API

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function getWhere(cIdMatch As Character) As Character
Local cWHere as Character

cWhere := " TMP.REGMATCH = '"+SubStr(cIdMatch,1,3)+"' AND "
cWhere += " TMP.SEQMATCH = '"+SubStr(cIdMatch,4,10)+"' "

Return cWhere
