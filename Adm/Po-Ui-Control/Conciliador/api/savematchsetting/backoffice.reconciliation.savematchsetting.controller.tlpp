#include "tlpp-core.th"
#include "backoffice.reconciliation.savematchsetting.controller.ch"

namespace totvs.protheus.backoffice.reconciliation.savematchsetting
using namespace totvs.protheus.backoffice.reconciliation.util

/*/{Protheus.doc} SaveMatchSetting
    Classe principal de controle, onde é inicializado o EndPoint
    @author Totvs
    @since 04/04/2022
    @version 12.1.33
    /*/
Class SaveMatchSetting
    public method new()

    @Post("/api/tc/savematchsetting/")
    public method postSaveMatchSetting()

    private method ValidStructJson() as Logical

EndClass

/*/{Protheus.doc} new
    Metodo construtor
    @author Totvs
    @since 04/04/2022
    @version 12.1.33
/*/
Method new() class SaveMatchSetting
Return 

/*/{Protheus.doc} postSaveMatchSetting
    Metodo que inicia a chamanda das gravações matchsetting do conciliador
    @author Totvs
    @since 04/04/2022
    @version 12.1.33
/*/
Method postSaveMatchSetting() class SaveMatchSetting
    Local oService      := SaveMatchSettingService():getInstance() as Object
    Local aResponse     := {} as Array
    Local lResponse     := .F. as Logical
    Local cChaveRes     := "message" as Character
    Local cResponse     := STR0001 as Character // "Json invalido"
    Local oBody         := oRest:GetBodyRequest() as Object
    Local jBody         := JsonObject():new() as Json
    Local uRet          := Nil
    Local cBodyTreated  := "" as Character

    If ValType(oBody) == "C"
        uRet := jBody:fromJson(oBody)
        If ValType(uRet) == "U"
            
            If ::ValidStructJson(jBody, @cResponse) // Valida estrutura    
                
                /* Tratamento para converter o encoding */
                cBodyTreated := jBody:ToJSON()
                cBodyTreated := DecodeUTF8(cBodyTreated, "cp1252")
                uRet := jBody:FromJSON(cBodyTreated)

                If ValType(uRet) == "U"
                    aResponse := oService:postSaveMatchSetting(jBody)
                    If ValType(aResponse) == "A" .And. Len(aResponse) > 1
                        lResponse := aResponse[1]
                        cChaveRes := If(lResponse, "", "message")
                        cResponse := aResponse[2]
                    EndIf
                EndIf
            EndIf
        EndIf
    EndIf
    tcSetResponse(lResponse, cChaveRes, cResponse)
    FwFreeArray(aResponse)
    FreeObj(oService)
Return 

/*/{Protheus.doc} ValidStructJson
    Valida estrutura de JSON
    @author user
    @since 11/04/2022
    @version 12.1.33
    @param jBody
    @return lRet
    /*/
Method ValidStructJson(jBody, cResponse) class SaveMatchSetting
    Local lRet := .F. as Logical

    If (jBody:hasProperty("descfg") .And. jBody:hasProperty("tabori") .And. jBody:hasProperty("tabdes") .And. ;
    jBody:hasProperty("fields") .And. jBody:hasProperty("filter") .And. jBody:hasProperty("cidori") .And. ;
    jBody:hasProperty("ciddes") .And. jBody:hasProperty("descor") .And.  jBody:hasProperty("descde") .And. ; 
    jBody:hasProperty("regmat") .And. jBody:hasProperty("total") )

        If ( !( Empty(jBody["descfg"]) ) .And. !( Empty(jBody["tabori"]) ) .And. !( Empty(jBody["tabdes"]) ) .And. ;
        !( Empty(jBody["fields"]:toJson() ) ) .And. !( Empty(jBody["filter"]:toJson() ) ) .And. !( Empty(jBody["cidori"]) ) .And.;
        !( Empty(jBody["ciddes"]) ) .And. !( Empty(jBody["descor"]) ) .And. !( Empty(jBody["descde"]) ) .And. ;
        !( Empty(jBody["regmat"]:toJson() ) ) .And. !( Empty(jBody["total"]:toJson() ) ) )
             
            lRet := .T. // Estrutura Ok
        Else
            cResponse := STR0002//"Foram enviadas propriedades com valor vazio para a API"
        EndIf
    Else
        cResponse := STR0003 //"Não foram enviadas todas as propriedades esperadas para a API"
    EndIf
Return lRet
