#include "tlpp-core.th"
#include "backoffice.reconciliation.savematchsetting.data.protheus.ch"

namespace totvs.protheus.backoffice.reconciliation.savematchsetting

/*/{Protheus.doc} SaveMatchSettingProtheusData
    (long_description)
    @author Totvs
    @since 04/04/2022
    @version 12.1.33
    /*/
class SaveMatchSettingProtheusData
    Public  method new()
    Public  method getData() as Object
    Public  method postSaveMatchSetting() as Array
    Private method validMatchSetting() as Array
    Private method getCodCfg() as Character
endClass

/*/{Protheus.doc} new
    Método construtor
    @author Totvs
    @since 05/04/2022
    @version version
    /*/
method new() class SaveMatchSettingProtheusData
return

method getData() class SaveMatchSettingProtheusData as Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := SaveMatchSettingProtheusData():new()
    EndIf
return __oActiveData

/*/{Protheus.doc} postSaveMatchSetting
    Método que grava o JSON na tabela QLB
    @author Totvs
    @since 05/04/2022
    @version 12.1.33
    @param jBody
    @return aValid[2], return_type: character, 
    return_description: aValid contém as mensagens de validação negativas, 
    caso esteja vazio a validação está ok
/*/
Method postSaveMatchSetting(jBody) class SaveMatchSettingProtheusData 
    Local aValid    := ::validMatchSetting(jBody) as Array
    Local cCodCfg   := '' as Character

    If aValid[1]
        If jBody:hasProperty('codcfg')
            QLB->(dbSeek(xFilial("QLB")+jBody["codcfg"]))
            RecLock("QLB", .F.)
            QLB->QLB_FILIAL := xFilial("QLB")
            QLB->QLB_CODCFG := jBody["codcfg"]
            QLB->QLB_DESCFG := jBody["descfg"] 
            QLB->QLB_TABORI := jBody["tabori"] 
            QLB->QLB_TABDES := jBody["tabdes"]
            QLB->QLB_FIELDS := jBody["fields"]:toJson() 
            QLB->QLB_FILTER := jBody["filter"]:toJson() 
            QLB->QLB_CIDORI := jBody["cidori"]
            QLB->QLB_CIDDES := jBody["ciddes"]
            QLB->QLB_DESCOR := jBody["descor"] 
            QLB->QLB_DESCDE := jBody["descde"] 
            QLB->QLB_REGMAT := jBody["regmat"]:toJson() 
            QLB->QLB_TOTAL  := jBody["total"]:toJson() 
            QLB->(MsUnlock()) 
        Else 
            cCodCfg := ::getCodCfg(jBody)

            RecLock("QLB", .T.)
            QLB->QLB_FILIAL := xFilial("QLB")
            QLB->QLB_CODCFG := cCodCfg
            QLB->QLB_DESCFG := jBody["descfg"] 
            QLB->QLB_TABORI := jBody["tabori"] 
            QLB->QLB_TABDES := jBody["tabdes"]
            QLB->QLB_FIELDS := jBody["fields"]:toJson() 
            QLB->QLB_FILTER := jBody["filter"]:toJson() 
            QLB->QLB_CIDORI := jBody["cidori"]
            QLB->QLB_CIDDES := jBody["ciddes"]
            QLB->QLB_DESCOR := jBody["descor"] 
            QLB->QLB_DESCDE := jBody["descde"] 
            QLB->QLB_REGMAT := jBody["regmat"]:toJson() 
            QLB->QLB_TOTAL  := jBody["total"]:toJson() 
            QLB->(MsUnlock()) 
        EndIf
    EndIf
Return aValid 

/*/{Protheus.doc} postSaveMatchSetting
    Método que realiza a validação JSON recebido
    @author Totvs
    @since 05/04/2022
    @version 12.1.33
    @param jBody
/*/

Method validMatchSetting(jBody) class SaveMatchSettingProtheusData as Array
    Local aValid := {} as Array

    aAdd(aValid, .F.)
    aAdd(aValid, STR0002) //"A tabela de Configurações de Conciliação (QLB) não existe no banco de dados"  

    If ChkFile("QLB")         
        aValid[1] := .T.
        aValid[2] := ""
    EndIf                   

Return aValid

/*/{Protheus.doc} getCodCfg
    Função que retorna o código de Configuração de conciliação a ser utilizado
    @author Totvs
    @since 11/04/2022
    @version 12.1.33
    @param jBody, Json enviado pelo front-end com as informações a serem gravadas na QLB
    @return cCustomCodCfg
/*/
Method getCodCfg(jBody) class SaveMatchSettingProtheusData
    Local cCustomCodCfg := '' as Character
    Local cQuery        := '' as Character
    Local cAliasTmp     := GetNextAlias() as Character

    //Se o codcfg for enviado, usar o mesmo
    //Por enquanto apenas configurações padrão usaram esta condição
    cCustomCodCfg := IIF(jBody:hasProperty('codcfg'), jBody['codcfg'], '')

    If Empty(cCustomCodCfg)       
        cQuery := "SELECT COALESCE(MAX(QLB_CODCFG), '1000') CODCFG" 
        cQuery += " FROM " + RetSQLName("QLB")
        cQuery += " WHERE QLB_CODCFG > '0999'"

        dbUseArea(.T., "TOPCONN", TcGenQry(,, cQuery), cAliasTmp, .T., .F.)

        If (cAliasTmp)->(!EOF())
            cCustomCodCfg := (cAliasTmp)->CODCFG //Pega ultimo utilizado
        EndIf

        (cAliasTmp)->(dbCloseArea())

        If (cCustomCodCfg <> '')
            cCustomCodCfg:=  Soma1(cCustomCodCfg)
        EndIf
    EndIf
Return cCustomCodCfg
