#include "tlpp-core.th"
#include "backoffice.reconciliation.conciliateitems.controller.ch"

namespace totvs.protheus.backoffice.reconciliation.reconciliationitems
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationItems
Classe principal de controle, onde é inicializado o EndPoint

@author Totvs
/*/
//-------------------------------------------------------------------
class ReconciliationItems
	Data jResposta	as json
	Data Page       as Numeric
	Data PageSize   as Numeric
	Data codcfg     as Character	
	Data match      as Character	
	Data codcon     as Character	
	Data filpos     as Character
	Data oService   as Object
	Data aFieldsApi as Array
	
    public method new()

    @Get("/api/tc/reconciliationitems/")
    public method getAllReconciliationItems()
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationItems
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new() class ReconciliationItems
	::page       := 1
	::pagesize   := 10
	::codcfg     := ""
	::match      := ""
	::codcon     := ""
	::filpos     := ""
	::oService   := reconciliationitemsService():getInstance()
	::jResposta  := JsonObject():New()
	::aFieldsApi := {}
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getAllReconciliationItems
Metodo que inicia a chamada das configuracoes de match do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAllReconciliationItems() class ReconciliationItems		
	Local aJsonHead := {} as Array	
	Local oField    := tcTreatsFilter():new() as Object
	Local lResponse := .F. As Logical
	Local cChaveRes := "message" As Character 
    Local cResponse := STR0001 As Character //"Resposta inválida."

	::aFieldsApi := {}
	::codcfg 	 := oRest:getQueryRequest():GetJsonText("codcfg")
	::codcfg     := StrTran(::codcfg, "null", "")	
	::match 	 := oRest:getQueryRequest():GetJsonText("match")
	::match      := StrTran(::match, "null", "")
	::codcon 	 := oRest:getQueryRequest():GetJsonText("codcon")
	::codcon     := StrTran(::codcon, "null", "")	
	::filpos 	 := oRest:getQueryRequest():GetJsonText("filpos")
	::filpos     := StrTran(::filpos, "null", "")	
	::filpos	 := PADR(::filpos,TamSX3("QLD_FILIAL")[1])
	
	tcGetPageAndPageSize(@::page, @::pageSize)
    ::jResposta:fromJson(::oService:getAllReconciliationItems(::page,::pageSize,::aFieldsApi,::codcfg,::match,::codcon,::filpos, @cResponse))   
    
	//Adiciona informacoes SX3 dos campos no Json de retorno
	If ValType(::jResposta:GetJsonText("items")) <> "U" .And. Len(::aFieldsApi) > 0		
		aJsonHead := oField:tcSetStruct(::aFieldsApi)
		
		IIf(Len(aJsonHead) > 0,;
			(::jResposta["fields"] := JsonObject():new(),;
        	::jResposta["fields"] := aJsonHead,;
			tcAnswerRest(::jResposta, .T.)),;		
			tcSetResponse(lResponse, cChaveRes, cResponse, .F.))		
	Else
		tcSetResponse(lResponse, cChaveRes, cResponse, .F.)
	EndIf	  

	//Limpa array
	FWFreeArray(aJsonHead)
	FWFreeArray(::aFieldsApi)
return
