#include "tlpp-core.th"

namespace totvs.protheus.backoffice.reconciliation.matchsettingitems
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSettingItemsProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class MatchSettingItemsProtheusData from FWAdapterBaseV2
    Public method new()
    Public method getAll()
    Public method validCidFields()
    static method getData() As object
    static method getTable() As object
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSettingItemsProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class MatchSettingItemsProtheusData
    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSettingItemsProtheusData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class MatchSettingItemsProtheusData As Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := MatchSettingItemsProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAll
Metodo responsável pela busca das configuracoes do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAll(cCodCfg as Character, nPage as Numeric, nPageSize as Numeric) class MatchSettingItemsProtheusData
    Local aArea := GetArea() As Array    
    Local cWhere := GetBranchiesForConditional("QLB") As Character

    Default cCodCfg   := ""
    Default nPage     := 1
    Default nPageSize := 10

    addMapFields(self)

    ::setPage(nPage)
    ::setPageSize(nPageSize)
    ::SetQuery(getQuery())
   
    //Aplica filtros
    If !Empty(cCodCfg)
        cWhere += " AND QLB_CODCFG = '"+cCodCfg+"' " 
    EndIf

    cWhere += " AND QLB.D_E_L_E_T_ = ' '"

    ::SetWhere(cWhere)
    ::SetOrder("QLB.QLB_FILIAL, QLB.QLB_CODCFG")

    If ::Execute()
        ::FillGetResponse()
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} addMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function addMapFields(oSelf as Object)
    Local nTamField := TamSx3("QLB_FILIAL")[1] + TamSx3("QLB_CODCFG")[1] As Numeric
    Local nTamLabel := TamSx3("QLB_CODCFG")[1] + TamSx3("QLB_DESCFG")[1] + 1 As Numeric
    Local nTamDescTable := TamSx3("QLB_TABORI")[1] + TamSx3("QLB_DESCOR")[1] + 2 As Numeric
    Local cConcat := tcRetConcat() As Character
    Local cConcatAux := cConcat+"'|'"+cConcat As Character
    Local cEmpAux := "'"+cEmpAnt+"'" As Character

    oSelf:addMapFields("value" , "value" , .T., .F., {"value" , "C", nTamField              , 0}, cEmpAux + cConcatAux + "RTRIM(QLB.QLB_FILIAL)" +;
                          cConcatAux + "QLB.QLB_CODCFG")
    oSelf:addMapFields("branch", "branch", .T., .F., {"branch", "C", TamSx3("QLB_FILIAL")[1], 0}, "QLB.QLB_FILIAL")
    oSelf:addMapFields("codcfg", "codcfg", .T., .F., {"codcfg", "C", TamSx3("QLB_CODCFG")[1], 0}, "QLB.QLB_CODCFG")
    oSelf:addMapFields("label" , "label" , .T., .F., {"label" , "C", nTamLabel              , 0}, "QLB.QLB_CODCFG"+cConcat+"'-'"+cConcat+"QLB.QLB_DESCFG")  
    oSelf:addMapFields("name"  , "name"  , .T., .F., {"name"  , "C", TamSx3("QLB_DESCFG")[1], 0}, "QLB.QLB_DESCFG")  
    oSelf:addMapFields("filter", "filter", .T., .F., {"filter", "M", TamSx3("QLB_FILTER")[1], 0}, "QLB.QLB_FILTER")
    oSelf:addMapFields("fields", "fields", .T., .F., {"fields", "M", TamSx3("QLB_FIELDS")[1], 0}, "QLB.QLB_FIELDS")
    oSelf:addMapFields("regmat", "regmat", .T., .F., {"regmat", "M", TamSx3("QLB_REGMAT")[1], 0}, "QLB.QLB_REGMAT")
    oSelf:addMapFields("total" , "total" , .T., .F., {"total" , "M", TamSx3("QLB_TOTAL")[1] , 0}, "QLB.QLB_TOTAL")
    oSelf:addMapFields("totais" , "totais" , .T., .F., {"totais" , "M", TamSx3("QLB_TOTAL")[1] , 0}, "QLB.QLB_TOTAL")
    oSelf:addMapFields("tabori", "tabori", .T., .F., {"tabori", "C", nTamDescTable          , 0}, "RTRIM(QLB.QLB_DESCOR)"+cConcat+"' (' "+cConcat+"QLB.QLB_TABORI"+cConcat+"')'")
    oSelf:addMapFields("tabdes", "tabdes", .T., .F., {"tabdes", "C", nTamDescTable          , 0}, "RTRIM(QLB.QLB_DESCDE)"+cConcat+"' (' "+cConcat+"QLB.QLB_TABDES"+cConcat+"')'")
    oSelf:AddMapFields("cidori", "cidori", .T., .F., {"cidori", "C", TamSx3("QLB_CIDORI")[1], 0}, "LOWER(QLB.QLB_CIDORI)")
    oSelf:AddMapFields("ciddes", "ciddes", .T., .F., {"ciddes", "C", TamSx3("QLB_CIDDES")[1], 0}, "LOWER(QLB.QLB_CIDDES)")    
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getQuery
Realiza a query para busca de informações

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function getQuery() As Character
    Local cQuery As Character

    cQuery := " SELECT #QueryFields#"
    cQuery += " FROM " + RetSqlName("QLB") + " QLB "
    cQuery += " WHERE #QueryWhere#"
Return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} getQuery
Realiza a query para busca de informações

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function getCidTable(cCidField as Character) As Character

Local cTable := "" as Character

    cCidField := Upper(cCidField)
    cTable := SubStr(cCidField, 0, 3)
    If Right(cTable, 1) == "_"
        cTable := 'S' + SubStr(cCidField, 0, 2)
    EndIf

Return cTable

//-------------------------------------------------------------------
/*/{Protheus.doc} validCidFields
Metodo responsável por validar se os campos cidori e ciddes da configuração existem no ambiente

@author Totvs
/*/
//-------------------------------------------------------------------
method validCidFields(jResponse as Json) class MatchSettingItemsProtheusData

Local cTable := ""as Character
Local cCidField := "" as Character
Local aCidFields := {} as Array

//Capturar tabela de origem e tabela de destino
//DbSelectArea nas tabelas
    jResponse['items'][1]:getJsonValue('tabori', @cTable)

    If jResponse['items'][1]:getJsonValue('cidori', @cCidField)
        
        cCidField := Upper(cCidField)
        cTable := getCidTable(cCidField)
        DbSelectArea(cTable)
        
        If FieldPos(cCidField)
            Aadd(aCidFields, {cCidField, .T.})
        Else 
            Aadd(aCidFields, {cCidField, .F.})
        EndIf
    EndIf

    jResponse['items'][1]:getJsonValue('tabori', @cTable)

    If jResponse['items'][1]:getJsonValue('ciddes', @cCidField)
        cCidField := Upper(cCidField)
        cTable := getCidTable(cCidField)
        DbSelectArea(cTable)

        If FieldPos(cCidField)
            Aadd(aCidFields, {cCidField, .T.})
        Else 
            Aadd(aCidFields, {cCidField, .F.})
        EndIf
    EndIf
    
Return aCidFields


