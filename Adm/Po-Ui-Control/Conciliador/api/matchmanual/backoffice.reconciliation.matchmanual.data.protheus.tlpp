#include "tlpp-core.th"
#include "backoffice.reconciliation.matchmanual.data.protheus.ch"

namespace totvs.protheus.backoffice.reconciliation.matchmanual
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchManualProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class MatchManualProtheusData
    Public  method new()    
    Public  method postByBody() As Array
    Public  method getData() As Object
    Private method tcGetMatchManual()
    Private method tcSetMatchManual()
endclass

/*/{Protheus.doc} MatchManualProtheusData
Metodo construtor

@author Totvs
/*/
method new() class MatchManualProtheusData
return

/*/{Protheus.doc} getData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
method getData() class MatchManualProtheusData As Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := MatchManualProtheusData():new()
    EndIf
return __oActiveData

/*/{Protheus.doc} postByBody
Metodo responsável pela busca e gravacao dos matches manuais

@author Totvs
/*/
method postByBody(jBody) class MatchManualProtheusData
Local aResponse := {} As Array
Local aMatches  := {} As Array

//Get Matches 
aMatches := ::tcGetMatchManual(jBody)

//Set Matches
If Len(aMatches) > 0
    aResponse := ::tcSetMatchManual(aMatches, jBody)
Else
    aAdd(aResponse, .F.)
    aAdd(aResponse, STR0001) //"Conteúdo do corpo inválido"
EndIf

FwFreeArray(aMatches)
return aResponse

/*/{Protheus.doc} tcGetMatchManual
Metodo responsável pela busca dos matches manuais

@author Totvs
/*/
method tcGetMatchManual(jBody As Json) class MatchManualProtheusData
Local aMatches := {} As Array
Local cTable     As Character
Local cCodCfg    As Character
Local cIdConc    As Character
Local cCondition As Character
Local cJsonAux   As Character
Local nI         As Numeric

If Valtype(jBody) == "J" .And. ValType(jBody:GetJsonText("codcfg")) == "C"
    cCodCfg := jBody:GetJsonText("codcfg")

    If !Empty(cCodCfg)
        //Armazena informacoes de origem
        cIdConc  := AllTrim(Posicione("QLB", 1, xFilial("QLB")+Padr(cCodCfg, TamSx3("QLB_CODCFG")[1]), "QLB_CIDORI"))
        cJsonAux := jBody:GetJsonText("tabori") 
        cTable   := SubStr(cJsonAux, At("{", cJsonAux)+2, Len(cJsonAux)) 
        cTable   := SubStr(cTable, 1, At(":", cTable)-2) 
                 
        If !Empty(cIdConc) .And. !Empty(cTable) .And.; 
            ValType(jBody["tabori"][cTable]) == "A" .And. Len(jBody["tabori"][cTable]) > 0                                    
            cCondition := "" //Inicializa condicionais 
            For nI := 1 To Len(jBody["tabori"][cTable])
                cCondition += "'"+jBody["tabori"][cTable][nI]+"',"                
            Next
            cCondition := SubStr(cCondition, 1 , Len(cCondition)-1)

            If !Empty(cCondition)
                aAdd(aMatches, {cTable, cIdConc, cCondition})
            EndIf             
        EndIf                                      
    
        //Armazena informacoes de destino        
        cIdConc  := AllTrim(Posicione("QLB", 1, xFilial("QLB")+Padr(cCodCfg, TamSx3("QLB_CODCFG")[1]), "QLB_CIDDES"))    
        cJsonAux := jBody:GetJsonText("tabdes") 
        cTable   := SubStr(cJsonAux, At("{", cJsonAux)+2, Len(cJsonAux)) 
        cTable   := SubStr(cTable, 1, At(":", cTable)-2) 
    
        If !Empty(cIdConc) .And. !Empty(cTable) .And.;
            ValType(jBody["tabdes"][cTable]) == "A" .And. Len(jBody["tabdes"][cTable]) > 0
            cCondition := "" //Inicializa condicionais
            For nI := 1 To Len(jBody["tabdes"][cTable])
                cCondition += "'"+jBody["tabdes"][cTable][nI]+"',"                
            Next
            cCondition := SubStr(cCondition, 1 , Len(cCondition)-1)

            If !Empty(cCondition)
                aAdd(aMatches, {cTable, cIdConc, cCondition})
            EndIf 
        EndIf
    EndIf                                     
EndIf
return aMatches

/*/{Protheus.doc} tcSetMatchManual
Metodo responsável pela atualizacao dos matches manuais
nas temporarias e json de retorno

@author Totvs
/*/
method tcSetMatchManual(aMatches As Array, jBody As Json) class MatchManualProtheusData
Local cQryUpdt  := ""  As Character
Local cRegMatch := ""  As Character
Local cDesMatch := ""  As Character
Local cSeqMatch := ""  As Character
Local cError    := ""  As Character
Local cIdMatch  := ""  As Character
Local nAt       := 0   As Numeric
Local lContinue := .T. As Logical
Local aResponse := {}  As Array
Local cComparison := ""  As Character
Local cCompMD   := "MD"  As Character

//Verifica se temporarios existem
If Len(aMatches) == 2 .And. TCCanOpen(aMatches[1][1]) .And. TCCanOpen(aMatches[2][1])    
    If Valtype(jBody) == "J" .And. ValType(jBody:GetJsonText("idmatch")) == "C"
        nAt := TamSx3("QLD_REGMATCH")[1]
        cIdMatch  := AllTrim(jBody:GetJsonText("idmatch"))   
        cComparison := AllTrim(jBody:GetJsonText("comparison"))    
        
        If !Empty(cIdMatch)
            cRegMatch := SubStr(cIdMatch, 1, nAt)
            cSeqMatch := SubStr(cIdMatch, nAt+1, Len(cIdMatch))
            cDesMatch := "manual"
            
            //Atualiza tabela temporaria de origem
            cQryUpdt := "UPDATE " + aMatches[1][1]
            cQryUpdt += " SET REGMATCH = '" + cRegMatch + "', DESMATCH = '" + cDesMatch + "', SEQMATCH = '" + cSeqMatch + "'," 
            cQryUpdt += " IDMATCH = '"+ cIdMatch + "'"     
            If cComparison == 'MD' // Atualiza o campo de comparação apenas se for manual e seta o valor de manual divergente
                cQryUpdt += " ,COMPARISON = '"+ cCompMD + "'"     
            Endif
            cQryUpdt += " WHERE " + aMatches[1][2] + " IN (" + aMatches[1][3] + ")"    
            cQryUpdt += " AND REGMATCH = '"+Space(TamSx3("QLD_REGMAT")[1])+"'"
            cQryUpdt += " AND RECONCILED = 'N' "          
            cQryUpdt += " AND D_E_L_E_T_ = ' ' "

            If TcSqlExec(cQryUpdt) <> 0
                Conout(TCSqlError())
                cError := STR0002 //"matchManual Error: Nao foi possivel atualizar a tabela temporaria: "
                cError += aMatches[1][1] + STR0003 //". Para mais detalhes, verificar arquivo console.log"
                lContinue := .F.
            EndIf
    
            //Atualiza tabela temporaria de destino
            If lContinue
                cQryUpdt := "UPDATE " + aMatches[2][1]
                cQryUpdt += " SET REGMATCH = '" + cRegMatch + "', DESMATCH = '" + cDesMatch + "', SEQMATCH = '" + cSeqMatch + "',"
                cQryUpdt += " IDMATCH = '"+ cIdMatch + "'"     
            If cComparison == 'MD' // Atualiza o campo de comparação apenas se for manual e seta o valor de manual divergente
                cQryUpdt += " ,COMPARISON = '"+ cCompMD + "'"     
            Endif   
                cQryUpdt += " WHERE " + aMatches[2][2] + " IN (" + aMatches[2][3] + ")"
                cQryUpdt += " AND REGMATCH = '"+Space(TamSx3("QLD_REGMAT")[1])+"'"
                cQryUpdt += " AND RECONCILED = 'N' "             
                cQryUpdt += " AND D_E_L_E_T_ = ' ' "

                If TcSqlExec(cQryUpdt) <> 0
                    Conout(TCSqlError())
                    cError := STR0002 //"matchManual Error: Nao foi possivel atualizar a tabela temporaria: "
                    cError += aMatches[2][1] + STR0003 //". Para mais detalhes, verificar arquivo console.log"
                    lContinue := .F.
                EndIf
            EndIf
        Else
            lContinue := .F.
            cError    := STR0004 //"Não enviado idmatch no corpo" 
        EndIf           
    EndIf
Else
    lContinue := .F.
    cError    := STR0005 //"Tabela temporária inválida"    
EndIf

//Retorno
If lContinue
    aAdd(aResponse, lContinue)
    aAdd(aResponse, '{"regmatch": "'+cRegMatch+'", "desmatch": "'+cDesMatch+'", "seqmatch": "'+cSeqMatch+'"}')
Else
    aAdd(aResponse, lContinue)
    aAdd(aResponse, cError)
EndIf

TcRefresh(aMatches[1][1]) // Resetar tempo de timeout
TcRefresh(aMatches[2][1]) // Resetar tempo de timeout
return aResponse
