#include "tlpp-core.th"
#include "backoffice.reconciliation.setupfields.data.protheus.ch"

namespace totvs.protheus.backoffice.reconciliation.setupfields
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} SetupFieldsProtheusData
Classe responsavel pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class SetupFieldsProtheusData    
    Public  method new()       
    Public  method getFields() as Array
    Private method tcGetJsonFields()
endclass

/*/{Protheus.doc} SetupFieldsProtheusData
Metodo construtor

@author Totvs
/*/
method new() class SetupFieldsProtheusData
return

/*/{Protheus.doc} getFields
Metodo responsável pela busca dos campos de setup

@author Totvs
/*/
method getFields() class SetupFieldsProtheusData
Local cTable    := Upper(tcGetQryParams("table")) as Character
Local aFields   := {} as Array
Local aResponse := {} as Array
Local aResult   := {} as Array

//Get Fields
If !Empty(cTable) .And. AliasInDic(cTable) 
    aFields := RetUsedFields(cTable)
EndIf

If Len(aFields) > 0
    aResult := ::tcGetJsonFields(aFields, cTable)
    
    //Retorno OK
    aAdd(aResponse, .T.)
    aAdd(aResponse, aClone(aResult))
Else //Retorno erro
    aAdd(aResponse, .F.)
    aAdd(aResponse, STR0001) //"Tabela não existe no dicionário de dados"
EndIf
FwFreeArray(aFields)
FwFreeArray(aResult)
return aResponse

/*/{Protheus.doc} tcGetJsonFields
Retorna campos da tabela no formato json

@author Totvs
/*/
method tcGetJsonFields(aFields as Array, cTable as Character) class SetupFieldsProtheusData
Local nI         := 0   as Numeric
Local aFielsdRet := {}  as Array
Local aResult    := {}  as Array
Local cMSUID     := ""  as Character

//Armazena informacoes da tabela          
aAdd(aResult, JsonObject():new())     
aResult[Len(aResult)]["table"] := AllTrim(cTable)
aResult[Len(aResult)]["description"] := AllTrim(FwSX2Util():GetX2Name(cTable))

//Armazena campos da tabela             
For nI := 1 To Len(aFields)
    aAdd(aFielsdRet, JsonObject():New())                
    aFielsdRet[nI]["field"] := AllTrim(aFields[nI][1])
    aFielsdRet[nI]["description"] := AllTrim(FWX3Titulo(aFields[nI][1]))
    aFielsdRet[nI]["type"] := aFields[nI][2]
    aFielsdRet[nI]["size"] := aFields[nI][3]
    aFielsdRet[nI]["decimal"] := aFields[nI][4]
    
    If "MSUID" $ aFields[nI][1]
        cMSUID := AllTrim(aFields[nI][1])
    EndIf
Next
aResult[Len(aResult)]["uniqueidentification"] := cMSUID
aResult[Len(aResult)]["fields"] := aClone(aFielsdRet)
FwFreeArray(aFielsdRet)

return aResult
