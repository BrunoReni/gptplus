#include "tlpp-core.th"
#include "backoffice.reconciliation.reconciliationprogress.data.protheus.ch"          

namespace totvs.protheus.backoffice.reconciliation.reconciliationprogress
using namespace totvs.protheus.backoffice.reconciliation.matchprocessing

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationProgressProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class ReconciliationProgressProtheusData from FWAdapterBaseV2
    Public method new()
    Public method getAll()
    static method getData() As object
    Public method tcSQLExpress()
    Public method tcSQLExecute()
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationProgressProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class ReconciliationProgressProtheusData
    Default cVerbo := "POST"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationProgressProtheusData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class ReconciliationProgressProtheusData As Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := ReconciliationProgressProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAll
Metodo responsável pela busca das configuracoes do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAll(jBody as Json) class ReconciliationProgressProtheusData
Local aResponse  := {} as Array
Local cCodCfg    := "" as Character
Local cAliasOri  := "" as Character
Local cAliasDes  := "" as Character
Local cSQLSelOri := "" as Character
Local cSQLSelDes := "" as Character
Local cWhereOri  := "" as Character
Local cWhereDes  := "" as Character
Local cReturn    := "" as Character
Local cCpoIdOri  := "" as Character
Local cCpoIdDes  := "" as Character
Local cTypeRet   := "" as Character
Local oObjAux    := MatchProcessingProtheusData():New()

cCodCfg   := jBody["codcfg"]
lProgress := ValType(cCodCfg)=="C"

cTypeRet := jBody["progresstype"]
If ValType(cTypeRet)<>"C"
    cTypeRet := "0" //Ambos
EndIf

If lProgress
    QLB->(dbSetOrder(1))
    If QLB->(dbSeek(FWxFilial("QLB")+cCodCfg))
        //Monta o Select da Query
        If lProgress
            cAliasOri := QLB->QLB_TABORI
            cAliasDes := QLB->QLB_TABDES

            If Empty(QLB->QLB_CIDORI)
                lProgress := .F.
            Else
                cCpoIdOri := QLB->QLB_CIDORI
            EndIf

            If Empty(QLB->QLB_CIDDES)
                lProgress := .F.
            Else
                cCpoIdDes := QLB->QLB_CIDDES
            EndIf

            If lProgress
                cSQLSelOri := ::tcSQLExpress(cAliasOri, cCpoIdOri, "1", cCodCfg)
                cSQLSelDes := ::tcSQLExpress(cAliasDes, cCpoIdDes, "2", cCodCfg)
            Else
                cReturn := STR0001 //"Preencher o campo QLB_CIDORI ou QLB_CIDDES"
            EndIf       
        EndIf

        //Monta o Where de acordo com o filtro recebido
        If lProgress        
            cWhereOri := oObjAux:tcRetWhere(jBody["tabori"], "XXXX", "1", cAliasOri,"01",cCpoIdOri)
            cWhereDes := oObjAux:tcRetWhere(jBody["tabdes"], "XXXX", "2", cAliasDes,"01",cCpoIdDes)
             
            cGroupBy :=  " GROUP BY QLD_REGMAT "

            cReturnOri := ::tcSQLExecute(cSQLSelOri+cWhereOri+cGroupBy,cTypeRet)          
            cReturnDes := ::tcSQLExecute(cSQLSelDes+cWhereDes+cGroupBy,cTypeRet)   

            cReturn := '{"tabori":'+cReturnOri+',"tabdes":'+cReturnDes+'}'
        EndIf    
    Else
        lProgress := .F. 
        cReturn := STR0002 //"A configuracao informada não existe"
    EndIf
Else
    cReturn := STR0003 //"Propriedade codcfg não informada ou inválida"
EndIf    

aAdd(aResponse, lProgress)
aAdd(aResponse, cReturn)

return aResponse

//-------------------------------------------------------------------
/*/{Protheus.doc} tcSQLExpress
Returns the SQL expression

@author Totvs
/*/
//-------------------------------------------------------------------
method tcSQLExpress(cAliasOri as Character, cCpoIdOri as Character, cTpItem as Character, cCodCfg as Character ) class ReconciliationProgressProtheusData
    Local cSelectExpress := "" as Character

    Local cNameDB   := Alltrim(TcGetDB()) as Character
    
    cSelectExpress := " SELECT COUNT(1) QTDREG, COALESCE(QLD_REGMAT,'NULL') REGMAT "
    cSelectExpress += " FROM "+RetSQLName(cAliasOri)+" "+cAliasOri 
    cSelectExpress += " LEFT JOIN "+RetSQLName("QLD")+" QLD ON "
    cSelectExpress += " QLD_FILIAL = '"+xFilial("QLD")+"' AND "

    If cNameDB $ "POSTGRES"
        cSelectExpress += " RTRIM(QLD_IDITEM) = CAST("+cCpoIdOri+" AS VARCHAR) AND "
    Else
        cSelectExpress += " RTRIM(QLD_IDITEM) = "+cCpoIdOri+" AND "
    EndIf

    cSelectExpress += " QLD_TPITEM = '"+cTpItem+"' AND "
    cSelectExpress += " QLD_CODCFG = '"+cCodCfg+"' AND "
    cSelectExpress += " QLD.D_E_L_E_T_ = ' ' "

return cSelectExpress

//-------------------------------------------------------------------
/*/{Protheus.doc} tcSQLExpress
Execute the SQL expression

@author Totvs
/*/
//-------------------------------------------------------------------
method tcSQLExecute(cSQLExpression as Character,cTypeRet as Character) class ReconciliationProgressProtheusData
    Local cReturn        := "" as Character
    Local nReconciled    := 0 as Numeric
    Local nNotReconciled := 0 as Numeric
    Local nMatchAuto     := 0 as Numeric
    Local nMatchManual   := 0 as Numeric
    Local nTotal         := 0 as Numeric
    Local cAliasQry      := GetNextAlias()

    Default cSQLExpression := ""

    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cSQLExpression),cAliasQry,.T.,.T.)

    WHile !(cAliasQry)->(Eof())
        If (cAliasQry)->REGMAT == "NULL"
            nNotReconciled += (cAliasQry)->QTDREG
        Else 
            nReconciled += (cAliasQry)->QTDREG
            If (cAliasQry)->REGMAT = '999'
                nMatchManual += (cAliasQry)->QTDREG
            Else
                nMatchAuto += (cAliasQry)->QTDREG
            EndIf
        EndIf
        nTotal += (cAliasQry)->QTDREG
        (cAliasQry)->(dbSkip())        
    EndDo
    (cAliasQry)->(dbCloseArea())

    If cTypeRet =="0" //Ambos
        cReturn :=  '{"reconciled":"'+cValToChar(nReconciled)+;
                    '","notreconciled":"'+cValtoChar(nNotReconciled)+;
                    '","matchauto":"'+cValtoChar(nMatchAuto)+;
                    '","matchmanual":"'+cValtoChar(nMatchManual)+;
                    '","total":"'+cValToChar(nTotal)+'"}'
    ElseIf cTypeRet == "1" //Somente Match
        cReturn :=  '{ "matchauto":"'+cValtoChar(nMatchAuto)+;
                    '","matchmanual":"'+cValtoChar(nMatchManual)+;
                    '","total":"'+cValToChar(nReconciled)+'"}'

    ElseIf cTypeRet == "2" //Somente Conciliados
        cReturn :=  '{"reconciled":"'+cValToChar(nReconciled)+;
                    '","notreconciled":"'+cValtoChar(nNotReconciled)+;                   
                    '","total":"'+cValToChar(nTotal)+'"}'
    EndIf
    
return cReturn 
