#include "tlpp-core.th"

namespace totvs.protheus.backoffice.reconciliation.reconciliationheader
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationHeaderProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class ReconciliationHeaderProtheusData from FWAdapterBaseV2
    Public method new()
    Public method getAll()
    static method getData() As object
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationHeaderProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class ReconciliationHeaderProtheusData
    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} ReconciliationHeaderProtheusData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class ReconciliationHeaderProtheusData As Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := ReconciliationHeaderProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAll
Metodo responsável pela busca das configuracoes do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAll(nPage as Numeric, nPageSize as Numeric) class ReconciliationHeaderProtheusData
    Local aArea  := GetArea() As Array
    Local cWhere := GetBranchiesForConditional("QLC") As Character    

    Default nPage     := 1
    Default nPageSize := 10

    addMapFields(self)

    ::setPage(nPage)
    ::setPageSize(nPageSize)
    ::SetQuery(getQuery())
   
    cWhere += " AND QLC.D_E_L_E_T_ = ' '"

    ::SetWhere(cWhere)
    ::SetOrder("QLC.QLC_FILIAL, QLC.QLC_CODCON")

    If ::Execute()
        ::FillGetResponse()
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} addMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function addMapFields(oSelf as Object)
    Local nTamField := TamSx3("QLC_FILIAL")[1] + TamSx3("QLC_CODCON")[1] As Numeric
    Local cConcat := tcRetConcat() As Character
    Local cConcatAux := cConcat+"'|'"+cConcat As Character
    Local cEmpAux := "'"+cEmpAnt+"'" As Character

    
    oSelf:addMapFields("value" , "value" , .T., .F., {"value" , "C", nTamField, 0}, cEmpAux + cConcatAux + "RTRIM(QLC.QLC_FILIAL)" +;
                          cConcatAux + "QLC.QLC_CODCON")
    oSelf:addMapFields("branch", "branch", .T., .F., {"branch", "C", TamSx3("QLC_FILIAL")[1], 0}, "QLC.QLC_FILIAL")
    oSelf:addMapFields("codcon", "codcon", .T., .F., {"codcon", "C", TamSx3("QLC_CODCON")[1], 0}, "QLC.QLC_CODCON")
    oSelf:addMapFields("codcfg", "codcfg", .T., .F., {"codcfg", "C", TamSx3("QLC_CODCFG")[1], 0}, "QLC.QLC_CODCFG")
    oSelf:addMapFields("tabori", "tabori", .T., .F., {"tabori", "C", TamSx3("QLC_TABORI")[1], 0}, "QLC.QLC_TABORI")  
    oSelf:addMapFields("tabdes", "tabdes", .T., .F., {"tabdes", "C", TamSx3("QLC_TABDES")[1], 0}, "QLC.QLC_TABDES")  
    oSelf:addMapFields("codusr", "codusr", .T., .F., {"codusr", "C", TamSx3("QLC_CODUSR")[1], 0}, "QLC.QLC_CODUSR")  
    oSelf:addMapFields("datcon", "datcon", .T., .F., {"datcon", "D", TamSx3("QLC_DATCON")[1], 0}, "QLC.QLC_DATCON")  
    oSelf:addMapFields("horcon", "horcon", .T., .F., {"horcon", "C", TamSx3("QLC_HORCON")[1], 0}, "QLC.QLC_HORCON")  
    
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getQuery
Realiza a query para busca de informações

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function getQuery() As Character
    Local cQuery As Character

    cQuery := " SELECT #QueryFields#"
    cQuery += " FROM " + RetSqlName("QLC") + " QLC "
    cQuery += " WHERE #QueryWhere#"
Return cQuery
