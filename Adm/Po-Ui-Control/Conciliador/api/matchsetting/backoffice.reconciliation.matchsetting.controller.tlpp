#include "tlpp-core.th"
#include "backoffice.reconciliation.matchsetting.controller.ch"

namespace totvs.protheus.backoffice.reconciliation.matchsetting
using namespace totvs.protheus.backoffice.reconciliation.util
using namespace totvs.protheus.backoffice.reconciliation.userprofile

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSetting
Classe principal de controle, onde é inicializado o EndPoint

@author Totvs
/*/
//-------------------------------------------------------------------
class MatchSetting
    public method new()

    @Get("/api/tc/matchsetting/")
    public method getAllMatchSettings()
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSetting
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new() class MatchSetting
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getAllMatchSettings
Metodo que inicia a chamada das configuracoes de match do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAllMatchSettings() class MatchSetting
    Local oService  As Object
    Local oField    As Object
    Local oProfile  As Object
    Local jResposta As Json
    Local cEmpBkp   As Character
    Local cFilBkp   As Character
    Local cFilters  As Character 
    Local nPage     As Numeric
    Local nPageSize As Numeric
    Local nAt       As Numeric
    Local aFilters  As Array
    Local lResponse As Logical
    Local cChaveRes As Character
    Local cResponse As Character
    Local lSharedQLC As Logical 	

    lSharedQLC := FWModeAccess("QLC", 1) == "C" .And. FWModeAccess("QLC", 2) == "C" .And. FWModeAccess("QLC", 3) == "C" 
    
    If !lSharedQLC //Verifica compartilhamento da QLC, se exclusiva, usuario só tem acesso a filial logada
        oProfile := UserProfileProtheusData():new()        
        oProfile:deleteProfile(__cUserId, "CONCILIAD") //Deleta profile do usuario
    EndIf

    //Inicilaiza variaveis
    oService  := MatchSettingService():getInstance()
    oField    := tcTreatsFilter():new()
    jResposta := JsonObject():new()
    cEmpBkp   := cEmpAnt
    cFilBkp   := cFilAnt
    cFilters  := ""
    aFilters  := {}
    nPage     := 1
    nPageSize := 10
    nAt       := 0
    lResponse := .F.
    cChaveRes := "message"
    cResponse := STR0001 //"Resposta inválida."
    
    tcGetHeaders()
    aFilters := tcGetFilters()
    
    If ValType(aFilters) == "A" .And. Len(aFilters) > 0
        nAt := At("=", aFilters[1][2])
        cFilters := AllTrim(SubStr(aFilters[1][2], nAt+1, Len(aFilters[1][2])))
    EndIf

    tcGetPageAndPageSize(@nPage, @nPageSize)

    jResposta:fromJson(oService:getAllMatchSetting(cFilters, nPage, nPageSize))

    IIf(ValType(jResposta:GetJsonText("items")) <> "U",; 
        tcAnswerRest(jResposta, .T.),;    
        tcSetResponse(lResponse, cChaveRes, cResponse, .F.))

    //Restaura empresa e filial
    cEmpAnt := cEmpBkp
    cFilAnt := cFilBkp

    //Limpa array
	FWFreeArray(aFilters)
return
