#include "tlpp-core.th"

namespace totvs.protheus.backoffice.reconciliation.matchsetting
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSettingProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class MatchSettingProtheusData from FWAdapterBaseV2
    Public method new()
    Public method getAll()
    static method getData() As object
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSettingProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as Character, lList as Logical) Class MatchSettingProtheusData
    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchSettingProtheusData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class MatchSettingProtheusData As Object
    static __oActiveData As Object

    If ValType(__oActiveData) == "U"
        __oActiveData := MatchSettingProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAll
Metodo responsável pela busca das configuracoes do conciliador

@author Totvs
/*/
//-------------------------------------------------------------------
method getAll(cFilters as Character, nPage as Numeric, nPageSize as Numeric) class MatchSettingProtheusData
    Local aArea  := GetArea() As Array
    Local cWhere := GetBranchiesForConditional("QLB") As Character
    
    Default cFilters  := ""
    Default nPage     := 1
    Default nPageSize := 10

    addMapFields(self)

    ::setPage(nPage)
    ::setPageSize(nPageSize)
    ::SetQuery(getQuery())
    
    //Aplica filtros
    If !Empty(cFilters)
        cWhere += " AND (LOWER(QLB.QLB_CODCFG) LIKE '%" + Lower(cFilters) + "%'"
        cWhere += " OR LOWER(QLB.QLB_DESCFG) LIKE '%" + Lower(cFilters) + "%')" 
    EndIf

    cWhere += " AND QLB.D_E_L_E_T_ = ' '"

    ::SetWhere(cWhere)
    ::SetOrder("QLB.QLB_FILIAL, QLB.QLB_CODCFG")

    If ::Execute()
        ::FillGetResponse()
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} addMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function addMapFields(oSelf as Object)
    Local nTamField := TamSx3("QLB_FILIAL")[1] + TamSx3("QLB_CODCFG")[1] As Numeric
    Local nTamLabel := TamSx3("QLB_CODCFG")[1] + TamSx3("QLB_DESCFG")[1] + 1 As Numeric
    Local cConcat := tcRetConcat() As Character
    Local cConcatAux := cConcat+"'|'"+cConcat As Character
    Local cEmpAux := "'"+cEmpAnt+"'" As Character
    Local cDefault := "CASE WHEN QLB.QLB_CODCFG < '1000' THEN 'true' ELSE 'false' END" As Character

    oSelf:addMapFields("value" , "value" , .T., .F., {"value" , "C", nTamField              , 0}, cEmpAux + cConcatAux + "RTRIM(QLB.QLB_FILIAL)" +;
                          cConcatAux + "QLB.QLB_CODCFG")
    oSelf:addMapFields("branch", "branch", .T., .F., {"branch", "C", TamSx3("QLB_FILIAL")[1], 0}, "QLB.QLB_FILIAL")
    oSelf:addMapFields("codcfg", "codcfg", .T., .F., {"codcfg", "C", TamSx3("QLB_CODCFG")[1], 0}, "QLB.QLB_CODCFG")
    oSelf:addMapFields("label" , "label" , .T., .F., {"label" , "C", nTamLabel              , 0}, "QLB.QLB_CODCFG"+cConcat+"'-'"+cConcat+"QLB.QLB_DESCFG")  
    oSelf:addMapFields("name"  , "name"  , .T., .F., {"name"  , "C", nTamLabel              , 0}, "QLB.QLB_DESCFG") 
    oSelf:addMapFields("tabori", "tabori", .T., .F., {"tabori", "C", TamSx3("QLB_TABORI")[1], 0}, "QLB.QLB_TABORI")  
    oSelf:addMapFields("descor", "descor", .T., .F., {"descor", "C", TamSx3("QLB_DESCOR")[1], 0}, "QLB.QLB_DESCOR")  
    oSelf:addMapFields("tabdes", "tabdes", .T., .F., {"tabdes", "C", TamSx3("QLB_TABDES")[1], 0}, "QLB.QLB_TABDES")  
    oSelf:addMapFields("descde", "descde", .T., .F., {"descde", "C", TamSx3("QLB_DESCDE")[1], 0}, "QLB.QLB_DESCDE")  
    oSelf:addMapFields("cidori", "cidori", .T., .F., {"cidori", "C", TamSx3("QLB_CIDORI")[1], 0}, "QLB.QLB_CIDORI")  
    oSelf:addMapFields("ciddes", "ciddes", .T., .F., {"ciddes", "C", TamSx3("QLB_CIDDES")[1], 0}, "QLB.QLB_CIDDES")
    oSelf:AddMapFields("defaultsetting", "defaultsetting", .T., .F., {"defaultsetting", "C", 5, 0}, cDefault)  

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getQuery
Realiza a query para busca de informações

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function getQuery() As Character
    Local cQuery As Character

    cQuery := " SELECT #QueryFields#"
    cQuery += " FROM " + RetSqlName("QLB") + " QLB "
    cQuery += " WHERE #QueryWhere#"
Return cQuery
