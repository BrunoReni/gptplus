#include "tlpp-core.th"
#include "backoffice.reconciliation.matchtotal.data.protheus.ch"

namespace totvs.protheus.backoffice.reconciliation.matchtotal
using namespace totvs.protheus.backoffice.reconciliation.util
using namespace totvs.protheus.backoffice.reconciliation.matchprocessing

//-------------------------------------------------------------------
/*/{Protheus.doc} MatchTotalProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class MatchTotalProtheusData    
    Public  method new()       
    Public  method getTotal() As Array
    Private method tcGetConditions()
    Private method tcGetQueryTotals()
    Private method tcGetWhereTotal()
endclass

/*/{Protheus.doc} MatchTotalProtheusData
Metodo construtor

@author Totvs
/*/
method new() class MatchTotalProtheusData
return

/*/{Protheus.doc} getTotal
Metodo responsável pela busca dos totais da conciliação

@author Totvs
/*/
method getTotal(cBody) class MatchTotalProtheusData
Local cCodCfg    := tcGetQryParams("codcfg") As Character
Local cType      := tcGetQryParams("type")   As Character
Local aTotals   := {} As Array
Local aResponse := {} As Array
Local aResult   := {} As Array
Local cWhereDeb := "" As Character
Local cWhereCred:= "" As Character
Local uRet      := nil As Variant
Local jBody     :=  JsonObject():New()
Local lContinue := .T.

If !Empty(cCodCfg) .And. !Empty(cType)
    QLB->(dbSetOrder(1))
    If QLB->(dbSeek(xFilial("QLB")+cCodCfg))        
        cTable :=  IIf(cType=="1", QLB->QLB_TABORI, QLB->QLB_TABDES)   
    Else
        lContinue := .F.
        aAdd(aResponse, .F.)
        aAdd(aResponse, STR0003) //"Código da configuração inválido"            
    EndIf

    If lContinue
        If cTable == "CT2" .And. ValType(cBody)=="C" .And. !Empty(cBody)      
            uRet := jBody:fromJson(cBody)
            If ValType(uRet) == "U"                
                cWhereDeb := ::tcGetWhereTotal(jBody, cType, "1") // Débito
                cWhereCred := ::tcGetWhereTotal(jBody, cType, "2") // Crédito
            Else
                lContinue := .F.
                aAdd(aResponse, .F.)
                aAdd(aResponse, STR0004) //"Conteúdo do body inválido"
            EndIf
        EndIf
    EndIf
Else
    lContinue := .F.
    aAdd(aResponse, .F.)
    aAdd(aResponse, STR0005) //"Parâmetros inválidos: codcfg - type"
Endif

If lContinue
    //Get Conditions
    aTotals := ::tcGetConditions(cCodCfg, cType)

    //Get Query Totals
    If Len(aTotals) > 0
        aResult := ::tcGetQueryTotals(aTotals, cWhereDeb, cWhereCred)

        //Retorno OK
        aAdd(aResponse, .T.)
        aAdd(aResponse, aClone(aResult))
    Else //Retorno erro
        aAdd(aResponse, .F.)
        aAdd(aResponse, STR0001) //"Json inválido - Tabela: QLB - field: QLB_TOTAL"        
    EndIf
EndIf

FwFreeArray(aTotals)
FwFreeArray(aResult)
return aResponse

/*/{Protheus.doc} tcGetConditions
Metodo responsável pela busca dos matches manuais

@author Totvs
/*/
method tcGetConditions(cCodCfg As Character, cType As Character) class MatchTotalProtheusData
Local cLabelTot  := "" As Character
Local cValueTot  := "" As Character
Local cCondition := "" As Character
Local cTotals    := "" AS Character
Local nI         := 0  As Numeric
Local nPos       := 0  As Numeric
Local nIdTot     := 1  As Numeric
Local aTotals    := {} As Array
Local JTotals    := JsonObject():new() As Json
Local uRet       := Nil

DEFAULT cCodCfg := ""
DEFAULT cType   := ""

If !Empty(cCodCfg) .And. !Empty(cType)
    cTotals := AllTrim(Posicione("QLB", 1, xFilial("QLB")+Padr(cCodCfg, TamSx3("QLB_CODCFG")[1]), "QLB_TOTAL"))    
    If ValType(cTotals) == "C"
        uRet := JTotals:fromJson(cTotals)        
        If ValType(uRet) == "U"
            If cType == "1" //Tipo Origem                        
                For nI := 1 To Len(JTotals["totalori"])            
                    If !Empty(JTotals["totalori"][nI]["condition"]) //Possui condicional 
                        cLabelTot  := "'" + AllTrim(JTotals["totalori"][nI]["label"]) + "' AS LABEL01" 
                        cValueTot  := "SUM(" + AllTrim(JTotals["totalori"][nI]["total"]) + ") AS TOTAL01"
                        cCondition := AllTrim(JTotals["totalori"][nI]["condition"])
                        aAdd(aTotals, {cLabelTot + "," + cValueTot, cCondition, 1})                                 
                    Else
                        //Verifica se agrega na mesma consulta
                        If (nPos := aScan(aTotals, {|x| Empty(x[2])})) > 0 
                            nIdTot++
                            
                            If nIdTot <= 9
                                cLabelTot := "'" + AllTrim(JTotals["totalori"][nI]["label"]) + "' AS LABEL" + StrZero(nIdTot, 2)
                                cValueTot := "SUM(" + AllTrim(JTotals["totalori"][nI]["total"]) + ") AS TOTAL" + StrZero(nIdTot, 2)                
                            Else
                                cLabelTot := "'" + AllTrim(JTotals["totalori"][nI]["label"]) + "' AS LABEL" + CValToChar(nIdTot)
                                cValueTot := "SUM(" + AllTrim(JTotals["totalori"][nI]["total"]) + ") AS TOTAL" + CValToChar(nIdTot)
                            EndIf
                            
                            aTotals[nPos][1] += "," + cLabelTot + "," + cValueTot 
                            aTotals[nPos][3] := nIdTot               
                        Else
                            cLabelTot  := "'" + AllTrim(JTotals["totalori"][nI]["label"]) + "' AS LABEL01" 
                            cValueTot  := "SUM(" + AllTrim(JTotals["totalori"][nI]["total"]) + ") AS TOTAL01" 
                            cCondition := AllTrim(JTotals["totalori"][nI]["condition"])
                            aAdd(aTotals, {cLabelTot + "," + cValueTot, cCondition, 1})  
                        EndIf
                    EndIf                                    
                Next
            ElseIf cType == "2" //Tipo Destino
                For nI := 1 To Len(JTotals["totaldes"])
                    If !Empty(JTotals["totaldes"][nI]["condition"]) //Possui condicional 
                        cLabelTot  := "'" + AllTrim(JTotals["totaldes"][nI]["label"]) + "' AS LABEL01" 
                        cValueTot  := "SUM(" + AllTrim(JTotals["totaldes"][nI]["total"]) + ") AS TOTAL01"
                        cCondition := AllTrim(JTotals["totaldes"][nI]["condition"])
                        aAdd(aTotals, {cLabelTot + "," + cValueTot, cCondition, 1})                                 
                    Else
                        //Verifica se agrega na mesma consulta
                        If (nPos := aScan(aTotals, {|x| Empty(x[2])})) > 0 
                            nIdTot++
                            
                            If nIdTot <= 9
                                cLabelTot := "'" + AllTrim(JTotals["totaldes"][nI]["label"]) + "' AS LABEL" + StrZero(nIdTot, 2)
                                cValueTot := "SUM(" + AllTrim(JTotals["totaldes"][nI]["total"]) + ") AS TOTAL" + StrZero(nIdTot, 2)                
                            Else
                                cLabelTot := "'" + AllTrim(JTotals["totaldes"][nI]["label"]) + "' AS LABEL" + CValToChar(nIdTot)
                                cValueTot := "SUM(" + AllTrim(JTotals["totaldes"][nI]["total"]) + ") AS TOTAL" + CValToChar(nIdTot)
                            EndIf                
                            
                            aTotals[nPos][1] += "," + cLabelTot + "," + cValueTot 
                            aTotals[nPos][3] := nIdTot                
                        Else
                            cLabelTot  := "'" + AllTrim(JTotals["totaldes"][nI]["label"]) + "' AS LABEL01" 
                            cValueTot  := "SUM(" + AllTrim(JTotals["totaldes"][nI]["total"]) + ") AS TOTAL01" 
                            cCondition := AllTrim(JTotals["totaldes"][nI]["condition"])
                            aAdd(aTotals, {cLabelTot + "," + cValueTot, cCondition, 1})  
                        EndIf
                    EndIf   
                Next        
            EndIf
        EndIf
    EndIf                            
EndIf
return aTotals

/*/{Protheus.doc} tcGetQueryTotals
Retorna a proxima sequencia disponivel na temporaria

@author Totvs
/*/
method tcGetQueryTotals(aTotals As Array, cWhereDeb As Character, cWhereCred As Character) class MatchTotalProtheusData
Local cQuery    := "" As Character
Local cAliasTmp := "" As Character
Local cTable    := tcGetQryParams("table") As Character
Local lMatch    := IIF(AllTrim(Lower(tcGetQryParams("match"))) == "false", .F., .T.) As Logical
Local nI        := 0 As Numeric
Local nX        := 0 As Numeric
Local nLenJson  := 0 As Numeric
Local aResult   := {} As Array

Default aTotals    := {}
Default cWhereDeb  := ""
Default cWhereCred := ""

For nI := 1 To Len(aTotals)
    cAliasTmp := GetNextAlias()
    
    //Query para buscar totalizadores
    cQuery := "SELECT " + aTotals[nI][1]
    cQuery += " FROM " + cTable
    cQuery += " WHERE D_E_L_E_T_ = ' '"
    If !Empty(aTotals[nI][2])
        cQuery += " AND (" + aTotals[nI][2] + ")"        
    EndIf
    If lMatch //Com match
        cQuery += " AND REGMATCH <> '"+Space(TamSx3("QLD_REGMAT")[1])+"'"
    Else //Sem match
        cQuery += " AND REGMATCH = '"+Space(TamSx3("QLD_REGMAT")[1])+"'"
    EndIf

    If !Empty(cWhereDeb) .And. !Empty(aTotals[nI][2]) .And. aTotals[nI][2] == "CT2_DC = '1' OR CT2_DC = '3'"
        cQuery += "AND " + cWhereDeb
    EndIf
     If !Empty(cWhereCred) .And. !Empty(aTotals[nI][2]) .And. aTotals[nI][2]  == "CT2_DC = '2' OR CT2_DC = '3'"
        cQuery += "AND " + cWhereCred
    EndIf

    dbUseArea(.T., "TOPCONN", TcGenQry(,, cQuery), cAliasTmp, .T., .F.)

    //Armazena SeqMatch
    If (cAliasTmp)->(!EOF())
        For nX := 1 To aTotals[nI][3]
            nLenJson++
            aAdd(aResult, JsonObject():new())       
            
            If nX <= 9
                aResult[nLenJson]["label"] := &("(cAliasTmp)->LABEL"+StrZero(nX, 2))+IIF(lMatch, "", "-"+STR0002) //"Não Conciliados"
                aResult[nLenJson]["value"] := &("(cAliasTmp)->TOTAL"+StrZero(nX, 2))
            Else
                aResult[nLenJson]["label"] := &("(cAliasTmp)->LABEL"+CValToChar(nX))+IIF(lMatch, "", "-"+STR0002) //"Não Conciliados"
                aResult[nLenJson]["value"] := &("(cAliasTmp)->TOTAL"+CValToChar(nX))
            EndIf           
        Next
    EndIf
    
    (cAliasTmp)->(dbCloseArea()) //Fecha temporario
    
Next

TcRefresh(cTable) // Resetar tempo de timeout

return aResult

/*/{Protheus.doc} tcGetWhereTotal
Retorna o Where do Total condicional

@author Totvs
/*/
method tcGetWhereTotal(jBody As Json, cType As Character, cDebCred As Character) class MatchTotalProtheusData
Local cWhere     := "" As Character
Local aWhere     := {} As Array

aWhere := IIf(cType=="1", jBody["tabori"], jBody["tabdes"])
cWhere := RetWhereEntity(aWhere, cDebCred) 

Return cWhere


