#include "tlpp-core.th"
#include "backoffice.reconciliation.treatsparams.ch"

namespace totvs.protheus.backoffice.reconciliation.util
using namespace totvs.protheus.backoffice.reconciliation.userprofile

//-------------------------------------------------------------------
/*/{Protheus.doc} tcGetPageAndPageSize
Retorna pagina e tamanho da pagina para a consulta
@param nPage: página
@param nPage: Tamanho da página

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcGetPageAndPageSize(nPage as Numeric, nPageSize as Numeric)
    If (oRest:getQueryRequest():GetJsonText("pageSize") != "null")
        nPageSize := Val(oRest:getQueryRequest():GetJsonText("pageSize"))
    EndIf

    If (oRest:getQueryRequest():GetJsonText("page") != "null")
        nPage := Val(oRest:getQueryRequest():GetJsonText("page"))
    EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcGetHeaders
Retorna as Empresa e Filial utilizadas

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcGetHeaders()
    Local cEmpAtu      As Character
    Local cFilAtu      As Character
    Local aHeadersApi  As Array

    If (oRest:getHeaderRequest():GetJsonText("tenantId") != "null")
        aHeadersApi := StrTokArr(oRest:getHeaderRequest():GetJsonText("tenantId"), ",")
    
        //Altera Empresa e Filial
        If ValType(aHeadersApi) == "A" .And. Len(aHeadersApi) > 1
            cEmpAtu := Upper(AllTrim(aHeadersApi[1]))
            cFilAtu := Upper(AllTrim(aHeadersApi[2]))

            If FWFilExist(cEmpAtu, cFilAtu) //Verifica se encontrou Empresa-Filial
                cEmpAnt := cEmpAtu
                cFilAnt := cFilAtu
            EndIf
        EndIf
    EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcGetFilters
Retorna filtros enviados na chamada da API
@param cFilters: Filtros

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcGetFilters()
    Local aUrlFilter  As Array
        
    If (oRest:getQueryRequest():GetJsonText("filter") != "null")        
        aUrlFilter := { ;
                        {"FILTER", oRest:getQueryRequest():GetJsonText("filter")};
                      }
    EndIf
Return aUrlFilter

//-------------------------------------------------------------------
/*/{Protheus.doc} tcTreatsFilter
Classe para tratar os filtros para tabelas de origem x destino
Utiliza a tabela QLB

@author Totvs
/*/
//-------------------------------------------------------------------
class tcTreatsFilter
// Declaração das Propriedades da Classe
private Data jFilter     As Json
private Data nPosJson    As Numeric
private Data aFilters    As Array
Private Data aJsonFields As Array
private Data cField      As Character

// Declaração dos Métodos da Classe
public method New() CONSTRUCTOR
public method tcPutFieldSettings()
public method tcGetStruct()
public method tcClearObjects()
public method tcKillObjects()
public method tcSetStruct()
private method tcGetFieldSettings()
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} tcTreatsFilter
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new() class tcTreatsFilter
::jFilter     := JsonObject():new()
::aFilters    := {}
::aJsonFields := {}
::cField      := ""
return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcPutFieldsSettings
Inserts the setting fields in the json object

@author Totvs
/*/
//-------------------------------------------------------------------
method tcPutFieldSettings(jResposta As Json, jProfile as Json) class tcTreatsFilter
Local nI As Numeric
Local cFilter As Character
Local aFilters := {} As Array
Local uRet

Default jResposta := JsonObject():new()
Default jProfile  := JsonObject():new()

aFilters := AddFiltersProfile(jProfile)

For nI := 1 to Len(jResposta["items"])
    cFilter := jResposta["items"][nI]["filter"]   
    
    If !Empty(cFilter)
        uRet := ::jFilter:fromJson(cFilter)
        
        If ValType(uRet) == "U"                                                         
            ::tcGetFieldSettings(jResposta, nI, aFilters)
            
            If ValType(jProfile["totalLedger"]) == "L"
                jResposta["items"][Len(jResposta["items"])]["filter"]["totalLedger"] := jProfile["totalLedger"]
            EndIf                          
        EndIf
    EndIf
Next

//Destroi objetos da classe
::tcKillObjects()
return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcGetFieldSettings
Search and add field's settings

@author Totvs
/*/
//-------------------------------------------------------------------
method tcGetFieldSettings(jResposta as Json, nPosJson as Numeric, aFiltersProfile as Array) class tcTreatsFilter
Local nPos   As Numeric
Local nI     As Numeric
Local cValue As Character

If ValType(::jFilter) <> "U"                                    
    jResposta["items"][nPosJson]["filter"] := JsonObject():new()
    ::tcClearObjects() //Limpa objetos
                
    //Tabela origem    
    For nI := 1 to Len(::jFilter["tabori"])                                      
        aAdd(::aFilters, JsonObject():new())
        nPos := Len(::aFilters)
        ::aFilters[nPos] := ::jFilter["tabori"][nI]

        cValue := ""                 
        If Len(aFiltersProfile) > 0
            cValue := GetFiltersValue(1, ::aFilters[nPos]["field"], ::aFilters[nPos]["operation"], aFiltersProfile)
        EndIf        

        ::aFilters[nPos]["value"] := cValue        
        ::cField := ::aFilters[nPos]["field"]//Armazena campo

        ::tcSetStruct() //Insere informacoes SX3 do campo                                             
    Next

    If Len(::aFilters) > 0 
        jResposta["items"][nPosJson]["filter"]["tabori"] := AClone(::aFilters)
    EndIf

    ::tcClearObjects() //Limpa objetos
    
    //Tabela destino        
    For nI := 1 to Len(::jFilter["tabdes"])                              
        aAdd(::aFilters, JsonObject():new())
        nPos := Len(::aFilters)
        ::aFilters[nPos] := ::jFilter["tabdes"][nI]

        cValue := ""                 
        If Len(aFiltersProfile) > 0
            cValue := GetFiltersValue(2, ::aFilters[nPos]["field"], ::aFilters[nPos]["operation"], aFiltersProfile)
        EndIf        

        ::aFilters[nPos]["value"] := cValue        
        ::cField := ::aFilters[nPos]["field"]//Armazena campo
        
        ::tcSetStruct() ////Insere informacoes SX3 do campo          
    Next

    If Len(::aFilters) > 0 
        jResposta["items"][nPosJson]["filter"]["tabdes"] := AClone(::aFilters)
    EndIf
EndIf
FwFreeArray(aFiltersProfile)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcGetStruct
Returns table´s struct

@author Totvs
/*/
//-------------------------------------------------------------------
method tcGetStruct(cSql as Character) class tcTreatsFilter
Local nAt as Numeric
Local nI as Numeric
Local cFields as Character
Local aStructAux := {} as Array
Local aFldStrAux := {} as Array
Local aFields := {} as Array

DEFAULT cSql    := ""

If !Empty(cSql) //Query enviada por parametro
    nAt := At("SELECT", cSql)+6 //Posicao inicial
    cFields := SubStr(cSql, nAt, Len(cSql))    
        
    nAt := At("FROM", cFields)-1 //Posicao final
    cFields := SubStr(cFields, 1, nAt)
   
    aFields := StrTokArr2(cFields, ",") //Armazena campos em array

    If Len(aFields) > 0
        For nI := 1 To Len(aFields)
            aFldStrAux := FWSX3Util():GetFieldStruct( AllTrim( StrTran(aFields[nI],"'","") ) )                  
            If Len(aFldStrAux) > 0
                aAdd(aStructAux, aFldStrAux)
            EndIf
        Next
    EndIf
EndIf

//Limpa arrays
FwFreeArray(aFldStrAux)
FwFreeArray(aFields)
return aClone(aStructAux)
         
//-------------------------------------------------------------------
/*/{Protheus.doc} tcSetStruct
Insert field´s properties

@author Totvs
/*/
//-------------------------------------------------------------------
method tcSetStruct(aHeader as Array) class tcTreatsFilter
Local nPosFilter := 0 as Numeric
Local nLenJson   := 0 as Numeric
Local nI         := 0 as Numeric
Local uComboBox  as Variant
Local aArea := GetArea() as Array
Local aFieldStru := {}

If ValType(aHeader) <> "U" .And. Len(aHeader) > 0
    ::tcClearObjects() //Limpa objetos
    
    //Carrega campos do Header
    For nI := 1 To Len(aHeader)        
        uComboBox := tcGetComboBox(aHeader[nI, 2])
        uComboBox := If(ValType(uComboBox) == "A" .And. Len(uComboBox) > 0, uComboBox, "")
        nLenJson++
        
        aAdd(::aJsonFields, JsonObject():new())       
        ::aJsonFields[nLenJson]["order"]   := aHeader[nI, 1]
        ::aJsonFields[nLenJson]["field"]   := AllTrim(aHeader[nI, 2])
        ::aJsonFields[nLenJson]["title"]   := AllTrim(aHeader[nI, 3])
        ::aJsonFields[nLenJson]["type"]    := AllTrim(aHeader[nI, 4])
        ::aJsonFields[nLenJson]["size"]    := aHeader[nI, 5] 
        ::aJsonFields[nLenJson]["decimal"] := aHeader[nI, 6]               
        ::aJsonFields[nLenJson]["picture"] := AllTrim(aHeader[nI, 7])
        ::aJsonFields[nLenJson]["width"]   := aHeader[nI, 8]
        ::aJsonFields[nLenJson]["cbox"]    := uComboBox
    Next
ElseIf ValType(::cField) <> "U" .And. !Empty(::cField)
    nPosFilter := Len(::aFilters)
    aFieldStru := FWSX3Util():GetFieldStruct( ::cField ) 

    If Len(aFieldStru) > 0         
        uComboBox := tcGetComboBox(::cField)
        uComboBox := If(ValType(uComboBox) == "A" .And. Len(uComboBox) > 0, uComboBox, "")

        ::aFilters[nPosFilter]["title"]   := AllTrim(FWX3Titulo(::cField))
        ::aFilters[nPosFilter]["type"]    := aFieldStru[2]
        ::aFilters[nPosFilter]["size"]    := aFieldStru[3]
        ::aFilters[nPosFilter]["decimal"] := aFieldStru[4]
        ::aFilters[nPosFilter]["picture"] := AllTrim(X3Picture(::cField))                        
        ::aFilters[nPosFilter]["width"]   := CValToChar(aFieldStru[3] * 10) + "px"
        ::aFilters[nPosFilter]["cbox"]    := uComboBox
    EndIf    
EndIf

//Restaura area
RestArea(aArea)
return ::aJsonFields

//-------------------------------------------------------------------
/*/{Protheus.doc} tcClearObjects
Clear classe's objects

@author Totvs
/*/
//-------------------------------------------------------------------
method tcClearObjects() class tcTreatsFilter
aSize(::aFilters, 0)
aSize(::aJsonFields, 0)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcKillObjects
Destroys classe´s object tcTreatsFilter

@author Totvs
/*/
//-------------------------------------------------------------------
method tcKillObjects() class tcTreatsFilter
FwFreeArray(::aFilters)
FwFreeArray(::aJsonFields)
::jFilter     := Nil
return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcGetQryParams
Retorna conteudo dos parametros enviados
@param cQryParams: conteudo do parametro

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcGetQryParams(cNameParam)
    Local cQryParams := ""

    If (oRest:getQueryRequest():GetJsonText(cNameParam) != "null")
        cQryParams := oRest:getQueryRequest():GetJsonText(cNameParam)
    EndIf
Return cQryParams

/*/{Protheus.doc} tcSetMatchManual
Retorna a proxima sequencia disponivel na temporaria

@author Totvs
/*/
Function tcNextSeqMatch(cTable, cSeqMatch)
Local cQuery    := "" As Character
Local cAliasTmp := GetNextAlias()

Default cTable    := ""
Default cSeqMatch := ""

If ValType(cTable) == "C" .And. !Empty(cTable)
    cSeqMatch := Replicate('0',TamSx3("QLD_SEQMAT")[1]) //Inicializa sequencial

    cQuery := "SELECT MAX(SEQMATCH) SEQMATCH"
    cQuery += " FROM " + cTable
    cQuery += " WHERE REGMATCH = '999'"
    cQuery += " AND D_E_L_E_T_ = ' '"

    dbUseArea(.T., "TOPCONN", TcGenQry(,, cQuery), cAliasTmp, .T., .F.)

    //Armazena SeqMatch
    If (cAliasTmp)->(!EOF()) .And. !Empty((cAliasTmp)->SEQMATCH)
        cSeqMatch := (cAliasTmp)->SEQMATCH
    EndIf

    cSeqMatch := Soma1(cSeqMatch) //Incrementa seqmatch
    
    TcRefresh(cTable) // Resetar tempo de timeout


    (cAliasTmp)->(dbCloseArea()) //Fecha temporario
EndIf
return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcSetResponse
Adiciona resposta padrao na api
Quando lPadrao = T, nao trata e utiliza retorno padrao ja enviado 
pela api

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcSetResponse(lResponse As Logical, cChaveRes As Character, cResponse As Character, lPadrao As Logical)
Local cReturn := "" As Character

If ValType(oRest) == "O"            
    If ValType(lResponse) == "L" .And. ValType(cChaveRes) == "C" .And. ValType(cResponse) == "C"                                 
        oRest:setKeyHeaderResponse("Content-Type", "application/json") 
        
        If lPadrao
            cReturn := cResponse
        Else
            cReturn := If(!Empty(cChaveRes) .And. !Empty(cResponse), '{"'+cChaveRes+'": "'+cResponse+'"}', '{}')                               
        EndIf

        If lResponse                        
            oRest:setResponse(cReturn)                                        
        Else                      
            oRest:setFault(cReturn)                                        
        EndIf        
    EndIf
EndIf
return

//-------------------------------------------------------------------
/*/{Protheus.doc} tcGetComboBox
Tratamento para retornar ComboBox do SX3 em formato Json
pela api

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcGetComboBox(cField)
Local cComboBox := "" As Character
Local cColorBox := "" As Character
Local nI        := 0  As Numeric
Local nAt       := 0  As Numeric
Local aComboBox := {} As Array
Local aColorBox := {} As Array
Local aRetBox   := {} As Array 

Default cField := ""

If !Empty(cField)
    If Alltrim(Lower(cField)) == "reconciled"
        cComboBox := "S=Conciliado;N=Nao Conciliado"
        cColorBox := "color-01;color-08"
    ElseIf Alltrim(Lower(cField)) == "typematch"
        cComboBox := "A=Automático;M=Manual;AD=Automático Divergente;MD=Manual Divergente;"
        cColorBox := "color-12;color-06;color-07;color-09"
    Else
        cComboBox := AllTrim(Posicione("SX3", 2, AllTrim(cField), "X3_CBOX"))
    EndIf

    If !Empty(cComboBox)
        aComboBox := StrTokArr2(cComboBox, ";")
        aColorBox := StrTokArr2(cColorBox, ";")

        For nI := 1 To Len(aComboBox)
            nAt := At("=", aComboBox[nI])
            
            aAdd(aRetBox, JsonObject():new())
            aRetBox[Len(aRetBox)]["value"] := SubStr(aComboBox[nI], 1, nAt-1)
            aRetBox[Len(aRetBox)]["label"] := SubStr(aComboBox[nI], nAt+1, Len(aComboBox[nI]))

            If ValType(aColorBox) == "A" .And. Len(aColorBox) > 0 .And. ValType(aColorBox[nI]) == "C"
                aRetBox[Len(aRetBox)]["color"] := aColorBox[nI]
            EndIf
        Next
    EndIf
EndIf
Return aRetBox                                                                    

//-------------------------------------------------------------------
/*/{Protheus.doc} tcRetConcat
Retorna o caracter para concatenar strings de acordo com o BD

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcRetConcat()
Return IIF("SQL"$AllTrim(Upper(TcGetDb())), "+", "||")

//-------------------------------------------------------------------
/*/{Protheus.doc} tcRetConcat
Retorna o tamanho do campo UUID
32 para Oracle
36 para SQL e Postgres

@author Totvs
/*/
//-------------------------------------------------------------------
Function tcRetTamUID()
Return IIf("ORACLE"$AllTrim(Upper(TcGetDb())),32,36)

//-------------------------------------------------------------------
/*/{Protheus.doc} tcDropTable
Realiza o drop das tabela temporaria passada por parametro

@author Totvs
/*/
Function tcDropTable(cTableTmp As Character)
Local cError := "" As Character

If ValType(cTableTmp) == "C" .And. !Empty(cTableTmp)

    If TcCanOpen(cTableTmp) //Verificar se a tabela existe
        If !(TCDelFile(cTableTmp)) // TcDelFile exclui a tabela temporária
            conout(TCSQLError())
            cError := STR0001 //"Nao foi possivel excluir a tabela temporaria: "
            cError += cTableTmp + STR0002 //". Para mais detalhes, verificar arquivo console.log"
        EndIf
    EndIf    
Else    
    cError := STR0003 //"Nao foi possivel encontrar a tabela temporária"
EndIf    
Return cError

//-------------------------------------------------------------------
/*/{Protheus.doc} tcProcessLGPD
Faz o tratamento dos campos para atender à LGPD

@author Totvs
/*/
Function tcProcessLGPD(aCposLGPD)
Local aRetLGPD := {}
Local nI       := 0
Local nTam     := 0
DEFAULT aCposLGPD := {}

aRetLGPD := FwProtectedDataUtil():UsrAccessPDField(__cUserID, aCposLGPD)

If Len(aRetLGPD) <> Len(aCposLGPD)
    For nI := 1 to Len(aCposLGPD)
        cField  := aCposLGPD[nI]
        If aScan(aRetLGPD , cField) == 0
            nTam := TAMSX3(cField)[1]
            aCposLGPD[nI] := "'"+REPLICATE("*", nTam)+"' as "+cField
        EndIf
    Next nI
EndIf

Return aRetLGPD

//-------------------------------------------------------------------
/*/{Protheus.doc} tcClearSql
Faz o tratamento dos campos evitar o uso de comandos de banco de dados nos campos

@author Totvs
/*/
Function tcClearSql(cValue)

Default cValue := ""

cValue = AllTrim(cValue)
cValue = UPPER(cValue)
cValue = StrTran(cValue,"=","")
cValue = StrTran(cValue,"'","")
cValue = StrTran(cValue,"","")
cValue = StrTran(cValue," OR ","")
cValue = StrTran(cValue," AND ","")
cValue = StrTran(cValue,"(","")
cValue = StrTran(cValue,")","")
cValue = StrTran(cValue,"<","[")
cValue = StrTran(cValue,">","]")
cValue = StrTran(cValue,"UPDATE","")
cValue = StrTran(cValue,"-SHUTDOWN","")
cValue = StrTran(cValue,"--","")
cValue = StrTran(cValue,"'","")
cValue = StrTran(cValue,"#","")
cValue = StrTran(cValue,"$","")
cValue = StrTran(cValue,"%","")
cValue = StrTran(cValue,"¨","")
cValue = StrTran(cValue,"&","")
cValue = StrTran(cValue,"'OR'1'='1'","")
cValue = StrTran(cValue,"--","")
cValue = StrTran(cValue,"INSERT","")
cValue = StrTran(cValue,"DROP","")
cValue = StrTran(cValue,"DELET","")
cValue = StrTran(cValue,"XP_","")
cValue = StrTran(cValue,"SELECT","")
cValue = StrTran(cValue,"*","")
    
Return cValue

/*/{Protheus.doc} userBranches
  Função para retornar as filiais que o usuário tem acesso.
  Cópia de BranchesofUsers - SIGAFIN
  @type function
  @version 12.1.33
  @author totvs
  @since 09/12/2021
  @return Object, jSon filiais de acesso do usuário
/*/
Function userBranches()
  Local nGrupo    As Numeric
  Local nGrpFil   As Numeric
  Local aBranches As Array
  Local aPswUser  As Array
  Local aPswGrp   As Array
  Local aFiliais  As Array
  Local cGrpRule  As Character
  Local jBranches As Json

  PswOrder(1)
  PswSeek(__cUserId, .T.)

  aPswUser  := PswRet()
  aBranches := {}
  aPswGrp   := {}
  aFiliais  := {}
  aGrpFil   := {}
  cGrpRule  := AllTrim(FWUsrGrpRule(__cUserId))

  If cGrpRule $ "1|3"                     // Prioriza grupo ou soma
    For nGrupo := 1 To Len(aPswUser[1][10])             // [1][10] A Vetor com os grupos, adiciona as filiais do grupo
      If PswSeek(aPswUser[1][10][nGrupo], .F.)          // Pesquisa o(s) Grupo(s) que o Usuario participa
        aPswGrp := FwGrpEmp(aPswUser[1][10][nGrupo])
        For nGrpFil := 1 To Len(aPswGrp)
          aAdd(aGrpFil, aPswGrp[nGrpFil])
        Next nGrpFil
      EndIf
    Next nGrupo
    If cGrpRule $ "1"
      aFiliais := aGrpFil
    EndIf
  ElseIf cGrpRule == "2"                // Desconsiderar
    aFiliais  := AClone(aPswUser[2][6])
  EndIf

  If cGrpRule == "3"                    // Somar
    aFiliais  := AClone(aPswUser[2][6])
    If Empty(aFiliais)
        If !Empty(aGrpFil)
          aFiliais := aGrpFil       
        EndIf
    Else
      If !aFiliais[1] == "@@@@" .And. !Empty(aGrpFil)       // usuário não possui acesso a todas filiais e existe filiais configuradas no grupo
        For nGrpFil := 1 To Len(aGrpFil)                    // regra para não duplicar
          If AScan(aFiliais, { |x| x $ aGrpFil[nGrpFil]}) == 0
            Aadd(aFiliais, aGrpFil[nGrpFil])
          EndIf
        Next nGrpFil
      EndIf
    EndIf
  EndIf
  
  aBranches := companyFormat(aFiliais)
  jBranches := JsonObject():New()
  jBranches["items"] := aBranches
Return jBranches

/*/{Protheus.doc} companyFormat
  Função para formatar As filiais que o usuário tem acesso.
  Cópia de definitionOfCompany - SIGAFIN

  @type function
  @version 12.1.33
  @author totvs
  @since 09/12/2021
  @param branchesInfo, array, filiais
  @return Array, array com informações das filiais
  {
    "branchId": string,
    "totalId": string,
    "companyId": string,
    "unitId": string,
    "companyName": string,
    "unitName": string,
    "branchName": string
  }
/*/
Function companyFormat(aBranchesInfo As Array) As Array
  Local nFil         as Numeric
  Local nLenBranch   as Numeric
  Local nLenCompany  as Numeric
  Local nLenUnit     as Numeric
  Local nLenBranchId as Numeric
  Local cLayout      as Character
  Local cBranchName  as Character
  Local aSM0         as Array
  Local aBranches    as Array
  Local nLenEmp      as Numeric
  Local lSharedQLC   as Logical

  nLenBranch   := FWSizeFilial()
  nLenCompany  := Len(FWSM0Layout(, 1))
  nLenUnit     := Len(FWSM0Layout(, 2))
  nLenBranchId := Len(FWSM0Layout(, 3))
  aBranches    := {}
  nLenEmp      := Len(cEmpAnt)
  lSharedQLC   := FWModeAccess("QLC", 1) == "C" .And. FWModeAccess("QLC", 2) == "C" .And. FWModeAccess("QLC", 3) == "C" 

  If lSharedQLC //Se QLC totalmente compartilhada, verifica filiais que usuario tem acesso
    If aBranchesInfo[1] == "@@@@"
        aSM0 := FwLoadSM0()

        For nFil := 1 To Len(aSM0)
            If aSM0[nFil][1] == cEmpAnt
                cLayout := aSM0[nFil][2]

                aAdd(aBranches, JsonObject():New())                
                aBranches[Len(aBranches)]["branch"] := cLayout
                aBranches[Len(aBranches)]["label"]  := AllTrim(aSM0[nFil][7])
                aBranches[Len(aBranches)]["group"]  := AllTrim(aSM0[nFil][1])                
            EndIf
        Next nFil
    Else
        For nFil := 1 To Len(aBranchesInfo)
            cLayout := aBranchesInfo[nFil]
            If SubStr(cLayout, 1, nLenEmp) == cEmpAnt
                cLayout := SubStr(cLayout, nLenEmp + 1)
                cLayout := PadR(cLayout, nLenBranch)        
                cBranchName  := AllTrim(FWFilialName(cEmpAnt, cLayout))

                aAdd(aBranches, JsonObject():New())        
                aBranches[Len(aBranches)]["branch"] := cLayout
                aBranches[Len(aBranches)]["label"]  := AllTrim(cBranchName)        
                aBranches[Len(aBranches)]["group"]  := cEmpAnt                
            EndIf
        Next nFil
    EndIf
  Else //Se hover alguma exclusividade na QLC, exibe apenas filial logada
    aAdd(aBranches, JsonObject():New())                
    aBranches[Len(aBranches)]["branch"] := cFilAnt
    aBranches[Len(aBranches)]["label"]  := AllTrim(FwFilialName())
    aBranches[Len(aBranches)]["group"]  := cEmpAnt
  EndIf
Return aBranches

/*/{Protheus.doc} GetBranchiesForConditional
  Função para retornar as condicionais de filiais das queries.
  @type function
  @version 12.1.33
  @author totvs
  @since 29/12/2021
  @return cBranchiesCondition, condiciopnais de filiais para query
/*/
Function GetBranchiesForConditional(cTable as Character)
Local cBranchiesCondition := "" as Character
Local cBranchField := "" as Character
Local nI := 0 as Numeric
Local oUserBranchies := UserProfileProtheusData():getData() as Object
Local aBranchies := oUserBranchies:getProfile() as Array
Local lSharedTable := .F. as Logical

If ValType(cTable) == "C" .And. !Empty(cTable)
    cBranchField := GetBranchField(cTable)    
    
    If !Empty(cBranchField)
        lSharedTable := FWModeAccess(cTable, 1) == "C" .And.; 
                            FWModeAccess(cTable, 2) == "C" .And.;
                            FWModeAccess(cTable, 3) == "C" 
        
        cBranchiesCondition := cBranchField+" = '"+FwXFilial(cTable, cFilAnt)+"'"

        If ValType(aBranchies) == "A" .And. Len(aBranchies) > 1 .And. aBranchies[1]
            If lSharedTable .Or. (Len(aBranchies[2]) == 1 .And. aBranchies[2,1]<>"[]") //Uma filial ou tabela compartilhada
                cBranchiesCondition := cBranchField+" = '"+FwXFilial(cTable, aBranchies[2][1])+"'"
            ElseIf Len(aBranchies[2]) > 1 //Varias filiais
                cBranchiesCondition := cBranchField+" IN ("
                For nI := 1 To Len(aBranchies[2])
                    cBranchiesCondition += "'"+FwXFilial(cTable, aBranchies[2][nI])+"',"
                Next
                cBranchiesCondition := SubStr(cBranchiesCondition, 1, Len(cBranchiesCondition)-1)+")"        
            EndIf        
        EndIf
    EndIf    
EndIf

return cBranchiesCondition

/*/{Protheus.doc} GetBranchField
  Função para retornar campo da filial da tabela ou temporario.
  @type function
  @version 12.1.33
  @author totvs
  @since 29/12/2021
  @return cBranchField, campo de filial da tabela
/*/
Static Function GetBranchField(cTable)
Local cBranchField := "" as Character
If !(cTable)->(FieldPos(cTable+"_FILIAL"))
    cBranchField := SubStr(cTable, 2, 2)+"_FILIAL"
Else
    cBranchField := cTable+"_FILIAL"
EndIf
Return cBranchField

/*/{Protheus.doc} AddFiltersProfile
  Função para armazenar as informacoes de filtros
  de profile do usuario em array
  @type function
  @version 12.1.33
  @author totvs
  @since 10/03/2022
  @return aFilters, informacoes dos filtros
/*/
Static Function AddFiltersProfile(jFilters as Json)
Local nI          := 0  as Numeric 
Local aFilters    := {} as Array
Local aFiltersAux := {} as Array

//Filtros origem
If ValType(jFilters["tabori"]) == "A"
    For nI := 1 To Len(jFilters["tabori"])
        aAdd(aFiltersAux, {jFilters["tabori"][nI]["field"],;
                           jFilters["tabori"][nI]["operation"],;
                           jFilters["tabori"][nI]["value"]})
    Next nI

    aAdd(aFilters, aClone(aFiltersAux))
EndIf

aFiltersAux := {}

//Filtros destino
If ValType(jFilters["tabdes"]) == "A"
    For nI := 1 To Len(jFilters["tabdes"])
        aAdd(aFiltersAux, {jFilters["tabdes"][nI]["field"],;
                           jFilters["tabdes"][nI]["operation"],;
                           jFilters["tabdes"][nI]["value"]})
    Next nI

    aAdd(aFilters, aClone(aFiltersAux))
EndIf
FwFreeArray(aFiltersAux)
Return aFilters

/*/{Protheus.doc} GetFiltersValue
  Função para retornar as informacoes de filtros
  de profile do usuario
  @type function
  @version 12.1.33
  @author totvs
  @since 10/03/2022
  @return cResponse, valores dos filtros
/*/
Static Function GetFiltersValue(nType as Numeric, cField as Character, cOperation as Character,;
                                    aFilters as Array)
Local cResponse := "" as Character
Local nPos := 0 as Numeric

DEFAULT nType      := 0
DEFAULT cField     := ""
DEFAULT cOperation := ""
DEFAULT aFilters   := {}

If !Empty(cOperation) .AND. (!Empty(cField) .OR. Upper(cOperation) == 'QUERY')
    If(nPos := aScan(aFilters[nType], {|x| AllTrim(Upper(x[1])) == AllTrim(Upper(cField)) .And.;
                    AllTrim(Upper(x[2])) == AllTrim(Upper(cOperation))})) > 0  
        cResponse := aFilters[nType][nPos][3]
    Endif
EndIf

Return cResponse

/*/{Protheus.doc} RetUsedFields
  Função para retornar os campos usados da tabela
  @type function
  @version 12.1.33
  @author totvs
  @since 04/04/2022
  @return aStructAux, campos usados da tabela
/*/
Function RetUsedFields(cTable)
Local nI := 0 as Numeric
Local aStructAux := {} as Array
Local aStruct    := FWSX3Util():GetListFieldsStruct(cTable , .F.) as Array

aStruct := FWVetByDic(aStruct, cTable) //Trata campos com informacoes do dicionario SX3

For nI := 1 To Len(aStruct)                   
    aAdd(aStructAux, aClone(aStruct[nI]))         
Next
FwFreeArray(aStruct)

Return aStructAux

/*/{Protheus.doc} RetConfiguration
  Função para retornar se configuracao existe
  @type function
  @author totvs
  @since 28/11/2022
  @return lRet - Se encontrou a configuracao
/*/  
Function RetConfiguration(cCodCfg)
Local lRet     := .F. as Logical
Local aArea    := GetArea() as Array
Local aAreaQLB := QLB->(GetArea()) as Array

Default cCodCfg := ""

If !Empty(cCodCfg)    
    QLB->(dbSetOrder(1)) //QLB_FILIAL+QLB_CODCFG
    lRet := QLB->(dbSeek(FWxFilial("QLB")+PadR(cCodCfg, TamSx3("QLB_CODCFG")[1])))    
EndIf

//Restaura areas
RestArea(aAreaQLB)
RestArea(aArea)
Return lRet

/*/{Protheus.doc} ReconciliateMetrics
	(long_description)
	@type  Static Function
	@author user
	@since date
	@version version
	@param param, param_type, param_descr
	@return return, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
/*/
Function ReconciliateMetrics(cEvent, cIdMetric, cSubRoutine, nQuant)

Local cFunBkp := FunName() as Character
Local nModBkp := nModulo as Numeric

Default cEvent      := ""
Default cIdMetric   := ""
Default cSubRoutine := Alltrim(ProcName(1))
Default nQuant      := 1

nModulo := 34 //Ajusta modulo para Contabil, necessário pois chamada PO-UI
SetFunName("CTBA940") //Ajusta a rotina, necessário pois chamada PO-UI

If cEvent == "01" //Quantidade de chamadas ou Total de Registros
    FWCustomMetrics():SetSumMetric(cSubRoutine, cIdMetric, nQuant) //Metrica       	
EndIf

//Restaura modulo e rotina originais
SetFunName(cFunBkp) 
nModulo := nModBkp

Return
