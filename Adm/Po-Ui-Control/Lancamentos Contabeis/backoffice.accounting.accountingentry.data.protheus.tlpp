#include "tlpp-core.th"

namespace totvs.protheus.backoffice.accounting.accountingentry
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} AccountingEntryProtheusData
Classe responsável pela consulta de dados

@author Totvs
/*/
//-------------------------------------------------------------------
class AccountingEntryProtheusData from FWAdapterBaseV2
    Public method new()
    Public method getAllAccountingEntry()
    static method getData() as object    
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} AccountingEntryProtheusData
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new(cVerbo as character, lList as Logical) class AccountingEntryProtheusData
    Default cVerbo := "GET"
    Default lList  := .T.
    _Super:New(cVerbo, lList)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} AccountingEntryProtheusData
Método para chamada e validação do tratamento de dados

@author Totvs
/*/
//-------------------------------------------------------------------
method getData() class AccountingEntryProtheusData as object
    static __oActiveData as object

    If ValType(__oActiveData) == "U"
        __oActiveData := AccountingEntryProtheusData():new()
    EndIf
return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getAllAccountingEntry
Metodo responsável pela busca dos lancamentos contabeis

@author Totvs
/*/
//-------------------------------------------------------------------
method getAllAccountingEntry(cIdProces as character, cType as character, cCurrency as character,;
                                nPage as numeric, nPageSize as numeric) class AccountingEntryProtheusData
    Local aArea  := GetArea() as Array
    Local cWhere := "" as character    
    
    Default nPage     := 1
    Default nPageSize := 10

    addMapFields(self)

    ::setPage(nPage)
    ::setPageSize(nPageSize)
    ::SetQuery(getQuery())
   
    cWhere += "LOWER(CT2_PROCES) = '"+Padr(Lower(cIdProces), TamSx3("CT2_PROCES")[1])+"'"
    If AllTrim(cType) <> "3" //1 = Inconsistentes | 2 = Sem inconsistencia | 3 = Ambos
        cWhere += " AND CT2_INCONS = '"+AllTrim(cType)+"'"
    EndIf
    If !Empty(cCurrency)
        cWhere += " AND CT2_MOEDLC = '"+AllTrim(cCurrency)+"'"
    EndIf
    cWhere += " AND D_E_L_E_T_ = ' '"

    ::SetWhere(cWhere)
    ::SetOrder("CT2_FILIAL, CT2_DATA, CT2_LOTE, CT2_SBLOTE, CT2_DOC, CT2_LINHA, CT2_MOEDLC")

    If ::Execute()
        ::FillGetResponse()
    EndIf

    RestArea(aArea)
    FwFreeArray(aArea)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} addMapFields
Realiza o mapeamento dos campos que serão retornados

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function addMapFields(oSelf as object)    
    Local cConcat    := tcRetConcat() as character
    Local cConcatAux := cConcat+"'|'"+cConcat as character
    Local cEmpAux    := "'"+cEmpAnt+"'" as character
    Local nTamField  := TamSx3("CT2_EMPORI")[1]+TamSx3("CT2_FILIAL")[1]+TamSx3("CT2_DATA")[1]+TamSx3("CT2_LOTE")[1]+;
                        TamSx3("CT2_SBLOTE")[1]+TamSx3("CT2_DOC")[1]+TamSx3("CT2_LINHA")[1]+TamSx3("CT2_EMPORI")[1]+;
                        TamSx3("CT2_FILORI")[1]+TamSx3("CT2_MOEDLC")[1]+TamSx3("CT2_SEQIDX")[1] as numeric
    
    //Chave única CT2: CT2_FILIAL+DTOS(CT2_DATA)+CT2_LOTE+CT2_SBLOTE+CT2_DOC+CT2_LINHA+CT2_EMPORI+CT2_FILORI+CT2_MOEDLC+CT2_SEQIDX
    oSelf:addMapFields("value", "value", .T., .F., {"value", "C", nTamField, 0}, cEmpAux+cConcatAux+"RTRIM(CT2_FILIAL)"+cConcatAux+"CT2_DATA"+cConcatAux+"CT2_LOTE"+;
        cConcatAux+"CT2_SBLOTE"+cConcatAux+"CT2_DOC"+cConcatAux+"CT2_LINHA"+cConcatAux+"CT2_EMPORI"+cConcatAux+"CT2_FILORI"+cConcatAux+"CT2_MOEDLC"+cConcatAux+"CT2_SEQIDX")
    oSelf:addMapFields("companyId"               , "companyid"               , .T., .F., {"companyid"               , "C", TamSx3("CT2_EMPORI")[1]  , 0}                     , cEmpAux)
    oSelf:addMapFields("branchId"                , "branchid"                , .T., .F., {"branchid"                , "C", TamSx3("CT2_FILIAL")[1]  , 0}                     , "CT2_FILIAL")
    oSelf:addMapFields("movementDate"            , "movementDate"            , .T., .F., {"movementDate"            , "D", TamSx3("CT2_DATA")[1]    , 0}                     , "CT2_DATA")
    oSelf:addMapFields("batchNumber"             , "batchNumber"             , .T., .F., {"batchNumber"             , "C", TamSx3("CT2_LOTE")[1]    , 0}                     , "CT2_LOTE")
    oSelf:addMapFields("sublot"                  , "sublot"                  , .T., .F., {"sublot"                  , "C", TamSx3("CT2_SBLOTE")[1]  , 0}                     , "CT2_SBLOTE")
    oSelf:addMapFields("document"                , "document"                , .T., .F., {"document"                , "C", TamSx3("CT2_DOC")[1]     , 0}                     , "CT2_DOC")
    oSelf:addMapFields("item"                    , "item"                    , .T., .F., {"item"                    , "C", TamSx3("CT2_LINHA")[1]   , 0}                     , "CT2_LINHA")
    oSelf:addMapFields("itemType"                , "itemType"                , .T., .F., {"itemType"                , "C", TamSx3("CT2_DC")[1]      , 0}                     , "CT2_DC")
    oSelf:addMapFields("debitAccoutCode"         , "debitAccoutCode"         , .T., .F., {"debitAccoutCode"         , "C", TamSx3("CT2_DEBITO")[1]  , 0}                     , "CT2_DEBITO")
    oSelf:addMapFields("creditAccoutCode"        , "creditAccoutCode"        , .T., .F., {"creditAccoutCode"        , "C", TamSx3("CT2_CREDIT")[1]  , 0}                     , "CT2_CREDIT")
    oSelf:addMapFields("complementaryHistory"    , "complementaryHistory"    , .T., .F., {"complementaryHistory"    , "C", TamSx3("CT2_HIST")[1]    , 0}                     , "CT2_HIST")
    oSelf:addMapFields("costCenterDebitCode"     , "costCenterDebitCode"     , .T., .F., {"costCenterDebitCode"     , "C", TamSx3("CT2_DCD")[1]     , 0}                     , "CT2_DCD")
    oSelf:addMapFields("costCenterCreditCode"    , "costCenterCreditCode"    , .T., .F., {"costCenterCreditCode"    , "C", TamSx3("CT2_CCC")[1]     , 0}                     , "CT2_CCC")
    oSelf:addMapFields("accountingItemDebitCode" , "accountingItemDebitCode" , .T., .F., {"accountingItemDebitCode" , "C", TamSx3("CT2_ITEMD")[1]   , 0}                     , "CT2_ITEMD")
    oSelf:addMapFields("accountingItemCreditCode", "accountingItemCreditCode", .T., .F., {"accountingItemCreditCode", "C", TamSx3("CT2_ITEMC")[1]   , 0}                     , "CT2_ITEMC")
    oSelf:addMapFields("classValueDebitCode"     , "classValueDebitCode"     , .T., .F., {"classValueDebitCode"     , "C", TamSx3("CT2_CLVLDB")[1]  , 0}                     , "CT2_CLVLDB")
    oSelf:addMapFields("classValueCreditCode"    , "classValueCreditCode"    , .T., .F., {"classValueCreditCode"    , "C", TamSx3("CT2_CLVLCR")[1]  , 0}                     , "CT2_CLVLCR")
    oSelf:addMapFields("standardAccountingEntry" , "standardAccountingEntry" , .T., .F., {"standardAccountingEntry" , "C", TamSx3("CT2_LP")[1]      , 0}                     , "CT2_LP")
    oSelf:addMapFields("coalescedJournalEntry"   , "coalescedJournalEntry"   , .T., .F., {"coalescedJournalEntry"   , "C", TamSx3("CT2_AGLUT")[1]   , 0}                     , "CT2_AGLUT")    
    oSelf:addMapFields("currency"                , "currency"                , .T., .F., {"currency"                , "C", TamSx3("CT2_MOEDLC")[1]  , 0}                     , "CT2_MOEDLC")
    oSelf:addMapFields("uniqueSeqKey"            , "uniqueSeqKey"            , .T., .F., {"uniqueSeqKey"            , "C", TamSx3("CT2_SEQIDX")[1]  , 0}                     , "CT2_SEQIDX")
    oSelf:addMapFields("amount"                  , "amount"                  , .T., .F., {"amount"                  , "N", TamSx3("CT2_VALOR")[1]   , TamSx3("CT2_VALOR")[2]}, "CT2_VALOR")
    oSelf:addMapFields("amount01"                , "amount01"                , .T., .F., {"amount01"                , "N", TamSx3("CT2_VLR01")[1]   , TamSx3("CT2_VLR01")[2]}, "CT2_VLR01")
    oSelf:addMapFields("amount02"                , "amount02"                , .T., .F., {"amount02"                , "N", TamSx3("CT2_VLR02")[1]   , TamSx3("CT2_VLR02")[2]}, "CT2_VLR02")
    oSelf:addMapFields("amount03"                , "amount03"                , .T., .F., {"amount03"                , "N", TamSx3("CT2_VLR03")[1]   , TamSx3("CT2_VLR03")[2]}, "CT2_VLR03")
    oSelf:addMapFields("amount04"                , "amount04"                , .T., .F., {"amount04"                , "N", TamSx3("CT2_VLR04")[1]   , TamSx3("CT2_VLR04")[2]}, "CT2_VLR04")
    oSelf:addMapFields("amount05"                , "amount05"                , .T., .F., {"amount05"                , "N", TamSx3("CT2_VLR05")[1]   , TamSx3("CT2_VLR05")[2]}, "CT2_VLR05")
    oSelf:addMapFields("companyOrigin"           , "companyOrigin"           , .T., .F., {"companyOrigin"           , "C", TamSx3("CT2_EMPORI")[1]  , 0}                     , "CT2_EMPORI")
    oSelf:addMapFields("branchOrigin"            , "branchOrigin"            , .T., .F., {"branchOrigin"            , "C", TamSx3("CT2_FILORI")[1]  , 0}                     , "CT2_FILORI")
    oSelf:addMapFields("uniqueIdentifier"        , "uniqueIdentifier"        , .T., .F., {"uniqueIdentifier"        , "C", TamSx3("CT2_MSUIDT")[1]  , 0}                     , "CT2_MSUIDT")
    oSelf:addMapFields("processUniqueIdentifier" , "processUniqueIdentifier" , .T., .F., {"processUniqueIdentifier" , "C", TamSx3("CT2_PROCES")[1]  , 0}                     , "CT2_PROCES")    
    oSelf:addMapFields("inconsistent"            , "inconsistent"            , .T., .F., {"inconsistent"            , "C", TamSx3("CT2_INCONS")[1]  , 0}                     , "CT2_INCONS")
    oSelf:addMapFields("detailsinconsistencies"  , "detailsinconsistencies"  , .T., .F., {"detailsinconsistencies"  , "M", TamSx3("CT2_INCDET")[1]  , 0}                     , "CT2_INCDET")
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getQuery
Realiza a query para busca de informações

@author Totvs
/*/
//-------------------------------------------------------------------
Static Function getQuery() as character
    Local cQuery as character

    cQuery := " SELECT #QueryFields#"
    cQuery += " FROM "+RetSqlName("CT2")
    cQuery += " WHERE #QueryWhere#"
Return cQuery
