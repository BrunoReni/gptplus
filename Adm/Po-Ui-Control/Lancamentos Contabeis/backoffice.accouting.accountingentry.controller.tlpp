#include "tlpp-core.th"
#include "backoffice.accounting.accountingentry.controller.ch"

namespace totvs.protheus.backoffice.accounting.accountingentry
using namespace totvs.protheus.backoffice.reconciliation.util

//-------------------------------------------------------------------
/*/{Protheus.doc} AccountingEntry
Classe principal de controle, onde é inicializado o EndPoint

@author Totvs
/*/
//-------------------------------------------------------------------
class AccountingEntry
    public method new()
    
    @Get("/api/ctb/accountingentry/")
    public method getAccountingEntry()
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} AccountingEntry
Metodo construtor

@author Totvs
/*/
//-------------------------------------------------------------------
method new() class AccountingEntry
return

//-------------------------------------------------------------------
/*/{Protheus.doc} getAccountingEntry
Metodo que inicia a chamada dos lancamentos contabeis

@author Totvs
/*/
//-------------------------------------------------------------------
method getAccountingEntry() class AccountingEntry
    Local oService  := AccountingEntryService():getInstance() as object
    Local jResposta := Jsonobject():new() as Json
    Local cEmpBkp   := cEmpAnt as character
    Local cFilBkp   := cFilAnt as character
    Local cIdProces := oRest:getQueryRequest():GetJsonText("idproces") as character
    Local cType     := oRest:getQueryRequest():GetJsonText("type") as character //1 = Inconsistentes | 2 = Sem inconsistencia | 3 = Ambos
    Local cCurrency := oRest:getQueryRequest():GetJsonText("currency") as character //01-02-03-04-05
    Local nPage     := 1 as numeric
    Local nPageSize := 10 as numeric    
    Local cResponse := STR0001 as character //"Inconsistência encontrada na API."

    cIdProces := IIf(cIdProces == "null", "", cIdProces)
    cType     := IIf(cType == "null", "3", cType) //Se tipo nao enviado, considera todos
    cCurrency := IIf(cCurrency == "null", "", cCurrency) //Se moeda nao enviada, considera todas
    
    If CT2->(FieldPos("CT2_PROCES")) > 0 .And. CT2->(FieldPos("CT2_INCONS")) > 0        
        tcGetHeaders()
        tcGetPageAndPageSize(@nPage, @nPageSize)
        jResposta:fromJson(oService:getAccountingEntry(cIdProces, cType, cCurrency, nPage, nPageSize))
    Else
        cResponse := STR0002 //"Campos CT2_PROCES e CT2_INCONS não encontrados na base de dados"
    EndIf
    
    IIf(ValType(jResposta:GetJsonText("items")) <> "U",;
        tcAnswerRest(jResposta, .T.),;
        tcSetResponse(.F., "message", cResponse, .F.))

    //Restaura empresa e filial
    cEmpAnt := cEmpBkp
    cFilAnt := cFilBkp
return
