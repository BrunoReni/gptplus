#INCLUDE 'tlpp-core.th'
#include 'backoffice.ngf.template.CH'

#DEFINE CONFIG "configuration"
#DEFINE DESCRI "description"
#DEFINE FORMULA "formula"

NAMESPACE totvs.protheus.backoffice.ngf.template

Class Template
	Private Data oHashConfig as Object         // Hash para cache de informações que serão reaproveitadas
	Private Data jTemplate   as Json           // template utilizado EH_TEMPLAT
	Private Data jResults    as Json           // json com os resultados
	Private Data jSeh        as Json           // json com informações da SEH
	Private Data jEmpAcu     as Json           // acumulados do emprestimo SEH
	Private Data jEmpAcuSEI  as Json           // acumulados do emprestimo SEI
	Private Data lPagReg     as Logical        // indica se a classe está sendo acionada no momento do pagamento ou resgate
	Private Data dDateCalc   as Date           // data do começo do período para calculo. ex.:(data de inclusao, ultimo pagamento ou vencimento da parcela anterior)
	Private Data dDateVenc   as Date           // data do vencimento da parcela ou do pagamento
	Private Data dDtVencJur  as Date           // data do vencimento da parcela ou do pagamento para calculo personalizado do juros simples e composto
	Private Data dDateInc    as Date           // data de inclusão do contrato
	Private Data nDias       as Numeric        // dias corridos do período
	Private Data nDiasJur    as Numeric        // dias corridos do período para calculo do juros simples e composto
	Private Data nDiasUteis  as Numeric        // dias úteis do período
	Private Data nValorBase  as Numeric        // valor base para os calculos
	Private Data cCodIndCDI  as Character      // código do indice CDI
	Private Data nPercCDI    as Numeric        // percentual do CDI
	Private Data nTaxaMoeda  as Numeric        // taxa da moeda
	Private Data lAplicacao  as Logical        // Controle se é uma aplicação, .T. = APL  .F. = EMP
	Private Data nMVDiasCTB  as Numeric        // Quantidade de dias no ano
	Private Data nParcela    as Numeric        // Número da parcela atual para recalculo
	Private Data cJurRem     as Character      // Propriedade o objeto para juros ou rendimentos
	Private Data cError      as Character      // Mensagem de erro
	Private Data cQueryDate  as Character      // Query para maior data
	Private Data lIRIOFImune as Logical        // Aplicação imune de IR e IOF 
	Public Method new() CONSTRUCTOR
	Public Method setTemplate()               // Configura o template na classe
	Public Method openTemplate()              // Carrega o template com base no contrato
	Public Method setDateBase()               // Configura a data inicial do período
	Public Method setDateVenc()               // Configura a data final do período
	Public Method setDateJur()				  // Configura a data final personalizada para calculo de juros do período
	Public Method setValorBase()              // Configura o valor base, valor do pagamento, resgate ou da parcela
	Public Method setParcela()                // Configura o numero da parcela atual para calculo de emprestimos
	Public Method setTaxaMoeda()              // Defini uma taxa para moeda do contrato
	Public Method setPagReg()                 // Defini se o calculo é referente a um pagamento ou resgate
	Public Method getValor()                  // Retorna o total do valor solicitado
	Public Method getResults()                // retorna os totais e valores das formulas colculados
	Public Method calcTemplate()              // executa o calculo do template
	Public Method calcApropriacao()           // executa o calculo para apropricação
	Public Method getEmpTemplate()            // retorna objeto com as configurações disponíveis, utilizado para montar o front
	Public Method getAplTemplate()            // retorna objeto com as configurações disponíveis, utilizado para montar o front
	Public Method getError()                  // retorna o erro
	Public Method getEmpAcumulados()          // retorna os valore acumulados do empréstimo
	Public Method getEmpLegado()              // retorna os valore no formato do finxfin (array)
	Public Method getAplLegado()              // retorna os valore no formato do finxfin (array)
	Public Method setIRImune()                // Define se o IR e IOF deve ser imune no resgate
	Private Method getValorBase()             // retorna o valor base e soma a correção se configurada
	Private Method addFormula()               // adiciona as formulas no objeto
	Private Method calcConfig()
	Private Method calcDaysPeriod()
	Private Method empCDI()
	Private Method empJurSimples()            // calculo juros simples
	Private Method empJurComposto()           // calculo juros composto
	Private Method empIR()                    // calculo de IR
	Private Method empIndice()                // calculo por indices
	Private Method templateCDB()              // calculo por CDB
	Private Method templateIOF()              // calculo por IOF
	Private Method templateTaxas()            // calculo de taxas
	Private Method templateCustom()            // calculo de template customizado

EndClass

//-------------------------------------------------------------------
/*/{Protheus.doc} new
	Contrutor
	@author renato.ito
	@since 25/05/2022
	@param cTipo, character, tipo
/*/
//-------------------------------------------------------------------
Method new() Class Template
	::oHashConfig := FwHashMap():New()
	::cQueryDate  := ""
	::cError      := ""
	::lPagReg     := .F.
	::lAplicacao  := .F.
	::jTemplate               := JsonObject():New()
	::jSeh                    := JsonObject():New()
	::jEmpAcu                 := JsonObject():New()
	::jEmpAcuSEI              := JsonObject():new()
	::jEmpAcu[ 'nAcEmpJur1' ] := 0
	::jEmpAcu[ 'nAcEmpJur2' ] := 0
	::jEmpAcu[ 'nAcEmpCVC' ]  := 0
	::jEmpAcu[ 'nAcEmpLVC' ]  := 0
	::jEmpAcu[ 'nAcEmpJVC' ]  := 0
	::jEmpAcuSEI[ 'nAcEmpJur1' ] := 0
	::jEmpAcuSEI[ 'nAcEmpJur2' ] := 0
	::jEmpAcuSEI[ 'nAcEmpCVC' ]  := 0
	::jEmpAcuSEI[ 'nAcEmpLVC' ]  := 0
	::jEmpAcuSEI[ 'nAcEmpJVC' ]  := 0
	::jResults                := JsonObject():New()
	::jResults[ 'formulas' ]  := JsonObject():New()
	::jResults[ 'total' ]     := JsonObject():New()
	::jResults[ 'seh' ] 	  := JsonObject():New()
	::nMVDiasCTB  := SuperGetMV("MV_DIASCTB", ,360)
	::nDias := 0
	::nDiasUteis := 0
	::nValorBase := 0
	::dDateCalc := Date()
	::dDateInc := Date()
	::dDtVencJur := STOD("")
	::lIRIOFImune := SuperGetMv("MV_APLIMUN",,"1") == "2"
Return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} setTemplate
	Configura o template na classe
	@author renato.ito
	@since 25/05/2022
	@param cTemplate, character, template
	@return lOk, logical, .T. se consegui carregar o template / .F. em caso de falha
/*/
//-------------------------------------------------------------------
Method setTemplate(cTemplate as Character) class Template
	Local lOk := .F. as Logical
	::cError := ""
	lOk      := Empty(::jTemplate:fromJson(cTemplate))
	If lOk
		If ::jTemplate['tipo'] == "APL"
			::lAplicacao := .T.
			::cJurRem := 'rendimento'
		Else
			::lAplicacao := .F.
			::cJurRem := 'juros'
		EndIf
	Else
		::cError := STR0001 // Não foi possível carregar o template
	EndIf
Return lOk

//-------------------------------------------------------------------
/*/{Protheus.doc} openTemplate
	Carrega o template com base no contrato

	@author renato.ito
	@since 25/05/2022
	@param cEH_FILIAL, character, filial
	@param cEH_NUMERO, character, numero
	@param cEH_REVISAO, character, revisao
	@return lOk, logical, .T. se consegui carregar o template / .F. em caso de falha
/*/
//-------------------------------------------------------------------
Method openTemplate(cEH_FILIAL as Character, cEH_NUMERO as Character, cEH_REVISAO as Character) class Template
	Local aActivedArea := FwGetArea()        as Array
	Local aAreaSEH     := SEH->(FwGetArea()) as Array
	Local lOk          := .F.                as Logical
	::lAplicacao := .F.
	::lPagReg    := .T.
	::jSeh       := JsonObject():New()
	DbSelectArea('SEH')
	SEH->(DbSetOrder(1))
	If SEH->(DbSeek(cEH_FILIAL + cEH_NUMERO + cEH_REVISAO))
		::dDateInc  := SEH->EH_DATA
		::dDateCalc := ::dDateInc
		::jSeh[ 'eh_filial' ]  := SEH->EH_FILIAL
		::jSeh[ 'eh_numero' ]  := SEH->EH_NUMERO
		::jSeh[ 'eh_revisao' ] := SEH->EH_REVISAO
		::jSeh[ 'eh_saldo' ]   := SEH->EH_SALDO
		::jSeh[ 'eh_vlcruz' ]  := SEH->EH_VLCRUZ
		::jSeh[ 'eh_percplp' ] := SEH->EH_PERCPLP
		::jSeh[ 'eh_moeda' ]   := SEH->EH_MOEDA
		::jSeh[ 'eh_aplemp' ]  := SEH->EH_APLEMP
		::jSeh[ 'eh_data' ]  := SEH->EH_DATA
		::jSeh[ 'r_e_c_n_o' ]  := SEH->(Recno())
		If SEH->EH_MOEDA > 0
			::setTaxaMoeda(RecMoeda(::dDateVenc, SEH->EH_MOEDA))
		Else
			::setTaxaMoeda(1)
		EndIf
		If SEH->EH_APLEMP == "EMP"
			::jEmpAcu['nAcEmpJur1'] := SEH->EH_ACUJUR2 // Acumulado do juros na moeda corrente
			::jEmpAcu['nAcEmpJur2'] := SEH->EH_ACUJUR  // Acumulado do Juros na moeda do Emprestimo
			::jEmpAcu['nAcEmpCVC']  := SEH->EH_ACUVCCP // Acumulado da Variacao Cambial a Curto Prazo
			::jEmpAcu['nAcEmpLVC']  := SEH->EH_ACUVCLP // Acumulado da Variacao Cambial a Longo Prazo
			::jEmpAcu['nAcEmpJVC']  := SEH->EH_ACUVCJR // Acumulado da Variacao Cambial dos Juros
		EndIf
		If SEH->EH_TIPO == 'TEM'
			lOk := ::setTemplate(SEH->EH_TEMPLT)
		EndIf
		::jResults['seh'] := ::jSeh
	EndIf
	FWRestArea(aAreaSEH)
	FWRestArea(aActivedArea)
Return lOk

//-------------------------------------------------------------------
/*/{Protheus.doc} setDateBase
	Configura a data inicial do periodo

	@author renato.ito
	@since 25/05/2022
	@param dDateCalc, date, data
/*/
//-------------------------------------------------------------------
Method setDateBase(dDateCalc as Date) class Template
	::dDateCalc := dDateCalc
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} setDateFim
	Configura a data final do periodo

	@author renato.ito
	@since 25/05/2022
	@param dDateVenc, date, data
/*/
//-------------------------------------------------------------------
Method setDateVenc(dDateVenc as Date) class Template
	::dDateVenc := dDateVenc
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} setDateJur
	Configura a final personalizada para o juros simples e composto

	@author vinicius.prado
	@since 07/12/2022
	@param dDateVenc, date, data
/*/
//-------------------------------------------------------------------
Method setDateJur(dDateVencJur as Date) class Template
	::dDtVencJur := dDateVencJur
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} setValorBase
	Configura o valor base para os calculos

	@author renato.ito
	@since 25/05/2022
	@param dDateVenc, date, data
/*/
//-------------------------------------------------------------------
Method setValorBase(nValorBase as Numeric) class Template
	::nValorBase := nValorBase
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} setParcela
	informa o numero da parcela atual

	@author renato.ito
	@since 25/05/2022
	@param dDateVenc, date, data
/*/
//-------------------------------------------------------------------
Method setParcela(nParcela as Numeric) class Template
	::nParcela := nParcela
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} setTaxaMoeda
	informa a taxa da moeda

	@author renato.ito
	@since 25/05/2022
	@param nTaxaMoeda, numeric, taxa da moeda
/*/
//-------------------------------------------------------------------
Method setTaxaMoeda(nTaxaMoeda as Numeric) class Template
	If nTaxaMoeda > 0
		::nTaxaMoeda := nTaxaMoeda
	Else
		::nTaxaMoeda := 1
	EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} setTaxaMoeda
	Defini se o calculo deve considerar um pagamento ou resgate

	@author vitor duca
	@since 17/04/2023
	@param lPagReg, logical, Se é um pagamento ou resgate
/*/
//-------------------------------------------------------------------
Method setPagReg(lPagReg as Logical) class Template
	::lPagReg := lPagReg
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getValor
	Retorna os valores calculados

	@author renato.ito
	@since 25/05/2022
	@param cTipo, Character, tipo do valor Ex: juros, iof, ir...
/*/
//-------------------------------------------------------------------
Method getValor(cTipo as Character) class Template
	Local nVal := 0 as Numeric
	If ::jResults['total']:hasProperty(cTipo)
		nVal := ::jResults['total'][cTipo]
	EndIf
Return nVal

//-------------------------------------------------------------------
/*/{Protheus.doc} getResults
	Retorna os valores calculados de cada formula
	@author renato.ito
	@since 25/05/2022
	@param cTipo, json,
	{[tipo:string] : Array<{
		key: string,
		value: number
	}>}
	Ex.:{
		"juros":[
			{
				"key": "cdi",
				"value": 200
			}
		],
		"ir":[
			{
				"key": "ir",
				"value": 10
			}
		],
	}
/*/
//-------------------------------------------------------------------
Method getResults() class Template
Return ::jResults

//-------------------------------------------------------------------
/*/{Protheus.doc} getError
	Retorna o erro

	@author renato.ito
	@since 25/05/2022
	@returbn Character, mensagem de erro
/*/
//-------------------------------------------------------------------
Method getError() class Template
Return ::cError
//-------------------------------------------------------------------
/*/{Protheus.doc} calcTemplate
	realiza os calculos com base no template

	@author renato.ito
	@since 25/05/2022
/*/
//-------------------------------------------------------------------
Method calcTemplate() class Template
	Local nTipo := 1  as Numeric
	Local aTipo := {} as Array

	::jResults['formulas'] := JsonObject():new()
	::jResults['total']    := JsonObject():new()

	// prepara as datas do período
	::calcDaysPeriod(::dDateCalc, ::dDateVenc, ::dDtVencJur)

	// armazena os valores acumulados do empréstimo
	If ::jSeh['eh_aplemp'] =='EMP'
		::jEmpAcuSEI := ::getEmpAcumulados()
	EndIf
	// Ordem de execução
	AADD(aTipo, 'correcao')
	AADD(aTipo, 'juros')
	AADD(aTipo, 'rendimento')
	AADD(aTipo, 'iof')
	AADD(aTipo, 'ir')
	AADD(aTipo, 'taxas')

	For nTipo := 1 to LEN(aTipo)
		If ::jTemplate:hasProperty(aTipo[nTipo])
			::calcConfig(aTipo[nTipo])
		EndIf
	Next nTipo
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} calcConfig
	Realiza os calculos das configurações do template

	@author renato.ito
	@since 25/05/2022
	@param cTipo, character, tipo
/*/
//-------------------------------------------------------------------
Method calcConfig(cTipo as Character) class Template
	Local nFormula      := 0  as Numeric
	Local nValForm      := 0  as Numeric
	Local cFormula      := '' as Character
	Local cDedscFormula := '' as Character

	::jResults['total'][cTipo] := 0
	For nFormula := 1 To Len(::jTemplate[cTipo])
		nValForm      := 0
		cFormula      := UPPER(AllTrim(::jTemplate[cTipo][nFormula][FORMULA]))
		cDedscFormula := AllTrim(::jTemplate[cTipo][nFormula][DESCRI])
		DO CASE
			CASE cFormula == 'NGFCDI'
				nValForm := ::empCDI(::jTemplate[cTipo][nFormula][CONFIG])
			CASE cFormula == 'NGFJURSIMPLES'
				nValForm := ::empJurSimples(::jTemplate[cTipo][nFormula][CONFIG])
			CASE cFormula == 'NGFJURCOMPOST'
				nValForm := ::empJurComposto(::jTemplate[cTipo][nFormula][CONFIG])
			CASE cFormula == 'NGFINDICE'
				nValForm := ::empIndice(::jTemplate[cTipo][nFormula][CONFIG])
			CASE cFormula == 'NGFIR'
				nValForm := ::empIR(::jTemplate[cTipo][nFormula][CONFIG], 1)
			CASE cFormula == 'NGFIRTABELA'
				nValForm := ::empIR(::jTemplate[cTipo][nFormula][CONFIG], 2)
			CASE cFormula == 'NGFCDB'
				nValForm := ::templateCDB(::jTemplate[cTipo][nFormula][CONFIG])
			CASE cFormula == 'NGFIOF'
				nValForm := ::templateIOF(::jTemplate[cTipo][nFormula][CONFIG], 1)
			CASE cFormula == 'NGFIOFTABELA'
				nValForm := ::templateIOF(::jTemplate[cTipo][nFormula][CONFIG], 2)
			CASE cFormula == 'NGFTAXAS'
				nValForm := ::templateTaxas(::jTemplate[cTipo][nFormula][CONFIG])
			CASE cFormula == 'NGFCUSTOM' // Formulas de usuario
				nValForm := ::templateCustom(::jTemplate[cTipo][nFormula][CONFIG])
		ENDCASE
		::jTemplate[cTipo][nFormula]['result'] := nValForm
		//Armazena os resultados
		If !::jResults['formulas']:hasProperty(cTipo)
			::jResults['formulas'][cTipo] := {}
		EndIf
		// guarda os resultados de cada formula
		AADD(::jResults['formulas'][cTipo], {'key': cDedscFormula, 'value': nValForm})
		// guarda o total por tipo
		::jResults['total'][cTipo] += nValForm
	Next nFormula
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} empCDI
	Realiza o calculo do valor do CDI

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração do CDI no template
	@return nValCDI, numeric, valor do CDI calculado
/*/
//-------------------------------------------------------------------
Method empCDI(aConfig as Array) class Template
	Local nValCDI  := 0 as Numeric
	Local nTaxaCDI := 0 as Numeric

	// armazena informações que serão utilizada em todas parcelas se necessário
	If Empty(::nPercCDI)
		::nPercCDI := getTemplateConfig(aConfig, 'percentualcdi', 'N')
	EndIf
	If Empty(::cCodIndCDI)
		::cCodIndCDI := getTemplateConfig(aConfig, 'indicefit', 'C')
	EndIf

	If ::lPagReg
		nValCDI := totvs.protheus.backoffice.ngf.template.calcCDIPerid(::nValorBase, ::dDateCalc, ::dDateVenc, ::cCodIndCDI, ::nPercCDI)
	Else
		nTaxaCDI  := getTemplateConfig(aConfig, 'user', 'N')
		If nTaxaCDI == 0
			nTaxaCDI  := getTemplateConfig(aConfig, 'projecao', 'N')
		EndIf
		nValCDI := totvs.protheus.backoffice.ngf.template.calcCDITaxa(::nValorBase, nTaxaCDI, ::nPercCDI, ::nDiasUteis)
	EndIf
Return nValCDI

//-------------------------------------------------------------------
/*/{Protheus.doc} empJurSimples
	realiza o calculo de juros simples

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração do template
	@return nVlResult, numeric, valor do juros
/*/
//-------------------------------------------------------------------
Method empJurSimples(aConfig as Array) class Template
	Local nTaxaAA    := 0 as Numeric
	Local nVlResult  := 0 as Numeric
	Local nValorBase := 0 as Numeric
	
	nTaxaAA    := getTemplateConfig(aConfig, 'taxaano' , 'N' )
	nValorBase := ::getValorBase(aConfig)

	nVlResult := totvs.protheus.backoffice.ngf.template.calcJurSimples(nValorBase, nTaxaAA , ::nDiasJur, ::nMVDiasCTB)
	
Return nVlResult

//-------------------------------------------------------------------
/*/{Protheus.doc} empJurComposto
	realiza o calculo de juros composto

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração do template
	@return nVlResult, numeric, valor do juros
/*/
//-------------------------------------------------------------------
Method empJurComposto(aConfig as Array) class Template
	Local nTaxaAA     := 0 as Numeric
	Local nVlResult   := 0 as Numeric
	Local nValorBase  := 0 as Numeric

	nTaxaAA    := getTemplateConfig(aConfig, 'taxaano' , 'N')
	nValorBase := ::getValorBase(aConfig)

	nVlResult := totvs.protheus.backoffice.ngf.template.calcJurComposto(nValorBase + ::jEmpAcuSEI['nAcEmpJur1'], nTaxaAA , ::nDiasJur, ::nMVDiasCTB)

Return nVlResult


//-------------------------------------------------------------------
/*/{Protheus.doc} getTemplateConfig
	Retorna a pripriedade desejada dentro da configuração do template

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração do CDI no template
	@param cKey, Character, propriedade desejada
	@return xValue, x, valor da propriedade calculada
/*/
//-------------------------------------------------------------------
Function getTemplateConfig(aConfig as Array, cKey as Character, cType as Character)
	Local nPos := 0 as Numeric
	Local xValue
	If cType == 'N'
		xValue := 0
	Else
		xValue := ''
	EndIf
	If (nPos := AScan(aConfig, {|x| x['key'] == cKey})) > 0
		xValue := aConfig[nPos]['value']
	EndIf
Return xValue

//-------------------------------------------------------------------
/*/{Protheus.doc} calcDaysPeriod
	calcula os dias entre o período
	carrega  quantidade de dias úteis e corridos

	@author renato.ito
	@since 25/05/2022
	@param dDataIni, Date, data de inicio do período
	@param dDataFim, Date, data de final do período
/*/
//-------------------------------------------------------------------
Method calcDaysPeriod(dDataIni as Date, dDataFim as Date, dDataFimJur as Date) Class Template
	::nDiasUteis := DateWorkDay(dDataIni,dDataFim,.F.,.F.,.F.)
	::nDias := DateDiffDay(dDataIni, dDataFim)
	::nDiasJur := ::nDias
	If !Empty(dDataFimJur)
		::nDiasJur := DateDiffDay(dDataIni, dDataFimJur)
	EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} empIR
	retorna o valor de ir

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração da formula
	@return nVlIr, numeric, valor do ir
/*/
//-------------------------------------------------------------------
Method empIR(aConfig as Array, nType as Numeric) class Template
	Local nTaxa      := 0 as Numeric
	Local nValorBase := 0 as Numeric
	Local nVlIr      := 0 as Numeric

	If !::lIRIOFImune
		nValorBase := ::getValor(::cJurRem)
		nValorBase -= ::getValor('iof')
		If nType == 1
			nTaxa      := getTemplateConfig(aConfig, 'taxair' , 'N' )
		ElseIf nType = 2
			nTaxa := Val(TabelaIrf( "AR" , DateDiffDay(::dDateVenc, ::dDateInc)))
		EndIf

		nVlIr := totvs.protheus.backoffice.ngf.template.calcIR(nValorBase, nTaxa, ::lAplicacao)
	Endif

Return nVlIr

//-------------------------------------------------------------------
/*/{Protheus.doc} addFormula
	adiciona novo elemento no json de formula
	@author renato.ito
	@since 06/06/2022
	@param cFormula, Character, código da formula
	@param cDesc, Character, descrição da formula
	@param aConfig, Array, array com as configurações
	@return jTemplt, json, json no padrão do template
/*/
//-------------------------------------------------------------------
Method addFormula(cFormula as Character, cDesc as Character, aConfig as Array) class Template
	Local jTemplt := JsonObject():New() as Json
	Local nConfig := 0 as Numeric
	Local aParams := {} as Array

	If ::oHashConfig:size() < 1
		::oHashConfig:put('indicefit'    	, addConfig('indicefit'    		, 'lookup' , STR0002, 'FIT',,,STR0019)) // Código do índice # 'Código do indice que foi previamente cadastrado na tabela FIT, com base nesse indice será gerado os movimentos na tabela FIU'
		::oHashConfig:put('percentualcdi'	, addConfig('percentualcdi'		, 'decimal', STR0003,,,2,STR0020)) // Percentual do CDI # 'Informe o percentual do CDI que será utilizado juntamente com o código do indice para calcular o fator do CDI'
		::oHashConfig:put('taxaano'      	, addConfig('taxaano'      		, 'decimal', STR0004,,,6,STR0021)) //Taxa anual # 'Informe a taxa anual que será utilizada no calculo dos juros'
		::oHashConfig:put('diasuteis'    	, addConfig('diasuteis'    		, 'combo'  , STR0005, , {'Sim', 'Não'},,STR0022)) // Considera dias úteis? # 'Verifica se deve considerar somentes os dias úteis no calculo - dias do período / dias do ano (úteis ou corridos)'
		::oHashConfig:put('taxair'       	, addConfig('taxair'       		, 'decimal', STR0006,,,2,STR0023)) // Taxa de IR # 'Percental do imposto de renda que será calculado utilizando como base o valor de resgate/pagamentos dos contratos'
		::oHashConfig:put('taxaiof'      	, addConfig('taxaiof'      		, 'decimal', STR0007,,,2,STR0024)) // Taxa de IOF # 'Percental do imposto sobre operações financeiras (IOF) que será calculado utilizando como base o valor de resgate/pagamentos dos contratos'
		::oHashConfig:put('taxas'        	, addConfig('taxas'        		, 'decimal', STR0008,,,2,STR0025)) // Taxa para outros impostos # 'Taxa para outros impostos que será calculado utilizando como base o valor de resgate/pagamentos dos contratos'
		//::oHashConfig:put('projecao'     	, addConfig('projecao'     		, 'decimal', 'Projeção do índice no Ano'))
		::oHashConfig:put('corrigido'    	, addConfig('corrigido'    		, 'combo' , STR0009, , {'Sim', 'Não'},,STR0026)) // Considera valor corrigido? # 'Define se o valor base utilizado no calculo será o valor corrigido (EH_VALOR+JUROS+RENDIMENTOS+IMPOSTOS) ou valor do contrato'
		::oHashConfig:put('expression'	    , addConfig('expression'	    , 'custom' , STR0027,,,,STR0028)) // "Expressão" # "Digite a expressão ADVPL que será usada no calculo dessa formula"
	EndIf

	For nConfig := 1 To Len(aConfig)
		AAdd(aParams, ::oHashConfig:get(aConfig[nConfig]))
	Next nConfig

	jTemplt[FORMULA] := cFormula
	jTemplt[DESCRI]  := cDesc
	jTemplt[CONFIG]  := aParams

Return jTemplt

//-------------------------------------------------------------------
/*/{Protheus.doc} addConfig
	adiciona novo elemento no json de formula
	@type  Static Function
	@author renato.ito
	@since 06/06/2022
	@param cFormula, Character, código da formula
	@param cDesc, Character, descrição da formula
	@return jTemplt, json, json no padrão do template
/*/
//-------------------------------------------------------------------
Static Function addConfig(cKey as Character, cType as Character, cDesc as Character, cLookUp as Character, aOptions as Array, nDecimals as Numeric, cHelp As Character) as Json
	Local jConfig := {'key' : cKey, 'type' : cType, 'description' : cDesc} as Json

	nDecimals := IIF(Empty(nDecimals),0,nDecimals)

	If !Empty(cLookUp)
		jConfig['lookup'] := cLookUp
	EndIf
	If !Empty(aOptions)
		jConfig['options'] := aOptions
	EndIf
	If cType == 'decimal'
		jConfig['decimals'] := nDecimals
	EndIf

	jConfig['help'] := cHelp
Return jConfig
//-------------------------------------------------------------------
/*/{Protheus.doc} getAplTemplate
	retorna o objeto com as configurações disponíveis.

	@author renato.ito
	@since 25/05/2022
	@return json, objeto com as configurações
/*/
//-------------------------------------------------------------------
Method getAplTemplate() class Template
	Local jEmpTemplate := JsonObject():New() as Json

	jEmpTemplate[ 'tipo' ]        := 'APL'
	jEmpTemplate[ 'rendimento' ]  := {}
	jEmpTemplate[ 'ir' ]          := {}
	jEmpTemplate[ 'iof' ]         := {}
	jEmpTemplate[ 'taxas' ]      := {}

	// configuração de CDI
	AADD(jEmpTemplate[ 'rendimento' ] , ::addFormula('NGFCDI', 'CDI', {'indicefit', 'percentualcdi'}))
	// configuração de CDB
	AADD(jEmpTemplate[ 'rendimento' ] , ::addFormula('NGFCDB', 'CDB', {'taxaano', 'diasuteis'}))
	//Configuração customizada
	AADD(jEmpTemplate[ 'rendimento' ] , ::addFormula('NGFCUSTOM', STR0029  , {'expression'})) //"PERSONALIZADO"
	
	// IR com taxa no contrato
	AADD(jEmpTemplate['ir']           , ::addFormula('NGFIR', STR0010, {'taxair'})) // IR por taxa
	// IR utilizando tabela de IR
	AADD(jEmpTemplate['ir']           , ::addFormula('NGFIRTABELA', STR0011, {})) // Tabela de IR
	//Configuração customizada
	AADD(jEmpTemplate[ 'ir' ] , ::addFormula('NGFCUSTOM', STR0029  , {'expression'})) //"PERSONALIZADO"

	// Funções para iof
	AADD(jEmpTemplate[ 'iof' ]        , ::addFormula('NGFIOF', STR0012, {'taxaiof'})) // IOF com taxa
	// IOF utilizando tabela
	AADD(jEmpTemplate[ 'iof' ]        , ::addFormula('NGFIOFTABELA', STR0013  , {})) // IOF tabela
	//Configuração customizada
	AADD(jEmpTemplate[ 'iof' ] , ::addFormula('NGFCUSTOM', STR0029  , {'expression'})) //"PERSONALIZADO"

	// Outros Impostos
	AADD(jEmpTemplate[ 'taxas' ]      , ::addFormula('NGFTAXAS', STR0014  , {'taxas'})) // % Outros Impostos
	//Configuração customizada
	AADD(jEmpTemplate[ 'taxas' ] , ::addFormula('NGFCUSTOM', STR0029  , {'expression'})) //"PERSONALIZADO"

Return jEmpTemplate

//-------------------------------------------------------------------
/*/{Protheus.doc} getEmpTemplate
	retorna o objeto com as configurações disponíveis.

	@author renato.ito
	@since 25/05/2022
	@return json, objeto com as configurações
/*/
//-------------------------------------------------------------------
Method getEmpTemplate() class Template
	Local jEmpTemplate := JsonObject():New() as Json
	jEmpTemplate[ 'tipo' ]       := 'EMP'
	jEmpTemplate[ 'juros' ]      := {}
	jEmpTemplate[ 'ir' ]         := {}
	jEmpTemplate[ 'iof' ]        := {}
	jEmpTemplate[ 'correcao' ]   := {}

	// Juros - CDI
	AADD(jEmpTemplate[ 'juros' ], ::addFormula('NGFCDI', 'CDI', {'indicefit', 'percentualcdi', 'corrigido'}))
	// Juros - Juros Simples
	AADD(jEmpTemplate[ 'juros' ], ::addFormula('NGFJURSIMPLES', STR0015, {'taxaano', 'corrigido'})) // Juros Simples
	AADD(jEmpTemplate[ 'juros' ], ::addFormula('NGFJURCOMPOST', STR0016, {'taxaano', 'corrigido'})) // Juros Composto
	// Juros - Índice
	AADD(jEmpTemplate[ 'juros' ], ::addFormula('NGFINDICE', STR0017, {'indicefit', 'corrigido', 'diasuteis'})) // Índices Financeiros
	//Configuração customizada
	AADD(jEmpTemplate[ 'juros' ] , ::addFormula('NGFCUSTOM', STR0029 , {'expression'})) //"PERSONALIZADO"
	
	// Funções para ir
	AADD(jEmpTemplate[ 'ir' ]   , ::addFormula('NGFIR', STR0018, {'taxair'})) // Imposto de Renda
	//Configuração customizada
	AADD(jEmpTemplate[ 'ir' ] , ::addFormula('NGFCUSTOM', STR0029  , {'expression'})) //"PERSONALIZADO"

	// Funções para iof
	AADD(jEmpTemplate[ 'iof' ]  , ::addFormula('NGFIOF', STR0012, {'taxaiof'})) // IOF com taxa
	AADD(jEmpTemplate[ 'iof' ]  , ::addFormula('NGFIOFTABELA', STR0013, {})) // IOF tabela
	//Configuração customizada
	AADD(jEmpTemplate[ 'iof' ] , ::addFormula('NGFCUSTOM', STR0029  , {'expression'})) //"PERSONALIZADO"

	// Funções para corração
	AADD(jEmpTemplate[ 'correcao' ],  ::addFormula('NGFINDICE', STR0017, {'indicefit', 'corrigido', 'diasuteis'})) // Índices Financeiros
	//Configuração customizada
	AADD(jEmpTemplate[ 'correcao' ]      , ::addFormula('NGFCUSTOM', STR0029 , {'expression'})) //"PERSONALIZADO"
Return jEmpTemplate

//-------------------------------------------------------------------
/*/{Protheus.doc} empIndice
	retorna o valor de ir

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração da formula
	@return nVlIr, numeric, valor do ir
/*/
//-------------------------------------------------------------------
Method empIndice(aConfig as Array) class Template
	Local cCodIndice     := ""  as Character
	Local lUteis         := .F. as Logical
	Local nDiasAcumulado := 0   as Numeric
	Local nDias          := 0   as Numeric
	Local nValorBase     := 0   as Numeric
	Local nValIndice     := 0   as Numeric

	nValorBase := ::getValorBase(aConfig)
	// dDataIni deve ser da inclusão do contrato para atualizar o valor atual da parcela
	If ::lPagReg
		cCodIndice := getTemplateConfig(aConfig, 'indicefit' , 'C' )
		nValIndice := calcIndPeriod(nValorBase, cCodIndice, ::dDateInc, ::dDateVenc)
	Else
		nTaxaProjecao  := getTemplateConfig(aConfig, 'user', 'N')
		If nTaxaProjecao == 0 // verifica se o usuário alterou o valor
			// projeção anual
			lUteis := UPPER(getTemplateConfig(aConfig, 'diasuteis' , 'C' )) == 'SIM'
			If lUteis
				nDias := ::nDiasUteis
			Else
				nDias := ::nDias
			EndIf
			nTaxaProjecao  := getTemplateConfig(aConfig, 'projecao', 'N')
			nDiasAcumulado := ::nMVDiasCTB
		// Else Projeção de indice - Implementação futura
			// 	nDiasAcumulado := ::nParcela
			// 	nDias := 1
		EndIf
		nValIndice := totvs.protheus.backoffice.ngf.template.calcIndiceTaxa(nValorBase, nTaxaProjecao, nDiasAcumulado, nDias)
	EndIf
Return nValIndice

//-------------------------------------------------------------------
/*/{Protheus.doc} getValorBase
	Retorna o valor base e verifica se deve corrigir

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração da formula
	@return nValor, numeric, valor base
/*/
//-------------------------------------------------------------------
Method getValorBase(aConfig as Array) class Template
	Local nValor := ::nValorBase as Numeric

	If UPPER(getTemplateConfig(aConfig, 'corrigido' , 'C' )) == "SIM"
		nValor += ::getValor('correcao')
	EndIf

Return nValor

//-------------------------------------------------------------------
/*/{Protheus.doc} templateCDB
	calculo do CDB

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração da formula
	@return nValor, numeric, valor do CDB
/*/
//-------------------------------------------------------------------
Method templateCDB(aConfig as Array) class Template
	Local nValorBase := 0            as Numeric
	Local nValCDB    := 0            as Numeric
	Local nTaxa      := 0            as Numeric
	Local nDias      := ::nDias      as Numeric
	Local nDiasAno   := ::nMVDiasCTB as Numeric

	nValorBase := ::getValorBase(aConfig)
	nTaxa      := getTemplateConfig(aConfig, 'taxaano' , 'N' )
	If UPPER(getTemplateConfig(aConfig, 'diasuteis' , 'C' )) == "SIM"
		nDias    := ::nDiasUteis
		nDiasAno := 252
	EndIf

	nValCDB := totvs.protheus.backoffice.ngf.template.calcCDB(nValorBase, nTaxa, nDias, nDiasAno)
Return nValCDB

//-------------------------------------------------------------------
/*/{Protheus.doc} templateIOF
	calculo do IOF

	@author renato.ito
	@since 25/05/2022
	@param aConfig, Array, configuração da formula
	@return nValor, numeric, valor do IOF
/*/
//-------------------------------------------------------------------
Method templateIOF(aConfig as Array, nType as Numeric) class Template
	Local nValIOF      := 0 as Numeric
	Local nTaxa        := 0 as Numeric
	Local nValorBase   := 0 as Numeric
	Local nDias        := 0 as Numeric

	If ::lPagReg .and. !::lIRIOFImune
		nValorBase := ::getValor(::cJurRem)
		If nType == 1
			nTaxa := getTemplateConfig(aConfig, 'taxaiof' , 'N' )
		ElseIf nType = 2
			nDias := DateDiffDay(::dDateVenc, ::jSeh['eh_data'])
			If nDias <= 29
				nTaxa := VAL(TABELA('A0', STRZERO(nDias, 2)))
			EndIf
		EndIf
		nValIOF := totvs.protheus.backoffice.ngf.template.calcIOF(nValorBase, nTaxa)
	EndIf

Return nValIOF

//-------------------------------------------------------------------
/*/{Protheus.doc} getEmpAcumulados
	calcula os valores acumulados do emprestimo

	@author renato.ito
	@since 09/06/2022
	@param aConfig, Array, configuração da formula
	@return json, json, valores acumulados
/*/
//-------------------------------------------------------------------
Method getEmpAcumulados() class Template
	Local jResponse                 as Json
	Local cEhfilial  := ""          as Character
	Local cEhnumero  := ""          as Character
	Local cEhrevisao := ""          as Character
	Local dDateRef   := ::dDateVenc as Date

	If ::lPagReg
		cEhfilial  := ::jSeh[ 'eh_filial' ]
		cEhnumero  := ::jSeh[ 'eh_numero' ]
		cEhrevisao := ::jSeh[ 'eh_revisao' ]
		jResponse  := totvs.protheus.backoffice.ngf.template.calcAcumulados(cEhfilial, cEhnumero, cEhrevisao, dDateRef)

		jResponse['nAcEmpJur1'] += ::jEmpAcu['nAcEmpJur1']  // Acumulado do juros na moeda corrente
		jResponse['nAcEmpJur2'] += ::jEmpAcu['nAcEmpJur2']  // Acumulado do Juros na moeda do Emprestimo
		jResponse['nAcEmpCVC']  += ::jEmpAcu['nAcEmpCVC']   // Acumulado da Variacao Cambial a Curto Prazo
		jResponse['nAcEmpLVC']  += ::jEmpAcu['nAcEmpLVC']   // Acumulado da Variacao Cambial a Longo Prazo
		jResponse['nAcEmpJVC']  += ::jEmpAcu['nAcEmpJVC']   // Acumulado da Variacao Cambial dos Juros
	EndIf
Return jResponse

//-------------------------------------------------------------------
/*/{Protheus.doc} templateTaxas
	calculo de outros impostos

	@author renato.ito
	@since 27/06/2022
	@param aConfig, Array, configuração da formula
	@return nValor, numeric, valor do imposto
/*/
//-------------------------------------------------------------------
Method templateTaxas(aConfig as Array) class Template
	Local nValor := 0 as Numeric
	Local nTaxa := 0 as Numeric

	nTaxa  := getTemplateConfig(aConfig, 'taxas' , 'N' )
	nValor := ::getValor(::cJurRem) * nTaxa/100

Return nValor
//-------------------------------------------------------------------
/*/{Protheus.doc} getEmpLegado
	retorna os valores em array igual o Fa171CalEp

	@author renato.ito
	@since 09/06/2022
	@return array, valores acumulados
/*/
//-------------------------------------------------------------------
Method getEmpLegado() class Template
	Local aValores1   := {}                    as Array
	Local aValores2   := {}                    as Array
	Local nSaldo      := ::jSeh[ 'eh_saldo' ]  as Numeric
	Local nJuros      := ::getValor( 'juros' ) as Numeric
	Local nTamSaldo   := TamSX3("EH_SALDO")[2] as Numeric
	Local nVlEmpVC    := 0                     as Numeric
	Local nVlEmpCVC   := 0                     as Numeric
	Local nVlEmpLVC   := 0                     as Numeric
	Local nVlEmpJVC   := 0                     as Numeric

	If ::jSEH['eh_moeda'] != 1
		nVlEmpVC  := Round((nSaldo * ::nTaxaMoeda) - ::jSeh[ 'eh_vlcruz' ], nTamSaldo)
		nVlEmpCVC := Round((nVlEmpVC * (::jSeh[ 'eh_percplp' ]/100)), nTamSaldo) - ::jEmpAcuSEI['nAcEmpCVC']
		nVlEmpLVC := nVlEmpVC - nVlEmpCVC - ::jEmpAcuSEI['nAcEmpLVC']
		nVlEmpJVC := Round(((::jEmpAcuSEI['nAcEmpJur2']  * ::nTaxaMoeda) - ::jEmpAcuSEI['nAcEmpJur1']), nTamSaldo) - ::jEmpAcuSEI['nAcEmpJVC']
	EndIf

	AAdd(aValores1, nSaldo + nJuros)                    //nVlEmpAtu2 Valor atualizado na moeda do emprestimo (saldo + juros)
	AAdd(aValores1, ::jEmpAcuSEI['nAcEmpJur2'] + nJuros) //nAcEmpJur2 Acumulado do Juros na moeda do Emprestimo
	AAdd(aValores1, 0)
	AAdd(aValores1, 0)
	AAdd(aValores1, 0)
	AAdd(aValores1, nJuros)                             //nVlEmpJur2 Juros na moeda do emprestimo
	AAdd(aValores1, 0)
	AAdd(aValores1, 0)
	AAdd(aValores1, 0)

	AAdd(aValores2, Round((nSaldo + nJuros) * ::nTaxaMoeda, nTamSaldo))                     // nVlEmpAtu1  Valor atualizado na moeda 1
	AAdd(aValores2, Round((::jEmpAcuSEI['nAcEmpJur1'] + nJuros) * ::nTaxaMoeda, nTamSaldo)) // nAcEmpJur1 // Acumulado do juros na moeda corrente
	AAdd(aValores2, ::jEmpAcuSEI['nAcEmpLVC'] + nVlEmpLVC)                                  // nAcEmpLVC Acumulado da Variacao Cambial a Longo Prazo
	AAdd(aValores2, ::jEmpAcuSEI['nAcEmpLVC'] + nVlEmpCVC)                                  // nAcEmpLVC Acumulado da Variacao Cambial a Curto Prazo
	AAdd(aValores2, ::jEmpAcuSEI['nAcEmpJVC'] + nVlEmpJVC)                                  // nAcEmpJVC Acumulado da Variacao Cambial dos Juros
	AAdd(aValores2, Round(nJuros * ::nTaxaMoeda, nTamSaldo))                                // nVlEmpJur1 Juros na moeda 1
	AAdd(aValores2, nVlEmpLVC)  // Variacao Cambial a Longo Prazo
	AAdd(aValores2, nVlEmpCVC)  // Variacao Cambial a Curto Prazo
	AAdd(aValores2, nVlEmpJVC)  // Variacao Cambial do Juros
	AAdd(aValores2, ::getValor('iof'))

Return {aValores1, aValores2}

//-------------------------------------------------------------------
/*/{Protheus.doc} getAplLegado
	retorna os valores em array igual o Fa171CalAp

	@author renato.ito
	@since 27/06/2022
	@return array, valores acumulados
/*/
//-------------------------------------------------------------------
Method getAplLegado() class Template
	Local nVlrAplAtu := 0 as Numeric // Valor da Aplicacao no Mes
	Local nIrfAplAtu := 0 as Numeric // I.R.  da Aplicacao no Mes
	Local nIofAplAtu := 0 as Numeric // IOF sobre os rendimentos da aplicação
	Local nOutAplAtu := 0 as Numeric // Outros Impostos
	Local nJurAplAtu := 0 as Numeric // Juros da Aplicacao no Mes
	Local nVlrRegAtu := 0 as Numeric
	Local nRdMes     := 0 as Numeric // Rendimento para apl tipo COTAS
	Local nIRRdBruto := 0 as Numeric // Ir sobre o rendimento bruto
	Local nVlLiquido := 0 as Numeric // Valor liquido subtraindo o Ir sobre o rendimento bruto
	Local nDelta     := 0 as Numeric // Aliquota apurado entre os valores das cotas
	Local nBaseCalc  := 0 as Numeric // Base de calculo para o valor do Ir
	nVlrAplAtu := ::nValorBase + ::getValor('rendimento') + ::getValor('correcao')
	nIrfAplAtu := ::getValor('ir')
	nIofAplAtu := ::getValor('iof')
	nOutAplAtu := ::getValor('taxas')
	nJurAplAtu := ::getValor('rendimento')
	nVlrRegAtu := ( nVlrAplAtu-nIrfAplAtu-nIofAplAtu-nOutAplAtu )
	nRdMes     := 0
	nIRRdBruto := ::getValor('ir')
	nVlLiquido := ::nValorBase - nIrfAplAtu
	nDelta     := 0
	nBaseCalc  := 0
Return { nVlrAplAtu,nIrfAplAtu,nIofAplAtu,nOutAplAtu,nJurAplAtu,nVlrRegAtu,nRdMes,nIrRdBruto,nVlLiquido,nDelta,nBaseCalc }

//-------------------------------------------------------------------
/*/{Protheus.doc} calcApropriacao
	realiza os calculos para apropriação

	@author renato.ito
	@since 30/06/2022
/*/
//-------------------------------------------------------------------
Method calcApropriacao() class Template
	Local aBindQuery := {}           as Array
	Local cMaxDate   := ""           as Character
	Local dDatavenc  := ::dDateVenc  as Date
	Local nValorBase := ::nValorBase as Numeric
	If Empty(::cQueryDate)
		::cQueryDate := queryMaxDate()
	EndIf

	aBindQuery := {::jSeh['eh_filial'], ::jSeh['eh_aplemp'], ::jSeh['eh_numero'], ::jSeh['eh_revisao'], DtoS(::dDateVenc) }

	cMaxDate := MPSysExecScalar(::cQueryDate, "EIDATA", aBindQuery)

	If !Empty(cMaxDate)
		If ::jSeh['eh_aplemp'] == 'APL'
			::setDateVenc(StoD(cMaxDate))
			::calcTemplate()
			nValorBase := ::getAplLegado()[1]
		EndIf
		::setDateBase(StoD(cMaxDate))
	EndIf
	::setDateVenc(dDatavenc)
	::setValorBase(nValorBase)
	::calcTemplate()
Return

/*/{Protheus.doc} templateCustom
	Calculo do template customizado
	@author Vitor Duca
	@since 21/07/2022
	@version 1.0
	@param aConfig, Array, configuração da formula
	@return nValor, numeric, valor do calculo
/*/
Method templateCustom(aConfig As Array) class Template
	Local nValor := 0 As Numeric
	Local cExpression := "" As Character

	Private DIASCORRIDOS := ::nDias As Numeric
	Private DIASUTEIS := ::nDiasUteis As Numeric
	Private VLRCORRIGIDO := ::getValor('correcao') As Numeric
	Private VALORBASE := ::nValorBase As Numeric
	Private RECNO := 0 As Numeric 
	Private VLRACUMUSEI := {} As Array
	Private VLRACUMUSEH := {} As Array
	Private DATACALCULO := ::dDateCalc As Date
	Private DATACONTRATO := ::dDateInc As Date

	If ::jSeh:hasProperty('r_e_c_n_o') .and. ::jSeh[ 'r_e_c_n_o' ] > 0
		RECNO := ::jSeh[ 'r_e_c_n_o' ]
	Endif	
	
	Aadd(VLRACUMUSEI, ::jEmpAcuSEI['nAcEmpJur1'])	// Acumulado do juros na moeda corrente EI_TIPODOC == "JR" EI_VALOR
	Aadd(VLRACUMUSEI, ::jEmpAcuSEI['nAcEmpJur2'])	// Acumulado do Juros na moeda do Emprestimo EI_TIPODOC == "JR" EI_VLMOED2
	Aadd(VLRACUMUSEI, ::jEmpAcuSEI['nAcEmpCVC'])	// Acumulado da Variacao Cambial a Curto Prazo EI_TIPODOC == "V2" EI_VALOR
	Aadd(VLRACUMUSEI, ::jEmpAcuSEI['nAcEmpLVC'])	// Acumulado da Variacao Cambial a Longo Prazo EI_TIPODOC == "V1" EI_VALOR
	Aadd(VLRACUMUSEI, ::jEmpAcuSEI['nAcEmpJVC'] )	// Acumulado da Variacao Cambial dos Juros EI_TIPODOC == "V3" EI_VALOR

	Aadd(VLRACUMUSEH, ::jEmpAcu['nAcEmpJur1']) 	// Acumulado do juros na moeda corrente	EH_ACUJUR2
	Aadd(VLRACUMUSEH, ::jEmpAcu['nAcEmpJur2'])	// Acumulado do Juros na moeda do Emprestimo EH_ACUJUR 
	Aadd(VLRACUMUSEH, ::jEmpAcu['nAcEmpCVC'])	// Acumulado da Variacao Cambial a Curto Prazo EH_ACUVCCP
	Aadd(VLRACUMUSEH,::jEmpAcu['nAcEmpLVC'])	// Acumulado da Variacao Cambial a Longo Prazo EH_ACUVCLP
	Aadd(VLRACUMUSEH, ::jEmpAcu['nAcEmpJVC'])	// Acumulado da Variacao Cambial dos Juros EH_ACUVCJR

	cExpression := getTemplateConfig(aConfig, 'expression', 'C')
	nValor := &(cExpression)
	
Return nValor

/*/{Protheus.doc} setIRImune
	Define se o IR e IOF deve ser imune no resgate
	@author Vitor Duca
	@since 05/06/2023
	@version 1.0
	@param lIRIOFImune, Logical, Aplicação imune de IR e IOF
/*/
Method setIRImune(lIRIOFImune As Logical) class Template
	::lIRIOFImune := lIRIOFImune

	If SuperGetMv("MV_APLIMUN",,"1") == "2"
		::lIRIOFImune := .T.
	Endif	
Return 

//-------------------------------------------------------------------
/*/{Protheus.doc} queryMaxDate
	query para obter a maior data da sei (origem finxfin)

	@author renato.ito
	@since 30/06/2022
	@return character, query para utilizar com bind param
/*/
//-------------------------------------------------------------------
Static Function queryMaxDate() as Character
	Local cQuery := "" as Character

	cQuery := "SELECT MAX(SEI.EI_DATA) EIDATA FROM " + RetSqlName("SEI") + " SEI "
	cQuery += " WHERE SEI.EI_FILIAL = ? "
	cQuery += " AND SEI.EI_APLEMP = ? "
	cQuery += " AND SEI.EI_NUMERO = ? "
	cQuery += " AND SEI.EI_REVISAO = ? "
	cQuery += " AND SEI.EI_DATA <= ? "
	cQuery += " AND SEI.EI_STATUS <> 'C '
	cQuery += " AND SEI.D_E_L_E_T_ = ' ' "

Return ChangeQuery(cQuery)
