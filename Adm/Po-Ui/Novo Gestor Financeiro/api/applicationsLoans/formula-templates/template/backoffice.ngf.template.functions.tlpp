#INCLUDE 'tlpp-core.th'

NAMESPACE totvs.protheus.backoffice.ngf.template

/*/{Protheus.doc} calcCDIPerid
	Calcula o valor do CDI de um período
	@type  Function
	@author renato.ito
	@since 23/05/2022
	@version version
	@param nValorBase, Numeric, valor base
	@param dDateIni, Date, data inicial do período
	@param dDateFim, Date, data final do período
	@param cCodIndice, Character, código do índice FIU FIT
	@param nPercCDI, Numeric, percentual do CDI
	@return nValorCDI, numeric, valor do CDI
/*/
Function calcCDIPerid(nValorBase as Numeric, dDateIni as Date, dDateFim as Date, cCodIndice as Character, nPercCDI as Numeric) as Numeric
	Local nValorCDI := 0 as Numeric
	Local xDecFator

	If !Empty(nValorBase) .And. !Empty(dDateIni) .And. !Empty(dDateFim) .And. !Empty(cCodIndice) .And. !Empty(nPercCDI)
		xDecFator := calcFatorCDI(cCodIndice, nPercCDI, dDateIni, dDateFim)
		xValorCDI := DEC_MUL(DEC_CREATE(nValorBase, 64, 2), xDecFator)
		nValorCDI := ROUND(VAL(cValToChar(xValorCDI)), 2)
	EndIf
Return nValorCDI

/*/{Protheus.doc} calcCDITaxa
	Calcula o valor de CDI com uma taxa definida
	@type  Function
	@author user
	@since 23/05/2022
	@version version
	@param nValorBase, Numeric, valor base
	@param nTaxaCDI, Numeric, taxa do CDI
	@param nPercCDI, Numeric, percentual do CDI
	@param nDias, Numeric, dias do período
	@return nValorCDI, numeric, valor do CDI
/*/
Function calcCDITaxa(nValorBase as Numeric, nTaxaCDI as Numeric, nPercCDI as Numeric, nDias as Numeric) as Numeric
	Local nValorCDI := 0 as Numeric
	Local xDecFator
	Local xDecFormula1
	Local xDecValBase
	Local xDecResult

	If !Empty(nValorBase) .And. !Empty(nTaxaCDI) .And. !Empty(nPercCDI)
		xDecFator    := fatorDia(nTaxaCDI, nPercCDI)
		xDecFormula1 := DEC_POW(xDecFator, DEC_CREATE( nDias, 64, 2 ))
		xDecFormula1 := DEC_SUB(xDecFormula1, DEC_CREATE( 1, 64, 2 ))
		xDecValBase  := DEC_CREATE(nValorBase, 64, 2 )
		xDecResult   := DEC_MUL(xDecFormula1, xDecValBase)
		nValorCDI    := ROUND(VAL(cValToChar(xDecResult)), 2)
	EndIf
Return nValorCDI

/*/{Protheus.doc} calcFatorCDI
	calcula o fator CDI de um período
	@type  Function
	@author rento.ito
	@since 23/05/2022
	@param cCodIndice, Character, codigo do indice FIT FIU
	@param nPercCDI, Numeric, percentual do CDI
	@param dDateIni, Date, data inicio de periodo
	@param dDateFim, Date, data final do periodo
	@return xFator, dec, fator CDI do período
	/*/
Function calcFatorCDI(cCodIndice as Character, nPercCDI as Numeric, dDateIni as Date, dDateFim as Date)
	Local aActivedArea := FwGetArea()        as Array
	Local aAreaFIU     := FIU->(FwGetArea()) as Array
	Local lFirst       := .T.                as Logical
	Local cFilFIU      := FWxFilial( 'FIU' ) as Character
	Local dDataTest    := dDateIni           as Date
	Local xFator

	xFator := DEC_CREATE( 0, 64, 2)
	DbSelectArea('FIU')
	//FIU_FILIAL, FIU_CODIND, FIU_DATA, R_E_C_N_O_, D_E_L_E_T_
	DbSetOrder(1)
	FIU->(DbSeek(cFilFIU + cCodIndice + DToS(dDateIni), .T.))
	While FIU->(!EOF()) .And. FIU->FIU_FILIAL == cFilFIU .And. FIU->FIU_CODIND == cCodIndice .And. FIU->FIU_DATA < dDateFim
		If FIU->FIU_INDICE > 0
			dDataTest := dataValida(FIU->FIU_DATA)
			If dDataTest == FIU->FIU_DATA
				If lFirst
					xFator := fatorDia(FIU->FIU_INDICE, nPercCDI)
					lFirst := .F.
				Else
					xFator := DEC_MUL(xFator, fatorDia(FIU->FIU_INDICE, nPercCDI))
				EndIf
				xFator := DEC_RESCALE(xFator, 16, 2)
			EndIf
		EndIf
		FIU->(DbSkip())
	EndDo

	If !(xFator == DEC_CREATE( 0, 64, 2))
		xFator := DEC_SUB(xFator, DEC_CREATE(1, 64, 0))
	Endif

	FWRestArea(aAreaFIU)
	FWRestArea(aActivedArea)
Return xFator

/*/{Protheus.doc} fatorDia
	retorna o valor do fator dia
	@type  Function
	@author renato.ito
	@since 23/05/2022
	@param nTaxaCDI, Numeric, taxa do CDI
	@param nPercCDI, Numeric, percentual do CDI
	@return xResp, dec, fotor CDI
/*/
Function fatorDia(nTaxaCDI as Numeric, nPercCDI as Numeric)
	Local nFormula1 := 0 as Numeric
	Local xFatorUm := DEC_CREATE(1, 64, 0)
	Local xDecFormula1
	Local xDecFormula2
	Local xDec1
	Local xResp

	nFormula1    := nPercCDI / 100
	nFormula2    := ((1 + (nTaxaCDI /100)) ^ (1/252)) -1
	xDecFormula1 := DEC_CREATE(nFormula1, 64, 4)
	xDecFormula2 := DEC_CREATE(nFormula2, 64, 8)
	xDec1        := DEC_RESCALE(DEC_MUL(xDecFormula1, xDecFormula2), 16, 2)
	xResp        := DEC_ADD(xDec1, xFatorUm)

Return xResp

/*/{Protheus.doc} calcJurSimples
	retorna o valor do juros
	@type  Function
	@author renato.ito
	@since 23/05/2022
	@param nValorBase, Numeric, valor base
	@param nTaxaAA, Numeric, taxa ao ano
	@param nDias, Numeric, quantidade de dias do período
	@param nDiasCTB, Numeric, dias do ano (default 360 MV_DIASCTB)
	@return nValJuros, Numeric, valor do juros
/*/
Function calcJurSimples(nValorBase as Numeric, nTaxaAA as Numeric, nDias as Numeric, nDiasCTB as Numeric) as Numeric
	Local nValJuros := 0 as Numeric

	If nDiasCTB == 0
		nDiasCTB := SuperGetMV("MV_DIASCTB", ,360)  //Quantidade de dias para o ano contábil
	EndIf
	nValJuros := ((nTaxaAA/100) * (nValorBase/nDiasCTB)) * nDias

Return ROUND(nValJuros, 2)

/*/{Protheus.doc} calcJurComposto
	retorna o valor do juros
	@type  Function
	@author renato.ito
	@since 23/05/2022
	@param nValorBase, Numeric, valor base
	@param nTaxaAA, Numeric, taxa ao ano
	@param nDias, Numeric, quantidade de dias do período
	@param nDiasCTB, Numeric, dias do ano (default 360 MV_DIASCTB)
	@return nValJuros, Numeric, valor do juros
/*/
Function calcJurComposto(nValorBase as Numeric, nTaxaAA as Numeric, nDias as Numeric, nDiasCTB as Numeric) as Numeric
	Local nValorResult := 0 as Numeric
	Local xNumeroUm
	Local xDecTaxa
	Local xDecPeriodo
	Local xDecDiasAno
	Local xDecFatorDia
	Local xDecValBase
	Local xDecResult
	Local xDecFotorAtu

	xNumeroUm    := DEC_CREATE(1, 64, 2) // criando número 1 em dec
	xDecTaxa     := DEC_CREATE(1 + (nTaxaAA / 100), 64, 16) // dividindo a taxa para multiplicação
	xDecPeriodo  := DEC_CREATE(nDias , 64, 16) // tranforma os dias do período
	xDecDiasAno  := DEC_CREATE(nDiasCTB , 64, 16) // transforma os dias do ano
	xDecFatorDia := DEC_DIV(xDecPeriodo, xDecDiasAno) // divisão pelo período
	xDecFotorAtu := DEC_POW(xDecTaxa, xDecFatorDia) // exponencial da taxa pelo período
	xDecFotorAtu := DEC_SUB(xDecFotorAtu, xNumeroUm) // subtrai 1 da divisão
	xDecValBase  := DEC_CREATE(nValorBase, 64, 2 ) // cria o valor base em dec valor base
	xDecResult   := DEC_MUL(xDecFotorAtu, xDecValBase) // multiplica o fator pelo valor base
	nValorResult := ROUND(VAL(cValToChar(xDecResult)), 2) // converte o resultado para numero

Return nValorResult

/*/{Protheus.doc} calcIR
	calcula o IR
	@type  Function
	@author renato.ito
	@since 23/05/2022
	@param nValorBase, Numeric, valor base
	@param nTaxa, Numeric, taxa de ir
	@param lAplicacao, Logical, .t. se for aplicação, .f. se for emprestimo
	@return nVlIr, Numeric, valor do ir
/*/
Function calcIR(nValorBase as Numeric, nTaxa as Numeric, lAplicacao as Logical) as Numeric
	Local lL11033 := SuperGetMv("MV_L11033", , .F.) as Logical
	Local nVlIr   := 0                              as Numeric

	If lAplicacao .Or. (!lAplicacao .And. lL11033 )
		nVlIr := nValorBase * (nTaxa / 100)
	EndIf
Return ROUND(nVlIr, 2)

/*/{Protheus.doc} calcIndPeriod
	retorna o valor do fator dia
	@type  Function
	@author renato.ito
	@since 01/06/2022
	@param nValBase, Valor base
	@param cCodIndice, Character, Código do índice
	@param dDataInc, Date, data de inicio para os calculcos
	@param dDataVenc, Date, data de vencimento
	@return nValorIndice, Numeric, valor calculado pelo indice
/*/
Function calcIndPeriod(nValBase as Numeric, cCodIndice as Character, dDataInc as Date, dDataVenc as Date)
	Local cQueryFIT    := ""  as Character
	Local cQueryFIU    := ""  as Character
	Local nValorIndice := 0   as Numeric
	Local cPeriodo     := ""  as Character // 1=Diaria;2=Mensal;3=Trimestral;4=Semestral;5=Anual
	Local lFirst       := .T. as Logical
	Local dDataAux            as Date
	Local xFator
	Local xDecValBase
	Local xDecResult

	// Verifica o período cadastrado do índice
	cQueryFIT := queryFIT()
	cPeriodo  := MPSysExecScalar(cQueryFIT, 'FIT_PERIOD' , {FWxFilial( 'FIT' ), cCodIndice})

	If cPeriodo == '2' // índice mensal considera sempre o dia 1 do mês anterior
		dDataAux := FirstDate(MonthSub(dDataInc, 1))
	ElseIf cPeriodo == '5' // anual considera o primeiro dia do ano
		dDataAux := FirstYDate(dDataInc)
	Else
		dDataAux := dDataInc
	EndIf
	// pega o valor do índice
	cQueryFIU := queryFIU()

	// Aculmula o fator para gerar a correção da parcela
	While dDataAux < dDataVenc
		nIndice := MPSysExecScalar(cQueryFIU, 'FIU_INDICE', {FWxFilial('FIU'), cCodIndice, DtoS(dDataAux)})
		If nIndice <> 0
			xDec1 := DEC_CREATE(1 + (nIndice / 100), 64, 16)
			If lFirst
				lFirst := .F.
				xFator := xDec1
			Else
				xFator := DEC_MUL(xFator, xDec1)
			EndIf
		EndIf
		DO CASE // 1=Diaria;2=Mensal;3=Trimestral;4=Semestral;5=Anual
			CASE cPeriodo == '1'
				dDataAux := DaySum(dDataAux, 1)
			CASE cPeriodo == '2'
				dDataAux := MonthSum(dDataAux, 1)
			CASE cPeriodo == '5'
				dDataAux := YearSum(dDataAux, 1)
			OTHERWISE
				dDataAux := DaySum(dDataAux, 1)
		ENDCASE
	EndDo
	If !lFirst // se verdadeiro não achou nenhum índice
		xDecValBase  := DEC_CREATE(nValBase, 64, 2)
		xDecResult   := DEC_MUL(xFator, xDecValBase)
		nValorIndice := ROUND(VAL(cValToChar(xDecResult)), 2)
	EndIf

Return nValorIndice

/*/{Protheus.doc} queryFIT
	Query para obter o tipo de periodo do indice FIT
	@type Static Function
	@author renato.ito
	@since 01/06/2022
	@return cQuery, Character, query para utilziar com bind
/*/
Static Function queryFIT() as Character
	Local cQuery := "" as Character

	cQuery := " SELECT FIT_PERIOD FROM " + RetSqlName("FIT") + " WHERE "
	cQuery += " FIT_FILIAL = ? "
	cQuery += " AND FIT_CODIND = ? "
	cQuery += " AND D_E_L_E_T_ = ' '"

Return ChangeQuery(cQuery)

/*/{Protheus.doc} queryFIU
	Query para obter o valor do indice FIU
	@type Static Function
	@author renato.ito
	@since 01/06/2022
	@return cQuery, Character, query para utilziar com bind
/*/
Static Function queryFIU() as Character
	Local cQuery := "" as Character

	cQuery := " SELECT FIU_INDICE FROM " + RetSqlName("FIU") + " WHERE "
	cQuery += " FIU_FILIAL = ? "
	cQuery += " AND FIU_CODIND = ? "
	cQuery += " AND FIU_DATA = ? "
	cQuery += " AND FIU_BLOQ = 2 " // 1=Sim;2=Nao
	cQuery += " AND D_E_L_E_T_ = ' '"

Return ChangeQuery(cQuery)

/*/{Protheus.doc} calcCDITaxa
	Calcula o valor de CDI com uma taxa definida
	@type  Function
	@author user
	@since 23/05/2022
	@version version
	@param nValorBase, Numeric, valor base
	@param nTaxaCDI, Numeric, taxa do CDI
	@param nPercCDI, Numeric, percentual do CDI
	@param nDias, Numeric, dias do período
	@return nValorCDI, numeric, valor do CDI
/*/
Function calcIndiceTaxa(nValorBase as Numeric, nTaxa as Numeric, nDiasAno as Numeric, nDias as Numeric) as Numeric
	Local nValorResult := 0 as Numeric
	Local xNumeroUm
	Local xDecTaxa
	Local xDecPeriodo
	Local xDecFormula1
	Local xDecFormula2
	Local xDecFormula3
	Local xDecValBase
	Local xDecResult

	If !Empty(nValorBase) .And. !Empty(nTaxa) .And. !Empty(nDiasAno) .And. !Empty(nDias)
		xNumeroUm    := DEC_CREATE(1, 64, 2)                              // criando número 1 em dec
		xDecTaxa     := DEC_CREATE(1 + (nTaxa / 100), 64, 16)             // dividindo a taxa para multiplicação
		xDecPeriodo  := DEC_DIV(xNumeroUm, DEC_CREATE(nDiasAno , 64, 16)) // divisão pelo período
		xDecFormula1 := DEC_POW(xDecTaxa, xDecPeriodo)                    // exponencial da taxa pelo ano
		xDecFormula2 := DEC_POW(xDecFormula1, DEC_CREATE(nDias , 64, 16)) // exponencial da taxa pelo período
		xDecFormula3 := DEC_SUB(xDecFormula2, xNumeroUm)                  // ubtrai 1 do resultado
		xDecValBase  := DEC_CREATE(nValorBase, 64, 2 )                    // cria o valor base em dec valor base
		xDecResult   := DEC_MUL(xDecFormula3, xDecValBase)                // multiplica o fator pelo valor base
		nValorResult := ROUND(VAL(cValToChar(xDecResult)), 2)             // converte o resultado para numero
	EndIf
Return nValorResult

/*/{Protheus.doc} calcCDB
	Calcula o valor de CDB
	@type  Function
	@author user
	@since 23/05/2022
	@version version
	@param nValorBase, Numeric, valor base
	@param nTaxa, Numeric, taxa
	@param nDias, Numeric, dias do período
	@param nDiasAno, Numeric, dias do ano
	@return nValor, numeric, valor do resultado
/*/
Function calcCDB(nValorBase as Numeric, nTaxa as Numeric, nDias as Numeric, nDiasAno as Numeric) as Numeric
	Local nValor := 0 as Numeric
	Local xDecUm := DEC_CREATE(1, 64, 2)
	Local xDecFatorTaxa
	Local xDecFatorDias
	Local xDecFatorAtual
	Local xDecValorBase
	Local xDecResult

	xDecFatorTaxa  := DEC_ADD(DEC_CREATE(nTaxa/100, 64, 4), xDecUm)               // (taxa / 100) + 1
	xDecFatorDias  := DEC_CREATE(nDias/nDiasAno, 64, 8)                           // (dias do perído / dias do ano (uteis ou corrido))
	xDecFatorAtual := DEC_SUB(DEC_POW(xDecFatorTaxa, xDecFatorDias), xDecUm)      // (fator taxa ^ faotr dia) - 1
	xDecValorBase  := DEC_CREATE(nValorBase, 64, 2 )                              // transforma o valor base em dec
	xDecResult     := DEC_RESCALE(DEC_MUL(xDecFatorAtual, xDecValorBase), 16, 2)  // multiplica o valor base pelo fator e arredonda
	nValor         := Round(VAL(cValToChar(xDecResult)), 2)                       // converte o resultado para numero
Return nValor

/*/{Protheus.doc} calcIOF
	calcula o valor de IOF
	@type  Function
	@author renato.ito
	@since 23/05/2022
	@param nValorBase, Numeric, valor base
	@param nTaxa, Numeric, taxa
	@return nValorIOF, Numeric, valor
/*/
Function calcIOF(nValorBase as Numeric, nTaxa as Numeric) as Numeric
	Local nValorIOF := 0 as Numeric

	nValorIOF := nValorBase * (nTaxa / 100)

Return ROUND(nValorIOF, 2)


/*/{Protheus.doc} calcAcumulados
	retorna os valores acumulados
	@type  Function
	@author renato.ito
	@since 09/06/2022
	@param cFilSEH, Character, eh_filial
	@param cNumero, Character, eh_numero
	@param cRevisao, Character, eh_revisao
	@param dDataRef, Date, data do pagamento
	@return json, valores acumulados
/*/
Function calcAcumulados(cFilSEH as Character, cNumero as Character, cRevisao as Character, dDataRef as Date ) as Json
	Local cQuery     := ""                 as Character
	Local cAlias     := ""                 as Character
	Local aBind      := {}                 as Array
	Local jAcumulado := JsonObject():New() as Json

	cQuery := "SELECT SEI.EI_VALOR, SEI.EI_VLMOED2, SEI.EI_TIPODOC, SEI.EI_MOTBX FROM " + RetSqlName('SEI') + " SEI "
	cQuery += " WHERE SEI.EI_FILIAL = ? "
	cQuery += " AND SEI.EI_NUMERO = ? "
	cQuery += " AND SEI.EI_REVISAO = ? "
	cQuery += " AND SEI.EI_DATA <= ? "
	cQuery += " AND SEI.EI_APLEMP = ? "
	cQuery += " AND SEI.EI_STATUS != 'C' "
	cQuery += " AND SEI.D_E_L_E_T_ = ' ' "

	aBind  := {cFilSEH, cNumero, cRevisao, DtoS(dDataRef), 'EMP'}
	cAlias := MPSysOpenQuery(ChangeQuery(cQuery),,,,aBind)

	jAcumulado['nAcEmpJur1'] := 0 // Acumulado do juros na moeda corrente
	jAcumulado['nAcEmpJur2'] := 0 // Acumulado do Juros na moeda do Emprestimo
	jAcumulado['nAcEmpCVC']  := 0 // Acumulado da Variacao Cambial a Curto Prazo
	jAcumulado['nAcEmpLVC']  := 0 // Acumulado da Variacao Cambial a Longo Prazo
	jAcumulado['nAcEmpJVC']  := 0 // Acumulado da Variacao Cambial dos Juros

	While (cAlias)->(!EOF())
		If (cAlias)->EI_MOTBX=="APR"
			DO CASE
				CASE (cAlias)->EI_TIPODOC == "JR"
					jAcumulado['nAcEmpJur2'] += (cAlias)->EI_VLMOED2
					jAcumulado['nAcEmpJur1'] += (cAlias)->EI_VALOR
				CASE (cAlias)->EI_TIPODOC == "V2"
					jAcumulado['nAcEmpCVC'] += (cAlias)->EI_VALOR
				CASE (cAlias)->EI_TIPODOC == "V1"
					jAcumulado['nAcEmpLVC'] += (cAlias)->EI_VALOR
				CASE (cAlias)->EI_TIPODOC == "V3"
					jAcumulado['nAcEmpJVC'] += (cAlias)->EI_VALOR
			END CASE
		Else
			DO CASE
				CASE (cAlias)->EI_TIPODOC == "JR"
					jAcumulado['nAcEmpJur2'] -= (cAlias)->EI_VLMOED2
					jAcumulado['nAcEmpJur1'] -= (cAlias)->EI_VALOR
				CASE (cAlias)->EI_TIPODOC == "V2"
					jAcumulado['nAcEmpCVC'] -= (cAlias)->EI_VALOR
				CASE (cAlias)->EI_TIPODOC == "V1"
					jAcumulado['nAcEmpLVC'] -= (cAlias)->EI_VALOR
				CASE (cAlias)->EI_TIPODOC == "V3"
					jAcumulado['nAcEmpJVC'] -= (cAlias)->EI_VALOR
			END CASE
		EndIf
		(cAlias)->(DbSkip())
	EndDo
	(cAlias)->(DbCloseArea())
Return jAcumulado
