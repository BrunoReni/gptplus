#INCLUDE "tlpp-core.th"
#Include "FWMVCDEF.ch"
#include 'totvs.ch'
#include 'backoffice.ngf.formulaTemplates.data.ch'

NAMESPACE totvs.protheus.backoffice.ngf.formulaTemplates
using namespace gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.util

//-------------------------------------------------------------------
/*/{Protheus.doc} formulaTemplatesInclude
	Realiza as Inclusão do template de formula através do modelo.

  @param templateData, json, campos no body da requisição.
  @return jResponse, Json, resposta da requisição.

	@author Vinicius do Prado
	@since abr|2022
/*/
//-------------------------------------------------------------------
Function formulaTemplatesInclude(templateData as Json) as Json
  Local oModel	as Object
  Local oAuxF7B	as Object
  Local oAuxF7C	as Object
  Local cLog     := "" as Character
  Local akey     := {} as Array
  Local aF7CData := {}  as Array
  Local jResponse as Json
  Local jF7BData  as Json
  
  jF7BData  := JsonObject():new()
  jResponse := JsonObject():new()

  jF7BData := templateData['F7B']
  aF7CData := templateData['F7C']

  Aadd(akey, Padr(jF7BData['f7b_filial'],  TamSx3("F7B_FILIAL")[1]))
  Aadd(akey, Padr(jF7BData['f7b_codigo'],  TamSx3("F7B_CODIGO")[1]))
  Aadd(akey, Padr(jF7BData['f7b_aplemp'],  TamSx3("F7B_APLEMP")[1]))

  dbselectarea("F7B")
	dbsetorder(1)

	If !dbSeek(akey[1] + akey[2] + akey[3]) // F7B_FILIAL + F7B_CODIGO + F7B_APLEMP

    SetMaster('F7B')
    SetDetail('F7C')
    SetRelation({ {'F7C_FILIAL','XFILIAL("F7C")'} ,{'F7C_CODIGO','F7B_CODIGO'}, {'F7C_APLEMP','F7B_APLEMP'} })

    oModel := FWLoadModel( 'FINMTEM' ) 
    oModel:SetOperation(MODEL_OPERATION_INSERT)
    oModel:Activate()

    oAuxF7B	:= oModel:GetModel('MASTER')
	  oAuxF7C	:= oModel:GetModel('DETAIL')

    // Dados da F7B
    updateModelFields(jF7BData, oAuxF7B, "insert")

    // Dados da F7C
    insertF7CItem(aF7CData, oAuxF7C)

    If oModel:VldData()
      jResponse := IIF(oModel:CommitData(),;
      answerFormat(.T., 201, STR0001, ''),; // Template cadastrado com sucesso
      answerFormat(.F., 500, STR0002, '')) // Erro ao incluir o template
    Else
      cLog := cValToChar(oModel:GetErrorMessage()[6])
      jResponse := answerFormat(.F., 400, STR0002, cLog) // Erro ao incluir o template
    EndIf
  Else
    jResponse := answerFormat(.F., 400, STR0002, STR0003) // Já existe um registro com a chave informada
  EndIf 
  
Return jResponse

//-------------------------------------------------------------------
/*/{Protheus.doc} formulaTemplatesEdit
	Realiza as Alteração do template de formula através do modelo.

  @param templateData, json, campos no body da requisição.
  @return jResponse, Json, resposta da requisição.

	@author Vinicius do Prado
	@since abr|2022
/*/
//-------------------------------------------------------------------
Function formulaTemplatesEdit(templateData as Json, cInternalID as Character) as Json
  Local oModel	as Object
  Local oAuxF7B	as Object
  Local oAuxF7C	as Object
  Local cLog     := "" as Character
  Local akey     := {} as Array
  Local aF7CData := {} as Array
  Local aKeysTemplates := {} As Array
  Local jResponse as Json
  Local jF7BData  as Json
 
  jF7BData  := JsonObject():new()
  jResponse := JsonObject():new()

  jF7BData := templateData['F7B']
  aF7CData := templateData['F7C']

  aKeysTemplates := STRtokARR(cInternalID, '|')

  Aadd(akey, Padr(aKeysTemplates[1],  TamSx3("F7B_FILIAL")[1]))
  Aadd(akey, Padr(aKeysTemplates[2],  TamSx3("F7B_CODIGO")[1]))
  Aadd(akey, Padr(aKeysTemplates[3],  TamSx3("F7B_APLEMP")[1]))

  dbselectarea("F7B")
	dbsetorder(1)

	If dbSeek(akey[1] + akey[2] + akey[3]) // F7B_FILIAL + F7B_CODIGO + F7B_APLEMP

    SetMaster('F7B')
    SetDetail('F7C')
    SetRelation({ {'F7C_FILIAL','XFILIAL("F7C")'} ,{'F7C_CODIGO','F7B_CODIGO'}, {'F7C_APLEMP','F7B_APLEMP'} })

    oModel := FWLoadModel( 'FINMTEM' )
    oModel:SetOperation(MODEL_OPERATION_UPDATE)
    oModel:Activate()

    oAuxF7B	:= oModel:GetModel('MASTER')
	  oAuxF7C	:= oModel:GetModel('DETAIL')

    // Dados da F7B
    If ValType(jF7BData) == "J"
      updateModelFields(jF7BData, oAuxF7B, "update")
    EndIf

    // Dados da F7C
    If ValType(aF7CData) == "A"
      If clearF7CItems(aF7CData, oAuxF7C)
        insertF7CItem(aF7CData, oAuxF7C)
      EndIf
    EndIf

    If oModel:VldData()
      jResponse := IIF(oModel:CommitData(),;
      answerFormat(.T., 201, STR0004, ''),; // Template alterado com sucesso
      answerFormat(.F., 500, STR0005, '')) // Erro ao alterar o template
    Else
      cLog := cValToChar(oModel:GetErrorMessage()[6])
      jResponse := answerFormat(.F., 400, STR0005, cLog) // Erro ao alterar o template
    EndIf

  Else
    jResponse := answerFormat(.F., 400, STR0006, '') // Template não encontrado
  EndIf 
  
Return jResponse

//-------------------------------------------------------------------
/*/{Protheus.doc} formulaTemplatesDelete
	Realiza as deleção do template de formula através do modelo.

  @param cInternalID, json, chave do registro para deleção.
  @return jResponse, Json, resposta da requisição.

	@author Vinicius do Prado
	@since abr|2022
/*/
//-------------------------------------------------------------------
Function formulaTemplatesDelete(cInternalID as Character) as Json
  Local oModel	as Object
  Local cLog    := "" as Character
  Local akey    := {} as Array
  Local aKeysTemplates := {} As Array
  Local jResponse as Json

  jResponse := JsonObject():new()
  aKeysTemplates := STRtokARR(cInternalID, '|')

  Aadd(akey, Padr(aKeysTemplates[1],  TamSx3("F7B_FILIAL")[1]))
  Aadd(akey, Padr(aKeysTemplates[2],  TamSx3("F7B_CODIGO")[1]))
  Aadd(akey, Padr(aKeysTemplates[3],  TamSx3("F7B_APLEMP")[1]))

  dbselectarea("F7B")
	dbsetorder(1)

	If dbSeek(akey[1] + akey[2] + akey[3]) // F7B_FILIAL + F7B_CODIGO + F7B_APLEMP

    SetMaster('F7B')
    SetDetail('F7C')
    SetRelation({ {'F7C_FILIAL','XFILIAL("F7C")'} ,{'F7C_CODIGO','F7B_CODIGO'}, {'F7C_APLEMP','F7B_APLEMP'} })

    oModel := FWLoadModel( 'FINMTEM' )
    oModel:SetOperation(MODEL_OPERATION_DELETE)
    oModel:Activate()  
  
    If oModel:VldData()
      jResponse := IIF(oModel:CommitData(),;
      answerFormat(.T., 201, STR0007, ''),; // Template excluído com sucesso
      answerFormat(.F., 500, STR0008, '')) // Erro ao excluir template
    Else
      cLog := cValToChar(oModel:GetErrorMessage()[6])
      jResponse := answerFormat(.F., 400, STR0008, cLog) // Erro ao excluir template
    EndIf
  Else
    jResponse := answerFormat(.F., 400, STR0006, '') // Template não encontrado
  EndIf 

Return jResponse

//-------------------------------------------------------------------
/*/{Protheus.doc} insertF7CItem
	Inclusão de item no modelo da F7C.

  @param aF7CData, array, array com os json refentes aos dados F7C.
  @param oAuxF7C, Object, submodelo de dados da F7C para inclusão.

	@author Vinicius do Prado
	@since abr|2022
/*/
//-------------------------------------------------------------------
Function insertF7CItem(aF7CData as Array, oAuxF7C as Object)
  Local nI := 0 as Numeric
  Local cItem := "" as Character

  cItem := "001"

  For nI := 1 To Len(aF7CData)
    oAuxF7C:AddLine()
    oAuxF7C:SetValue( 'F7C_FILIAL', aF7CData[nI]['f7c_filial'])
    oAuxF7C:SetValue( 'F7C_CODIGO', aF7CData[nI]['f7c_codigo'])
    oAuxF7C:SetValue( 'F7C_APLEMP', aF7CData[nI]['f7c_aplemp'])
    oAuxF7C:SetValue( 'F7C_ITEM'  , cItem)
    oAuxF7C:SetValue( 'F7C_TIPO'  , aF7CData[nI]['f7c_tipo'])
    oAuxF7C:SetValue( 'F7C_DESCRI', aF7CData[nI]['f7c_descri'])
    oAuxF7C:SetValue( 'F7C_FORM'  , aF7CData[nI]['f7c_form'])
    oAuxF7C:SetValue( 'F7C_CONFIG', aF7CData[nI]['f7c_config'])

    cItem := Soma1(cItem)
  Next nI
Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} clearF7CItems
	Limpa os items no modelo F7C.

  @param aF7CData, array, array com os json refentes aos dados F7C.
  @param oAuxF7C, Object, submodelo de dados da F7C para deleção.

	@author Vinicius do Prado
	@since abr|2022
/*/
//-------------------------------------------------------------------
Function clearF7CItems(aF7CData as Array, oAuxF7C as Object) as Logical
  Local nI := 0 as Numeric
  Local lRet := .T.

  For nI := 1 To oAuxF7C:Length()
    oAuxF7C:GoLine(nI)
    oAuxF7C:DeleteLine()
  Next nI

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} updateModelFields
	Atualiza os campos do modelo de dados informado.

  @param jFieldsUpdate, json, campos que serão atualizados.
  @param oModel, Object, modelo em que ocorrera a atualizacao.

	@author Vinicius do Prado
	@since abr|2022
/*/
//-------------------------------------------------------------------
Function updateModelFields(jFieldsUpdate as Json, oModel as Object, operation as Character)
  Local nX := 0 as Numeric
  Local aProperty := {} as Array

  aProperty := jFieldsUpdate:getNames()

  For nX := 1 To Len(aProperty)
    If operation == "update"
      If Upper(aProperty[nX]) != "F7B_FILIAL" .And.;
         Upper(aProperty[nX]) != "F7B_CODIGO" .And.;
         Upper(aProperty[nX]) != "F7B_APLEMP"
        oModel:setValue(Upper(aProperty[nX]), jFieldsUpdate[aProperty[nX]])
      EndIf
    Else
      oModel:setValue(Upper(aProperty[nX]), jFieldsUpdate[aProperty[nX]])
    EndIf
  Next nX
Return Nil
