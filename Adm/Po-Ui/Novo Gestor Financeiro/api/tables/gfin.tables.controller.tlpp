#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'gfin.tables.controller.ch'

NAMESPACE gfin.api.tables
USING NAMESPACE gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.util
USING NAMESPACE totvs.protheus.backoffice.fin.tabledata


/*/{Protheus.doc} getVersion
	Retorna a versão do endpoint
	@type  Function
	@author renato.ito
	@since 05/04/2022
	@return numeric, número da versão
/*/
Function getVersion() As Numeric
Return	5

//-------------------------------------------------------------------
/*/{Protheus.doc} Tables
EndPoint para obter os registros de uma tabela informada

@author daniel.muniz
@since abril|2021
/*/
//-------------------------------------------------------------------
@GET('/api/gfin/v1/Tables/:id')
Function Tables()
	Local oResponse as Json
  Local oParams   as Json
  Local cParam    as Character
  Local oService  as Object

  oParams   := oRest:getPathParamsRequest()
  cParam    := oParams['id']
  oService  := GfinTablesService():new()

  If FindFunction('totvs.protheus.backoffice.fin.tabledata.IsModuleRH') .And. !totvs.protheus.backoffice.fin.tabledata.IsModuleRH(cParam)
    oResponse := oService:getData(cParam, oRest:getQueryRequest(), oRest:getHeaderRequest())
  Else
    oResponse := answerErrorFormat(400, STR0001, STR0002 + cParam + STR0003) //"Não foi possivel realizar a consulta. A Tabela "#" não está disponivel para consulta"
  Endif

  answerBaseV2(oResponse)
  FreeObj(oResponse)
  FreeObj(oParams)
  FreeObj(oService)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} Struct
EndPoint para obter a estutura de uma tabela informada

@author daniel.muniz
@since abril|2021
/*/
//-------------------------------------------------------------------
@GET('/api/gfin/v1/Tables/:id/Struct')
Function Struct()
  Local oResponse as Json
  Local oParams   as Json
  Local cParam    as Character
  Local oService  as Object

  oParams   := oRest:getPathParamsRequest()
  cParam    := oParams['id']
  oService  := GfinTablesService():new()

  oResponse := oService:getStruct(cParam, oRest:getQueryRequest(), oRest:getHeaderRequest())

  AnswerRest(oResponse)
  FreeObj(oResponse)
  FreeObj(oParams)
  FreeObj(oService)
Return

/*/{Protheus.doc} TablesV2
  endpoint para listagem de items das tabelas
  @type function
  @author renato.ito
  @since 25/11/2021
/*/
@GET('/api/ngf/v1/tables/:id')
Function TablesV2()
  Local oResponse as Json
  Local oParams   as Json
  Local cParam    as Character

  oParams   := oRest:getPathParamsRequest()
  cParam    := oParams['id']

  oResponse := getTablesItems(cParam, oRest:getQueryRequest(), oRest:getHeaderRequest())

  AnswerRest(oResponse)
  FreeObj(oResponse)
  FreeObj(oParams)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} Struct
EndPoint para obter a estutura de uma tabela informada

@author daniel.muniz
@since abril|2021
/*/
//-------------------------------------------------------------------
@GET('/api/ngf/v1/tables/:id/Struct')
Function StructV2()
  Local oResponse as Json
  Local oParams   as Json
  Local cParam    as Character
  Local oService  as Object

  oParams   := oRest:getPathParamsRequest()
  cParam    := oParams['id']
  oService  := GfinTablesService():new()

  oResponse := getStructV2(cParam, oRest:getQueryRequest())

  AnswerRest(oResponse)
  FreeObj(oResponse)
  FreeObj(oParams)
  FreeObj(oService)
Return
