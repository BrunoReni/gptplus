#INCLUDE "tlpp-core.th"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "GFIN.TABLES.DATA.CH"

NameSpace gfin.api.tables
//-------------------------------------------------------------------
/*/{Protheus.doc} apiTablesQuery
query para retorno da API

@param  table As Character

@return query As Character, query padrão para uso na api

@author Alison Kaique
@since mar|2021
/*/
//-------------------------------------------------------------------
Function apiTablesQuery(cTable as Character)
	Local cQuery as Character

	DO CASE
		CASE "F79GROUP" == cTable
			cQuery := "SELECT #QueryFields# "
			cQuery += " FROM " + RetSqlName("F79") + " F79 WHERE D_E_L_E_T_ = ' ' AND ((F79_QTDTIT > '0' AND F79_NBAIXA > '0') OR (F79_QTDTIT = '0')) #QueryWhere# "
			cQuery += " GROUP BY F79_FILIAL, F79_DTPROC, F79_HRPROC, F79_BANCO , F79_AGENCI , F79_CONTA , F79_ESTCOB, F79_RECPAG, F79_JSON"
		CASE "F7AXF79" == cTable
			cQuery := " SELECT #QueryFields#  FROM " + RetSqlName("F7A") + " F7A "
			cQuery += " INNER JOIN " + RetSqlName("F79") + " F79 "
			cQuery += " ON F79.F79_FILIAL = F7A.F7A_FILIAL "
			cQuery += " AND F79.F79_CODIGO = F7A.F7A_CODIGO "
			cQuery += " AND F79.D_E_L_E_T_ = ' ' "
			cQuery += " #QueryWhere# "
			cQuery += " WHERE F7A.D_E_L_E_T_ = ' ' "
		OTHERWISE
			cQuery := " SELECT #QueryFields# "
			cQuery += " FROM " + RetSqlName(cTable) + " " + cTable
			cQuery += " WHERE  " + cTable + ".D_E_L_E_T_ = ' ' "
			cQuery += " #QueryWhere# "
	ENDCASE

Return cQuery
//-------------------------------------------------------------------
/*/
{Protheus.doc} apiTablesMapFields
adiconar os campos que serão utilizados na query e retorno do objeto

@Input  oSelf As Object, oSelf
        fields as Array, campos para retorno
        table as Character, tabela
        fieldStruct as Array, array para retorno do struct da api
        allFields as Logical as Array, array para retorno do struct da api

@author Alison Kaique
@since mar|2021
/*/
//-------------------------------------------------------------------
Function apiTablesMapFields(oSelf as Object, fields as Array, table as Character, fieldStruct as Array)
  Local x3Title            as Character
  Local x3Descri           as Character
  Local x3Picture          As Character
  Local x3F3               As Character
  Local x3Cbox             As Array
  Local item               as Numeric
  Local struct             as Array
  Local modeAccess         as Character

  modeAccess := FWModeAccess(table, 01) // COMPARTILHAMENTO EMPRESA
  Default fields := {}
  Default fieldStruct := {}

  If Empty(fields)
    struct := FWSX3Util():GetListFieldsStruct(table , .F.)
    For item := 1 To Len(struct)
      x3Title := AllTrim(FwX3Titulo(struct[item][1]))
      x3Descri := AllTrim(FWSX3Util():GetDescription(struct[item][1]))
      x3Picture := AllTrim(X3Picture(struct[item][1]))
      x3Cbox := getOptionsX3CBox(struct[item][1])
      x3F3 := AllTrim(GetSX3Cache(struct[item][1], 'X3_F3'))
      // Validando compartilhamento de tabela
      If ( modeAccess=='C' .AND. !('_FILIAL' $ Upper(struct[item][1]))) .OR. !modeAccess=='C'
        oSelf:AddMapFields(struct[item][1], struct[item][1], .T., .F., {struct[item][1], struct[item][2], struct[item][3], struct[item][4]})
        aAdd(fieldStruct, {;
        {'field', lower(struct[item][1])},;
        {'type', struct[item][2]},;
        {'title', x3Title},;
        {'description', x3Descri},;
        {'picture', x3Picture},;
        {'size', struct[item][3]},;
        {'decimals', struct[item][4]},;
        {'options', x3Cbox},;
        {'standardQuery', x3F3}})
        aAdd(fields, struct[item][1])
      EndIf
    Next item
  Else
    // adiciona os campos enviados
    For item := 1 To Len(fields)
      x3Title := AllTrim(FwX3Titulo(fields[item]))
      x3Descri := AllTrim(FWSX3Util():GetDescription(fields[item]))
      struct := FWSX3Util():GetFieldStruct(fields[item])
      x3Picture := AllTrim(X3Picture(struct[1]))
      x3Cbox := getOptionsX3CBox(struct[1])
      x3F3 := AllTrim(GetSX3Cache(struct[1], 'X3_F3'))
       // Validando compartilhamento de tabela
      If ( modeAccess=='C' .AND. !('_FILIAL' $ Upper(fields[item]))) .OR. !modeAccess=='C'
        oSelf:AddMapFields(fields[item], fields[item], .T., .F., {fields[item], struct[2], struct[3], struct[4]})
        aAdd(fieldStruct, {;
        {'field', lower(fields[item])},;
        {'type', struct[2]},;
        {'title', x3Title},;
        {'description', x3Descri},;
        {'picture', x3Picture},;
        {'size', struct[3]},;
        {'decimals', struct[4]},;
        {'options', x3Cbox},;
        {'standardQuery', x3F3}})
      EndIf
    Next
  EndIf
Return

/*/{Protheus.doc} mapFieldsFolders
    prepara os campos com seus folders
    @type function
    @version 12.1.33
    @author renato.ito
    @since 13/05/2021

    @param oSelf As Object, oSelf
    @param cTable As Character, nome da tabela
    @param afieldStruct As Array, array para retorno do struct da api
    @param aFolders As Array, array para retorno dos folders da api
/*/
Function mapFieldsFolders(oSelf As Object, cTable As Character, afieldStruct As Array, aFolders As Array)
	Local cX3Title  := ''   As Character
	Local cX3Descri := ''   As Character
	Local cX3Campo  := ''   As Character
	Local cX3Mask   := ''   As Character
	Local lXBox     := .F.  As Logical
	Local aStruct   := {}   As Array
	Local aStrFolder:= {}   As Array
	Local nField    := 0    As Numeric
	Local nFolder   := 0    As Numeric

	aStruct    := FWFormStruct(2, cTable, /*bSX3*/, .T., .F., .T.)['AFIELDS']
	aStrFolder := FWFormStruct(2, cTable, /*bSX3*/, .T., .F., .T.)['AFOLDERS']

	// Abro a tabela SX3
	OpenSxs(,,.F.,.F.,cEmpAnt,"SX3TMP","SX3")
	dbSelectArea("SX3TMP")
	SX3TMP->(dbSetOrder(2)) // X3_CAMPO, R_E_C_N_O_, D_E_L_E_T_

	// adiciona os campos
	For nField := 1 To Len(aStruct)
		If SX3TMP->(DbSeek(aStruct[nField][1]))
		cX3Title  := aStruct[nField][3]
		cX3Descri := aStruct[nField][4]
		cX3Campo  := aStruct[nField][1]
		cX3Mask   := If (SX3TMP->X3_TIPO == 'N', AllTrim(SX3TMP->X3_PICTURE) , '')
		lXBox     := Iif(Len(aStruct[nField][13]) > 0, .T., .F.)
		oSelf:AddMapFields(cX3Campo, cX3Campo, .T., .F., {cX3Campo, SX3TMP->X3_TIPO, SX3TMP->X3_TAMANHO, SX3TMP->X3_DECIMAL})
		aAdd(afieldStruct, {;
			{'field', Lower(cX3Campo)},;
			{'type', SX3TMP->X3_TIPO},;
			{'title', cX3Title},;
			{'description', cX3Descri},;
			{'order', SX3TMP->X3_ORDEM},;
			{'folder', SX3TMP->X3_FOLDER},;
			{'size', SX3TMP->X3_TAMANHO},;
			{'picture', cX3Mask},;
			{'xBox', lXBox};
			})
		EndIf
	Next
	SX3TMP->(dbCloseArea())

	// carrega os foldes da tabela
	For nFolder := 1 To Len(aStrFolder)
		aAdd(aFolders, {;
			{'order', aStrFolder[nFolder]['CID']},;
			{'label', aStrFolder[nFolder]['CTITULO']};
		})
	Next nFolder

	If Empty(aFolders) // se não existir folder adiciona uma padrão
		aAdd(aFolders, {;
				{'order', ' '},;
				{'label', STR0002};
		})
	Else
		aAdd(aFolders, {;
			{'order', ' '},;
			{'label', STR0001};
		})
	EndIf

Return

/*/{Protheus.doc} apiTablesQuery
  query para retorno da API de boleto com join em cliente

  @return query As Character, query padrão para uso na api
  @author Luiz Nai
  @since Maio|2021
/*/
Function apiTablesQueryBol(cTableBills As Character, lOcurrencies As Logical)
  Local cQuery := "" As Character
  Local cQueryBills := "" As Character
  Local cBillsField := "SE1.E1_" As Character
  Local cWhereProvider := "" As Character
  Local cWallet := "R" As Character
  Local lBolAltCan := lOcurrencies .and. FindFunction("F713VldAlCa") .and. F713VldAlCa() As Logical

  If cTableBills == "SE2"
    cBillsField := "SE2.E2_"
    cWallet := "P"
    cWhereProvider := " AND " + cBillsField + "FORNECE = " + "SEA.EA_FORNECE "
    cWhereProvider += " AND " + cBillsField + "LOJA = " + "SEA.EA_LOJA"
  Endif

  /*
    Relacionamento Bordero x titulo x banco
  */
  cQueryBills := " SELECT #QueryFields# FROM " + RetSqlName("SEA") + " SEA" + " JOIN "
  cQueryBills +=   RetSqlName(cTableBills) + " " + cTableBills + " ON "
  cQueryBills +=   cBillsField + "FILORIG = SEA.EA_FILORIG "
  cQueryBills += " AND " + cBillsField + "PREFIXO = SEA.EA_PREFIXO "
  cQueryBills += " AND " + cBillsField + "NUM = SEA.EA_NUM "
  cQueryBills += " AND " + cBillsField + "PARCELA = SEA.EA_PARCELA "
  cQueryBills += " AND " + cBillsField + "TIPO = SEA.EA_TIPO "
  cQueryBills += cWhereProvider

  // No processo de cancelamento de boleto que esta em bordero o sistema limpa o campo E1_NUMBOR
  If !lBolAltCan
    cQueryBills += " AND " + cBillsField + "NUMBOR = " + "SEA.EA_NUMBOR "
  Endif

  cQueryBills += " AND " + cTableBills + ".D_E_L_E_T_ = ' ' "
  cQueryBills += " JOIN " + RetSqlName("SA6") + " SA6" + " ON "
  cQueryBills +=  totvs.protheus.backoffice.ngf.util.BranchRelation( {"SEA","EA_FILIAL","SEA"}, {"SA6","A6_FILIAL","SA6"} )
  cQueryBills += " AND SA6.A6_COD = SEA.EA_PORTADO "
  cQueryBills += " AND SA6.A6_AGENCIA = SEA.EA_AGEDEP "
  cQueryBills += " AND SA6.A6_NUMCON = SEA.EA_NUMCON "
  cQueryBills += " AND SA6.D_E_L_E_T_ = ' ' "

  /*
    Relacionamento com as ocorrencias (Alteração e/ou cancelamento) dos boletos
  */
  If cTableBills == "SE1"
    If lBolAltCan
      cQuery := cQueryBills
      cQuery += " JOIN " + RetSqlName("FI2") + " FI2 ON "
      cQuery +=   cBillsField + "FILIAL = FI2.FI2_FILIAL "
      cQuery += " AND " + cBillsField + "PREFIXO = FI2.FI2_PREFIX "
      cQuery += " AND " + cBillsField + "NUM = FI2.FI2_TITULO "
      cQuery += " AND " + cBillsField + "PARCELA = FI2.FI2_PARCEL "
      cQuery += " AND " + cBillsField + "TIPO = FI2.FI2_TIPO "
      cQuery += " AND SEA.EA_NUMBOR = FI2.FI2_NUMBOR "
      cQuery += " AND FI2.FI2_BORAPI = 'S' "
      cQuery += " AND FI2.FI2_TRANSF IN (' ', 'F') "
      cQuery += " AND FI2.D_E_L_E_T_ = ' ' "
      cQuery += " WHERE "
      cQuery += " SEA.EA_TRANSF = 'S' "
      cQuery += " AND SEA.EA_BORAPI = 'S' "
      cQuery += " AND SEA.EA_CART = '" + cWallet + "' "
      cQuery += " #QueryWhere# "
    Else
      cQuery += cQueryBills + " WHERE SEA.D_E_L_E_T_ = ' ' " + " #QueryWhere# "
    Endif
  Endif  

  //Relacionamento com movimentação bancaria, no caso de PA CNAB que teve seu movimento gerado pelo job FINA718 
  //para não exibir na tela de  pagamentos registrados
  If cTableBills == "SE2"
    cQuery := cQueryBills + " WHERE SEA.D_E_L_E_T_ = ' ' " + " #QueryWhere# "
    cQuery += " AND 0 = ( SELECT COUNT(FK7_IDDOC) "
    cQuery +=             " FROM " + RetSqlName("FK7") + " FK7 "
    cQuery +=             " INNER JOIN " + RetSqlName("FK5") + " FK5 ON "
    cQuery +=             " FK7.FK7_FILIAL = FK5.FK5_FILIAL "
    cQuery +=             " AND FK7.FK7_IDDOC = FK5.FK5_IDDOC "
    cQuery +=             " AND FK5.FK5_RECPAG = 'P' "
    cQuery +=             " AND FK5.FK5_TPDOC = 'PA' "
    cQuery +=             " AND FK5.D_E_L_E_T_ = ' ' "
    cQuery +=             " WHERE "
    cQuery +=             " FK7.FK7_FILTIT = SE2.E2_FILIAL "
    cQuery +=             " AND FK7.FK7_PREFIX = SE2.E2_PREFIXO "
    cQuery +=             " AND FK7.FK7_NUM = SE2.E2_NUM "
    cQuery +=             " AND FK7.FK7_PARCEL = SE2.E2_PARCELA "
    cQuery +=             " AND FK7.FK7_TIPO = 'PA ' "
    cQuery +=             " AND FK7.FK7_CLIFOR = SE2.E2_FORNECE "
    cQuery +=             " AND FK7.FK7_LOJA = SE2.E2_LOJA "
    cQuery +=             " AND FK7.D_E_L_E_T_ = ' ' 
    cQuery +=           ")"
  Endif

Return cQuery

/*/{Protheus.doc} getOptionsX3CBox
    Retorna as opções do campo já formatadas

    @type  Function
    @author alison.kaique
    @since 22/06/2021
    @version 12.1.33

    @param cField, character, Id do campo

    @return aOptions, array, opções do campo
/*/
Function getOptionsX3CBox(cField As Character) As Array
  Local aX3Cbox   As Array
  Local aOptions  As Array
  Local cContent  As Character
  Local cX3Cbox   As Character
  Local cFunction As Character
  Local cIdiom    As Character
  Local cBoxIdiom As Character
  Local nIndex    As Numeric
  Local nPosition As Numeric
  Local jOption   As Json

  cIdiom := FwRetIdiom()

  If cIdiom == 'en' .Or. cIdiom == 'ru'
    cBoxIdiom := 'X3_CBOXENG'
  ElseIf cIdiom == 'es'
    cBoxIdiom := 'X3_CBOXSPA'
  Else
    cBoxIdiom := 'X3_CBOX'
  EndIf

  cX3Cbox  := AllTrim(GetSX3Cache(cField, cBoxIdiom))

  // verifica se possui chamada de função e se a função existe
  If (Left(cX3Cbox, 01) == '#')
    cFunction := SubStr(cX3Cbox, 02)

    If (FindFunction(cFunction))
      cX3Cbox := &(cFunction)
    Else
      cX3Cbox := ''
    EndIf
  EndIf

  aX3Cbox  := StrTokArr(cX3Cbox, ";")
  aOptions := {}

  For nIndex := 01 To Len(aX3Cbox)
    cContent := AllTrim(aX3Cbox[nIndex])
    nPosition := At('=', cContent)

    If (nPosition > 0)
      jOption := JsonObject():New()
      jOption['value'] := Left(cContent, nPosition - 01)
      jOption['label'] := SubStr(cContent, nPosition + 01)
      AAdd(aOptions, jOption)
    EndIf
  Next nIndex
  if ValType(jOption) <> "U"
    FreeObj(jOption)
  EndIf
Return aOptions

/*/{Protheus.doc} addIDDOC
	adicina na query filtro com idDoc
	@type Function
	@author renato.ito
	@since 04/03/2022
	@param cTable, character, tabela
	@param cFK7_Alias, Character, alias FK7
	@param aDocKey, Array, id do titulo
	@return character, filtro com id doc para query
/*/
Function addIDDOC(cTable as Character, cFK7_Alias as Character, aDocKey as Array) as Character
	Local aFK7ID     := {} as Array
	Local cWhere     := '' as Character

	aFK7ID := getIdFK7(cFK7_Alias, aDocKey)
	If Len(aFK7ID) > 0
		If cTable $ 'FK1|FK2'
			cWhere += " AND " + cTable + "_IDDOC = '" + aFK7ID[2] + "'"
		ElseIf cTable $ 'CV8'
			cWhere := " AND CV8_PROC = '" + aFK7ID[2] + "'"
		EndIF
	EndIf
Return cWhere

/*/{Protheus.doc} getIdFK7
	adicina na query filtro com idDoc
	@type Function
	@author renato.ito
	@since 04/03/2022
	@param cTable, character, tabela
	@param aBindParam, Array, id do titulo
	@return array, [FK7_FILIAL, FK7_IDDOC]
/*/
Function getIdFK7(cTable as Character, aBindParam as Array) as Array
	Local cQuery := "" as Character
	Local cAlias := "" as Character
	Local aRet   := {} as Array

	cQuery := " SELECT FK7_FILIAL, FK7_IDDOC "
	cQuery += " FROM " + RetSqlName('FK7') + " FK7 "
	cQuery += " WHERE FK7.D_E_L_E_T_ =' ' "
	cQuery += " AND  FK7.FK7_ALIAS = '" + cTable +"' "
	cQuery += " AND  FK7.FK7_FILTIT = ? "
	cQuery += " AND  FK7.FK7_PREFIX = ? "
	cQuery += " AND  FK7.FK7_NUM = ? "
	cQuery += " AND  FK7.FK7_PARCEL = ? "
	cQuery += " AND  FK7.FK7_TIPO = ? "
	If 'SE2' $ cTable
		cQuery += " AND  FK7.FK7_CLIFOR = ? "
		cQuery += " AND  FK7.FK7_LOJA = ? "
	EndIF

	cAlias  := MPSysOpenQuery(cQuery,,,,aBindParam)

	If (cAlias)->(!EOF())
		aAdd(aRet, (cAlias)->FK7_FILIAL)
		aAdd(aRet, (cAlias)->FK7_IDDOC)
	EndIf
	(cAlias)->(DbCloseArea())
Return aRet

/*/{Protheus.doc} customize
	função para querys customizadas
	@type Function
	@author renato.ito
	@since 04/03/2022
	@param oSelf, Object
	@param cCustom, Character, tabela
	@return
/*/
Function customize(oSelf as Object, cCustom as Character)
	Local aStruct := {} as Array
	DO CASE
		CASE cCustom == "F79GROUP"
			oSelf:AddMapFields('F79_QTDTIT' , 'F79_QTDTIT' , .T., .F., {'F79_QTDTIT', 'N', 11, 0}, 'SUM(CAST(F79_QTDTIT AS INT))')
			oSelf:addStruct({;
				'field'      : 'f79_qtdtit',;
				'type'       : 'N',;
				'size'       : 11,;
				'decimal'    : 0,;
				'lgpd'       : .F.,;
				'title'      : AllTrim(FwX3Titulo('F79_QTDTIT')),;
				'description': AllTrim(FWSX3Util():GetDescription('F79_QTDTIT'));
			})
			oSelf:AddMapFields('F79_NBAIXA' , 'F79_NBAIXA' , .T., .F., {'F79_NBAIXA', 'N', 11, 0}, 'SUM(CAST(F79_NBAIXA AS INT))')
			oSelf:addStruct({;
				'field'      : 'f79_nbaixa',;
				'type'       : 'N',;
				'size'       : 11,;
				'decimal'    : 0,;
				'lgpd'       : .F.,;
				'title'      : AllTrim(FwX3Titulo('F79_NBAIXA')),;
				'description': AllTrim(FWSX3Util():GetDescription('F79_NBAIXA'));
				})
			oSelf:AddMapFields('F79_QTPROC' , 'F79_QTPROC' , .T., .F., {'F79_QTPROC', 'N', 11, 0}, 'SUM(CAST(F79_QTPROC AS INT))')
			oSelf:addStruct({;
				'field'      : 'f79_qtproc',;
				'type'       : 'N',;
				'size'       : 11,;
				'decimal'    : 0,;
				'lgpd'       : .F.,;
				'title'      : AllTrim(FwX3Titulo('F79_QTPROC')),;
				'description': AllTrim(FWSX3Util():GetDescription('F79_QTPROC'));
				})
		CASE cCustom == "F7AXF79"
			aStruct := FWSX3Util():GetFieldStruct('F79_FILIAL')
			oSelf:AddMapFields('F79_FILIAL', 'F79_FILIAL', .F., .F., {'F79_FILIAL', aStruct[2], aStruct[3], aStruct[4]})
			aStruct := FWSX3Util():GetFieldStruct('F79_BANCO')
			oSelf:AddMapFields('F79_BANCO' , 'F79_BANCO' , .F., .F., {'F79_BANCO' , aStruct[2], aStruct[3], aStruct[4]})
			aStruct := FWSX3Util():GetFieldStruct('F79_AGENCI')
			oSelf:AddMapFields('F79_AGENCI', 'F79_AGENCI', .F., .F., {'F79_AGENCI', aStruct[2], aStruct[3], aStruct[4]})
			aStruct := FWSX3Util():GetFieldStruct('F79_CONTA')
			oSelf:AddMapFields('F79_CONTA' , 'F79_CONTA' , .F., .F., {'F79_CONTA' , aStruct[2], aStruct[3], aStruct[4]})
			aStruct := FWSX3Util():GetFieldStruct('F79_DTPROC')
			oSelf:AddMapFields('F79_DTPROC', 'F79_DTPROC', .F., .F., {'F79_DTPROC', aStruct[2], aStruct[3], aStruct[4]})
			aStruct := FWSX3Util():GetFieldStruct('F79_HRPROC')
			oSelf:AddMapFields('F79_HRPROC', 'F79_HRPROC', .F., .F., {'F79_HRPROC', aStruct[2], aStruct[3], aStruct[4]})
			aStruct := FWSX3Util():GetFieldStruct('F79_ESTCOB')
			oSelf:AddMapFields('F79_ESTCOB', 'F79_ESTCOB', .F., .F., {'F79_ESTCOB', aStruct[2], aStruct[3], aStruct[4]})
	ENDCASE
Return
