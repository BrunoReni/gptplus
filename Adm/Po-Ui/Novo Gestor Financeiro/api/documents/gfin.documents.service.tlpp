#include 'tlpp-core.th'

NAMESPACE gfin.api.documents
USING NAMESPACE gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.util

Class GfinDocumentsService FROM FWAdapterBaseV2
    Public Method new()
    Public Method getDocuments()
EndClass

Method new() Class GfinDocumentsService
    _Super:new('GET')
    If MethIsMemberOf( self, "setUseSpaces", .T. )
        ::setUseSpaces(.T.)
    Endif
Return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} getDocuments
retorna os títulos financieros

@param tableNick As Character, SE1 ou SE2
@param queryRequestParams As Json, parâmetros recebidos

@Return jResponse As Json, retorno da lista de títulos

@author Renato Ito
@since 10/12/2020
/*/
//-------------------------------------------------------------------
Method getDocuments(tableNick As Character, queryRequestParams As Json, headers As Json) Class GfinDocumentsService
    Local jResponse     As Json
    Local aFilter       As Array
    Local lAllFields    As Logical
    Local lSE1          As Logical
    Local aFields       As Array
    Local aStruct       As Array
    Local aBranches     As Array
    Local cQueryWhere   As Character
    Local cFieldNick    As Character
    Local cTipoNotIn    As Character
    Local cCustomSearch As Character

    aFilter      := {}
    aFields      := {}
    aStruct      := {}
    aBranches    := {}
    lAllFields   := .F.
    lSE1         := .F.
    cQueryWhere  := ''
    cFieldNick   := ''
    cTipoNotIn   := ''

    oJsonResponse := JsonObject():New()

    If 'SE1' $ tableNick
        cFieldNick := 'SE1.E1_'
        lSE1       := .T.
    Else
        cFieldNick := 'SE2.E2_'
        lSE1       := .F.
    EndIf

    // indica qual página devemos retornar
    If !(Empty(queryRequestParams['page']))
        ::setPage(Val(queryRequestParams['page']))
    EndIf

    // indica o tamanho da página
    If !(Empty(queryRequestParams['pagesize']))
        ::setPageSize(Val(queryRequestParams['pagesize']))
    EndIf

    // indica a ordem definida por querystring
    ::setOrderQuery(queryRequestParams['order'])

    // indica o filtro querystring recebido (pode se utilizar um filtro oData)
    If !(Empty(queryRequestParams['filter']))
        AAdd(aFilter, {"FILTER", queryRequestParams['filter']})
        ::SetUrlFilter(aFilter)
    EndIf

    // trata as filiais encaminhadas no header para o filtro
    If !(Empty(headers['branches']))
        aBranches := STRtokARR(headers['branches'], ',')
    EndIf

    // Regra para definir os campos para o retorno
    // Se encaminhar lAllFields lista todos os campos da tabela
    If !(Empty(queryRequestParams['allfields']))
        If ValType(queryRequestParams['allfields']) <> "L"
            If "true" $ queryRequestParams['allfields']
                lAllFields := .T.
            EndIf
        Else
            lAllFields := queryRequestParams['allfields']
        EndIf
    EndIf

    If !lAllFields
        If !(Empty(queryRequestParams['fields']))
            ::SetFields(UPPER(queryRequestParams['fields']))
            aFields := apiDocumentsFields(tableNick, STRtoArray(::OJSONOBJ:CFIELDS, ','))
        else
            aFields := apiDocumentsFields(tableNick, {})
        EndIf
        mapFieldsBaseV2(Self, @aStruct, aFields)
    Else
        mapTableFieldsBaseV2(Self, @aStruct, tableNick, FWModeAccess(tableNick, 1) <> 'C')
        mapTableFieldsBaseV2(Self, @aStruct, tableNick, FWModeAccess('F75', 1) <> 'C')
    EndIf

    // Informa a Query a ser utilizada pela API
    ::SetQuery(apiDocumentsQuery(tableNick))

    // configura o filtro de query padrão
    cQueryWhere := tableNick + ".D_E_L_E_T_ = ' ' "
    If !Empty(aBranches)
        cQueryWhere += "AND " + cFieldNick + "FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, tableNick) + ")"
    EndIf

    // adicionas filtro de tipos créditos ou provisórios
    If !(Empty(queryRequestParams['typeAnt'])) .And. 'true' $ queryRequestParams['typeAnt']
        cTipoNotIn +=  If(lSE1, '|' + MVRECANT, '|' + MVPAGANT)
    EndIf
    If !(Empty(queryRequestParams['typeNeg'])) .And. 'true' $ queryRequestParams['typeNeg']
        cTipoNotIn += If(lSE1, '|' + MV_CRNEG, '|' + MV_CPNEG )
    EndIf
    If !(Empty(queryRequestParams['typeProvis'])) .And. 'true' $ queryRequestParams['typeProvis']
        cTipoNotIn += '|' + MVPROVIS
    EndIf

    If !Empty(cTipoNotIn)
        cQueryWhere += " AND F75_TIPO NOT IN " + FormatIn( SubStr(cTipoNotIn, 2), "|")
    EndIf

    cCustomSearch := ''
    If FindFunction("gfin.util.profileToFilter")
        cCustomSearch := gfin.util.profileToFilter(__cUserId, 'NGF', 'CS' + tableNick, 'Filter')
    EndIf
    // filtros personalizados
    If !(Empty(cCustomSearch))
        cQueryWhere += " AND " + cCustomSearch
    EndIf

    ::SetWhere(cQueryWhere)

    // Informa a ordenação a ser Utilizada pela Query
    ::SetOrder(apiDocumentsOrder(tableNick))

    //Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
    If ::Execute()
        // Gera o arquivo Json com o retorno da Query
        ::FillGetResponse()
    EndIf

    jResponse := JsonObject():New()

    If ::lOk
        jResponse["result"] := .T.
        jResponse["response"] := JsonObject():New()
        jResponse["response"]:FromJSON(::getJSONResponse())
        jResponse["response"]["struct"] := gfin.util.arrayToJson(aStruct)
    Else
        jResponse := answerErrorFormat(::GetCode(), ::GetMessage(), ::GetMessage())
    EndIf

    //faz a desalocação de objetos e arrays utilizados
    ::DeActivate()

Return jResponse
