#include 'tlpp-core.th'

NameSpace gfin.api.summary
Using NameSpace gfin.util
USING NameSpace gfin.api.tables

//-------------------------------------------------------------------
/*/{Protheus.doc} prepareQuery
Prepara o Select para trazer os campos e
retorna o Alias;

@author Luiz Nai
@since Maio | 2021
/*/
//-------------------------------------------------------------------
Function prepareQuery(headers As Json)
	Local cAliasResult   As Character
	Local cFieldCount    As Character
	Local cFieldSum      As Character
	Local cTable         As Character
	Local cFieldBranch	 As Character
	Local cbranchQry	 As Character
	Local lComma         As Logical
	Local cQuery         As Character
	Local nItem          As Numeric
	Local struct         As Array
	Local aBranches		 As Array
	Local oFilter        As Json
	Local jResponse      As Json

	lComma       := .F.
	oFilter      := JsonObject():New()
	jResponse    := JsonObject():New()
	cQuery       := ''
	aBranches	 := {}
	cFieldBranch := ""
	cbranchQry   := ""

	cTable := UPPER(headers['table'])
	If(!Empty(headers['field_count']))
		struct := FWSX3Util():GetFieldStruct(headers['field_count'])

		If(Len(struct) > 0)
			cFieldCount := struct[1]
		Else
			cFieldCount := '*'
		EndIf
	EndIf

	If(!Empty(headers['field_sum']))
		struct := FWSX3Util():GetFieldStruct(headers['field_sum'])
		cFieldSum := struct[1]
	EndIf

	If Empty(cFieldCount) .And. Empty(cFieldSum)
		cFieldCount := '*'
	EndIf

	cQuery := "SELECT "

	if(!Empty(cFieldCount))
		cQuery += " COUNT(" + cFieldCount + ") TOTAL_ROWS "
		lComma := .T.
	EndIf

	if(!Empty(cFieldSum) )
		If(lComma)
			cQuery += " , "
		EndIf
			cQuery += " SUM(" + cFieldSum + ") TOTAL_VALUE "
	EndIf

	oFilter:fromJson(headers['filter'])
	cQuery += " FROM " + RetSQLName(cTable) + " WHERE D_E_L_E_T_ = ' ' "

	If(!Empty(oFilter['filter']))
		cQuery += " AND "
		cQuery += oFilter['filter']
	EndIf

	// Tratamento para filial
	If headers:hasProperty('branches') .And. Len(headers['branches']) > 0
		cFieldBranch := getCutAliasName(cTable) + "_FILIAL"
		aBranches := STRtokARR(headers['branches'], ',')

		cbranchQry :=  " IN (" + gfin.util.branchesFormatToIn(aBranches, cTable) + ")"
		cQuery += " AND " + cFieldBranch + cbranchQry
	EndIf

	oStatement := FwPreparedStatement():New(cQuery)

	If(!Empty(oFilter['values']))
		For nItem := 1 To Len(oFilter['values'])
		type := UPPER(oFilter['values'][nItem]['type'])
		Do Case
			Case type == 'NUMERIC'
			oStatement:setNumeric(nItem, oFilter['values'][nItem]['value'])
			Case type == 'STRING'
			oStatement:setString(nItem, oFilter['values'][nItem]['value'])
			Case type == 'DATE'
			oStatement:setDate(nItem, oFilter['values'][nItem]['value'])
			Case type == 'IN'
			oStatement:setIn(nItem, oFilter['values'][nItem]['value'])
		EndCase
		Next
	EndIf

	fixQuery := oStatement:GetFixQuery()
	oStatement:Destroy()
	cAliasResult := MpSysOpenQuery(ChangeQuery(fixQuery))

	While (cAliasResult)->(!EOF())
		if(!Empty(cFieldCount))
			jResponse['field_rows'] := cFieldCount
			jResponse['total_rows'] := (cAliasResult)->(TOTAL_ROWS)
		EndIf

		if(!Empty(cFieldSum))
			jResponse['field_sum'] := cFieldSum
			jResponse['total_sum'] := (cAliasResult)->(TOTAL_VALUE)
		EndIf
		(cAliasResult)->(dbSkip())
	EndDo
	(cAliasResult)->(dbCloseArea())

Return jResponse
