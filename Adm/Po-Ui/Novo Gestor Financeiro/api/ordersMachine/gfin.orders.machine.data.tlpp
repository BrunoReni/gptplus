#INCLUDE "tlpp-core.th"
#include "gfin.orders.machine.data.CH"

NAMESPACE gfin.api.orders.machine
USING NAMESPACE totvs.protheus.backoffice.ngf.util

Static __lVQ0_FLUXO := VQ0->(FieldPos("VQ0_FLUXO")) > 0

//-------------------------------------------------------------------
/*/{Protheus.doc} apiOrdersMachineFields
  campos defaults para retorno da API

  @param  table As Character, VQ0 ou VS9
  @param  aApiFields As Array, lista de campos para adicionar

  @return array, lista dos campos

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Function apiOrdersMachineFields(cTable as Character, aApiFields as Array) as Array
  Local cfields   := '' as Character
  Local cFilTable := '' as Character
  Local cDatPag   := '' as Character
  Local nField    := 1  as Numeric

  If __lVQ0_FLUXO
		cDatPag := 'VQ0_DATFLU'
	Else
		cDatPag := 'VQ0_DATPED'
	EndIf

  If 'VQ0' $ cTable
    cFilTable := 'VQ0_FILIAL,'
    cfields   := 'VQ0_FILIAL,VQ0_CODIGO,VQ0_NUMPED,'+ cDatPag +',VQ0_CHASSI,VQ0_CODMAR,VQ0_MODVEI,VQ0_VALCUS'
  ElseIf 'VS9' $ cTable
    cFilTable := 'VS9_FILIAL,'
    cfields   := 'VS9_FILIAL,VS9_NUMIDE,VV0_NUMTRA,VS9_DATPAG,VV9_CODCLI,VV9_LOJA,A1_NOME,VV9_NOMVIS,VS9_VALPAG'
  EndIf

  for nField := 1 to len(aApiFields)
    if !(aApiFields[nField] $ cfields)
      cfields += ',' + aApiFields[nField]
    endif
  next
  // retira o campo de filial se for compartilhado
  if FWModeAccess(cTable, 1) == 'C'
    strTran(cfields, cFilTable, '')
  endif
Return STRtoArray(cfields, ',')

//-------------------------------------------------------------------
/*/{Protheus.doc} apiOrdersMachineQuery
  query para retorno da API

  @param  table As Character, VQ0 ou VS9
  @param  branches As Array, filiais utilizada na query

  @return query As Character, query padrão para uso na api

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Function apiOrdersMachineQuery(table as Character, branches as Array)
  Local cQuery     := "" as Character

  If table $ "VQ0"
    cQuery := apiOrdersQueryPurchase(branches)
  ElseIf table $ "VS9"
    cQuery := apiOrdersQuerySale(branches)
  EndIf
Return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} apiOrdersQuerySale
  query para retorno da API

  @param  table As Character, VQ0 ou VS9
  @param  aBranches As Array, filiais utilizadas na query
  @return query As Character, query padrão para uso na api

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Function apiOrdersQuerySale(aBranches as Array)
	Local cQuery      := "" as Character
  Local lVV0_FLUXO  := .T. as Logical
	Local lVV0_TIPDOC := .T. as Logical

	lVV0_FLUXO  := VV0->(FieldPos("VV0_FLUXO"))  > 0 
	lVV0_TIPDOC := VV0->(FieldPos("VV0_TIPDOC")) > 0 

	cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " + RetSQLName("VV0") + " VV0" 
	cQuery += " JOIN " + RetSQLName("VS9") + " VS9 "
	cQuery += "     ON  VS9.VS9_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, "VS9") + ")"
	cQuery += "     AND VS9.VS9_TIPOPE = 'V' "
	cQuery += "     AND VS9.VS9_NUMIDE = VV0.VV0_NUMTRA "
	cQuery += "     AND VS9.D_E_L_E_T_ = ' ' "
	cQuery += " JOIN " + RetSQLName("VV9") + " VV9 "
	cQuery += "     ON  VV9.VV9_FILIAL = VV0.VV0_FILIAL "
	cQuery += "     AND VV9.VV9_NUMATE = VV0.VV0_NUMTRA "
	cQuery += "     AND VV9.VV9_STATUS <> 'C' "
	cQuery += "     AND VV9.D_E_L_E_T_ = ' ' "
	cQuery += " LEFT JOIN " + RetSQLName("SA1") + " SA1 "
	cQuery += "     ON  SA1.A1_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, "SA1") + ")"
	cQuery += "     AND SA1.A1_COD = VV9.VV9_CODCLI "
	cQuery += "     AND SA1.A1_LOJA = VV9.VV9_LOJA "
	cQuery += "     AND SA1.D_E_L_E_T_ = ' ' "
	cQuery += " WHERE VV0.VV0_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, "VV0") + ")"
	cQuery += "     AND VV0.VV0_OPEMOV = '0'"
	cQuery += "     AND VV0.VV0_NUMNFI = ' '"
	cQuery += "     AND VV0.VV0_SERNFI = ' '"

	If lVV0_FLUXO
		cQuery += " AND VV0.VV0_FLUXO  = 'S'"
	EndIf

	If lVV0_TIPDOC
		cQuery += " AND VV0.VV0_TIPDOC <> '2'"
	EndIf
	cQuery += " #QueryWhere#"
Return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} apiOrdersQueryPurchase
  query para retorno da API

  @param  aBranches As Array, filiais utilizadas na query
  @return query As Character, query padrão para uso na api

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Function apiOrdersQueryPurchase(aBranches as Array)
  Local cQuery     := "" as Character
	Local cMV_GRUVEI := "" as Character

	cMV_GRUVEI := Padr(GetMv("MV_GRUVEI"),TamSX3("B1_GRUPO")[1])

	cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " +RetSqlName("VQ0") + " VQ0 "

	cQuery += "LEFT JOIN "+ RetSqlName("SB1") +" SB1 ON SB1.B1_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, "SB1") + ")"
	cQuery += " AND SB1.B1_GRUPO = '"+cMV_GRUVEI+"'"
	cQuery += " AND SB1.B1_CODITE = VQ0.VQ0_CHAINT "
	cQuery += " AND SB1.D_E_L_E_T_ = ' ' "
	cQuery += " WHERE VQ0.VQ0_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, "VQ0") + ")"

	If __lVQ0_FLUXO
		cQuery += "    AND VQ0.VQ0_FLUXO IN (' ','S') "
	EndIf	

	cQuery += " AND VQ0.D_E_L_E_T_ = ' ' "
	cQuery += " AND (SB1.B1_COD IS NULL "
	cQuery += " 	OR SB1.B1_COD NOT IN "
	cQuery += " 		(SELECT SD1.D1_COD "
	cQuery += " 		FROM " + RetSqlName("SD1") + " SD1"
	cQuery += " 		JOIN " + RetSqlName("SF4") + " SF4 ON SF4.F4_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, "SF4") + ")"
	cQuery += " 		AND SF4.F4_CODIGO = SD1.D1_TES "
	cQuery += " 		AND SF4.F4_OPEMOV = '01' "
	cQuery += " 		AND SF4.D_E_L_E_T_ = ' ' "
	cQuery += " 		WHERE SD1.D1_COD = SB1.B1_COD "
	cQuery += " 			AND SD1.D_E_L_E_T_ = ' ' )) "
	cQuery += " #QueryWhere#"
Return cQuery

//-------------------------------------------------------------------
/*/{Protheus.doc} apiOrdersOrderMachine
  ordem da consulta para retorno da API

  @param  table As Character, VQ0 ou VS9
  @return order As Character, string de order para query

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Function apiOrdersOrderMachine(table as Character)
  Local queryOrder as Character

  If 'VQ0' $ table
    queryOrder := 'VQ0_FILIAL,VQ0_CODIGO,VQ0_CHAINT'
  ElseIf 'VS9' $ table
    queryOrder := 'VS9_FILIAL,VS9_NUMIDE,VS9_TIPOPE,VS9_TIPPAG'
  EndIf
Return queryOrder

//-------------------------------------------------------------------
/*/{Protheus.doc} formatResponseOrdersMachine
  formata o response da api.

  @param cPedMachines , json, pedidos de venda de maquinas no período
  @return jResponse   , json, pedidos de venda de maquinas formatados

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Function formatResponseOrdersMachine(cPedMachines as Character) as Json
  Local jResponse as Json
  Local nCount  := 0  as Numeric
  Local cNomCli := "" as Character

  jResponse     := JsonObject():new()
  jResponse:FromJson(cPedMachines)

  For nCount := 1 to Len(jResponse['items'])
    If jResponse['items'][nCount]:hasProperty('a1_nome') .And. !Empty(jResponse['items'][nCount]['a1_nome'])
      cNomCli :=  jResponse['items'][nCount]['a1_nome']
    ElseIf jResponse['items'][nCount]:hasProperty('vv9_nomvis') 
      cNomCli :=  jResponse['items'][nCount]['vv9_nomvis']
    EndIf

    jResponse['items'][nCount]['nome_cli'] := cNomCli
    jResponse['items'][nCount]['e1_moeda'] := 1
  Next nCount

Return jResponse

//-------------------------------------------------------------------
/*/{Protheus.doc} formatResponseStructMachine
  formata a estrutura do response retornado pela api.

  @param aStruchPedMachine  , array, a estrutura dos pedidos no período
  @param cTable             , Character, tabela utilizada VV0 ou VS9
  @return aStruchPedMachine , array, array contendo a estrutura formatada

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Function formatResponseStructMachine(aStruchPedMachine as Array, cTable as Character) as Array
  Local nPosNome   := 0 As Numeric
  Local nPosNonVis := 0 As Numeric
  Local aMoeda     := {} As Array

  AAdd(aMoeda, { "field"       , "e1_moeda" })
  AAdd(aMoeda, { "type"        , "N" })
  AAdd(aMoeda, { "title"       , RetTitle("E1_MOEDA") }) // Moeda
  AAdd(aMoeda, { "xBox"        , .F. })
  AAdd(aMoeda, { "picture"     , "99" })
  AAdd(aMoeda, { "description" , STR0001 }) // Moeda do Titulo   
  AAdd(aStruchPedMachine, aMoeda)

  If cTable $ 'VS9'
    // Formata pedidos de venda
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vs9_numide", x[3][2] := STR0002, ) }) // Numero
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vv0_numtra", x[3][2] := RetTitle("VV0_NUMTRA"), ) }) // Pedido
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vs9_datpag", x[3][2] := STR0003, ) }) // Emissão
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vv9_codcli", x[3][2] := RetTitle("VV0_CODCLI"), ) }) // Cliente
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vv9_loja",   x[3][2] := RetTitle("VV0_LOJA"), ) }) // Loja
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vs9_valpag", x[3][2] := STR0004, ) }) // Valor

    // Formata o campo para exibir o nome do cliente
    nPosNome := aScan(aStruchPedMachine,{|x| x[1][2] == "a1_nome"})
    If nPosNome > 0
      aStruchPedMachine[nPosNome][1][2] := "nome_cli"
      aStruchPedMachine[nPosNome][3][2] := RetTitle("VV0_NOMCLI")
    EndIf
    
    nPosNonVis := aScan(aStruchPedMachine,{|x| x[1][2] == "vv9_nomvis"})
    If nPosNonVis > 0
      aStruchPedMachine := Adel(aStruchPedMachine,nPosNonVis)
      aStruchPedMachine := aSize(aStruchPedMachine,Len(aStruchPedMachine)-1)
    EndIf
  Else
    // Formata pedido de compra 
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vq0_codigo", x[3][2] := STR0002, ) }) // Numero
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vq0_datflu", x[3][2] := STR0005, ) }) // Dt. Pagto
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vq0_datped", x[3][2] := STR0005, ) }) // Dt. Pagto
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vq0_numped", x[3][2] := RetTitle("VQ0_NUMPED"), ) }) // Pedido
    aEval(aStruchPedMachine, { | x | Iif( x[1][2] == "vq0_valcus", x[3][2] := STR0004, ) }) // Valor 
  EndIf
Return aStruchPedMachine
