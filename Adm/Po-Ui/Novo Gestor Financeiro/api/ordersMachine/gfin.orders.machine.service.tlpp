

#include 'tlpp-core.th'

NAMESPACE gfin.api.orders.machine
USING NAMESPACE gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.util

Class GfinOrdersMachineService FROM FWAdapterBaseV2
  Public Method new()
  Public Method getOrdersMachine()
EndClass

Method new() Class GfinOrdersMachineService
  _Super:new('GET')
  If MethIsMemberOf( self, "setUseSpaces", .T. )
    ::setUseSpaces(.T.)
  Endif
Return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} getOrdersMachine
  retorna os Pedidos de Venda e Compra de Máquinas

  @Input
      tableNick As Character, VQ0 ou VS9
      queryRequestParams As Json, parâmetros recebidos

  @Return response As Json, retorno da lista de pedidos

  @author Vinicius do Prado
  @since dez|2022
/*/
//-------------------------------------------------------------------
Method getOrdersMachine(tableNick As Character, queryRequestParams As Json, headers As Json) Class GfinOrdersMachineService
  Local response  as Json
  Local filter    as Array
  Local allFields as Logical
  Local fields    as Array
  Local struct    as Array
  Local branches  as Array

  filter    := {}
  fields    := {}
  struct    := {}
  branches  := {}
  allFields := .F.

  // indica qual página devemos retornar
  If !(Empty(queryRequestParams['page']))
    ::setPage(Val(queryRequestParams['page']))
  EndIf

  // indica o tamanho da página
  If !(Empty(queryRequestParams['pagesize']))
    ::setPageSize(Val(queryRequestParams['pagesize']))
  EndIf

  // indica a ordem definida por querystring
  ::setOrderQuery(queryRequestParams['order'])

  // indica o filtro querystring recebido (pode se utilizar um filtro oData)
  If !(Empty(queryRequestParams['filter']))
    AAdd(filter, {"FILTER", queryRequestParams['filter']})
    ::SetUrlFilter(filter)
  EndIf
  
  // trata as filiais encaminhadas no header para o filtro
  If !(Empty(headers['branches']))
    branches := STRtokARR(headers['branches'], ',')
  EndIf

  // Regra para definir os campos para o retorno
  // Se encaminhar allfields lista todos os campos da tabela
  If !(Empty(queryRequestParams['allfields']))
      If "true" $ queryRequestParams['allfields']
        allFields := .T.
      EndIf
  EndIf

  If !allFields
    If !(Empty(queryRequestParams['fields']))
      ::SetFields(UPPER(queryRequestParams['fields']))
      fields := apiOrdersMachineFields(tableNick, STRtoArray(::OJSONOBJ:CFIELDS, ','))
    else
      fields := apiOrdersMachineFields(tableNick, {})
    EndIf
    mapFieldsBaseV2(Self, @struct, fields)
  Else
    mapTableFieldsBaseV2(Self, @struct, tableNick, FWModeAccess(tableNick, 1) <> 'C')
  EndIf

  // Informa a Query a ser utilizada pela API
  ::SetQuery(apiOrdersMachineQuery(tableNick, branches))

  // Informa a ordenação a ser Utilizada pela Query
  ::SetOrder(apiOrdersOrderMachine(tableNick))

  //Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
  If ::Execute()
    // Gera o arquivo Json com o retorno da Query
    ::FillGetResponse()
  EndIf

  response := JsonObject():New()

  If ::lOk
    response["result"] := .T.
    response["response"] := JsonObject():New()
    response["response"] := formatResponseOrdersMachine(::getJSONResponse())
    response["response"]["struct"] := gfin.util.arrayToJson(formatResponseStructMachine(struct, tableNick))
  Else
    response := answerErrorFormat(::GetCode(), ::GetMessage(), ::GetMessage())
  EndIf
  //faz a desalocação de objetos e arrays utilizados
  ::DeActivate()
Return response
