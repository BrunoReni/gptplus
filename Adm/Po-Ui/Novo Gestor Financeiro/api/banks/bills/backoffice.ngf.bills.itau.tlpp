#include 'tlpp-core.th'
#include "COLORS.CH"
#include "PROTHEUS.CH"
#include 'backoffice.ngf.bills.itau.CH'

NAMESPACE totvs.protheus.backoffice.ngf.itau
USING NAMESPACE totvs.protheus.backoffice.ngf.bills.functions
USING NAMESPACE gfin.job.bills

/*/{Protheus.doc} prepare341
    Prepara o Json para o Itau
    @type function
    @version 1.0
    @author renato.ito
    @since 11/03/2023
    @param jLayout As Json, json do layout
    @return json para envio
/*/
Function prepare341(jLayout As Json, jCredentials as Json) as Json

	Local cVersion := 'v1' As Character

	If jCredentials:hasProperty('version')
		cVersion := jCredentials['version']
	EndIf

	If validMacroItau(@jLayout, cVersion)	
		If cVersion != "v2"
			prepa341V1(@jLayout)			
		Else
			prepa341V2(@jLayout, jCredentials)
		EndIf
	EndIf

Return

/*/{Protheus.doc} prepa341V1
    Prepara o Json para o Itau V1
    @type function
    @version 1.0
    @author renato.ito
    @since 11/03/2023
    @param jLayout As Json, json do layout
    @return json para envio
/*/
Function prepa341V1(jLayout As Json) as Json
	Local jJsonItau       as Json
	Local cAgencia  := "" as Character
	Local cConta    := "" as Character
	Local cNossoNum := "" as Character
	Local cValAux1  := "" as Character
	Local cValAux2  := "" as Character
	Local nValAux   := 0  as Numeric

	cAgencia  := StrZero(VAL(AllTrim(totvs.protheus.backoffice.ngf.bills.functions.getAgenciaSEE())), 4)
	cConta    := StrZero(VAL(AllTrim(totvs.protheus.backoffice.ngf.bills.functions.getContaSEE())), 7)
	cNossoNum := StrZero(Val(NossoNum()), 8)
	jJsonItau :=  JsonObject():New()
	// PRINCIPAL
	jJsonItau['tipo_ambiente']                    := &(jLayout['tipo_ambiente']) // 1- Para testes 2- Para produção
	jJsonItau['tipo_registro']                    := 1
	jJsonItau['tipo_cobranca']                    := 1
	jJsonItau['tipo_produto']                     := "00006"
	jJsonItau['subproduto']                       := "00008"
	// jJsonItau['identificador_titulo_empresa']     := "OPCIONAL"
	// É um campo de livre utilização pela empresa parceira, cuja informação não é consistida
	// pelo Banco Itaú e não sai no aviso de cobrança, retornando ao beneficiário no arquivo
	// retorno em qualquer movimentação do título com o mesmo conteúdo da entrada.
	jJsonItau['titulo_aceite']                    := "S" // S- Se for um boleto de cobrança N- Se for um boleto de proposta
	jJsonItau['tipo_carteira_titulo']             := SEE->EE_CODCART
	jJsonItau['nosso_numero']                     := cNossoNum
	jJsonItau['digito_verificador_nosso_numero']  := getDVItau(cAgencia, cConta, AllTrim(SEE->EE_CODCART), cNossoNum)
	jJsonItau['data_vencimento']                  := &(jLayout['data_vencimento'])
	jJsonItau['valor_cobrado']                    := &(jLayout['valor_cobrado'])
	jJsonItau['especie']                          := SEA->EA_ESPECIE
	jJsonItau['data_emissao']                     := dateFormat(SE1->E1_EMISSAO, "yyyy-mm-dd")
	jJsonItau['data_limite_pagamento']            := dateFormat(Stod(StrTran(&(jLayout['data_limite_pagamento']), "-","")) + SEE->EE_ITAUNAO, "yyyy-mm-dd")
	jJsonItau['tipo_pagamento']                   := If(SE1->E1_VENCREA == SE1->E1_EMISSAO, 1, 3)  // 1- Pagamento realizado à vista 3-Pagamento com data de vencimento determinada *
	jJsonItau['indicador_pagamento_parcial']      := "false"  // true- Aceita pagamento parcial false- Não aceita pagamento parcial

	if jLayout:hasProperty('aceite')
		jJsonItau['titulo_aceite'] := iIf(jLayout['aceite'] == 1 , "S", "N")
	Endif

	If jLayout:hasProperty('numTitBenef') .And. !Empty(jLayout['numTitBenef'])
        jJsonItau['seu_numero'] := Upper(&(jLayout['numTitBenef']))
    Else
        jJsonItau['seu_numero'] := SE1->E1_IDCNAB
    EndIf

	// INSTRUÇÃO DE COBRANÇA
	cValAux1 := AllTrim(SEE->EE_CODCOB1)
	If !Empty(cValAux1)
		jJsonItau['instrucao_cobranca_1']          := cValAux1
		If cValAux1 $ "81|82|09|91|92"
			jJsonItau['quantidade_dias_1']         := If(cValAux1 $ "81|82|09", SEE->EE_ITAUPRT, If(cValAux1 =="91", SEE->EE_ITAUNAO, If(cValAux1 =="92", SEE->EE_ITAUDEV, Nil)))
		EndIf
		//jJsonItau['data_instrucao_1']            := Nil
	EndIf
	cValAux1 := AllTrim(SEE->EE_CODCOB2)
	If !Empty(cValAux1)
		jJsonItau['instrucao_cobranca_2']          := cValAux1
		If cValAux1 $ "81|82|09|91|92"
			jJsonItau['quantidade_dias_2']         := If(cValAux1 $ "81|82|09", SEE->EE_ITAUPRT, If(cValAux1 =="91", SEE->EE_ITAUNAO, If(cValAux1 =="92", SEE->EE_ITAUDEV, Nil)))
		EndIf
		//jJsonItau['data_instrucao_2']            := Nil
	EndIf
	cValAux1 := AllTrim(SEE->EE_CODCOB3)
	If !Empty(cValAux1)
		jJsonItau['instrucao_cobranca_3']           := cValAux1
		If cValAux1 $ "81|82|09|91|92"
			jJsonItau['quantidade_dias_3']          := If(cValAux1 $ "81|82|09", SEE->EE_ITAUPRT, If(cValAux1 =="91", SEE->EE_ITAUNAO, If(cValAux1 =="92", SEE->EE_ITAUDEV, Nil)))
		EndIf
		//jJsonItau['data_instrucao_3']             := Nil
	EndIf

	jJsonItau['valor_abatimento']                   := &(jLayout['valor_abatimento'])

	// SEÇÃO BENEFICIÁRIO
	jJsonItau['beneficiario']                                          := JsonObject():new()
	If jLayout:Hasproperty('beneficiarioFilial')
		jJsonItau['beneficiario']['cpf_cnpj_beneficiario']                 := AllTrim(FWSM0Util():GetSM0Data(cEmpAnt, jLayout['beneficiarioFilial'] , {'M0_CGC'})[1][2])
	Else
		jJsonItau['beneficiario']['cpf_cnpj_beneficiario']                 := SA6->A6_CGC	
	EndIf		
	jJsonItau['beneficiario']['agencia_beneficiario']                  := cAgencia
	jJsonItau['beneficiario']['conta_beneficiario']                    := cConta
	jJsonItau['beneficiario']['digito_verificador_conta_beneficiario'] := IIF(!Empty(SEE->EE_DVCTA), SEE->EE_DVCTA, SA6->A6_DVCTA)

	// SEÇÃO PAGADOR
	jJsonItau['pagador']                       := JsonObject():new()
	jJsonItau['pagador']['cpf_cnpj_pagador']   := AllTrim(SA1->A1_CGC)
	jJsonItau['pagador']['nome_pagador']       := AllTrim(&(jLayout['pagador']['nome_pagador']))
	jJsonItau['pagador']['bairro_pagador']     := AllTrim(&(jLayout['pagador']['bairro_pagador']))
	jJsonItau['pagador']['uf_pagador']         := AllTrim(&(jLayout['pagador']['uf_pagador']))
	jJsonItau['pagador']['cep_pagador']        := AllTrim(&(jLayout['pagador']['cep_pagador']))
	jJsonItau['pagador']['logradouro_pagador'] := AllTrim(&(jLayout['pagador']['logradouro_pagador']))
	jJsonItau['pagador']['cidade_pagador']     := AllTrim(&(jLayout['pagador']['cidade_pagador']))

	// SEÇÃO MOEDA
	jJsonItau['moeda']                         := JsonObject():new()
	jJsonItau['moeda']['codigo_moeda_cnab']    := "09" // Para o Banco Itaú o título é sempre emitido em real.Para moeda real, o campo deve ser preenchido com 09.

	// SEÇÃO JUROS
	jJsonItau['juros']                         := JsonObject():new()
	jJsonItau['juros']['tipo_juros']           := 5
	// POR VALOR
	If jLayout['juros']['tipo_juros'] == 1 .Or. jLayout['juros']['tipo_juros'] == 6
		cValAux1 := __nVlrJurosItau
		cValAux2 := &(jLayout['juros']['data_juros'])
		If !Empty(cValAux1) .And. !Empty(cValAux2)
			jJsonItau['juros']['tipo_juros']  := jLayout['juros']['tipo_juros']
			jJsonItau['juros']['valor_juros'] := cValAux1
			jJsonItau['juros']['data_juros']  := cValAux2
		EndIf
	// POR PERCENTUAL
	ElseIf CValToChar(jLayout['juros']['tipo_juros']) $ "2|3|4|7|8|9"
		cValAux1 := __nPercJurosItau
		cValAux2 := &(jLayout['juros']['data_juros'])
		If !Empty(cValAux1) .And. !Empty(cValAux2)
			jJsonItau['juros']['tipo_juros']       := jLayout['juros']['tipo_juros']
			jJsonItau['juros']['percentual_juros'] := cValAux1
			jJsonItau['juros']['data_juros']       := cValAux2
		EndIf
	EndIf

	// SEÇÃO MULTA
	jJsonItau['multa']                         := JsonObject():new()
	jJsonItau['multa']['tipo_multa']           := 3
	// POR  VALOR
	If jLayout['multa']['tipo_multa'] == 1
		cValAux1 := __nVlrMultaItau
		cValAux2 := &(jLayout['multa']['data_multa'])
		If !Empty(cValAux1) .And. !Empty(cValAux2)
			jJsonItau['multa']['tipo_multa']  := jLayout['multa']['tipo_multa']
			jJsonItau['multa']['valor_multa'] := cValAux1
			jJsonItau['multa']['data_multa']  := cValAux2
		EndIf
		// POR PERCENTUAL
	ElseIf jLayout['multa']['tipo_multa'] == 2
		cValAux1 := __nPercMultaItau
		cValAux2 := &(jLayout['multa']['data_multa'])
		If !Empty(cValAux1) .And. !Empty(cValAux2)
			jJsonItau['multa']['tipo_multa']       := jLayout['multa']['tipo_multa']
			jJsonItau['multa']['percentual_multa'] := cValAux1
			jJsonItau['multa']['data_multa']       := cValAux2
		EndIf
	EndIf

	// SEÇÃO DESCONTO
	jJsonItau['grupo_desconto']                         := JsonObject():new()
	jJsonItau['grupo_desconto']['tipo_desconto']        := 0

	nValAux := jLayout['grupo_desconto']['tipo_desconto']
	// POR VALOR
	If nValAux == 1 .OR. nValAux == 3 .Or. nValAux == 4
		cValAux1 := __nVlrDesconItau
		cValAux2 := &(jLayout['grupo_desconto']['data_desconto'])
		If !Empty(cValAux1) .And. !Empty(cValAux2)
			jJsonItau['grupo_desconto']['tipo_desconto']       := nValAux
			jJsonItau['grupo_desconto']['valor_desconto']      := cValAux1
			jJsonItau['grupo_desconto']['data_desconto']       := cValAux2
		EndIf
		// POR PERCENTUAL
	ElseIf nValAux == 2 .OR. nValAux == 5 .Or. nValAux == 6
		cValAux1 := __nPercDescoItau
		cValAux2 := &(jLayout['grupo_desconto']['data_desconto'])
		If !Empty(cValAux1) .And. !Empty(cValAux2)
			jJsonItau['grupo_desconto']['tipo_desconto']       := nValAux
			jJsonItau['grupo_desconto']['percentual_desconto'] := cValAux1
			jJsonItau['grupo_desconto']['data_desconto']       := cValAux2
		EndIf
	EndIf

	// SEÇÃO RECEBIMENTO DIVERGENTE
	jJsonItau['recebimento_divergente']                                      := JsonObject():new()
	jJsonItau['recebimento_divergente']['tipo_autorizacao_recebimento']      := "3"
	/*----------------------------------------------------------------------------
	1- Quando o título aceita qualquer valor divergente ao da cobrança
	2- Quando o título contém uma faixa de valores aceitos para recebimentos divergentes
	3- Quando o título não deve aceitar pagamentos de valores divergentes ao da cobrança
	4- Quando o título aceitar pagamentos de valores superiores ao mínimo definido
	-----------------------------------------------------------------------------------*/
	FreeObj(jLayout)
	jLayout := jJsonItau
Return

/*/{Protheus.doc} send341V2
	Realiza a transmissão de boletos para o Banco Itaú V2
    @type function
    @version 1.0
    @author francisco.oliveira
    @since 12/08/2021
    @param jLayoutReq As Json, json do layout para trasmissão
    @return json com o resultado da transmissão para o Itaú v2
/*/
Function send341V2(jLayoutReq As Json, jToken as Json, jCredentials as Json, cUrl As Character) as Json

	Local cResponse	 := '' As Character
	Local cCert		 := '' As Character
	Local cKey		 := '' As Character
	Local cHeadRet	 := '' As Character
	Local cClientSec := '' As Character
	Local nTimeOut	 := 30 As Numeric
	Local aHeaders   := {} As Array
	Local oRestItau        As Object
	Local jResponse		   As Json

	If jToken:hasProperty('token')
		cUrl    := 'https://api.itau.com.br/cash_management/v2/boletos'

		cCert	:= NGFConvLin(jCredentials['certificate']['cert'])
		cKey	:= NGFConvLin(jCredentials['certificate']['key'])

		cClientSec := jCredentials['clientSecret']

		aHeaders := {}
		aadd(aHeaders, 'Content-Type: application/json')
		aadd(aHeaders, 'Charset: UTF-8')
		aadd(aHeaders, 'Authorization: ' + jToken['token'] + ' ')
		aadd(aHeaders, 'x-itau-correlationID: ' + jLayoutReq['data']['dado_boleto']['dados_individuais_boleto'][1]['numero_nosso_numero'] + ' ')

		cResponse := HTTPSPost( cUrl, cCert, cKey, cClientSec, "", EncodeUTF8(jLayoutReq:ToJson()), nTimeOut, aHeaders, @cHeadRet )

		oRestItau := JsonObject():New()
		jResponse := JsonObject():New()

		If !Empty(cResponse)
			oRestItau:FromJson(DecodeUTF8(cResponse))
			If oRestItau:hasProperty('codigo') .And. (oRestItau['codigo'] != Nil .And. oRestItau['codigo'] > '200')
				jResponse['error'] := JsonObject():New()
				jResponse['error']:FromJSON(oRestItau:ToJson())
			Else
				jResponse['result'] := JsonObject():New()
				jResponse['result'] := oRestItau['data']
			EndIf
		EndIf
	Endif

Return jResponse

/*/{Protheus.doc} prepa341V2
    Prepara o Json para o Itaú Versão 2
    @type function
    @version 1.0
    @author francisco.oliveira
    @since 31/01/2022
    @param jLayout As Json, json do layout
    @return json ajustado para o Itaú
/*/

Function prepa341V2(jLayout As Json, jCredentials as Json)

	Local jJsonItau  := JsonObject():New() As Json
	Local aDadosAux  := {}  As Array
	Local aDadosAuxM := {}  As Array
	Local cVarAux	 := ''  As Character
	Local dDtLimPag	 := ''  As Character
	Local cEtapaProc := ''  As Character
	Local cNossoNum  := ''  As Character
	Local cDataAux	 := ''  As Character
	Local cAgencia   := ''  As Character
	Local cConta 	 := ''  As Character
	Local cDvConta   := ''  As Character
	Local cTpPessoa	 := ""	As Character
	Local cNumTitBen := ''  As Character

	If Len(Alltrim(SA1->A1_CGC)) < 14
		cTpPessoa := "F"
	Else
		cTpPessoa := "J"
	Endif

	// Declara Bloco 01
	jJsonItau['data']																:= JsonObject():New()
	// Declara Bloco 03
	jJsonItau['data']['beneficiario']												:= JsonObject():New()
	// Declara Bloco 04
	jJsonItau['data']['dado_boleto']												:= JsonObject():New()
	// Declara Bloco 05
	jJsonItau['data']['dado_boleto']['pagador'] 									:= JsonObject():New()
	jJsonItau['data']['dado_boleto']['pagador']['pessoa'] 							:= JsonObject():New()
	jJsonItau['data']['dado_boleto']['pagador']['pessoa']['tipo_pessoa'] 			:= JsonObject():New()
	jJsonItau['data']['dado_boleto']['pagador']['endereco'] 						:= JsonObject():New()

	// Declara Bloco 06
	// https://jiraproducao.totvs.com.br/browse/DSTFC-4055
	// "Sacador Avalista (atual Beneficiário Final): figura que receberá o crédito referente ao 
	// pagamento do boleto devido a prestação de serviço ou venda de produto ao pagador. 
	// O preenchimento do presente campo, no boleto,  apenas deve ser realizado nos casos em 
	// que o Beneficiário figura como Terceiro Habilitador"
	// Seguindo essa regra estamos desativando o envio dessa tag (daniel.muniz 03/01/2023)
	// Para mais informações verificar a documentação https://devportal.itau.com.br/nossas-apis/cash-management-ext-v2

	// jJsonItau['data']['dado_boleto']['sacador_avalista'] 							:= JsonObject():New()
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['pessoa'] 					:= JsonObject():New()
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['pessoa']['tipo_pessoa']	:= JsonObject():New()
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['endereco'] 				:= JsonObject():New()
	// Declara Bloco 07
	jJsonItau['data']['dado_boleto']['codigo_tipo_vencimento'] 						:= JsonObject():New()
	// Declara Bloco 08
	jJsonItau['data']['dado_boleto']['valor_total_titulo'] 							:= JsonObject():New()
	// Declara Bloco 10
	jJsonItau['data']['dado_boleto']['codigo_especie'] 								:= JsonObject():New()
	// Declara Bloco 11
	jJsonItau['data']['dado_boleto']['codigo_aceite'] 								:= JsonObject():New()
	// Declara Bloco 12
	jJsonItau['data']['dado_boleto']['lista_mensagem_cobranca'] 					:= JsonObject():New()
	// Declara Bloco 13
	jJsonItau['data']['dado_boleto']['desconto_expresso'] 							:= JsonObject():New()

	// Alimenta Bloco 02

	cEtapaProc := Iif(jCredentials['environment'] == '1', 'efetivacao', 'validacao')

	cNossoNum	:= StrZero(Val(NossoNum()), 8)

	jJsonItau['data']['etapa_processo_boleto']	:= cEtapaProc

	cAgencia := PadL(Alltrim(totvs.protheus.backoffice.ngf.bills.functions.getAgenciaSEE()), 4, "0" )
	cConta 	 := PadL(Alltrim(totvs.protheus.backoffice.ngf.bills.functions.getContaSEE()), 7, "0" )
	cDvConta := totvs.protheus.backoffice.ngf.bills.functions.getContaAdvSEE()

	jJsonItau['data']['codigo_operador'] := cAgencia + cConta

	// Alimenta Bloco 03
	jJsonItau['data']['beneficiario']['id_beneficiario'] := cAgencia + cConta + cDvConta

	// Alimenta Bloco 04
	jJsonItau['data']['dado_boleto']['descricao_instrumento_cobranca'] := 'boleto' // Preencher com 'boleto'

	jJsonItau['data']['dado_boleto']['forma_envio'] := 'impressao'
	jJsonItau['data']['dado_boleto']['tipo_boleto'] := 'a vista' //	'a vista' 'proposta'

	// Alimenta Bloco 05
	jJsonItau['data']['dado_boleto']['pagador']['pessoa']['nome_pessoa'] := SubStr(Alltrim(&(jLayout['pagador']['nome_pagador'])),1,50)

	jJsonItau['data']['dado_boleto']['pagador']['pessoa']['tipo_pessoa']['codigo_tipo_pessoa'] := cTpPessoa

	If cTpPessoa = 'F'
		jJsonItau['data']['dado_boleto']['pagador']['pessoa']['tipo_pessoa']['numero_cadastro_pessoa_fisica'] := Alltrim(SA1->A1_CGC)
	Else
		jJsonItau['data']['dado_boleto']['pagador']['pessoa']['tipo_pessoa']['numero_cadastro_nacional_pessoa_juridica'] := Alltrim(SA1->A1_CGC)
		jJsonItau['data']['dado_boleto']['pagador']['pessoa']['nome_fantasia'] := SubStr(Alltrim(SA1->A1_NREDUZ),1,50)
	Endif

	jJsonItau['data']['dado_boleto']['pagador']['endereco']['nome_logradouro']	:= SubStr(Alltrim(&(jLayout['pagador']['logradouro_pagador'])),1,45)
	jJsonItau['data']['dado_boleto']['pagador']['endereco']['nome_bairro'] 		:= SubStr(Alltrim(&(jLayout['pagador']['bairro_pagador'])),1,15)
	jJsonItau['data']['dado_boleto']['pagador']['endereco']['nome_cidade'] 		:= SubStr(Alltrim(&(jLayout['pagador']['cidade_pagador'])),1,20)
	jJsonItau['data']['dado_boleto']['pagador']['endereco']['sigla_UF'] 		:= Alltrim(&(jLayout['pagador']['uf_pagador']))
	jJsonItau['data']['dado_boleto']['pagador']['endereco']['numero_CEP'] 		:= Alltrim(&(jLayout['pagador']['cep_pagador']))

	// Alimenta Bloco 06
	// https://jiraproducao.totvs.com.br/browse/DSTFC-4055
	// "Sacador Avalista (atual Beneficiário Final): figura que receberá o crédito referente ao 
	// pagamento do boleto devido a prestação de serviço ou venda de produto ao pagador. 
	// O preenchimento do presente campo, no boleto,  apenas deve ser realizado nos casos em 
	// que o Beneficiário figura como Terceiro Habilitador"
	// Seguindo essa regra estamos desativando o envio dessa tag (daniel.muniz 03/01/2023)
	// Para mais informações verificar a documentação https://devportal.itau.com.br/nossas-apis/cash-management-ext-v2

	// jJsonItau['data']['dado_boleto']['sacador_avalista']['pessoa']['nome_pessoa'] := SubStr(Alltrim(&(jLayout['pagador']['nome_pagador'])),1,50)
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['pessoa']['nome_fantasia'] := SubStr(Alltrim(SA1->A1_NREDUZ),1,50)

	// jJsonItau['data']['dado_boleto']['sacador_avalista']['pessoa']['tipo_pessoa']['codigo_tipo_pessoa'] := cTpPessoa

	// If cTpPessoa = 'F'
	// 	jJsonItau['data']['dado_boleto']['sacador_avalista']['pessoa']['tipo_pessoa']['numero_cadastro_pessoa_fisica'] := Alltrim(SA1->A1_CGC)
	// Else
	// 	jJsonItau['data']['dado_boleto']['sacador_avalista']['pessoa']['tipo_pessoa']['numero_cadastro_nacional_pessoa_juridica'] := Alltrim(SA1->A1_CGC)
	// Endif

	// jJsonItau['data']['dado_boleto']['sacador_avalista']['endereco']['nome_logradouro']	:= SubStr(Alltrim(&(jLayout['pagador']['logradouro_pagador'])),1,45)
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['endereco']['nome_bairro'] 	:= SubStr(Alltrim(&(jLayout['pagador']['bairro_pagador'])),1,15)
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['endereco']['nome_cidade'] 	:= SubStr(Alltrim(&(jLayout['pagador']['cidade_pagador'])),1,20)
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['endereco']['sigla_UF'] 		:= Alltrim(&(jLayout['pagador']['uf_pagador']))
	// jJsonItau['data']['dado_boleto']['sacador_avalista']['endereco']['numero_CEP'] 		:= Alltrim(&(jLayout['pagador']['cep_pagador']))

	// Alimenta Bloco 07
	jJsonItau['data']['dado_boleto']['codigo_tipo_vencimento'] := 3
	jJsonItau['data']['dado_boleto']['codigo_carteira'] := "109"

	// Alimenta Bloco 08
	jJsonItau['data']['dado_boleto']['valor_total_titulo'] := PadL(__nVlrTotTitItau * 100, 17, "0")

	// Alimenta Bloco 09

	If SEE->EE_DIASREC > 0
		dDtLimPag := DtoS(&(jLayout['data_limite_pagamento']) + SEE->EE_DIASREC)
		dDtLimPag := SubStr(dDtLimPag, 1,4) + "-" + SubStr(dDtLimPag, 5,2) + "-" + SubStr(dDtLimPag, 7,2)
	Else
		dDtLimPag := DtoS(&(jLayout['data_limite_pagamento']))
		dDtLimPag := SubStr(dDtLimPag, 1,4) + "-" + SubStr(dDtLimPag, 5,2) + "-" + SubStr(dDtLimPag, 7,2)
	Endif

	cDataAux := DtoS(&(jLayout['data_limite_pagamento']))
	cDataAux := SubStr(cDataAux, 1,4) + "-" + SubStr(cDataAux, 5,2) + "-" + SubStr(cDataAux, 7,2)

	aDadosAuxM := {}

	Aadd(aDadosAuxM, {'mensagem' : SubStr(Iif(Empty(&(SEE->EE_FORMEN1)), '', &(SEE->EE_FORMEN1)), 1, 165) })
	Aadd(aDadosAuxM, {'mensagem' : SubStr(Iif(Empty(&(SEE->EE_FORMEN2)), '', &(SEE->EE_FORMEN2)), 1, 165) })
	Aadd(aDadosAuxM, {'mensagem' : SubStr(Iif(Empty(&(SEE->EE_FOREXT1)), '', &(SEE->EE_FOREXT1)), 1, 165) })

	jJsonItau['data']['dado_boleto']['lista_mensagem_cobranca'] := aDadosAuxM

	If jLayout:hasProperty('numTitBenef') .And. !Empty(jLayout['numTitBenef'])
        cNumTitBen := Upper(&(jLayout['numTitBenef']))
    Else
        cNumTitBen := SE1->E1_NUM
    EndIf

	aDadosAux := {}
	Aadd(aDadosAux, {;
	'data_vencimento' : cDataAux,;
	'valor_titulo' : PadL(__nVlrTotTitItau * 100, 17, "0"),;	
	'texto_uso_beneficiario' : SE1->E1_IDCNAB,;
	'data_limite_pagamento' : dDtLimPag,;
	'numero_nosso_numero' : cNossoNum,;
	'texto_seu_numero' : cNumTitBen,;
	'lista_mensagens_cobranca' : aDadosAuxM;
		})

	jJsonItau['data']['dado_boleto']['dados_individuais_boleto'] := aDadosAux

	jJsonItau['data']['dado_boleto']['texto_seu_numero'] := cNumTitBen

	// Alimenta Bloco 10
	jJsonItau['data']['dado_boleto']['codigo_especie'] := PadL(AllTrim(SEA->EA_ESPECIE), 2, "0")

	//Alimenta bloco 11
	jJsonItau['data']['dado_boleto']['codigo_aceite'] := "N"
	if jLayout:hasProperty('aceite')
		jJsonItau['data']['dado_boleto']['codigo_aceite'] := iIf(jLayout['aceite'] == 1 , "S", "N")
	Endif

	// MULTA
	cVarAux := ''
	cVarAux := "0" + cValToChar(jLayout['multa']['codigo_tipo_multa'])

	If cVarAux == '01'
		If !Empty(__nVlrMultaItau)
			jJsonItau['data']['dado_boleto']['multa'] := JsonObject():New()
			jJsonItau['data']['dado_boleto']['multa']['codigo_tipo_multa'] := cVarAux
			jJsonItau['data']['dado_boleto']['multa']['valor_multa'] := PadL(__nVlrMultaItau * 100, 17, "0")

			cDataAux := DtoS(&(jLayout['multa']['data_multa']) + __nDiasMultaItau)
			cDataAux := SubStr(cDataAux, 1,4) + "-" + SubStr(cDataAux, 5,2) + "-" + SubStr(cDataAux, 7,2)
			jJsonItau['data']['dado_boleto']['multa']['data_multa']  := cDataAux
		EndIf
	ElseIf cVarAux == '02'
		If !Empty(__nPercMultaItau)
			jJsonItau['data']['dado_boleto']['multa'] := JsonObject():New()
			jJsonItau['data']['dado_boleto']['multa']['codigo_tipo_multa'] := cVarAux
			jJsonItau['data']['dado_boleto']['multa']['percentual_multa'] := PadL(__nPercMultaItau * 100000, 12, "0")

			cDataAux := DtoS(&(jLayout['multa']['data_multa']) + __nDiasMultaItau)
			cDataAux := SubStr(cDataAux, 1,4) + "-" + SubStr(cDataAux, 5,2) + "-" + SubStr(cDataAux, 7,2)
			jJsonItau['data']['dado_boleto']['multa']['data_multa'] := cDataAux
		EndIf
	Endif

	// Alimenta Bloco 12
	aDadosAux := {}

	// Alimenta Bloco 13
	jJsonItau['data']['dado_boleto']['desconto_expresso'] := 'false'

	// Alimenta Bloco 14
	If !Empty(SEE->EE_DIASPRT) .And. Val(SEE->EE_DIASPRT) > 0
		// Declara Bloco 14
		jJsonItau['data']['dado_boleto']['protesto'] := JsonObject():New()
		jJsonItau['data']['dado_boleto']['protesto']['protesto'] := 1
		jJsonItau['data']['dado_boleto']['protesto']['quantidade_dias_protesto'] := PadL(Alltrim(SEE->EE_DIASPRT), 2, "0")
		jJsonItau['data']['dado_boleto']['protesto']['negativacao'] := 5
	Endif

	// DESCONTO
	If jLayout['desconto']['codigo_tipo_desconto'] != 0
		aDadosAux := {}

		If jLayout['desconto']['codigo_tipo_desconto'] == 1
			If !Empty(__nVlrDesconItau)
				// '01' - Quando o desconto for um valor fixo se o título for pago até a data informada (data_desconto)
				jJsonItau['data']['dado_boleto']['desconto'] := JsonObject():New()
				jJsonItau['data']['dado_boleto']['desconto']['codigo_tipo_desconto'] := '01'

				cDataAux := DtoS(&(jLayout['desconto']['data_desconto']))
				cDataAux := SubStr(cDataAux, 1,4) + "-" + SubStr(cDataAux, 5,2) + "-" + SubStr(cDataAux, 7,2)
				
				Aadd(aDadosAux, {;
					'valor_desconto' : PadL(__nVlrDesconItau * 100, 17, "0"),;
					'data_desconto' : cDataAux;
				})
				jJsonItau['data']['dado_boleto']['desconto']['descontos'] := aDadosAux
			EndIf
		ElseIf jLayout['desconto']['codigo_tipo_desconto'] == 2
			If !Empty(__nPercDescoItau)
				// '02' - Quando o desconto for um percentual do valor do título e for pago até a data informada (data_desconto) 
				jJsonItau['data']['dado_boleto']['desconto'] := JsonObject():New()
				jJsonItau['data']['dado_boleto']['desconto']['codigo_tipo_desconto'] := '02'

				cDataAux := DtoS(&(jLayout['desconto']['data_desconto']))
				cDataAux := SubStr(cDataAux, 1,4) + "-" + SubStr(cDataAux, 5,2) + "-" + SubStr(cDataAux, 7,2)

				Aadd(aDadosAux, {;
					'percentual_desconto' : PadL(__nPercDescoItau * 100000, 12, "0"),;
					'data_desconto' : cDataAux;
				})
				jJsonItau['data']['dado_boleto']['desconto']['descontos'] := aDadosAux
			EndIf
		Endif
	Endif

	// JUROS
	If jLayout['juros']['codigo_tipo_juros'] == 1 // Por valor
		If !Empty(__nVlrJurosItau) .And. !Empty(__nDiasJurosItau)
			jJsonItau['data']['dado_boleto']['juros'] := JsonObject():New()
			jJsonItau['data']['dado_boleto']['juros']['codigo_tipo_juros'] := "93" // Valor diário
			jJsonItau['data']['dado_boleto']['juros']['valor_juros'] := PadL(__nVlrJurosItau * 100, 17, "0")

			cDataAux := DtoS(&(jLayout['juros']['data_juros']) + __nDiasJurosItau)
			cDataAux := SubStr(cDataAux, 1,4) + "-" + SubStr(cDataAux, 5,2) + "-" + SubStr(cDataAux, 7,2)
			jJsonItau['data']['dado_boleto']['juros']['data_juros'] := cDataAux
		EndIf
	ElseIf jLayout['juros']['codigo_tipo_juros'] == 2 // Por percentual
		If !Empty(__nPercJurosItau) .Or. !Empty(__nDiasJurosItau)
			jJsonItau['data']['dado_boleto']['juros'] := JsonObject():New()
			jJsonItau['data']['dado_boleto']['juros']['codigo_tipo_juros'] := "90" // Percentual mensal
			jJsonItau['data']['dado_boleto']['juros']['percentual_juros'] := PadL(__nPercJurosItau * 100000, 12, "0")

			cDataAux := DtoS(&(jLayout['juros']['data_juros']) + __nDiasJurosItau)
			cDataAux := SubStr(cDataAux, 1,4) + "-" + SubStr(cDataAux, 5,2) + "-" + SubStr(cDataAux, 7,2)
			jJsonItau['data']['dado_boleto']['juros']['data_juros'] := cDataAux
		EndIf
	Endif

	FreeObj(jLayout)
	jLayout := jJsonItau

Return

/*/{Protheus.doc} frtMailItau
    Carrega as informações no objeto do e-mail
    @type function
    @version 12.1.33
    @author francisco.oliveira
    @since 03/02/2022
    @param oAPIMSG, Json, boleto transmitido ao banco
    @return Object, objeto com as informações do layout do boleto
/*/

Function frtMailItau(oAPIMSG As JSON)
	Local oDataEMail    As Object
	If oAPIMSG['version'] == 'v2'
		oDataEMail := frtMail341V2(oAPIMSG)
	Else
		oDataEMail := frtMail341V1(oAPIMSG)
	EndIf
Return oDataEMail

/*/{Protheus.doc} frtMail341V1
    Carrega as informações no objeto do e-mail Itau V1
    @type function
    @version 12.1.33
    @author francisco.oliveira
    @since 03/02/2022
    @param oAPIMSG, Json, boleto transmitido ao banco
    @return Object, objeto com as informações do layout do boleto
/*/
Function frtMail341V1(oAPIMSG As JSON)

	Local oDataEMail    As Object
	Local aFilAtu       := {} As Array
	Local cMarkCNPJ     := '' As Character
	Local cMaskCGC      := '' As Character
	Local cBanco        := '' As Character
	Local cCPFCNPJ      := '' As Character
	Local nCount		:= 0  As Numeric

	cMarkCNPJ := '@R 99.999.999/9999-99'
	cBanco    := "341"

    If oAPIMSG:Hasproperty('beneficiarioFilial')
        aFilAtu   := FWArrFilAtu(cEmpAnt, oAPIMSG['beneficiarioFilial'])
    Else
        aFilAtu   := FWArrFilAtu()        
    EndIf

	oDataEMail := JsonObject():new()
	oDataEMail['pagador']       := JsonObject():new()
	oDataEMail['beneficiario']  := JsonObject():new()
	oDataEMail['boleto']        := JsonObject():new()
	oDataEMail['banco']         := cBanco

	oDataEMail['pagador']['nome']      := oAPIMSG['boleto', 'pagador', 'nome_pagador']
    cCPFCNPJ :=  cValToChar(Val(oAPIMSG['boleto', 'pagador', 'cpf_cnpj_pagador']))
    If Len(cCPFCNPJ) <= 11
        cMaskCGC := '@R 999.999.999-99'
    Else
        cMaskCGC := cMarkCNPJ
    EndIf
	
    oDataEMail['pagador']['cnpj/cpf']  := AllTrim(Transform(cCPFCNPJ, cMaskCGC)) // MANAR FORMATADO    
	If !Empty(oAPIMSG['boleto', 'pagador', 'logradouro_pagador'])
		oDataEMail['pagador']['logradouro']  :=  oAPIMSG['boleto', 'pagador', 'logradouro_pagador']
	Else
		oDataEMail['pagador']['logradouro']  :=  ""
	EndIf
	If !Empty(oAPIMSG['boleto', 'pagador', 'complemento_pagador'])
    	oDataEMail['pagador']['logradouro']  +=  ' - ' + oAPIMSG['boleto', 'pagador', 'complemento_pagador']
	EndIf
	If !Empty(oAPIMSG['boleto', 'pagador', 'bairro_pagador'])
		oDataEMail['pagador']['bairro']  	:=  oAPIMSG['boleto', 'pagador', 'bairro_pagador']
	Else
		oDataEMail['pagador']['bairro']  	:=  ''
	EndIf
	If !Empty(oAPIMSG['boleto', 'pagador', 'cep_pagador'])
    	oDataEMail['pagador']['endereco']  :=  AllTrim(Transform(oAPIMSG['boleto', 'pagador', 'cep_pagador'], "@R 99999-999"))
	Else
		oDataEMail['pagador']['endereco']  :=  ''
	EndIf
	If !Empty(oAPIMSG['boleto', 'pagador', 'cidade_pagador'])
    	oDataEMail['pagador']['endereco']  +=  ' ' + oAPIMSG['boleto', 'pagador', 'cidade_pagador']
	EndIf
	If !Empty(oAPIMSG['boleto', 'pagador', 'uf_pagador'])	
    	oDataEMail['pagador']['endereco']  +=  ' - ' + oAPIMSG['boleto', 'pagador', 'uf_pagador']
	EndIf

    oDataEMail['beneficiario']['banco']     := oAPIMSG['response', 'beneficiario', 'codigo_banco_beneficiario']
    oDataEMail['beneficiario']['banco']     += '-' + oAPIMSG['response', 'beneficiario', 'digito_verificador_banco_beneficiario']
    oDataEMail['beneficiario']['agencia']   := oAPIMSG['response', 'beneficiario', 'agencia_beneficiario']
    oDataEMail['beneficiario']['agencia']   += '/' + oAPIMSG['response', 'beneficiario', 'conta_beneficiario']
    oDataEMail['beneficiario']['agencia']   += '-' + oAPIMSG['response', 'beneficiario', 'digito_verificador_conta_beneficiario']
    oDataEMail['beneficiario']['cnpj']      := AllTrim(Transform(aFilAtu[18], cMarkCNPJ))
    oDataEMail['beneficiario']['nome']      := AllTrim(aFilAtu[17])
	If !Empty(oAPIMSG['response', 'beneficiario', 'logradouro_beneficiario'])
    	oDataEMail['beneficiario']['logradouro']  := oAPIMSG['response', 'beneficiario', 'logradouro_beneficiario']
	Else
		oDataEMail['beneficiario']['logradouro']  := ''
	EndIf
	If !Empty(oAPIMSG['response', 'beneficiario', 'complemento_beneficiario'])
    	oDataEMail['beneficiario']['logradouro']  += ' - ' + oAPIMSG['response', 'beneficiario', 'complemento_beneficiario']
	EndIf
	If !Empty(oAPIMSG['response', 'beneficiario', 'bairro_beneficiario'])
    	oDataEMail['beneficiario']['bairro']  	:= oAPIMSG['response', 'beneficiario', 'bairro_beneficiario']
	Else
		oDataEMail['beneficiario']['bairro']  	:= ''
	EndIf
	If !Empty(oAPIMSG['response', 'beneficiario', 'cep_beneficiario'])
		oDataEMail['beneficiario']['endereco']  := AllTrim(Transform(oAPIMSG['response', 'beneficiario', 'cep_beneficiario'], "@R 99999-999"))
	Else
		oDataEMail['beneficiario']['endereco']  := ''
	EndIf
	If !Empty(oAPIMSG['response', 'beneficiario', 'cidade_beneficiario'])
    	oDataEMail['beneficiario']['endereco']  += ' ' + oAPIMSG['response', 'beneficiario', 'cidade_beneficiario']
	EndIf
	If !Empty(oAPIMSG['response', 'beneficiario', 'uf_beneficiario'])
    	oDataEMail['beneficiario']['endereco']  += ' - ' + oAPIMSG['response', 'beneficiario', 'uf_beneficiario']
	EndIf
    

    oDataEMail['boleto']['nossoNumero']     := oAPIMSG['boleto', 'tipo_carteira_titulo']
    oDataEMail['boleto']['nossoNumero']     += '/' + AllTrim(Transform(oAPIMSG['response', 'nosso_numero'], "@R 99999999-9"))
    oDataEMail['boleto']['numeroDocumento'] := oAPIMSG['boleto', 'seu_numero']
    oDataEMail['boleto']['linhaDigitavel']  := AllTrim(Transform(oAPIMSG['response', 'numero_linha_digitavel'], "@R 99999.99999 99999.999999 99999.999999 9 99999999999999"))
    oDataEMail['boleto']['codigoBarras']    := oAPIMSG['response', 'codigo_barras']

    oDataEMail['boleto']['localPagamento']  := StrTokArr2(oAPIMSG['response', 'local_pagamento'], ". ")
    oDataEMail['boleto']['usoBanco']        := oAPIMSG['response', 'uso_banco']
    oDataEMail['boleto']['vencimento']      := dateFormat(StoD(StrTran(oAPIMSG['boleto', 'data_vencimento'], '-', '')), 'dd/mm/yyyy')
    oDataEMail['boleto']['emissao']         := dateFormat(StoD(StrTran(oAPIMSG['boleto', 'data_emissao'], '-', '')), 'dd/mm/yyyy')
    oDataEMail['boleto']['processamento']   := dateFormat(StoD(StrTran(oAPIMSG['response', 'data_processamento'], '-', '')), 'dd/mm/yyyy')
    oDataEMail['boleto']['especie']         := oAPIMSG['response', 'moeda', 'sigla_moeda']
    oDataEMail['boleto']['especieDoc']      := AllTrim(oAPIMSG['especie'])
    oDataEMail['boleto']['aceite']          := oAPIMSG['boleto', 'titulo_aceite']
    oDataEMail['boleto']['carteira']        := oAPIMSG['boleto', 'tipo_carteira_titulo']
    oDataEMail['boleto']['mensagem']        := {}

    oDataEMail['boleto']['msgJuros'] := feeMsg(oAPIMSG['boleto']['juros'], cBanco)
    oDataEMail['boleto']['msgDesconto'] := discountMsg(oAPIMSG['boleto']['grupo_desconto'], cBanco)
    oDataEmail['boleto']['msgMulta'] := fineMsg(oAPIMSG['boleto']['multa'], cBanco)

    For nCount := 1 to Len(oAPIMSG['response', 'lista_texto_informacao_cliente_beneficiario'])
        aAdd(oDataEMail['boleto']['mensagem'], oAPIMSG['response', 'lista_texto_informacao_cliente_beneficiario'][nCount]['texto_informacao_cliente_beneficiario'])
    Next nCount

    oDataEMail['boleto']['valor']        := AllTrim(Transform(oAPIMSG['response', 'valor_titulo'], "@E 9,999,999,999,999.99"))
    oDataEMail['boleto']['desconto']     := ""
    oDataEMail['boleto']['juroMulta']    := ""
    oDataEMail['boleto']['totalCobrado'] := ""

	oDataEMail['boleto']['instr_msg1']   := ""
	oDataEMail['boleto']['instr_msg2']   := ""
	oDataEMail['boleto']['instr_msg3']   := ""

	FwFreeArray(aFilAtu)

Return oDataEMail

/*/{Protheus.doc} frtMail341V2
    Carrega as informações no objeto do e-mail
    @type function
    @version 12.1.33
    @author francisco.oliveira
    @since 03/02/2022
    @param oAPIMSG, Json, boleto transmitido ao banco
    @return Object, objeto com as informações do layout do boleto
/*/
Function frtMail341V2(oAPIMSG As JSON)

	Local oDataEMail As Object
	Local aFilAtu    := {} As Array
	Local aLocalPag	 := {} As Array
	Local cMarkCNPJ  := '' As Character
	Local cBanco     := '' As Character
	Local cAgencia   := '' As Character
	Local cConta     := '' As Character
	Local cCarteira  := '' As Character
	Local cNossoNum  := '' As Character
	Local cCPFCNPJ   := '' As Character
	Local nCount	 := 0  As Numeric
	Local lPessoaF	 := .T. As Logical

	cMarkCNPJ := '@R 99.999.999/9999-99'
    If oAPIMSG:Hasproperty('beneficiarioFilial')
        aFilAtu   := FWArrFilAtu(cEmpAnt, oAPIMSG['beneficiarioFilial'])
    Else
        aFilAtu   := FWArrFilAtu()        
    EndIf	

	cBanco := oAPIMSG['banco']
	oDataEMail := JsonObject():new()
	oDataEMail['pagador']       := JsonObject():new()
	oDataEMail['beneficiario']  := JsonObject():new()
	oDataEMail['boleto']        := JsonObject():new()
	oDataEMail['banco']         := cBanco

	oDataEMail['pagador']['nome']	:= oAPIMSG['response']['dado_boleto']['pagador']['pessoa']['nome_pessoa']

	lPessoaF := oAPIMSG['response']['dado_boleto']['pagador']['pessoa']['tipo_pessoa']['codigo_tipo_pessoa'] == "F"
	If lPessoaF
		cCPFCNPJ := printCpfCnpj(oAPIMSG['response']['dado_boleto']['pagador']['pessoa']['tipo_pessoa']['numero_cadastro_pessoa_fisica'], 'CPF')
	Else
		cCPFCNPJ := printCpfCnpj(oAPIMSG['response']['dado_boleto']['pagador']['pessoa']['tipo_pessoa']['numero_cadastro_nacional_pessoa_juridica'], 'CNPJ')
	EndIf

    oDataEMail['pagador']['cnpj/cpf']  := cCPFCNPJ
	If !Empty(oAPIMSG['response']['dado_boleto']['pagador']['endereco']['nome_logradouro'])
    	oDataEMail['pagador']['logradouro']  := oAPIMSG['response']['dado_boleto']['pagador']['endereco']['nome_logradouro']
	Else
		oDataEMail['pagador']['logradouro']  := ''
	EndIf
	If !Empty(oAPIMSG['response']['dado_boleto']['pagador']['endereco']['nome_bairro'])		
		oDataEMail['pagador']['bairro'] 	 := oAPIMSG['response']['dado_boleto']['pagador']['endereco']['nome_bairro']
	Else
		oDataEMail['pagador']['bairro'] 	 := ''
	EndIf
	If !Empty(oAPIMSG['response']['dado_boleto']['pagador']['endereco']['numero_CEP'])
		oDataEMail['pagador']['endereco']  	 := AllTrim(Transform(oAPIMSG['response']['dado_boleto']['pagador']['endereco']['numero_CEP'], "@R 99999-999"))
	Else
		oDataEMail['pagador']['endereco']  	 := ''
	EndIf
	If !Empty(oAPIMSG['response']['dado_boleto']['pagador']['endereco']['nome_cidade'])
		oDataEMail['pagador']['endereco'] 	 += ' ' + oAPIMSG['response']['dado_boleto']['pagador']['endereco']['nome_cidade']
	EndIf
	If !Empty(oAPIMSG['response']['dado_boleto']['pagador']['endereco']['sigla_UF'])
		oDataEMail['pagador']['endereco']  	 += ' - ' + oAPIMSG['response']['dado_boleto']['pagador']['endereco']['sigla_UF']
	EndIf
	
	cAgencia 	:= SubStr(oAPIMSG['response']['beneficiario']['id_beneficiario'], 1, 4)
	cConta		:= SubStr(oAPIMSG['response']['beneficiario']['id_beneficiario'], Len(oAPIMSG['response']['beneficiario']['id_beneficiario']) - 5, 5)
	cCarteira 	:= oAPIMSG['response']['dado_boleto']['codigo_carteira']
	cNossoNum	:= oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]['numero_nosso_numero']
	
    oDataEMail['beneficiario']['banco']     := cBanco + "-7"
    oDataEMail['beneficiario']['agencia']   := cAgencia
    oDataEMail['beneficiario']['agencia']   += '/' + cConta
    oDataEMail['beneficiario']['agencia']   += '-' + SubStr(oAPIMSG['response']['beneficiario']['id_beneficiario'], Len(oAPIMSG['response']['beneficiario']['id_beneficiario']), 1)

    oDataEMail['beneficiario']['cnpj']      := AllTrim(Transform(aFilAtu[18], cMarkCNPJ))
    oDataEMail['beneficiario']['nome']      := AllTrim(aFilAtu[17])

	If !Empty(oAPIMSG['response']['beneficiario']['endereco']['nome_logradouro'])
    	oDataEMail['beneficiario']['logradouro'] 	:= oAPIMSG['response']['beneficiario']['endereco']['nome_logradouro']
	Else
		oDataEMail['beneficiario']['logradouro'] 	:= ''
	EndIf
	If !Empty(oAPIMSG['response']['beneficiario']['endereco']['nome_bairro'])
    	oDataEMail['beneficiario']['bairro']  		:= oAPIMSG['response']['beneficiario']['endereco']['nome_bairro']
	Else
		oDataEMail['beneficiario']['bairro']  		:= ''
	EndIf
	If !Empty(oAPIMSG['response']['beneficiario']['endereco']['numero_CEP'])
		oDataEMail['beneficiario']['endereco']  	:= AllTrim(Transform(oAPIMSG['response']['beneficiario']['endereco']['numero_CEP'], "@R 99999-999"))
	Else
		oDataEMail['beneficiario']['endereco']  	:= ''
	EndIf
	If !Empty(oAPIMSG['response']['beneficiario']['endereco']['nome_cidade'])
    	oDataEMail['beneficiario']['endereco']  	+= ' ' + oAPIMSG['response']['beneficiario']['endereco']['nome_cidade']
	EndIf
	If !Empty(oAPIMSG['response']['beneficiario']['endereco']['sigla_UF'])
    	oDataEMail['beneficiario']['endereco']  	+= ' - ' + oAPIMSG['response']['beneficiario']['endereco']['sigla_UF']
	EndIf

    oDataEMail['boleto']['nossoNumero']     := cCarteira
    oDataEMail['boleto']['nossoNumero']     += '/' + AllTrim(Transform(cNossoNum, "@R 99999999"))
	oDataEMail['boleto']['nossoNumero']     += '-' + getDVItau(cAgencia, cConta, cCarteira, cNossoNum)

    oDataEMail['boleto']['numeroDocumento'] := oAPIMSG['boleto']['data']['dado_boleto']['texto_seu_numero']
    
	oDataEMail['boleto']['linhaDigitavel']  := AllTrim(Transform(oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]['numero_linha_digitavel'], "@R 99999.99999 99999.999999 99999.999999 9 99999999999999"))
    oDataEMail['boleto']['codigoBarras']    := oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]['codigo_barras']

	Aadd(aLocalPag, STR0001) // Pagável em qualquer banco até o vencimento

    oDataEMail['boleto']['localPagamento']  := aLocalPag
    oDataEMail['boleto']['usoBanco']        := ""
    oDataEMail['boleto']['vencimento']      := dateFormat(StoD(StrTran(oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]['data_vencimento'], '-', '')), 'dd/mm/yyyy')
    oDataEMail['boleto']['emissao']         := dateFormat(StoD(StrTran(oAPIMSG['response']['dado_boleto']['data_emissao'], '-', '')), 'dd/mm/yyyy')
    oDataEMail['boleto']['processamento']   := dateFormat(StoD(StrTran(oAPIMSG['response']['dado_boleto']['data_emissao'], '-', '')), 'dd/mm/yyyy')
    oDataEMail['boleto']['especie']         := "R$"
    oDataEMail['boleto']['especieDoc']      := AllTrim(oAPIMSG['especie'])
    oDataEMail['boleto']['aceite']          := iIF(oAPIMSG['boleto']['data']['dado_boleto']:hasProperty('codigo_aceite') , oAPIMSG['boleto']['data']['dado_boleto']['codigo_aceite'], "N")
    oDataEMail['boleto']['carteira']        := cCarteira
    oDataEMail['boleto']['mensagem']        := {}

	// MENSAGEM JUROS, MULTA E DESCONTO
	oDataEMail['boleto']['msgJuros']  := ""
	oDataEMail['boleto']['msgDesconto'] := ""
	oDataEmail['boleto']['msgMulta'] := ""

	If oAPIMSG['boleto']['data']['dado_boleto']:hasProperty('juros') .And. Valtype(oAPIMSG['boleto']['data']['dado_boleto']['juros']) == "J"
    	oDataEMail['boleto']['msgJuros'] := feeMsg(oAPIMSG['boleto']['data']['dado_boleto']['juros'], cBanco, oAPIMSG['version'])
	EndIf

	If oAPIMSG['boleto']['data']['dado_boleto']:hasProperty('desconto') .And. Valtype(oAPIMSG['boleto']['data']['dado_boleto']['desconto']) == "J"
    	oDataEMail['boleto']['msgDesconto'] := discountMsg(oAPIMSG['boleto']['data']['dado_boleto']['desconto'], cBanco, oAPIMSG['version'])
	EndIf

	If oAPIMSG['boleto']['data']['dado_boleto']:hasProperty('multa') .And. Valtype(oAPIMSG['boleto']['data']['dado_boleto']['multa']) == "J"
   		oDataEmail['boleto']['msgMulta'] := fineMsg(oAPIMSG['boleto']['data']['dado_boleto']['multa'], cBanco, oAPIMSG['version'])
	EndIf

	// MENSAGEM COBRANÇA
	If oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]:hasProperty('lista_mensagens_cobranca')
		For nCount := 1 to Len(oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]['lista_mensagens_cobranca'])
			aAdd(oDataEMail['boleto']['mensagem'], oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]['lista_mensagens_cobranca'][nCount]['mensagem'])
		Next nCount
	Endif

	For nCount := 1 to Len(oAPIMSG['response']['dado_boleto']['lista_mensagem_cobranca'])
		oDataEMail['boleto']['instr_msg'+CValToChar(nCount)] := oAPIMSG['response']['dado_boleto']['lista_mensagem_cobranca'][nCount]['mensagem']
	Next nCount	

    oDataEMail['boleto']['valor']        := AllTrim(Transform(Val(oAPIMSG['response']['dado_boleto']['dados_individuais_boleto'][1]['valor_titulo']) / 100, "@E 9,999,999,999,999.99"))
    oDataEMail['boleto']['desconto']     := ""
    oDataEMail['boleto']['juroMulta']    := ""
    oDataEMail['boleto']['totalCobrado'] := ""
	
	If oAPIMSG['response']:hasProperty('dados_qrcode') .AND. oAPIMSG['response']['dados_qrcode']:hasProperty('emv')
		oDataEMail['boleto']['qrCode'] := oAPIMSG['response']['dados_qrcode']['emv']
	Else
		oDataEMail['boleto']['qrCode'] := ''
	EndIf

	FwFreeArray(aFilAtu)

Return oDataEmail

/*/{Protheus.doc} getDVItau
	Calcular do Digito verificador para o nosso número do Banco Itau
	@type function
	@version 12.1.33
	@author daniel.muniz
	@since 01/06/2021
	@return character, Digito Verificador
/*/
Static Function getDVItau(cAgencia As Character, cConta As Character, cCarteira As Character, cNossoNumero As Character) As Character
	Local cDV := "" As Character

	If ((cCarteira $ '126|131|146|150|168') .And. !Empty(cCarteira) .And. !Empty(cNossoNumero))
		cDV := Mod10(cCarteira + cNossoNumero)
	ElseIf (!Empty(cAgencia) .And. !Empty(cConta) .And. !Empty(cCarteira) .And. !Empty(cNossoNumero))
		cDV := Mod10(cAgencia + cConta + cCarteira + cNossoNumero)
	EndIf

Return cDV

/*/{Protheus.doc} mod10
	Calculo para expressão no Mod10
	@type function
	@version 12.1.33
	@author daniel.muniz
	@since 01/06/2021
	@return character, Digito Verificador
/*/
Static Function mod10(cNum as Character) As Character
	Local nFor := 0  As Numeric
	Local nTot := 0  As Numeric
	Local cAux := "" As Character

	For nFor := 1 To Len(cNum)
		cAux := StrZero((If(nFor % 2 == 0, 2, 1) * Val(SubStr(cNum, nFor,1))), 02)
		nTot += Val(Left(cAux, 01)) + Val(Right(cAux, 01))
	Next nFor

	nTot := nTot % 10
	nTot := If(nTot == 0, nTot, 10-nTot)
Return Str(nTot, 1)

/*/{Protheus.doc} efetivacaoItauV2
	Retorna a propriedade solicitada em ambiente de efetivação itau v2

	@type function
	@version 12.1.33
	@author vinicius.prado
	@since 20/05/2021
	@return cReturn, propriedade solicitada
/*/
Function efetivacaoItauV2(cProperty as Character, oResult as Json)
    Local cReturn := '' as Character
    If cProperty == 'codigo_barras' .and. oResult['result']['dado_boleto']['dados_individuais_boleto'][1]:hasProperty('codigo_barras')
        cReturn := oResult['result']['dado_boleto']['dados_individuais_boleto'][1]['codigo_barras']
    ElseIf cProperty == 'numero_linha_digitavel' .and. oResult['result']['dado_boleto']['dados_individuais_boleto'][1]:hasProperty('numero_linha_digitavel')
        cReturn := oResult['result']['dado_boleto']['dados_individuais_boleto'][1]['numero_linha_digitavel']
    EndIf
Return cReturn

/*/{Protheus.doc} checkErrorV2
	Retorna o erro de transmissão formatado Itau v2

	@type function
	@version 12.1.33
	@author vinicius.prado
	@since 20/05/2021
	@return cError, erro de transmissão
/*/
Function checkErrorV2(jResult as Json) as Character
    Local cError := "" as Character

    If ValType(jResult['error']['campos']) == 'A' .and. len(jResult['error']['campos']) > 0
        cError := Iif(ValType(jResult['error']['campos'][1]['mensagem']) == 'C', jResult['error']['campos'][1]['mensagem'], "")
    EndIf
    If Empty(cError) .and. ValType(jResult['error']['mensagem']) == 'C' .and. len(jResult['error']['mensagem']) > 0
        cError := jResult['error']['mensagem']
    EndIf

Return cError

/*/{Protheus.doc} validMacroItau
    Valida o retorno da macro execução para o Itaú
    @type function
    @version 1.0
    @author sidney.silva
    @since 27/01/2023
    @param jLayout As Json, json do layout
    @return logical, se contém erro
/*/
Function validMacroItau(jLayout As Json, cVersion As Character) as Logical
	Local cError := '' As Character
	Local cTipo := '' As Character

	Static __nVlrTotTitItau := 0 As Numeric
	Static __nVlrMultaItau  := 0 As Numeric
	Static __nDiasMultaItau := 0 As Numeric
	Static __nPercMultaItau := 0 As Numeric
	Static __nVlrDesconItau := 0 As Numeric
	Static __nPercDescoItau := 0 As Numeric
	Static __nVlrJurosItau  := 0 As Numeric
	Static __nDiasJurosItau := 0 As Numeric
	Static __nPercJurosItau := 0 As Numeric

	_cErrorLay := ''

	If(cVersion == 'v2')
		cTipo := 'N'
	Else
		cTipo := 'C'
	EndIf

	If (jLayout['juros']:hasProperty('tipo_juros') .Or. jLayout['juros']:hasProperty('codigo_tipo_juros'))
		If (jLayout['juros']['tipo_juros'] == 1) .Or. (jLayout['juros']['codigo_tipo_juros'] == 1)
			__nVlrJurosItau  := validForMacro(jLayout['juros']['valor_juros'], 'valor_juros', @cError, cTipo)
			_cErrorLay += cError + ' '
		ElseIf  (cValToChar(jLayout['juros']['tipo_juros']) $ "2|3|4|7|8|9") .Or. (jLayout['juros']['codigo_tipo_juros'] == 2)
			__nPercJurosItau  := validForMacro(jLayout['juros']['percentual_juros'], 'percentual_juros', @cError, cTipo)
			_cErrorLay += cError + ' '
		EndIf
	EndIf

	If (jLayout['multa']:hasProperty('tipo_multa') .Or. jLayout['multa']:hasProperty('codigo_tipo_multa'))
		If jLayout['multa']['tipo_multa'] == 1 .Or. jLayout['multa']['codigo_tipo_multa'] == 1
			__nVlrMultaItau  := validForMacro(jLayout['multa']['valor_multa'], 'valor_multa', @cError, cTipo)
			_cErrorLay += cError + ' '
		ElseIf jLayout['multa']['tipo_multa'] == 2 .Or. jLayout['multa']['codigo_tipo_multa'] == 2
			__nPercMultaItau := validForMacro(jLayout['multa']['percentual_multa'], 'percentual_multa', @cError, cTipo)
			_cErrorLay += cError + ' '
		EndIf
	EndIf

	If (cVersion == 'v2')

		__nVlrTotTitItau := validForMacro(jLayout['valor_total_titulo'], 'valor_total_titulo', @cError, 'N')
		_cErrorLay += cError + ' '

		__nDiasMultaItau := validForMacro(jLayout['multa']['quantidade_dias_multa'], 'quantidade_dias_multa', @cError, 'N')
		_cErrorLay += cError + ' '

		If jLayout['desconto']:hasProperty('codigo_tipo_desconto') .And. jLayout['desconto']['codigo_tipo_desconto'] == 1
			__nVlrDesconItau := validForMacro(jLayout['desconto']['valor_desconto'], 'valor_desconto', @cError, 'N')
			_cErrorLay += cError + ' '
		Else
			__nPercDescoItau := validForMacro(jLayout['desconto']['percentual_desconto'], 'percentual_desconto', @cError, 'N')
			_cErrorLay += cError + ' '
		EndIf		

		__nDiasJurosItau := validForMacro(jLayout['juros']['quantidade_dias_juros'], 'quantidade_dias_juros', @cError, 'N')
		_cErrorLay += cError + ' '
	ElseIf jLayout['grupo_desconto']:hasProperty('tipo_desconto')
		If jLayout['grupo_desconto']['tipo_desconto'] == 1 .Or. jLayout['grupo_desconto']['tipo_desconto'] == 3 .Or. jLayout['grupo_desconto']['tipo_desconto'] == 4
			__nVlrDesconItau := validForMacro(jLayout['grupo_desconto']['valor_desconto'], 'valor_desconto', @cError, 'C')
			_cErrorLay += cError + ' '
		ElseIf jLayout['grupo_desconto']['tipo_desconto'] == 2 .Or. jLayout['grupo_desconto']['tipo_desconto'] == 5 .Or. jLayout['grupo_desconto']['tipo_desconto'] == 6
			__nPercDescoItau := validForMacro(jLayout['grupo_desconto']['percentual_desconto'], 'percentual_desconto', @cError, 'C')
			_cErrorLay += cError + ' '
		EndIf
	EndIf

Return Empty(Alltrim(_cErrorLay))

/*/{Protheus.doc} isItauV2
	Verifica se o banco esta configurado para o V2
	@type  Function
	@author Vitor Duca
	@since 15/02/2023
	@version 1.0
	@param cFilOrig, Character, FILORIG para ser considerada no xFilial do cadastro de bancos
	@param cBanco, Character, Codigo do banco
	@param cAgencia, Character, Agencia do banco 
	@param cConta, Character, Numero da conta do banco
	@return lRet, Logical, Define se a versão do layout é a V2
/*/
Function isItauV2(cFilOrig As Character, cBanco As Character, cAgencia As Character, cConta As Character) As Logical
	Local lRet		:= .F.			As Logical
	Local jCfgBol  					As Json
	Local aAreaSA6	:= FwGetArea()	As Array
	
	//Parâmetros de entrada.
	Default cFilOrig := cFilAnt
	Default cBanco   := ""
	Default cAgencia := ""
	Default cConta   := ""
	
	SA6->(DbSetOrder(1)) // A6_FILIAL, A6_COD, A6_AGENCIA, A6_NUMCON
	If SA6->(DbSeek(FWxFilial("SA6", cFilOrig)+(cBanco+cAgencia+cConta))) .And. !Empty(SA6->A6_CFGBOL)		
		jCfgBol := JsonObject():new()
		
		If jCfgBol:FromJson(SA6->A6_CFGBOL) == Nil
			lRet := (jCfgBol["credentials"]:hasProperty("version") .And. jCfgBol["credentials"]["version"] == "v2")
		EndIf	
	EndIf
	
	FwRestArea(aAreaSA6)
Return lRet

/*/{Protheus.doc} sendUpdate
	Atualiza a data de vencimento ou valor do boleto via API
	@type  Function
	@author Vitor Duca
	@since 15/02/2023
	@version 1.0
	@param jLayout, Json, Layout de configuração do banco (A6_CFGBOL)
	@param jBolItau, Json, Layout do boleto que foi transmitido (EA_APIMSG)
	@param cNewVencto, Character, Nova data de vencimento
	@param nValueNew, Numeric, Novo valor nominal  
	@return jRespBank, Json, Resposta da API
/*/
Function sendUpdate(jLayout As Json, jBolItau As Json, cNewVencto As Character, nValueNew As Numeric) As Json
	Local jBody 	:= JsonObject():new()						As Json
	Local jRespBank	:= JsonObject():new()						As Json
	Local oObjToken := NIL										As Object
	Local aHeaders	:={}										As Array
	Local cPath		:= ""										As Character
	Local cResult	:= ""										As Character	
	Local nHttpCode	:= 0										As Numeric
	Local cCert		:= ""										As Character	
	Local cKey		:= ""										As Character
	Local cUrl		:= ""										As Character
	Local cHeaderRet := ""										As Character
	Local cAgencia	:= ""										As Character
	Local cConta	:= ""										As Character
	Local cDvConta	:= ""										As Character
	Local cCodCart	:= PadL(Alltrim(SEE->EE_CODCART), 3, '0')	As Character

	Default jLayout := JsonObject():new()
	Default jBolItau := JsonObject():new()
	Default cNewVencto := ""
	Default nValueNew := 0

	cAgencia := PadL(Alltrim(totvs.protheus.backoffice.ngf.bills.functions.getAgenciaSEE()), 4, "0" )
	cConta 	 := PadL(Alltrim(totvs.protheus.backoffice.ngf.bills.functions.getContaSEE()), 7, "0" )
	cDvConta := totvs.protheus.backoffice.ngf.bills.functions.getContaAdvSEE()	

	If FindFunction("HTTPSQuote") // HTTPSQuote utilizada para alteração de boleto bb verbo Patch (Função nova, não existia antes)								

		oObjToken  := &("gfin.job.bills.bills():new()")
		oObjToken:setCredentials(jLayout['credentials']:ToJSON())
		oObjToken:token341()

		If (ValType(oObjToken:oToken) == 'J' .or. ValType(oObjToken:oToken) == 'O')
			cCert	:= NGFConvLin(jLayout['credentials']['certificate']['cert'])
			cKey	:= NGFConvLin(jLayout['credentials']['certificate']['key'])
			cHeaderRet := ""

			aHeaders := {}
			aadd(aHeaders, 'Content-Type: application/json')
			aadd(aHeaders, 'Charset: UTF-8')
			aadd(aHeaders, 'Authorization: ' + oObjToken:oToken['token'] + ' ')
			aadd(aHeaders, 'x-itau-correlationID: ' + FWUUIDV4() + ' ')
			
			cUrl := 'https://api.itau.com.br'

			cPath := '/cash_management/v2/boletos'
			cPath += '/' + cAgencia + cConta + cDvConta + cCodCart + jBolItau['response']['dado_boleto']['dados_individuais_boleto'][1]['numero_nosso_numero'] 

			Do Case 
				Case !Empty(cNewVencto)	
					cPath += '/data_vencimento'
					jBody['data_vencimento'] := cNewVencto
				Case !Empty(nValueNew)
					cPath += '/valor_nominal'
					jBody['valor_titulo'] := StrTran(AllTrim(Transform(nValueNew, "@E 999999999999999.99")),',','.')
				OtherWise
					cPath += '/baixa'	
			End Case

			cHttpsQuot := 'HTTPSQuote(cUrl + cPath, cCert, cKey, "", "PATCH", "", EncodeUTF8(jBody:ToJSON()), 120, aHeaders, @cHeaderRet, .F.)' 
			cResult    := &cHttpsQuot
			nHttpCode  := HTTPGetStatus(Nil, Nil)

			jRespBank:FromJson(setResponseUdate(cResult, nHttpCode))
			jRespBank['sent'] := jBody
		Else
			jRespBank['message'] := STR0002 //"Erro no retorno do token para autenticação."
		EndIf
	Else
		jRespBank['message'] := STR0003 //"AppServer não está atualizado para utilizar função HTTPSQuote." 
	EndIf

Return jRespBank

/*/{Protheus.doc} setResponseUdate
	Trata o response das alterações do boleto 
	@type  Function
	@author Vitor Duca
	@since 16/02/2023
	@version 1.0
	@param cResult, Character, Json de resposta do banco no formato caractere
	@param nHttpCode, Numeric, Codigo HTTP da requisição que sera tratado
	@return jResponse:ToJson(), Character, Json com tratamento para sucesso e erro no formato caractere
/*/
Function setResponseUdate(cResult As Character, nHttpCode As Numeric) As Character
	Local jResponse := JsonObject():new() As Json

	If nHttpCode == 200 .OR. nHttpCode == 201
		jResponse['response'] := JsonObject():new()
		jResponse['response']:FromJSON(DecodeUTF8(cResult))
	Else
		jResponse['error'] := nHttpCode
		jResponse['message'] := DecodeUTF8(cResult)				
	EndIf
	
Return jResponse:ToJson()
