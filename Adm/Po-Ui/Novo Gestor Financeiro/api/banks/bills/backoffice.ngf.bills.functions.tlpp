#include 'tlpp-core.th'
#include 'totvs.ch'

NameSpace totvs.protheus.backoffice.ngf.bills.functions

/*/{Protheus.doc} getAgenciaSEE
    Carrega a agencia informada pelo cliente
    @type function
    @version  12.1.33
    @author francisco.oliveira
    @since 17/12/2021
    @return Character / Cod agencia
/*/

Function getAgenciaSEE() As Character

// Deverá estar poscionado na tabela SEE
	Local cCodAgen := "" As Character

	If !Empty(SEE->EE_AGEOFI)
		cCodAgen := SEE->EE_AGEOFI
	Else
		cCodAgen := SEE->EE_AGENCIA
	Endif

Return cCodAgen

/*/{Protheus.doc} getContaSEE
    Carrega a conta informada pelo cliente
    @type function
    @version  12.1.33
    @author francisco.oliveira
    @since 17/12/2021
    @return Character / Cod Conta
/*/

Function getContaSEE() As Character

// Deverá estar poscionado na tabela SEE
	Local cCodConta := "" As Character

	If !Empty(SEE->EE_CTAOFI)
		cCodConta := SEE->EE_CTAOFI
	Else
		cCodConta := SEE->EE_CONTA
	Endif

Return cCodConta

/*/{Protheus.doc} getContaAdvSEE
    Carrega o digito da conta informado pelo cliente
    @type function
    @version  12.1.33
    @author vinicius.prado
    @since 16/05/2022
    @return Character / CodAdvConta
/*/

Function getContaAdvSEE() As Character

	// Deverá estar poscionado na tabela SEE
	Local CodAdvConta := "" As Character

	If !Empty(SEE->EE_DVCTOFI)
		CodAdvConta := SEE->EE_DVCTOFI
	Else
		CodAdvConta := SEE->EE_DVCTA
	Endif

Return CodAdvConta

/*/{Protheus.doc} getContaAdvSEE
    Carrega o digito da agencia informado pelo cliente
    @type function
    @version  12.1.2210
    @author vinicius.prado
    @since 09/01/2023
    @return Character / CodAdvConta
/*/

Function getAgenciaAdvSEE() As Character

	// Deverá estar poscionado na tabela SEE
	Local CodAdvAgencia := "" As Character

	If !Empty(SEE->EE_DVAGOFI)
		CodAdvAgencia := SEE->EE_DVAGOFI
	Else
		CodAdvAgencia := SEE->EE_DVAGE
	Endif

Return CodAdvAgencia

/*/{Protheus.doc} CalcDiaDta
    Calcula dias corridos ou uteis
    @type function
    @version 12.1.33
    @author francisco.oliveira
    @since 16/12/2021
    @return Data
/*/

Function CalcDiaDta(dInitialDate As Date, nDays As Numeric, lBusiness As Logical) As Date
	Local dNewDate As Date
	Local dAuxDate As Date
	Local nSub As Numeric

	// verify if consider business days
	If (!lBusiness)
		dNewDate := DaySub(dInitialDate, nDays)
	Else
		nSub := 0
		dAuxDate := dInitialDate

		While (nSub < nDays)
			dAuxDate := DaySub(dAuxDate, 01)

			If (DataValida(dAuxDate) == dAuxDate)
				ConOut('Business Day')
				nSub ++
			EndIf
		EndDo

		dNewDate := dAuxDate
	EndIf

Return dNewDate

/*/{Protheus.doc} MarcaTitRsvd
    Altera um registro F7A, marcando um titulo como resolvido
    @type function
    @version 12.1.33
    @author daniel.muniz
    @since 29/03/2022
    @return Booleano
/*/
Function MarcaTitRsvd(cBillId as Character, cWallet As Character) As Logical
	Local aBillId	:= {}                   As Array
	Local lRet		:= .F.                	As Logical
	Local jF7A		:= JsonObject():new() 	As Json
	Local nRecnoF7A	:= 0					As Numeric

	// Verifica se a chave foi informada
	If !Empty(cBillId)
		aBillId := STRtokARR(cBillId, '|')

		// Verifica se existem 7 elementos na chave
		If len(aBillId) == 8

			// Monta o JSON para a alteração			
			jF7A['filial']  := PadR(aBillId[1]  , TamSX3('F7A_FILIAL')[01])
			jF7A['prefixo'] := PadR(aBillId[2]  , TamSX3('F7A_PREFIX')[01])
			jF7A['numero']  := PadR(aBillId[3]  , TamSX3('F7A_NUMERO')[01])
			jF7A['parcela'] := PadR(aBillId[4]  , TamSX3('F7A_PARCEL')[01])
			jF7A['tipo']    := PadR(aBillId[5]  , TamSX3('F7A_TIPO')[01])
			jF7A['clifor']  := PadR(aBillId[6]  , TamSX3('F7A_CLIENT')[01])
			jF7A['loja']    := PadR(aBillId[7]  , TamSX3('F7A_LOJA')[01])
			jF7A['codigo']  := PadR(aBillId[8]  , TamSX3('F7A_CODIGO')[01])

			nRecnoF7A := getRecnoF7A(jF7A, cWallet)

			If nRecnoF7A > 0

				DbSelectArea('F7A')
				F7A->(dbGoTo(nRecnoF7A))
				RecLock('F7A', .F.)
					F7A->F7A_STATUS := '2' // 1 = Pendente ; 2 = Resolvido
				F7A->(MsUnLock())

				// Diminui 1 na quantidade de falhas
				DbSelectArea('F79')
				F79->(DbSetOrder(3)) //F79_FILIAL+F79_CODIGO
				If F79->(DbSeek( jF7A['filial'] + jF7A['codigo']))
					RecLock('F79', .F.)
						F79->F79_NBAIXA := cValToChar( Val(F79->F79_NBAIXA) - 1 )
					F79->(MsUnLock())
				EndIf
				lRet := .T.

			EndIf
		EndIf
	EndIf
Return lRet

/*/{Protheus.doc} frtEmailCaixa
    Carrega as informações no objeto do e-mail
    @type function
    @version 12.1.33
    @author francisco.oliveira
    @since 07/10/2021
    @param oAPIMSG, Json, boleto transmitido ao banco
    @return Object, objeto com as informações do layout do boleto
/*/

Function NGFConvLin(cConteudo As Character) As Character
	cConteudo := If(!ISSRVUNIX(), StrTran(cConteudo,"/","\"), StrTran(cConteudo,"\","/"))
    cConteudo := lower(cConteudo)
Return cConteudo

/*/{Protheus.doc} getDigVer
	Retorna o digito verificador da agencia e conta do banco
	@type  Function
	@author vinicius.prado
	@since 09/01/2023
	@version 1.0
	@param caracter,
	@return aDigitos, array, [1] - digito da conta [2] - digito da agencia
/*/

Function getDigVer(cFilBco As Character, cBanco As Character, cAgencia As Character, cConta As Character) As Array
    Local aDigitos 	 := {} As Array
    Local aArea    	 := {} As Array
	Local aAreaSEE 	 := {} As Array
	Local aAreaSA6 	 := {} As Array
    Local cDVAgencia := "" As Character
    Local cDVConta   := "" As Character

    aDigitos   := {"",""}
    aArea 	   := GetArea()
	aAreaSEE   := SEE->(GetArea())
	aAreaSA6   := SA6->(GetArea())

    DbSelectArea('SEE')
    DbSetOrder(1)

    DbSelectArea('SA6')
    DbSetOrder(1) 

    cBanco   := Padr(cBanco,   TamSx3("A6_COD")[1])
    cAgencia := Padr(cAgencia, TamSx3("A6_AGENCIA")[1])
    cConta   := Padr(cConta,   TamSx3("A6_NUMCON")[1])

    If SEE->(DbSeek(xFilial('SEE',cFilBco) + cBanco + cAgencia + cConta))
        If SA6->(DbSeek(xFilial('SA6', cFilBco) + cBanco + cAgencia + cConta))
            // Digito da Agencia
            cDVAgencia := totvs.protheus.backoffice.ngf.bills.functions.getAgenciaAdvSEE()
            If !Empty(cDVAgencia)
                aDigitos[1] := "-" + cDVAgencia
            Else
                If !Empty(SA6->A6_DVAGE)
                    aDigitos[1] := "-" + SA6->A6_DVAGE
                EndIf
            EndIf

            // Digito da Conta
            cDVConta := totvs.protheus.backoffice.ngf.bills.functions.getContaAdvSEE()
            If !Empty(cDVConta)
                aDigitos[2] := "-" + cDVConta
            Else
                If !Empty(SA6->A6_DVCTA)
                    aDigitos[2] := "-" + SA6->A6_DVCTA
                EndIf
            EndIf
        EndIf
    EndIf

    RestArea(aArea)
	RestArea(aAreaSEE)
	RestArea(aAreaSA6)
Return aDigitos

/*/{Protheus.doc} getRecnoF7A
    Retorna o recno F7A
    @type function
    @version 12.1.33
    @author rafael.rondon
    @since 10/01/2023
    @param jF7A, Json, dados a F7A
	@param cWallet, Character, Carteira que sera verificada R=Receber, P=Pagar
    @return Numeric, Recno da F7A
/*/
Function getRecnoF7A(jF7A As Json, cWallet As Character) As Numeric

	Local cAlias	:= GetNextAlias() 	As Character
	Local cQuery	:= '' 				As Character
	Local nRecnoF7A	:= 0  				As Numeric

	Default jF7A := JsonObject():new()
	Default cWallet := "R"

	cQuery := "  SELECT R_E_C_N_O_ AS RECNO7A"
	cQuery += " FROM "  + RetSqlName("F7A") + " F7A "
	cQuery += " WHERE D_E_L_E_T_  	= ' '  "
	cQuery += " AND F7A_FILIAL  	= '" + jF7A['filial'] + "' "
	cQuery += " AND F7A_CODIGO  	= '" + jF7A['codigo'] + "' "
	cQuery += " AND F7A_PREFIX  	= '" + jF7A['prefixo'] + "' "
	cQuery += " AND F7A_NUMERO  	= '" + jF7A['numero'] + "' "
	cQuery += " AND F7A_PARCEL  	= '" + jF7A['parcela'] + "' "
	cQuery += " AND F7A_TIPO  		= '" + jF7A['tipo'] + "' "

	If cWallet == "P" .and. FindFunction("F717VldUso") .and. F717VldUso()
		cQuery += " AND F7A_FORNEC  	= '" + jF7A['clifor'] + "' "
	Else 
		cQuery += " AND F7A_CLIENT  	= '" + jF7A['clifor'] + "' "
	Endif	

	cQuery += " AND F7A_LOJA  		= '" + jF7A['loja'] + "' "

	cQuery	:= ChangeQuery(cQuery)

	MPSysOpenQuery( cQuery, cAlias )

	If (cAlias)->(!Eof())
		nRecnoF7A := (cAlias)->RECNO7A
	EndIf

	(cAlias)->(DbCloseArea())

Return nRecnoF7A

/*/{Protheus.doc} validForMacro
    Verifica o conteúdo para macro executar
    @type function
    @version 12.1.2210
    @author sidney.silva
    @since 18/01/2023
    @param xValue, Variant, dado para analisar e macro executar
    @return Variant, xValue
/*/
Function validForMacro(xValue As Variant, cTag As Character, cError As Character, cTipo As Character) As Variant

	cError := ''

	If ValType(xValue) == 'C'
		xValue := &xValue
	EndIf

	If ValType(xValue) != cTipo .And. ValType(xValue) != 'U'
		cError := 'O campo ' + cTag + ' não está retornando um valor compatível.'
	EndIf

Return xValue

/*/{Protheus.doc} isLayoutBolPIX
	Verifica se o layout é Boleto + PIX
	@type  Function
	@author Vitor Duca
	@since 15/02/2023
	@version 1.0
	@param jLayout, Json, Layout de configuração do banco
	@param aChavePIX, Array, Matriz passada por referencia que irá conter a chave PIX
	@return Logical, Define se o layout deve ser do bolecode
/*/
Function isLayoutBolPIX(jLayout As Json, aChavePIX As Array) As Logical
	Local lRet := .F. As Logical

	lRet := jLayout:hasProperty("indicadorPix") .and. jLayout["indicadorPix"] == 1

	//Se o parametro aChavePIX foi passado para a função, a definição se o layout é boleto + PIX
	//sera a junção da tag indicadorPix + as chaves PIX cadastradas para o banco posicionado
	If lRet .and. VALTYPE( aChavePIX ) == "A" .and. !Len(aChavePIX := RetChvPix(SA6->A6_COD, SA6->A6_AGENCIA, SA6->A6_DVAGE, SA6->A6_NUMCON, SA6->A6_DVCTA)) > 0
		lRet := .F.
	Endif

Return  lRet


/*/{Protheus.doc} characterXML
	Trata caracteres para XML
	@type  Function
	@author rafael rondon
	@since 09/03/2023
	@version 1.0
	@param cString, Character, caracter a ser tratado
	@param aList, Array, Lista de caracteres a serem tratados
	@return Logical, Define se o layout deve ser do bolecode
/*/
Function characterXML(cString As Character, aList As Array) As Character

	Local cNewString 	:= cString 	As Character
	Local nI						As Numeric

	Default aList		:= { "&", "<", ">", "'", '"', "*", "#", ":", ";", "|"} 

	For nI := 1 To Len(aList)
		cNewString := StrTran(cNewString,aList[nI],'')
	Next nI

Return  cNewString


/*/{Protheus.doc} printCpfCnpj
	Tratar impressão com máscara de CPF e CNPJ para boleto
	@type  Function
	@author rafael rondon
	@since 11/04/2023
	@version 1.0
	@param cString		, Character	, Caracter a ser tratado
	@param cType		, Character	, 'CPF' ou 'CNPJ'
	@return cNewString	, Character	, CPF ou CNPJ passado já com tratamento para impressão de boleto
/*/
Function printCpfCnpj(cString As Character, cType As Character) As Character

	Local cNewString 	:= ''			 		As Character
	Local cMask			:= '@R 999.999.999-99'	As Character
	Local nSize			:= 11					As Numeric
	
	Default cType		:= 'CPF'

	If cType == 'CNPJ'	
		nSize := 14
		cMask := '@R 99.999.999/9999-99'
	EndIf

	cNewString := AllTrim(cString)
	cNewString := Right(cNewString,nSize)
	cNewString := PadL(cNewString, nSize, "0")
	cNewString := AllTrim(Transform(cNewString, cMask))

Return cNewString

/*/{Protheus.doc} zeros
    Transforma um número em uma string completando zeros à esquerda de acordo com o tamanho do texto e das casas decimais
		Ex.: nNumeroDecimal = 1.99
				 nNumeroInteiro = 2.00 ou 2
			zeros(nNumeroDecimal, 5, 2) == "00199"
			zeros(nNumeroInteiro, 5, 2) == "00200"


    @type function
    @version 12.1.2210
    @author daniel.muniz
    @since 17/05/2023
    @param xValue, Variant, Dado que será formatado
		@param nSize, Numeric, Tamanho máximo do texto formatado
		@param nDecimal, Numeric, Tamanho das casas decimais que serão usadas na formatação
    @return Character, cResult
/*/
Function zeros(xValue As Variant, nSize as Numeric, nDecimal As Numeric) As Character
	Local cResult As Character
	Local nValue As Numeric

	Default nDecimal := 0
	Default nSize := 0

	cResult := PadL("", nSize, "0")

	If ValType(xValue) == 'C'
		nValue := Val(xValue)
	ElseIf ValType(xValue) == 'N'
		nValue := xValue
	EndIf

	If ValType(nValue) == 'N' .and. !Empty(nValue)
		nValue  := Round(nValue, nDecimal) * (10 ** nDecimal)
		cResult := PadL(AllTrim(CValToChar(nValue)), nSize, "0")
	EndIf

Return cResult
