#INCLUDE 'tlpp-core.th'
#INCLUDE "backoffice.ngf.bills.bradesco.CH"
#INCLUDE "COLORS.CH"

NAMESPACE totvs.protheus.backoffice.ngf.bills
USING NAMESPACE totvs.protheus.backoffice.ngf.bills.functions

/*/{Protheus.doc} prepare
    Prepara o Json para o Bradesco
    @type function
    @version 1.0
    @author renato.ito
    @since 12/08/2021
    @param jLayout As Json, json do layout
    @return json ajustado para o bradesco
/*/
Function prepare237(jLayout As Json)
    Local cCgcEmp   := '' As Character
    Local cFilBen   := '' As Character
    Local cTpPessoa := '' As Character

    cFilBen := cFilAnt
    If jLayout:Hasproperty('beneficiarioFilial')
        cFilBen  := jLayout['beneficiarioFilial']
    EndIf

    If Len(Alltrim(SA1->A1_CGC)) < 14
        cTpPessoa := "1"
    Else
        cTpPessoa := "2"
    Endif

    cCgcEmp := AllTrim(FWSM0Util():GetSM0Data(cEmpAnt, cFilBen , {'M0_CGC'})[1][2])

    // Legenda dos campos no formato: tipo | tamanho | obrigatório | descrição
    // tamanho 11 = CPF tamnho 14 = cnpj
    If len(cCgcEmp) > 11
        jLayout['nuCPFCNPJ']        := SubStr(cCgcEmp,  1, 8)
        jLayout['filialCPFCNPJ']    := SubStr(cCgcEmp,  9, 4)
        jLayout['ctrlCPFCNPJ']      := SubStr(cCgcEmp, 13, 2)
    Else
        jLayout['nuCPFCNPJ']        := SubStr(cCgcEmp,  1, 9)
        jLayout['filialCPFCNPJ']    := "0"
        jLayout['ctrlCPFCNPJ']      := SubStr(cCgcEmp, 10, 2)
    EndIf

    jLayout['cdTipoAcesso']         := "2"                                                            // numérico |  1 | Não | Tipo de Acesso Fixo “2” – Negociação
    jLayout['clubBanco']            := "2269651"                                                      // numérico | 10 | Não | Club Banco – 237 (Bradesco) Fixo 2269651
    jLayout['cdTipoContrato']       := "48"                                                           // numérico |  3 | Não | Tipo de Contrato Fixo “48”
    jLayout['nuSequenciaContrato']  := "0"                                                            // numérico | 10 | Não | Número de Sequência do Contrato
    jLayout['eNuSequenciaContrato'] := "0"                                                            // numérico | 10 | Não | Número de Sequência do Contrato
    jLayout['idProduto']            := PadL(AllTrim(SEE->EE_CODCART), 2, '0')                         // numérico |  2 | Sim | ID Produto (código da carteira/modalidade de cobrança. Ex 09 Cobrança escritural, 05 Cobrança de Seguros)
    jLayout['nuNegociacao']         := PadL(AllTrim(getAgenciaSEE()), 4, '0') + "0000000" + PadL(AllTrim(getContaSEE()), 7, '0')  // numérico | 18 | Sim | Número da Negociação Formato: Agencia: 4 posições (Sem digito) Zeros: 7 posições Conta: 7 posições (sem digito)
    jLayout['cdBanco']              := "237"                                                          // numérico |  3 | Sim | Código do Banco – Fixo “237”
    jLayout['tpRegistro']           := "1"                                                            // numérico |  3 | Sim | Tipo de Registro – Fixo “1” (à vencer/vencido)
    jLayout['cdProduto']            := "0"                                                            // numérico |  8 | Não | Código do Produto

    If ValType(jLayout['geraNossoNum']) == 'N' .and. jLayout['geraNossoNum'] == 1                                                                 // (Identificação do título para o banco, pode ser informado pelo cliente ou gerado pelo banco, esse número deve ser único de acordo com a carteira e negociação utilizadas)
        jLayout['nuTitulo']          := StrZero(Val(NossoNum()),11)                                    // numérico | 11 | Não | Número do Título (Nosso Número sem o dígito)
    Else
        jLayout['nuTitulo']          := "0"
    EndIf

    If jLayout:hasProperty('numTitBenef') .And. !Empty(jLayout['numTitBenef'])                   // alfanumérico | 10 | Sim | Número do Cliente (Seu Número)
        jLayout['nuCliente'] := Upper(jLayout['numTitBenef'])
    Else
        jLayout['nuCliente'] := SE1->E1_NUM
    EndIf

    jLayout['dtEmissaoTitulo']       := dateFormat(SE1->E1_EMISSAO, "dd.mm.yyyy")                // alfanumérico | 10 | Sim | Data de Emissão do Título (Formato: DD.MM.AAAA)
    jLayout['tpVencimento']          := "0"                                                      // numérico     |  1 | Sim | Tipo de Vencimento – Fixo “0”
    jLayout['cdEspecieTitulo']       := F77->F77_ESPECI                                          // numérico     |  2 | Sim | Código da Espécie do Título
    jLayout['controleParticipante']  := SE1->E1_IDCNAB                                           // alfanumérico | 25 | Não | Controle Participante

    if Valtype(jLayout['vlAbatimento']) == 'N'
      jLayout['vlAbatimento'] := cValToChar(jLayout['vlAbatimento'] * 100)
    endif
    if Valtype(jLayout['vlNominalTitulo']) == 'N'
      jLayout['vlNominalTitulo'] := cValToChar(jLayout['vlNominalTitulo'] * 100)
    endif
    // Os campos percentuais devem ser enviados no formato NNNDDDDD N - inteiros D - decimais
    // Juros inicio
    If Empty(jLayout['percentualJuros'])
        jLayout['percentualJuros'] := "0"                                                         // numérico     |  8 | Não | Código da Espécie do Título
        If Empty(jLayout['vlJuros'])                               // Valor de Juros Se o campo percentualjuros for preenchido, não deve ser preenchido esse campo
            jLayout['vlJuros'] := "0"
        else
            jLayout['vlJuros'] := cValToChar(jLayout['vlJuros'] * 100)   // Valor de Juros Se o campo percentualjuros for preenchido, não deve ser preenchido esse campo
        EndIF
    else
        If ValType(jLayout['percentualJuros']) <> "N"
            jLayout['percentualJuros'] := Val(jLayout['percentualJuros']) // Necessario ser numerico para formatar o percentual
        EndIf
        jLayout['percentualJuros'] := PadL(StrTran(Alltrim(TRANSFORM(jLayout['percentualJuros'], '999.99999')),'.',''),8 ,'0')
        jLayout['vlJuros'] := "0"
    EndIf

    If "0" <> jLayout['percentualJuros'] .Or. "0" <> jLayout['vlJuros']
        jLayout['qtdeDiasJuros'] := "1"                                                          // numérico     |  2 | Não |Quantidade de dias para cálculo Juros
    Else
        jLayout['qtdeDiasJuros'] := "0"
    EndIf

    // Multa inicio
    If Empty(jLayout['percentualMulta'])
        jLayout['percentualMulta'] := "0"
        If Empty(jLayout['vlMulta'])                               // Valor de Multa Se o campo percentualMulta for preenchido, não deve ser preenchido esse campo
            jLayout['vlMulta'] := "0"
        else
            jLayout['vlMulta'] := cValToChar(jLayout['vlMulta'] * 100)   // Valor de Multa Se o campo percentualMulta for preenchido, não deve ser preenchido esse campo
        EndIF
    else
        If ValType(jLayout['percentualMulta']) <> "N"
            jLayout['percentualMulta'] := Val(jLayout['percentualMulta']) // Necessario ser numerico para formatar o percentual
        EndIf
        jLayout['percentualMulta'] := PadL(StrTran(Alltrim(TRANSFORM(jLayout['percentualMulta'], '999.99999')),'.',''),8 ,'0')
        jLayout['vlMulta'] := "0"
    EndIf

    If Empty(jLayout['qtdeDiasMulta'])
        If "0" <> jLayout['percentualMulta'] .Or. "0" <> jLayout['vlMulta']
            jLayout['qtdeDiasMulta'] := "1" // numérico     |  2 | Não |Quantidade de dias para cálculo Multa
        Else
            jLayout['qtdeDiasMulta'] := "0"
        EndIf
    Else
        jLayout['qtdeDiasMulta'] := CValToChar(jLayout['qtdeDiasMulta'])
    EndIf

    // Desconto inicio
    If Empty(jLayout['percentualDesconto1'])
        jLayout['percentualDesconto1'] := "0"
        If Empty(jLayout['vlDesconto1'])                               // Valor de Desconto Se o campo percentualDesconto1 for preenchido, não deve ser preenchido esse campo
            jLayout['vlDesconto1'] := "0"
        else
            jLayout['vlDesconto1'] := cValToChar(jLayout['vlDesconto1'] * 100)   // Valor de Desconto Se o campo percentualDesconto1 for preenchido, não deve ser preenchido esse campo
        EndIF
    else
        If ValType(jLayout['percentualDesconto1']) <> "N"
            jLayout['percentualDesconto1'] := Val(jLayout['percentualDesconto1']) // Necessario ser numerico para formatar o percentual
        EndIf
        jLayout['percentualDesconto1'] := PadL(StrTran(Alltrim(TRANSFORM(jLayout['percentualDesconto1'], '999.99999')),'.',''),8 ,'0')
        jLayout['vlDesconto1'] := "0"
    EndIf

    If "0" <> jLayout['percentualDesconto1'] .Or. "0" <> jLayout['vlDesconto1']
        jLayout['dataLimiteDesconto1'] := jLayout['dtVencimentoTitulo']                          // Alfanumérico | 10 | Sim | Data Limite para Desconto 1
    Else
        jLayout['dataLimiteDesconto1']  := ""
    EndIf

    jLayout['percentualDesconto2']      := "0"
    jLayout['vlDesconto2']              := "0"
    jLayout['dataLimiteDesconto2']      := ""
    jLayout['percentualDesconto3']      := "0"
    jLayout['vlDesconto3']              := "0"
    jLayout['dataLimiteDesconto3']      := ""

    jLayout['prazoBonificacao']         := "0"
    jLayout['percentualBonificacao']    := "0"
    jLayout['vlBonificacao']            := "0"
    jLayout['dtLimiteBonificacao']      := ""

    jLayout['vlIOF']                    := "0"                                                                                                                     // numérico     | 17 | Não |Quantidade de dias para cálculo Juros

    jLayout['cdIndCpfcnpjPagador']      := cTpPessoa                                                    // numérico     |  1 | Sim | Indicador CPF/CNPJ Pagador 1-CPF 2-CNPJ
    jLayout['nuCpfcnpjPagador']         := PadL(AllTrim(SA1->A1_CGC), 14, "0")                          // numérico     | 14 | Sim | Número do CPF/CNPJ Pagador

    jLayout['nuLogradouroPagador']      := SubStr(trataEnd(jLayout['logradouroPagador'], 'N'), 1, 10)   // Alfanumérico | 10 | Não | Número do endereço do pagador
    jLayout['logradouroPagador']        := SubStr(trataEnd(jLayout['logradouroPagador'], 'L'), 1, 30)   // Alfanumérico | 40 | Não | Endereço do pagador

    jLayout['complementoCepPagador']   := Right(jLayout['cepPagador'], 3)                               // numérico     |  3 | Sim | Complemento do CEP do Pagador
    jLayout['cepPagador']              := Left(jLayout['cepPagador'], 5)                                // numérico     |  5 | Sim | CEP do Pagador

    jLayout['endEletronicoPagador']    := ""                                                            // Alfanumérico | 70 | Não | Endereço Eletrônico Pagador

    jLayout['nomeSacadorAvalista']                  := ""      // Alfanumérico | 40 | Não | Nome do Sacador Avalista
    jLayout['logradouroSacadorAvalista']            := ""      // Alfanumérico | 40 | Não | Endereço do Sacador Avalista
    jLayout['nuLogradouroSacadorAvalista']          := ""      // Alfanumérico | 10 | Não | Número do Endereço do Sacador Avalista
    jLayout['complementoLogradouroSacadorAvalista'] := ""      // Alfanumérico | 15 | Não | Complemento do Endereço Sacador Avalista
    jLayout['cepSacadorAvalista']                   := "0"     // numérico     |  5 | Não | CEP do Sacador Avalista
    jLayout['complementoCepSacadorAvalista']        := "0"     // numérico     |  3 | Não | Complemento do CEP do Sacador Avalista
    jLayout['bairroSacadorAvalista']                := ""      // Alfanumérico | 40 | Não | Bairro Sacador Avalista
    jLayout['municipioSacadorAvalista']             := ""      // Alfanumérico | 40 | Não | Município Sacador Avalista
    jLayout['ufSacadorAvalista']                    := ""      // Alfanumérico |  2 | Não | UF Sacador Avalista
    jLayout['cdIndCpfcnpjSacadorAvalista']          := "0"     // numérico     |  1 | Não | Indicador CPF/CNPJ Sacador Avalista 1-CPF 2-CNPJ
    jLayout['nuCpfcnpjSacadorAvalista']             := "0"     // numérico     | 14 | Não | Número do CPF/CNPJ Sacador Avalista
    jLayout['endEletronicoSacadorAvalista']         := ""      // Alfanumérico | 70 | Não | Endereço Eletrônico Sacador Avalista

    // (Não disponível para o Registro Online)
    jLayout['tpProtestoAutomaticoNegativacao']      := "0"     // numérico     |  2 | Não | Tipo de Protesto Automático ou Negativação 01 – DIAS CORRIDOS PARA PROTESTO 02- DIAS ÚTEIS PARA PROTESTO 03 – DIAS CORRIDOS PARA NEGATIVAÇÃO
    jLayout['prazoProtestoAutomaticoNegativacao']   := "0"     // numérico     |  2 | Não | Prazo de Protesto, prazo mínimo de protesto 5 dias
    jLayout['cdPagamentoParcial']                   := ""      // alfanumérico |  1 | Não | Indicador de Pagamento Parcial– domínio ‘S’ ou ‘N
    jLayout['qtdePagamentoParcial']                 := "0"     // numérico     |  3 | Não | Quantidade de Pagamentos Parciais

    // retira campos que não fazem parte do layout
    jLayout:delName('tipoJuros')
    jLayout:delName('tipoMulta')
    jLayout:DelName('numTitBenef')
    jLayout:delName('geraNossoNum')
    jLayout:delName('tipoDesconto')
    jLayout:delName('beneficiarioFilial')
Return

/*/{Protheus.doc} apiURL237
    Retorna a URL da api de registro de boletos do Bradesco
    @type function
    @version 1.0
    @author renato.ito
    @since 12/08/2021
    @param cType As Character, 1- produção 2- homologação
    @return cUrl as character, url da api
/*/
Function apiURL237(cType as character) as character
    Local cUrl as character

    cUrl := 'https://cobranca.bradesconetempresa.b.br/ibpjregistrotitulows/registrotitulo'

    if cType == '2'
        cUrl += 'homologacao'
    endif
Return cUrl

/*/{Protheus.doc} sign237
    Assina a mensagem com o certificado
    @type function
    @version 1.0
    @author renato.ito
    @since 12/08/2021
    @param cData As Character, conteúdo a ser assinado
    @param cSignCert As Character, caminho do certificado
    @param cPrivKey As Character, caminho da key do certificado
    @param cPass As Character, senha do certificado
    @return cSigned as character, conteúdo assinado
/*/
Function sign237(cData as Character, cSignCert as Character, cPrivKey as Character, cPass as Character, cErrorSign As Character) as Character
    Local cSigned  := '' as Character
    Local cOptions := '' as Character
    Local cError   := '' as Character

    cOptions    := '-nodetach'
    cError      := ''

    If ValType(cData) == "U"
        cSigned     := ""
        cErrorSign  := STR0035 // "Warning (EncodeUtf8) Invalid conversion from cp1252 to utf-8"
    Else
        cSigned := SMIMESign(cSignCert, cPrivKey, cData, cOptions, @cError, cPass)
    Endif

    if !Empty(cError)
        FwLogMsg("ERROR",, "NGF", FunName(), "", "01", "Sign: " + cError, 0, 0, {})   //"Problema ao assinar a mensagem"
    else
        // SERIALIZA O JSON ASSINADO
        cSigned := FwCutOff(cSigned, .T.)
        // REMOVE O CABEÇALHO E RODAPÉ
        cSigned := SubStr(cSigned, 22, Len(cSigned) - 40)
    endIf
Return cSigned

/*/{Protheus.doc} frtEmailBrad
    Carrega as informações no objeto do e-mail
    @type function
    @version 12.1.33
    @author vinicius.prado
    @since 07/10/2021
    @param oAPIMSG, Json, boleto transmitido ao banco
    @return Object, objeto com as informações do layout do boleto
/*/
Function frtEmailBrad(oAPIMSG As JSON)
    Local oDataEMail        As Object
    Local cBanco            As Character
    Local aFilAtu           As Array
    Local cMarkCNPJ         As Character
    Local cTypeCGC          As Character
    Local cAbatementMsg     As Character

    cBanco    := oAPIMSG['banco']
    cMarkCNPJ := '@R 99.999.999/9999-99'
    cTypeCGC  := 'CNPJ'
    cAbatementMsg  := ""

    If oAPIMSG:Hasproperty('beneficiarioFilial')
        aFilAtu   := FWArrFilAtu(cEmpAnt, oAPIMSG['beneficiarioFilial'])
    Else
        aFilAtu   := FWArrFilAtu()        
    EndIf

    oDataEMail                          := JsonObject():new()
    oDataEMail['beneficiario']          := JsonObject():new()
    oDataEMail['boleto']                := JsonObject():new()
    oDataEMail['banco']                 := cBanco
    oDataEMail['pagador']               := JsonObject():new()
    oDataEMail['pagador']['endereco']   := JsonObject():new()

    oDataEMail['pagador']['nome']       := oAPIMSG['boleto', 'nomePagador']

    If oAPIMSG['boleto', 'cdIndCpfcnpjPagador'] == '1'
        cTypeCGC := 'CPF'
    EndIf
    oDataEMail['pagador']['cnpj/cpf']                := printCpfCnpj(oAPIMSG['boleto', 'nuCpfcnpjPagador'], cTypeCGC)
    If !Empty(oAPIMSG['boleto', 'logradouroPagador'])
        oDataEMail['pagador']['endereco']['logradouro']  :=  oAPIMSG['boleto', 'logradouroPagador']
    Else
        oDataEMail['pagador']['endereco']['logradouro']  :=  ''
    EndIf
    If !Empty(oAPIMSG['boleto', 'nuLogradouroPagador'])
        oDataEMail['pagador']['endereco']['logradouro']  +=  '  ' + oAPIMSG['boleto', 'nuLogradouroPagador']
    EndIf
    If !Empty(oAPIMSG['boleto', 'complementoLogradouroPagador'])
        oDataEMail['pagador']['endereco']['logradouro']  +=  ' - ' + oAPIMSG['boleto', 'complementoLogradouroPagador']
    EndIf

    If !Empty(oAPIMSG['boleto', 'bairroPagador'])
        oDataEMail['pagador']['endereco']['bairro']   :=  oAPIMSG['boleto', 'bairroPagador']
    Else
        oDataEMail['pagador']['endereco']['bairro']   :=  ''
    EndIf
    If !Empty(oAPIMSG['boleto', 'cepPagador']) .AND. !Empty(oAPIMSG['boleto', 'complementoCepPagador'])
        oDataEMail['pagador']['endereco']['municipio']   :=  AllTrim(Transform(oAPIMSG['boleto', 'cepPagador'] + oAPIMSG['boleto', 'complementoCepPagador'], "@R 99999-999"))
    Else
        oDataEMail['pagador']['endereco']['municipio']   :=  ''
    EndIf
    If !Empty(oAPIMSG['boleto', 'municipioPagador'])
        oDataEMail['pagador']['endereco']['municipio']   +=  ' ' + oAPIMSG['boleto', 'municipioPagador']
    EndIf
    If !Empty(oAPIMSG['boleto', 'ufPagador'])
        oDataEMail['pagador']['endereco']['municipio']   +=  ' - ' + oAPIMSG['boleto', 'ufPagador']
    EndIf

    oDataEMail['beneficiario']['banco']     := oAPIMSG['boleto', 'cdBanco'] + "-2" // Banco e digito
    oDataEMail['beneficiario']['agencia']   := LEFT(oAPIMSG['boleto', 'nuNegociacao'], 4)
    oDataEMail['beneficiario']['agencia']   += "/" + RIGHT(oAPIMSG['boleto', 'nuNegociacao'], 7)
    oDataEMail['beneficiario']['cnpj']      := AllTrim(Transform(aFilAtu[18], cMarkCNPJ))
    oDataEMail['beneficiario']['nome']      := AllTrim(aFilAtu[17])
    If !Empty(oAPIMSG['response', 'logradouroBeneficiario'])
        oDataEMail['beneficiario']['logradouro']  := oAPIMSG['response', 'logradouroBeneficiario']
    Else
        oDataEMail['beneficiario']['logradouro']  := ''
    EndIf
    If !Empty(oAPIMSG['response', 'complementoLogradouroBeneficiario'])
        oDataEMail['beneficiario']['logradouro']  += ' - ' + oAPIMSG['response', 'complementoLogradouroBeneficiario']
    EndIf
    If !Empty(oAPIMSG['response', 'bairroBeneficiario'])
        oDataEMail['beneficiario']['bairro']  := oAPIMSG['response', 'bairroBeneficiario']
    Else
        oDataEMail['beneficiario']['bairro']  := ''
    EndIf
    If !Empty(oAPIMSG['response', 'cepBeneficiario']) .AND. !Empty(oAPIMSG['response', 'cepComplementoBeneficiario'])
        oDataEMail['beneficiario']['endereco']  := AllTrim(Transform(oAPIMSG['response', 'cepBeneficiario'] + oAPIMSG['response', 'cepComplementoBeneficiario'], "@R 99999-999"))
    Else
        oDataEMail['beneficiario']['endereco']  := ''
    EndIf
    If !Empty(oAPIMSG['response', 'municipioBeneficiario'])
        oDataEMail['beneficiario']['endereco']  += ' ' + oAPIMSG['response', 'municipioBeneficiario']
    EndIf
    If !Empty(oAPIMSG['response', 'ufBeneficiario'])
        oDataEMail['beneficiario']['endereco']  += ' - ' + oAPIMSG['response', 'ufBeneficiario']
    EndIf
    

    oDataEMail['boleto']['nossoNumero']     := oAPIMSG['boleto', 'idProduto']
    oDataEMail['boleto']['nossoNumero']     += '/' + AllTrim(Transform(PadL(Alltrim(oAPIMSG['response', 'nuTituloGerado']),11,'0'), "@R 99999999999"))
    oDataEMail['boleto']['numeroDocumento'] := oAPIMSG['boleto', 'nuCliente']
    oDataEMail['boleto']['linhaDigitavel']  := AllTrim(Transform(oAPIMSG['response', 'linhaDigitavel'], "@R 99999.99999 99999.999999 99999.999999 9 99999999999999"))
    oDataEMail['boleto']['codigoBarras']    := FinLDCB(StrTran(StrTran(oAPIMSG['response', 'linhaDigitavel'],'.',''),' ',''))

    oDataEMail['boleto']['localPagamento']  := STR0001 // PAGÁVEL PREFERENCIALMENTE NAS AGÊNCIAS DO BRADESCO
    oDataEMail['boleto']['usoBanco']        := ""
    oDataEMail['boleto']['vencimento']      := StrTran(oAPIMSG['boleto', 'dtVencimentoTitulo'], '.', '/')
    oDataEMail['boleto']['emissao']         := StrTran(oAPIMSG['boleto', 'dtEmissaoTitulo'], '.', '/')
    oDataEMail['boleto']['processamento']   := SUBSTR(oAPIMSG['response', 'dtRegistro'],1,2) +"/"+ SUBSTR(oAPIMSG['response', 'dtRegistro'],3,2) +"/"+ RIGHT(oAPIMSG['response', 'dtRegistro'],4)
    oDataEMail['boleto']['especie']         := "R$"
    oDataEMail['boleto']['especieDoc']      := AllTrim(oAPIMSG['especie'])
    oDataEMail['boleto']['aceite']          := 'N'
    oDataEMail['boleto']['carteira']        := oAPIMSG['boleto', 'idProduto']
    oDataEMail['boleto']['mensagem']        := {}

    oDataEMail['boleto']['msgJuros']        := feeMsg(oAPIMSG['boleto'], cBanco)
    oDataEMail['boleto']['msgDesconto']     := discountMsg(oAPIMSG['boleto'], cBanco)
    oDataEmail['boleto']['msgMulta']        := fineMsg(oAPIMSG['boleto'], cBanco)

    If oAPIMSG['boleto']:hasProperty('vlAbatimento') .And. FindFunction('abatementMsg')
        cAbatementMsg := abatementMsg(oAPIMSG['boleto', 'vlAbatimento'])
    EndIf

    oDataEmail['boleto']['msgAbatimento']   := cAbatementMsg
    oDataEMail['boleto']['valor']           := AllTrim(Transform(Val(oAPIMSG['boleto', 'vlNominalTitulo']) / 100, "@E 9,999,999,999,999.99"))
    oDataEMail['boleto']['desconto']        := ""
    oDataEMail['boleto']['juroMulta']       := ""
    oDataEMail['boleto']['totalCobrado']    := ""

    Iif(!Empty(oAPIMSG['response', 'logradouroBeneficiario']), oAPIMSG['response', 'logradouroBeneficiario'], '')

    FWFreeArray(aFilAtu)

Return oDataEmail

/*/{Protheus.doc} bol237
    Gera o boleto do Banco Bradesco
    @type function
    @version  12.1.33
    @author vinicius.prado
    @since 07/10/2021
    @param cData, Character, dados do boleto
    @param oPrint, Object, Objeto do FWMSPrinter
/*/
Function bol237(cData As Character, oPrint AS Object)
    Local aDados      As Array
    Local nI          As Numeric
    Local nOffset     As Numeric
    Local nOffsetLine As Numeric
    Local nOffsetRec  As Numeric
    Local nOffsetBol  As Numeric
    Local nLinha      As Numeric
    Local nColuna     As Numeric
    Local oData       As Object
    Local oFont7      As Object
    Local oFont8      As Object
    Local oFont10     As Object
    Local oFont11     As Object
    Local oFont15     As Object
    Local oFont14n    As Object
    Local nMsg        As Numeric

    oData := JsonObject():new()
    oData:fromJson(cData)

    oFont7     := TFont():New("Arial"      ,9,7,.T.,.T.,5,.T.,5,.T.,.F.)
    oFont8     := TFont():New("Arial"      ,9,8,.T.,.F.,5,.T.,5,.T.,.F.)
    oFont10    := TFont():New("Arial"      ,9,10,.T.,.T.,5,.T.,5,.T.,.F.)
    oFont11    := TFont():New("Arial"      ,9,11,.T.,.T.,5,.T.,5,.T.,.F.)
    oFont15    := TFont():New("Arial"      ,9,17,.T.,.T.,5,.T.,5,.T.,.F.)
    oFont14n   := TFont():New("Arial"      ,9,16,.T.,.T.,5,.T.,5,.T.,.F.)

    nLinha      := 10
    nColuna     := 10
    nOffsetBol  := 0
    nOffsetRec  := 0
    nOffsetLine := 0
    aDados      := {}

    // Beneficiario
    aAdd(aDados, oData['beneficiario']['banco'])     // 1 - Numero do Banco
    aAdd(aDados, oData['beneficiario']['agencia'])   // 2 - Agencia/Conta Beneficiário
    aAdd(aDados, oData['beneficiario']['nome'])      // 3 - Nome Benef.
    aAdd(aDados, oData['beneficiario']['cnpj'])      // 4 - CNPJ Benef.
    aAdd(aDados, oData['beneficiario']['endereco'])  // 5 - CEP Munic - UF

    // Pagador
    aAdd(aDados, oData['pagador']['nome'])                    // 6 - Pagador
    aAdd(aDados, oData['pagador']['cnpj/cpf'])                // 7 - CPF Pagador
    aAdd(aDados, oData['pagador']['endereco']['logradouro'])  // 8 - End. Logradouro, Numero.
    aAdd(aDados, oData['pagador']['endereco']['municipio'])   // 9 - CEP Municipio - UF

    // Dados do Boleto
    aAdd(aDados, oData['boleto']['nossoNumero'])     // 10 - Nosso Numero
    aAdd(aDados, oData['boleto']['numeroDocumento']) // 11 - Numero documento
    aAdd(aDados, oData['boleto']['linhaDigitavel'])  // 12 - Linha Digitavel
    aAdd(aDados, oData['boleto']['codigoBarras'])    // 13 - Cod. Barras
    aAdd(aDados, oData['boleto']['localPagamento'])  // 14 - Local Pagamento
    aAdd(aDados, oData['boleto']['usoBanco'])        // 15 - Uso Banco
    aAdd(aDados, oData['boleto']['mensagem'])        // 16 - Mensagem
    aAdd(aDados, oData['boleto']['vencimento'])      // 17 - Vencimento
    aAdd(aDados, oData['boleto']['emissao'])         // 18 - Emissao
    aAdd(aDados, oData['boleto']['processamento'])   // 19 - Processamento
    aAdd(aDados, oData['boleto']['especieDoc'])      // 20 - Especie Documento
    aAdd(aDados, oData['boleto']['especie'])         // 21 - Especie Moeda
    aAdd(aDados, oData['boleto']['aceite'])          // 22 - Aceite
    aAdd(aDados, oData['boleto']['carteira'])        // 23 - Carteira
    aAdd(aDados, oData['boleto']['valor'])           // 24 - Valor
    aAdd(aDados, oData['boleto']['desconto'])        // 25 - Desconto
    aAdd(aDados, oData['boleto']['juroMulta'])       // 26 - Juros/Multa
    aAdd(aDados, oData['boleto']['totalCobrado'])    // 27 - Valor Cobrado

    aAdd(aDados, oData['boleto']['msgDesconto'])      //28 - Desconto
    aAdd(aDados, oData['boleto']['msgJuros'])         //29 - Juro Multa
    aAdd(aDados, oData['boleto']['msgMulta'])         //30 - Juro Multa
    aAdd(aDados, oData['boleto']['msgAbatimento'])    //31 - Abatimento

    //Pagador
    aAdd(aDados, oData['pagador']['endereco']['bairro'])   // 32 - Bairro

    //Beneficiario
    aAdd(aDados, oData['beneficiario']['logradouro'])   // 33 - logradouro Benef.
    aAdd(aDados, oData['beneficiario']['bairro'])       // 34 - bairro Benef.

    oPrint:SetPortrait()
    oPrint:StartPage()

    //RECIBO DO PAGADOR
    nOffset := nOffsetRec

    //Desenho LINE(A)
    oPrint:Say      ( nLinha * 6   + nOffset, nColuna * 25, STR0002, oFont8 ) // Autenticação Mecanica
    oPrint:SayAlign ( nLinha * 6.5 + nOffset, nColuna * 46, STR0003, oFont11, nColuna * 11, nLinha,, 1, 0 ) // Recibo do Sacado
    oPrint:Line     ( nLinha * 8   + nOffset, nColuna * 22.5, nLinha * 8 + nOffset, 570, CLR_BLACK )  // Linha Horizontal

    //Dados LINE(A)
    oPrint:SayBitmap( nLinha * 8    + nOffset, nColuna * 1.5, 'NGFBRAD.bmp', 110, 24)  // Logo do banco
    oPrint:Line     ( nLinha * 10.5 + nOffset, nColuna * 22.5, nLinha * 8 + nOffset, nColuna * 22.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Say      ( nLinha * 9    + nOffset, nColuna * 23  , STR0004,    oFont8  ) // Vencimento
    oPrint:Say      ( nLinha * 10   + nOffset, nColuna * 23.5, aDados[17], oFont10 )
    oPrint:Line     ( nLinha * 10.5 + nOffset, nColuna * 35.5, nLinha * 8 + nOffset, nColuna * 35.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Say      ( nLinha * 9    + nOffset, nColuna * 36  , STR0005,    oFont8  ) // Valor do Documento
    oPrint:SayAlign ( nLinha * 9    + nOffset, nColuna * 36.5, aDados[24], oFont10, nColuna * 20, nLinha,, 1, 0)
    oPrint:Line     ( nLinha * 10.5 + nOffset, nColuna       , nLinha * 10.5 + nOffset, 570, CLR_BLACK )   // Linha Horizontal

    // LINE (B)
    oPrint:Say  ( nLinha * 11.5 + nOffset, nColuna * 2   , STR0006,   oFont8 ) // Sacado
    oPrint:Say  ( nLinha * 12.5 + nOffset, nColuna * 2.5 , SubStr(aDados[6],1,50), oFont10)
    oPrint:Line ( nLinha * 13   + nOffset, nColuna * 29.5, nLinha * 10.5 + nOffset, nColuna * 29.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Say  ( nLinha * 11.5 + nOffset, nColuna * 30  , STR0007,   oFont8 ) // Cedente
    oPrint:Say  ( nLinha * 12.5 + nOffset, nColuna * 30.5, SubStr(aDados[3],1,45), oFont10)
    oPrint:Line ( nLinha * 13   + nOffset, nColuna       , nLinha * 13 + nOffset  , 570, CLR_BLACK ) // Linha horizontal fechando a sessao

    // LINE (C)
    oPrint:Say  ( nLinha * 14   + nOffset, nColuna * 2  , STR0008,   oFont8 ) // Endereço Beficiário/Beneficiário Final
    oPrint:Say  ( nLinha * 15   + nOffset, nColuna * 2.5, SubStr(aDados[33],1,90), oFont10)
    oPrint:Say  ( nLinha * 16   + nOffset, nColuna * 2.5, SubStr(aDados[34],1,90), oFont10)
    oPrint:Say  ( nLinha * 17   + nOffset, nColuna * 2.5, SubStr(aDados[5],1,90), oFont10)
    oPrint:Line ( nLinha * 17.5 + nOffset, nColuna      , nLinha * 17.5 + nOffset, 570, CLR_BLACK ) // Linha horizontal fechando a sessao

    // LINE (D)
    oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 2   , STR0009,    oFont8  ) // Agência/Cód. Cedente
    oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 2.5 , aDados[2],  oFont10 )
    oPrint:Line ( nLinha * 20   + nOffset, nColuna * 19.5, nLinha * 17.5 + nOffset , nColuna * 19.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 20  , STR0010,    oFont8  ) // Nosso Numero
    oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 20.5, aDados[10], oFont10 )
    oPrint:Line ( nLinha * 20   + nOffset, nColuna * 33.5, nLinha * 17.5 + nOffset , nColuna * 33.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 34  , STR0011,    oFont8  )  // Nº Documento
    oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 34.5, aDados[11], oFont10 )
    oPrint:Line ( nLinha * 20   + nOffset, nColuna * 43.5, nLinha * 17.5 + nOffset , nColuna * 43.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 44  , STR0012,    oFont8  ) // CNPJ
    oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 44.5, aDados[4] , oFont10 )
    oPrint:Line ( nLinha * 20   + nOffset, nColuna       , nLinha * 20 + nOffset   , 570, CLR_BLACK ) // Linha horizontal fechando a sessao

    nOffset += nOffsetLine
    //Pontilhado separador
    For nI := 0 to 600 step 5
        oPrint:Line( nLinha * 22 + nOffset, nI, nLinha * 22 + nOffset, nI+2, CLR_BLACK )
    Next nI

    nOffset += nOffsetBol

    // BOLETO DE COBRANÇA
    // Dados LINE(A)
    oPrint:SayBitmap( nLinha * 22.5 + nOffset, nColuna * 1.5 , 'NGFBRAD.bmp', 110, 24) //Logo do banco
    oPrint:Say      ( nLinha * 24.5 + nOffset, nColuna * 14.5, aDados[1],     oFont15 )   // Numero do Banco
    oPrint:Say      ( nLinha * 24.5 + nOffset, nColuna * 20.5, aDados[12],    oFont14n )  // Linha Digitavel

    // Desenho LINE(A)
    oPrint:Line ( nLinha * 23 + nOffset, nColuna * 13, nLinha * 25 + nOffset, nColuna * 13, CLR_BLACK ) // Divisor de Coluna
    oPrint:Line ( nLinha * 23 + nOffset, nColuna * 19, nLinha * 25 + nOffset, nColuna * 19, CLR_BLACK ) // Divisor de campo
    oPrint:Line ( nLinha * 25 + nOffset, nColuna     , nLinha * 25 + nOffset, 570         , CLR_BLACK ) // Linha Horizontal

    // Dados LINE B
    oPrint:Say      ( nLinha * 26 + nOffset, nColuna * 2,   STR0013    , oFont8 ) // Local Pagamento
    oPrint:Say      ( nLinha * 27.3 + nOffset, nColuna * 2, AllTrim(aDados[14]) +  "", oFont10)
    oPrint:Say      ( nLinha * 26 + nOffset, nColuna * 44,  STR0004    , oFont8 ) // Vencimento
    oPrint:SayAlign ( nLinha * 27 + nOffset, nColuna * 44.5,aDados[17] , oFont10, nColuna * 12, nLinha,, 1, 0)

    // Desenho LINE B
    oPrint:Line ( nLinha * 25   + nOffset, nColuna * 43.5, nLinha * 28.5 + nOffset, nColuna * 43.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Line ( nLinha * 28.5 + nOffset, nColuna       , nLinha * 28.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal

    // Dados LINE C
    oPrint:Say      ( nLinha * 29.5 + nOffset, nColuna * 2   , STR0007    , oFont8) // Cedente
    oPrint:Say      ( nLinha * 30.5 + nOffset, nColuna * 2.5 , SubStr(aDados[3],1,45)  , oFont10)
    oPrint:Say      ( nLinha * 29.5 + nOffset, nColuna * 44  , STR0009    , oFont8 ) // Agência/Código cedente
    oPrint:SayAlign ( nLinha * 29.5 + nOffset, nColuna * 44.5, aDados[2]  , oFont10, nColuna * 12, nLinha,, 1, 0) // Agencia Conta

    // Desenho LINE C
    oPrint:Line ( nLinha * 28.5 + nOffset, nColuna * 43.5, nLinha * 31 + nOffset, nColuna * 43.5, CLR_BLACK ) // Divisor de Coluna
    oPrint:Line ( nLinha * 31   + nOffset, nColuna       , nLinha * 31 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal

    // Dados LINE D
    oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 2   , STR0014    , oFont8  ) // Data do Documento
    oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 2.5 , aDados[18] , oFont10 )
    oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 11  , STR0011    , oFont8  ) // No. Documento
    oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 11.5, aDados[11] , oFont10 )
    oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 23  , STR0015    , oFont8  ) // Espécie doc.
    oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 23.5, aDados[20] , oFont10 )
    oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 30  , STR0016    , oFont8  ) // Aceite
    oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 30.5, aDados[22] , oFont10 )
    oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 35  , STR0017    , oFont8  ) // Data do processamento
    oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 35.5, aDados[19] , oFont10 )
    oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 44  , STR0018    , oFont8  ) // Carteira/Nosso Numero
    oPrint:SayAlign ( nLinha * 32 + nOffset, nColuna * 44.5, aDados[10] , oFont10 , nColuna * 12, nLinha,, 1, 0) // Nosso Número

    // Desenho LINE D
    oPrint:Line ( nLinha * 31   + nOffset, nColuna * 10.5, nLinha * 33.5 + nOffset, nColuna * 10.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 31   + nOffset, nColuna * 22.5, nLinha * 33.5 + nOffset, nColuna * 22.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 31   + nOffset, nColuna * 29.5, nLinha * 33.5 + nOffset, nColuna * 29.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 31   + nOffset, nColuna * 34.5, nLinha * 33.5 + nOffset, nColuna * 34.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 31   + nOffset, nColuna * 43.5, nLinha * 33.5 + nOffset, nColuna * 43.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 33.5 + nOffset, nColuna       , nLinha * 33.5 + nOffset, 570           , CLR_BLACK )  // Linha Horizontal

    // Dados LINE E
    oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 2   , STR0019         , oFont8  ) // Uso do Banco
    oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 2.5 , aDados[15]      , oFont10 )
    oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 11  , STR0020         , oFont8  ) // Carteira
    oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 11.5, aDados[23]      , oFont10 )
    oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 17  , STR0021         , oFont8  ) // Espécie
    oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 17.5, aDados[21]      , oFont10 )
    oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 23  , STR0022         , oFont8  ) // Quantidade
    oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 23.5, ''              , oFont10 )
    oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 35  , "(x)"+STR0023   , oFont8  ) // Valor
    oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 35.5, ''              , oFont10 )
    oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 44  , '(=) '+STR0024  , oFont8  ) // Valor Documento
    oPrint:SayAlign ( nLinha * 34.5 + nOffset, nColuna * 44.5, aDados[24]      , oFont10 , nColuna * 12, nLinha,, 1, 0) // Valor Documento

    // Desenho LINE E
    oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 10.5, nLinha * 36 + nOffset, nColuna * 10.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 16.5, nLinha * 36 + nOffset, nColuna * 16.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 22.5, nLinha * 36 + nOffset, nColuna * 22.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 34.5, nLinha * 36 + nOffset, nColuna * 34.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 43.5, nLinha * 36 + nOffset, nColuna * 43.5, CLR_BLACK )  // Divisor de Coluna
    oPrint:Line ( nLinha * 36   + nOffset, nColuna       , nLinha * 36 + nOffset, 570           , CLR_BLACK )   // Linha Horizontal

    // LINE F G H
    oPrint:Say      ( nLinha * 37 + nOffset, nColuna * 2   , STR0025, oFont8 ) // Instruções (Texto de responsabilidade do cedente)

    /* Bloco de mensagem - início */
    nMsg := 38.25

    If(!Empty(aDados[28]))
        oPrint:Say(nLinha * nMsg, nColuna * 2 , aDados[28] , oFont10)  // "Msg livre Descontos"
        nMsg += 1.25
    EndIf

    If(!Empty(aDados[29]))
        oPrint:Say(nLinha * nMsg, nColuna * 2 , aDados[29] , oFont10)  // "Msg livre Juros"
        nMsg += 1.25
    EndIf

    If(!Empty(aDados[30]))
        oPrint:Say(nLinha * nMsg, nColuna * 2 , aDados[30] , oFont10)  // "Msg livre multa"
        nMsg += 1.25
    EndIf

    If(!Empty(aDados[31]))
        oPrint:Say(nLinha * nMsg, nColuna * 2 , aDados[31] , oFont10)  // "Msg de abatimento"
    EndIf
    /* Bloco de mensagem - Final */

    oPrint:Say      ( nLinha * 37   + nOffset, nColuna * 44  , '(-) ' + STR0026  , oFont8 ) // Desconto/Abatimento
    oPrint:SayAlign ( nLinha * 37   + nOffset, nColuna * 44.5, ""                , oFont10 , nColuna * 12, nLinha,, 1, 0)

    oPrint:Say      ( nLinha * 39.5 + nOffset, nColuna * 44  , '(-) ' + STR0027  , oFont8 ) // Outras deduções
    oPrint:SayAlign ( nLinha * 39.5 + nOffset, nColuna * 44.5, ""                , oFont10 , nColuna * 12, nLinha,, 1, 0)

    oPrint:Say      ( nLinha * 42   + nOffset, nColuna * 44  , '(+) ' + STR0028  , oFont8 ) // Mora/Multa
    oPrint:SayAlign ( nLinha * 42   + nOffset, nColuna * 44.5, ""                , oFont10 , nColuna * 12, nLinha,, 1, 0)

    oPrint:Say      ( nLinha * 44.5 + nOffset, nColuna * 44  , '(+) ' + STR0029  , oFont8 ) // Outros Acréscimos
    oPrint:SayAlign ( nLinha * 44.5 + nOffset, nColuna * 44.5, ""                , oFont10 , nColuna * 12, nLinha,, 1, 0)

    oPrint:Say      ( nLinha * 47   + nOffset, nColuna * 44  , '(=) ' + STR0030  , oFont8 ) // Valor Cobrado
    oPrint:SayAlign ( nLinha * 47   + nOffset, nColuna * 44.5, ""                , oFont10 , nColuna * 12, nLinha,, 1, 0)

    // DESENHO F G H
    oPrint:Line ( nLinha * 36   + nOffset, nColuna * 43.5, nLinha * 48.5 + nOffset, nColuna * 43.5, CLR_BLACK ) // Linha Vertical
    oPrint:Line ( nLinha * 38.5 + nOffset, nColuna * 43.5, nLinha * 38.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
    oPrint:Line ( nLinha * 41   + nOffset, nColuna * 43.5, nLinha * 41   + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
    oPrint:Line ( nLinha * 43.5 + nOffset, nColuna * 43.5, nLinha * 43.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
    oPrint:Line ( nLinha * 46   + nOffset, nColuna * 43.5, nLinha * 46   + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
    oPrint:Line ( nLinha * 48.5 + nOffset, nColuna       , nLinha * 48.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal

    // LINE I
    oPrint:Say  ( nLinha * 49.5 + nOffset, nColuna * 2,  STR0006     , oFont8 )  // Sacado
    oPrint:Say  ( nLinha * 50.5 + nOffset, nColuna * 2,  SubStr(aDados[6],1,55)   , oFont10)
    oPrint:Say  ( nLinha * 50.5 + nOffset, nColuna * 30, STR0031     , oFont10)  // CPF/CNPJ
    oPrint:Say  ( nLinha * 50.5 + nOffset, nColuna * 35, aDados[7]   , oFont10)
    oPrint:Say  ( nLinha * 51.5 + nOffset, nColuna * 2,  SubStr(aDados[8],1,77)   , oFont10)  // End. Logradouro, Numero.
    oPrint:Say  ( nLinha * 52.5 + nOffset, nColuna * 2,  SubStr(aDados[32],1,77)   , oFont10)  // Bairro.
    oPrint:Say  ( nLinha * 53.5 + nOffset, nColuna * 2,  SubStr(aDados[9],1,77)   , oFont10)  // CEP Municipio - UF
    oPrint:Say  ( nLinha * 53.5 + nOffset, nColuna * 44, STR0032     , oFont8 )  // Cod Baixa
    oPrint:Line ( nLinha * 54 + nOffset, nColuna * 43.5, nLinha * 48.5 + nOffset, nColuna * 43.5, CLR_BLACK ) // Linha Vertical
    oPrint:Line ( nLinha * 54 + nOffset, nColuna       , nLinha * 54 + nOffset, 570, CLR_BLACK ) // Linha Horizontal

    // LINE J
    oPrint:Say  ( nLinha * 55 + nOffset, nColuna * 2 ,STR0033         , oFont8 ) // Beneficiário Final
    oPrint:SayAlign ( nLinha * 54.1 + nOffset, nColuna * 34.5, STR0002, oFont8 , nColuna * 12, nLinha,, 1, 0) // Autenticação Mecânica
    oPrint:SayAlign ( nLinha * 54 + nOffset, nColuna * 44.5, STR0034  , oFont11, nColuna * 12, nLinha,, 1, 0) // Ficha de Compensação

    // CÓDIGO DE BARRAS
    oPrint:FWMsBar("INT25", (46 + (nOffset * (43/500))), 1,aDados[13],oPrint,.F.,CLR_BLACK,.T.,0.025,0.8,.F.,,,.F.,,,.F.)
    oPrint:EndPage()

    FreeObj(oData)
    FreeObj(oFont8)
    FreeObj(oFont10)
    FreeObj(oFont11)
    FreeObj(oFont15)
    FreeObj(oFont14n)
    FwFreeArray(aDados)

Return
