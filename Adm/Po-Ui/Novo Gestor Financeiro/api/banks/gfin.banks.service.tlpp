#include 'tlpp-core.th'
#include 'gfin.banks.service.ch'

NameSpace gfin.api.banks
Using NameSpace gfin.util
Using NameSpace totvs.protheus.backoffice.ngf.util

Class BanksService FROM FWAdapterBaseV2
  Public Method new()
  Public Method getBancos()
  Public Method putBancos()
EndClass

Method new() Class BanksService
  _Super:new('GET')
  If MethIsMemberOf( self, "setUseSpaces", .T. )
    ::setUseSpaces(.T.)
  Endif
Return Self

/*/{Protheus.doc }getBancos
  Lista de bancos

  @param queryRequestParams As Json
  @param headers As Json

  @author renato.ito
  @since 16/03/2021
/*/

Method getBancos(jQueryParams As Json, jHeaders As Json) class BanksService
  Local jResponse         as Json
  Local lAllFields := .F. as Logical
  Local aFilter    := {}  as Array
  Local aFields    := {}  as Array
  Local aStruct    := {}  as Array
  Local aBranches  := {}  as Array

  // indica qual página devemos retornar
  If !(Empty(jQueryParams['page']))
    ::setPage(Val(jQueryParams['page']))
  EndIf

  // indica o tamanho da página
  If !(Empty(jQueryParams['pagesize']))
    ::setPageSize(Val(jQueryParams['pagesize']))
  EndIf
  // indica a ordem definida por querystring
  ::setOrderQuery(jQueryParams['order'])

  // indica o filtro querystring recebido (pode se utilizar um filtro oData)
  If !(Empty(jQueryParams['filter']))
    AAdd(aFilter, {"FILTER", jQueryParams['filter']})
    ::SetUrlFilter(aFilter)
  EndIf
  // trata as filiais encaminhadas no header para o filtro
  If !(Empty(jHeaders['branches']))
    aBranches := STRtokARR(jHeaders['branches'], ',')
  EndIf

  // Regra para definir os campos para o retorno
  // Se encaminhar allfields lista todos os campos da tabela
  If !(Empty(jQueryParams['allfields']))
    If ValType(jQueryParams['allfields']) <> "L"
      If "true" $ jQueryParams['allfields']
        lAllFields := .T.
      EndIf
    Else
      lAllFields := jQueryParams['allfields']
    EndIf
  EndIf
  // tratamento para os campos que serçao retornados
  If !lAllFields
    If !(Empty(jQueryParams['fields']))
      aFields := apiDefaultFields(STRtoArray(UPPER(jQueryParams['fields']), ','))
    else
      aFields := apiDefaultFields()
    EndIf
    totvs.protheus.backoffice.ngf.util.mapFieldsBaseV2(Self, @aStruct, aFields)
  Else
    totvs.protheus.backoffice.ngf.util.mapTableFieldsBaseV2(Self, @aStruct, 'SA6', FWModeAccess('SA6', 1) <> 'C')
  EndIf

  // Informa a Query a ser utilizada pela API
  ::SetQuery(apiBanksQuery())

  // configura o filtro de query padrão
  ::SetWhere(apiBanksQueryWhere(aBranches))

  // Informa a ordenação a ser Utilizada pela Query
  ::SetOrder(apiBanksQueryOrder())

  //Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
  If ::Execute()
    // Gera o arquivo Json com o retorno da Query
    ::FillGetResponse()
  EndIf

  jResponse := JsonObject():New()

  If ::lOk
    jResponse["result"]             := .T.
    jResponse["response"]           := JsonObject():New()
    jResponse["response"]:FromJson(::getJSONResponse())
    jResponse["response"]["struct"] := gfin.util.arrayToJson(aStruct)
  Else
    jResponse := answerErrorFormat(::GetCode(), ::GetMessage(), ::GetMessage())
  EndIf
  //faz a desalocação de objetos e arrays utilizados
  ::DeActivate()
Return jResponse


/*/{Protheus.doc }putBancos
  Atualização de bancos

  @param internalId as Character, chave do banco A6_FILIAL|A6_COD|A6_AGENCIA|A6_NUMCON
  @param body as Json, body da requisição

  @author renato.ito
  @since 16/03/2021
/*/
Method putBancos(internalId As Character , body As Json) Class BanksService
  Local bankId      As Array
  Local response    As Json
  Local fields      As Array
  Local field       As Numeric
  Local names       As Array
  Local lOk         As Logical

  lOk := .T.

  response := JsonObject():New()
  bankId   := STRtokARR(internalId, '|')
  names    := body:getNames()
  fields   := {}
  // adicina os campos e valores encaminhados no body
  For field := 1 To Len(names)
    AAdd(fields, {names[field],  IIF(ValType(body[names[field]]) $ 'J|O', body[names[field]]:toJson(), body[names[field]])})
  Next
  // Verifica se foi encaminhado um ID válido
  If Len(bankId) <> 4
    lOk := .F.
    errorMessage := STR0001
  EndIf
  // Verifica se foi encaminhado campos para alteração
  If lOk .And. Empty(fields)
    lOk := .F.
    errorMessage := STR0002
  EndIf

  If lOk
    response := banksUpdate(bankId, fields)
  Else
    response['result'] := .F.
    response['response'] := JsonObject():New()
    response['response']['errorMessage'] := errorMessage
  EndIf
Return response
