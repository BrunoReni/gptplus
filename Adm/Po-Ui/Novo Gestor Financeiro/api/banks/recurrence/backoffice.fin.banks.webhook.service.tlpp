#INCLUDE 'tlpp-core.th'
#INCLUDE 'BACKOFFICE.FIN.BANKS.WEBHOOK.SERVICE.CH'                                                                                                                                                                                                                      

Static __cError As Character

NameSpace totvs.backoffice.fin.banks.webhook

USING NAMESPACE totvs.backoffice.fin.banks.webhook.functions

Class BanksWebhookService

    Public Data jPayload        As Json
    Public Data cBank           As Character
    Public Data jResponse       As Json

    Public Method new()
    Public Method setBank(cBank)
    Public Method setPayLoad(jPayLoad)
    Public Method postPayLoad()
    Public Method postPayLoad001()
    Public Method posicionaSE1(cIdCnab)
    Public Method getRecSEA()
    Public Method gravaF79()
    Public Method gravaF7A()
    Public Method getRespons()
    Public Method isCancFI2()
    Public Method execFina070()
    Public Method execFina060()
    
EndClass


/*/{Protheus.doc} new
	construtor da classe
	@author rafael.rondon
	@since 10/02/2023
/*/
Method new() Class BanksWebhookService

    ::cBank     := ''
    ::jPayload  := JsonObject():new()
    ::jResponse := JsonObject():new()    
    SetFunName('WEBHOOK')       // Utilizado para identificar na baixa(FK1_ORIGEM) e no FINA060 para não solicitar cancelamento novamente FI2

Return Self

/*/{Protheus.doc} getRespons
	retorna o response para o rest
	@author rafael.rondon
	@since 10/02/2023
/*/
Method getRespons() Class BanksWebhookService

Return ::jResponse:ToJson()

/*/{Protheus.doc} SetBank
	seta o banco (febraban) sendo utilizado
	@author rafael.rondon
	@since 10/02/2023
/*/
Method setBank(cBank As Character) Class BanksWebhookService
    
    ::cBank := cBank

Return

/*/{Protheus.doc} SetPayLoad
	seta payload json
	@author rafael.rondon
	@since 10/02/2023
/*/
Method setPayLoad(jPayload As jSon) Class BanksWebhookService

    //::jPayload := ::jPayload:FromJson(jPayload:ToJson())
    ::jPayload:FromJson(jPayload:ToJson())

Return


/*/{Protheus.doc} PostPayLoad
	processa payload
	@author rafael.rondon
	@since 10/02/2023
/*/
Method postPayLoad() Class BanksWebhookService

Do Case
    Case ::cBank == '001'
        Self:postPayLoad001()

EndCase

Return 


/*/{Protheus.doc} PostPayLoad001
	processa payload para o banco do Brasil
	@author rafael.rondon
	@since 10/02/2023
/*/
Method postPayLoad001() Class BanksWebhookService

    Local jLayout       := JsonObject():New()                   As Json
    Local jTitulo       := JsonObject():New()                   As Json
    Local jGravarF79    := JsonObject():New()                   As Json
    Local jGravarF7A    := JsonObject():New()                   As Json
    Local jNossoNum     := JsonObject():New()                   As Json
    Local jFINA070      := JsonObject():New()                   As Json
    Local jApiMsg       := JsonObject():New()                   As Json
    Local nRecnoSEE     := 0                                    As Numeric
    Local nRecnoSA6     := 0                                    As Numeric
    Local nRecnoSEA     := 0                                    As Numeric
    Local nI            := 0                                    As Numeric
    Local nConvenioAnt  := 0                                    As Numeric          // Numerio do convenio anterior
    Local bError        := Errorblock({|e| ErrorPay(e) })       As CodeBlock
    Local lContinua     := .T.                                  As Logical
    Local lLogF79       := .T.                                  As Logical
    Local lGravaSEA     := .F.                                  As Logical    
    Local aRetF79       := {}                                   As Array    
    Local aFINA070      := {}                                   As Array    
    Local aFINA060      := {}                                   As Array    
    Local cDtMovi       := ""                                   As Character
    Local cDtCred       := ""                                   As Character
    Local cSituaca      := ""                                   As Character

    DbSelectArea("FI2")
    DbSelectArea("SEE")
    DbSelectArea("SA6")
    DbSelectArea("SEA")
    DbSelectArea("SE1")

    For nI := 1 To Len(::jPayload)

        BEGIN SEQUENCE

            lContinua     := .T. 
            lLogF79       := .T.
            lGravaSEA     := .F.
            jLayout       := JsonObject():New()
            jTitulo       := JsonObject():New()
            jGravarF79    := JsonObject():New()
            jGravarF7A    := JsonObject():New()
            jNossoNum     := JsonObject():New()                           
            jApiMsg       := JsonObject():New()                           
            nRecnoSEA     := 0

            // Enquanto o convenio for o mesmo, nao pesquisar SEE e SA6 novamente
            If nConvenioAnt <> ::jPayload[nI]['numeroConvenio']
                nRecnoSEE     := 0                 
                nRecnoSA6     := 0                 
            EndIf

            /*
                Posicionar SEE
            */
            If lContinua
                nConvenioAnt := ::jPayload[nI]['numeroConvenio']
                If nRecnoSEE == 0
                    nRecnoSEE := totvs.protheus.backoffice.ngf.bills.recurrence.bb.getRecnoSEE( cValToChar(::jPayload[nI]['numeroConvenio']) )
                EndIf
                If nRecnoSEE > 0                    
                    SEE->(DbGoTo(nRecnoSEE))                    
                Else
                    lContinua := .F.
                    jGravarF79['f79Json']       := ::jPayload[nI]

                    jGravarF7A['status']        := '1'
                    jGravarF7A['msgexecauto']   := STR0001 + cValToChar(::jPayload[nI]['numeroConvenio'])                    //'Parametros de banco (SEE) não encontrado configurado para recebimento on-line (EE_RETAUT = 4) e Convênio (EE_CODEMP) igual a: '
                EndIf
            EndIf

            /*
                Posicionar SA6
            */
            If lContinua
                If nRecnoSA6 == 0
                    nRecnoSA6 := getRecnoSA6(SEE->EE_CODIGO, SEE->EE_AGENCIA, SEE->EE_CONTA, '001')
                EndIf
                If nRecnoSA6 > 0
                    SA6->(DbGoTo(nRecnoSA6))                     
                    jLayout:FromJson(SA6->A6_CFGBOL) 
                Else
                    lContinua := .F.
                    jGravarF79['f79Json']   := ::jPayload[nI]
                    jGravarF79['agencia']   := SEE->EE_AGENCIA
                    jGravarF79['conta']     := SEE->EE_CONTA

                    jGravarF7A['status']    := '1'                    
                    jGravarF7A['msgexecauto'] := STR0002  + SEE->EE_CODIGO + ', ' + SEE->EE_AGENCIA + ', ' + SEE->EE_CONTA //'Cadastro de banco (SA6) não encontrado configurado para retorno bancário para o banco, agência e conta: '
                EndIf
            EndIf

            /*
                Consulta Título Individual
            */
            If lContinua

                jNossoNum['numeroBoletoBB'] := ::jPayload[nI]['id']
                If ::jPayload[nI]:hasProperty('lautomato') // Utilizado para automação de testes
                    jTitulo['response'] := ::jPayload[nI]['lautomato']
                    ::jPayload[nI]:delName('lautomato')
                Else
                    jTitulo := totvs.protheus.backoffice.ngf.bills.recurrence.bb.ConBBTit(jNossoNum, jLayout)
                EndIf
                If !jTitulo:hasProperty('response')

                    lContinua := .F.
                    jGravarF79['f79Json']   := ::jPayload[nI]
                    jGravarF79['agencia']   := SEE->EE_AGENCIA
                    jGravarF79['conta']     := SEE->EE_CONTA

                    jGravarF7A['status']    := '1'                    
                    jGravarF7A['msgexecauto'] := STR0003 + jNossoNum['numeroBoletoBB'] // "Falha na consulta individual do boleto no Banco do Brasil para o Nosso Número: "
                    jGravarF7A['consultaTitulo'] := jTitulo
                EndIf
            EndIf

            
            /*
                Procurar e posicionar SE1 pelo IDCNAB
            */
            If lContinua
                If Self:posicionaSE1(jTitulo['response']['textoCampoUtilizacaoCedente']) // IDCNAB

                    cFilAnt := SE1->E1_FILORIG

                Else
                    lContinua := .F.
                    jGravarF79['f79Json']   := ::jPayload[nI]
                    jGravarF79['agencia']   := SEE->EE_AGENCIA
                    jGravarF79['conta']     := SEE->EE_CONTA                    
                    jGravarF79['estadoCobranca']    := jTitulo['response']['codigoEstadoTituloCobranca']

                    jGravarF7A['status']	:= "1"
                    jGravarF7A['msgexecauto'] := STR0004 + jTitulo['response']['textoCampoUtilizacaoCedente'] // "Título não encontrado pelo (E1_IDCNAB): "
                    jGravarF7A['consultaTitulo'] := jTitulo

                EndIf
            EndIf

            /*
                Posicionar SEA
            */
            If lContinua
                nRecnoSEA := Self:getRecSEA()
                If nRecnoSEA > 0                    
                    SEA->(DbGoTo(nRecnoSEA))
                Else
                    lContinua := .F.

                    /*
                        Não logar F7A caso o cancelamento foi solicitado pelo sistema (FI2)
                    */
                    If Self:isCancFI2()
                        lLogF79 := .F.
                    Else
                        jGravarF79['f79Json']   := ::jPayload[nI]
                        jGravarF79['agencia']   := SEE->EE_AGENCIA
                        jGravarF79['conta']     := SEE->EE_CONTA  
                        jGravarF79['estadoCobranca']    := jTitulo['response']['codigoEstadoTituloCobranca']

                        jGravarF7A['filori']			:= SE1->E1_FILORIG
                        jGravarF7A['prefixo']			:= SE1->E1_PREFIXO
                        jGravarF7A['numero']			:= SE1->E1_NUM
                        jGravarF7A['parcela']			:= SE1->E1_PARCELA
                        jGravarF7A['tipo']				:= SE1->E1_TIPO
                        jGravarF7A['cliente']			:= SE1->E1_CLIENTE
                        jGravarF7A['loja']				:= SE1->E1_LOJA
                        jGravarF7A['emissao']			:= SE1->E1_EMISSAO
                        jGravarF7A['valor']				:= SE1->E1_VALOR
                        jGravarF7A['multa']				:= jTitulo['response']['valorMultaRecebido']
                        jGravarF7A['desconto']			:= jTitulo['response']['valorDescontoUtilizado']
                        jGravarF7A['juros']				:= jTitulo['response']['valorJuroMoraRecebido']
                        jGravarF7A['bordero']			:= SE1->E1_NUMBOR
                        jGravarF7A['estadocobranca']	:= jTitulo['response']['codigoEstadoTituloCobranca']
                        jGravarF7A['status']			:= "1"
                        jGravarF7A['msgexecauto']		:= STR0005 // 'Não foi possível localizar o borderô'
                        jGravarF7A['consultaTitulo']	:= jTitulo                    
                    EndIf
                EndIf
            EndIf

            /*
                Prepara dados para baixa/transferência
            */
            If lContinua
                If cValToChar(jTitulo['response']['codigoEstadoTituloCobranca']) $ "5|7|9" // FINA060

                    If jTitulo['response']['codigoEstadoTituloCobranca'] == 7
                        cSituaca := "0"
                    Else
                        cSituaca := jLayout['retornoBancario']['protestos']
                    Endif

                    cDtMovi := Substr(::jPayload[nI]['dataAgendamento'],1,10)

                    aFINA060 := dadosFina060(cSituaca,CToD(cDtMovi))
                    jFINA060 := Self:execFina060(aFINA060)
                    If jFINA060['baixouExecAuto'] == 'sim'
                        lGravaSEA := .T.
                    Else
                        lContinua := .F.
                        jGravarF79['f79Json']   := ::jPayload[nI]
                        jGravarF79['agencia']   := SEE->EE_AGENCIA
                        jGravarF79['conta']     := SEE->EE_CONTA  
                        jGravarF79['estadoCobranca']    := jTitulo['response']['codigoEstadoTituloCobranca']

                        jGravarF7A['filori']			:= SE1->E1_FILORIG
                        jGravarF7A['prefixo']			:= SE1->E1_PREFIXO
                        jGravarF7A['numero']			:= SE1->E1_NUM
                        jGravarF7A['parcela']			:= SE1->E1_PARCELA
                        jGravarF7A['tipo']				:= SE1->E1_TIPO
                        jGravarF7A['cliente']			:= SE1->E1_CLIENTE
                        jGravarF7A['loja']				:= SE1->E1_LOJA
                        jGravarF7A['emissao']			:= SE1->E1_EMISSAO
                        jGravarF7A['valor']				:= SE1->E1_VALOR
                        jGravarF7A['multa']				:= jTitulo['response']['valorMultaRecebido']
                        jGravarF7A['desconto']			:= jTitulo['response']['valorDescontoUtilizado']
                        jGravarF7A['juros']				:= jTitulo['response']['valorJuroMoraRecebido']
                        jGravarF7A['bordero']			:= SE1->E1_NUMBOR
                        jGravarF7A['estadocobranca']	:= jTitulo['response']['codigoEstadoTituloCobranca']
                        jGravarF7A['status']			:= "1"
                        jGravarF7A['msgexecauto']		:= jFINA060['msgexecauto']
                        jGravarF7A['consultaTitulo']	:= jTitulo 
                    EndIf

                ElseIf cValToChar(jTitulo['response']['codigoEstadoTituloCobranca']) == '6' // FINA070

                    cDtMovi := jTitulo['response']['dataRecebimentoTitulo']
                    cDtMovi := SubStr(cDtMovi, 7, 4) + SubStr(cDtMovi, 4, 2) + SubStr(cDtMovi, 1, 2)

                    cDtCred := jTitulo['response']['dataCreditoLiquidacao']
                    cDtCred := SubStr(cDtCred, 7, 4) + SubStr(cDtCred, 4, 2) + SubStr(cDtCred, 1, 2)

                    jTitulo := totvs.protheus.backoffice.ngf.bills.recurrence.bb.separaMultaJurosBB(jTitulo)    // Separa multa e juros no mesmo campo.

                    aFINA070 := dadosFina070(   StoD(cDtMovi)                                   , ;
                                                StoD(cDtCred)                                   , ;
                                                jLayout                                         , ;
                                                ::jPayload[nI]['valorPagoSacado']               , ;
                                                jTitulo['response']['valorDescontoUtilizado']   , ;
                                                jTitulo['multaSeparada']                        , ;
                                                jTitulo['juroSeparado']                         )
                    jFINA070 := Self:execFina070(aFINA070)
                    If jFINA070['baixouExecAuto'] == 'sim'
                        lGravaSEA := .T.
                    Else
                        lContinua := .F.
                        jGravarF79['f79Json']   := ::jPayload[nI]
                        jGravarF79['agencia']   := SEE->EE_AGENCIA
                        jGravarF79['conta']     := SEE->EE_CONTA  
                        jGravarF79['estadoCobranca']    := jTitulo['response']['codigoEstadoTituloCobranca']

                        jGravarF7A['filori']			:= SE1->E1_FILORIG
                        jGravarF7A['prefixo']			:= SE1->E1_PREFIXO
                        jGravarF7A['numero']			:= SE1->E1_NUM
                        jGravarF7A['parcela']			:= SE1->E1_PARCELA
                        jGravarF7A['tipo']				:= SE1->E1_TIPO
                        jGravarF7A['cliente']			:= SE1->E1_CLIENTE
                        jGravarF7A['loja']				:= SE1->E1_LOJA
                        jGravarF7A['emissao']			:= SE1->E1_EMISSAO
                        jGravarF7A['valor']				:= SE1->E1_VALOR
                        jGravarF7A['multa']				:= jTitulo['response']['valorMultaRecebido']
                        jGravarF7A['desconto']			:= jTitulo['response']['valorDescontoUtilizado']
                        jGravarF7A['juros']				:= jTitulo['response']['valorJuroMoraRecebido']
                        jGravarF7A['bordero']			:= SE1->E1_NUMBOR
                        jGravarF7A['estadocobranca']	:= jTitulo['response']['codigoEstadoTituloCobranca']
                        jGravarF7A['status']			:= "1"
                        jGravarF7A['msgexecauto']		:= jFINA070['msgexecauto']
                        jGravarF7A['consultaTitulo']	:= jTitulo                         
                    EndIf

                Else
                    /*
                        Estado de cobrança diferente de 5,6,7,9. Não temos ação de baixa nem de transferência.
                    */
                    lContinua := .F.
                    jGravarF79['f79Json']   := ::jPayload[nI]
                    jGravarF79['agencia']   := SEE->EE_AGENCIA
                    jGravarF79['conta']     := SEE->EE_CONTA  
                    jGravarF79['estadoCobranca']    := jTitulo['response']['codigoEstadoTituloCobranca']

                    jGravarF7A['filori']			:= SE1->E1_FILORIG
                    jGravarF7A['prefixo']			:= SE1->E1_PREFIXO
                    jGravarF7A['numero']			:= SE1->E1_NUM
                    jGravarF7A['parcela']			:= SE1->E1_PARCELA
                    jGravarF7A['tipo']				:= SE1->E1_TIPO
                    jGravarF7A['cliente']			:= SE1->E1_CLIENTE
                    jGravarF7A['loja']				:= SE1->E1_LOJA
                    jGravarF7A['emissao']			:= SE1->E1_EMISSAO
                    jGravarF7A['valor']				:= SE1->E1_VALOR
                    jGravarF7A['multa']				:= jTitulo['response']['valorMultaRecebido']
                    jGravarF7A['desconto']			:= jTitulo['response']['valorDescontoUtilizado']
                    jGravarF7A['juros']				:= jTitulo['response']['valorJuroMoraRecebido']
                    jGravarF7A['bordero']			:= SE1->E1_NUMBOR
                    jGravarF7A['estadocobranca']	:= jTitulo['response']['codigoEstadoTituloCobranca']
                    jGravarF7A['status']			:= "1"
                    jGravarF7A['msgexecauto']		:= STR0006 + cValToChar(jTitulo['response']['codigoEstadoTituloCobranca']) // 'Estado de Cobrança (Processo) não identificado para baixa/transferência: '
                    jGravarF7A['consultaTitulo']	:= jTitulo                     
                EndIf
            EndIf        
            
            /*
                Gravar Payload recebido na SEA quando realizada baixa/transferência
            */
            If lGravaSEA
                jApiMsg:FromjSon(SEA->EA_APIMSG)
                jApiMsg['PayloadWebhook'] := ::jPayload[nI]
                RecLock("SEA",.F.)                
                    SEA->EA_APIMSG  := jApiMsg:ToJSON()
                SEA->(MsUnlock())
            EndIf
            /*
                Grava Erros
            */
            If !lContinua .AND. lLogF79
                aRetF79 := Self:gravaF79(jGravarF79)
                jGravarF7A['filial'] := aRetF79[1]
                jGravarF7A['codigo'] := aRetF79[2]
                Self:gravaF7A(jGravarF7A)
            EndIf

        RECOVER
        
            /*
                Logar caso ocorra erro no processamento
            */

            jGravarF79['f79Json']           := ::jPayload[nI]
            jGravarF7A['consultaTitulo']    := ::jPayload[nI]
            If nRecnoSEE > 0
                jGravarF79['agencia']   := SEE->EE_AGENCIA
                jGravarF79['conta']     := SEE->EE_CONTA  
            EndIf
            If jTitulo:hasProperty('response')
                jGravarF79['estadoCobranca']    := jTitulo['response']['codigoEstadoTituloCobranca']
                jGravarF7A['consultaTitulo']    := jTitulo
            EndIf
            jGravarF7A['status']	:= "1"	
            jGravarF7A['msgexecauto'] := __cError
            FwLogMsg('ERROR',, "WEBHOOKBOL", "WEBHOOKBOL", "", 'Error_Bank_001', jGravarF7A['msgexecauto'] )
            				
            aRetF79 := Self:gravaF79(jGravarF79)
            jGravarF7A['filial'] := aRetF79[1]
            jGravarF7A['codigo'] := aRetF79[2]
            Self:gravaF7A(jGravarF7A)


        END SEQUENCE

        ErrorBlock( bError )
    
    Next nI

Return Self



/*/{Protheus.doc} posicionaSE1
	Posicionar SE1 pelo id cnab
	@author rafael.rondon
	@since 10/02/2023
/*/
Method posicionaSE1(cIdCnab As Character) Class BanksWebhookService

    Local lRet  As Logical
    lRet := FINA715SE1(cIdCnab)

Return lRet


/*/{Protheus.doc} getRecSEA
	Retorna recno SEA
	@author rafael.rondon
	@since 10/02/2023
/*/
Method getRecSEA() Class BanksWebhookService

    Local nRecnoSEA  As Numeric
    nRecnoSEA := totvs.protheus.backoffice.ngf.bills.recurrence.bb.getRecSEA(SE1->E1_FILORIG, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_NUMBOR)

Return nRecnoSEA


/*/{Protheus.doc} gravaF7A
	Gravar F7A
	@author rafael.rondon
	@since 10/02/2023
/*/
Method gravaF7A(jGravarF7A As Json) Class BanksWebhookService

    totvs.protheus.backoffice.ngf.bills.recurrence.bb.GrvF7A(jGravarF7A)

Return

/*/{Protheus.doc} gravaF79
	Gravar F79
	@author rafael.rondon
	@since 10/02/2023
/*/
Method gravaF79(jF79Json As Json, jF7A As Json) Class BanksWebhookService

	Local aF79	:= {}	As Array
	
	BEGIN TRANSACTION 
		RecLock('F79', .T.)
			F79->F79_FILIAL := xFilial('F79')
			F79->F79_CODIGO := GetSxENum("F79", "F79_CODIGO",,3)
            If jF79Json:hasProperty('estadoCobranca')
			    F79->F79_ESTCOB	:= StrZero(jF79Json['estadoCobranca'], 2)
            EndIf
			F79->F79_BANCO  := Self:cBank
            If jF79Json:hasproperty('agencia')            
			    F79->F79_AGENCI := jF79Json['agencia']
            EndIf
            If jF79Json:hasproperty('conta')            
			    F79->F79_CONTA  := jF79Json['conta']
            EndIf
			F79->F79_DTPROC := Date()
			F79->F79_HRPROC := Time()
			F79->F79_QTDTIT := '1'
			F79->F79_NBAIXA := '1'
			F79->F79_QTPROC := '0'
			F79->F79_RECPAG := 'R'
            If jF79Json:hasproperty('f79Json')            
			    F79->F79_JSON   := jF79Json['f79Json']:ToJSON()
            EndIf
		F79->(MsUnLock())

        ConfirmSX8()
        
	END  TRANSACTION 

	AADD( aF79 , F79->F79_FILIAL)
	AADD( aF79 , F79->F79_CODIGO)

Return aF79

/*/{Protheus.doc} isCancFI2
	Verifica se o cancelamento foi feito pelo FI2
	@author rafael.rondon
	@since 10/02/2023
/*/
Method isCancFI2() Class BanksWebhookService

    Local lRet  As Logical    
    lRet := (FindFunction('F713VldAlCa') .AND. F713VldAlCa() .AND. IsFI2Canc())

Return lRet


/*/{Protheus.doc} execFina070
	Execauto FINA070
	@author rafael.rondon
	@since 10/02/2023
/*/
Method execFina070(aFINA070 As Array) Class BanksWebhookService

    Local jRetBaixa	        As Json

	Private lMsErroAuto 	:= .F. As Logical
	Private lMsHelpAuto 	:= .T. As Logical
	Private lAutoErrNoFile	:= .T. As Logical

	MSExecAuto({|x,y| Fina070(x,y)}, aFINA070, 3)
	
    jRetBaixa	:= JsonObject():New()
	jRetBaixa['baixouExecAuto']	:= 'sim'

	If lMsErroAuto			
		jRetBaixa['baixouExecAuto']	:= 'nao'
        jRetBaixa['msgexecauto']	:= totvs.protheus.backoffice.ngf.util.GetError()        
    EndIf

Return jRetBaixa

/*/{Protheus.doc} execFina060
	Execauto FINA060
	@author rafael.rondon
	@since 10/02/2023
/*/
Method execFina060(aFINA060 As Array) Class BanksWebhookService

    Local jRetBaixa	        As Json

	Private lMsErroAuto 	:= .F. As Logical
	Private lMsHelpAuto 	:= .T. As Logical
	Private lAutoErrNoFile	:= .T. As Logical
	
    MsExecAuto({|x,y| FINA060(x,y)}, 2, aFINA060)
	
    jRetBaixa	:= JsonObject():New()
	jRetBaixa['baixouExecAuto']	:= 'sim'

	If lMsErroAuto			
		jRetBaixa['baixouExecAuto']	:= 'nao'
        jRetBaixa['msgexecauto']	:= totvs.protheus.backoffice.ngf.util.GetError()        
    EndIf

Return jRetBaixa



/*/{Protheus.doc} ErrorF79(

	Bloco executado quando ocorre erro no processamento do payload
	
	@type function
	@version 12.1.33
	@author rafael.rondon
	@since 29/08/2022
	@param cFilF79 , character, código da filial
	@return 
/*/
Static Function ErrorPay(e)

	__cError := e:Description + e:ErrorStack
	Break(e)

Return




