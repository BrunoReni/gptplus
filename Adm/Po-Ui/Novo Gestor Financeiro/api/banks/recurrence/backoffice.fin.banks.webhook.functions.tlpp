#INCLUDE 'tlpp-core.th'
#Include "FWLIBVERSION.CH"

Static __oRecnoA6  	As Object
Static __oCancFI2  	As Object
Static __lExecSt	:= FwLibVersion() >= "20211116"			As Logical

NameSpace totvs.backoffice.fin.banks.webhook.functions

/*/{Protheus.doc} dadosFina070()
	Função para montar array para execauto FINA070
	@type function
	@version 12.1.33
	@author rafael.rondon
	@since 16/02/2023
	@return Array para execauto FINA070
/*/

Function dadosFina070(	dDtMovi As Date		, dDtCred As Date		, jLayout As Json	, nAutValRec As Numeric, ;
						nAutDesc As Numeric	, nAutMulta As Numeric	, nAutJuros As Numeric						) As Array

	Local aVetor	:= {}  As Array

	Default dDtMovi		:= dDataBase
	Default dDtCred		:= dDataBase
	Default nAutValRec	:= 0
	Default nAutDesc	:= 0
	Default nAutMulta	:= 0
	Default nAutJuros	:= 0


	AAdd(aVetor, { "E1_PREFIXO", SE1->E1_PREFIXO		, Nil })
	AAdd(aVetor, { "E1_NUM"    , SE1->E1_NUM    		, Nil })
	AAdd(aVetor, { "E1_PARCELA", SE1->E1_PARCELA		, Nil })
	AAdd(aVetor, { "E1_TIPO"   , SE1->E1_TIPO      		, Nil })
	AAdd(aVetor, { "E1_CLIENTE", SE1->E1_CLIENTE		, Nil })
	AAdd(aVetor, { "E1_LOJA"   , SE1->E1_LOJA      		, Nil })

	AAdd(aVetor, { "AUTHIST"     , jLayout['retornoBancario']['historicoBaixa'] , Nil })
	AAdd(aVetor, { "AUTMOTBX"    , "NOR"     , Nil })
	AAdd(aVetor, { "AUTDTBAIXA"  , dDtMovi   , Nil })
	AAdd(aVetor, { "AUTDTCREDITO", dDtCred   , Nil })

	AAdd(aVetor, { "AUTDESCONT"  , nAutDesc        		 , Nil })
	AAdd(aVetor, { "AUTMULTA"    , nAutMulta		     , Nil })
	AAdd(aVetor, { "AUTJUROS"    , nAutJuros	    	 , Nil })
	AAdd(aVetor, { "AUTOUTGAS"   , 0	    			 , Nil })
	AAdd(aVetor, { "AUTVLRPG"    , 0        			 , Nil })
	AAdd(aVetor, { "AUTVLRME"    , 0	    			 , Nil })

	AAdd(aVetor, { "AUTVALREC" , nAutValRec, Nil })

	AAdd(aVetor, { "AUTBANCO"  , SEA->EA_PORTADO		, Nil })
	AAdd(aVetor, { "AUTAGENCIA", SEA->EA_AGEDEP			, Nil })
	AAdd(aVetor, { "AUTCONTA"  , SEA->EA_NUMCON			, Nil })

Return aVetor


/*/{Protheus.doc} dadosFina060()
	Função para montar array para execauto FINA060
	@type function
	@version 12.1.33
	@author rafael.rondon
	@since 16/02/2023
	@return Array para execauto FINA060
/*/

Function dadosFina060(cSituaca As Character, dDtMovi As Date) As Array

	Local aVetor	:= {}		As Array
	Local cBanco	:= " "		As Character
	Local cAgencia	:= " "		As Character
	Local cConta	:= " "		As Character
	Local cNumBco	:= " "		As Character	

	Default cSituaca	:= "0"
	Default dDtMovi		:= dDataBase

	AAdd(aVetor, { "E1_PREFIXO", SE1->E1_PREFIXO		, Nil })
	AAdd(aVetor, { "E1_NUM"    , SE1->E1_NUM    		, Nil })
	AAdd(aVetor, { "E1_PARCELA", SE1->E1_PARCELA		, Nil })
	AAdd(aVetor, { "E1_TIPO"   , SE1->E1_TIPO      		, Nil })
	AAdd(aVetor, { "E1_CLIENTE", SE1->E1_CLIENTE		, Nil })
	AAdd(aVetor, { "E1_LOJA"   , SE1->E1_LOJA      		, Nil })

	AAdd(aVetor, { "AUTSITUACA"  , PadR(cSituaca, TamSX3("E1_SITUACA")[1])	, Nil })
	AAdd(aVetor, { "AUTNUMBCO"   , PadR(cNumBco , TamSX3("E1_NUMBCO")[1]) 	, Nil })
	AAdd(aVetor, { "AUTDATAMOV"  , dDtMovi									, Nil })

	AAdd(aVetor, { "AUTBANCO"  , PadR(cBanco  , TamSX3("EA_PORTADO")[1])	, Nil })
	AAdd(aVetor, { "AUTAGENCIA", PadR(cAgencia, TamSX3("EA_AGEDEP")[1]) 	, Nil })
	AAdd(aVetor, { "AUTCONTA"  , PadR(cConta  , TamSX3("EA_NUMCON")[1]) 	, Nil })

Return aVetor



/*/{Protheus.doc} getRecnoSA6
	Busca SA6
	@type function JOB
	@param 		cNumeroConvenio		, Character		, Numero convenio (vem no payload)
	@version 12.1.33
	@author rafael.rondon
	@since 10/02/2023
	@return 	nRecnoSA6		numeric - recno da SEE configurada para retorno 
/*/
Function getRecnoSA6(cBank As Character , cAgency AS Character , cAccount As Character, cBankOfi As Character ) As Numeric

	Local cQuery 	As Character
	Local nRecnoSA6	As Numeric

	nRecnoSA6 := 0

	If __oRecnoA6 == NIl

		cQuery := " SELECT SA6.R_E_C_N_O_ AS RECNOA6 FROM " + RetSqlName("SA6") + " SA6 "
		cQuery += " WHERE SA6.D_E_L_E_T_  = ' ' "	
		cQuery += " AND SA6.A6_COD = ? "
		cQuery += " AND SA6.A6_AGENCIA = ? "
		cQuery += " AND SA6.A6_NUMCON = ? "
		cQuery += " AND SA6.A6_BCOOFI = ? "
		cQuery += " AND SA6.A6_CFGAPI = '3' "
		If SA6->(ColumnPos("A6_MSBLQL")) > 0
			cQuery += " AND A6_MSBLQL <> '1' "
		EndIf
		cQuery += "  AND (	SA6.A6_BLOCKED <> '1' "
		cQuery += " 		OR (SA6.A6_BLOCKED = '1' AND SA6.A6_DTBLOQ > ? ) "
		cQuery += " 	) "
		cQuery += " ORDER BY SA6.A6_FILIAL, SA6.A6_COD, SA6.A6_AGENCIA, SA6.A6_NUMCON "				

		cQuery	:= ChangeQuery(cQuery)

		If __lExecSt
			__oRecnoA6 := FwExecStatement():new(cQuery)
		Else
			__oRecnoA6 := FWPreparedStatement():New(cQuery)
		Endif		

	EndIf

	__oRecnoA6:SetString(1,cBank)
	__oRecnoA6:SetString(2,cAgency)
	__oRecnoA6:SetString(3,cAccount)
	__oRecnoA6:SetString(4,cBankOfi)
	__oRecnoA6:SetString(5,DtoS(dDataBase))

	If __lExecSt
		nRecnoSA6 := __oRecnoA6:ExecScalar('RECNOA6')
	Else
		nRecnoSA6 := MPSysExecScalar(__oRecnoA6:GetFixQuery(), "RECNOA6")
	Endif	

Return nRecnoSA6


/*/{Protheus.doc} IsFI2Canc()
	Verifica se foi solicitado cancelamento do titulo pelo FI2
	@type function
	@version 12.1.33
	@author rafael.rondon
	@since 30/01/2023
	@return Logical
/*/
Function IsFI2Canc() As Logical

    Local lRet     		As Logical
    Local cQuery        As Character

	If __oCancFI2 == Nil
		cQuery := " SELECT FI2_TITULO FROM " + RetSqlName("FI2") + " FI2 "
		cQuery += " WHERE FI2.D_E_L_E_T_ = ' ' "
		cQuery += " AND FI2_FILIAL = ? "
		cQuery += " AND FI2_PREFIX = ? "
		cQuery += " AND FI2_TITULO = ? "
		cQuery += " AND FI2_PARCEL = ? "
		cQuery += " AND FI2_TIPO = ? "
		cQuery += " AND FI2_BORAPI = 'S' "
		cQuery += " AND FI2_OPEAPI = 'C' "
		cQuery += " AND FI2_TRANSF = 'S' "

		cQuery := ChangeQuery(cQuery)

		If __lExecSt
			__oCancFI2 := FwExecStatement():new(cQuery)
		Else
			__oCancFI2 := FWPreparedStatement():New(cQuery)
		Endif	
	EndIf

    __oCancFI2:SetString(1,xFilial("FI2"))
	__oCancFI2:SetString(2,SE1->E1_PREFIXO)
	__oCancFI2:SetString(3,SE1->E1_NUM)
	__oCancFI2:SetString(4,SE1->E1_PARCELA)
	__oCancFI2:SetString(5,SE1->E1_TIPO)

	If __lExecSt
		lRet := !Empty(__oCancFI2:ExecScalar('FI2_TITULO'))
	Else
		lRet := !Empty(MPSysExecScalar(__oCancFI2:GetFixQuery(), "FI2_TITULO"))
	Endif	

Return lRet
