#include 'tlpp-core.th'
#include 'gfin.banks.data.ch'
#Include 'FwSchedule.ch'
#include 'totvs.ch'

NameSpace gfin.api.banks
using namespace gfin.util

/*/
{Protheus.doc} apiDefaultFields
  campos default para retorno

  @return  array, lista de campos

  @author Renato Ito
  @since 01/03/2021
/*/
Function apiDefaultFields(aApiFields as Array) As Array
  Local cFields := '' as character
  Local nField  := 0  as numeric
  Default aApiFields := {}

  cFields := 'A6_FILIAL,A6_COD,A6_AGENCIA,A6_NUMCON,A6_NOME,A6_NREDUZ'

  for nField := 1 to len(aApiFields)
    if !(aApiFields[nField] $ cfields)
      cfields += ',' + aApiFields[nField]
    endif
  next
  // retira o campo de filial se for compartilhado
  if FWModeAccess('SA6', 1) == 'C'
    strTran(cfields, 'A6_FILIAL,', '')
  endif
Return STRtoArray(cFields, ',')

/*/
{Protheus.doc} apiBanksQuery
  query padrão para listagem de bancos

  @return  query As Character, query

  @author Renato Ito
  @since 01/03/2021
/*/
Function apiBanksQuery() As Character
  Local query As Character

  query := " SELECT #QueryFields#"
  query += " FROM " + RetSqlName('SA6') + " SA6"
  query += " WHERE #QueryWhere#"
Return query

/*/
{Protheus.doc} apiBanksQueryWhere
  condição padrão para query

  @return  queryWhere As Character, condição

  @author Renato Ito
  @since 01/03/2021
/*/
Function apiBanksQueryWhere(branches As Array) As Character
  Local queryWhere As Character

  queryWhere := "SA6.D_E_L_E_T_ = ' ' "
  If !Empty(branches)
    queryWhere += "AND SA6.A6_FILIAL IN (" + gfin.util.branchesFormatToIn(branches, 'SA6') + ")"
  EndIf
Return queryWhere

/*/
  {Protheus.doc} apiBanksQueryOrder
  ordenação padrão para query

  @return  queryOrder As Character, order para query

  @author renato.ito
  @since 01/03/2021
/*/
Function apiBanksQueryOrder() As Character
  Local queryOrder As Character
  queryOrder := 'A6_FILIAL,A6_COD,A6_AGENCIA,A6_NUMCON'
Return queryOrder

/*/
{Protheus.doc} banksUpdate
  Atualização dos bancos

  @param bankId as Array, chave do banco
  @param fields as Array, {campo, valor}

  @return  queryOrder As Character, order para query

  @author Renato Ito
  @since 01/03/2021
/*/
Function banksUpdate(bankId As Array, fields As Array)
  Local bankAuto      As Array
  Local field         As Numeric
  Local index         As Numeric
  Local error         As Array
  Local errorContent  As Character
  Local response      As Json
  Private lMsErroAuto As Logical
  Private lAutoErrNoFile := .T. As Logical

  bankAuto := {}
  response := JsonObject():New()
  AAdd(bankAuto, {'A6_FILIAL' , PadR(bankId[1], TamSX3('A6_FILIAL')[1])  , Nil})
  AAdd(bankAuto, {'A6_COD'    , PadR(bankId[2], TamSX3('A6_COD')[1])     , Nil})
  AAdd(bankAuto, {'A6_AGENCIA', PadR(bankId[3], TamSX3('A6_AGENCIA')[1]) , Nil})
  AAdd(bankAuto, {'A6_NUMCON' , PadR(bankId[4], TamSX3('A6_NUMCON')[1])  , Nil})
  For field := 1 To Len(fields)
    AAdd(bankAuto, {fields[field][1] , fields[field][2], Nil})
  Next

  dbSelectArea("SA6")
  dBSetOrder(1) //A6_FILIAL+A6_COD+A6_AGENCIA+A6_NUMCON

  If SA6->(DBSeek(bankAuto[1][2] + bankAuto[2][2] + bankAuto[3][2] + bankAuto[4][2] ))
    MSExecAuto({|a,b| MATA070(a, b)}, bankAuto, 4) // 4 - alteração

    If(lMsErroAuto)
      error := GetAutoGRLog()
      For index := 1 To Len(error)
        errorContent += error[index] + CRLF
      Next index
      response := answerErrorFormat(500, 'Internal Error', errorContent)
    Else
      response["result"]   := .T.
      response["response"] := JsonObject():New()
      response["response"]["status"] := 'Ok'
    EndIf
  Else
    response := answerErrorFormat(403, 'BankId', STR0001)
  EndIf
Return response

/*/{Protheus.doc} createF713Sched
  configura o job FINA713
  @type function
  @version 12.1.33
  @author renato.ito
  @since 28/04/2021
  @return Character, mensagem caso seja realizado o agendamento
/*/
Function createF713Sched() As Character
  Local cAgend   As Character
  Local cPeriod  As Character
  Local cMessage As Character
  cMessage := ''
  // Verifica se já existe o job configurado
  cAgend := FwSchdByFunction("FINA713('" + cEmpAnt + "')")
  //Somente cria o agendamento do schedule caso o mesmo ainda não exista
  If Empty(cAgend)
    //Executa a cada 15 minutos
    cPeriod := "D(Each(.T.);Day(1);EveryDay(.T.););Execs(0006);Interval(04:00);"
    //(cFunction, cUserID, cParam, cPeriod, cTime, cEnv, cEmpFil, cStatus, dDate, nModule, aParamDef)
    cAgend := FwInsSchedule("FINA713('" + cEmpAnt + "')", "000000",, cPeriod, "00:00", Upper(GetEnvServer()), cEmpAnt + "/" + cFilAnt + ";", SCHD_ACTIVE, Date(), 6, )
    If Empty(cAgend)
      cMessage := STR0002 + CRLF + STR0003
    Else
      cMessage := STR0004 + CRLF + STR0005
    EndIf
  EndIf
Return cMessage
