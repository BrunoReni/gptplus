#include "tlpp-core.th"
#include "gfin.banks.controller.ch"


NameSpace gfin.api.banks
using namespace gfin.api.banks.bills
using namespace gfin.api.banks.balances
using namespace gfin.util
Using NameSpace totvs.protheus.backoffice.ngf.util


//--------------------------------------------------------------------
/*/{Protheus.doc} getBanks
EndPoint para listagem de bancos SA6

@author Renato Ito
@since 15/03/2021
/*/
//--------------------------------------------------------------------
@GET('/api/gfin/v1/Banks')
Function getBanks()
  Local jResponse as Json
  Local oService  as Object

  oService  := BanksService():New()
  jResponse := oService:getBancos(oRest:getQueryRequest(), oRest:getHeaderRequest())
  answerBaseV2(jResponse)
  FreeObj(oService)
  FreeObj(jResponse)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} putBanks
EndPoint para update de bancos SA6

@author Renato Ito
@since 15/03/2021
/*/
//-------------------------------------------------------------------
@PUT('/api/gfin/v1/Banks/:BankId')
Function putBanks()
  Local response     As Json
  Local service      As Object
  Local internalId   As Character
  Local params       As Json
  Local body         As Json
  Local bodyContent  As Character

  service     := BanksService():new()
  params      := oRest:getPathParamsRequest()
  internalId  := params['BankId']

  body        := JsonObject():new()
  bodyContent := body:fromJson(decodeUTF8(oRest:GetBodyRequest()))

  If !(Empty(bodyContent))
    oRest:setStatusCode(403)
    oRest:setResponse(STR0001 + bodyContent)
  Else
    response := service:putBancos(internalId, body)
    AnswerRest(response)
    FreeObj(service)
    FreeObj(response)
  EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} Bills/TestConnection
EndPoint para validar a conexão com a API do banco

@author Renato Ito
@since 15/03/2021
/*/
//-------------------------------------------------------------------
@POST('/api/gfin/v1/Banks/Bills/TestConnection')
Function BillsTestConnection()
  Local response     As Json
  Local service      As Object
  Local body         As Json
  Local bodyContent  As Character

  service     := BanksBillsService():new()

  body        := JsonObject():new()
  bodyContent := body:fromJson(oRest:GetBodyRequest())

  If !(Empty(bodyContent))
    oRest:setStatusCode(403)
    oRest:setResponse(STR0001 + bodyContent)
  Else
    If body:hasProperty("wallet") .and. Upper(Alltrim(body["wallet"])) == "P"
      response := service:testConnectionPayment(body)
    Else
      response := service:testConnection(body)
    Endif
    
    AnswerRest(response)
    FreeObj(service)
    FreeObj(response)
  EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} Banks/Balances
EndPoint para retornar os saldos dos bancos

@author Renato Ito
@since 15/03/2021
/*/
//-------------------------------------------------------------------
@Post("/api/gfin/v1/Banks/Balances")
Function getBanksBalances()
  Local jResponse     as Json
  Local body          as Json
  Local bankService   as object
  Local branches      as array
  Local banks         as array
  Local inverted      as logical
  Local page          as numeric
  Local limit         as numeric
  Local referenceDate as date

  body        := JsonObject():new()
  bodyContent := body:fromJson( oRest:GetBodyRequest() )

  //Valida se foi recebido um JSON
  If !(Empty(bodyContent))
    jResponse := answerErrorFormat(403, STR0001, bodyContent)
  Else
    bankService   := gfin.api.banks.balances.BanksBalancesService():new()
    branches      := body['branches']
    banks         := body['banks']
    inverted      := body['inverted']
    page          := body['page']
    limit         := body['limit']
    referenceDate := body['referenceDate']

    if (branches == Nil)
      jResponse := answerErrorFormat(412, STR0001, STR0002)
    else
      if !(Empty(referenceDate))
          referenceDate := SToD(StrTran(referenceDate, "-", ""))
      endif

      if (AllTrim(ValType(limit)) == "N" )
          bankService:setLimit( limit )
      endif

      if (AllTrim(ValType(page)) == "N" )
          bankService:setPage( page )
      endif

      jResponse := bankService:getBalances(banks, branches, inverted, referenceDate)
    endif

    FreeObj(bankService)
  endif

  answerBaseV2(jResponse)
  FreeObj(jResponse)

return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Banks/Balances
EndPoint para retornar se o banco esta bloqueado

@author Vitor Duca
@since 04/10/2022
/*/
//-------------------------------------------------------------------
@Get("/api/gfin/v1/Banks/Blocked")
Function getValidBlocked()
  Local jResponse     as Json
  Local jQueryParams := oRest:getQueryRequest()  as Json
  Local oHeader := oRest:getHeaderRequest() As Json 
  Local cBanco := "" As Character
  Local cAgencia := "" As Character
  Local cConta := "" As Character
  Local cXFilial := "" As Character
  Local lRet := .F. As Logical

  If oHeader:hasProperty('dataBase') .and. !Empty(oHeader['dataBase'])
    dDataBase := stringIsoToDate(oHeader['dataBase'])
  Endif

  jResponse := JsonObject():new()
  jResponse['result'] := .T.
  jResponse['response'] := JsonObject():new()

  cXFilial := cFilAnt

  If jQueryParams:hasProperty('branch') .and. !Empty(jQueryParams['branch'])
    cXFilial := Padr(jQueryParams['branch'], TamSx3("EH_FILIAL")[1])
  Endif

  If jQueryParams:hasProperty('bank') .and. jQueryParams:hasProperty('account') .and. jQueryParams:hasProperty('agency')
      cBanco := Padr(jQueryParams['bank'], TamSx3("EH_BANCO")[1])
      cConta := Padr(jQueryParams['account'], TamSx3("EH_CONTA")[1])
      cAgencia := Padr(jQueryParams['agency'], TamSx3("EH_AGENCIA")[1])

    If !Empty(cBanco) .and. !Empty(cConta) .and. !Empty(cAgencia)
      lRet := .T.
      If CCBlocked(cBanco, cAgencia, cConta, .F., .T., cXFilial)
        jResponse['response']['error'] := Ap5GetHelp("CCBLOCKED")
      Endif
    Endif
  Endif

  If !lRet
    jResponse['response']['error'] := STR0003
  Endif

  AnswerRest(jResponse)
  FreeObj(jResponse)

return .T.
