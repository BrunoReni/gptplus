

#include 'tlpp-core.th'

NAMESPACE totvs.protheus.backoffice.ngf.budgets
USING NAMESPACE gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.util

Class GfinBudgetsService FROM FWAdapterBaseV2
  Public Method new()
  Public Method getBudgets()
EndClass

Method new() Class GfinBudgetsService
  _Super:new('GET')
  If MethIsMemberOf( self, "setUseSpaces", .T. )
    ::setUseSpaces(.T.)
  Endif
Return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} getBudgets
  retorna os orçamentos de receita ou despesa de determinado mês.

  @param cTableSE       , character, tabela de busca dos movimentos (SE1/SE2)
  @param jRequestParams , json, parêmetros da requisição
  @param jHeaders       , json, cabeçalho da requisisão

  @return jResponse , json, json contendo os orçamentos de determinado mês

  @author Vinicius do Prado
  @since mar|2022
/*/
//-------------------------------------------------------------------
Method getBudgets(cTableSE As Character, jRequestParams As Json, jHeaders As Json) Class GfinBudgetsService
  Local aFilter       := {}  as Array
  Local aFields       := {}  as Array
  Local aStruct       := {}  as Array
  Local aBranches     := {}  as Array
  Local cQueryWhere   := ""  as Character
  Local cMonth        := ""  as Character
  Local cYear         := ""  as Character
  Local cQryFilterSE  := ""  as Character
  Local jResponse     as Json
  Local jBudgetedNat  as Json
  Local oHashCache    as Object
  Local cCustomSearch as Character

  cCustomSearch := ''
  If FindFunction("gfin.util.profileToFilter")
    cCustomSearch := gfin.util.profileToFilter(__cUserId, 'NGF', 'CS' + cTableSE, 'Filter')
  Endif
  
  oHashCache    := FwHashMap():New()
  jBudgetedNat  := JsonObject():New()
  cMonth        := cValToChar(Month(Date()))
  cYear         := cValToChar(Year(Date()))

  // indica qual página devemos retornar
  If !(Empty(jRequestParams['page']))
    ::setPage(Val(jRequestParams['page']))
  EndIf

  // indica o tamanho da página
  If !(Empty(jRequestParams['pagesize']))
    ::setPageSize(Val(jRequestParams['pagesize']))
  EndIf

  // indica a ordem definida por querystring
  ::setOrderQuery(jRequestParams['order'])

  // indica o filtro querystring recebido (pode se utilizar um filtro oData)
  If !(Empty(jRequestParams['filter']))
    AAdd(aFilter, {"FILTER", jRequestParams['filter']})
    ::SetUrlFilter(aFilter)
  EndIf

  // trata as filiais encaminhadas no header para o filtro
  If !(Empty(jHeaders['branches']))
    aBranches := STRtokARR(jHeaders['branches'], ',')
  EndIf

  // mês referente aos orçamentos
  If !(Empty(jRequestParams['month']))
    cMonth := jRequestParams['month']
  EndIf

  // ano referente aos orçamentos
  If !(Empty(jRequestParams['year']))
    cYear := jRequestParams['year']
  EndIf

  // Hash contendo os mesês x campos SE7
  oHashCache:put("01","E7_VALJAN1")
  oHashCache:put("02","E7_VALFEV1")
  oHashCache:put("03","E7_VALMAR1")
  oHashCache:put("04","E7_VALABR1")
  oHashCache:put("05","E7_VALMAI1")
  oHashCache:put("06","E7_VALJUN1")
  oHashCache:put("07","E7_VALJUL1")
  oHashCache:put("08","E7_VALAGO1")
  oHashCache:put("09","E7_VALSET1")
  oHashCache:put("10","E7_VALOUT1")
  oHashCache:put("11","E7_VALNOV1")
  oHashCache:put("12","E7_VALDEZ1")

  cMonth := IIF(Len(cMonth) == 1,"0"+cMonth,cMonth)

  // Regra para definir os campos para o retorno
  If !(Empty(jRequestParams['fields']))
    ::SetFields(UPPER(jRequestParams['fields']))
    aFields := apiBudgetsFields(STRtoArray(::OJSONOBJ:CFIELDS, ','), oHashCache:get(cMonth) )
  else
    aFields := apiBudgetsFields({}, oHashCache:get(cMonth) )
  EndIf
  mapFieldsBaseV2(Self, @aStruct, aFields)
  
  // Informa a Query a ser utilizada pela API
  ::SetQuery(apiBudgetsQuery(cTableSE, cYear))

  // configura o filtro de query padrão
  If !Empty(aBranches)
    If !Empty(aBranches)
      cQueryWhere += "AND SE7.E7_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, "SE7") + ")"
      cQueryWhere += "AND SE7."+ oHashCache:get(cMonth) +" > 0"
    EndIf
  EndIf

  // filtros personalizados
  If !(Empty(cCustomSearch))
    cQryFilterSE += " AND " + cCustomSearch
  EndIf

  ::SetWhere(cQueryWhere)

  // Informa a ordenação a ser Utilizada pela Query
  ::SetOrder(apiBudgetsOrder())

  //Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
  If ::Execute()
    // Gera o arquivo Json com o retorno da Query
    ::FillGetResponse()
  EndIf

  jResponse := JsonObject():New()

  If ::lOk
    jBudgetedNat := getMovementsByNature(::getJSONResponse(), cMonth, cYear, cTableSE, cQryFilterSE)

    jResponse["result"] := .T.
    jResponse["response"] := JsonObject():New()
    jResponse["response"] := formatResponse(jBudgetedNat, oHashCache:get(cMonth))
    jResponse["response"]["struct"] := gfin.util.arrayToJson(formatResponseStruct(aStruct, oHashCache:get(cMonth)))
  Else
    jResponse := answerErrorFormat(::GetCode(), ::GetMessage(), ::GetMessage())
  EndIf
  
  //faz a desalocação de objetos e arrays utilizados
  FreeObj(oHashCache)
  ::DeActivate()
Return jResponse
