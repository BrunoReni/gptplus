#INCLUDE 'tlpp-core.th'

NameSpace gfin.api.balances
Using NameSpace gfin.util

Static __instance as Object
Static __lF75FILORI   := F75->(FieldPos("F75_FILORI")) > 0
Static __lF76FILORI   := F75->(FieldPos("F76_FILORI")) > 0
Static __lF76BLQLIB   := F76->(FieldPos("F76_BLQLIB")) > 0
Static __lSEHDATLIB   := SEH->(FieldPos("EH_DATALIB")) > 0
Static __lFindProfile := FindFunction("gfin.util.profileToFilter")

Class GfinBalanceDocumentsData
  Data branches as Array
  Data dateRef  as Date
  Data dateFrom as Date
  Data dateTo   as Date
  Data filter   as Character
  Data cJoin    As Character

  Public Method new()
	Public Method destroy()
	Public Method getInstance()
  Public Method setBranches()   			      // set de filiais
  Public Method setDateRef()   			        // set data base
	Public Method setDateFrom()   			      // set data de
	Public Method setDateTo()   			        // set data até
	Public Method setFilter()
  Public Method setJoin()
  Public Method getJoin()
  Public Method getPeriodBalances()
	Public Method getBalnces()
EndClass

Method new() Class GfinBalanceDocumentsData
Return

//--------------------------------------------------------------------
/*/{Protheus.doc } Method destroy()
destroy da classe
/*/
//--------------------------------------------------------------------
Method destroy() Class GfinBalanceDocumentsData
  If VALTYPE(__instance) <> "U"
    FreeObj(__instance)
  EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc }getInstance
retorna a o instância ativa, se não exitir será criada uma nova.

@author Alison Lemes
@since sep|2020
/*/
//-------------------------------------------------------------------
Method getInstance() Class GfinBalanceDocumentsData
	If ( __instance == nil )
		__instance := GfinBalanceDocumentsData():new()
    Self:dateRef    := dDataBase
    Self:dateFrom   := CToD( '//' )
    Self:dateTo     := CToD( '//' )
    Self:filter     := ''
	EndIf
Return __instance

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setBranches()
retorna as filiais
/*/
//-------------------------------------------------------------------
Method setBranches(branche as Array) Class GfinBalanceDocumentsData
  Self:branches := branche
Return branche

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setDateRef()
configura a data base
/*/
//-------------------------------------------------------------------
Method setDateRef(date as Character) Class GfinBalanceDocumentsData
  Local dDate as Date
  dDate := gfin.util.formatDate(date, .F.)
  If Empty(dDate)
    Self:dateRef := dDataBase
  Else
    Self:dateRef := dDate
  EndIf
Return Self:dateRef
//-------------------------------------------------------------------
/*/{Protheus.doc } Method setDateFrom()
Configura a data de
/*/
//-------------------------------------------------------------------
Method setDateFrom(date as Character) Class GfinBalanceDocumentsData
  Local dDate as Date
  dDate := gfin.util.formatDate(date, .F.)
  If Empty(dDate)
    Self:dateFrom := dDataBase
  Else
    Self:dateFrom := dDate
  EndIf
Return Self:dateFrom

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setDateTo()
Configura a data até
/*/
//-------------------------------------------------------------------
Method setDateTo(date as Character) Class GfinBalanceDocumentsData
  Self:dateTo := gfin.util.formatDate(date, .F.)
Return Self:dateTo

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setFilter()
Filtro de query
/*/
//-------------------------------------------------------------------
Method setFilter(filterQuery as Character) Class GfinBalanceDocumentsData
  Self:filter := filterQuery
Return Self:filter

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setFilter()
JOIN da Query
/*/
//-------------------------------------------------------------------
Method setJoin(cJoin As Character) Class GfinBalanceDocumentsData
  Self:cJoin := cJoin
Return Self:cJoin

//-------------------------------------------------------------------
/*/{Protheus.doc }getBalnces
retorna os saldos em periods definidos

@author renato.ito
@since 24/02/2021
/*/
//-------------------------------------------------------------------
Method getBalnces() Class GfinBalanceDocumentsData
  Local amount               as Numeric // total em aberto
	Local amountDay            as Numeric // no dia
	Local amountWeek           as Numeric // até 7 dias
	Local amountMonth          as Numeric // até 30 dias
	Local amountQuarter        as Numeric // até 90 dias
	Local amountOverdue        as Numeric // em atraso total
	Local amountOverdueWeek    as Numeric // em atraso até 7 dias
	Local amountOverdueMonth   as Numeric // em atraso até 30 dias
	Local amountOverdueQuarter as Numeric // em atraso até 90 dias
  Local qtty                 as Numeric // Quantidade
	Local qttyDay              as Numeric // no dia
	Local qttyWeek             as Numeric // até 7 dias
	Local qttyMonth            as Numeric // até 30 dias
	Local qttyQuarter          as Numeric // até 90 dias
	Local qttyOverdue          as Numeric // em atraso total
	Local qttyOverdueWeek      as Numeric // em atraso até 7 dias
	Local qttyOverdueMonth     as Numeric // em atraso até 30 dias
	Local qttyOverdueQuarter   as Numeric // em atraso até 90 dias
	Local roundDigits          as Numeric

  Local dateDay              as Character
	Local dateWeek             as Character
	Local dateMonth            as Character
	Local dateQuarter          as Character
	Local dateOverdueWeek      as Character
	Local dateOverdueMonth     as Character
	Local dateOverdueQuarter   as Character

  Local response              as Json
  Local querySum              as Character
  Local queryAmount           as Character
  Local queryFilter           as Character

  roundDigits := SuperGetMv("MV_CENT")

	// totalizadores
	amount               := 0
	amountDay            := 0
	amountWeek           := 0
	amountMonth          := 0
	amountQuarter        := 0
	amountOverdue        := 0
	amountOverdueWeek    := 0
	amountOverdueMonth   := 0
	amountOverdueQuarter := 0

  // Quantidades
	qtty               := 0
	qttyDay            := 0
	qttyWeek           := 0
	qttyMonth          := 0
	qttyQuarter        := 0
	qttyOverdue        := 0
	qttyOverdueWeek    := 0
	qttyOverdueMonth   := 0
	qttyOverdueQuarter := 0

  // definição de datas
	dateDay            := DtoS(Self:dateRef)              // no dia
	dateWeek           := DtoS(DaySum(Self:dateRef, 7))   // até 7 dias
	dateMonth          := Dtos(MonthSum(Self:dateRef, 1)) // até 30 dias
	dateQuarter        := Dtos(MonthSum(Self:dateRef, 3)) // até 90 dias
	dateOverdueWeek    := DtoS(DaySub(Self:dateRef, 7))   // em atraso até 7 dias
	dateOverdueMonth   := Dtos(MonthSub(Self:dateRef, 1)) // em atraso até 30 dias
	dateOverdueQuarter := Dtos(MonthSub(Self:dateRef, 3)) // em atraso até 90 dias

  queryFilter :=  Self:filter
  querySum := "SELECT SUM(F75_SALDO) TOTAL, COUNT(1) QTDE FROM " + RetSqlName("F75") + " F75"

  // join
  If !(Empty(Self:cJoin))
    querySum += " " + Self:cJoin
  EndIf

  querySum += " WHERE F75_SALDO > 0 AND F75.D_E_L_E_T_ =' ' "

  // total em aberto
  queryAmount := querySum + queryFilter
  amount := Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qtty   := MpSysExecScalar(queryAmount, "QTDE")

  //totalizador vencendo no dia
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO = '" + dateDay + "'" + queryFilter
  amountDay 	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyDay     := MpSysExecScalar(queryAmount, "QTDE")

  //totalizador vencendo na semana
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO >= '" + dateDay + "'"
  queryAmount += " AND F75_VENCTO <= '" + dateWeek + "'" + queryFilter
  amountWeek 	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyWeek    := MpSysExecScalar(queryAmount, "QTDE")

  //totalizador vencendo no mês
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO >= '" + dateDay + "'"
  queryAmount += " AND F75_VENCTO <= '" + dateMonth + "'" + queryFilter
  amountMonth	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyMonth   := MpSysExecScalar(queryAmount, "QTDE")

  //totalizador vencendo nos próximos 3 msese
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO >= '" + dateDay + "'"
  queryAmount += " AND F75_VENCTO <= '" + dateQuarter + "'" + queryFilter
  amountQuarter	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyQuarter   := MpSysExecScalar(queryAmount, "QTDE")


  //totalizador total em atraso
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO < '" + dateDay + "'" + queryFilter
  amountOverdue	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyOverdue   := MpSysExecScalar(queryAmount, "QTDE")


  //totalizador em atraso na última semana
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO < '" + dateDay + "'"
  queryAmount += " AND F75_VENCTO >= '" + dateOverdueWeek+ "'" + queryFilter
  amountOverdueWeek	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyOverdueWeek   := MpSysExecScalar(queryAmount, "QTDE")

  //totalizador em atraso no último mês
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO < '" + dateDay + "'"
  queryAmount += " AND F75_VENCTO >= '" + dateOverdueMonth+ "'" + queryFilter
  amountOverdueMonth	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyOverdueMonth    := MpSysExecScalar(queryAmount, "QTDE")

  //totalizador em atraso nos últimos 3 mês
  queryAmount := querySum
  queryAmount += " AND F75_VENCTO < '" + dateDay + "'"
  queryAmount += " AND F75_VENCTO >= '" + dateOverdueQuarter+ "'" + queryFilter
  amountOverdueQuarter	:= Round(MpSysExecScalar(queryAmount, "TOTAL"), roundDigits)
  qttyOverdueQuarter    := MpSysExecScalar(queryAmount, "QTDE")

  response := JsonObject():New()
  response["balance"] = amount
  response["balanceDay"] = amountDay
  response["balanceWeek"] = amountWeek
  response["balanceMonth"] = amountMonth
  response["balanceQuarter"] = amountQuarter
  response["balanceOverdue"] = amountOverdue
  response["balanceOverdueWeek"] = amountOverdueWeek
  response["balanceOverdueMonth"] = amountOverdueMonth
  response["balanceOverdueQuarter"] = amountOverdueQuarter
  response["quantity"] = qtty
  response["quantityDay"] = qttyDay
  response["quantityWeek"] = qttyWeek
  response["quantityMonth"] = qttyMonth
  response["quantityQuarter"] = qttyQuarter
  response["quantityOverdue"] = qttyOverdue
  response["quantityOverdueWeek"] = qttyOverdueWeek
  response["quantityOverdueMonth"] = qttyOverdueMonth
  response["quantityOverdueQuarter"] = qttyOverdueQuarter

Return response

//-------------------------------------------------------------------
/*/{Protheus.doc} getPeriodBalances
  retorna os saldos em periods definidos
  @author daniele.ferreira
  @since 15/10/2021
  @type  Method
  @param dDateFrom, Date, data de para uso na query
  @param dDateTo, Date, data até para uso na query
  @return jResponse, json
    {
    "receivables": {
        "overdue": number
        "amount": number,
        "amountQuantity": number,
        "overdueQuantity": number
    },
    "payables": {
        "overdue": number
        "amount": number,
        "amountQuantity": number,
        "overdueQuantity": number
    },
    "purchases": {
        "overdue": number
        "amount": number
    },
    "sales": {
        "overdue": number
        "amount": number
    }
  }
/*/
//-------------------------------------------------------------------
Method getPeriodBalances(dDateFrom as Date, dDateTo as Date, lProvis As Logical, lBlqLib as Logical, lCfgApl As Logical, lIsCashFlow As Logical) Class GfinBalanceDocumentsData
  Local cDtFrom := '' As Character
  Local cDtTo   := '' As Character
  Local cCfgApl := '' As Character
  Local jResponse     As Json
  Local jDocuments    As Json
  Local jOrders       As Json

  jResponse := JsonObject():New()

  cDtFrom   := DtoS(dDateFrom)
  cDtTo     := DtoS(dDateTo)

  jOrders      := getOrdersBalancePeriod(self:branches, cDtFrom, cDtTo, lBlqLib)
  jDocuments   := getDocumentsBalancePeriod(self:branches, cDtFrom, cDtTo, Self, lProvis, lIsCashFlow)
  cCfgApl      := getProfileUser(__cUserId, "NGF", "CashFlow", "Filter", 'considersAPL' )

  jResponse[ 'receivables' ] := jDocuments[ 'receivables' ]
  jResponse[ 'payables' ]    := jDocuments[ 'payables' ]
  jResponse[ 'sales' ]       := jOrders[ 'sales' ]
  jResponse[ 'purchases' ]   := jOrders[ 'purchases' ]

  If !Empty(cCfgApl) .And. cCfgApl != 'consnot' .And. !lCfgApl
    jResponse[ 'application' ]    := getApplicationPeriod(self:branches, cDtFrom, cDtTo, cCfgApl, .T.)
  Else
    jResponse['application'] := JsonObject():New()
    jResponse['application']['amount'] := 0
  Endif

Return jResponse

/*/{Protheus.doc} getDocumentsBalancePeriod
  valores dos títulos de acordo com o período informado
  @type  Static Function
  @daniele.ferreira
  @since 18/10/2021
  @param aFiliais, array, array de filiais para filtro na query
  @param cDtFrom, character, data de para filtro
  @param cDtTo, character, data até para filtro
  @return jBalances, json, {
    receivables: {
      amount: number,
      quantity: number,
      ouverdue: number,
      ouverdueQuantity: number,
    },
    payables: {
      amount: number,
      quantity: number,
      ouverdue: number,
      ouverdueQuantity: number,
    }
  }
/*/
Static Function getDocumentsBalancePeriod(aFiliais as array, cDtFrom as character, cDtTo as character, oSelf as object, lProvis as Logical, lIsCashFlow as Logical) as jSon
  Local cQuery           := '' as character
  Local cWhereSE1        := '' as character
  Local cWhereSE2        := '' as character
  Local cWhere           := '' as character
  Local cCustomSearchSE1 := '' as character
  Local cCustomSearchSE2 := '' as character
  Local cJoinSE1         := '' as character
  Local cJoinSE2         := '' as character
  Local cWhereVenc       := '' as character
  Local cTypeProvis      := '' as character
  Local jReceivables           as json
  Local jPayables              as json
  Local jBalances              as json

  jReceivables := JsonObject():New()
  jPayables    := JsonObject():New()
  jBalances    := JsonObject():New()

  // select padrão
  cQuery := "SELECT SUM(F75_SALDO) AS VALOR, COUNT(F75_NUM) AS QUANTIDADE FROM "
  cQuery += RetSqlName("F75") + " F75 "
  // filtro de filiais
  If __lF75FILORI
    cWhereSE1 := " WHERE F75.F75_FILORI IN (" + gfin.util.branchesFormatToIn(aFiliais, 'SE1') + ")"
    cWhereSE2 := " WHERE F75.F75_FILORI IN (" + gfin.util.branchesFormatToIn(aFiliais, 'SE2') + ")"
  Else
    cWhereSE1 := cWhereSE2 := " WHERE F75.F75_FILIAL IN (" + gfin.util.branchesFormatToIn(aFiliais, 'F75') + ")"
  EndIf

  cTypeProvis := Iif(lProvis, "|" + MVPROVIS, "")

  // filtro para receber/pagar
  cWhereSE1 += " AND F75.F75_RECPAG = 'R' "
  cWhereSE1 += " AND F75.F75_TIPO NOT IN " + FormatIn( MVRECANT + "|" + MV_CRNEG + cTypeProvis, "|")
  cWhereSE2 += " AND F75.F75_RECPAG = 'P' "
  cWhereSE2 += " AND F75.F75_TIPO NOT IN " + FormatIn( MVPAGANT + "|" + MV_CPNEG + cTypeProvis, "|")

  // filtros padrão para fluxo de caixa
  If lIsCashFlow
    cWhere := " AND F75.F75_FLUXO <> 'N' "
  EndIf
  cWhere += " AND F75.F75_SALDO > 0 "
  cWhere += " AND F75.D_E_L_E_T_ = ' '"

  // verifica se existe filtro de usuário savo no profile - se existir é necessário criar o join com a tabela SE1 ou SE2
  if __lFindProfile
    cCustomSearchSE1 := gfin.util.profileToFilter(__cUserId, 'NGF', 'CSSE1', 'Filter')
    cCustomSearchSE2 := gfin.util.profileToFilter(__cUserId, 'NGF', 'CSSE2', 'Filter')
    if !Empty(cCustomSearchSE1)
      cWhereSE1 += ' AND ' + cCustomSearchSE1
      cJoinSE1 := oSelf:getJoin(.T.)
    endif
    if !Empty(cCustomSearchSE2)
      cWhereSE2 += ' AND ' + cCustomSearchSE2
      cJoinSE2 := oSelf:getJoin(.F.)
    endif
  endif

  // obtem os valores do periodo
  cWhereVenc := " AND F75.F75_VENCTO >= '" + cDtFrom + "' "
  cWhereVenc += " AND F75.F75_VENCTO <= '" + cDtTo + "' "
  jReceivables[ 'amount' ]         := MpSysExecScalar(cQuery + cJoinSE1 + cWhereSE1 + cWhere + cWhereVenc, "VALOR")
  jReceivables[ 'amountQuantity' ] := MpSysExecScalar(cQuery + cJoinSE1 + cWhereSE1 + cWhere + cWhereVenc, "QUANTIDADE")

  jPayables[ 'amount' ]            := MpSysExecScalar(cQuery + cJoinSE2 + cWhereSE2 + cWhere + cWhereVenc, "VALOR")
  jPayables[ 'amountQuantity' ]    := MpSysExecScalar(cQuery + cJoinSE2 + cWhereSE2 + cWhere + cWhereVenc, "QUANTIDADE")

  //obtem os valores vencidos
  cWhereVenc := " AND F75.F75_VENCTO < '" + cDtFrom + "' "

  jReceivables[ 'overdue' ]         := MpSysExecScalar(cQuery + cJoinSE1 + cWhereSE1 + cWhere + cWhereVenc, "VALOR")
  jReceivables[ 'overdueQuantity' ] := MpSysExecScalar(cQuery + cJoinSE1 + cWhereSE1 + cWhere + cWhereVenc, "QUANTIDADE")

  jPayables[ 'overdue' ]            := MpSysExecScalar(cQuery + cJoinSE2 + cWhereSE2 + cWhere + cWhereVenc, "VALOR")
  jPayables[ 'overdueQuantity' ]    := MpSysExecScalar(cQuery + cJoinSE2 + cWhereSE2 + cWhere + cWhereVenc, "QUANTIDADE")

  jBalances[ 'receivables' ] := jReceivables
  jBalances[ 'payables' ]    := jPayables

Return jBalances

/*/{Protheus.doc} getJoin
  Realiza o join de acordo com a tabela informada SE1 ou SE2
  @type Method
  @daniele.ferreira
  @since 18/10/2021
  @param lSe1, logical, verificação de tabela para realização no join
  @return cJoin, character
/*/
Method getJoin(lSe1 as logical) Class GfinBalanceDocumentsData
  Local cTable       := '' as character
  Local cFieldNick   := '' as character
  Local cCliforField := '' as character
  Local cJoin        := '' as character

  If lSE1
    cTable             := 'SE1'
    cFieldNick         := cTable + '.E1_'
    cCliforField       := 'CLIENTE'
  Else
    cTable             := 'SE2'
    cFieldNick         := cTable + '.E2_'
    cCliforField       := 'FORNECE'
  EndIf

  cJoin := " INNER JOIN " + RetSqlName(cTable) + " " + cTable
  If __lF75FILORI
    cJoin += " ON " + cFieldNick + "FILIAL = F75.F75_FILORI"
  Else
    cJoin += " ON " + cFieldNick + "FILIAL = F75.F75_FILIAL"
  EndIf
  cJoin += " AND " + cFieldNick + "PREFIXO = F75.F75_PREFIX"
  cJoin += " AND " + cFieldNick + "NUM = F75.F75_NUM"
  cJoin += " AND " + cFieldNick + "PARCELA = F75.F75_PARCEL"
  cJoin += " AND " + cFieldNick + "TIPO = F75.F75_TIPO"
  cJoin += " AND " + cFieldNick + cCliforField + " = F75.F75_CLIFOR"
  cJoin += " AND " + cFieldNick + "LOJA = F75.F75_LOJA"
  cJoin += " AND " + cTable + ".D_E_L_E_T_ =' '"

Return cJoin

/*/{Protheus.doc} getOrdersBalancePeriod
  Query dos pedidos de acordo com o período informado
  @type  Static Function
  @daniele.ferreira
  @since 18/10/2021
  @param aFiliais, array, array de filiais para filtro na query
  @param cDtFrom, character, data de para filtro
  @param cDtTo, character, data até para filtro
  @return jOrders, json, {
    sales: {
      amount: number,
      quantity number,
    },
    purchases: {
      amount: number,
      quantity number,
    }
  }
/*/
Static Function getOrdersBalancePeriod(aFiliais as array, cDtFrom as character, cDtTo as character, lBlqLib as logical) as json
  Local cQuery           := '' as Character
  Local cCustomSearchSC6 := '' as Character
  Local cCustomSearchSC7 := '' as Character
  Local cJoinSC6         := '' as Character
  Local cJoinSC7         := '' as Character
  Local cWhere           := '' as Character
  Local cWhereSC6        := '' as Character
  Local cWhereSC7        := '' as Character
  Local jSales                 as json
  Local jPurchases             as json
  Local jOrders                as json

  jSales     := JsonObject():New()
  jPurchases := JsonObject():New()
  jOrders    := JsonObject():New()
  // query principal
  cQuery := "SELECT SUM(F76_VALOR) AS VALOR, COUNT(F76_PEDIDO) AS QUANTIDADE FROM "
  cQuery += RetSqlName("F76") + " F76 "
  // filtro de filiais
  if __lF76FILORI
    cWhereSC6 := " WHERE F76.F76_FILORI IN (" + gfin.util.branchesFormatToIn(aFiliais, 'SC6') + ") "
    cWhereSC7 := " WHERE F76.F76_FILORI IN (" + gfin.util.branchesFormatToIn(aFiliais, 'SC7') + ") "
  else
    cWhereSC6 := cWhereSC7 := " WHERE F76.F76_FILIAL IN (" + gfin.util.branchesFormatToIn(aFiliais, 'F76') + ") "
  endif
  // filtro para pedido de compra/venda
  cWhereSC6 += " AND F76.F76_TIPO = '1' "
  cWhereSC7 += " AND F76.F76_TIPO = '2' "
  // filtro padrao
  cWhere := " AND F76.F76_DATA >= '" + cDtFrom + "' "
  cWhere += " AND F76.F76_DATA <= '" + cDtTo + "' "

  If !lBlqLib .And. __lF76BLQLIB
    cWhere += " AND F76.F76_BLQLIB = 1 "
  EndIf

  cWhere += " AND F76.D_E_L_E_T_ = ' '"
  // filtro de usuário
  if __lFindProfile
    cCustomSearchSC6 := gfin.util.profileToFilter(__cUserId, 'NGF', 'CSSC6', 'Filter')
    cCustomSearchSC7 := gfin.util.profileToFilter(__cUserId, 'NGF', 'CSSC7', 'Filter')
    if !Empty(cCustomSearchSC6)
      cWhereSC6 += " AND " + cCustomSearchSC6
      cJoinSC6 := getJoinOrders(.T.)
    endif
    if !Empty(cCustomSearchSC7)
      cWhereSC7 += " AND " +  cCustomSearchSC7
      cJoinSC7 := getJoinOrders(.F.)
    endif
  endif
  // precessa os pedidos de venda
  jSales[ 'amount' ]             := MpSysExecScalar(cQuery + cJoinSC6 + cWhereSC6 + cWhere, 'VALOR' )
  jSales[ 'amountQuantity' ]     := MpSysExecScalar(cQuery + cJoinSC6 + cWhereSC6 + cWhere, 'QUANTIDADE' )
  // precessa os pedidos de compra
  jPurchases[ 'amount' ]         := MpSysExecScalar(cQuery + cJoinSC7 + cWhereSC7 + cWhere, 'VALOR' )
  jPurchases[ 'amountQuantity' ] := MpSysExecScalar(cQuery + cJoinSC7 + cWhereSC7 + cWhere, 'QUANTIDADE' )

  jOrders['purchases']   := jPurchases
  jOrders['sales']       := jSales
Return jOrders

/*/{Protheus.doc} getJoinOrders
  Realiza o join de acordo com a tabela informada SC6 e SC7
  @type Static Function
  @daniele.ferreira
  @since 18/10/2021
  @param lSC6, logical, verificação de tabela para realização no join
  @return cJoin, character
/*/
Function getJoinOrders(lSC6 as logical) as character
  Local cJoin        := '' as character
  Local cTable       := '' as character
  Local cFieldNick   := '' as character
  Local cCliforField := '' as character

  If lSC6
    cTable := 'SC6'
    cFieldNick := cTable + '.C6_'
    cCliforField := 'CLI'
  Else
    cTable := 'SC7'
    cFieldNick := cTable + '.C7_'
    cCliforField := 'FORNECE'
  EndIf

  cJoin := " INNER JOIN " + RetSqlName(cTable) + " " + cTable
  
  If __lF76FILORI
    cJoin += " ON " + cFieldNick + "FILIAL = F76.F76_FILORI"
  Else
    cJoin += " ON " + cFieldNick + "FILIAL = F76.F76_FILIAL"
  EndIf

  cJoin += " AND " + cFieldNick + "NUM = F76.F76_PEDIDO"
  cJoin += " AND " + cFieldNick + "ITEM = F76.F76_ITEM"
  cJoin += " AND " + cFieldNick + cCliforField + " = F76.F76_CLIFOR"
  cJoin += " AND " + cFieldNick + "LOJA = F76_LOJA"
  cJoin += " AND " + cTable + ".D_E_L_E_T_ =' '"

  If lSC6
    cJoin += " INNER JOIN " + RetSqlName("SC5") + " SC5 " 
    cJoin += " ON SC5.C5_FILIAL = " + cFieldNick + "FILIAL"
    cJoin += " AND SC5.C5_NUM = " + cFieldNick + "NUM"
    cJoin += " AND SC5.D_E_L_E_T_ =' '"
  Endif

return cJoin

/*/{Protheus.doc} getApplicationPeriod
  valores das aplicações de acordo com o período informado
  @type  Static Function
  @francisco.oliveira
  @since 23/11/2022
  @param aFiliais, array, array de filiais para filtro na query
  @param cDtFrom, character, data de para filtro
  @param cDtTo, character, data até para filtro
  @return jBalances, json, {
    jSumApplication: {
      jApplication[]
    },
    jApplication: {
      applicario: number,
    }
  }
/*/
Function getApplicationPeriod(aFiliais As array, cDtFrom As character, cDtTo As character, cCfgApl As Character, lStep As Logical) As jSon

  Local cQuery            := "" As Character
  Local cTemp             := "" As Character
  Local cDbMs             := "" As Character
  Local cSumDataLib       := "" As Character
  Local cSumDataRes       := "" As Character
  Local aRetCalc          := {} As Array
  Local aGetArea          := {} As Array
  Local jApplication            As Json
  Local jSumApplication         As Json

  jApplication    := JsonObject():New()
  jApplication['amount'] := 0
  jSumApplication := JsonObject():New()
  cTemp           := GetNextAlias()
  aGetArea        := SEH->(GetArea())
  cDbMs           := TcGetDb()

  cSumDataRes   := "     CONVERT(VARCHAR, DATEADD(DAY, 1, SEH.EH_DATARES), 112) "

  If __lSEHDATLIB
    cSumDataLib   := "     CONVERT(VARCHAR, DATEADD(DAY, 1, SEH.EH_DATALIB), 112) "
  Endif

  If cDbMs == "POSTGRES"
    cSumDataRes := "     TO_CHAR(CAST(SEH.EH_DATARES AS DATE) + interval'1 days','YYYYMMDD') "
    If __lSEHDATLIB
      cSumDataLib := "     TO_CHAR(CAST(SEH.EH_DATALIB AS DATE) + interval'1 days','YYYYMMDD') "
    Endif
  ElseIf cDbMs == "ORACLE"
    cSumDataRes := "     TO_CHAR(CAST(SEH.EH_DATARES AS DATE) + 1,'YYYYMMDD') "
    If __lSEHDATLIB
      cSumDataLib := "     TO_CHAR(CAST(SEH.EH_DATALIB AS DATE) + 1,'YYYYMMDD') "
    Endif
  Endif

  If (Empty(cCfgApl) .Or. cCfgApl != 'consnot') .And. lStep
    nVlrAPL := getApplicationTotal(aFiliais)
    jApplication['amount'] := nVlrAPL
    jSumApplication := jApplication
    Return jSumApplication
  Endif

  If __lSEHDATLIB
    cQuery := " SELECT SUM(EH_VALOR) AS VALORSEH, EH_DATARES, EH_DATA, SEH.R_E_C_N_O_ AS RECNO, "
    cQuery += " CASE "
    cQuery += "   WHEN "
    cQuery += "     (SEH.EH_DATARES = SEH.EH_DATALIB) "
    cQuery += "     THEN "
    
    cQuery += cSumDataLib
    cQuery += "   WHEN "
    cQuery += "     (SEH.EH_DATARES  = ' ' AND SEH.EH_DATALIB != ' ') "
    cQuery += "     THEN "
    
    cQuery += cSumDataLib
    cQuery += "   WHEN "
    cQuery += "     (SEH.EH_DATARES != ' ' AND SEH.EH_DATALIB  = ' ') "
    cQuery += "     THEN "

    cQuery += cSumDataRes
    cQuery += " END AS DATELIB
  Else
    cQuery := " SELECT SUM(EH_VALOR) AS VALORSEH, SEH.R_E_C_N_O_ AS RECNO, "
    cQuery += " CASE "
    cQuery += "   WHEN "
    cQuery += "     (SEH.EH_DATARES != ' ') "
    cQuery += "     THEN "
    cQuery += cSumDataRes

    cQuery += "   WHEN "
    cQuery += "     (SEH.EH_DATARES = ' ') "
    cQuery += "     THEN "
    cQuery += "     SEH.EH_DATA "
    cQuery += " END AS DATELIB "
  Endif

  cQuery += " FROM "
  cQuery +=   RetSqlName("SEH") + " SEH "
  cQuery += " WHERE "
  cQuery += " SEH.EH_FILIAL IN (" + gfin.util.branchesFormatToIn(aFiliais, 'SEH') + ")"
  cQuery += " AND SEH.EH_APLEMP = 'APL' "
  cQuery += " AND SEH.D_E_L_E_T_ = ' ' "

  If __lSEHDATLIB
    cQuery += " AND (SEH.EH_DATALIB  != ' ' "
    cQuery += " OR   SEH.EH_DATARES  != ' ' ) "

    cQuery += " AND (( (SEH.EH_DATALIB != ' ' AND SEH.EH_DATARES = ' ' ) AND SEH.EH_DATALIB >= '" + cDtFrom + "' "
    cQuery += " AND SEH.EH_DATALIB <= '" + cDtTo   + "') "

    cQuery += " OR ( (SEH.EH_DATARES != ' ' AND SEH.EH_DATALIB = ' ' ) AND SEH.EH_DATARES >= '" + cDtFrom + "' "
    cQuery += " AND SEH.EH_DATARES <= '" + cDtTo   + "') "

    cQuery += " OR ( (SEH.EH_DATARES != ' 'AND SEH.EH_DATALIB != ' ' ) AND SEH.EH_DATALIB >= '" + cDtFrom + "' "
    cQuery += " AND SEH.EH_DATALIB <= '" + cDtTo   + "')) "

    cQuery += " GROUP BY EH_DATARES, EH_DATALIB, EH_DATA, R_E_C_N_O_ "
  Else
    cQuery += " AND SEH.EH_DATARES  != ' ' "

    cQuery += " AND SEH.EH_DATARES >= '" + cDtFrom + "' "
    cQuery += " AND SEH.EH_DATARES <= '" + cDtTo   + "' "

    cQuery += " GROUP BY EH_DATARES, EH_DATA, R_E_C_N_O_ "
  Endif

  cQuery	:= ChangeQuery(cQuery)

  MPSysOpenQuery( cQuery, cTemp )

  While (cTemp)->(!Eof())
    aRetCalc  := {}
    SEH->(DbGoTo((cTemp)->(RECNO)))

    If cCfgApl == 'all'
      aRetCalc  := Fa171Calc(StoD((cTemp)->DATELIB))
    Else
      If __lSEHDATLIB .And. !Empty(SEH->EH_DATALIB)
        aRetCalc  := Fa171Calc(StoD((cTemp)->DATELIB))
      ElseIf !__lSEHDATLIB .And. !Empty(SEH->EH_DATA)
        aRetCalc  := Fa171Calc(StoD((cTemp)->DATELIB))
      Endif
    Endif

    If Len(aRetCalc) > 0
      If SEH->EH_MOEDA > 1
        jApplication['amount'] += validateRate(aRetCalc[1], SEH->EH_TIPO, SEH->EH_MOEDA)
      Else
        jApplication['amount'] += aRetCalc[1]
      Endif
    Endif

    (cTemp)->(dbSkip())
  EndDo

  (cTemp)->(DbCloseArea())

  jSumApplication[ 'application' ] := jApplication

  RestArea(aGetArea)

Return jSumApplication

/*/{Protheus.doc} getApplicationTotal
  valor total das aplicações considerando os valores anterior e posterior ao período informado
  @type  Function
  @francisco.oliveira
  @since 01/12/2022
  @param aFiliais, array, array de filiais para filtro na query
  @return nVlrTtl, numeric
/*/
Function getApplicationTotal(aFiliais As array) As Numeric

  Local nVlrTtl   := 0  As Numeric
  Local cQuery    := '' As Character
  Local cTempSEH  := '' As Character
  Local aRetTtl   := {} As Array
  Local aGetArea  := {} As Array

  cTempSEH  := GetNextAlias()
  aGetArea  := SEH->(GetArea())

  cQuery := " SELECT " 
  cQuery += " R_E_C_N_O_ AS RECNO "
  cQuery += " FROM "
  cQuery +=   RetSqlName("SEH") + " SEH "
  cQuery += " WHERE "
  cQuery += "     SEH.EH_FILIAL IN (" + gfin.util.branchesFormatToIn(aFiliais, 'SEH') + ")"
  cQuery += " AND SEH.EH_APLEMP  = 'APL' "
  cQuery += " AND SEH.EH_SALDO   > 0 "
  cQuery += " AND SEH.D_E_L_E_T_ = ' ' "

  cQuery	:= ChangeQuery(cQuery)

  MPSysOpenQuery( cQuery, cTempSEH )

  While (cTempSEH)->(!Eof())
    aRetTtl  := {}
    SEH->(DbGoTo((cTempSEH)->(RECNO)))

    aRetTtl := Fa171Calc(SEH->EH_DATA)

    If Len(aRetTtl) > 0
      If SEH->EH_MOEDA > 1
        nVlrTtl += validateRate(aRetTtl[1], SEH->EH_TIPO, SEH->EH_MOEDA)
      Else
        nVlrTtl += aRetTtl[1]
      Endif
    Endif

    (cTempSEH)->(dbSkip())

  EndDo

  (cTempSEH)->(DbCloseArea())

  RestArea(aGetArea)

Return nVlrTtl

/*/{Protheus.doc} getApplicationEmpty
  valor total das aplicações considerando os valores campo EH_DATALIB e EH_DATARES vazios
  @type  Function
  @francisco.oliveira
  @since 01/12/2022
  @param aFiliais, array, array de filiais para filtro na query
  @return nVlrTtl, numeric
/*/

Function getApplicationEmpty(aFiliais As Array, cDtAplIni As Character, cDtAplFim As Character) As Numeric

  Local nVlrTtl   := 0  As Numeric
  Local cQuery    := '' As Character
  Local cTempSEH  := '' As Character
  Local aRetTtl   := {} As Array
  Local aGetArea  := {} As Array

  cTempSEH  := GetNextAlias()
  aGetArea  := SEH->(GetArea())

  cQuery  := " SELECT "
  cQuery  += " SEH.R_E_C_N_O_  AS RECNO "
  cQuery  += " FROM "
  cQuery  +=   RetSqlName("SEH") + " SEH "
  cQuery  += " WHERE "
  cQuery  += "     SEH.EH_FILIAL IN (" + gfin.util.branchesFormatToIn(aFiliais, 'SEH') + ")"
  cQuery  += "     AND SEH.EH_APLEMP  = 'APL' "

  If __lSEHDATLIB
    cQuery  += "     AND SEH.EH_DATALIB  = ' ' "
  Endif

  cQuery  += "     AND SEH.EH_DATARES  = ' ' "
  cQuery  += "     AND SEH.EH_DATA   >= '" + cDtAplIni + "' "
  cQuery  += "     AND SEH.EH_DATA   <= '" + cDtAplFim + "' "
  cQuery  += "     AND SEH.EH_SALDO > 0 "
  cQuery  += "     AND SEH.D_E_L_E_T_ = ' ' "

  cQuery	:= ChangeQuery(cQuery)

  MPSysOpenQuery( cQuery, cTempSEH )

  While (cTempSEH)->(!Eof())
    aRetTtl  := {}
    SEH->(DbGoTo((cTempSEH)->(RECNO)))

    aRetTtl := Fa171Calc(SEH->EH_DATA)

    If SEH->EH_MOEDA > 1
      nVlrTtl += validateRate(aRetTtl[1], SEH->EH_TIPO, SEH->EH_MOEDA)
    Else
      nVlrTtl += aRetTtl[1]
    Endif
      
    (cTempSEH)->(dbSkip())

  EndDo

  (cTempSEH)->(DbCloseArea())

  RestArea(aGetArea)

Return nVlrTtl
