#INCLUDE 'tlpp-core.th'
#INCLUDE 'gfin.balances.service.ch'

NameSpace gfin.api.balances
Using NameSpace gfin.util

Static __instance   as Object
Static __lF75FILORI := F75->(FieldPos("F75_FILORI")) > 0

Class GfinBalanceService

  Public Method new()
  Public Method destroy()
  Public Method getInstance()
  Public Method documentsBalance()
  Public Method periodBalances()

EndClass

Method new() class GfinBalanceService
Return

//-------------------------------------------------------------------
/*/{Protheus.doc } Method destroy()
destroy da classe
/*/
//-------------------------------------------------------------------
Method destroy() class GfinBalanceService
  If VALTYPE(__instance) <> "U"
    FreeObj(__instance)
  EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc }getInstance
retorna a o instância ativa, se não exitir será criada uma nova.

@author Alison Lemes
@since sep|2020
/*/
//-------------------------------------------------------------------
Method getInstance() class GfinBalanceService
  if ( __instance == nil )
    __instance := GfinBalanceService():new()
  endif
Return __instance

//-------------------------------------------------------------------
/*/
{Protheus.doc} documentsBalance
validação dos params e derecionamento da requisição

@params params as Json, body
        lSE1 as Logical, indica se inclui a se1
        lSE2 as Logical, indica se inclui a se2

@Return json com os atributos
    {
      "result"    : true ou false
      "response"  : json de resposta
      "statusCode": código http de resposta quando necessário
    }
@author Renato Ito
@since 22/10/2020
/*/
//-------------------------------------------------------------------
Method documentsBalance(params as Json, lSE1 as Logical, lSE2 as Logical) class GfinBalanceService
  Local dataObj        as object
  Local response       as Json
  Local branches       as array
  Local dateFrom       as Character
  Local dateTo         as Character
  Local dateRef        as Character
  Local queryFilter    as Character
  Local cCustomSearch  As Character
  Local cJoin          As Character
  Local lIsCashFlow    As Logical

  branches      := params['branches']
  dateFrom      := params['dateFrom']
  dateTo        := params['dateTo']
  dateRef       := params['dateRef']

  // verifica se foi chamado pelo fluxo de caixa
  If !(Empty(params['isCashFlow']))
      If ValType(params['isCashFlow']) <> "L"
          If "true" $ params['isCashFlow']
              lIsCashFlow := .T.
          EndIf
      Else
          lIsCashFlow := params['isCashFlow']
      EndIf
  EndIf

  If valType(branches) <> 'A' .or. empty(branches)
    response :=  answerErrorFormat(403, 'branches', STR0001)
  Else
    dataObj := GfinBalanceDocumentsData():getInstance()
    dataObj:setBranches(branches)
    dataObj:setDateRef(dateRef)
    If !Empty(dateFrom)
      dataObj:setDateFrom(dateFrom)
    EndIf
    If !Empty(dateTo)
      dataObj:setDateTo(dateTo)
    EndIf
    response := JsonObject():new()
    response["result"]  := .T.
    response["response"] := JsonObject():new()

    //Filtro de filiais
    If __lF75FILORI
      queryFilter := "AND F75_FILORI IN (" + gfin.util.branchesFormatToIn(branches, 'SE1') + ")"
    Else
      queryFilter := "AND F75_FILIAL IN (" + gfin.util.branchesFormatToIn(branches, 'F75') + ")"
    EndIf
    If (lIsCashFlow)
      cCustomSearch := ''
      If FindFunction("gfin.util.profileToFilter")
        cCustomSearch := gfin.util.profileToFilter(__cUserId, 'NGF', IIf(lSE1, 'CSSE1', 'CSSE2'), 'Filter')
      EndIf
      // filtros personalizados
      If !(Empty(cCustomSearch))
        queryFilter += " AND " + cCustomSearch
        cJoin := dataObj:getJoin(lSE1)
        dataObj:setJoin(cJoin)
      EndIf
    EndIf

    If lSE1
      dataObj:setFilter(queryFilter + " AND F75_RECPAG = 'R' AND F75_TIPO NOT IN " + FormatIn( MVRECANT + "|" + MV_CRNEG + "|" + MVPROVIS, "|" ))
      response["response"]["receivablesBalance"]  := dataObj:getBalnces()
    EndIf
    If lSE2
      dataObj:setFilter(queryFilter + " AND F75_RECPAG = 'P' AND F75_TIPO NOT IN " + FormatIn( MVPAGANT + "|" + MV_CPNEG + "|" + MVPROVIS, "|" ))
      response["response"]["payablesBalance"]  := dataObj:getBalnces()
    EndIf
    dataObj:destroy()
  Endif
Return response

/*/{Protheus.doc} periodBalances
  saldos de acordo com o período considerando as regras de fluxo de caixa
  @type Method
  @daniele.ferreira
  @since 18/10/2021
  @param jQueryParams, json, verificação de tabela para realização no join
  @param jHeaders, json, verificação de tabela para realização no join
  @return jBalances, json com os atributos
    {
      "result"    : true ou false
      "response"  : json de resposta
    }
/*/
Method periodBalances(jQueryParams as json, jHeaders as json) class GfinBalanceService
  Local jBalances                as json
  Local dDateTo      := ctod('') as Date
  Local dDateFrom    := ctod('') as Date
  Local oServiceData             as Object
  Local cBranches    := ''       as character
  Local lCfgApl      := .F.      as Logical
  Local lBlqLib      := .F.      as Logical
  Local lIsCashFlow  := .T.      as Logical

  jBalances    := JsonObject():New()
  oServiceData := GfinBalanceDocumentsData():getInstance()
  dDateFrom    := oServiceData:setDateFrom(jQueryParams[ 'dateFrom' ])
  dDateTo      := oServiceData:setDateTo(jQueryParams[ 'dateTo' ])

  If jQueryParams:hasProperty('blqLib')
    lBlqLib := Alltrim(jQueryParams[ 'blqLib' ]) == "true"
  EndIf

  // verifica se foi chamado pelo fluxo de caixa
  If !(Empty(jQueryParams['isCashFlow']))
    If ValType(jQueryParams['isCashFlow']) <> "L"
      If "false" $ jQueryParams['isCashFlow']
        lIsCashFlow := .F.
      EndIf
    EndIf
  EndIf

  If jQueryParams:hasProperty('isControlPanel')
    lCfgApl := Alltrim(jQueryParams['isControlPanel']) == 'true'
  Endif

  lProvis      := Iif(jQueryParams:hasProperty('typeProvis') .and. Alltrim(jQueryParams[ 'typeProvis' ]) == 'true', .T., .F.)
  cBranches    := jHeaders['branches']
  // validações de dados obrigatórios
  If empty(dDateTo) .or. empty(dDateFrom) .or. empty(cBranches)
      jBalances := gfin.util.AnswerErrorFormat(403, STR0002, STR0003) //"Data obrigatória" # "É necessário informar a dateTo e dateFrom"
  Else
    oServiceData:setBranches(strToArray(cBranches, ','))
    jBalances[ 'result' ]   := .T.
    jBalances[ 'response' ] := oServiceData:getPeriodBalances(dDateFrom, dDateTo, lProvis, lBlqLib, lCfgApl, lIsCashFlow )
  EndIf
  oServiceData:destroy()
  FreeObj(oServiceData)
Return jBalances
