#INCLUDE 'tlpp-core.th'

NameSpace gfin.api.cashFlow
Using NameSpace gfin.util
USING NAMESPACE gfin.api.orders
USING NAMESPACE totvs.protheus.backoffice.ngf.util

//---------------------------------------------------------------------
/*/{Protheus.doc }getBudgetsFlowQuery
Retorna os valores orçados no periodo definido.

@param oHashCache  , object, Hash referênte aos mesês
@param dateFrom    , character, data de
@param dateTo      , character, data até
@param queryWhere  , character, filtros utilizados na composicao do periodo
@return aPeriod    , Array, matriz com os dados de cada periodo

@author Vinicius do Prado
@since mar|2022
/*/
//---------------------------------------------------------------------
Function getBudgetsFlowQuery(oHashCache as Object, dateFrom as Character, dateTo as Character, queryWhere as Character) as Array
  Local cQry		     := ""  as Character
  Local cFilJoinSED  := ""  as Character
  Local cField       := ""  as Character
  Local cAliasValue  := ""  as Character
  Local nBudgetSize  := 0   as Numeric
  Local nNatureSize  := 0   as Numeric
  Local nMonth       := 0   as Numeric
  Local nCount       := 0   as Numeric
  Local nMonthPeriod := 0   as Numeric
  Local nYearPeriod  := 0   as Numeric
  Local nYearFrom    := 0   as Numeric
  Local nYearTo      := 0   as Numeric
  Local nRoundDigit  := 0   as Numeric
  Local nValueBudget := 0   as Numeric
  Local nDecs		     := 0   as Numeric
  Local nQuote       := 0   as Numeric
  Local aPeriod      := {}  as Array

  nBudgetSize := Len(AllTrim(FWxFilial('SE7')))
  nNatureSize := Len(AllTrim(FWxFilial('SED')))
  nMonth      := Month(stringIsoToDate(dateFrom))
  nYearFrom   := Year(stringIsoToDate(dateFrom))
  nYearTo     := Year(stringIsoToDate(dateTo))
  nRoundDigit := SuperGetMv("MV_CENT")
  nDecs		    := MsDecimais(1)
  cAliasValue := GetNextAlias()

  cFilJoinSED := totvs.protheus.backoffice.ngf.util.BranchRelation( {"SE7","E7_FILIAL","SE7"}, {"SED","ED_FILIAL","SED"} )  + " AND "

  cQry += " FROM " + RetSqlName("SE7") + " SE7 "
  cQry += " INNER JOIN " + RetSqlName("SED") + " SED "
  cQry +=   " ON " + cFilJoinSED
  cQry +=   " SE7.E7_NATUREZ = SED.ED_CODIGO "
  cQry +=  " WHERE SE7.D_E_L_E_T_ = ' ' "
  cQry +=  " AND SED.D_E_L_E_T_ = ' ' " + queryWhere

  If nYearFrom == nYearTo
    getPeriodBugdets(@aPeriod, nMonth, nYearFrom, Month(stringIsoToDate(dateTo)))
  Else
    getPeriodBugdets(@aPeriod, nMonth, nYearFrom, 12)
    getPeriodBugdets(@aPeriod, 1, nYearTo, Month(stringIsoToDate(dateTo)))
  EndIf
  
  If !Empty(aPeriod) 
    For nCount := 1 To Len(aPeriod)
      nMonthPeriod := Month(stringIsoToDate(aPeriod[nCount][1]))
      nYearPeriod  := Year(stringIsoToDate(aPeriod[nCount][1]))
      nValueBudget := 0
      nQuote       := 0

      cField := "SE7." + oHashCache:get(cValTochar(nMonthPeriod))

      cQrySum   := "SELECT SE7.E7_MOEDA MOEDA, SUM( "+ cField +") TOTAL " + cQry
      cQrySum   += " AND SE7.E7_ANO = '" + cValToChar(nYearPeriod) + "' GROUP BY E7_MOEDA"

      cQryCount := "SELECT COUNT( "+ cField +") QUANTITY "+ cQry +" AND "+ cField +" > 0 "
      cQryCount += " AND SE7.E7_ANO = '" + cValToChar(nYearPeriod) + "'"

      MPSysOpenQuery(cQrySum,cAliasValue)

      While (cAliasValue)->(!Eof())
        nQuote := gfin.util.currencyLastQuote(cValToChar((cAliasValue)->MOEDA), Dtos(dDataBase))
        nValueBudget += Round(NoRound(xMoeda((cAliasValue)->TOTAL, (cAliasValue)->MOEDA, 1, dDatabase, nDecs+1, nQuote, 1) ,nDecs+1), nDecs+1)

        (cAliasValue)->(DbSkip())
      EndDo

      (cAliasValue)->(DbCloseArea())

      aPeriod[nCount][2] := nValueBudget
      aPeriod[nCount][3] := MpSysExecScalar(cQryCount , "QUANTITY")
    Next nCount
  EndIF

Return aPeriod

//---------------------------------------------------------------------
/*/{Protheus.doc }getPeriodBugdets
Retorna os períodos para composição dos orçamentos.

@param aPeriod    , array, matriz que armazenerá os periodos (referência)
@param nMonth     , numeric, mês de inicio do período
@param nYear      , numeric, ano do período
@param nEndMonth  , numeric, mês final do período

@author Vinicius do Prado
@since mar|2022
/*/
//---------------------------------------------------------------------
Function getPeriodBugdets(aPeriod as Array, nMonth as Numeric, nYear as Numeric, nEndMonth as Numeric)
  Local nCount     := 0  as Numeric
  Local cYear      := "" as Character
  Local cMonth     := "" as Character
  Local cAuxMonth  := "" as Character

  For nCount := nMonth To nEndMonth
    cYear     := cValToChar(nYear)
    cAuxMonth := cValToChar(nCount)
    cMonth    := IIF(nCount < 10, "0" + cAuxMonth, cAuxMonth)

    AAdd(aPeriod, { cYear + "-" + cMonth + "-" + "01", 0, 0 })
  Next nCount

Return Nil
