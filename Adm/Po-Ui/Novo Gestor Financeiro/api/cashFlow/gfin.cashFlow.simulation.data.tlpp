#INCLUDE 'tlpp-core.th'
#Include "FWMVCDEF.ch"
#include 'totvs.ch'
#INCLUDE 'gfin.cashFlow.simulation.data.ch'

NameSpace gfin.api.cashFlow
using namespace gfin.util

Static __cIDSimulation As Character 

/*/{Protheus.doc} IncludeSimulation
    Inclusão da simulação no fluxo de caixa
    @type  Function
    @author Vitor Duca
    @since 21/06/2022
    @version 1.0
    @param jBodyRequest, JSON, Body da requisição
    @return jResponse, JSON, Resposta da requisição 
/*/
Function IncludeSimulation(jBodyRequest As Json) As Json
    Local aKey := {} As Array
    Local jF7D := NIL As Json
    Local aF7E := {} As Array
    Local oModel := NIL As Object
    Local oAuxF7D := NIL As Object
    Local oAuxF7E := NIL As Object
    Local jResponse := NIL As Json
    Local cMessageError := ""

    cMessageError := VerifyEnvironment(jBodyRequest)

    jF7D := jBodyRequest["F7D"]
    aF7E := jBodyRequest["F7E"]
    jResponse := JsonObject():new()

    If Empty(cMessageError)
        Begin Transaction
            Aadd(akey, Padr(jF7D['f7d_filial'],  TamSx3("F7D_FILIAL")[1]))
            Aadd(akey, Padr(jF7D['f7d_titulo'],  TamSx3("F7D_TITULO")[1]))
            Aadd(akey, Padr(jF7D['f7d_data'],  TamSx3("F7D_DATA")[1]))
            Aadd(akey, Padr(jF7D['f7d_hora'],  TamSx3("F7D_HORA")[1]))
            Aadd(akey, Padr(jF7D['f7d_user'],  TamSx3("F7D_USER")[1]))
        
            F7D->(DbSetOrder(2))
            If !F7D->(DbSeek(akey[1] + akey[2] + akey[3] + akey[4] + akey[5]))
                SetMaster('F7D')
                SetDetail('F7E')
                SetRelation({ {'F7E_FILIAL','XFILIAL("F7E")'} ,{'F7E_IDSIMU','F7D_IDSIMU'} })

                oModel := FWLoadModel("FINMTEM")
                oModel:SetOperation(MODEL_OPERATION_INSERT)
                oModel:Activate()

                oAuxF7D	:= oModel:GetModel('MASTER')
                oAuxF7E	:= oModel:GetModel('DETAIL')

                OperationModelF7D(jF7D, @oAuxF7D, oModel:GetOperation())
                InsertModelF7E(aF7E, @oAuxF7E)

                If oModel:VldData() .and. oModel:CommitData()
                    jResponse := answerFormat(.T., 201, STR0001, '') //"Simulação cadastrada com sucesso!"
                Else
                    jResponse := answerFormat(.F., 400, STR0002, cValToChar(oModel:GetErrorMessage()[6])) //"Erro ao incluir simulação"
                Endif
            Else
                jResponse := answerFormat(.F., 400, STR0002, STR0010) //"Erro ao incluir simulação" # "Já existe na base de dados uma simulação com o mesmo titulo, data, hora e usuário"
            Endif
        End Transaction        
    Else
        jResponse := answerFormat(.F., 500, STR0003, cMessageError) //"Não foi possivel incluir a simulação"
    Endif

    __cIDSimulation := ""
Return jResponse

/*/{Protheus.doc} UpdateSimulation
    Alteração de uma simulação no fluxo de caixa
    @type  Function
    @author Vitor Duca
    @since 21/06/2022
    @version 1.0
    @param jBodyRequest, JSON, Body da requisição
    @param cInternalID, Character, PathParam para pesquisar o registro
    @return jResponse, JSON, Resposta de retorno da requisição
/*/
Function UpdateSimulation(jBodyRequest As Json, cInternalID As Character) As Json
    Local cMessageError := "" As Character
    Local aInternalID := {} As Array
    Local akey := {} As Array 
    Local jResponse := NIL As Json
    
    cMessageError := VerifyEnvironment(jBodyRequest)
    jResponse := JsonObject():new()

    If Empty(cMessageError)
        Begin Transaction
            jF7D := jBodyRequest["F7D"]
            aF7E := jBodyRequest["F7E"]

            aInternalID := STRTOKARR( cInternalID, "|" )

            Aadd(akey, Padr(aInternalID[1],  TamSx3("F7D_FILIAL")[1]))
            Aadd(akey, Padr(aInternalID[2],  TamSx3("F7D_IDSIMU")[1]))

            F7D->(DbSetOrder(1))
            If F7D->(DbSeek(akey[1] + akey[2]))
                SetMaster('F7D')
                SetDetail('F7E')
                SetRelation({ {'F7E_FILIAL','XFILIAL("F7E")'} ,{'F7E_IDSIMU','F7D_IDSIMU'} })

                __cIDSimulation := akey[2]

                oModel := FWLoadModel("FINMTEM")
                oModel:SetOperation(MODEL_OPERATION_UPDATE)
                oModel:Activate()

                oAuxF7D	:= oModel:GetModel('MASTER')
                oAuxF7E	:= oModel:GetModel('DETAIL')

                OperationModelF7D(jF7D, @oAuxF7D, oModel:GetOperation())
                InsertModelF7E(aF7E, @oAuxF7E)

                If oModel:VldData() .and. oModel:CommitData()
                    jResponse := answerFormat(.T., 200, STR0004, '') //"Simulação alterada com sucesso!"
                Else
                    jResponse := answerFormat(.F., 400, STR0005, cValToChar(oModel:GetErrorMessage()[6])) //"Erro ao alterar simulação"
                Endif
            Else
                jResponse := answerFormat(.F., 400, STR0005, STR0006) //"Erro ao alterar simulação" # "Simulação não encontrada"
            Endif
        End Transaction    
    Else
        jResponse := answerFormat(.F., 500, STR0007, cMessageError) //"Não foi possivel alterar a simulação"
    Endif
Return jResponse

/*/{Protheus.doc} OperationModelF7D
    Realiza as operações no modelo da tabela F7D
    @type  Function
    @author Vitor Duca
    @since 21/06/2022
    @version 1.0
    @param jFields, JSON, Contem os campos da F7D 
    @param oModel, Object, contem o modelo de dados da tabela F7D que ira sofrer alterações
    @param nOperation, Numeric, Operação do modelo de dados
/*/
Function OperationModelF7D(jFields As Json, oModel As Object, nOperation As Numeric)
    Local nX := 0 as Numeric
    Local aProperty := {} as Array

    aProperty := jFields:getNames()

    For nX := 1 To Len(aProperty)
        If nOperation == MODEL_OPERATION_INSERT
            If Upper(aProperty[nX]) == "F7D_DATA"
                oModel:setValue(Upper(aProperty[nX]), Stod(jFields[aProperty[nX]]))
            Else
                oModel:setValue(Upper(aProperty[nX]), jFields[aProperty[nX]])
            Endif
        Elseif nOperation == MODEL_OPERATION_UPDATE
             If Upper(aProperty[nX]) == "F7D_DATA" .OR.;
                Upper(aProperty[nX]) == "F7D_HORA" .OR.;
                Upper(aProperty[nX]) == "F7D_USER"
                If Upper(aProperty[nX]) == "F7D_DATA"
                    oModel:setValue(Upper(aProperty[nX]), Stod(jFields[aProperty[nX]]))
                Else
                    oModel:setValue(Upper(aProperty[nX]), jFields[aProperty[nX]])
                Endif
            EndIf
        Endif
    Next nX

    If nOperation == MODEL_OPERATION_INSERT
        __cIDSimulation := FWUUIDV4()
        oModel:SetValue("F7D_IDSIMU", __cIDSimulation)
    Endif

Return 

/*/{Protheus.doc} InsertModelF7E
    Realiza a inserção dos itens na tabela F7E
    @type  Function
    @author Vitor Duca
    @since 21/06/2022
    @version version
    @param aFields, Array, Matriz contendo os campos da F7E que foram enviados na requisição
    @param oModel, Object, Modelo de dados da tabela F7E
/*/
Function InsertModelF7E(aFields As Array, oModel As Object)
    Local cItem := "001" As Character
    Local nItems := oModel:Length() As Numeric
    Local nX := 0 As Numeric
    Local nCountFields := Len(aFields) As Numeric 

    For nX := 1 to nItems
        oModel:GoLine(nX)
        oModel:DeleteLine()
    Next nX

    For nX := 1 To nCountFields
        oModel:AddLine()
        oModel:SetValue( 'F7E_FILIAL', xFilial("F7E"))
        oModel:SetValue( 'F7E_IDSIMU', __cIDSimulation)
        oModel:SetValue( 'F7E_ITEM', cItem)
        oModel:SetValue( 'F7E_TIPO', aFields[nX]['f7e_tipo'])
        oModel:SetValue( 'F7E_VALOR', aFields[nX]['f7e_valor'])
        oModel:SetValue( 'F7E_DESCRI', aFields[nX]['f7e_descri'])
        oModel:SetValue( 'F7E_DATA', Stod(aFields[nX]['f7e_data']))

        cItem := Soma1(cItem)
    Next nX   

Return 

/*/{Protheus.doc} VerifyEnvironment
    Verifica se o ambiente e a requisição estão corretos
    @type  Static Function
    @author Vitor Duca
    @since 21/06/2022
    @version 1.0
    @param jBodyRequest, JSON, Body da requisição
    @return cMessage, Character, Mensagem de erro
/*/
Static Function VerifyEnvironment(jBodyRequest As Json) As Character
    Local lRet := .T. As Logical
    Local cMessage := "" As Character

    If !AliasInDic('F7D') .And. !AliasInDic('F7E')
        cMessage :=  STR0008 //"Tabelas F7D e F7E não encontradas"
        lRet := .F.
    Endif    

    If lRet .and. ValType(jBodyRequest['F7D']) != 'J' .Or. ValType(jBodyRequest['F7E']) != 'A'
        cMessage := STR0009 //"Necessário informar os dados das tabelas F7D e F7E"
        lRet := .F.
    EndIf

Return cMessage
