#INCLUDE 'tlpp-core.th'
#INCLUDE 'gfin.cashFlow.service.ch'


NameSpace gfin.api.cashFlow
Using NameSpace gfin.util
Using NameSpace gfin.api.balances

Static __lF75FILORI := F75->(FieldPos("F75_FILORI")) > 0
Static __lF76FILORI := F76->(FieldPos("F76_FILORI")) > 0
Static __lF76BLQLIB := F76->(FieldPos("F76_BLQLIB")) > 0
Static __instance	 as object

Class GfinCashFlowService
  Public Data branches as Array
  Public Data dateRef  as Date
  Public Data dateFrom as Date
  Public Data dateTo   as Date
  Public Data blqLib   as Logical
  Public Data filter   as Array

	Public Method new() CONSTRUCTOR
	Public Method destroy()
	Public Method getInstance()

  Public Method setDateRef()   			        // set data base
	Public Method setDateFrom()   			      // set data de
	Public Method setDateTo()   			        // set data até
  Public Method setBlqLib()   			        // set bloqueados e não Liberados
	Public Method setBranchesArray()
	Public Method setQueryFilter()
	Public Method getQueryFilter()

	Public Method getCashFlow()      // fluxo de caixa
	Public Method getRecPayFlow()    // fluxo de caixa receivables e payables
  Public Method getOrdersFlow()    // pedidos de venda e compra do fluxo de caixa
  Public Method getBudgetsFlow()   // fluxo de caixa orçamentos de receita e despesa
  Public Method postSimulation()   // Inclui uma simulação do fluxo de caixa
  Public Method putSimulation()    // Altera uma simulação existente nas tabelas F7D e F7E
  Public Method getApplicationFlow()    // Retorna os valores das aplicações SEH para o fluxo de caixa

EndClass

Method new() Class GfinCashFlowService
Return Self

//-------------------------------------------------------------------
/*/{Protheus.doc } Method destroy()
destroy da classe
/*/
//-------------------------------------------------------------------
Method destroy() class GfinCashFlowService
	FreeObj(__instance)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc }getInstance
retorna a o instância ativa, se não exitir será criada uma nova.

@author Alison Lemes
@since sep|2020
/*/
//-------------------------------------------------------------------
Method getInstance() class GfinCashFlowService
	If (__instance == Nil)
		__instance := GfinCashFlowService():new()
	EndIf
Return __instance

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setDateRef()
configura a data base
/*/
//-------------------------------------------------------------------
Method setDateRef(date as Character) Class GfinCashFlowService
  Self:dateRef := gfin.util.formatDate(date, .T.)
  If Empty(Self:dateRef)
    Self:dateRef := dDataBase
  EndIf
Return Self:dateRef

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setDateFrom()
Configura a data de
/*/
//-------------------------------------------------------------------
Method setDateFrom(date as Character) Class GfinCashFlowService
  Self:dateFrom := gfin.util.formatDate(date, .T.)
Return Self:dateFrom

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setDateTo()
Configura a data até
/*/
//-------------------------------------------------------------------
Method setDateTo(date as Character) Class GfinCashFlowService
  Self:dateTo := gfin.util.formatDate(date, .T.)
Return Self:dateTo

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setDateTo()
Configuração para pedidos não liberados/bloqueados
/*/
//-------------------------------------------------------------------
Method setBlqLib(blqLib as Logical) Class GfinCashFlowService
  Self:blqLib := blqLib
Return Self:blqLib

//-------------------------------------------------------------------
/*/{Protheus.doc } Method setBranchesArray()
configura as filiais
/*/
//-------------------------------------------------------------------
Method setBranchesArray(branche as Array) Class GfinCashFlowService
  Self:branches := branche
Return Self:branches


//-------------------------------------------------------------------
/*/
{Protheus.doc} setQueryFilter
informa os filtros de query

@Param filter as Array, filtro para a query com as posições:
  [1] = inicia sempre com AND ou OR + campo + operado + ?. Ex.: 'AND E1_NUM > ?' ou 'AND F75_TIPO NOT IN (?)'
  [2] = valor. Ex.: '000000001'
  [3] = tipo de dado entre.: NUMERIC, STRING, DATE ou IN para array
@author Renato Ito
@since 25/02/2021
/*/
//-------------------------------------------------------------------
Method setQueryFilter(filterQry as Array) Class GfinCashFlowService
  Self:filter := filterQry
Return Self:filter

//-------------------------------------------------------------------
/*/
{Protheus.doc} getQueryFilter
retorna o filtro para uso nas querys

@Return fixQuery as Character, condições para uso em query

@author Renato Ito
@since 25/02/2021
/*/
//-------------------------------------------------------------------
Method getQueryFilter() Class GfinCashFlowService
  Local item      as Numeric
  Local filters   as Array
  Local query     as Character
  Local fixQuery  as Character
  Local statement as Object
  Local type      as Character

  filters := Self:filter
  query := ''

  For item := 1 To Len(filters)
    query += " " + filters[item][1]
  Next
  statement := FwPreparedStatement():New(query)

  For item := 1 To Len(filters)
    type := UPPER(filters[item][3])
    Do Case
      Case type == 'NUMERIC'
        statement:setNumeric(item, filters[item][2])
      Case type == 'STRING'
        statement:setString(item, filters[item][2])
      Case type == 'DATE'
        statement:setDate(item, filters[item][2])
      Case type == 'IN'
        statement:setIn(item, filters[item][2])
    EndCase
  Next
  fixQuery := statement:GetFixQuery()
	statement:Destroy()

Return fixQuery

//-------------------------------------------------------------------
/*/
{Protheus.doc} getCashFlow
validação dos params e derecionamento da requisição

@Return json com os atributos
		{
			"result"    : true ou false
			"response"  : {
        "docuemnts":[],
        "purchases: []
      }
			"statusCode": código http de resposta quando necessário
		}
@author Renato Ito
@since 22/10/2020
/*/
//-------------------------------------------------------------------
Method getCashFlow(params as Json) class GfinCashFlowService
	Local response          as Json
	Local branches  := {}   as array
	Local dateFrom  := ""   as Character
	Local dateTo    := ""   as Character
	Local dateRef   := ""   as Character
  Local lBlqLib   := .F.  as logical

	branches 	  := params['branches']
	dateFrom	  := params['dateFrom']
	dateTo	  	:= params['dateTo']
	dateRef		  := params['dateRef']

  If params:hasProperty('blqLib')
    lBlqLib := params['blqLib']
  EndIf

  response    := JsonObject():new()

	If valType(branches) <> 'A' .or. empty(branches)
		response :=	answerErrorFormat(403, 'branches', STR0001)
	Else
    Self:setBranchesArray(branches)
    Self:setDateRef(dateRef)
    Self:setDateFrom(dateFrom)
    Self:setDateTo(dateTo)
    Self:setBlqLib(lBlqLib)

    // títulos financeiros
    response["result"]	:= .T.
    response["response"] := JsonObject():new()
    response["response"]["documents"] := JsonObject():new()
    response["response"]["documents"] := geDocuments(Self, .T., .T.)
    response["response"]["orders"]    := JsonObject():new()
    response["response"]["orders"]    := getOrders(Self, .T., .T.)
  EndIf

Return response

//-------------------------------------------------------------------
/*/
{Protheus.doc} getRecPayFlow
fluxo de caixa a receber

@Return json com os atributos
		{
			"result"    : true ou false
			"response"  : {
        "docuemnts":[],
      }
			"statusCode": código http de resposta quando necessário
		}
@author Renato Ito
@since 22/10/2020
/*/
//-------------------------------------------------------------------
Method getRecPayFlow(params as Json, lSE1 as Logical, lSE2 as Logical) class GfinCashFlowService
	Local response       as Json
	Local branches       as array
	Local dateFrom       as Character
	Local dateTo         as Character
	Local dateRef        as Character

	branches 	  := params['branches']
	dateFrom	  := params['dateFrom']
	dateTo	  	:= params['dateTo']
	dateRef		  := params['dateRef']
  response    := JsonObject():new()

	If valType(branches) <> 'A' .or. empty(branches)
		response :=	answerErrorFormat(403, 'branches', STR0001)
	Else
    Self:setBranchesArray(branches)
    Self:setDateRef(dateRef)
    Self:setDateFrom(dateFrom)
    Self:setDateTo(dateTo)

    // títulos financeiros
    response["result"]	:= .T.
    response["response"] := JsonObject():new()
    response["response"]["documents"] := JsonObject():new()
    response["response"]["documents"] := geDocuments(Self, lSE1, lSE2)
  EndIf

Return response

/*/{Protheus.doc} geDocuments
  @param oSelf as Object, self
  @param lSE1 as Logical, indica se retorna SE1
  @param lSE2 as Logical, indica se retorna SE2
  @return response as Json, Json de receivables e payables

  @author renato.ito
  @since 25/02/2021
  /*/
Static Function geDocuments(oSelf as Object, lSE1 as Logical, lSE2 as Logical)
    Local response      as Json
    Local branchesQry   as Array
    Local filter        as Array
    Local cJoin         As Character
    Local cCustomSearch As Character
    Local cFieldNick    As Character
    Local cCliforField  As Character
    Local cTable        As Character

    branchesQry   := {}
    branchesQry   := gfin.util.branchesGroup(oSelf:branches, 'SE1')
    response      := JsonObject():new()
    cCustomSearch := ''
    If FindFunction("gfin.util.profileToFilter")
      cCustomSearch := gfin.util.profileToFilter(__cUserId, 'NGF', IIf(lSE1, 'CSSE1', 'CSSE2'), 'Filter')
    EndIf
    // filtros personalizados
    If !(Empty(cCustomSearch))
      // join
      If lSE1
        cTable := 'SE1'
        cFieldNick := cTable + '.E1_'
        cCliforField := 'CLIENTE'
      Else
        cTable := 'SE2'
        cFieldNick := cTable + '.E2_'
        cCliforField := 'FORNECE'
      EndIf

      cJoin := " INNER JOIN " + RetSqlName(cTable) + " " + cTable
      If __lF75FILORI
        cJoin += " ON " + cFieldNick + "FILIAL = F75.F75_FILORI"
      Else
        cJoin += " ON " + cFieldNick + "FILIAL = F75.F75_FILIAL"
      EndIf
      cJoin += " AND " + cFieldNick + "PREFIXO = F75.F75_PREFIX"
      cJoin += " AND " + cFieldNick + "NUM = F75.F75_NUM"
      cJoin += " AND " + cFieldNick + "PARCELA = F75.F75_PARCEL"
      cJoin += " AND " + cFieldNick + "TIPO = F75.F75_TIPO"
      cJoin += " AND " + cFieldNick + cCliforField + " = F75.F75_CLIFOR"
      cJoin += " AND " + cFieldNick + "LOJA = F75.F75_LOJA"
      cJoin += " AND " + cTable + ".D_E_L_E_T_ =' '"
    EndIf

    // filtro receber
    If lSe1
      filter := {}
      If __lF75FILORI
        aAdd(filter, {"AND F75_FILORI IN (?)", branchesQry, 'IN'})
      Else
        aAdd(filter, {"AND F75_FILIAL IN (?)", branchesQry, 'IN'})
      EndIf
      aAdd(filter, {"AND F75_RECPAG = ?", 'R', 'STRING'})
      aAdd(filter, {"AND F75_TIPO NOT IN (?)", Separa(MVRECANT+"|"+ MV_CRNEG, '|'), 'IN'})
      aAdd(filter, {"AND F75_FLUXO <> ?", 'N', 'STRING'})
      aAdd(filter, {"AND F75_SALDO > ?", 0, 'NUMERIC'})
      If !Empty(oSelf:dateFrom)
        aAdd(filter, {"AND F75_VENCTO >= ?", oSelf:dateFrom, 'DATE'})
      EndIf
      If !Empty(oSelf:dateTo)
        aAdd(filter, {"AND F75_VENCTO <= ?", oSelf:dateTo, 'DATE'})
      EndIf
      oSelf:setQueryFilter(filter)
      response["receivables"] := getDocumentFlow(oSelf:getQueryFilter(), cJoin, cCustomSearch)
    EndIf
    // filtro pagar
    If lSE2
      filter := {}
      If __lF75FILORI
        aAdd(filter, {"AND F75_FILORI IN (?)", branchesQry, 'IN'})
      Else
        aAdd(filter, {"AND F75_FILIAL IN (?)", branchesQry, 'IN'})
      EndIf
      aAdd(filter, {"AND F75_RECPAG = ?", 'P', 'STRING'})
      aAdd(filter, {"AND F75_TIPO NOT IN (?)", Separa(MVPAGANT+"|"+ MV_CPNEG, '|'), 'IN'})
      aAdd(filter, {"AND F75_FLUXO <> ?", 'N', 'STRING'})
      aAdd(filter, {"AND F75_SALDO > ?", 0, 'NUMERIC'})
      If !Empty(oSelf:dateFrom)
        aAdd(filter, {"AND F75_VENCTO >= ?", oSelf:dateFrom, 'DATE'})
      EndIf
      If !Empty(oSelf:dateTo)
        aAdd(filter, {"AND F75_VENCTO <= ?", oSelf:dateTo, 'DATE'})
      EndIf
      oSelf:setQueryFilter(filter)
      response["payables"] := getDocumentFlow(oSelf:getQueryFilter(), cJoin, cCustomSearch)
    EndIf
Return response

//-------------------------------------------------------------------
/*/
{Protheus.doc} getOrdersFlow
fluxo de caixa Pedidos de Venda e Compra

@Return json com os atributos
		{
			"result"    : true ou false
			"response"  : {
        "orders":[],
      }
			"statusCode": código http de resposta quando necessário
		}
@author Alison Kaique
@since mar|2021
/*/
//-------------------------------------------------------------------
Method getOrdersFlow(params as Json, getSales as Logical, getPurchases as Logical) class GfinCashFlowService
	Local response          as Json
	Local branches  := {}   as array
	Local dateFrom  := ""   as Character
	Local dateTo    := ""   as Character
	Local dateRef   := ""   as Character
  Local lBlqLib   := .F.  as Logical 

	branches 	  := params['branches']
	dateFrom	  := params['dateFrom']
	dateTo	  	:= params['dateTo']
	dateRef		  := params['dateRef']

  If params:hasProperty('blqLib')
    lBlqLib := params['blqLib']
  EndIf

  response    := JsonObject():new()

	If valType(branches) <> 'A' .or. empty(branches)
		response :=	answerErrorFormat(403, 'branches', STR0001)
	Else
    Self:setBranchesArray(branches)
    Self:setDateRef(dateRef)
    Self:setDateFrom(dateFrom)
    Self:setDateTo(dateTo)
    Self:setBlqLib(lBlqLib)

    // títulos financeiros
    response["result"]	:= .T.
    response["response"] := JsonObject():new()
    response["response"]["orders"] := JsonObject():new()
    response["response"]["orders"] := getOrders(Self, getSales, getPurchases)
  EndIf

Return response

/*/{Protheus.doc} getOrders
  Retorna JSON de Pedidos conforme parâmetros

  @param instance    , object, Instância Ativa da Classe
  @param getSales    , logical, Indica se retorna Pedidos de Venda
  @param getPurchases, logical, Indica se retorna Pedidos de Compra

  @return response, object, Json de sales e purchases

  @author Alison Kaique
  @since mar|2021
/*/
Static Function getOrders(instance as Object, getSales as Logical, getPurchases as Logical)
    Local response      as Json
    Local branchesQry   as Array
    Local filter        as Array
    Local cJoin         As Character
    Local cCustomSearch As Character
  
    branchesQry   := {}
    branchesQry   := gfin.util.branchesGroup(instance:branches, 'SC5')
    response      := JsonObject():new()
    cCustomSearch := ''
    If FindFunction("gfin.util.profileToFilter")
      cCustomSearch := gfin.util.profileToFilter(__cUserId, 'NGF', IIf(getSales, 'CSSC6', 'CSSC7'), 'Filter')
    EndIf
    // filtros personalizados
    If !(Empty(cCustomSearch))
      // join
      If FindFunction("gfin.api.balances.getJoinOrders")
        cJoin := gfin.api.balances.getJoinOrders(getSales)
      Endif  
    EndIf

    // filtro Pedidos de Venda
    If (getSales)
      filter := {}
      If __lF76FILORI
        AAdd(filter, {"AND F76_FILORI IN (?)", branchesQry, 'IN'})
      Else
        AAdd(filter, {"AND F76_FILIAL IN (?)", branchesQry, 'IN'})
      EndIf
      AAdd(filter, {"AND F76_TIPO = ?", '1', 'STRING'})

      If !Empty(instance:dateFrom)
        aAdd(filter, {"AND F76_DATA >= ?", instance:dateFrom, 'DATE'})
      EndIf
      If !Empty(instance:dateTo)
        aAdd(filter, {"AND F76_DATA <= ?", instance:dateTo, 'DATE'})
      EndIf

      If !instance:blqLib .And. __lF76BLQLIB
        aAdd(filter, {"AND F76_BLQLIB = ?", 1, 'NUMERIC'})
      EndIf

      instance:setQueryFilter(filter)
      response["sales"] := getOrdersFlowQuery(instance:getQueryFilter(), cJoin, cCustomSearch)
    EndIf

    // filtro Pedidos de Compra
    If (getPurchases)
      filter := {}
      If __lF76FILORI
        AAdd(filter, {"AND F76_FILORI IN (?)", branchesQry, 'IN'})
      Else
        AAdd(filter, {"AND F76_FILIAL IN (?)", branchesQry, 'IN'})
      EndIf
      AAdd(filter, {"AND F76_TIPO = ?", '2', 'STRING'})

      If !Empty(instance:dateFrom)
        aAdd(filter, {"AND F76_DATA >= ?", instance:dateFrom, 'DATE'})
      EndIf
      If !Empty(instance:dateTo)
        aAdd(filter, {"AND F76_DATA <= ?", instance:dateTo, 'DATE'})
      EndIf

      If !instance:blqLib .And. __lF76BLQLIB
        aAdd(filter, {"AND F76_BLQLIB = ?", 1, 'NUMERIC'})
      EndIf

      instance:setQueryFilter(filter)
      response["purchases"] := getOrdersFlowQuery(instance:getQueryFilter(), cJoin, cCustomSearch)
    EndIf
Return response


//-------------------------------------------------------------------
/*/
{Protheus.doc} getBudgetsFlow
  Fluxo de caixa orçamentos de receita e despesa.

  @param params       as json, parâmetros enviados na requisição
  @param getRevenue   as logical, define o tipo: orçamentos receita
  @param getExpensive as logical, define o tipo: orçamentos despesa

  @Return json com os atributos
    {
      "result"    : true ou false
      "response"  : {
        "periods":[],
      }
      "statusCode": código http de resposta quando necessário
    }
  @author Vinicius do Prado
  @since mar|2022
/*/
//-------------------------------------------------------------------
Method getBudgetsFlow(params as Json, getRevenue as Logical, getExpensive as Logical) class GfinCashFlowService
	Local jResponse  as Json
	Local aBranches  := {} as array
	Local cDateFrom  := "" as Character
	Local cDateTo    := "" as Character
  Local cType      := "" as Character

	aBranches 	:= params['branches']
	cDateFrom	  := params['dateFrom']
	cDateTo	  	:= params['dateTo']
  cType       := IIF(getRevenue, 'R', 'D')
  jResponse   := JsonObject():new()

	If valType(aBranches) <> 'A' .or. empty(aBranches)
		jResponse :=	answerErrorFormat(403, 'branches', STR0001)
	Else
    Self:setBranchesArray(aBranches)
    Self:setDateFrom(cDateFrom)
    Self:setDateTo(cDateTo)

    jResponse["result"]	:= .T.
    jResponse["response"] := JsonObject():new()
    jResponse["response"]["periods"] := JsonObject():new()
    jResponse["response"]["periods"] := getBudgets(cDateFrom, cDateTo, cType, Self)
  EndIf

Return jResponse

//-------------------------------------------------------------------
/*/
{Protheus.doc} getApplicationFlow
  Retorna os valores das aplicações SEH para o fluxo de caixa

  @param params       as json, parâmetros enviados na requisição
  @param getRevenue   as logical, define o tipo: orçamentos receita
  @param getExpensive as logical, define o tipo: orçamentos despesa

  @Return json com os atributos
    {
      "result"    : true ou false
      "response"  : {
        "datesAplication":[],
      }
      "statusCode": código http de resposta quando necessário
    }
  @author Francisco Oliveira
  @since 13/12/2022
/*/
//-------------------------------------------------------------------
Method getApplicationFlow(params as Json) class GfinCashFlowService
	Local jResponse  as Json
	Local aBranches  := {} as array
	Local cDateFrom  := "" as Character
	Local cDateTo    := "" as Character

	aBranches 	:= params['branches']
	cDateFrom	  := params['dateFrom']
	cDateTo	  	:= params['dateTo']
  jResponse   := JsonObject():new()

	If valType(aBranches) <> 'A' .or. empty(aBranches)
		jResponse :=	answerErrorFormat(403, 'branches', STR0001)
	Else
    Self:setBranchesArray(aBranches)
    Self:setDateFrom(cDateFrom)
    Self:setDateTo(cDateTo)

    jResponse["result"]	:= .T.
    jResponse["response"] := JsonObject():new()
    jResponse["response"]["datesAplication"] := JsonObject():new()
    jResponse["response"]["datesAplication"] := getAplication(cDateFrom, cDateTo, Self)
  EndIf

Return jResponse

/*/{Protheus.doc} getBudgets
  Retorna JSON de orçamentos conforme parâmetros

  @param cDateFrom  , character, date de
  @param cDateTo    , character, data até
  @param cType      , character, tipo: receita ou despesa
  @param instance   , object, instancia da classe

  @return aResponse , array, matriz contendo os orçamentos

  @author Vinicius do Prado
  @since mar|2022
/*/
Static Function getBudgets(cDateFrom as Character, cDateTo as Character, cType as Character, instance as Object) as Array
  Local oHashCache    As Object
  Local aBudgets      := {} As Array
  Local nX            := 1 As Numeric
  Local aRet          := {} As Array
  Local aResponse     := {} As Array
  Local aFilter       := {} As Array
  Local aBranchesQry  := {} As Array

  oHashCache    := FwHashMap():New()
  aBranchesQry   := gfin.util.branchesGroup(instance:branches, 'SE7')

  // Hash contendo os mesês x campos SE7
  oHashCache:put("1","E7_VALJAN1")
  oHashCache:put("2","E7_VALFEV1")
  oHashCache:put("3","E7_VALMAR1")
  oHashCache:put("4","E7_VALABR1")
  oHashCache:put("5","E7_VALMAI1")
  oHashCache:put("6","E7_VALJUN1")
  oHashCache:put("7","E7_VALJUL1")
  oHashCache:put("8","E7_VALAGO1")
  oHashCache:put("9","E7_VALSET1")
  oHashCache:put("10","E7_VALOUT1")
  oHashCache:put("11","E7_VALNOV1")
  oHashCache:put("12","E7_VALDEZ1")

  AAdd(aFilter, {"AND SED.ED_COND = ?", cType, 'STRING'})
  AAdd(aFilter, {"AND SE7.E7_FILIAL IN (?) ", aBranchesQry, 'IN'})

  instance:setQueryFilter(aFilter)

  aBudgets := getBudgetsFlowQuery( oHashCache, cDateFrom, cDateTo, instance:getQueryFilter() )

  For nX := 1 to Len(aBudgets)
    aRet := {;
      'date':  aBudgets[nX][1],;
      'value':  aBudgets[nX][2],;
      'quantity':  aBudgets[nX][3];
    }
    Aadd(aResponse, aRet)
  Next

  FreeObj(oHashCache)
Return aResponse

/*/{Protheus.doc} getAplication
  Retorna JSON de Aplicações conforme parâmetros

  @param cDateFrom  , character, date de
  @param cDateTo    , character, data até
  @param cType      , character, tipo: receita ou despesa
  @param instance   , object, instancia da classe

  @return aResponse , array, matriz contendo os orçamentos

  @author Francisco Oliveira
  @since 13/12/2022
/*/
Static Function getAplication(cDateFrom as Character, cDateTo as Character, instance as Object) as Array
  
  Local aAPLFlow      := {} As Array
  Local nX            := 1 As Numeric
  Local aRet          := {} As Array
  Local aResponse     := {} As Array
  Local aBranchesQry  := {} As Array

  aBranchesQry   := gfin.util.branchesGroup(instance:branches, 'SEH')

  aAPLFlow := getApplicationFlowPeriod(cDateFrom, cDateTo, aBranchesQry )

  If Len(aAPLFlow) > 0
    For nX := 1 to Len(aAPLFlow)
      aRet := {;
        'date':     aAPLFlow[nX][1],;
        'value':    aAPLFlow[nX][2],;
        'quantity': aAPLFlow[nX][3];
      }
      Aadd(aResponse, aRet)
    Next
  Else
    aRet := {;
        'date':     cDateFrom,;
        'value':    0,;
        'quantity': 0;
      }
    Aadd(aResponse, aRet)
  Endif

Return aResponse

/*/{Protheus.doc} postSimulation
  POST - inclusão de uma simulação no fluxo de caixa
  @author Vitor Duca
  @since 13/06/2022
  @version 1.0
  @param jBodyRequest, JSON, Body da requisição
  @return jResponse, JSON, Resposta de retorno da requisição
  /*/
Method postSimulation(jBodyRequest As Json) class GfinCashFlowService
  Local jResponse := NIL As Json
  Local cAuxBody := "" As Character
  Local lRet := .T. As Logical
  Local lVerifyBranch := Len(Alltrim(xFilial('F7D'))) > 0 As Logical

  If lVerifyBranch .and. Empty(jBodyRequest['F7D']['f7d_filial'])
    lRet := .F.
  Endif
  
  If  lRet .and. (Empty(jBodyRequest['F7D']['f7d_titulo']) .OR.;
      Empty(jBodyRequest['F7D']['f7d_data']) .OR.;
      Empty(jBodyRequest['F7D']['f7d_hora']) .OR.;
      Empty(jBodyRequest['F7D']['f7d_user']))

      lRet := .F.
  EndIf

  If lRet
    cAuxBody := FwNoAccent(DecodeUtf8(jBodyRequest:toJson()))
    jBodyRequest:fromJson(cAuxBody)
    jResponse := IncludeSimulation(jBodyRequest)
  Else
    jResponse := answerFormat(.F., 500, STR0001, STR0002)  
  Endif

Return jResponse

/*/{Protheus.doc} putSimulation
  PUT - alteração de uma simulação no fluxo de caixa
  @author Vitor Duca
  @since 21/06/2022
  @version 1.0
  @param jBodyRequest, JSON, Body da requisição
  @param cInternalID, Character, PathParam para pesquisar o registro
  @return jResponse, JSON, Resposta de retorno da requisição
  /*/
Method putSimulation(jBodyRequest As Json, cInternalID As Character) class GfinCashFlowService
  Local jResponse := NIL As Json
  Local cAuxBody := "" As Character
  
  cAuxBody := FwNoAccent(DecodeUtf8(jBodyRequest:toJson()))
  jBodyRequest:fromJson(cAuxBody)
  jResponse := UpdateSimulation(jBodyRequest, cInternalID)

Return jResponse
