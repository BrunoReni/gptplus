

#include 'tlpp-core.th'

NAMESPACE gfin.api.orders
USING NAMESPACE gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.util

Static __lF76BLQLIB := F76->(FieldPos("F76_BLQLIB")) > 0

Class GfinOrdersService FROM FWAdapterBaseV2
  Public Method new()
  Public Method getOrders()
EndClass

Method new() Class GfinOrdersService
  _Super:new('GET')
  If MethIsMemberOf( self, "setUseSpaces", .T. )
    ::setUseSpaces(.T.)
  Endif
Return Self

//-------------------------------------------------------------------
/*/{Protheus.doc} getOrders
retorna os Pedidos de Venda e Compra

@Input
    tableNick As Character, SC6 ou SC7
    queryRequestParams As Json, parâmetros recebidos

@Return response As Json, retorno da lista de pedidos

@author Alison Kaique
@since mar|2021
/*/
//-------------------------------------------------------------------
Method getOrders(tableNick As Character, queryRequestParams As Json, headers As Json) Class GfinOrdersService
  Local response      as Json
  Local filter        as Array
  Local allFields     as Logical
  Local fields        as Array
  Local struct        as Array
  Local branches      as Array
  Local queryWhere    as Character
  Local cCustomSearch as Character
  Local lBlqLib       as Logical

  cCustomSearch := ''
  If FindFunction("gfin.util.profileToFilter")
    cCustomSearch := gfin.util.profileToFilter(__cUserId, 'NGF', 'CS' + tableNick, 'Filter')
  Endif

  filter    := {}
  fields    := {}
  struct    := {}
  branches  := {}
  allFields := .F.
  lBlqLib   := .F.

  // indica qual página devemos retornar
  If !(Empty(queryRequestParams['page']))
    ::setPage(Val(queryRequestParams['page']))
  EndIf

  // indica o tamanho da página
  If !(Empty(queryRequestParams['pagesize']))
    ::setPageSize(Val(queryRequestParams['pagesize']))
  EndIf

  // indica se considera pedidos bloqueados e não liberados
  If queryRequestParams:hasProperty('blqLib') .And. !(Empty(queryRequestParams['blqLib']))
    lBlqLib := Alltrim(queryRequestParams['blqLib']) == "true"
  EndIf
  // indica a ordem definida por querystring
  ::setOrderQuery(queryRequestParams['order'])

    // indica o filtro querystring recebido (pode se utilizar um filtro oData)
  If !(Empty(queryRequestParams['filter']))
    AAdd(filter, {"FILTER", queryRequestParams['filter']})
    ::SetUrlFilter(filter)
  EndIf
  // trata as filiais encaminhadas no header para o filtro
  If !(Empty(headers['branches']))
    branches := STRtokARR(headers['branches'], ',')
  EndIf

    // Regra para definir os campos para o retorno
    // Se encaminhar allfields lista todos os campos da tabela
  If !(Empty(queryRequestParams['allfields']))
    If ValType(queryRequestParams['allfields']) <> "L"
      If "true" $ queryRequestParams['allfields']
        allFields := .T.
      EndIf
    Else
      allFields := queryRequestParams['allfields']
    EndIf
  EndIf

  If !allFields
    If !(Empty(queryRequestParams['fields']))
      ::SetFields(UPPER(queryRequestParams['fields']))
      fields := apiOrdersFields(tableNick, STRtoArray(::OJSONOBJ:CFIELDS, ','))
    else
      fields := apiOrdersFields(tableNick, {})
    EndIf
    mapFieldsBaseV2(Self, @struct, fields)
  Else
    mapTableFieldsBaseV2(Self, @struct, tableNick, FWModeAccess(tableNick, 1) <> 'C')
    mapTableFieldsBaseV2(Self, @struct, 'F76', FWModeAccess('F76', 1) <> 'C')
    if tableNick == 'SC6'
      mapFieldsBaseV2(Self, @struct, {'C6_NUM'})
    endif
  EndIf

    // Informa a Query a ser utilizada pela API
  ::SetQuery(apiOrdersQuery(tableNick))

  // configura o filtro de query padrão
  queryWhere := " " + tableNick + ".D_E_L_E_T_ = ' ' "
  
  If !Empty(branches)
    If 'SC7' $ tableNick
        queryWhere += "AND SC7.C7_FILIAL IN (" + gfin.util.branchesFormatToIn(branches, tableNick) + ")"
    Else
        queryWhere += "AND SC6.C6_FILIAL IN (" + gfin.util.branchesFormatToIn(branches, tableNick) + ")"
    EndIf
  EndIf

  // Valida pedidos bloqueados
  If !lBlqLib .And. __lF76BLQLIB
    queryWhere += " AND F76.F76_BLQLIB = 1 "
  EndIf

  // filtros personalizados
  If !(Empty(cCustomSearch))
    queryWhere += " AND " + cCustomSearch
  EndIf

  ::SetWhere(queryWhere)

  // Informa a ordenação a ser Utilizada pela Query
  ::SetOrder(apiOrdersOrder(tableNick))

  //Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
  If ::Execute()
    // Gera o arquivo Json com o retorno da Query
    ::FillGetResponse()
  EndIf

  response := JsonObject():New()

  If ::lOk
    response["result"] := .T.
    response["response"] := JsonObject():New()
    response["response"]:FromJson(::getJSONResponse())
    response["response"]["struct"] := gfin.util.arrayToJson(struct)
  Else
    response := answerErrorFormat(::GetCode(), ::GetMessage(), ::GetMessage())
  EndIf
  //faz a desalocação de objetos e arrays utilizados
  ::DeActivate()
Return response
