
NAMESPACE totvs.protheus.backoffice.ngf.sx1params
using namespace gfin.util

/*/{Protheus.doc} getPergunte
  Retorna as informações de perguntes SX1.
  
  @type function
  @version 1.0
  @author renato.ito
  @since 12/08/2021
  @param param: grupo de perguntas
  @return json com as informações do pergunte
/*/
Function getPergunte(cPergunte as character)
  Local jPergunte       as json
  Local jResponse       as json
  Local nPergunte := 0  as numeric
  Local nCombo    := 0  as numeric
  Local aPergunte := {} as array
  Local oSX1Util        as object
  Local cDef := ''      as character

  jResponse := JsonObject():new()
  jResponse['grupo'] := cPergunte
  jResponse['pergunt']   := {}

  if !Empty(cPergunte)
    Pergunte(cPergunte, .F.)
    oSX1Util := FWSX1Util():New()
    oSX1Util:AddGroup(cPergunte)
    oSX1Util:SearchGroup()
    aPergunte := oSX1Util:GetGroup(cPergunte)

    for nPergunte := 1 to len(aPergunte[2])
      jPergunte             := JsonObject():new()
      jPergunte['pergunt']  := AllTrim(aPergunte[2][nPergunte]['CX1_PERGUNT'])
      jPergunte['tipo']     := aPergunte[2][nPergunte]['CX1_TIPO']
      jPergunte['ordem']    := aPergunte[2][nPergunte]['CX1_ORDEM']
      jPergunte['gsc']      := aPergunte[2][nPergunte]['CX1_GSC']            // (G) Edit,(S)Text,(C) Combo,(R) Range,File,Expression ou (K)=Check.
      jPergunte['value']    := &(aPergunte[2][nPergunte]['CX1_VAR01'])       // pegar o valor do MV em moméria
      jPergunte['var']      := Alltrim(aPergunte[2][nPergunte]['CX1_VAR01'])

      if aPergunte[2][nPergunte]['CX1_GSC'] == 'C'
        jPergunte['combo'] := {}
        for nCombo := 1 to 5 // CX1_DEF 01 até 5
          if !Empty(aPergunte[2][nPergunte]['CX1_DEF0' + CValToChar(nCombo)])
            cDef := AllTrim(aPergunte[2][nPergunte]['CX1_DEF0' + CValToChar(nCombo)])
            Aadd(jPergunte['combo'], {"value": nCombo , "label": cDef })
          endif
        next nCombo
      ElseIf aPergunte[2][nPergunte]['CX1_TIPO'] == "D"
        jPergunte['value'] :=  gfin.util.stringDatetoIso(Dtos(&(aPergunte[2][nPergunte]['CX1_VAR01'])))
      Endif
      Aadd(jResponse['pergunt'], jPergunte)
    next nPergunte
    FreeObj(oSX1Util)
  endif

Return jResponse

/*/{Protheus.doc} putPergunte
  Configura as informações do perguntes SX1.
  
  @type function
  @version 1.0
  @author renato.ito
  @since 12/08/2021
  @param param: grupo de perguntas
  @return json com as informações do pergunte
/*/
Function putPergunte(cPergunte as character, aVars as array)
  Local nVar     := 1  as numeric
  Local aPergAux := {} as array
  if !Empty(cPergunte)
    for nVar := 1 to len(aVars)
      SetMVValue(cPergunte, aVars[nVar]['var'], aVars[nVar]['value'])
    next nVar
    Pergunte(cPergunte, .F., /*cTitle*/, /*lOnlyView*/, /*oDlg*/, /*lUseProf*/, @aPergAux)
    //__SaveParam(cPergunte, aPergAux)
  endif
Return

/*/{Protheus.doc} getSX5Tables
  Retorna os dados da SX5 (Tabela Genéricas)

  @type function
  @version 1.0
  @author renato.ito
  @since 12/08/2021
  @param table As Character: Tabela SX5
  @return json com os dados da tabela SX5
  /*/
Function getSX5Tables(cTable as character)
  Local aContent := {} as array
  Local aItems := {} as array
  Local nItem := 0 as numeric
  Local json as json

  aContent := FWGetSX5(cTable)

  for nItem := 1 to len(aContent)
    Aadd(aItems, {"label": alltrim(aContent[nItem][3]), "description": alltrim(aContent[nItem][4])})
  next nItem

  json := JsonObject():new()
  json['table'] := cTable
  json['items'] := aItems
Return json

/*/{Protheus.doc} getSXBConsult
  Retorna os dados das tabelas para consulta (NGFLookup)

  @type function
  @version 1.0
  @author vinicius.prado
  @since 28/02/2023
  @return json com os dados da tabela para consulta
  /*/
Function getSXBConsult()
  Local jResponse as Json
  Local jTriggers as Json
  Local jItemsFormatted as Json
  Local nSizeTables := 0 as Numeric
  Local nCount := 0 as Numeric
  Local nCountTriggers := 0 as Numeric
  Local aItems := {} as Array
  Local lConfigLookup	:= ExistBlock("F716CTBL") as Logical

  jResponse := JsonObject():new()
  jItemsFormatted := JsonObject():new()
  jResponse['items'] := aItems

  If lConfigLookup
    aItems := ExecBlock("F716CTBL",.F.,.F.)
  Endif

  nSizeTables := Len(aItems)

  If ValType(aItems) == "A" .And. nSizeTables > 0
    For nCount := 1 to nSizeTables
      If Len(aItems[nCount]) > 5
        // Formata tabelas
        jItemsFormatted := {;
          'table': aItems[nCount][1],;
          'title': aItems[nCount][2],;
          'fieldValue': aItems[nCount][3],;
          'fieldDescription': aItems[nCount][4],;
          'fields': aItems[nCount][5],;
          'key': aItems[nCount][6];
        }
        //Formata triggers
        If Len(aItems[nCount]) > 6
          jTriggers := JsonObject():new()
          For nCountTriggers := 1 to Len(aItems[nCount][7])
            jTriggers[Lower(aItems[nCount][7][nCountTriggers][1])] := Lower(aItems[nCount][7][nCountTriggers][2])
          Next nCountTriggers
          jItemsFormatted['triggers'] := jTriggers
        EndIf
        Aadd(jResponse['items'], jItemsFormatted)
      EndIf
    Next nCount
  EndIf
Return jResponse
