#include 'tlpp-core.th'

NAMESPACE gfin.api.charts
USING NAMESPACE gfin.util

/*/{Protheus.doc} GfinChartsService
  Classe para obter informações de títulos vencidos
  @author cleyton.silva
  @since 23/08/2021
  @version 12.1.33
/*/
Class GfinChartsService FROM FWAdapterBaseV2
  Data aBranches        As Array
  Data cFieldsSa1       As Character
  Public Data cGroupBy  As Character
  Public Method new()
  Public Method getBillsCount()
  Public Method getBillsDate()
EndClass

/*/{Protheus.doc} new
  Contrutor da classe
  @author cleyton.silva
  @since 23/08/2021
  @version 12.1.33
/*/
Method new() Class GfinChartsService
  _Super:new('GET')
  If MethIsMemberOf( self, "setUseSpaces", .T. )
    ::setUseSpaces(.T.)
  Endif
  ::aBranches   := {}
  ::cFieldsSa1  := 'A1_COD,A1_LOJA,A1_NREDUZ,A1_FILIAL'
  ::cGroupBy    := ''
Return Self

/*/{Protheus.doc} getBillsCount
  quantidade ou valor dos títulos em atraso
  @author cleyton.silva
  @since 23/08/2021
  @version 12.1.33

  @param queryRequestParams As Json, query param
  @param cChart As Character, tipo de chart
  @param jHeaders As Json, headers da requisição
/*/
Method getBillsCount(queryRequestParams As Json, cChart As Character, jHeaders As Json) Class GfinChartsService
  Local jResponse           as Json
  Local aFilter       := {} as Array
  Local aFieldsA1     := {} as Array
  Local aFieldsDoc    := {} as Array
  Local aStruct       := {} as Array
  Local cFieldsDocAux := '' as Character

  // indica qual página devemos retornar
  If !(Empty(queryRequestParams['page']))
    ::setPage(Val(queryRequestParams['page']))
  EndIf

  // indica o tamanho da página
  If !(Empty(queryRequestParams['pagesize']))
      ::setPageSize(Val(queryRequestParams['pagesize']))
  Else
    ::setPageSize(5) // top 5 se não informar
  EndIf

  // trata as filiais encaminhadas no header para o filtro
  If !(Empty(jHeaders['branches']))
    ::aBranches := STRtokARR(jHeaders['branches'], ',')
  EndIf

  // prepara os campos para a api
  If !Empty(queryRequestParams['fieldssa1'])
    ::cFieldsSa1 := queryRequestParams['fieldssa1']
  EndIf

  aFieldsA1 := STRtokARR(UPPER(::cFieldsSa1), ',')

  apiMapFields(Self, cChart, aFieldsA1, @aStruct)

  // prepara os campos para a api - SE1 e F75
  If !(Empty(queryRequestParams['fieldsdoc']))
    cFieldsDocAux := UPPER(queryRequestParams['fieldsdoc'])
    // adiciona campos necessários para query se não existir
    If !'E1_FILIAL' $ cFieldsDocAux
      cFieldsDocAux += ',E1_FILIAL'
    EndIf
    If !'E1_VENCREA' $ cFieldsDocAux
      cFieldsDocAux += ',E1_VENCREA'
    EndIf
    If !'E1_CLIENTE' $ cFieldsDocAux
      cFieldsDocAux += ',E1_CLIENTE'
    EndIf
    If !'E1_LOJA' $ cFieldsDocAux
      cFieldsDocAux += ',E1_LOJA'
    EndIf
    If !'E1_MOEDA' $ cFieldsDocAux
      cFieldsDocAux += ',E1_MOEDA'
    EndIf
    aFieldsDoc := STRtokARR(UPPER(cFieldsDocAux), ',')
    apiMapFields(Self, cChart, aFieldsDoc, @aStruct)
  EndIf

  // indica o filtro querystring recebido (pode se utilizar um filtro oData)
  If !(Empty(queryRequestParams['filter']))
    AAdd(aFilter, {"FILTER", queryRequestParams['filter']})
    ::SetUrlFilter(aFilter)
  EndIf
  // Prepara as condições para a query

  //::SetWhere(cQueryWhere)

  If 'saldo' $ cChart
    // indica a ordem definida por querystring
    ::setOrder('SUM(SUMFIELD) DESC')
    // Informa a Query a ser utilizada pela API
    ::SetQuery(topCardQuery('F75.F75_SALDO', '', ::aBranches, aFieldsDoc))
  ElseIf 'quantidade' $ cChart
    // indica a ordem definida por querystring
    ::setOrder('SUM(COUNTFIELD) DESC')
    // Informa a Query a ser utilizada pela API
    ::SetQuery(topCardQuery('', 'SE1.E1_NUM', ::aBranches, aFieldsDoc))
  Else
    ::SetQuery(topCardQuery('', '', ::aBranches, aFieldsDoc))
    ::setOrder('DOCUMENTS.E1_FILIAL, DOCUMENTS.E1_VENCREA')
  EndIf

  //Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
  If ::Execute()
    // Gera o arquivo Json com o retorno da Query
    ::FillGetResponse()
  EndIf

  jResponse    := JsonObject():New()
  jResponse["result"] := .T.
  jResponse["response"] := JsonObject():New()
  jResponse["response"]:FromJson(::getJSONResponse())
  jResponse["response"]["struct"] := gfin.util.arrayToJson(aStruct)
Return jResponse

/*/{Protheus.doc} getBillsDate
  títulos mais vencidos
  @author cleyton.silva
  @since 23/08/2021
  @version 12.1.33

  @param queryRequestParams As Json, query param
  @param cChart As Character, tipo de chart
  @param jHeaders As Json, headers da requisição
/*/
Method getBillsDate(jRequestParams As Json, cChart As Character, jHeaders As Json) Class GfinChartsService
  Local jResponse     as Json
  Local cFields := '' as Character
  Local aFields := {} as Array
  Local aFilter := {} as Array
  Local aStruct := {} as Array

  // indica qual página devemos retornar
  If !(Empty(jRequestParams['page']))
    ::setPage(Val(jRequestParams['page']))
  EndIf

  // indica o tamanho da página
  If !(Empty(jRequestParams['pagesize']))
      ::setPageSize(Val(jRequestParams['pagesize']))
  Else
    ::setPageSize(5) // top 5 se não informar
  EndIf
  // trata as filiais encaminhadas no header para o filtro
  If !(Empty(jHeaders['branches']))
    ::aBranches := STRtokARR(jHeaders['branches'], ',')
  EndIf
  // prepara os campos para a api
  If !Empty(jRequestParams['fields'])
    cFields := UPPER(jRequestParams['fields'])
  EndIf
  If !('E1_VENCREA' $ cFields)
    If Empty(cFields)
      cFields := 'E1_VENCREA'
    Else
      cFields += ',E1_VENCREA'
    EndIf
  EndIf
  aFields := STRtokARR(cFields, ',')
  apiMapFields(Self, cChart, aFields, @aStruct)
  ::SetQuery(topDateCardQuery(::aBranches, ::cGroupBy))

  // indica o filtro querystring recebido (pode se utilizar um filtro oData)
  If !(Empty(jRequestParams['filter']))
    AAdd(aFilter, {"FILTER", jRequestParams['filter']})
    ::SetUrlFilter(aFilter)
  EndIf

  // indica a ordem definida por querystring
  ::setOrder('SE1.E1_VENCREA')

  //Executa a consulta, se retornar .T. tudo ocorreu conforme esperado
  If ::Execute()
    // Gera o arquivo Json com o retorno da Query
    ::FillGetResponse()
  EndIf

  jResponse    := JsonObject():New()
  jResponse["result"]   := .T.
  jResponse["response"] := JsonObject():New()
  jResponse["response"]:FromJson(::getJSONResponse())
  jResponse["response"]["struct"] := gfin.util.arrayToJson(aStruct)
Return jResponse
