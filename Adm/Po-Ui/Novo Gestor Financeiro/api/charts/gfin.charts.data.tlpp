#include 'tlpp-core.th'

NAMESPACE gfin.api.charts
USING NAMESPACE gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.util

Static __lF75FILORI := F75->(FieldPos("F75_FILORI")) > 0

/*/{Protheus.doc} function
  query padrão para o card mais vencidos
  @author  cleyton.silva
  @type  Function
  @since   10/07/2021
  @version 12.1.33
  @param aBranches As Array, lista de filiais
  @param cGroupBy As Character, group by para query
  @return Character, query para utilizar na api
/*/
Function topDateCardQuery(aBranches As Array, cGroupBy As Character) As Character
  Local cQuery := '' as Character
  Local cCustomSearchSE1 := "" As Character

  cQuery := "SELECT #QueryFields#"
  cQuery += " FROM " + RetSqlName("SE1") + " SE1"
  cQuery += " INNER JOIN " + RetSqlName("F75") + " F75 ON"
  If __lF75Filori
    cQuery += " F75.F75_FILORI = SE1.E1_FILIAL"
  Else
    cQuery += " F75.F75_FILIAL = SE1.E1_FILIAL"
  EndIf
  cQuery += " AND F75.F75_PREFIX = SE1.E1_PREFIXO"
  cQuery += " AND F75.F75_NUM = SE1.E1_NUM"
  cQuery += " AND F75.F75_PARCEL = SE1.E1_PARCELA"
  cQuery += " AND F75.F75_TIPO = SE1.E1_TIPO"
  cQuery += " AND F75.F75_RECPAG = 'R'"
  cQuery += " AND F75.D_E_L_E_T_ = ' '"
  cQuery += " WHERE"
  cQuery += " SE1.D_E_L_E_T_ = ' '"
  cQuery += " AND SE1.E1_TIPO NOT IN " + FormatIn( MVPROVIS + "|" + MV_CRNEG + "|" + MVRECANT, "|")
  cQuery += " AND SE1.E1_VENCREA < '" + DtoS(dDataBase) + "'"
  cQuery += " AND SE1.E1_SALDO > 0 "

  If !Empty(aBranches)
    cQuery += " AND SE1.E1_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, 'SE1') + ")"
  EndIf

  cCustomSearchSE1 := gfin.util.profileToFilter(__cUserId, 'NGF', 'CSSE1', 'Filter')
  If !Empty(cCustomSearchSE1)
    cQuery += ' AND ' + cCustomSearchSE1
  Endif

  cQuery += " #QueryWhere#"
  If !Empty(cGroupBy)
    cQuery += cGroupBy
  EndIf
Return cQuery

/*/{Protheus.doc} topCardQuery
  query para retornar os cliente que mais saldo em aberto
  @author renato.ito
  @type Function
  @since 23/08/2021
  @version 12.1.33
  @param cFieldSum As Character, campos que será utilizado no sum da query
  @param cFieldCount As Character, campos que será utilizado no count da query
  @param aBranches As Array, lista de filiais
  @param aFieldsDoc As Array, lista campos SE1 e F75
  @return Character, query para utilizar na api
/*/
Function topCardQuery(cFieldSum As Character, cFieldCount As Character, aBranches As Array, aFieldsDoc As Array) As Character
  Local cQuery     := '' as Character
  Local nSE1Filial := 0  as Numeric
  Local nSA1Filial := 0  as Numeric
  Local nMode      := 0  as Numeric
  Local cFieldsDoc := '' as Character
  Local cBDname    := '' as Character
  Local nFilSize   := 0  as Numeric
  Local cCustomSearchSE1 := "" As Character

  cBDname    := Upper(TCGetDB())
  nFilSize   := FWSizeFilial()
  For nMode := 1 to 3
    If FWModeAccess('SA1', nMode) == 'E'
      nSA1Filial += Len(FWSM0Layout(, nMode))
    EndIf
  Next

  For nMode := 1 to 3
    If FWModeAccess('SE1', nMode) == 'E'
      nSE1Filial += Len(FWSM0Layout(, nMode))
    EndIf
  Next

  //trata os campos da SE1 e F75
  If !Empty(aFieldsDoc)
    cFieldsDoc := prepareFields(aFieldsDoc)
  EndIf

  cQuery := "SELECT #QueryFields#"
  cQuery += " FROM "
  If Empty(cFieldCount) .And. Empty(cFieldSum)
    cQuery += " (SELECT " + cFieldsDoc
  Else
    cQuery += " (SELECT E1_FILIAL, E1_CLIENTE, E1_LOJA"
  EndIf

  If !Empty(cFieldSum)
    cQuery +=  " ,SUM(" + cFieldSum +") SUMFIELD"
  EndIf

  If !Empty(cFieldCount)
    cQuery +=  " ,COUNT(" + cFieldCount +") COUNTFIELD"
  EndIf

  cQuery += " ,E1_FILIAL AS FILCLI"

  cQuery += " FROM " + RetSqlName("SE1") + " SE1"
  cQuery += " INNER JOIN " + RetSqlName("F75") + " F75 ON"
  If __lF75Filori
    cQuery += " F75.F75_FILORI = SE1.E1_FILIAL"
  Else
    cQuery += " F75.F75_FILIAL = SE1.E1_FILIAL"
  EndIf
  cQuery += " AND F75.F75_PREFIX = SE1.E1_PREFIXO"
  cQuery += " AND F75.F75_NUM = SE1.E1_NUM"
  cQuery += " AND F75.F75_PARCEL = SE1.E1_PARCELA"
  cQuery += " AND F75.F75_TIPO = SE1.E1_TIPO"
  cQuery += " AND F75.F75_RECPAG = 'R'"
  cQuery += " AND F75.D_E_L_E_T_ = ' '"
  cQuery += " WHERE"
  cQuery += " SE1.D_E_L_E_T_ = ' '"
  cQuery += " AND SE1.E1_TIPO NOT IN " + FormatIn( MVPROVIS + "|" + MV_CRNEG + "|" + MVRECANT, "|")
  cQuery += " AND SE1.E1_VENCREA < '" + DtoS(dDataBase) + "'"
  cQuery += " AND SE1.E1_SALDO > 0 "

  If !Empty(aBranches)
    cQuery += " AND SE1.E1_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, 'SE1') + ")"
  EndIf

  cCustomSearchSE1 := gfin.util.profileToFilter(__cUserId, 'NGF', 'CSSE1', 'Filter')
  If !Empty(cCustomSearchSE1)
    cQuery += ' AND ' + cCustomSearchSE1
  Endif

  If !Empty(cFieldCount) .Or. !Empty(cFieldSum)
    cQuery += " GROUP BY SE1.E1_FILIAL,SE1.E1_CLIENTE,SE1.E1_LOJA
  EndIf

  cQuery += " ) DOCUMENTS"
  cQuery += " INNER JOIN " + RetSqlName("SA1") + " SA1 ON"
  cQuery += " DOCUMENTS.E1_CLIENTE = SA1.A1_COD"
  cQuery += " AND DOCUMENTS.E1_LOJA = SA1.A1_LOJA"
  cQuery += " AND SA1.D_E_L_E_T_ = ' ' "
  cQuery += " AND " + totvs.protheus.backoffice.ngf.util.BranchRelation( {"SE1","FILCLI","DOCUMENTS"}, {"SA1","A1_FILIAL","SA1"} ) 
  cQuery += " WHERE SA1.D_E_L_E_T_ = ' '"
  If !Empty(aBranches)
      cQuery += " AND SA1.A1_FILIAL IN (" + gfin.util.branchesFormatToIn(aBranches, 'SA1') + ")"
  EndIf
  cQuery += " #QueryWhere#"
  If !Empty(cFieldCount) .Or. !Empty(cFieldSum)
    cQuery += " GROUP BY SA1.A1_FILIAL,SA1.A1_COD,SA1.A1_LOJA,A1_NREDUZ"
  EndIf

Return cQuery

/*/{Protheus.doc} apiMapFields
  prepara os campos para a api
  @author renato.ito
  @type Function
  @since 23/08/2021
  @version 12.1.33
  @param oSelf As Object, SELF
  @param cChart As Character, tipo do chart
  @param aFields As Array, lista de campos
/*/
Function apiMapFields(oSelf As Object, cChart As Character, aFields As Array, aRespStr As Array)
  Local aStruct     := {}  as Array
  Local nItem       := 0   as Numeric
  Local cX3Title    := ''  as Character
  Local cX3Descri   := ''  as Character
  Local cX3Picture  := ''  as Character
  Local lX3Cbox     := .F. as Logical
  Local cValorPic   := ''  as Character
  Local aStrucValor := {}  as Array

  aStrucValor       := FWSX3Util():GetFieldStruct( 'E1_SALDO' )
  cValorPic         := AllTrim(X3Picture( 'E1_SALDO' ))

  For nItem := 1 To Len(aFields)
    aStruct    := FWSX3Util():GetFieldStruct(aFields[nItem])
    cX3Title   := AllTrim(FwX3Titulo(aFields[nItem]))
    cX3Descri  := AllTrim(FWSX3Util():GetDescription(aFields[nItem]))
    cX3Picture := IIF(aStruct[2] == 'N' , AllTrim(GetSX3Cache(aStruct[1], 'X3_PICTURE' )), '' )
    lX3Cbox    := IIF(Len(AllTrim(GetSX3Cache(aStruct[1], 'X3_CBOX' ))) > 0, .T., .F.)
    oSelf:AddMapFields(aFields[nItem], aFields[nItem], .T., .F., {aFields[nItem], aStruct[2], aStruct[3], aStruct[4]})
    aAdd(aRespStr, {;
      {'field'      , lower(AllTrim(aStruct[1]))},;
      {'type'       , aStruct[2]},;
      {'title'      , cX3Title},;
      {'description', cX3Descri},;
      {'picture'    , cX3Picture},;
      {'xBox'       , lX3Cbox};
    })
  Next
  If 'saldo' $ cChart
    oSelf:AddMapFields('BALANCE' , 'BALANCE' , .T., .F., {'BALANCE', 'N', aStrucValor[3], aStrucValor[4]}, 'SUM(SUMFIELD)')
    aAdd(aRespStr, {;
      {'field'      , 'balance'},;
      {'type'       , 'N'},;
      {'title'      , 'BALANCE'},;
      {'description', 'BALANCE'},;
      {'picture'    , cValorPic},;
      {'xBox'       , .F.};
    })
  ElseIf 'quantidade' $ cChart
    oSelf:AddMapFields('QUANTITY', 'QUANTITY', .T., .F., {'QUANTITY', 'N', 5, 0}, 'SUM(COUNTFIELD)')
    aAdd(aRespStr, {;
      {'field'      , 'quantity'},;
      {'type'       , 'N'},;
      {'title'      , 'QUANTITY'},;
      {'description', 'QUANTITY'},;
      {'picture'    , ''},;
      {'xBox'       , .F.};
    })
  ElseIf 'data' $ cChart
    oSelf:AddMapFields('BALANCE' , 'BALANCE' , .T., .F., {'BALANCE', 'N', aStrucValor[3], aStrucValor[4]}, 'SUM(F75.F75_SALDO)')
    aAdd(aRespStr, {;
      {'field'      , 'balance'},;
      {'type'       , 'N'},;
      {'title'      , 'BALANCE'},;
      {'description', 'BALANCE'},;
      {'picture'    , cValorPic},;
      {'xBox'       , .F.};
    })
    oSelf:AddMapFields('QUANTITY', 'QUANTITY', .T., .F., {'QUANTITY', 'N', 5, 0}, 'COUNT(SE1.E1_NUM)')
    aAdd(aRespStr, {;
      {'field'      , 'quantity'},;
      {'type'       , 'N'},;
      {'title'      , 'QUANTITY'},;
      {'description', 'QUANTITY'},;
      {'picture'    , ''},;
      {'xBox'       , .F.};
    })
  EndIf
Return

/*/{Protheus.doc} prepareFields
  verifica se os campos enviados existem na SX3
  @author renato.ito
  @type Function
  @since 23/08/2021
  @version 12.1.33
  @param aFields As Array, campos da SX3
  @return cFields As Character, campos separados com ',' para adicionar na query
/*/
Function prepareFields(aFields As Array) As Character
  Local nField  := 0  as Numeric
  Local cFields := '' as Character
  Local cField  := '' as Character

  For nField := 1 To Len(aFields)
    cField := FWSX3Util():GetFieldStruct(aFields[nField])[1]
    If !Empty(cField) .And. !(cField $ cFields)
      cFields += ',' + cField
    EndIf
  Next
  cFields := Substr(cFields, 2)
Return cFields
