#INCLUDE 'tlpp-core.th'
#INCLUDE 'tlpp-rest.th'
#INCLUDE 'gfin.bills.ch'

NAMESPACE gfin.job.bills
USING NAMESPACE gfin.util
USING NAMESPACE totvs.protheus.backoffice.ngf.bills
USING NAMESPACE totvs.protheus.backoffice.ngf.bills.functions

/*/{Protheus.doc} Bills
  Classe para transmissão de boletos
  @type class
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
/*/
Class Bills
  Public  Data cEnvironment     As Character // Ambiente para Transmissão
  Public  Data oCredentials     As Json      // Credenciais de Acesso
  Public  Data cFebraban        As Character // Código do Banco, Febraban
  Public  Data oBody            As Json      // Dados para Transmissão
  Public  Data oErrors          As Json      // Erros
  Public  Data oToken           As Json      // Token de acesso
  Private Data nTokenTries      As Numeric   // Tentativas de geração de token
  Private Data cResult          As Character // Resultado
  Private Data cBodyXML         As Character // XXL de envio
  Private Data cCodBar          As Character // Código de barras
  Private Data cCodDig          As Character // Código Digitavel do Código de Barras
  Private Data cUrlImpBol       As Character // URL (Link) para impressão de boleto

  Public  Method bank001()      As Logical   // Banco do Brasil
  Public  Method bank341()      As Logical   // Banco itaú
  Public  Method bank341V1()    As Logical   // Banco itaú Versão 1
  Public  Method bank341V2()    As Logical   // Banco itaú Versão 2
  Public  Method bank237()      As Logical   // Banco Bradesco
  Public  Method bank104()      As Logical    // Caixa Econômica Federal
  Public  Method bank033()      As Logical   // Banco Santander
  Public  Method destroy()                   // Limpar dados
  Private Method destroyToken()              // Limpar token
  Public  Method layout104()                 // Prepara aqrquivo Banco Caixa Economica Federal
  Public  Method layout033()                 // Prepara aqrquivo Banco Santander

  Public  Method layout237()                 // Prapara arquivo json do bradesco
  Public  Method layout341()                 // Prapara arquivo json do bradesco
  Public  Method getCodeError() As Numeric   // Código do erro
  Public  Method getError()     As Character // Mensagem do erro
  Public  Method getResult()    As Character // Retorna o resultado da transmissão
  Public  Method getCodBar()    As Character // Retorna o código de barras
  Public  Method getCodDig()    As Character // Retorna o código de barras
  Public  Method getURLBol()    As Character // Retorna o código de barras
  Public  Method getXMLBody()   As Character // Retorna o XML de envio ao Banco
  Public  Method new()                       // Novo
  Public  Method send()         As Logical   // Transmitir
  Public  Method test()         As Logical   // Testar
  Public  Method setBody()                   // Definir corpo da transmissão
  Public  Method setCredentials()            // Definir Credenciais
  Public  Method setFebraban()               // Definir Febraban
  Public  Method setVersion()                // Define a versão do Json
  Public  Method token001()                  // Gera token Banco do Brasil
  Public Method token341()                  // Gera token Banco itaú
  Private Method token341V1()                // Gera token Banco itaú v1
  Private Method token341V2()                // Gera token Banco itaú v2

EndClass

/*/{Protheus.doc} Bills::new
  Método para criação da instância da classe
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @param cFebraban, character, código febraban do banco
  @param cEnvironment, character, ambiente de transmissão (1 - Produção, 2 - Homologação)
/*/
Method new(cFebraban as Character) Class Bills
  Default cFebraban := ''
  ::cResult         := ''
  ::cEnvironment    := '1'
  ::cFebraban       := cFebraban
  ::cBodyXML        := ""
  ::oErrors         := Nil
  ::oToken          := Nil
  ::nTokenTries     := 0
Return Self

/*/{Protheus.doc} Bills::getCodeError
  Método para obter o código do erro ocorrido na transmissão ou na geração do token
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @return numeric, código do erro
/*/
Method getCodeError() Class Bills As Numeric
Return Iif(ValType(::oErrors) == 'J' .or. ValType(::oErrors) == 'O', ::oErrors['error'], Nil)

/*/{Protheus.doc} Bills::getError
  Método para obter a mensagem de erro
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @return character, messagem de erro
/*/
Method getError() Class Bills As Character
Return Iif(ValType(::oErrors) == 'J' .or. ValType(::oErrors) == 'O', ::oErrors['message'], Nil)

/*/{Protheus.doc} Bills::getResult
  Método para obter o resultado
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @return character, resultado da transmissão
/*/
Method getResult() Class Bills As Character
Return ::cResult

/*/{Protheus.doc} Bills::getCodBar
  Método para obter o código de barras
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @return character, resultado da transmissão
/*/
Method getCodBar() Class Bills As Character
Return ::cCodBar

/*/{Protheus.doc} Bills::getCodDig
Método para obter o código de Digitavel
@type method
@version 12.1.33
@author francisco.oliveira
@since 24/11/2021
@return character, resultado da transmissão
/*/

Method getCodDig() Class Bills As Character
Return ::cCodDig

/*/{Protheus.doc} Bills::getURLBol
Método para obter a URL da impressa do boleto
@type method
@version 12.1.33
@author francisco.oliveira
@since 24/11/2021
@return character, resultado da transmissão
/*/

Method getURLBol() Class Bills As Character
Return ::cUrlImpBol

/*/{Protheus.doc} Bills::getXMLBody
Método para obter o XML de envio ao Banco
@type method
@version 12.1.33
@author francisco.oliveira
@since 06/12/2021
@return character, resultado da transmissão
/*/

Method getXMLBody() Class Bills As Character
Return ::cBodyXML

/*/{Protheus.doc} Bills::destroy
  Método para limpar os dados
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
/*/
Method destroy() Class Bills
  FreeObj(::oCredentials)
  ::oCredentials := Nil
  FreeObj(::oBody)
  ::oBody        := Nil
  FreeObj(::oErrors)
  ::oErrors      := Nil
  ::destroyToken()
Return

/*/{Protheus.doc} Bills::destroyToken
  Método para limpar o token
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
/*/
Method destroyToken() Class Bills
  If ValType(::oToken) <> "U"
    FreeObj(::oToken)
  EndIf
Return

/*/{Protheus.doc} Bills::setCredentials
  Método para definir as credenciais de acesso para a transmissão
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @param cCredentials, Character, credenciais de acesso (json em texto)
/*/
Method setCredentials(cCredentials as Character) Class Bills
  If ValType(::oCredentials) <> 'U'
    FreeObj(::oCredentials)
  EndIf
  ::oCredentials :=  JsonObject():new()
  ::oCredentials:FromJson(cCredentials)
  ::cEnvironment := ::oCredentials['environment']
  ::destroyToken()
Return

/*/{Protheus.doc} Bills::setBody
  Método para definir os dados para a transmissão
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @param oBody, Json, objeto com os dados da transmissão
/*/
Method setBody(oBody as Json) Class Bills
  ::oBody := oBody
Return

/*/{Protheus.doc} Bills::setFebraban
  Método para definir o febraban, escolhendo o banco para a transmissão
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @param cFebraban, character, código do banco
/*/
Method setFebraban(cFebraban as Character) Class Bills
  ::cFebraban := cFebraban
Return

/*/{Protheus.doc} Bills::test
  Método para testar token com credenciais
  @type method
  @version  12.1.33
  @author daniel.muniz
  @since 10/06/2021
  @return logical, teste realizado com sucesso (.T. - Sim, .F. - Não)
/*/
Method test() Class Bills As Logical
  Local lResponse as Logical

  FreeObj(::oErrors)
  FreeObj(::oToken)
  ::oToken := Nil
  ::oErrors := Nil
  ::cResult := ''
  If ::cFebraban == '001' .or. ::cFebraban == '341'
    If ::cFebraban == '001'
      ::token001()
    ElseIf ::cFebraban == '341'
      ::token341()
    EndIf
    if (ValType(::oToken) <> 'J' .and. ValType(::oToken) <> 'O')
      lResponse := .F.
    Else
      ::cResult := ::oToken:ToJSON()
      lResponse := ::oErrors == Nil
    EndIf
  Else
    ::oErrors := JsonObject():new()
    ::oErrors['error'] := 400
    ::oErrors['message'] := STR0002 // "O Banco informado não está disponível para o uso."
    lResponse := .F.
  EndIf
Return lResponse

/*/{Protheus.doc} Bills::send
  Método para transmissão de boletos
  @type method
  @version  12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method send() Class Bills As Logical
  Local lResponse as Logical
  If ValType(::oErrors) <> "U"
    FreeObj(::oErrors)
  Endif
  ::nTokenTries	:= 0
  ::cResult     := ''
  ::cCodBar     := ''
  ::cCodDig		  := ''
  ::cUrlImpBol	:= ''
  If ::cFebraban == '001'
    lResponse := ::bank001()
  ElseIf ::cFebraban == '341'
    lResponse := ::bank341()
  ElseIf ::cFebraban == '237'
    lResponse := ::bank237()
  ElseIf ::cFebraban == '104'
    lResponse := ::bank104()
  ElseIf ::cFebraban == '033'
    lResponse := ::bank033()
  Else
    ::oErrors := JsonObject():new()
    ::oErrors['error'] := 400
    ::oErrors['message'] := STR0002 // "O Banco informado não está disponível para o uso."
    lResponse := .F.
  EndIf
Return lResponse

/*/{Protheus.doc} Bills::bank001
  Método para transmissão de boletos para o Banco do Brasil
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
  @return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method bank001() Class Bills As Logical
  Local aHeaders    As Array
  Local cAppKey     As Character
  Local cError      As Character
  Local cPath       As Character
  Local cUrl        As Character
  Local lResponse   As Logical
  Local oRestBank   As Object
  Local oRestErrors As Json
  Local oResult     As Json

  lResponse   := .F.
  cPath       := '/cobrancas/v2/boletos'
  cUrl        := Iif(::cEnvironment == '1', 'https://api.bb.com.br', 'https://api.hm.bb.com.br')
  oRestErrors := JsonObject():new()
  oResult     := JsonObject():new()

  If (ValType(::oCredentials) == 'J' .or. ValType(::oCredentials) == 'O')
    cAppKey := ::oCredentials:GetJsonText('appKey')

    if (ValType(::oToken) <> 'J' .and. ValType(::oToken) <> 'O')
      ::token001()
    EndIf

    If ::oErrors == Nil
      If !Empty(cAppKey)
        cPath += '?' + 'gw-dev-app-key' + '=' + cAppKey
      EndIf

      If (ValType(::oToken) == 'J' .or. ValType(::oToken) == 'O') .and. (ValType(::oBody) == 'J' .or. ValType(::oBody) == 'O') .and. !Empty(::oBody:toJson())

        aHeaders := {}
        aadd(aHeaders, 'Content-Type: application/json')
        aadd(aHeaders, 'Charset: UTF-8')
        aadd(aHeaders, 'Authorization: Bearer ' + ::oToken['access_token'])

        oRestBank := FwRest():New(cUrl)
        oRestBank:SetPostParams(EncodeUTF8(::oBody:ToJSON()))
        oRestBank:SetPath(cPath)

        If oRestBank:Post(aHeaders)
          ::cResult := oRestBank:GetResult()
          oResult:FromJSON(oRestBank:GetResult())
          ::cCodBar := oResult['codigoBarraNumerico']
          lResponse := .T.
        Else
          oRestErrors:FromJSON(oRestBank:GetResult())
          If oRestBank:GetHTTPCode() == "401" .and. ::nTokenTries < 5
            ::nTokenTries++
            ::destroyToken()
            lResponse := ::bank001()
          Else  
            ::cResult := oRestBank:GetResult()
            If ValType(oRestErrors['erros']) == 'A' .and. len(oRestErrors['erros']) > 0
              cError := Iif(ValType(oRestErrors['erros'][1]['mensagem']) == 'C', oRestErrors['erros'][1]['mensagem'], STR0002)
            EndIf
            If Empty(cError) .and. ValType(oRestErrors['mensagem']) == 'C' .and. len(oRestErrors['mensagem']) > 0
              cError := oRestErrors['mensagem']
            EndIf
            If Empty(cError) .and. ValType(oRestErrors['message']) == 'C' .and. len(oRestErrors['message']) > 0
              cError := oRestErrors['message']
            EndIf
            If Empty(cError) .or. ValType(cError) <> 'C'
              cError := STR0002  // "Ocorreu um erro inesperado!"
            EndIf
            ::oErrors := JsonObject():new()
            ::oErrors:FromJSON('{ "error": ' + oRestBank:GetHTTPCode() + ', "message": "' + DecodeUTF8(cError) + '" }')
            lResponse := .F.
          EndIf
        EndIf

      Else
        ::oErrors := JsonObject():new()
        ::oErrors['error']   := 400
        ::oErrors['message'] := STR0003  // "Dados com valor(es)  e/ou formato(s) inválido(s)."
        lResponse := .F.
      EndIf

    Else
      lResponse := .F.
    EndIf

  Else
      ::oErrors := JsonObject():new()
      ::oErrors['error']   := 400
      ::oErrors['message'] := STR0004  // "Credenciais não foram informadas."
      lResponse := .F.
  EndIf

  FreeObj(oResult)

Return lResponse

/*/{Protheus.doc} Bills::bank341
  Método para transmissão de boletos para o Banco Itaú
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 07/05/2021
  @return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method bank341() Class Bills As Logical
  Local lResponse := .F. As Logical

  If ::oCredentials['version'] == "v2"
    lResponse := ::bank341V2()
  Else
    lResponse := ::bank341V1()
  EndIf

Return lResponse

/*/{Protheus.doc} Bills::bank341V1
  Método para transmissão de boletos para o Banco Itaú V1
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 07/05/2021
  @return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method bank341V1() Class Bills As Logical
  Local aHeaders    As Array
  Local cError      As Character
  Local cPath       As Character
  Local cUrl        As Character
  Local lResponse   As Logical
  Local oRestBank   As Object
  Local oRestErrors As Json
  Local oResult     As Json
  lResponse   := .F.
  cPath       := '/router-gateway-app/public/codigo_barras/registro'
  cUrl        := 'https://gerador-boletos.itau.com.br'
  oRestErrors := JsonObject():new()
  oResult     := JsonObject():new()
  If (ValType(::oCredentials) == 'J' .or. ValType(::oCredentials) == 'O')
    if (ValType(::oToken) <> 'J' .and. ValType(::oToken) <> 'O')
      ::token341()
    EndIf
    If ::oErrors == Nil
      If (ValType(::oToken) == 'J' .or. ValType(::oToken) == 'O') .and. (ValType(::oBody) == 'J' .or. ValType(::oBody) == 'O') .and. !Empty(::oBody:toJson())
        aHeaders := {}
        aadd(aHeaders, 'Content-Type: application/json')
        aadd(aHeaders, 'Charset: UTF-8')
        aadd(aHeaders, 'Accept: application/vnd.itau')
        aadd(aHeaders, 'access_token: ' + ::oToken['access_token'])
        aadd(aHeaders, 'itau-chave: ' + ::oCredentials:GetJsonText('appKey'))
        oRestBank := FwRest():New(cUrl)
        oRestBank:SetPostParams(EncodeUTF8(::oBody:ToJSON()))
        oRestBank:SetPath(cPath)
        If oRestBank:Post(aHeaders)
          ::cResult := oRestBank:GetResult()
          oResult:FromJSON(oRestBank:GetResult())
          ::cCodBar := oResult['codigo_barras']
          lResponse := .T.
        Else
          oRestErrors:FromJSON(oRestBank:GetResult())
          If oRestBank:GetHTTPCode() == "401" .and. ::nTokenTries < 5
            ::nTokenTries++
            ::destroyToken()
            lResponse := ::bank341()
          Else
            If ValType(oRestErrors['campos']) == 'A' .and. len(oRestErrors['campos']) > 0
              cError := Iif(ValType(oRestErrors['campos'][1]['mensagem']) == 'C', oRestErrors['campos'][1]['mensagem'], STR0002)
            EndIf
            If Empty(cError) .and. ValType(oRestErrors['mensagem']) == 'C' .and. len(oRestErrors['mensagem']) > 0
              cError := oRestErrors['mensagem']
            EndIf
            If Empty(cError) .or. ValType(cError) <> 'C'
              cError := STR0002  // "Ocorreu um erro inesperado!"
            EndIf
            ::oErrors := JsonObject():new()
            ::oErrors:FromJSON('{ "error": ' + oRestBank:GetHTTPCode() + ', "message": "' + DecodeUTF8(cError) + '" }')
            lResponse := .F.
          EndIf
          ::cResult := oRestBank:GetResult()
        EndIf
      Else
        ::oErrors := JsonObject():new()
        ::oErrors['error']   := 400
        ::oErrors['message'] := STR0003  // "Dados com valor(es)  e/ou formato(s) inválido(s)."
        lResponse := .F.
      EndIf
    Else
      lResponse := .F.
    EndIf
  Else
      ::oErrors := JsonObject():new()
      ::oErrors['error']   := 400
      ::oErrors['message'] := STR0004  // "Credenciais não foram informadas."
      lResponse := .F.
  EndIf
  FreeObj(oResult)

Return lResponse

/*/{Protheus.doc} Bills::bank237
  Método para transmissão de boletos para o Banco Bradesco
  @type method
  @version 12.1.33
  @author renato.ito
  @since 02/09/2021
  @return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method bank237() Class Bills As Logical
  Local lResponse := .F. as Logical
  Local cUrl      := ''  as Character
  Local cData     := ''  as Character
  Local cCert     := ''  as Character
  Local cCertKey  := ''  as Character
  Local cError    := ''  as Character
  Local oResult          as Json
  Local oRestBank        as Object
  // pega o endereço da API do bradesco
  cUrl    := totvs.protheus.backoffice.ngf.bills.apiURL237(::cEnvironment)
  oResult := JsonObject():New()
  // se não existir erros
  If ::oErrors == Nil
    If (ValType(::oBody) $ 'J|O') .and. !Empty(::oBody:toJson())
      // Assinatura da mensagem
      If (ValType(::oCredentials) $ 'J|O')
        cCert     := ::oCredentials['certificate']:GetJsonText('cert')
        cCertKey  := ::oCredentials['certificate']:GetJsonText('key')
        cError    := STR0005
        cData     := totvs.protheus.backoffice.ngf.bills.sign237(EncodeUTF8(::oBody:ToJSON()), cCert, cCertKey, '', @cError)
      EndIf
      If !Empty(cData)
        oXML      := tXMLManager():New()
        oRestBank := FwRest():New(cUrl)
        oRestBank:SetPostParams(cData)
        oRestBank:SetPath("")
        If oRestBank:Post({})
          oXML:Parse(oRestBank:GetResult())
          ::cResult := oXML:cText
          oResult:FromJSON(oXML:cText)
          If '0' <> oResult['cdErro']
            ::oErrors := JsonObject():new()
            ::oErrors:FromJSON('{ "error": ' + oResult['cdErro'] + ', "message": "' + DecodeUTF8(oResult['msgErro']) + '" }')
          Else
            ::cCodBar := oResult['cdBarras']
            //nuTituloGerado
            lResponse := .T.
          EndIf
        Else
          If oXML:Parse(oRestBank:GetResult())
            oResult:FromJson(oXML:cText)
            oRestBank:GetLastError()
            ::oErrors := JsonObject():new()
            ::oErrors:FromJSON('{ "error": ' + oResult['cdErro'] + ', "message": "' + DecodeUTF8(oResult['msgErro']) + '" }')
          Else
            ::oErrors := JsonObject():new()
            ::oErrors:FromJSON('{ "error": 500, "message": "' + STR0003 + '" }')
          EndIf
        EndIf
        FreeObj(oXML)
        FreeObj(oRestBank)
      Else
        ::oErrors := JsonObject():new()
        ::oErrors:FromJSON('{ "error": 500, "message": "' + cError + '" }') // "Problema ao assinar a mensagem com o certificado. Verifique se o ceriticado utilizado é válido."
      EndIf
    EndIf
  EndIf
  FreeObj(oResult)
Return lResponse

/*/{Protheus.doc} Bills::token001
  Método de geração de token de acesso para o Banco do Brasil
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 09/04/2021
/*/
Method token001() class Bills
  Local aHeaders   as Array
  Local cAppKey    as Character
  Local cBasic     as Character
  Local cPath      as Character
  Local cUrlBase   as Character
  Local cTokenBody as Character
  local oRestToken as Object
  cPath      := '/oauth/token'
  cUrlBase   := Iif(::cEnvironment == '1', 'https://oauth.bb.com.br', 'https://oauth.hm.bb.com.br') // Url base dos Tokens
  cTokenBody := 'grant_type=client_credentials&scope=cobrancas.boletos-info cobrancas.boletos-requisicao'
  If (ValType(::oCredentials) == 'J' .or. ValType(::oCredentials) == 'O')
    cAppKey   := ::oCredentials:GetJsonText('appKey')
    cBasic    := ::oCredentials:GetJsonText('basic')
    aHeaders  := {}
    aadd(aHeaders, 'Content-Type: application/x-www-form-urlencoded')
    aadd(aHeaders, 'Authorization: Basic ' + cBasic)
    If !Empty(cAppKey)
      cPath += '?' + 'gw-dev-app-key' + '=' + cAppKey
    EndIf
    oRestToken := FwRest():New(cUrlBase)
    oRestToken:SetPostParams(cTokenBody)
    oRestToken:SetPath(cPath)
    If oRestToken:Post(aHeaders)
      ::oToken := JsonObject():new()
      ::oToken:fromJson(oRestToken:GetResult())
    Else
      ::oErrors := JsonObject():new()
      ::oErrors:FromJSON('{ "error": ' + oRestToken:GetHTTPCode() + ', "message": "'+ oRestToken:GetLastError() + '" }')
    EndIf
  EndIf
Return

/*/{Protheus.doc} Bills::token341
  Método de geração de token de acesso para o Banco Itaú
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 17/05/2021
/*/
Method token341() class Bills
  If ::oCredentials['version'] == "v2"
    ::token341V2()
  Else
    ::token341V1()
  EndIf
Return

/*/{Protheus.doc} Bills::token341V1
  Método de geração de token de acesso para o Banco Itaú V1
  @type method
  @version 12.1.33
  @author daniel.muniz
  @since 17/05/2021
/*/
Method token341V1() class Bills
  Local aHeaders      as Array
  Local cPath         as Character
  Local cUrlBase      as Character
  Local cTokenBody    as Character
  local oRestToken    as Object
  Local oTokenBody    as Object
  cPath      := ''
  cUrlBase   := 'https://oauth.itau.com.br/identity/connect/token'
  oTokenBody := JsonObject():new()
  cTokenBody := 'grant_type=client_credentials&scope=readonly'
  If (ValType(::oCredentials) == 'J' .or. ValType(::oCredentials) == 'O')
    aHeaders      := {}
    aadd(aHeaders, 'Content-Type: application/x-www-form-urlencoded')
    cTokenBody += '&client_id=' + ::oCredentials:GetJsonText('clientId') + '&client_secret=' + ::oCredentials:GetJsonText('clientSecret')
    oRestToken := FwRest():New(cUrlBase)
    oRestToken:SetPostParams(cTokenBody)
    oRestToken:SetPath(cPath)
    If oRestToken:Post(aHeaders)
      ::oToken := JsonObject():new()
      ::oToken:fromJson(oRestToken:GetResult())
    Else
      ::oErrors := JsonObject():new()
      ::oErrors:FromJSON('{ "error": ' + oRestToken:GetHTTPCode() + ', "message": "'+ oRestToken:GetLastError() + '" }')
    EndIf
  EndIf

Return

/*/{Protheus.doc} Bills::token341V2
  Método de geração de token de acesso para o Banco Itaú V2
  @type method
  @version 12.1.33
  @author francisco.oliveira
  @since 17/05/2021
/*/
Method token341V2() class Bills

	Local cUrl		    := '' As Character
	Local cAc_Token	  := '' As Character
	Local cHeadRet	  := '' As Character
	Local cToken	    := '' As Character
	Local nTimeOut    := 30 As Numeric
	Local aHeaders    := {} As Array
	Local cCert   	  := '' As Character
	Local cKey		    := '' As Character
	Local cClientID	  := '' As Character
	Local cClientSec	:= '' As Character
	Local cError     	:= '' As Character
	Local nError     	:= 500 As Numeric
	Local oTokResp    As Object

  If (ValType(::oCredentials) == 'J' .or. ValType(::oCredentials) == 'O')

    cCert	:= NGFConvLin(::oCredentials['certificate']['cert'])
    cKey	:= NGFConvLin(::oCredentials['certificate']['key'])

    cClientID  := ::oCredentials['clientId']
    cClientSec := ::oCredentials['clientSecret']

    oTokResp := JsonObject():new()

    cUrl    := 'https://sts.itau.com.br/api/oauth/token'

    cAc_Token := 'grant_type=client_credentials'
    cAc_Token += '&client_id=' + cClientID // foi gerado pela passo 2 do manual
    cAc_Token += '&client_secret=' + cClientSec // Arquivo de senha

    aadd(aHeaders, 'Content-Type: application/x-www-form-urlencoded')

    cToken := HTTPSPost( cUrl, cCert, cKey, cClientSec, "", cAc_Token, nTimeOut, aHeaders, @cHeadRet )
    nError := HttpGetStatus( @cError ) // Obtém o código do erro do HTTP

    If !Empty(cToken)
      oTokResp:FromJSON(DecodeUTF8(cToken))
      If oTokResp:hasProperty('active') .And. oTokResp['active']
          ::oToken := JsonObject():new()
          ::oToken['token'] := oTokResp['access_token']
      Else
        ::oErrors := JsonObject():new()
        ::oErrors['error'] := nError // Código do Erro
        ::oErrors['message'] := oTokResp['message'] // Descrição do Erro
      Endif
    Else
      ::oErrors := JsonObject():new()
      ::oErrors:FromJSON('{ "error": 401, "message": "' + STR0005 + '" }') // "Problema ao assinar a mensagem com o certificado. Verifique se o cerfiticado utilizado é válido."
    EndIf
  EndIf

Return

/*/{Protheus.doc} layout237
  Método para preparar o layout do Bradesco
  @type method
  @version 12.1.33
  @author renato.ito
  @since 12/08/2021
/*/
Method layout237(jLayout As Json) class Bills
	totvs.protheus.backoffice.ngf.bills.prepare237(@jLayout)
Return

/*/{Protheus.doc} layout104
Método para preparar o layout do Caixa Economica Federal
@type method
@version 12.1.33
@author francisco.oliveira
@since 24/11/2021
/*/
Method layout104(jLayout As Json) class Bills
	totvs.protheus.backoffice.ngf.cef.prepare104(@jLayout)
Return

/*/{Protheus.doc} layout033
Método para preparar o layout do Caixa Economica Federal
@type method
@version 12.1.33
@author francisco.oliveira
@since 24/11/2021
/*/
Method layout033(jLayout As Json) class Bills
	totvs.protheus.backoffice.ngf.santander.prepare033(@jLayout)
Return

/*/{Protheus.doc} layout341
Método para preparar o layout do banco Itau
@type method
@version 12.1.33
@author francisco.oliveira
@since 04/04/2022
/*/
Method layout341(jLayout As Json) class Bills
  totvs.protheus.backoffice.ngf.itau.prepare341(@jLayout, ::oCredentials)
Return

/*/{Protheus.doc} Bills::bank104
	Método para transmissão de boletos para o Banco Itaú
	@type method
	@version 12.1.33
	@author daniel.muniz
	@since 07/05/2021
	@return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method bank104() Class Bills As Logical

	Local oWsdl       		    As Object	
	Local lRet			  := .F.	As Logical
	Local cWsdlURL		:= ''	  As Character
	Local cBaseXML		:= ''	  As Character
	Local cCodbarra 	:= ''	  As Character
	Local cLnhDigit 	:= ''	  As Character
	Local cURLCaixa		:= ''	  As Character
	Local cCodRetorn	:= ''	  As Character
	Local cErroXml		:= ''	  As Character
	Local cWarnXml		:= ''	  As Character
	Local cSoap			  := ''	  As Character

  Private oXmlParser      := Nil  As Object

	cBaseXML	:= "oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MANUTENCAOCOBRANCABANCARIA_SERVICO_SAIDA:_DADOS:

	cCodbarra   := cBaseXML + "_INCLUI_BOLETO:_CODIGO_BARRAS:TEXT"
	cLnhDigit 	:= cBaseXML + "_INCLUI_BOLETO:_LINHA_DIGITAVEL:TEXT"
	cURLCaixa	  := cBaseXML + "_INCLUI_BOLETO:_URL:TEXT"
	cCodRetorn	:= cBaseXML + "_CONTROLE_NEGOCIAL:_COD_RETORNO:TEXT"

	cWsdlURL	:= 'https://barramento.caixa.gov.br/sibar/ManutencaoCobrancaBancaria/Boleto/Externo?wsdl'

	oWsdl := TWsdlManager():New()
	oWsdl:lSSLInsecure := .T.

	lRet := oWsdl:ParseURL( cWsdlURL )

	If lRet
		lRet := oWsdl:SetOperation( "INCLUI_BOLETO" )
		If lRet
			oWsdl:SendSoapMsg(::oBody['XmlCEF'])

			cSoap := oWsdl:GetSoapResponse()
			::cResult  := cSoap
      ::cBodyXML := ::oBody['XmlCEF']

			oXmlParser := XMLPARSER(cSoap, "_", @cErroXml, @cWarnXml)

      lRet := oXmlParser <> Nil .AND. Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MANUTENCAOCOBRANCABANCARIA_SERVICO_SAIDA:_DADOS:_CONTROLE_NEGOCIAL:_COD_RETORNO:TEXT") <> "U"

			If lRet .AND. &(cCodRetorn) == "0"
				If oXmlParser <> Nil .And. Empty(cErroXml) .And. Empty(cWarnXml)
					If Type(&(cCodbarra)) <> "U" .And. Type(&(cLnhDigit)) <> "U"
						::cCodBar 	 := &(cCodbarra) // codigo_barras
						::cCodDig 	 := &(cLnhDigit) // linha_digitavel
						::cUrlImpBol := &(cURLCaixa) // url_boleto
					Else
						lRet:=.F.
						::oErrors := JsonObject():new()
						::oErrors:FromJSON('{ "error": ' + "TypeXML" + ', "message": "' + cErroXml + '" }')
					Endif
				Else
					lRet:=.F.
					::oErrors := JsonObject():new()
					::oErrors:FromJSON('{ "error": ' + "ParseXML" + ', "message": "' + cErroXml + '" }')
				Endif
			Else
        lRet:=.F.
        ::oErrors := JsonObject():new()
        ::oErrors['error'] := getResponseError104(oXmlParser)
        ::oErrors['message'] := getResponseMessage104(oXmlParser)
			Endif
			FreeObj(oXmlParser)

		Endif
	Endif
	FreeObj(oWsdl)

Return lRet

/*/{Protheus.doc} Bills::bank033
	Método para transmissão de boletos para o Banco Itaú
	@type method
	@version 12.1.33
	@author daniel.muniz
	@since 07/05/2021
	@return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method bank033() Class Bills As Logical

	Local lRet			  := .T.	As Logical
	Local cBaseXML		:= ''	  As Character
	Local cCodbarra 	:= ''	  As Character
	Local cLnhDigit 	:= ''	  As Character
	Local cURLBoleto  := ''	  As Character
	Local cCodRetorn	:= ''	  As Character
	Local cErroXml		:= ''	  As Character
	Local cWarnXml		:= ''	  As Character
  Local cWsdlError  := ''	  As Character

  Private oXmlParser      := Nil  As Object

	cBaseXML	:= "oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:"

	cCodbarra   := cBaseXML + "_TITULO:_CDBARRA:TEXT"
	cLnhDigit 	:= cBaseXML + "_TITULO:_LINDIG:TEXT"
	cCodRetorn	:= cBaseXML + "_SITUACAO:TEXT"

	::cResult    := ::oBody['XmlSantanderResponse']
  ::cBodyXML   := ::oBody['XmlSantanderRequest']

  ::oBody:GetJsonValue('XmlSantanderError', @cWsdlError)

  If Len(cWsdlError) == 0

    oXmlParser := XMLPARSER(::oBody['XmlSantanderResponse'], "_", @cErroXml, @cWarnXml)

    If oXmlParser <> Nil .And. Empty(cErroXml) .And. Empty(cWarnXml)
      If  Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:_SITUACAO:TEXT") == "C" .And. &(cCodRetorn) == "00"                .And. ;
          Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:_TITULO:_CDBARRA:TEXT") == "C" .And. ValType(&(cCodbarra)) == "C"  .And. ;
          Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:_TITULO:_LINDIG:TEXT") == "C" .And. ValType(&(cLnhDigit)) == "C"
                    
          ::cCodBar 	 := &(cCodbarra) // codigo_barras
          ::cCodDig 	 := &(cLnhDigit) // linha_digitavel
          ::cUrlImpBol := cURLBoleto // url_boleto
      Else
        lRet:=.F.
        ::oErrors := JsonObject():new()
        ::oErrors['error'] := getResponseError033(oXmlParser)
        ::oErrors['message'] := getResponseMessage033(oXmlParser)
      Endif
    Else
      lRet:=.F.
      ::oErrors := JsonObject():new()
      ::oErrors:FromJSON('{ "error": "ParseXML" , "message": "' + cErroXml + '" }')
    Endif
    FreeObj(oXmlParser)
  Else
    lRet:=.F.
    ::oErrors := JsonObject():new()
    ::oErrors:FromJSON('{ "error": "ParseXML" , "message": "' + cWsdlError + '" } ')
  Endif

Return lRet

/*/{Protheus.doc} Bills::bank341V2
    Método para gravação das informações dos boletos transmitidos para o Banco Itaú
    @type method
    @version 12.1.33
    @author francisco.oliveira
    @since 03/03/2022
    @return logical, transmissão realizada com sucesso (.T. - Sim, .F. - Não)
/*/
Method bank341V2() Class Bills As Logical

    Local oResult           as Json
    Local lRet       := .T. as Logical
    Local cURLBoleto := ''  as Character
    Local cError     := ''  as Character

    // Valida o token
    If (ValType(::oToken) <> 'J' .and. ValType(::oToken) <> 'O')
        ::oToken := JsonObject():new()
        ::token341()
    EndIf

    // Realiza a trasmissão
    If ::oErrors == Nil .And. ::oToken:hasProperty('token')
        oResult := JsonObject():new()
        oResult := totvs.protheus.backoffice.ngf.itau.send341V2(::oBody, ::oToken, ::oCredentials, @cURLBoleto)
        If oResult:hasProperty('error')
            cError                 := totvs.protheus.backoffice.ngf.itau.checkErrorV2(oResult)
            ::oErrors              := JsonObject():New()
            ::oErrors[ 'error' ]   := oResult[ 'error' ][ 'codigo' ]
            ::oErrors[ 'message' ] := IIF(Empty(cError), STR0002, cError)
            ::cResult              := oResult:ToJson()
            ::destroyToken()
            lRet                   := .F.
        ElseIf oResult:hasProperty('result')
            ::cResult    := oResult:GetJsonText('result')
            ::cCodBar    := totvs.protheus.backoffice.ngf.itau.efetivacaoItauV2( 'codigo_barras' , oResult)
            ::cCodDig    := totvs.protheus.backoffice.ngf.itau.efetivacaoItauV2( 'numero_linha_digitavel' , oResult)
            ::cUrlImpBol := cURLBoleto
        Endif
    Else
        lRet := .F.
    EndIf

Return lRet

/*/{Protheus.doc} FrmtVlrBco
    Prepara o Json para a propriedade "VALOR" de todos os bancos
    @type function
    @version 1.0
    @author Francisco Oliveira
    @since 23/12/2023
    @param jLayout As Json, json do layout
    @return json para envio
/*/

Function FrmtVlrBco(jLayout As Json) as Json

  Local cValAux := "" As Character
  Local nValAux := 0  As Numeric
  Local nY      := 0  As Numeric
  Local aArray  := {'VALOR', 'VALOR_ABATIMENTO', 'vlNominalTitulo', 'vlAbatimento'} As Array

  For nY := 1 to Len(aArray)
    If  jLayout:hasProperty(aArray[nY])
      If !jLayout[aArray[nY]] == Nil
        cValAux := UPPER(jLayout[aArray[nY]])
        // limpando layout antigo, retira cvaltochar(# * 100)
        // cValToChar( - 12 Posições
        //  * 100 ) - 7 Posições
        If "CVALTOCHAR" $ cValAux
          cValAux := SubStr(cValAux, 12, Len(cValAux))
          cValAux := SubStr(cValAux,  1, Len(cValAux) - 7)
          nValAux := &(Alltrim(cValAux))
          jLayout[aArray[nY]] := "CValToChar(" + cValToChar(nValAux * 100) + ")"
        EndIf
      Endif
    EndIf
  next nY
  
Return jLayout


/*/{Protheus.doc} getResponseError104
    Retorna Erro do response CEF
    @type function
    @version 1.0
    @author rafael.rondon
    @since 08/03/2023
    @param oXmlParser As Object, 
    @return cError As Character
/*/

Function getResponseError104(oXmlParser As Object) As Character

  Local cError      := ''   As Character

  If Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MANUTENCAOCOBRANCABANCARIA_SERVICO_SAIDA:_DADOS:_CONTROLE_NEGOCIAL:_COD_RETORNO:TEXT") == "C"
    cError := oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MANUTENCAOCOBRANCABANCARIA_SERVICO_SAIDA:_DADOS:_CONTROLE_NEGOCIAL:_COD_RETORNO:TEXT
  ElseIf Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NAOIDENTIFICADO_SERVICO_SAIDA:_COD_RETORNO:TEXT") == "C"
    cError := oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NAOIDENTIFICADO_SERVICO_SAIDA:_COD_RETORNO:TEXT
  EndIf
  
Return cError


/*/{Protheus.doc} getResponseMessage104
    Retorna mensagem de erro do response CEF
    @type function
    @version 1.0
    @author rafael.rondon
    @since 08/03/2023
    @param oXmlParser As Object, 
    @return cMessage As Character
/*/

Function getResponseMessage104(oXmlParser As Object) As Character

  Local cMessage    := ''   As Character

  If Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MANUTENCAOCOBRANCABANCARIA_SERVICO_SAIDA:_DADOS:_CONTROLE_NEGOCIAL:_MENSAGENS:_RETORNO:TEXT") == "C"
    cMessage := oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_MANUTENCAOCOBRANCABANCARIA_SERVICO_SAIDA:_DADOS:_CONTROLE_NEGOCIAL:_MENSAGENS:_RETORNO:TEXT
  ElseIf Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NAOIDENTIFICADO_SERVICO_SAIDA:_MSG_RETORNO:TEXT") == "C"
    cMessage := oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NAOIDENTIFICADO_SERVICO_SAIDA:_MSG_RETORNO:TEXT
  EndIf        
  
Return cMessage



/*/{Protheus.doc} getResponseError033
    Retorna Erro do response 033
    @type function
    @version 1.0
    @author rafael.rondon
    @since 08/03/2023
    @param oXmlParser As Object, 
    @return cError As Character
/*/

Function getResponseError033(oXmlParser As Object) As Character

  Local cError      := ''   As Character

  If Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:_SITUACAO:TEXT") == "C"
    cError := oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:_SITUACAO:TEXT
  EndIf
  
Return cError


/*/{Protheus.doc} getResponseMessage033
    Retorna mensagem de erro do response 033
    @type function
    @version 1.0
    @author rafael.rondon
    @since 08/03/2023
    @param oXmlParser As Object, 
    @return cMessage As Character
/*/

Function getResponseMessage033(oXmlParser As Object) As Character

  Local cMessage    := ''   As Character

  If Type("oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:_DESCRICAOERRO:TEXT") == "C"
    cMessage := oXmlParser:_SOAPENV_ENVELOPE:_SOAPENV_BODY:_NS2_REGISTRATITULORESPONSE:_RETURN:_DESCRICAOERRO:TEXT
  EndIf        
  
Return cMessage
