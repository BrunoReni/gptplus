#INCLUDE "TLPP-CORE.TH"
#INCLUDE "AP5MAIL.CH"
#INCLUDE "FWPRINTSETUP.CH"
#INCLUDE "RPTDEF.CH"
#INCLUDE "gfin.bills.email.CH"
#INCLUDE "COLORS.CH"

Static __lEmaBOL := ExistBlock("NGFEMBOL")
Static __lBaiBOL := ExistBlock("NGFBXBOL")

NameSpace gfin.job.bills.email
USING NAMESPACE totvs.protheus.backoffice.ngf.bills

/*/{Protheus.doc} BillsEMail
  Trata o envio de emails com boleto em anexo
  @type class
  @version  12.1.33
  @author cleyton.silva
  @since 09/04/2021
/*/
Class BillsEMail
  data aBills       As Array
  data cEmail       As Character  
  data cEmailError  As Character
  data cCartSauda   As Character
  data cCartTexto   As Character
  data cCartConcl   As Character
  data cCartAssun   As Character
  data cMailBody    As Character
  data cPDFName     As Character
  public data oServcMail  As Object
  public data lOk         As Logical
  public data lPEMai      As Logical
  public data cFrom       As Character
  public data lConnected  As Logical

  public  method new()
  public  method setBills()
  public  method setPDFName()
  public  method setEmail()
  public  method sendEmail()
  public  method Destroy()
  public  method setCarta()
  public  method getError() As Character

  private method conectSmtp()
  private method setError()
  private method bodyMail()
EndClass

/*/{Protheus.doc }new
  contrutor da classe
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
/*/
Method new() Class BillsEMail
  Self:lOk          := .T.
  Self:lConnected   := .F.
  Self:lPEMai       := .F.
  Self:aBills       := {}
  Self:cEmail       := ''
  Self:cEmailError  := ''
  Self:cCartSauda   := ''
  Self:cCartTexto   := ''
  Self:cCartConcl   := ''
  Self:cCartAssun   := ''
  Self:cMailBody    := ''
  Self:cFrom        := ''
  Self:setCarta()    // parametriza a carta de cobrança
  Self:conectSmtp()  // conecta no servidor
Return Self

/*/{Protheus.doc }Destroy
  desconecta o smtp e elima os objetos
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
/*/
Method Destroy() Class BillsEMail
  ::oServcMail:SmtpDisconnect()
Return

/*/{Protheus.doc }setBills
  Set dos boletos
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
  @param aValue, Array, Arary de títulos {json em string, recno SEA}
/*/
Method setBills (aValue As Array) Class BillsEMail
  Self:aBills := aValue
Return

/*/{Protheus.doc }setEmail
  Set do endereço do destinatário
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
  @param cValue, character, Endereço de e-mail do destinatário
/*/
Method setEmail (cValue As Character) Class BillsEMail
  Self:cEmail := cValue
Return

/*/{Protheus.doc }setPDFName
  Set do nome do arquivo
  @type method
  @version  12.1.33
  @author luiz.nai
  @since 20/08/2021
  @param cValue, character, Nome do arquivo
/*/
Method setPDFName (cValue As Character) Class BillsEMail
  Self:cPDFName := cValue
Return

/*/{Protheus.doc} setError
  Seta erro de conexão ou envio e emails
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
  @param cValue, character, Descrição do erro
/*/
Method setError (cValue As Character) Class BillsEMail
  Self:cEmailError := cValue
Return

/*/{Protheus.doc} getError
  Retorna o erro
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
  @param cValue, character, Descrição do erro
/*/
Method getError() Class BillsEMail As Character
Return Self:cEmailError

/*/{Protheus.doc} conectSmtp
  Conecta no servicor SMTP para envio de e-mail
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
  @return character, Descrição do erro
/*/
Method conectSmtp() Class BillsEMail
  Local cSMTP          As Character
  Local cUser          As Character
  Local cPass          As Character
  Local aSMTP          As Array
  Local lAutentica     As Logical
  Local lTLS           As Logical
  Local lSSL           As Logical
  Local nRet           As Numeric
  Local cMsgError      As Character

  cMsgError := ""

  //Pegando parâmetros configurados no Protheus para conexão SMTP
  cSMTP       := AllTrim(SuperGetMV('MV_RELSERV', .T., ' '))
  cUser       := AllTrim(SuperGetMV('MV_FINACNT', .T., ' ')) //Conta do usuario utilizado no financeiro
  cPass       := AllTrim(SuperGetMV('MV_FINPSW' , .T., ' ')) //Senha do usuario utilizado no financeiro
  lTLS        := SuperGetMV('MV_RELTLS' , .T., .F.)
  lSSL        := SuperGetMV('MV_RELSSL' , .T., .F.)
  lAutentica  := SuperGetMV('MV_RELAUTH',.F.,.F.)
  nRet        := 0
  aSMTP       := StrTokArr2(cSMTP, ':')

  If Empty(cSMTP)
    cMsgError := STR0046 + " "  //Necessario configurar o Servidor de e-mail SMTP
  EndIf

  If Empty(cUser) .And. Empty(cPass)
    cUser     := AllTrim(SuperGetMV('MV_RELACNT', .T., ' ')) //Conta do usuario padrao
    cPass     := AllTrim(SuperGetMV('MV_RELPSW' , .T., ' ')) //Senha do usuario padrao
  ElseIf Empty(cUser) .And. !Empty(cPass)
    cMsgError += STR0048   //Necessario informar a conta de e-mail atraves do MV_FINACNT
  ElseIf !Empty(cUser) .And. Empty(cPass)
    cMsgError += STR0047   //Necessario informar a senha da conta de e-mail atraves do MV_FINPSW
  EndIf

  If Empty(cMsgError)
    Self:cFrom := cUser // Remetente do e-mail

    // Configura a classe de e-mail
    ::oServcMail := TMailManager():New()
    ::oServcMail:SetUseSSL(lSSL)
    ::oServcMail:SetUseTLS(lTLS)
    If Len(aSMTP) > 1
      ::oServcMail:Init("", aSMTP[1], cUser, cPass, 0, VAL(aSMTP[2]))
    Else
      ::oServcMail:Init("", cSMTP, cUser, cPass)
    EndIf
    ::oServcMail:SetSMTPTimeout(120)

    // Conecta no servidor SMTP
    nRet := ::oServcMail:SmtpConnect()

    // Autentica se configurado
    If nRet = 0 .And. lAutentica
      nRet := ::oServcMail:SMTPAuth(cUser, cPass)
    EndIf

    If nRet != 0
      cMsgError := STR0002 + ::oServcMail:GetErrorString(nRet) // "Erro ao conectar no servidor SMTP de e-mail: "
    Else
      ::lConnected := .T.
    Endif
  EndIf

  // Se estiver com erro atualiza a classe com a mensagem
  If !Empty(cMsgError)
    ::lOk := .F.
    ::setError( cMsgError )
  EndIf

Return

/*/{Protheus.doc} bodyMail
  Cria o corpo do e-mail
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 12/04/2021
/*/
Method bodyMail () Class BillsEMail
  Local cBody As Character
  //Inicia montagem  HTML do Email
  cBody := ''
  cBody += '<html>'
  cBody += '<head>'
  cBody += '<style>'
  cBody += 'table {'
  cBody += 'width: 80%;'
  cBody += '}'
  cBody += 'caption, td, th {'
  cBody += 'font-family:verdana;'
  cBody += '}'
  cBody += 'td.bloco {'
  cBody += 'white-space: break-spaces;'
  cBody += '}'
  cBody += '</style>'
  cBody += '</head>'
  cBody += '<body>'

  cBody += '<table>'
  cBody += '<tr>'
  cBody += '<td class="bloco">'
  cBody += ::cCartSauda
  cBody += '</td>'
  cBody += '</tr>'
  cBody += '</table>'
  cBody += '<br />'

  //Corpo da carta
  cBody += '<table>'
  cBody += '<tr>'
  cBody += '<td class="bloco">'
  cBody += ::cCartTexto
  cBody += '</td>'
  cBody += '</tr>'
  cBody += '</table>'
  cBody += '<br />'

  //Conclusão
  If !Empty(::cCartConcl)
    cBody += '<table>'
    cBody += '<tr>'
    cBody += '<td class="bloco">'
    cBody += ::cCartConcl
    cBody += '</td>'
    cBody += '</tr>'
    cBody += '</table>'
    cBody += '<br />'
  EndIf
  cBody += '</body>'
  cBody += '</html>'

  ::cMailBody := cBody
Return

/*/{Protheus.doc} sendEmail
  Envia email com boletos registrados
  @type method
  @version  12.1.33
  @author cleyton.silva
  @since 09/04/2021
/*/
Method sendEmail() Class BillsEMail
  Local cError        As Character
  Local cAttach       As Character
  Local oMessage      As Object
  Local nRet          As Numeric

  cError     := ''
  cAttach    := ''
  nRet       := 0

  If ::lOK .And. Len(::aBills) > 0
    if __lEmaBOL
      getBolPdf(::aBills, ::cPDFName, @::lPEMai, .F.)
      If !::lPEMai
        nRet := 1
        cError := STR0004 + STR0049 // "Não foi possível enviar o e-mail: " # "Retorno Ponto de Entrada"
        cAttach := "PE"
      Endif
    Else
      oMessage := TMailMessage():New()
      oMessage:Clear()
      oMessage:cFrom    := ::cFrom
      oMessage:cTo      := ::cEmail
      oMessage:cSubject := ::cCartAssun
      oMessage:cBody    := ::cMailBody

      // gera os boletos em PDF
      cAttach := getBolPdf(::aBills, ::cPDFName, @::lPEMai, .F.)
      // Adiciona o anexo
      If !Empty(cAttach)
        nRet := oMessage:AttachFile(cAttach)
        If nRet != 0
          cError := STR0005 + cAttach //"Não foi possível anexar o arquivo: "
        Else
          nRet := oMessage:Send(::oServcMail)
          If nRet != 0
            cError := STR0004 + ::oServcMail:GetErrorString(nRet) // "Não foi possível enviar o e-mail: "
          EndIf
        Endif
        oMessage:Clear()
        FERASE(cAttach)
      Endif
    Endif
  EndIf

  If !Empty(cAttach)
    If nRet != 0
      ::lOk   := .F.
      ::setError(cError)
    EndIf
  Endif
Return

/*/{Protheus.doc} getCarta
  Carraga as configurações da carta de cobrança
  @type function
  @version  12.1.33
  @author renato.ito
  @since 20/04/2021
/*/
Method setCarta() Class BillsEMail
  Local aArea         As Array
  Local aAreaFWP      As Array
  Local cCodCarta     As Character

  cCodCarta := SuperGetMV('MV_NGFCART', .T., '')   // Modelo carta de cobrança

  If !Empty(cCodCarta)
    aArea          := GetArea()
    aAreaFWP       := GetArea('FWP')

    //Busca na tabela de cartas de cobrança o parâmetro setado com o código da carta
    dbSelectArea("FWP")
    FWP->(dbSetOrder(1))

    If FWP->(dbSeek(xFilial("FWP") + cCodCarta))
      ::cCartSauda    := FWP->FWP_TXTSAU
      ::cCartTexto    := FWP->FWP_TXTCRT
      ::cCartConcl    := FWP->FWP_TXTCON
      ::cCartAssun    := FWP->FWP_TXTASS
      ::bodyMail()
    Else
      ::lOk := .F.
      ::setError(STR0003) // "Código da carta de cobrança configurado não foi localizado."
    EndIf
    RestArea(aAreaFWP)
    RestArea(aArea)
  Else
    ::lOk := .F.
    ::setError(STR0001) // "Carta de cobrança não está parametrizada no parâmetro MV_NGFCART."
  EndIf
Return

/*/{Protheus.doc} getBolPdf
  Gera o ped com os boletos
  @type function
  @version  12.1.33
  @author renato.ito
  @since 07/05/2021
  @param aBoletos, Array, boletos
  @return Character, caminho do arquivo pdf
/*/
Function getBolPdf(aBoletos As Array, cPDFName As Character, lPEMai As Logical, lBaiBol As Logical) As Character
  Local cLocal      As Character
  Local cLogo64     As Character
  Local cFilePrint  As Character
  Local oPrint      As Object
  Local oData       As Object
  Local nBol        As Numeric
  Local lBolAPI     As Logical
  Local aGerBol     As Array
  Local aAuxPE      As Array

  nBol        := 0
  cFilePrint  := ''
  aAuxPE      := {}
  aGerBol     := {}
  cLocal      := DirBol()
  lBolAPI     := .F.

  If File(cLocal+cPDFName)
    FErase(cLocal+cPDFName)
  EndIf

  oPrint := FWMSPrinter():New(cPDFName, IMP_PDF, .F., cLocal, .T., .F., , , .T., .T., , .F.)
  oPrint:cPathPDF := cLocal
  oPrint:lViewPDF := .F.
  oPrint:SetPortrait()

  //gera os logos
  cLogo64 := gfin.util.bills.logos.BB()
  decode64(cLogo64, 'NGFBB.bmp')
  //gera os logos
  cLogo64 := gfin.util.bills.logos.Itau()
  decode64(cLogo64, 'NGFITAU.bmp')
  //gera os logos
  cLogo64 := gfin.util.bills.logos.Bradesco()
  decode64(cLogo64, 'NGFBRAD.bmp')
  //gera os logos
  cLogo64 := gfin.util.bills.logos.CEFLogo()
  decode64(cLogo64, 'NGFCAIXA.bmp')
  //gera os logos
  cLogo64 := gfin.util.bills.logos.SantanLogo()
  decode64(cLogo64, 'NGFSANTAN.bmp')

  For nBol := 1 to Len(aBoletos)
    If !Empty(aBoletos[nBol][1])
      oData := JsonObject():new()
      oData:FromJSON(aBoletos[nBol][1])
      // carrega o logo conforme o banco
      Do Case
        // Boleto do Banco do Brasil
        Case oData['banco'] == '001'
          bol001(aBoletos[nBol][1], @oPrint)
        // Boleto do Banco Itaú
        Case oData['banco'] == '341'
          bol341(aBoletos[nBol][1], @oPrint)
        // Boleto do Banco Bradesco
        Case oData['banco'] == '237'
          totvs.protheus.backoffice.ngf.bills.bol237(aBoletos[nBol][1], @oPrint)
        // Boleto do Banco Caixa Economica Federal
        Case oData['banco'] == '104'
          totvs.protheus.backoffice.ngf.cef.Caixa104(aBoletos[nBol][1], @oPrint)
        Case oData['banco'] == '033'
          totvs.protheus.backoffice.ngf.santander.Santander033(aBoletos[nBol][1], @oPrint)
      EndCase
      Aadd(aGerBol, {aBoletos[nBol][2], .T.}) 
      lBolAPI := .T.
    Else
      Aadd(aGerBol, {aBoletos[nBol][2], .F.}) 
    Endif

    FreeObj(oData)
  Next

  If lBolAPI
    cFilePrint := oPrint:cPathPrint + cPDFName
    oPrint:Print()
  Endif

  If __lEmaBOL .And. Len(aGerBol) > 0 .And. !lBaiBol
    lPEMai := ExecBlock("NGFEMBOL", .F., .F., {aGerBol, cFilePrint})
  Endif

  If __lBaiBOL .And. lBaiBol
    aAuxPE := ExecBlock("NGFBXBOL", .F., .F., {aGerBol, cFilePrint, cPDFName})
    cFilePrint  := aAuxPE[1][1]
    cPDFName    := aAuxPE[1][2]
  Endif
  
  //LIMPAR OBJETO
  FreeObj(oPrint)
Return cFilePrint

/*/{Protheus.doc} bol001
  Gera o boleto do Banco do Brasil
  @type function
  @version  12.1.33
  @author daniel.muniz
  @since 27/05/2021
  @param cData, Character, dados do boleto
  @param oPrint, Object, Objeto do FWMSPrinter
/*/
Static Function bol001(cData As Character, oPrint AS Object)
  Local aDados  As Array
  Local nI      As Numeric
  Local nLinha  As Numeric
  Local nColuna As Numeric
  Local oData   As Object
  Local oFont1  As Object
  Local oFont2  As Object
  Local oFont3  As Object
  Local nMsg    As Numeric
  Local nLinAux As Numeric
  Local nOffset As Numeric
  Local nNumMsg As Numeric

  oData := JsonObject():new()
  oData:fromJson(cData)

  // Definição das fontes
  oFont1 := TFont():New("Arial", 9, 10, .T., .F., 5, .T., 5, .T., .F.)
  oFont2 := TFont():New("Arial", 9, 12, .T., .T., 5, .T., 5, .T., .F.)
  oFont3 := TFont():New("Arial", 9, 16, .T., .T., 5, .T., 5, .T., .F.)

  nLinha  := 10
  nI      := 0
  nColuna := 10
  aDados  := {}
  nOffset := 0
  nNumMsg := 0

  //Beneficiario
  aAdd(aDados, oData['beneficiario']['banco'])      //1 - Numero do Banco
  aAdd(aDados, oData['beneficiario']['agencia'])    //2 - Agencia
  aAdd(aDados, oData['beneficiario']['conta'])      //3 - Conta
  aAdd(aDados, 'NGFBB.bmp')                         //4 - Imagem
  aAdd(aDados, oData['beneficiario']['nome'])       //5 - Beneficiario
  aAdd(aDados, oData['beneficiario']['cnpj'] )      //6 - CNPJ Benef.
  aAdd(aDados, oData['beneficiario']['endereco'] )  //7 - Endereço beneficiario.

  //Pagador
  aAdd(aDados, oData['pagador']['nome'])            //8  - Pagador
  aAdd(aDados, oData['pagador']['cnpj/cpf'])        //9  - CPF Pagador
  aAdd(aDados, oData['pagador']['endereco'])        //10 - End. Cob.

  //Dados do Boleto
  aAdd(aDados, oData['boleto']['nossoNumero'])      //11- Nosso Numero
  aAdd(aDados, oData['boleto']['numeroDocumento'])  //12- Numero documento
  aAdd(aDados, oData['boleto']['linhaDigitavel'])   //13- Linha Digitavel
  aAdd(aDados, oData['boleto']['vencimento'])       //14- Vencimento
  aAdd(aDados, oData['boleto']['emissao'])          //15- Emissao
  aAdd(aDados, oData['boleto']['processamento'])    //16- Processamento
  aAdd(aDados, oData['boleto']['valor'])            //17- Valor
  aAdd(aDados, oData['boleto']['especieDoc'])       //18- Tipo Doc.
  aAdd(aDados, oData['boleto']['especie'])          //19- Especie
  aAdd(aDados, oData['boleto']['carteira'])         //20- Carteira
  aAdd(aDados, oData['boleto']['mensagem'])         //21- Mensagem
  aAdd(aDados, oData['boleto']['codigoBarras'])     //22- Cod. Barras
  aAdd(aDados, oData['boleto']['localPagamento'])   //23- Local de pagamento
  aAdd(aDados, oData['boleto']['aceite'])           //24- Aceite

  aAdd(aDados, oData['boleto']['msgDesconto'])      //25- Desconto
  aAdd(aDados, oData['boleto']['msgJuros'])         //26- Juro Multa
  aAdd(aDados, oData['boleto']['msgMulta'])         //27- Juro Multa

  //Pagador
  aAdd(aDados, oData['pagador']['logradouro'])      //28 - logradouro pagador
  aAdd(aDados, oData['pagador']['bairro'])          //29 - bairro pagador
  
  //Beneficiario
  aAdd(aDados, oData['beneficiario']['logradouro'])       //30 - logradouro beneficiario
  aAdd(aDados, oData['beneficiario']['bairro'])           //31 - bairro beneficiario

  aAdd(aDados, oData['boleto']['qrCode'])           //32 - qrCode para impressão
  aAdd(aDados, oData['boleto']['msgAbatimento'])    //33 - Mensagem Abatimento
  
  oPrint:SetPortrait()
  oPrint:StartPage()
    
  //REFERENCIA - https://www.bb.com.br/docs/pub/emp/empl/dwn/Doc5175Bloqueto.pdf
  //RECIBO DO PAGADOR

  //Desenho LINE(A)
  oPrint:Line(nLinha * 2 , nColuna      , nLinha * 2 , 570         ) // Linha Horizontal
  oPrint:Line(nLinha * 5, nColuna * 15 , nLinha * 2 , nColuna * 15) // Divisor de Coluna
  oPrint:Line(nLinha * 5, nColuna * 19 , nLinha * 2 , nColuna * 19) // Divisor de campo
  oPrint:Line(nLinha * 5, nColuna      , nLinha * 5, 570         ) // Linha Horizontal
  //Dados LINE(A)
  oPrint:Say(nLinha * 2.7, nColuna * 50, STR0006, oFont1)            // "Recibo do pagador"
  oPrint:SayBitmap(nLinha * 2.7, nColuna * 2, 'NGFBB.bmp', 110, 15)       //Logo do banco
  oPrint:Say(nLinha * 4, nColuna * 15.5, aDados[1] , oFont3)         // Numero do Banco
  oPrint:Say(nLinha * 4, nColuna * 22  , aDados[13], oFont3)          // Linha Digitavel

  // LINE (B)
  oPrint:Say(nLinha * 6  , nColuna * 2, STR0007 + STR0008              , oFont1)  //"Nome do pagador: " "CPF/CNPJ/Endereço"
  oPrint:Say(nLinha * 7.2, nColuna * 2, SubStr(aDados[8],1,90) + ' - ' +  aDados[9], oFont2)

  oPrint:Say(nLinha * 8.3, nColuna * 2 ,SubStr(aDados[28],1,120)       , oFont1)  // Logradouro
  oPrint:Say(nLinha * 9.4, nColuna * 2 ,SubStr(aDados[29],1,120)       , oFont1)  // Bairro.
  oPrint:Say(nLinha * 10.5, nColuna * 2 ,SubStr(aDados[10],1,120)       , oFont1)  // CEP Cidade UF
  oPrint:Say(nLinha * 11.7, nColuna * 2, STR0009                        , oFont1)  // "Beneficiário Final"
  // Linha horizontal fechando a sessao
  oPrint:Line(nLinha * 12.2, nColuna, nLinha * 12.2, 570 )

  // Dados LINE (C)
  oPrint:Say(nLinha * 13.2, nColuna *  2, STR0010         , oFont1)  // "Nosso Número"
  oPrint:Say(nLinha * 14.5, nColuna *  2, aDados[11]      , oFont2)  // Nosso Numero
  oPrint:Say(nLinha * 13.2, nColuna * 18, STR0011         , oFont1)  // "Nr. do Documento"
  oPrint:Say(nLinha * 14.5, nColuna * 18, aDados[12]      , oFont2)  // Numero documento
  oPrint:Say(nLinha * 13.2, nColuna * 26, STR0012         , oFont1)  // "Data de Vencimento"
  oPrint:Say(nLinha * 14.5, nColuna * 27, aDados[14]      , oFont2)  // Vencimento
  oPrint:Say(nLinha * 13.2, nColuna * 36, STR0013         , oFont1)  // "Valor do Documento"
  oPrint:Say(nLinha * 14.5, nColuna * 36, aDados[17]      , oFont2)  // Valor
  oPrint:Say(nLinha * 13.2, nColuna * 46, '(=) ' + STR0014, oFont1)  // "Valor Pago"
  // Desenho LINE (C)
  
  oPrint:Line(nLinha * 12.2, nColuna * 17, nLinha * 15.2, nColuna * 17 )  // Divisor de campo
  oPrint:Line(nLinha * 12.2, nColuna * 25, nLinha * 15.2, nColuna * 25 )  // Divisor de campo
  oPrint:Line(nLinha * 12.2, nColuna * 35, nLinha * 15.2, nColuna * 35 )  // Divisor de campo
  oPrint:Line(nLinha * 12.2, nColuna * 45, nLinha * 15.2, nColuna * 45 )  // Divisor de campo
  
  
  // Linha horizontal fechando a sessao
  oPrint:Line(nLinha * 15.2, nColuna, nLinha * 15.2, 570 )

  // LINE (D)
  oPrint:Say(nLinha * 16.2  , nColuna * 2, STR0015 + STR0008            , oFont1) // "Nome do Beneficiário: " "CPF/CNPJ/Endereço"
  oPrint:Say(nLinha * 17.4  , nColuna * 2, SubStr(aDados[5],1,90) + ' - ' + aDados[6], oFont1)
  oPrint:Say(nLinha * 18.5, nColuna * 2, SubStr(aDados[30],1,120)       , oFont1)  //Logradouro beneficiario
  oPrint:Say(nLinha * 19.6, nColuna * 2, SubStr(aDados[31],1,120)       , oFont1)  //Bairro beneficiario
  oPrint:Say(nLinha * 20.7, nColuna * 2, SubStr(aDados[7],1,120)        , oFont1)  //CEP Cidade UF

  // Linha horizontal fechando a sessao
  oPrint:Line( nLinha * 21.5  , nColuna, nLinha * 21.5, 570 )

  // LINE (E)
  oPrint:Say( nLinha * 22.5, nColuna * 2 , STR0016, oFont1) // "Agência/Código do Beneficiário"
  oPrint:Say( nLinha * 22.5, nColuna * 30, STR0017, oFont1) // "Autenticação Mecânica"

  //Pontilhado separador
  For nI := 0 to 600 step 5
    oPrint:Line( nLinha * 28.4, nI, nLinha * 28.4, nI+2 )
  Next nI

  // BOLETO DE COBRANÇA
  // Dados LINE(A)
  oPrint:SayBitmap(nLinha * 35, nColuna * 2, 'NGFBB.bmp', 110, 15)  //Logo do banco
  oPrint:Say(nLinha * 36, nColuna * 15.5, aDados[1] , oFont3)   // Numero do Banco
  oPrint:Say(nLinha * 36, nColuna * 22  , aDados[13], oFont3)   // Linha Digitavel
  // Desenho LINE(A)
  oPrint:Line(nLinha * 34, nColuna     , nLinha * 34, 570 )          // Linha horizontal fechando a sessao
  oPrint:Line(nLinha * 34, nColuna * 15, nLinha * 37, nColuna * 15 ) // Divisor de Coluna
  oPrint:Line(nLinha * 34, nColuna * 19, nLinha * 37, nColuna * 19 ) // Divisor de campo
  oPrint:Line(nLinha * 37, nColuna     , nLinha * 37, 570 )          // Linha Horizontal

  // Dados LINE B
  oPrint:Say(nLinha * 38    , nColuna * 2 , STR0018   , oFont1)  // "Local de pagamento"
  oPrint:Say(nLinha * 39.2  , nColuna * 2 , aDados[23], oFont2)  // Local de pagamento
  oPrint:Say(nLinha * 38    , nColuna * 46, STR0012   , oFont1)
  oPrint:Say(nLinha * 39.2  , nColuna * 46, aDados[14], oFont2)  // Vencimento
  // Desenho LINE B
  oPrint:Line(nLinha * 37, nColuna * 45, nLinha * 40, nColuna * 45 )  // Divisor de Coluna
  oPrint:Line(nLinha * 40, nColuna     , nLinha * 40, 570          )  // Linha Horizontal
  // Dados LINE C
  oPrint:Say(nLinha * 41    , nColuna * 2 , STR0015 + STR0019                           , oFont1)  // "Nome do Beneficiário: ""CPF/CNPJ"
  oPrint:Say(nLinha * 42    , nColuna * 2 , SubStr(aDados[5],1,66) + ' - ' + aDados[6]  , oFont1)
  oPrint:Say(nLinha * 43.1  , nColuna * 2 , SubStr(aDados[30],1,76)                     , oFont1)  // Logradouro beneficiario
  oPrint:Say(nLinha * 44.2  , nColuna * 2 , SubStr(aDados[31],1,76)                      , oFont1)  // Bairro beneficiario
  oPrint:Say(nLinha * 45.3  , nColuna * 2 , SubStr(aDados[7],1,76)                      , oFont1)  // CEP Cidade UF beneficiario
  oPrint:Say(nLinha * 41    , nColuna * 46, STR0016                                     , oFont1)  // "Agência/Código do Beneficiário"
  oPrint:Say(nLinha * 42.2  , nColuna * 46, aDados[2] + "/" + aDados[3], oFont2)  // Agencia Conta
  // Desenho LINE C
  oPrint:Line( nLinha * 40, nColuna * 45, nLinha * 46.1, nColuna * 45 )   // Divisor de Coluna
  oPrint:Line( nLinha * 46.1, nColuna, nLinha * 46.1, 570 )                 // Linha Horizontal

  // Dados LINE D
  nLinAux := 47.1
  oPrint:Say(nLinha * nLinAux, nColuna * 2 , STR0020   , oFont1)  // "Data do Documento"
  oPrint:Say(nLinha * nLinAux, nColuna * 11, STR0011   , oFont1)  // "Nr. do Documento"
  oPrint:Say(nLinha * nLinAux, nColuna * 19, STR0021   , oFont1)  // "Espécie DOC"
  oPrint:Say(nLinha * nLinAux, nColuna * 27, STR0022   , oFont1)  // "Aceite"
  oPrint:Say(nLinha * nLinAux, nColuna * 35, STR0023   , oFont1)  // "Data Processamento"
  oPrint:Say(nLinha * nLinAux, nColuna * 46, STR0010   , oFont1)  // "Nosso Número"
  nLinAux := 48.3
  oPrint:Say(nLinha * nLinAux, nColuna * 2 , aDados[15], oFont2)  // Emissao  
  oPrint:Say(nLinha * nLinAux, nColuna * 11, aDados[12], oFont2)  // Numero documento  
  oPrint:Say(nLinha * nLinAux, nColuna * 19, aDados[18], oFont2)  // Tipo Doc  
  oPrint:Say(nLinha * nLinAux, nColuna * 27, aDados[24], oFont2)  // Aceite  
  oPrint:Say(nLinha * nLinAux, nColuna * 35, aDados[16], oFont2)  // Processamento  
  oPrint:Say(nLinha * nLinAux, nColuna * 46, aDados[11], oFont2)  // Nosso Numero
  // Desenho LINE D
  nLinAux := 46.1  
  oPrint:Line(nLinha * nLinAux, nColuna * 10, nLinha * 49.1, nColuna * 10)  // Divisor de Coluna
  oPrint:Line(nLinha * nLinAux, nColuna * 18, nLinha * 49.1, nColuna * 18)  // Divisor de Coluna
  oPrint:Line(nLinha * nLinAux, nColuna * 26, nLinha * 49.1, nColuna * 26)  // Divisor de Coluna
  oPrint:Line(nLinha * nLinAux, nColuna * 34, nLinha * 49.1, nColuna * 34)  // Divisor de Coluna
  oPrint:Line(nLinha * nLinAux, nColuna * 45, nLinha * 49.1, nColuna * 45)  // Divisor de Coluna  
  oPrint:Line(nLinha * 49.1, nColuna     , nLinha * 49.1, 570         )  // Linha Horizontal

  // Dados LINE E
  nLinAux := 50.1
  oPrint:Say(nLinha * nLinAux, nColuna * 2 , STR0024         , oFont1)  // "Uso do Banco"
  oPrint:Say(nLinha * nLinAux, nColuna * 11, STR0025         , oFont1)  // "Carteira"
  oPrint:Say(nLinha * nLinAux, nColuna * 19, STR0026         , oFont1)  // "Espécie"
  oPrint:Say(nLinha * nLinAux, nColuna * 27, STR0027         , oFont1)  // "Quantidade"
  oPrint:Say(nLinha * nLinAux, nColuna * 35, '(x) ' + STR0028, oFont1)  // "Valor"
  oPrint:Say(nLinha * nLinAux, nColuna * 46, '(=) ' + STR0013, oFont1)  // "Valor do Documento"
  nLinAux := 51.3
  oPrint:Say(nLinha * nLinAux, nColuna * 11, aDados[20]      , oFont2)  // Carteira  
  oPrint:Say(nLinha * nLinAux, nColuna * 19, aDados[19]      , oFont2)  // Especie    
  oPrint:Say(nLinha * nLinAux, nColuna * 46, aDados[17]      , oFont2)  // Valor
  // Desenho LINE E
  oPrint:Line(nLinha * 49.1, nColuna * 10, nLinha * 52.1, nColuna * 10)  // Divisor de Coluna
  oPrint:Line(nLinha * 49.1, nColuna * 18, nLinha * 52.1, nColuna * 18)  // Divisor de Coluna
  oPrint:Line(nLinha * 49.1, nColuna * 26, nLinha * 52.1, nColuna * 26)  // Divisor de Coluna
  oPrint:Line(nLinha * 49.1, nColuna * 34, nLinha * 52.1, nColuna * 34)  // Divisor de Coluna
  oPrint:Line(nLinha * 49.1, nColuna * 45, nLinha * 52.1, nColuna * 45)  // Divisor de Coluna

  oPrint:Line(nLinha * 52.1, nColuna, nLinha * 52.1, 570)  // Linha Horizontal
  

  // LINE F
  oPrint:Say(nLinha * 53.1, nColuna * 2 , STR0029         , oFont1)  // "Informações de Responsabilidade do Beneficiário"
  
  nMsg := 54.1

  If(aDados[21] != Nil)
    formatMsgTicket("001", oPrint, nLinha, nColuna, @nMsg, aDados[21], oFont2, 87) //Mensagem do boleto
    nNumMsg += 1
  EndIf

  If(!Empty(aDados[25]))
    formatMsgTicket("001", oPrint, nLinha, nColuna, @nMsg, aDados[25], oFont1, 115) // "Campo livre sobre desconto"
    nNumMsg += 1
  EndIf

  If(!Empty(aDados[26]))
    formatMsgTicket("001", oPrint, nLinha, nColuna, @nMsg, aDados[26], oFont1, 115) // "Msg livre juros"
    nNumMsg += 1
  EndIf

  If(!Empty(aDados[27]))
    formatMsgTicket("001", oPrint, nLinha, nColuna, @nMsg, aDados[27], oFont1, 115)  // "Msg livre multa"
    nNumMsg += 1
    If (nNumMsg > 3)
      nOffset += 8
    EndIf
  EndIf  

  If(!Empty(aDados[33]))
    formatMsgTicket("001", oPrint, nLinha, nColuna, @nMsg, aDados[33], oFont1, 115)  // "Msg livre abatimento"
    nNumMsg += 1
    If (nNumMsg > 3)
      nOffset += 8
    EndIf
  EndIf

  oPrint:Say(nLinha * 53.1, nColuna * 46, '(-) ' + STR0030, oFont1)  // "Desconto/Abatimento"

  oPrint:Line((nLinha * 52.1), nColuna * 45, (nLinha * 61.1) + nOffset, nColuna * 45)  //F/G/H - VERTICAL
  oPrint:Line(nLinha * 55.1, nColuna * 45, nLinha * 55.1, 570         )  // Linha Horizontal
  // LINE G
  oPrint:Say(nLinha * 56.1, nColuna * 46, '(+) ' + STR0031, oFont1)  //"Juros/Multa"
  oPrint:Line(nLinha * 58.1, nColuna * 45,  nLinha * 58.1, 570)        // Linha Horizontal
  // LINE H
  oPrint:Say(nLinha * 59.1, nColuna * 46, '(=) '+ STR0032, oFont1)  // "Valor Cobrado"
  oPrint:Line((nLinha  * 61.1) + nOffset, nColuna     ,  (nLinha * 61.1) + nOffset, 570)       // Linha Horizontal
  // LINE I
  oPrint:Say((nLinha * 62.1) + nOffset, nColuna * 2 , STR0007 + STR0008                            , oFont1)  // "Nome do pagador: " "CPF/CNPJ/Endereço"
  oPrint:Say((nLinha * 63.1) + nOffset, nColuna * 2 , SubStr(aDados[8],1,90) + ' - ' +  aDados[9]  , oFont1)  // pagador nome cpf/cnpj
  oPrint:Say((nLinha * 64.2) + nOffset, nColuna * 2 , SubStr(aDados[28],1,120)                     , oFont1)  // Logradouro. Cob.
  oPrint:Say((nLinha * 65.3) + nOffset, nColuna * 2 , SubStr(aDados[29],1,120)                     , oFont1)  // Bairro
  oPrint:Say((nLinha * 66.4) + nOffset, nColuna * 2 , SubStr(aDados[10],1,120)                     , oFont1)  // CEP Cidade UF
  oPrint:Say((nLinha * 67.5) + nOffset, nColuna * 35, STR0033                                      , oFont1)  // "Código de Baixa"
  oPrint:Line((nLinha * 68 ) + nOffset, nColuna     ,  (nLinha * 68) + nOffset, 570 ) // Linha Horizontal
  // LINE J
  oPrint:Say( (nLinha * 69.2) + nOffset, nColuna * 2 , STR0009, oFont1)  // "Beneficiário Final"
  oPrint:Say( (nLinha * 69.2) + nOffset, nColuna * 35, STR0017, oFont1)  // "Autenticação Mecânica"
  oPrint:Say( (nLinha * 69.2) + nOffset, nColuna * 44, ' - '  , oFont1)
  oPrint:Say( (nLinha * 69.2) + nOffset, nColuna * 46, STR0034, oFont1)  // "Ficha de Compensação"
  // CÓDIGO DE BARRAS
  oPrint:FWMsBar("INT25", 60.2 + (nOffset / 8), 1.8, aDados[22], oPrint, .F., Nil, Nil, 0.025, 0.8, Nil, Nil, "A", .F.)  // Cod. Barras
  If !Empty(aDados[32])
    oPrint:Say( (nLinha * 70.4) + nOffset, nColuna * 46, STR0050, oFont1)  // 'Pague com Pix'
    oPrint:QRCode( (nLinha * 81.8) + nOffset , nColuna * 46 ,aDados[32], 110 )
  EndIf
  oPrint:EndPage()
  FreeObj(oData)
  FreeObj(oFont1)
  FreeObj(oFont2)
  FreeObj(oFont3)
  FwFreeArray(aDados)
Return 

/*/{Protheus.doc} bol341
  Gera o boleto do Banco do Itaú
  @type function
  @version  12.1.33
  @author daniel.muniz
  @since 27/05/2021
  @param cData, Character, dados do boleto
  @param oPrint, Object, Objeto do FWMSPrinter
/*/
Static Function bol341(cData As Character, oPrint AS Object)
  Local aDados      As Array
  Local nI          As Numeric
  Local nLocal      as Numeric
  Local nOffset     As Numeric
  Local nOffsetLine As Numeric
  Local nOffsetRec  As Numeric
  Local nOffsetBol  As Numeric
  Local nLinha      As Numeric
  Local nColuna     As Numeric
  Local nMsg        As Numeric
  Local cAuxMsg     As Character
  Local oData       As Object
  Local oFont7      As Object
  Local oFont8      As Object
  Local oFont10     As Object
  Local oFont11     As Object
  Local oFont15     As Object
  Local oFont14n    As Object

  oData := JsonObject():new()
  oData:fromJson(cData)
  
  oFont7     := TFont():New("Arial"      ,9,7,.T.,.T.,5,.T.,5,.T.,.F.)
  oFont8     := TFont():New("Arial"      ,9,8,.T.,.F.,5,.T.,5,.T.,.F.)
  oFont10    := TFont():New("Arial"      ,9,10,.T.,.T.,5,.T.,5,.T.,.F.)
  oFont11    := TFont():New("Arial"      ,9,11,.T.,.T.,5,.T.,5,.T.,.F.)
  oFont15    := TFont():New("Arial"      ,9,17,.T.,.T.,5,.T.,5,.T.,.F.)
  oFont14n   := TFont():New("Arial"      ,9,16,.T.,.F.,5,.T.,5,.T.,.F.)

  nLinha      := 10
  nColuna     := 10
  nOffsetBol  := 0
  nOffsetRec  := 0
  nOffsetLine := 0
  aDados      := {}

  // Beneficiario
  aAdd(aDados, oData['beneficiario']['banco'])     // 1 - Numero do Banco
  aAdd(aDados, oData['beneficiario']['agencia'])   // 2 - Agencia/Conta Beneficiário
  aAdd(aDados, oData['beneficiario']['nome'])      // 3 - Nome Benef.
  aAdd(aDados, oData['beneficiario']['cnpj'])      // 4 - CNPJ Benef.
  aAdd(aDados, oData['beneficiario']['endereco'])  // 5 - Endereço Benef.

  // Pagador
  aAdd(aDados, oData['pagador']['nome'])           // 6 - Pagador
  aAdd(aDados, oData['pagador']['cnpj/cpf'])       // 7 - CPF Pagador
  aAdd(aDados, oData['pagador']['endereco'])       // 8 - End. Cob.

  // Dados do Boleto
  aAdd(aDados, oData['boleto']['nossoNumero'])     // 9 - Nosso Numero
  aAdd(aDados, oData['boleto']['numeroDocumento']) // 10 - Numero documento
  aAdd(aDados, oData['boleto']['linhaDigitavel'])  // 11 - Linha Digitavel
  aAdd(aDados, oData['boleto']['codigoBarras'])    // 12 - Cod. Barras
  aAdd(aDados, oData['boleto']['localPagamento'])  // 13 - Local Pagamento
  aAdd(aDados, oData['boleto']['usoBanco'])        // 14 - Uso Banco
  aAdd(aDados, oData['boleto']['mensagem'])        // 15 - Mensagem
  aAdd(aDados, oData['boleto']['vencimento'])      // 16 - Vencimento
  aAdd(aDados, oData['boleto']['emissao'])         // 17 - Emissao
  aAdd(aDados, oData['boleto']['processamento'])   // 18 - Processamento
  aAdd(aDados, oData['boleto']['especieDoc'])      // 19 - Especie Documento
  aAdd(aDados, oData['boleto']['especie'])         // 20 - Especie Moeda
  aAdd(aDados, oData['boleto']['aceite'])          // 21 - Aceite
  aAdd(aDados, oData['boleto']['carteira'])        // 22 - Carteira
  aAdd(aDados, oData['boleto']['valor'])           // 23 - Valor
  aAdd(aDados, oData['boleto']['desconto'])        // 24 - Desconto
  aAdd(aDados, oData['boleto']['juroMulta'])       // 25 - Juros/Multa
  aAdd(aDados, oData['boleto']['totalCobrado'])    // 26 - Valor Cobrado

  aAdd(aDados, oData['boleto']['msgDesconto'])     //27 - Desconto
  aAdd(aDados, oData['boleto']['msgJuros'])        //28 - Juro Multa
  aAdd(aDados, oData['boleto']['msgMulta'])        //29 - Juro Multa  

  aAdd(aDados, oData['boleto']['instr_msg1'])      //30 - Mensagem 1
  aAdd(aDados, oData['boleto']['instr_msg2'])      //31 - Mensagem 2
  aAdd(aDados, oData['boleto']['instr_msg3'])      //32 - Mensagem 3  

  // Beneficiario
  aAdd(aDados, oData['beneficiario']['logradouro'])   // 33 - logradouro Benef.
  aAdd(aDados, oData['beneficiario']['bairro'])       // 34 - bairro Benef.

  // Pagador
  aAdd(aDados, oData['pagador']['logradouro'])       // 35 - logradouro
  aAdd(aDados, oData['pagador']['bairro'])           // 36 - End. Cob.
  aAdd(aDados, oData['boleto']['qrCode'])            // 37 - QRCode


  oPrint:SetPortrait()
  oPrint:StartPage()

  //RECIBO DO PAGADOR
  nOffset := nOffsetRec
  //Desenho LINE(A)
  oPrint:Say      ( nLinha * 6   + nOffset, nColuna * 25, STR0017, oFont8 )
  oPrint:SayAlign ( nLinha * 6.5 + nOffset, nColuna * 46, STR0006, oFont11, nColuna * 11, nLinha,, 1, 0 )
  oPrint:Line     ( nLinha * 8   + nOffset, nColuna * 22.5, nLinha * 8 + nOffset, 570, CLR_BLACK )  // Linha Horizontal
  //Dados LINE(A)
  oPrint:SayBitmap( nLinha * 8    + nOffset, nColuna * 1.5, 'NGFITAU.bmp', 110, 20)       //Logo do banco
  oPrint:Line     ( nLinha * 10.5 + nOffset, nColuna * 22.5, nLinha * 8 + nOffset, nColuna * 22.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Say      ( nLinha * 9    + nOffset, nColuna * 23  , STR0035             , oFont8  )
  oPrint:Say      ( nLinha * 10   + nOffset, nColuna * 23.5, aDados[16]          , oFont10 )  // Vencimento
  oPrint:Line     ( nLinha * 10.5 + nOffset, nColuna * 35.5, nLinha * 8 + nOffset, nColuna * 35.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Say      ( nLinha * 9    + nOffset, nColuna * 36  , STR0013             , oFont8  )
  oPrint:SayAlign ( nLinha * 9    + nOffset, nColuna * 36.5, aDados[23]          , oFont10, nColuna * 20, nLinha,, 1, 0)   // Valor do Documento
  oPrint:Line     ( nLinha * 10.5 + nOffset, nColuna       , nLinha * 10.5 + nOffset, 570, CLR_BLACK )                // Linha Horizontal
  // LINE (B)
  oPrint:Say  ( nLinha * 11.5 + nOffset, nColuna * 2   , STR0036                , oFont8 ) // "Pagador"
  oPrint:Say  ( nLinha * 12.5 + nOffset, nColuna * 2.5 , SubStr(aDados[6],1,50)              , oFont10)
  oPrint:Line ( nLinha * 13   + nOffset, nColuna * 29.5, nLinha * 10.5 + nOffset, nColuna * 29.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Say  ( nLinha * 11.5 + nOffset, nColuna * 30  , STR0037                , oFont8 ) // "Beneficiario"
  oPrint:Say  ( nLinha * 12.5 + nOffset, nColuna * 30.5, SubStr(aDados[3],1,45)              , oFont10)
  oPrint:Line ( nLinha * 13   + nOffset, nColuna       , nLinha * 13 + nOffset  , 570, CLR_BLACK )              // Linha horizontal fechando a sessao
  // LINE (C)
  oPrint:Say  ( nLinha * 14   + nOffset, nColuna * 2  , STR0038                , oFont8 ) //Endereço Beneficiário/Beneficiário Final
  oPrint:Say  ( nLinha * 15   + nOffset, nColuna * 2.5, SubStr(aDados[33],1,100)              , oFont10)  
  oPrint:Say  ( nLinha * 16   + nOffset, nColuna * 2.5, SubStr(aDados[34],1,100)              , oFont10)  
  oPrint:Say  ( nLinha * 17   + nOffset, nColuna * 2.5, SubStr(aDados[5],1,100)              , oFont10)  


  oPrint:Line ( nLinha * 17.5 + nOffset, nColuna      , nLinha * 17.5 + nOffset, 570, CLR_BLACK ) // Linha horizontal fechando a sessao

  // LINE (D)
  oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 2   , STR0016                 , oFont8  ) // Agencia/ Conta Beneficiário
  oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 2.5 , aDados[2]               , oFont10 )  
  oPrint:Line ( nLinha * 20   + nOffset, nColuna * 19.5, nLinha * 17.5 + nOffset , nColuna * 19.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 20  , STR0010                 , oFont8  ) // Nosso Numero
  oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 20.5, aDados[9]               , oFont10 )  
  oPrint:Line ( nLinha * 20   + nOffset, nColuna * 33.5, nLinha * 17.5 + nOffset , nColuna * 33.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 34  , STR0039                 , oFont8  )  // Numero documento
  oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 34.5, aDados[10]              , oFont10 ) 
  oPrint:Line ( nLinha * 20   + nOffset, nColuna * 43.5, nLinha * 17.5 + nOffset , nColuna * 43.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Say  ( nLinha * 18.5 + nOffset, nColuna * 44  , STR0040                 , oFont8  ) // CNPJ
  oPrint:Say  ( nLinha * 19.5 + nOffset, nColuna * 44.5, aDados[4]               , oFont10 )  
  oPrint:Line ( nLinha * 20   + nOffset, nColuna       , nLinha * 20 + nOffset   , 570, CLR_BLACK ) // Linha horizontal fechando a sessao

  nOffset += nOffsetLine
  //Pontilhado separador
  For nI := 0 to 600 step 5
    oPrint:Line( nLinha * 22 + nOffset, nI, nLinha * 22 + nOffset, nI+2, CLR_BLACK )
  Next nI

  nOffset += nOffsetBol
  
  // BOLETO DE COBRANÇA
  // Dados LINE(A)
  oPrint:SayBitmap( nLinha * 22.5 + nOffset, nColuna * 1.5 , 'NGFITAU.bmp', 110, 20)       //Logo do banco
  oPrint:Say      ( nLinha * 24.5 + nOffset, nColuna * 14.5, aDados[1] , oFont15 )   // Numero do Banco
  oPrint:Say      ( nLinha * 24.5 + nOffset, nColuna * 20.5, aDados[11], oFont14n )   // Linha Digitavel
  // Desenho LINE(A)
  oPrint:Line ( nLinha * 23 + nOffset, nColuna * 13, nLinha * 25 + nOffset, nColuna * 13, CLR_BLACK ) // Divisor de Coluna
  oPrint:Line ( nLinha * 23 + nOffset, nColuna * 19, nLinha * 25 + nOffset, nColuna * 19, CLR_BLACK ) // Divisor de campo
  oPrint:Line ( nLinha * 25 + nOffset, nColuna     , nLinha * 25 + nOffset, 570         , CLR_BLACK ) // Linha Horizontal

  // Dados LINE B
  oPrint:Say      ( nLinha * 26 + nOffset, nColuna * 2   , STR0018      , oFont8 ) // Local Pagamento
  For nLocal := 1 to Len(aDados[13])
    oPrint:Say      ( nLinha * (26 + nLocal) + nOffset, nColuna * 2.5 , AllTrim(aDados[13][nLocal]) + IIF(nLocal == 1, ".", ""), oFont7)  // Local Pagamento
  Next nLocal
  oPrint:Say      ( nLinha * 26 + nOffset, nColuna * 44  , STR0035    , oFont8 )
  oPrint:SayAlign ( nLinha * 27 + nOffset, nColuna * 44.5, aDados[16] , oFont10, nColuna * 12, nLinha,, 1, 0) // Vencimento
  // Desenho LINE B
  oPrint:Line ( nLinha * 25   + nOffset, nColuna * 43.5, nLinha * 28.5 + nOffset, nColuna * 43.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Line ( nLinha * 28.5 + nOffset, nColuna       , nLinha * 28.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
  // Dados LINE C
  oPrint:Say      ( nLinha * 29.5 + nOffset, nColuna * 2   , STR0037    , oFont8) // "Beneficiario"
  oPrint:Say      ( nLinha * 30.5 + nOffset, nColuna * 2.5 , SubStr(aDados[3],1,45)   , oFont10)
  oPrint:Say      ( nLinha * 29.5 + nOffset, nColuna * 44  , STR0016    , oFont8 )
  oPrint:SayAlign ( nLinha * 29.5 + nOffset, nColuna * 44.5, aDados[2]  , oFont10, nColuna * 12, nLinha,, 1, 0) // Agencia Conta
  // Desenho LINE C
  oPrint:Line ( nLinha * 28.5 + nOffset, nColuna * 43.5, nLinha * 31 + nOffset, nColuna * 43.5, CLR_BLACK ) // Divisor de Coluna
  oPrint:Line ( nLinha * 31   + nOffset, nColuna       , nLinha * 31 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal

  // Dados LINE D
  oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 2   , STR0020    , oFont8  ) // Data do Documento
  oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 2.5 , aDados[17] , oFont10 ) 
  oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 11  , STR0041    , oFont8  ) // Numero documento
  oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 11.5, aDados[10] , oFont10 ) 
  oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 23  , STR0042    , oFont8  ) // Especie doc.
  oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 23.5, aDados[19] , oFont10 )  
  oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 30  , STR0022    , oFont8  ) // Aceite
  oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 30.5, aDados[21] , oFont10 )
  oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 35  , STR0043    , oFont8  ) // Processamento
  oPrint:Say      ( nLinha * 33 + nOffset, nColuna * 35.5, aDados[18] , oFont10 )  
  oPrint:Say      ( nLinha * 32 + nOffset, nColuna * 44  , STR0010    , oFont8  ) // Nosso Numero
  oPrint:SayAlign ( nLinha * 32 + nOffset, nColuna * 44.5, aDados[9]  , oFont10 , nColuna * 12, nLinha,, 1, 0) // Nosso Número

  // Desenho LINE D
  oPrint:Line ( nLinha * 31   + nOffset, nColuna * 10.5, nLinha * 33.5 + nOffset, nColuna * 10.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 31   + nOffset, nColuna * 22.5, nLinha * 33.5 + nOffset, nColuna * 22.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 31   + nOffset, nColuna * 29.5, nLinha * 33.5 + nOffset, nColuna * 29.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 31   + nOffset, nColuna * 34.5, nLinha * 33.5 + nOffset, nColuna * 34.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 31   + nOffset, nColuna * 43.5, nLinha * 33.5 + nOffset, nColuna * 43.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 33.5 + nOffset, nColuna       , nLinha * 33.5 + nOffset, 570           , CLR_BLACK )  // Linha Horizontal

  // Dados LINE E
  oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 2   , STR0024         , oFont8  ) // Uso do Banco
  oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 2.5 , aDados[14]      , oFont10 )  
  oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 11  , STR0025         , oFont8  ) // Carteira
  oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 11.5, aDados[22]      , oFont10 )  
  oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 17  , STR0026         , oFont8  ) // Especie
  oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 17.5, aDados[20]      , oFont10 )  
  oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 23  , STR0027         , oFont8  ) // Quantidade
  oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 23.5, ''              , oFont10 )  
  oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 35  , STR0028         , oFont8  ) // Valor 
  oPrint:Say      ( nLinha * 35.5 + nOffset, nColuna * 35.5, ''              , oFont10 )
  oPrint:Say      ( nLinha * 34.5 + nOffset, nColuna * 44  , '(=) ' + STR0013, oFont8  ) // Valor Documento
  oPrint:SayAlign ( nLinha * 34.5 + nOffset, nColuna * 44.5, aDados[23]           , oFont10 , nColuna * 12, nLinha,, 1, 0) // Valor Documento
  // Desenho LINE E
  oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 10.5, nLinha * 36 + nOffset, nColuna * 10.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 16.5, nLinha * 36 + nOffset, nColuna * 16.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 22.5, nLinha * 36 + nOffset, nColuna * 22.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 34.5, nLinha * 36 + nOffset, nColuna * 34.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 33.5 + nOffset, nColuna * 43.5, nLinha * 36 + nOffset, nColuna * 43.5, CLR_BLACK )  // Divisor de Coluna
  oPrint:Line ( nLinha * 36   + nOffset, nColuna       , nLinha * 36 + nOffset, 570           , CLR_BLACK )   // Linha Horizontal

  // LINE F G H
  oPrint:Say      ( nLinha * 37 + nOffset, nColuna * 2   , STR0044, oFont8 ) // Informações - # "Instruções de Responsabilidade do Beneficiário. Qualquer dúvida sobre este boleto contate o beneficiário."

  /* Bloco de mensagem - início */
  nMsg := 39

  If(!Empty(aDados[27]))
    oPrint:Say(nLinha * nMsg, nColuna * 2 , aDados[27] , oFont8)  // "Campo livre sobre desconto"
    nMsg += 1.5
  EndIf

  If(!Empty(aDados[28]))
    oPrint:Say(nLinha * nMsg, nColuna * 2 , aDados[28] , oFont8)  // "Msg livre juros"
    nMsg += 1.5
  EndIf

  If(!Empty(aDados[29]))
    oPrint:Say(nLinha * nMsg, nColuna * 2 , aDados[29] , oFont8)  // "Msg livre multa"
    nMsg += 1.5
  EndIf
  

  If(!Empty(aDados[30]) .Or. (Len(aDados[15]) > 0 .And. !Empty(aDados[15][1])))
    cAuxMsg := aDados[30]
    If Empty(cAuxMsg)
      cAuxMsg := aDados[15][1]
    EndIf

    oPrint:Say(nLinha * nMsg, nColuna * 2 , cAuxMsg , oFont8)  // "Msg 1 Cadastro Mensagem da SEE"
    nMsg += 1.5
  EndIf

  If(!Empty(aDados[31]) .Or. (Len(aDados[15]) > 1 .And. !Empty(aDados[15][2])))
    cAuxMsg := aDados[31]
    If Empty(cAuxMsg)
      cAuxMsg := aDados[15][2]
    EndIf

    oPrint:Say(nLinha * nMsg, nColuna * 2 , cAuxMsg , oFont8)  // "Msg 2 Cadastro Mensagem da SEE"
    nMsg += 1.5
  EndIf

  If(!Empty(aDados[32]) .Or. (Len(aDados[15]) > 2 .And. !Empty(aDados[15][3])))
    cAuxMsg := aDados[32]
    If Empty(cAuxMsg)
      cAuxMsg := aDados[15][3]
    EndIf

    oPrint:Say(nLinha * nMsg, nColuna * 2 , cAuxMsg , oFont8)  // "Msg 3 Cadastro Mensagem da SEE"
    nMsg += 1.5
  EndIf

  /* Bloco de mensagem - Final */

  oPrint:Say      ( nLinha * 37 + nOffset, nColuna * 44  , '(-) ' + STR0030 , oFont8 ) // Desconto/Abatimento
  oPrint:SayAlign ( nLinha * 37 + nOffset, nColuna * 44.5, ""               , oFont10 , nColuna * 12, nLinha,, 1, 0) // Desconto
  oPrint:Say      ( nLinha * 42 + nOffset, nColuna * 44  , '(+) ' + STR0031 , oFont8 ) // Juros/Multa
  oPrint:SayAlign ( nLinha * 42 + nOffset, nColuna * 44.5, ""               , oFont10 , nColuna * 12, nLinha,, 1, 0) // Juros
  oPrint:Say      ( nLinha * 47 + nOffset, nColuna * 44  , '(=) ' + STR0032 , oFont8 ) // Valor Cobrado
  oPrint:SayAlign ( nLinha * 47 + nOffset, nColuna * 44.5, ""               , oFont10 , nColuna * 12, nLinha,, 1, 0) // Valor Cobrado
  // DESENHO F G H
  oPrint:Line ( nLinha * 36   + nOffset, nColuna * 43.5, nLinha * 48.5 + nOffset, nColuna * 43.5, CLR_BLACK ) // Linha Vertical
  oPrint:Line ( nLinha * 38.5 + nOffset, nColuna * 43.5, nLinha * 38.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
  oPrint:Line ( nLinha * 41   + nOffset, nColuna * 43.5, nLinha * 41   + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
  oPrint:Line ( nLinha * 43.5 + nOffset, nColuna * 43.5, nLinha * 43.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
  oPrint:Line ( nLinha * 46   + nOffset, nColuna * 43.5, nLinha * 46   + nOffset, 570           , CLR_BLACK ) // Linha Horizontal
  oPrint:Line ( nLinha * 48.5 + nOffset, nColuna       , nLinha * 48.5 + nOffset, 570           , CLR_BLACK ) // Linha Horizontal

  // LINE I
  oPrint:Say  ( nLinha * 49.5 + nOffset, nColuna * 2 , STR0036    , oFont8 ) // Pagador
  oPrint:Say  ( nLinha * 49.5 + nOffset, nColuna * 8 , SubStr(aDados[6],1,50)  , oFont10) 
  oPrint:Say  ( nLinha * 49.5 + nOffset, nColuna * 38, STR0019    , oFont8 ) // CPF/CNPJ
  oPrint:Say  ( nLinha * 49.5 + nOffset, nColuna * 42, aDados[7]  , oFont10) 
  oPrint:Say  ( nLinha * 50.5 + nOffset, nColuna * 2 , STR0045    , oFont8 ) // Endereço
  oPrint:Say  ( nLinha * 50.5 + nOffset, nColuna * 8 , SubStr(aDados[35],1,100)  , oFont10)
  oPrint:Say  ( nLinha * 51.5 + nOffset, nColuna * 8 , SubStr(aDados[36],1,100)  , oFont10)
  oPrint:Say  ( nLinha * 52.5 + nOffset, nColuna * 8 , SubStr(aDados[8],1,100)  , oFont10)
  oPrint:Say  ( nLinha * 53.5 + nOffset, nColuna * 2 , STR0009    , oFont8 ) // Beneficiário Final
  oPrint:Say  ( nLinha * 53.5 + nOffset, nColuna * 38, STR0019    , oFont8 ) // CPF/CNPJ

  oPrint:Line ( nLinha * 54 + nOffset, nColuna    , nLinha * 54 + nOffset, 570, CLR_BLACK ) // Linha Horizontal
  // LINE J
  oPrint:SayAlign ( nLinha * 54 + nOffset, nColuna * 44.5, STR0034, oFont11, nColuna * 12, nLinha,, 1, 0) // Ficha de Compensação
  oPrint:SayAlign ( nLinha * 55 + nOffset, nColuna * 44.5, STR0017, oFont8 , nColuna * 12, nLinha,, 1, 0) // Autenticação Mecânica

  // CÓDIGO DE BARRAS
  oPrint:FWMsBar("INT25", (46 + (nOffset * (42/500))), 2,aDados[12],oPrint,.F.,CLR_BLACK,.T.,0.025,0.8,.F.,,,.F.,,,.F.)
  If !Empty(aDados[37])
    oPrint:Say( nLinha * 57 + nOffset, nColuna * 46, STR0050, oFont8)  // 'Pague com Pix'
    oPrint:QRCode(nLinha * 68.5 + nOffset  , nColuna * 46 ,aDados[37], 110 )
  EndIf
  oPrint:EndPage()

  FreeObj(oData)
  FreeObj(oFont8)
  FreeObj(oFont10)
  FreeObj(oFont11)
  FreeObj(oFont15)
  FreeObj(oFont14n)
  FwFreeArray(aDados)

Return 

/*/{Protheus.doc} getBolPdf
  Gera o ped com os boletos
  @type function
  @version  12.1.33
  @author renato.ito
  @since 07/05/2021
  @param aBoletos, Array, boletos
  @return Character, caminho do arquivo pdf
/*/
Static Function DirBol() As Character

  Local cDir          As Character
  Local cSeparator    As Character

  If IsSrvUnix()
    cSeparator := "/"
  Else
    cSeparator := "\"
  EndIf

  cDir := cSeparator + 'spool' + cSeparator + 'boletos' + cSeparator + Lower(cEmpAnt) + cSeparator

  If !ExistDir( cDir )
    // criar diretório \spool\boletos
    If !ExistDir(cSeparator + 'spool' + cSeparator + 'boletos')
      MakeDir( cSeparator + 'spool' + cSeparator + 'boletos' )
    EndIf
    // criar diretório \spool\boletos\'Empresa'
    If !ExistDir(cSeparator + 'spool' + cSeparator + 'boletos' + cSeparator + Lower(cEmpAnt))
      MakeDir( cSeparator + 'spool' + cSeparator + 'boletos' + cSeparator + Lower(cEmpAnt) )
    EndIf
  EndIf

Return cDir

/*/{Protheus.doc} formatMsgTicket
    Realiza a formatação das mensagens no boleto, respeitando as regras pré-definidas em cada banco
    @type  Function
    @author Vitor Duca
    @since 19/05/2023
    @version 1.0
    @param cFebraban, Character, Codigo do banco febraban
    @param oPrint, Object, Objeto de impressão do boleto (FwMsPrinter)
    @param nLinha, Numeric, linha posicionada no pdf
    @param nColuna, Numeric, Coluna posicionada no pdf
    @param nCoord, Numeric, Variavel utilizada para pular a linha
    @param cMsg, Character, Mensagem que sera impressa no boleto
    @param oFont, Objeto, Objeto TFont que sera utilizado na mensagem
    @paramn SizeMax, Tamanho maximo de caracteres que podem ser utilizados em uma linha
/*/
Function formatMsgTicket(cFebraban As Character,;
                          oPrint As Object,;
                          nLinha As Numeric,; 
                          nColuna As Numeric,;
                          nCoord As Numeric,;
                          cMsg As Character,;
                          oFont As Object,;
                          nSizeMax As Numeric)
  Local nLimit := 0 As Numeric
  Local nX := 0 As Numeric
  Local nDiff := 0 As Numeric
  Local nSizeIni := 1 As Numeric

  Default cFebraban := ""
  Default oPrint := NIL
  Default nLinha := 0
  Default nColuna := 0
  Default nCoord := 0
  Default cMsg := ""
  Default oFont := NIL
  Default nSizeMax := 0

  if !Empty(AllTrim(cMsg))
    //Limite da mensagem seguindo as documentações dos bancos 
    Do Case
      Case cFebraban == "001"
        nLimit := 165
    End Case    

    If Len(cMsg) > nSizeMax // Verifica se o tamanho da mensagem é maior que o tamanho maximo permitido na linha
      nDiff := Round(nLimit / nSizeMax, 0)
      For nX := 1 to nDiff
        oPrint:Say(nLinha * nCoord, nColuna * 2 , LTrim(Substr(cMsg, nSizeIni, nSizeMax)), oFont)
        nSizeIni += nSizeMax
        nCoord += 1

        If nX == nDiff //Pula linha caso tenha terminado de quebrar a mensagem
          nCoord += 1
          Exit
        Endif
      Next nX  
    Else
      oPrint:Say(nLinha * nCoord, nColuna * 2 , Substr(cMsg, 1, nSizeMax), oFont)
      nCoord += 1.5
    Endif
  Else
    nCoord += 1
  Endif

Return
