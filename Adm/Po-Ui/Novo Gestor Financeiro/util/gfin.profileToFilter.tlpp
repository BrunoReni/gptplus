#include 'tlpp-core.th'

namespace gfin.util
/*/{Protheus.doc} profileToFilter
    Efetua a leitura das configurações de Profile e converte em filtro legível em query ANSI

    @type  Function
    @author alison.kaique
    @since 17/06/2021
    @version 12.1.33

    @param cUser   , character, código do usuário
    @param cProgram, character, código do programa
    @param cTask   , character, código da tarefa
    @param cType   , character, tipo de Profile

    @return cFilter, character, Filtro convertido a partir do Profile
/*/
Function profileToFilter(cUser As Character, cProgram As Character, cTask As Character, cType As Character) As Character
    Local cFilter  As Character
    Local cContent As Character
    Local nIndex   As Numeric
    Local oJson    As JSon

    cFilter := ""

    // verifica se o profile existe o Profile
    If (FindProfDef(cUser, cProgram, cTask, cType))
        cContent := RetProfDef(cUser, cProgram, cTask, cType)
    EndIf

    If !(Empty(cContent))
        oJson := JsonObject():New()

        If (Empty(oJson:fromJson(cContent)))
            // percorrendo os filtros
            For nIndex := 01 To Len(oJson)
                // verifica se possui os atributos 'filter' e 'enable'
                If (ValType(oJson[nIndex]['filter']) == "C" .AND. ValType(oJson[nIndex]['enable']) == "L")
                    // verifica se está ativo
                    If (oJson[nIndex]['enable'])
                        // verifica se possui mais de um filtro para adicionar o operador AND
                        If (nIndex > 1 .AND. !Empty(cFilter))
                            cFilter += " AND "
                        EndIf

                        // incrementando o filtro
                        cFilter += "(" + AllTrim(oJson[nIndex]['filter']) + ")"
                    EndIf
                EndIf
            Next nIndex
        EndIf

        If !(Empty(cFilter))
            cFilter := transformFilter(cFilter)
        EndIf
    EndIf
Return cFilter

/*/{Protheus.doc} transformFilter
    Transforma o filtro conforme TAGS pré-estabelecidas

    @type  Function
    @author alison.kaique
    @since 21/06/2021
    @version 12.1.33

    @param cFilter, character, Filtro convertido a partir do Profile

    @return cTransformedFilter, character, Filtro transformado
/*/
Static Function transformFilter(cFilter As Character) As Character
    Local cTransformedFilter As Character
    Local cCurrentYear       As Character
    Local nDayOfWeek         As Numeric
    Local dSunday            As Date

    cTransformedFilter := cFilter
    nDayOfWeek         := DOW(dDataBase)

    // valida se possui as TAGS pré-estabelecidas

    // hoje
    If ('TODAY' $ cTransformedFilter)
        cTransformedFilter := StrTran(cTransformedFilter, 'TODAY', "= '" + DToS(dDataBase) + "'")
    EndIf

    // ontem
    If ('YESTERDAY' $ cTransformedFilter)
        cTransformedFilter := StrTran(cTransformedFilter, 'YESTERDAY', "= '" + DToS(DaySub(dDataBase, 01)) + "'")
    EndIf

    // amanhã
    If ('TOMORROW' $ cTransformedFilter)
        cTransformedFilter := StrTran(cTransformedFilter, 'TOMORROW', "= '" + DToS(DaySum(dDataBase, 01)) + "'")
    EndIf

    // próximo mês
    If ('NEXT_MONTH' $ cTransformedFilter)
        cTransformedFilter := StrTran(cTransformedFilter, 'NEXT_MONTH', "BETWEEN '" + DToS(FirstDay(MonthSum(dDataBase, 01))) +;
            "' AND '" + DToS(LastDay(MonthSum(dDataBase, 01))) + "'")
    EndIf

    // último mês
    If ('LAST_MONTH' $ cTransformedFilter)
        cTransformedFilter := StrTran(cTransformedFilter, 'LAST_MONTH', "BETWEEN '" + DToS(FirstDay(MonthSub(dDataBase, 01))) +;
            "' AND '" + DToS(LastDay(MonthSub(dDataBase, 01))) + "'")
    EndIf

    // próximo ano
    If ('NEXT_YEAR' $ cTransformedFilter)
        cCurrentYear := Left(DToS(YearSum(dDataBase, 01)), 04)
        cTransformedFilter := StrTran(cTransformedFilter, 'NEXT_YEAR', "BETWEEN '" + cCurrentYear + '0101' +;
            "' AND '" + cCurrentYear + '1231' + "'")
    EndIf

    // último ano
    If ('LAST_YEAR' $ cTransformedFilter)
        cCurrentYear := Left(DToS(YearSub(dDataBase, 01)), 04)
        cTransformedFilter := StrTran(cTransformedFilter, 'LAST_YEAR', "BETWEEN '" + cCurrentYear + '0101' +;
            "' AND '" + cCurrentYear + '1231' + "'")
    EndIf

    // próxima semana
    If ('NEXT_WEEK' $ cTransformedFilter)
        // calcula quando será o próximo domingo
        dSunday := DaySum(dDataBase, ABS(2 - nDayOfWeek))
        cTransformedFilter := StrTran(cTransformedFilter, 'NEXT_WEEK', "BETWEEN '" + DToS(dSunday) + "' AND '" + DToS(DaySum(dSunday, 07)) + "'")
    EndIf

    // última semana
    If ('LAST_WEEK' $ cTransformedFilter)
        // calcula quando foi o último domingo
        dSunday := DaySub(dDataBase, ABS(1 - nDayOfWeek))
        cTransformedFilter := StrTran(cTransformedFilter, 'LAST_WEEK', "BETWEEN '" + DToS(DaySub(dSunday, 07)) + "' AND '" + DToS(DaySub(dSunday, 01)) + "'")
    EndIf

    // nesta semana
    If ('THIS_WEEK' $ cTransformedFilter)
        cTransformedFilter := StrTran(cTransformedFilter, 'THIS_WEEK', "BETWEEN '" + DToS(DaySub(dDataBase, ABS(1 - nDayOfWeek))) +;
            "' AND '" + DToS(DaySum(dDataBase, 7 - nDayOfWeek)) + "'")
    EndIf

    // neste mês
    If ('THIS_MONTH' $ cTransformedFilter)
        cTransformedFilter := StrTran(cTransformedFilter, 'THIS_MONTH', "BETWEEN '" + DToS(FirstDay(dDataBase)) +;
            "' AND '" + DToS(LastDay(dDataBase)) + "'")
    EndIf

    // neste ano
    If ('THIS_YEAR' $ cTransformedFilter)
        cCurrentYear := Left(DToS(dDataBase), 04)
        cTransformedFilter := StrTran(cTransformedFilter, 'THIS_YEAR', "BETWEEN '" + cCurrentYear + '0101' +;
            "' AND '" + cCurrentYear + '1231' + "'")
    EndIf

    // últimos x dias
    If ('LAST_X_DAYS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'LAST_X_DAYS', 'SUB', 'DAY')
    EndIf

    // últimos x meses
    If ('LAST_X_MONTHS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'LAST_X_MONTHS', 'SUB', 'MONTH')
    EndIf

    // últimos x anos
    If ('LAST_X_YEARS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'LAST_X_YEARS', 'SUB', 'YEAR')
    EndIf

    // últimas x semanas
    If ('LAST_X_WEEKS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'LAST_X_WEEKS', 'SUB', 'WEEK')
    EndIf

    // próximos x dias
    If ('NEXT_X_DAYS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'NEXT_X_DAYS', 'SUM', 'DAY')
    EndIf

    // próximos x meses
    If ('NEXT_X_MONTHS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'NEXT_X_MONTHS', 'SUM', 'MONTH')
    EndIf

    // próximos x anos
    If ('NEXT_X_YEARS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'NEXT_X_YEARS', 'SUM', 'YEAR')
    EndIf

    // próximas x semanas
    If ('NEXT_X_WEEKS' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'NEXT_X_WEEKS', 'SUM', 'WEEK')
    EndIf

    // diferença data base menor que x dias
    If ('BACK_BASEDATE' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'BACK_BASEDATE', 'SUB', 'BASE_DATE')
    EndIf

    // diferença data base maior que x dias
    If ('FOWARD_BASEDATE' $ cTransformedFilter)
        cTransformedFilter := calcPeriod(cTransformedFilter, 'FOWARD_BASEDATE', 'SUM', 'BASE_DATE')
    EndIf
Return cTransformedFilter

/*/{Protheus.doc} calcPeriod
    Transforma o filtro conforme TAGS pré-estabelecidas (por período)

    @type  Function
    @author alison.kaique
    @since 21/06/2021
    @version 12.1.33

    @param cFilter, character, Filtro convertido a partir do Profile
    @param cTag   , character, Id da TAG

    @return cTransformedFilter, character, Filtro transformado
/*/
Static Function calcPeriod(cFilter As Character, cTag As Character, cOperator As Character, cType As Character) As Character
    Local cTransformedFilter As Character
    Local cTagValue          As Character
    Local cPeriod            As Character
    Local nValue             As Numeric
    Local nInitialPosition   As Numeric
    Local nFinalPosition     As Numeric
    Local nTagSize           As Numeric

    cTransformedFilter := cFilter
    nTagSize           := Len(cTag)

    // percorre enquanto existe
    While (cTag $ cTransformedFilter)
        // localiza a posição inicial do contéudo
        nInitialPosition := At(cTag, cTransformedFilter) + nTagSize
        nFinalPosition   := At('|', SubStr(cTransformedFilter, nInitialPosition)) - 01

        // recupera o valor da TAG
        If (nInitialPosition > 0 .AND. nFinalPosition > 0)
            cTagValue := AllTrim(SubStr(cTransformedFilter, nInitialPosition, nFinalPosition))
            nValue    := Val(cTagValue)

            // retira o valor
            cTransformedFilter := StrTran(cTransformedFilter, SubStr(cTransformedFilter, nInitialPosition, nFinalPosition + 01), "")
        EndIf

        If (nValue > 0)
            If (cOperator == 'SUM') // soma
                Do Case
                    Case (cType == 'DAY')
                        cPeriod := "BETWEEN '" + DToS(dDataBase) + "' AND '" + DToS(DaySum(dDataBase, nValue)) + "'"
                    Case (cType == 'MONTH')
                        cPeriod := "BETWEEN '" + DToS(dDataBase) + "' AND '" + DToS(MonthSum(dDataBase, nValue)) + "'"
                    Case (cType == 'YEAR')
                        cPeriod := "BETWEEN '" + DToS(dDataBase) + "' AND '" + DToS(YearSum(dDataBase, nValue)) + "'"
                    Case (cType == 'WEEK')
                        cPeriod := "BETWEEN '" + DToS(dDataBase) + "' AND '" + DToS(DaySum(dDataBase, nValue * 7)) + "'"
                    Case (cType == 'BASE_DATE')
                        cPeriod := ">= '" + DToS(DaySum(dDataBase, nValue)) + "'"
                    OtherWise
                        cPeriod := ""
                EndCase
            Else // subtração
                Do Case
                    Case (cType == 'DAY')
                        cPeriod := "BETWEEN '" + DToS(DaySub(dDataBase, nValue)) + "' AND '" + DToS(dDataBase) + "'"
                    Case (cType == 'MONTH')
                        cPeriod := "BETWEEN '" + DToS(MonthSub(dDataBase, nValue)) + "' AND '" + DToS(dDataBase) + "'"
                    Case (cType == 'YEAR')
                        cPeriod := "BETWEEN '" + DToS(YearSub(dDataBase, nValue)) + "' AND '" + DToS(dDataBase) + "'"
                    Case (cType == 'WEEK')
                        cPeriod := "BETWEEN '" + DToS(DaySub(dDataBase, nValue * 7)) + "' AND '" + DToS(dDataBase) + "'"
                    Case (cType == 'BASE_DATE')
                        cPeriod := "<= '" + DToS(DaySub(dDataBase, nValue)) + "'"
                    OtherWise
                        cPeriod := ""
                EndCase
            EndIf
        Else
            cPeriod := ""
        EndIf

        If !(Empty(cPeriod))
            cTransformedFilter := StrTran(cTransformedFilter, cTag, cPeriod)
        Else
            cTransformedFilter := StrTran(cTransformedFilter, cTag, "IS NULL")
        EndIf
    EndDo
Return cTransformedFilter

/*/{Protheus.doc} getProfileUser
    Retorna informação especifica do profile do usuario

    @type  Function
    @author Francisco Oliveira
    @since 05/12/2022
    @version 12.1.33

    @param cUserId   , character, ID do usuario / exemplo: __cUserId
    @param cEnviron  , character, Ambiente usado pelo usuario / exemplo: "NGF " 
    @param cMenuUsed , character, Menu em que esta navegando no NGF / exemplo: CashFlow
    @param cFilter   , character, Filter a ser enviado / exemplo: Filter
    @param cVarSearch, character, Variavel a ser pesquisa no profile / exemplo: considersAPL

    @return cProfile, character, Resultado da busca a ser retornado para a função
/*/

Function getProfileUser(cUserId As Character, cEnviron As Character, cMenuUsed As Character, cFilter As Character, cVarSearch As Character ) As Character

    Local cContent  := "" As Character
    Local cProfile  := "" As Character
    Local oJson           As Json  

    If (FindProfDef(cUserId, cEnviron, cMenuUsed, cFilter))
        cContent := RetProfDef(cUserId, cEnviron, cMenuUsed, cFilter)
    EndIf

    If !(Empty(cContent))
        oJson := JsonObject():New()
        If (Empty(oJson:fromJson(cContent)))
            cProfile := oJson[cVarSearch]
        Endif
    Endif

Return cProfile
