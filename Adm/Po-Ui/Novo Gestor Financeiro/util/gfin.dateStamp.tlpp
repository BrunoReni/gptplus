#include 'tlpp-core.th'

namespace gfin.util
//--------------------------------------------------------------------
/*/
{Protheus.doc} dateISO
formata a string de data do protheus no formato ISO yyyy-MM-dd

@Input date As Character, string de data a ser convertida no formato yyyymmdd

@Return newDate As Character, string de data formatada yyyy-MM-dd

@author Renato Ito
@since 08/12/2020
/*/
//--------------------------------------------------------------------
Function stringDateToISO(date As Character) As Character

	Local newDate As Character
	newDate := SubStr(date, 1, 4) + '-' + SubStr(date, 5, 2) + '-' + SubStr(date, 7, 2)

Return newDate

//-------------------------------------------------------------------
/*/
{Protheus.doc} formatDate
Formata a data

@param paramDate as Character, data em string
@Return paramDate as Date, data formatada

@author Renato Ito
@since 25/02/2021
/*/
//-------------------------------------------------------------------
Function formatDate(paramDate as Character, lUseToday as Logical) as Date
  Local returnDate As Date
  Local dToday As Date

  dToday := Iif(lUseToday, CToD( '//' ), Nil)
  
  If !(Empty(paramDate))
    paramDate := StrTran(paramDate, '-', '')
    returnDate := StoD(paramDate)
    returnDate := IIf(empty(returnDate), dToday, returnDate)
  Else
    returnDate := dToday
  EndIf
Return returnDate

//-------------------------------------------------------------------
/*/
{Protheus.doc} stringIsoToDate
Converte string no formato ISO (yyyy-MM-dd) para o tipo Date.

@param dateIso as Character, data em string formato ISO
@Return dNewDate as Date, data formatada

@author Vinicius do Prado
@since 14/03/2022
/*/
//-------------------------------------------------------------------
Function stringIsoToDate(dateIso As Character)
  Local aMatriz := {} As Array
  Local dNewDate As Date

  aMatriz := fwDateTimeToLocal(dateIso)
  dNewDate := aMatriz[1]
Return dNewDate

//-------------------------------------------------------------------
/*/
{Protheus.doc} jsonStringToDate
Converte string no formato json (yyyy-M-d ou yyyy-MM-d ou yyyy-M-dd ou yyyy-MM-dd) para o formato utilizado no Banco de Dados.

@param json date as Character, data em string formato json de uma API
@Return Character, data formatada (yyyyMMdd)

@author Daniel Muniz (daniel.muniz)
@since 22/08/2022
/*/
//-------------------------------------------------------------------
Function jsonStringToIso(cData As Character) As Character 
Return SubStr(cData, 1, 4) + PadL(StrTran(SubStr(cData, 6, 2), '-', ''), 2, '0') + PadL(StrTran(SubStr(cData, 8, 3), '-', ''), 2, '0')

/*/{Protheus.doc} GetDBTimeStamp
  Retorna a data correspondente ao STAMP do servidor de banco de dados
  @type  Function
  @author Vitor Duca
  @since 14/09/2022
  @version 1.0
  @param cBDName, Character, Qual banco de dados esta sendo utilizado
  @return cTimeStamp, Character, Data STAMP em formato UTC 
  @example
  GetDBTimeStamp("ORACLE")
/*/
Function GetDBTimeStamp(cBDName As Character) As Character    
  Local cQuery as character    
  Local cTimeStamp as character    

  Do Case   
    Case "ORACLE" $ cBDName            
      cQuery := " SELECT TO_CHAR( SYS_EXTRACT_UTC(SYSTIMESTAMP), '" + 'yyyy-mm-dd"T"HH24:MI:SS"Z"'+ "') AS TIME_STAMP FROM DUAL"        
    Case "POSTGRES" $ cBDName            
      cQuery := " SELECT TO_CHAR( TIMEZONE('utc', now()), '" + 'YYYY-MM-DD"T"HH24:MI:SS"Z"'+ "') AS TIME_STAMP FROM TOP_FIELD LIMIT 1"        
    OtherWise            
      cQuery := " SELECT CONVERT(varchar, GetUtcDate() , 127) AS TIME_STAMP"    
  EndCase

  cTimeStamp := AllTrim( MPSysExecScalar( cQuery, "TIME_STAMP" ) )

Return SubStr(cTimeStamp, 1, 19) //Retira os milisegundos
