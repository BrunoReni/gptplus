#include 'tlpp-core.th'

#DEFINE X9_DOM 1
#DEFINE X9_CDOM 3 
#DEFINE X9_EXPDOM 2 
#DEFINE X9_EXPCDOM 4 
#DEFINE X9_USEFIL 5 

NAMESPACE totvs.protheus.backoffice.ngf.util

/*/{Protheus.doc} BranchRelation
	Realiza o tratamento de relacionamento entre as filiais
	@type  Function
	@author Vitor Duca
	@since 28/04/2022
	@version 1.0
	@param aAliasFather, Array, Matriz que contem as informações da tabela pai no relacionamento
		[1] = Tabela que sera utilizada no relacionamento
		[2] = Campo FILIAL da tabela
		[3] = Alias que esta sendo usado como referencia a tabela na query

	@param aAliasSon, Array, Matriz que contem as informações da tabela filho no relacionamento
		[1] = Tabela que sera utilizada no relacionamento
		[2] = Campo FILIAL da tabela
		[3] = Alias que esta sendo usado como referencia a tabela na query

	@return cRetRelation, Character, String contendo o relacionamento da filial entre as tabelas
	@example
	BranchRelation( {"SD2","D2_FILIAL","SD2NF"}, {"SB1","B1_FILIAL","SB1PROD"} ) 
/*/
Function BranchRelation(aAliasFather As Array, aAliasSon As Array) As Character
	Local cRetRelation :=  "" As Character
	Local cSubs     := "" As Character
    Local cIsNull := "" As Character
	Local nSizeFather := 0 As Numeric
	Local nSizeSon := 0 As Numeric
    Local cBDName := Alltrim(TcGetDB()) As Character
	Local nSizeBranchSystem := TAMSX3("E2_FILIAL")[1] As Numeric 

    If !Empty(aAliasFather) .and. !Empty(aAliasSon)
        cSubs 	:= FunctionToDb(cBDName, "SUBSTRING")
        cIsNull := FunctionToDb(cBDName, "ISNULL")

        nSizeFather := Len(AllTrim(xFilial(aAliasFather[1])))
        nSizeSon := Len(Alltrim(xFilial(aAliasSon[1])))

        DO CASE
            CASE nSizeFather == nSizeSon
                cRetRelation  := aAliasSon[3] + "." + aAliasSon[2] + " = " + aAliasFather[3] + "." + aAliasFather[2]
            CASE nSizeFather > nSizeSon
                cRetRelation  := cIsNull + "("+cSubs + "  ( " + aAliasFather[3] + "." + aAliasFather[2] + " ,1 ," + cValToChar(nSizeSon)+" ),'" + Space(nSizeBranchSystem) + "') = " 
                cRetRelation  += cIsNull + "("+cSubs + "  ( " + aAliasSon[3] + "." + aAliasSon[2] + " ,1 ," + cValToChar(nSizeSon)+" ),'" + Space(nSizeBranchSystem) + "')"
            OTHERWISE
                cRetRelation  := cIsNull + "("+cSubs + "  ( " + aAliasSon[3] + "." + aAliasSon[2] + " ,1 ," + cValToChar(nSizeFather)+" ),'" + Space(nSizeBranchSystem) + "') = "  
                cRetRelation  += cIsNull + "("+cSubs + "  ( " + aAliasFather[3] + "." + aAliasFather[2] + " ,1 ," + cValToChar(nSizeFather)+" ),'" + Space(nSizeBranchSystem) + "') "
        END CASE
    Endif    

Return cRetRelation

/*/{Protheus.doc} FunctionToDb
    Converte a função/sintaxe que existe no SQL server para outros bancos
    @type  Static Function
    @author Vitor Duca
    @since 28/04/2022
    @version 1.0
    @param cBDName, Character, Banco de dados do ambiente - tcGetdb()
    @param cFunSQL, Character, Nome da função existente no SQL Server
    @return cRet, Character , String que pode ser utilizada na montagem da query
    @example
    cFunction := FunctionToDb("DATEDIFF",{"BAIXA","VENCREA"})
/*/
Function FunctionToDb(cBDName As Character, cFunSQL As Character) As Character
    Local cRet := "" As Character

    If !Empty(cFunSQL) .and. !Empty(cBDName)
        cFunSQL := UPPER(AllTrim(cFunSQL))
        cRet := cFunSQL

        Do CASE
            CASE cFunSQL == "ISNULL"
                If cBDName == "ORACLE"
                    cRet := "NVL"
                Elseif cBDName == "POSTGRES"
                    cRet := "COALESCE"
                ENDIF
            CASE cFunSQL == "SUBSTRING"
                If cBDName $ "ORACLE|POSTGRES"
                    cRet := "SUBSTR"
                Endif
            CASE cFunSQL == "INSERT"
                If cBDName $ "ORACLE"
                    cRet := " INSERT /*+ APPEND */ "
                Endif  
        End CASE
    Endif

Return cRet

/*/{Protheus.doc} GetJoinSX9
  Verifica e retorna a relação entre duas tabelas
  @type  Function
  @author Vitor Duca
  @since 14/03/2022
  @version 1.0
  @param cParentAlias, Character, Alias pai do relacionamento
  @param cChildAlias, Character, Alias filho do relacionamento
  @return cJoinKey, Character, Relacionamento entre as tabelas para ser utilizado em Join
/*/
Function GetJoinSX9(cParentAlias As Character, cChildAlias As Character) As Character
  Local aSX9Util := {} As Array 
  Local cJoinKey := "" As Character
  Local nCount := 0 As Numeric
  Local lBranch := .F. As Logical
  Local nPosicionSX9 := 0 As Numeric
  Local nBranchParentAlias := 0 As Numeric
  Local nBranchChildAlias  := 0 As Numeric
  Local cBranchParentAlias := "" As Character
  Local cBranchChildAlias  := "" As Character

  If FWSX9Util():SearchX9Paths( cParentAlias, cChildAlias, @aSX9Util)

    /*
      A Classe FwSx9Util, pode retornar os relacionamentos ate o terceiro nivel como informa a doc
      https://tdn.totvs.com/display/framework/FWSX9Util, sendo assim devemos verificar em qual posicão
      da matriz esta o relacionamento desejado atraves do cParentAlias
    */
    For nCount := 1 To len(aSX9Util)
      If Alltrim(aSX9Util[nCount][X9_DOM]) == Alltrim(cParentAlias)
        nPosicionSX9 := nCount
        Exit
      Endif
    Next nCount

    aParentAlias := STRTOKARR( aSX9Util[nCount][X9_EXPDOM], "+" )
    aChildAlias := STRTOKARR( aSX9Util[nCount][X9_EXPCDOM], "+" )
    lBranch := UPPER(aSX9Util[nPosicionSX9][X9_USEFIL]) == "S"

    For nCount := 1 to Len(aParentAlias)

      If nCount > 1
        cJoinKey += " AND "
      Else
        /*
          Tratamento para filial X9_USEFIL
        */
        If lBranch
          nBranchParentAlias := aT("_", aParentAlias[1]) - 1
          nBranchChildAlias := aT("_", aChildAlias[1]) - 1
          cBranchParentAlias := Substr(aSX9Util[nPosicionSX9][X9_DOM], 2, nBranchParentAlias)
          cBranchChildAlias := Substr(aSX9Util[nPosicionSX9][X9_CDOM], 2, nBranchChildAlias)

          If nBranchParentAlias == 3 
            cBranchParentAlias := Substr(aSX9Util[nPosicionSX9][X9_DOM], 1, nBranchParentAlias)
          Endif
            
          If nBranchChildAlias == 3
            cBranchChildAlias := Substr(aSX9Util[nPosicionSX9][X9_CDOM], 1, nBranchChildAlias)
          Endif

          cJoinKey += cBranchParentAlias + "_FILIAL" + " = " + cBranchChildAlias + "_FILIAL AND "
        Endif

      Endif
      cJoinKey += Alltrim(aParentAlias[nCount]) + " = " + Alltrim(aChildAlias[nCount])
    
    Next nCount
  Endif

Return AllTrim(cJoinKey)
