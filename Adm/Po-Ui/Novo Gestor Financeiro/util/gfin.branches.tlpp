#include 'tlpp-core.th'

NAMESPACE gfin.util

/*/{Protheus.doc} branchesOfUser
  Função para retornar as filiais que o usuário tem acesso.
  @type function
  @version 12.1.33
  @author richard.lopes
  @since 07/10/2020
  @return Object, jSon filiais de acesso do usuário
/*/
Function branchesOfUser()
	Local nGrupo         as Numeric
	Local nGrpFil        as Numeric
	Local aBranches      as Array
	Local aPswUser       as Array
	Local aPswGrp        as Array
	Local aFiliais       as Array
	Local cGrpRule       as Character
	Local aFilUser := {} as Array
	Local nFil     := 0  as Numeric

	PswOrder(1)
	PswSeek(__cUserId, .T.)

	aPswUser  := PswRet()
	aBranches := {}
	aPswGrp   := {}
	aFiliais  := {}
	aGrpFil   := {}
	cGrpRule  := AllTrim(FWUsrGrpRule(__cUserId))

	If cGrpRule $ "1|3"                     // Prioriza grupo ou soma
		For nGrupo := 1 To Len(aPswUser[1][10])             // [1][10] A Vetor com os grupos, adiciona as filiais do grupo
			If PswSeek(aPswUser[1][10][nGrupo], .F.)          // Pesquisa o(s) Grupo(s) que o Usuario participa
				aPswGrp := FwGrpEmp(aPswUser[1][10][nGrupo])
				For nGrpFil := 1 To Len(aPswGrp)
				aAdd(aGrpFil, aPswGrp[nGrpFil])
				Next nGrpFil
			EndIf
		Next nGrupo
		If cGrpRule $ "1"
			aFiliais := aGrpFil
		EndIf
	ElseIf cGrpRule == "2"                // Desconsiderar
		aFilUser := FWLoadSM0( .T. , .T. )
		For nFil := 1 To Len(aFilUser)
			If aFilUser[nFil][11]
				AAdd(aFiliais, aFilUser[nFil][1] + aFilUser[nFil][2])
			EndIf
		Next nFil
	EndIf

	If cGrpRule == "3"                    // Somar
		aFiliais  := AClone(aPswUser[2][6])
		If Empty(aFiliais)
			If !Empty(aGrpFil)
				aFiliais := aGrpFil
			Else
				Aadd(aFiliais, cEmpAnt+cFilAnt)
			EndIf
		Else
			If !aFiliais[1] == "@@@@" .And. !Empty(aGrpFil)       // usuário não possui acesso a todas filiais e existe filiais configuradas no grupo
				For nGrpFil := 1 To Len(aGrpFil)                    // regra para não duplicar
					If AScan(aFiliais, { |x| x $ aGrpFil[nGrpFil]}) == 0
						Aadd(aFiliais, aGrpFil[nGrpFil])
					EndIf
				Next nGrpFil
			EndIf
		EndIf
	EndIf

	If Empty(aFiliais)
		Aadd(aFiliais, cEmpAnt+cFilAnt)
	EndIf
	aBranches := definitionOfCompany(aFiliais)

Return arrayToJson(aBranches)

/*/{Protheus.doc} definitionOfCompany
  Função para formatar As filiais que o usuário tem acesso.
  @type function
  @version 12.1.33
  @author richard.lopes
  @since 07/10/2020
  @param branchesInfo, array, filiais
  @return Array, array com informações das filiais
  {
    "branchId": string,
    "totalId": string,
    "companyId": string,
    "unitId": string,
    "companyName": string,
    "unitName": string,
    "branchName": string
  }
/*/
Function definitionOfCompany(aBranchesInfo As Array) As Array
	Local nFil         as Numeric
	Local nLenBranch   as Numeric
	Local nLenCompany  as Numeric
	Local nLenUnit     as Numeric
	Local nLenBranchId as Numeric
	Local cLayout      as Character
	Local cCompanyName as Character
	Local cUnitName    as Character
	Local cBranchName  as Character
	Local cCgcEmp      as Character
	Local cMaskCGC     as Character
	Local aSM0         as Array
	Local aBranches    as Array
	Local nLenEmp      as Numeric

	nLenBranch   := FWSizeFilial()
	nLenCompany  := Len(FWSM0Layout(, 1))
	nLenUnit     := Len(FWSM0Layout(, 2))
	nLenBranchId := Len(FWSM0Layout(, 3))
	aBranches    := {}
	nLenEmp      := Len(cEmpAnt)

	If aBranchesInfo[1] == "@@@@"
		aSM0 := FwLoadSM0()
		For nFil := 1 To Len(aSM0)
			If aSM0[nFil][1] == cEmpAnt
				cLayout  := aSM0[nFil][2]
				cCgcEmp  := AllTrim(aSM0[nFil][18])
				cMaskCGC := CgcMask(cCgcEmp)
				aAdd(aBranches, {;
				{"companyId"        , Substr(cLayout, 1, nLenCompany)},;
				{"unitId"           , Substr(cLayout, nLenCompany + 1, nLenUnit)},;
				{"branchId"         , Substr(cLayout, nLenCompany + nLenUnit + 1, nLenBranchId)},;
				{"totalId"          , cLayout},;
				{"companyName"      , AllTrim(aSM0[nFil][19])},;
				{"unitName"         , AllTrim(aSM0[nFil][2])},;
				{"branchName"       , AllTrim(aSM0[nFil][7])},;
				{"EnterpriseGroup"  , AllTrim(aSM0[nFil][1])},;
				{"cnpjCpf"          , Transform(cCgcEmp, cMaskCGC)};
				})
			EndIf
		Next nFil
	Else
		For nFil := 1 To Len(aBranchesInfo)
			cLayout := aBranchesInfo[nFil]
			If SubStr(cLayout, 1, nLenEmp) == cEmpAnt
				cLayout := SubStr(cLayout, nLenEmp + 1)   // "D MG 01 "
				cLayout := PadR(cLayout, nLenBranch)      // ajusta o tamanho da filial
				If ASCAN(aBranches, { |x| x[4][2] $ cLayout }) == 0
					cCompanyName := AllTrim(FWCompanyName(cEmpAnt, cLayout))
					cUnitName    := AllTrim(FWUnitName(cEmpAnt, cLayout))
					cBranchName  := AllTrim(FWFilialName(cEmpAnt, cLayout))
					cCgcEmp      := AllTrim(FWSM0Util():GetSM0Data(cEmpAnt, cLayout , {'M0_CGC'})[1][2])
					cMaskCGC     := CgcMask(cCgcEmp)
					aAdd(aBranches, {;
					{"companyId"        , Substr(cLayout, 1, nLenCompany)},;
					{"unitId"           , Substr(cLayout, nLenCompany + 1, nLenUnit)},;
					{"branchId"         , Substr(cLayout, nLenCompany + nLenUnit + 1, nLenBranchId)},;
					{"totalId"          , cLayout},;
					{"companyName"      , cCompanyName},;
					{"unitName"         , cUnitName},;
					{"branchName"       , cBranchName},;
					{"EnterpriseGroup"  , cEmpAnt},;
					{"cnpjCpf"          , Transform(cCgcEmp, cMaskCGC)};
					})
				EndIf
			EndIf
		Next nFil
	EndIf
Return aBranches

/*/{Protheus.doc} branchesFormatToIn
  ajusta o um array de filiais conforme o compartilhamento da tabela para uso em query
  @type function
  @version 12.1.33
  @author renato.ito
  @since 12/11/2020
  @param branches, array, array com As filiais
  @param table, character, tabela para verificar o compartilhamento
  @return character, string de filiais agrupadas
  @example
    branches =['D MG 01', 'D MG 02', 'D RJ 01', 'D RJ 02']
    table = 'SE1'
    1. compartilhado por filial
    branchesIn = "'D MG,'D RJ'"
    2. exclusivo
    branchesIn ="'D MG 01', 'D MG 02', 'D RJ 01', 'D RJ 02'"
/*/
Function branchesFormatToIn(branches As Array, table As Character) As Character
  Local lengthTable   As Numeric
  Local lengthBranche As Numeric
  Local nX            As Numeric
  Local branchesIn    As Character
  Local brancheTemp   As Character
  Local brancheMode   As Character
  Local oHashCache     As Object

  branchesIn   := ""
  brancheMode := FWModeAccess(table, 03)
  lengthTable := 0

  If brancheMode == 'C'
    lengthTable += IIf(FWModeAccess(table, 01) == "E", Len(FWSM0Layout(, 1)), 0)
    lengthTable += IIf(FWModeAccess(table, 02) == "E", Len(FWSM0Layout(, 2)), 0)
    lengthBranche := Len(FWxFilial())
    oHashCache := FwHashMap():New()
    For nX := 1 To Len(branches)
      brancheTemp := PadR(Left(branches[nX], lengthTable), lengthBranche)
      If !oHashCache:containsKey(brancheTemp)
        branchesIn += ",'" + brancheTemp + "'"
      EndIf
    Next
  Else
    aEval(branches,{|filial| branchesIn += ",'" + filial + "'"})
  EndIf

  branchesIn := Substr(branchesIn, 2)
Return branchesIn

/*/{Protheus.doc} branchesGroup
  ajusta o um array de filiais conforme o compartilhamento da tabela
  @type function
  @version 12.1.33
  @author renato.ito
  @since 30/11/2020
  @param branches, array, array com As filiais
  @param table, character, tabela para verificar o compartilhamento
  @param returnBranche as logical, retorna a filial?
  @return array, filiais agrupadas
  @example
    branches = {'D MG 01', 'D MG 02', 'D RJ 01', 'D RJ 02'}
    table = 'SE1'

    1. compartilhado por filial
    branchesIn =  {'D MG','D RJ'}
    2. exclusivo
    branchesIn = {'D MG 01', 'D MG 02', 'D RJ 01', 'D RJ 02'}
/*/
Function branchesGroup(branches As Array, table As Character, returnBranche As Logical) As Array
  Local lengthTable   As Numeric
  Local lengthBranche As Numeric
  Local nX            As Numeric
  Local branchesIn    As Array
  Local brancheTemp   As Character
  Local brancheMode   As Character
  Local oHashCache    As Object

  branchesIn  := {}
  brancheMode := FWModeAccess(table, 03)
  lengthTable := 0

  If (brancheMode == "C")
    lengthTable += IIf(FWModeAccess(table, 01) == "E", Len(FWSM0Layout(, 1)), 0)
    lengthTable += IIf(FWModeAccess(table, 02) == "E", Len(FWSM0Layout(, 2)), 0)
    lengthBranche := Len(FWxFilial())

    oHashCache := FwHashMap():New()
    For nX := 1 To Len(branches)
      brancheTemp := PadR(Left(branches[nX], lengthTable), lengthBranche)
      If !oHashCache:containsKey(brancheTemp)
        oHashCache:put(brancheTemp)
        If (returnBranche)
          aAdd(branchesIn, {brancheTemp, branches[nX]})
        Else
          aAdd(branchesIn, brancheTemp)
        EndIf
      EndIf
    Next
    FreeObj(oHashCache)
  ElseIf (returnBranche)
    AEval(branches, {|x| AAdd(branchesIn, {x, x})})
  Else
    branchesIn := branches
  EndIf
Return branchesIn
/*/{Protheus.doc} tableModeAccess
  Retorna o compartilhamento de uma tabela
  @type function
  @version 12.1.33
  @author daniel.muniz
  @since 07/05/2021
  @param tableNick, character, tabela para obter o compartilhamento
  @return oModeAccess, Modo de Compartilhamento da Tabela
  @example
    {
      "Company": "E",
      "Unit": "E",
      "Branch": "E"
    }
/*/
Function tableModeAccess(tableNick as Character) as Json
  Local oModeAccess as Json
  oModeAccess := JsonObject():new()

  oModeAccess["Company"] := FWModeAccess(tableNick, 01)
  oModeAccess["Unit"] := FWModeAccess(tableNick, 02)
  oModeAccess["Branch"] := FWModeAccess(tableNick, 03)

Return oModeAccess

/*/{Protheus.doc} CgcMask
  Obtém a mascará do CNPJ ou CPF baseado no valor informado
  @type  Function
  @author daniel.muniz
  @since 20/07/2022
  @version version
  @param cCgc, Character, CNPJ ou CPF para identificação de mascará
  @return cMaskCgc, Character, Mascará do valor informado
  /*/
Function CgcMask(cCgc as Character) as Character
  Local cMaskCgc as Character
  If Len(cCgc) <= 11
    cMaskCgc := '@R 999.999.999-99'
  Else
    cMaskCgc := '@R 99.999.999/9999-99'
  EndIf
Return cMaskCgc
