#include 'tlpp-core.th'

NameSpace gfin.util

/*/{Protheus.doc} LgpdConversion
    Classe responsável por ofuscar dados sensíveis.

    @type class
    @author Luiz Nai
    @since 21/07/2021
/*/
Class LgpdConversion
    Data oHashFields  As Object
    Public Data lLGPD As Logical //indica se LGPD está habiolitado no sistema

    Public Method new() CONSTRUCTOR
    Public Method destroy()

    Public Method prepareFields()
    Public Method getAliasValue()
    Public Method getFieldValue()
    Public Method getFieldsLGPD() //lista de campos que devem ser ofuscados
    Public Method hasFieldsLGPD() //indica se existe campos para ofuscamento
    Public Method applyLGPD()     //aplica ofuscamento
    Method LoadLGPD()
EndClass

Method new() Class LgpdConversion
    ::lLGPD := cPaisLoc == "BRA" .And. FindFunction( "FwPDCanUse" ) .And. FwPDCanUse(.T.)
Return Self

/*/{Protheus.doc } Method destroy()
    destroy da classe
/*/
Method destroy() class LgpdConversion
    If ::lLGPD
        FreeObj(::oHashFields)
    EndIf
Return

/*/{Protheus.doc} prepareFields
  Carrega na memória os campos que devem ser ofuscados
  @author Luiz Nai
  @since 21/07/2021
/*/
Method prepareFields(aFields As Array) class LgpdConversion
    If(::lLGPD)
        ::oHashFields := FwHashMap():New()
        Self:LoadLGPD(aFields)
    EndIf
Return

/*/{Protheus.doc} LoadLGPD
  Carrega array para validação do Frame se o campo será ofuscado ou não
  @author Luiz Nai
  @since 21/07/2021
/*/
Method LoadLGPD(aFields As Array) Class LgpdConversion
    Local aProtLGPD As Array
    Local nIndex    As Numeric
    Local nTam      As Numeric
    Local cField    As Character

    If(Len(aFields) > 0)
        // retira os campos que devem ser protegidos
        aProtLGPD := FwProtectedDataUtil():UsrAccessPDField(__cUserID, aFields)
        // se não retirou nenhum campo nao precisa continuar
        If Len(aFields) <> Len(aProtLGPD)
            For nIndex := 1 to Len(aFields)
                cField  := aFields[nIndex]
                If aScan(aProtLGPD , cField) == 0
                    nTam := TAMSX3(cField)[1]
                    ::oHashFields:put(cField, REPLICATE("*", nTam))
                EndIf
            Next nIndex
        EndIf
    EndIf
Return

/*/{Protheus.doc} getAliasValue
  Retorna o valor de um determinado campo após aplicação da regra
  @author Luiz Nai
  @since 21/07/2021
/*/
Method getAliasValue(cAlias As Character, cField As Character) Class LgpdConversion
    Local cRet As Character

    cRet := ''

    If select(cAlias) > 0 .AND. !Empty(cAlias + cField)
        If ::oHashFields:containsKey(cField)
            cRet := ::oHashFields:get(cField)
        Else
            cRet := (cAlias)->&(cField)
        EndIf
    EndIf

Return cRet

/*/{Protheus.doc} getFieldValue
  Atualizar o valor do campo após aplicar regra do LGPD
  @author Renato Ito
  @since 21/07/2021
  @param cField, character, campo que deve ser verificado
  @param xValue, any, conteúdo do campo
  @return xValue, any, valor ofuscado se necessário
/*/
Method getFieldValue(cField As Character, xValue) Class LgpdConversion
    //Só aplica a regra se o ambiente utiliza LGPD e se o campo precisa ser tratado
    If ::lLGPD .And. ::oHashFields:containsKey(cField)
        xValue := ::oHashFields:get(cField)
    EndIf
Return xValue

/*/{Protheus.doc} getFieldsLGPD
    Retorna os campos que devem ser bloqueados
    @author Renato Ito
    @since 04/08/2021
    @return array, lista dos campos
/*/
Method getFieldsLGPD() Class LgpdConversion
Return ::oHashFields:Keys()

/*/{Protheus.doc} HasFieldsLGPD
    Retorna os campos que devem ser bloqueados
    @author Renato Ito
    @since 04/08/2021
    @return array, lista dos campos
/*/
Method hasFieldsLGPD() Class LgpdConversion
Return ::oHashFields:Size() > 0

/*/{Protheus.doc} applyLGPD
    Retorna os campos que devem ser bloqueados
    @author Renato Ito
    @since 04/08/2021

    @param aItems, array, array de Json {campo: valor}
    @return array, items ofuscado se necessário
/*/
Method applyLGPD(aItems As Array) Class LgpdConversion
    Local aFieldsLGPD As Array    // campos que serão ofuscados
    Local nField      As Numeric
    Local nItem       As Numeric
    Local cField      As Character

    If ::lLGPD .And. ::hasFieldsLGPD()                  // Verifica se está configurado LGPD e se existe campo bloqueado antes
        aFieldsLGPD := ::getFieldsLGPD()                // campos que devem ofuscar
        For nItem := 1 To Len(aItems)                   // laço para cada item
            For nField := 1 To Len(aFieldsLGPD)         // laço por campo
                cField := Lower(aFieldsLGPD[nField])
                aItems[nItem][cField] := ::getFieldValue(aFieldsLGPD[nField], aItems[nItem][cField])
            Next
        Next
    EndIf
Return aItems
