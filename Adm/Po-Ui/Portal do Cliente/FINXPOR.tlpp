#include 'tlpp-core.th'
#include "FWMVCDEF.CH"
#include "FINXPOR.ch"

namespace portal.cliente.util
using namespace portal.cliente.util.mingle

//-----------------------------------------------------------------------------
/*/{Protheus.doc} criaWSPCM()
@Description	Cria WebService para o Portal do Cliente Mingle
@sample			criaWSPCM()

@author     Alison Kaique
@since			Abr/2021
@version		12.1.27
/*/
//-----------------------------------------------------------------------------
Function criaWSPCM()
	Local aArea    As Array // área geral
	Local aAreaAI7 As Array // área da AI7
	Local aFiliais As Array // filiais do Grupo
	Local cCodWS   As Character // código do WebService
	Local cErro    As Character // log de Erro
	Local cFilAI7  As Character // controle de Filial
	Local cFilBkp  As Character // backup Filial Corrente
	Local nFilial  As Numeric // controle de FOR
	Local oModel   As Object // instância do Modelo da FATA230
	Local oHash    As Object // instância de HashMap

	aArea    := FWGetArea()
	aAreaAI7 := AI7->(FWGetArea())
	aFiliais := FWLoadSM0()
	cCodWS   := PadR('PORTALCLIENTEMINGLE', TamSX3('AI7_WEBSRV')[01])
	oHash    := aToHM(aFiliais)
	aFiliais := {}
	cErro    := ''
	cFilBkp  := cFilAnt

	// ajusta filiais conforme compartilhamento
	HMGet(oHash, cEmpAnt, aFiliais)
	aFiliais := AjustaFil(aFiliais, 'AI7')

	AI7->(DbSetOrder(01)) // AI7_FILIAL + AI7_WEBSRV

	// percorrendo Filiais do Grupo
	For nFilial := 01 To Len(aFiliais)
		// alterando Filial Corrente
		cFilAnt := aFiliais[nFilial, 02]
		// filial de acordo com o compartilhamento da tabela
		cFilAI7 := aFiliais[nFilial, 01]
		// verifica se o registro já existe
		If !(AI7->(DBSeek(cFilAI7 + cCodWS)))
			// carrega o modelo
			oModel := FWLoadModel('FATA230')
			// define operação
			oModel:SetOperation(MODEL_OPERATION_INSERT)
			// ativa o modelo
			oModel:Activate()
			//definindo valores
			oModel:SetValue('AI7MASTER', 'AI7_FILIAL', cFilAI7)
			oModel:SetValue('AI7MASTER', 'AI7_WEBSRV', cCodWS)
			oModel:SetValue('AI7MASTER', 'AI7_DESCRI', STR0002) //#"Portal do Cliente"

			// validação de dados
			If (oModel:VldData())
				// efetuando commit
				oModel:CommitData()
			Else
				// recupera o error log
				If !(STR0001 + cFilAI7 $ cErro) //#"Filial: "
					cErro += STR0001 + cFilAI7 + CRLF
					cErro += cValToChar(oModel:GetErrorMessage()[4]) + ' - '
					cErro += cValToChar(oModel:GetErrorMessage()[5]) + ' - '
					cErro += cValToChar(oModel:GetErrorMessage()[6])
					cErro += Replicate('_', 10) + CRLF
				EndIf
			EndIf

			// desativa modelo
			oModel:DeActivate()
		EndIf
	Next nFilial

	// mostra o error log
	If !(Empty(cErro))
		Help( , , "WSPCM", , cErro, 1, 0 )
	EndIf

	// restaurando Filial Corrente
	cFilAnt := cFilBkp

	// liberando memória dos objetos
	FreeObj(oModel)
	HMClean(oHash)
	FreeObj(oHash)

	// restaurando a área
	FWRestArea(aAreaAI7)
	FWRestArea(aArea)
Return

//-----------------------------------------------------------------------------
/*/{Protheus.doc} intMinglePCM()
  @Description	Integração Usuário para o Portal do Cliente Mingle
  @sample			intMinglePCM()

  @param cLogin    , character, Login do Usuário
  @param cPassword , character, Senha do Usuário
  @param nOperation, numeric  , operação (inclusão, alteração ou exclusão)

  @author     Alison Kaique
  @since			Abr/2021
  @version		12.1.27
/*/
//-----------------------------------------------------------------------------
Function intMinglePCM(cLogin As Character, cPassword As Character, nOperation As Numeric, cEnviron As Character) As Logical

  Local oMingle  As Object // instância da Classe MingleIntegrator
  Local oUser    As Json // usuário do Mingle
  Local oError   As Object // instância da Classe MingleError
  Local cUrl 	 := '' As Character // controle de endereço para logar no Mingle
  Local lSuccess := .T. As Logical // controle de processamento
  Local cUserId         As Character

  If (FindClass('PORTAL.CLIENTE.UTIL.MINGLE.MINGLEINTEGRATOR'))
    // criando a instância da classe
    oMingle := PORTAL.CLIENTE.UTIL.MINGLE.MingleIntegrator():New()
	cUrl    := oMingle:getURLMingle(cEnviron)
    // verifica se o usuário já existe no Mingle
    oUser   := oMingle:getMUserPublicByLogin(cLogin)
    oError  := oMingle:GetErrorMessage()

	If(oUser == NIL)
		cUserId := ''
	else
		cUserId := oUser['_id']
	EndIf

	If(Empty(oError['CID']) .OR. oError['CID'] == "NOTFOUND")
		If (nOperation == MODEL_OPERATION_INSERT .OR. nOperation == MODEL_OPERATION_UPDATE)
		// efetua a inclusão do usuário no Mingle
		oUser  := oMingle:createMUserPublic(cLogin, cPassword, cUserId)
		oError := oMingle:GetErrorMessage()
		// verifica erro
			If (oUser == Nil .AND. !Empty(oError:cID))
				Help("", 1, oError:cID, , oError:cDescription, 1,;
					,,,,,, {oError:cSolution})
				lSuccess := .F.
			EndIf
		EndIf
    ElseIf !Empty(oError['CID'])
        Help("", 1, oError:cID, , oError:cDescription, 1,;
              ,,,,,, {oError:cSolution})
        lSuccess := .F.
    EndIf
  EndIf
Return lSuccess

//-------------------------------------------------------------------
/*/{Protheus.doc} AjustaFil
ajusta o um array de filiais conforme o compartilhamento da tabela

@param
	aFiliais as array, array com as filiais
	cTabela as character, tabela para verificar o compartilhamento
@return
	aFiliaisIn as arrray, filiais agrupadas
@example
	aFiliais = {'D MG 01', 'D MG 02', 'D RJ 01', 'D RJ 02'}
	cTabela = 'SE1'

	1. compartilhado por filial
	aFiliaisIn =  {'D MG','D RJ'}
	2. exclusivo
	aFiliaisIn = {'D MG 01', 'D MG 02', 'D RJ 01', 'D RJ 02'}

@author renato.ito
@since 30/11/2020
/*/
//-------------------------------------------------------------------
Static Function AjustaFil(aFiliais As Array, cTabela As Character) As Array

	Local aFiliaisIn := {} As Array
	Local aCodFilial := {} As Array

	AEval(aFiliais, {|x| AAdd(aCodFilial, x[02])})

	aFiliaisIn := GFIN.UTIL.branchesGroup(aCodFilial, cTabela, .T.)

Return aFiliaisIn
