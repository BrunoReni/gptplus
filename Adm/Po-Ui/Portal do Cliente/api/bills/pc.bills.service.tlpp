#include 'tlpp-core.th'
#include 'PC.BILLS.SERVICE.CH'

namespace portal.cliente.bills
using namespace gfin.util
using namespace portal.cliente.util

static __oHashCache := FwHashMap():New()

static __instance	   As Object
static __oActiveData As Object
Static __lEmaBOL := ExistBlock("NGFEMBOL") As Logical

Class BillsService

	Data limit	As Numeric
	Data page	As Numeric

	Public Method new()
	Public Method getCustomerBills()
  Public Method getInvoiceBills()
	Public Method getBillsNumbers()
	Public Method setLimit()
	Public Method setPage()
	Static Method getInstance() As Object
	Static Method getProtheusInstance() As Object
  Public Method sendEmail()
  
EndClass

Method new() Class BillsService
	Self:limit	:= 0
	Self:page 	:= 0
Return

//-------------------------------------------------------------------
/*/{Protheus.doc }getInstance
retorna a o instância ativa, se não exitir será criada uma nova.

@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------
Method getInstance() Class BillsService
	If (__instance == nil)
		__instance := BillsService():new()
	EndIf
Return	__instance

//-------------------------------------------------------------------
/*/{Protheus.doc }setLimit
congifura o limite de registros para retorno

@author Renato Ito
@since 19/08/2020
/*/
//-------------------------------------------------------------------
Method setLimit(value As Numeric) Class BillsService
	self:limit := value
Return

//-------------------------------------------------------------------
/*/{Protheus.doc }setPage
congifura a pagina atual para cálculo do registro inicial da query

@author Renato Ito
@since 19/08/2020
/*/
//-------------------------------------------------------------------
Method setPage(value As Numeric) Class BillsService
	self:page := value
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getCustomerBills
Regra de negócio para os títulos financeiros do cliente.

@param	json com os atributos
		{
			customerId: character,
			storeId: character,
			branchId: array,
			filter: array [atributo, operador, valor]
		}

@return json com os atributos
		{
			"result"    : true ou false 
			"response"  : json de resposta
			"statusCode": código http de resposta quando necessário
		}
@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------
Method getCustomerBills(request As Json) Class BillsService
	Local dataObj 		As Object
	Local response 		As Json
	Local customers		As Array

	customers := request['customers']
	
	// avalia se a parametrização obrigatória foi encaminhada
	If (!validCustomers(customers))
		response := answerErrorFormat(412, STR0008, STR0009)
	Else
		dataObj := BillsService():getProtheusInstance()

  response := dataObj:getDataBills(customers, request['filter'], request['order'], self:limit, self:page)

	EndIf
Return response

//-------------------------------------------------------------------
/*/{Protheus.doc }getProtheusInstance
Retorna a isntancia ativa de acesso aos dados do Protheus

*implementar no futuro a factory se existir mais provedores de dados
@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------
Method getProtheusInstance() Class BillsService
	If (__oActiveData == nil)
		__oActiveData := BillsDataProtheus():new()
	EndIf
Return __oActiveData

//-------------------------------------------------------------------
/*/{Protheus.doc} getBillsNumbers
Regra de negócio para os números dos títulos financeiros.

@param	json com os atributos
		{
			customerId: character,
			storeId: character,
			branchId: array,
			filter: character,
		}

@return json com os tributos
		{
			"result" : true ou false 
			"response" : json de resposta
			"statusCode": código http de resposta quando necessário
		}
@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------
Method getBillsNumbers(request As Json) Class BillsService
	Local dataObj 			As Object
	Local response 			As Json
	Local customers			As Array

	customers := request['customers']

	// avalia se a parametrização obrigatório foi encaminhada
	If (!validCustomers(customers))
		response := answerErrorFormat(412, STR0008, STR0009)
	Else
		dataObj := BillsService():getProtheusInstance()
		response := dataObj:getDataBillsNumbers(customers, request['billsNumbers'])
	EndIf
Return response

/*/
{Protheus.doc} sendEmail
Método responsável por inicializar o processo de envio do Boleto por E-mail

@param oBody, object, body recebido

@return oResponse, object, response da requisição

@author luiz.nai
@since 02/06/2021
/*/
Method sendEmail(oBody As Json) Class BillsService
  Local oResponse As Json
  Local oLog      As Json
  Local cBranch   As Character
  Local cPrefix   As Character
  Local cNumber   As Character
  Local cParcel   As Character
  Local cType     As Character

  oResponse := JsonObject():New()

  cBranch := PadR(AllTrim(oBody['e1_filorig']), TamSX3('EA_FILIAL')[01])
  cPrefix := PadR(AllTrim(oBody['ea_prefixo']), TamSX3('EA_PREFIXO')[01])
  cNumber := PadR(AllTrim(oBody['ea_num']), TamSX3('EA_NUM')[01])
  cParcel := PadR(AllTrim(oBody['ea_parcela']), TamSX3('EA_PARCELA')[01])
  cType   := PadR(AllTrim(oBody['ea_tipo']), TamSX3('EA_TIPO')[01])

  // verifica se o título existe
  If (foundBill(cBranch, cPrefix, cNumber, cParcel, cType))
    // alterando o campo de status de envio do boleto
    If (RecLock('SEA', .F.))
      SEA->EA_APIMAIL := '0'
      SEA->(MsUnlock())
    EndIf
    
    // chamando rotina de envio do e-mail
    F713Mail(cBranch, cPrefix, cNumber, cParcel, cType)

    // verifica se houve erros e retorna
    If (SEA->EA_APIMAIL == '1')
      oResponse["result"]   := .T.
      oResponse["response"] := JsonObject():New()
      oResponse["response"]["message"] := STR0005 // #"Título Financeiro encontrado e o processo de envio do Boleto por e-mail será iniciado."
    Else
      oLog := JsonObject():New()
      If (oLog:fromJson(AllTrim(SEA->EA_APILOG)) == Nil .AND. ValType(oLog['mail']) == 'J' .AND. ValType(oLog['mail']['message']) == 'C')
		oResponse["result"]   := .T.
		oResponse["response"] := JsonObject():New()
		oResponse["response"]["message"] := STR0006
      EndIf
    EndIf
  Else
	oResponse["result"]   := .T.
	oResponse["response"] := JsonObject():New()
	oResponse["response"]["message"] := STR0004
  EndIf
Return oResponse

/*/
{Protheus.doc} foundBill
Busca e posiciona no Título do Borderô

@param cBranch, character, filial do título
@param cPrefix, character, prefixo do título
@param cNumber, character, prefixo do título
@param cParcel, character, prefixo do título
@param cType  , character, prefixo do título

@return lRet, logical, .T. para body válido

@author luiz.nai
@since 02/06/2021
/*/
Static Function foundBill(cBranch As Character, cPrefix As Character, cNumber As Character, cParcel As Character, cType As Character) As Logical
  Local oStatement As Object
  Local cBillAlias As Character
  Local lRet       As Logical

  // verifica se o statement já existe
  If (!__oHashCache:containsKey('found_bill'))
    oStatement := createFoundBill()
  Else
    oStatement := __oHashCache:get('found_bill')
  EndIf

  // faz o bind dos dados
  oStatement:setString(1, cBranch) // filial do título
  oStatement:setString(2, cPrefix) // prefixo do título
  oStatement:setString(3, cNumber) // número do título
  oStatement:setString(4, cParcel) // parcela do título
  oStatement:setString(5, cType) // tipo do título
  oStatement:setString(6, 'R') // carteira do título
  oStatement:setString(7, 'S') // status de transferência do título
  oStatement:setString(8, 'S') // borderô por API?

  // cria a temporária
  cBillAlias := MpSysOpenQuery(oStatement:getFixQuery())

  // verifica se encontrou o título e posiciona
  lRet := !((cBillAlias)->(EOF()))

  If !lRet .And. __lEmaBOL
    oStatement:setString(7, ' ') // status de transferência do título
    oStatement:setString(8, 'N') // borderô por API?

    // cria a temporária
    cBillAlias := MpSysOpenQuery(oStatement:getFixQuery())

    // verifica se encontrou o título e posiciona
    lRet := !((cBillAlias)->(EOF()))
  Endif

  If (lRet)
    SEA->(DbGoTop())
    SEA->(DbGoTo((cBillAlias)->NUMREC))
  EndIf
Return lRet

/*/{Protheus.doc } createFoundBill
Cria o statement da query de busca do título financeiro

@return oStatement, objecy, statement da query

@author luiz.nai
@since 02/06/2021
/*/
Static Function createFoundBill() As object
  Local oStatement As Object
  Local cQuery     As Character

  cQuery := ""
  cQuery += "SELECT"
  cQuery += "	R_E_C_N_O_ NUMREC"
  cQuery += " FROM"
  cQuery += "	" + RetSQLName('SEA')
  cQuery += " WHERE"
  cQuery += "	EA_FILIAL = ? AND"
  cQuery += "	EA_PREFIXO = ? AND"
  cQuery += "	EA_NUM = ? AND
  cQuery += "	EA_PARCELA = ? AND"
  cQuery += "	EA_TIPO = ? AND"
  cQuery += "	EA_CART = ? AND"
  cQuery += "	EA_TRANSF = ? AND"
  cQuery += "	EA_BORAPI = ? AND"
  cQuery += "	D_E_L_E_T_ = ' '"
  cQuery := ChangeQuery(cQuery)

  oStatement := FwPreparedStatement():New(cQuery)
  __oHashCache:put("found_bill", oStatement)
Return oStatement 
