#include 'tlpp-core.th'

namespace portal.cliente.bills
using namespace gfin.util
using namespace portal.cliente.util

//-------------------------------------------------------------------
/*/{Protheus.doc } BillsDataProtheus
Classe para acesso aos dados do Protheus

@method getDataBills Retorna os títulos financeiros de um cliente.

@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------
class BillsDataProtheus

	Data docTypesNotIn as array // tipos de títulos que serão removidos da query

	public method new()
	public method getDataBills() As Json
	public method getInvDataBills() AS Json

endclass

method new() class BillsDataProtheus

	Self:docTypesNotIn := separa(MVABATIM +"|"+MVFUABT+"|"+ MVRECANT+"|"+ MV_CRNEG +"|"+MVPROVIS,'|')

return Self


//-------------------------------------------------------------------
/*/{Protheus.doc} getDataBills
Retorna os titulos financeiros em aberto do cliente.

@param	customerId, character, código do cliente
		storeId, character, loja do cliente
		branches, array, filiais do sistema
		filter, array, [ atributo, operador, valor]

@return json com os tributos
		{
			"result" : true ou false 
			"response" : {
				"items:{
					"code": "301",
					"branch": "D MG 01",
					"customer: "Joao Silva",
					"parcel": "1",
					"type": "BOL",
					"financialType": "R",
					"issueDate": "2019-12-31",
					"realDueDate": "2019-12-31",
					"amount": 752.5,
					"balance": 752.5,
					"status": "1",
					"linecode": "zl2k4i",
					"status": "PENDING"
				}
			}
		}
@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------

method getDataBills(customers as array, filter as array, order as character, limit as numeric, page as numeric) as Json class BillsDataProtheus
	local statement 		 as object
	local aliasBills		 as character
	local retValues 		 as array
	local response			 as Json
	local queryParam		 as numeric
	local queryFilter		 as character
	local cOrderFilter := "" as character
	local hasNext			 as logical
	Local nCount := 0 As Numeric
	Local lSkip := .F. As Logical
	Local cTableTemporary := "" As Character

	queryParam	:= 1
	retValues	:= {}
	response	:= JsonObject():New()
	hasNext		:= .F.

	if (!empty(filter))
		queryFilter := transformQueryFilter(@filter)
	endif

	if (order != NIL)
		cOrderFilter := transformOrder(order)
	endif

	cTableTemporary := CreateTemporaryCustomers(customers, "SE1")

	if (!empty(queryFilter))
		statement := createPrepareBillsFiltered(customers, queryFilter, cOrderFilter, cTableTemporary)
	else
		statement := createPrepareBills(customers, cOrderFilter, cTableTemporary)
	endif

	statement:SetIn(1, self:docTypesNotIn)

	if (!empty(filter))
		for  queryParam := 1 to len(filter)
			if valtype(filter[queryParam]) != 'A'
				statement:SetString(1 + queryParam, filter[queryParam])
			else
				statement:SetIn(1 + queryParam, filter[queryParam])
			endif
		next
	endif

	aliasBills := MpSysOpenQuery(statement:GetFixQuery())

	while ((aliasBills)->(!eof()))

		If nCount == limit
			(aliasBills)->(DbSkip())
			hasNext := (aliasBills)->(!EOF())
			Exit
		Endif

		If page > 1 .and. !lSkip
			lSkip := .T.
			If ((page-1) * limit) > 0
				(aliasBills)->( DbSkip( (page-1) * limit ) )
			EndIf
		Endif

		// Gera objeto convertendo código de barras para linha digitável.
		AAdd(retValues, {;
			{ "prefix", (aliasBills)->E1_PREFIXO},;
			{ "branch", FWFilialName(cEmpAnt, (aliasBills)->E1_FILORIG, 2) /*(aliasBills)->E1_FILIAL*/},;
			{ "code", (aliasBills)->E1_NUM},;
			{ "customerBranch", FWxFilial("SA1", (aliasBills)->E1_FILIAL) /*(aliasBills)->E1_FILIAL*/},;
			{ "customerId", (aliasBills)->E1_CLIENTE},;
			{ "customerStore", (aliasBills)->E1_LOJA},;
			{ "filorig", (aliasBills)->E1_FILORIG},;
			{ "filial", (aliasBills)->E1_FILIAL},;
			{ "parcel", (aliasBills)->E1_PARCELA},;
			{ "type", (aliasBills)->E1_TIPO},;
			{ "financialType", "R"},;
			{ "currency", currencySymbolAndDecimal((aliasBills)->E1_MOEDA)},;
			{ "issueDate", SToD((aliasBills)->E1_EMISSAO)},;
			{ "realDueDate", SToD((aliasBills)->E1_VENCREA)},;
			{ "amount", (aliasBills)->E1_VALOR},;
			{ "balance", (aliasBills)->E1_SALDO},;
			{ "linecode", If( (aliasBills)->E1_SALDO > 0, FinCBLD((aliasBills)->E1_CODBAR), '') },;
			{ "numbor", (aliasBills)->E1_NUMBOR},;
			{ "borapi", (aliasBills)->EA_BORAPI},;
			{ "transf", (aliasBills)->EA_TRANSF},;
			{ "status", getBillStatus(SToD((aliasBills)->E1_VENCREA), SToD((aliasBills)->E1_BAIXA), (aliasBills)->E1_SALDO)};
		})

		nCount ++
		(aliasBills)->(DbSkip())
	enddo
 
	(aliasBills)->(DBCloseArea())
	
	response[ "result" ]	:= .T.
	response[ "response" ] := arrayToAPI(retValues, hasNext)

	if (!empty(filter))
		FreeObj(statement)
	endif

	DestroyTemporaryCustomers()

return response

//-------------------------------------------------------------------
/*/{Protheus.doc } createPrepareBills
Cria o cache da query de títulos financeiros

@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------
static function createPrepareBills(customers As Array, cOrder as Character, cTableTemporary As Character) As Object
	local statement as object
	local query     as character

	query := " SELECT SE1.E1_FILIAL, SE1.E1_FILORIG, SE1.E1_NOMCLI, SE1.E1_PREFIXO, SE1.E1_NUM, "
	query += " SE1.E1_PARCELA, SE1.E1_TIPO, SE1.E1_EMISSAO, SE1.E1_BAIXA, SE1.E1_CLIENTE, "
	query += " SE1.E1_LOJA, SE1.E1_NUMBOR, SE1.E1_MOEDA, SE1.E1_VENCREA, SE1.E1_VALOR, SE1.E1_SALDO, SE1.E1_CODBAR, "
	query += " SEA.EA_FILORIG, SEA.EA_NUMBOR, SEA.EA_PREFIXO, SEA.EA_FILORIG, SEA.EA_NUM, SEA.EA_TRANSF, SEA.EA_BORAPI "
	query += " FROM " + RetSqlName('SE1') + " SE1 "
	query += " LEFT JOIN " + RetSqlName('SEA') + " SEA "
	query += " ON SE1.E1_NUMBOR = SEA.EA_NUMBOR "
	query += " AND SE1.E1_PREFIXO = SEA.EA_PREFIXO "
	query += " AND SE1.E1_FILIAL = SEA.EA_FILORIG "
	query += " AND SE1.E1_NUM = SEA.EA_NUM "
	query += " AND SE1.E1_PARCELA = SEA.EA_PARCELA "
	query += " AND SE1.E1_TIPO = SEA.EA_TIPO "
	query += " AND SEA.EA_CART = 'R' "
	query += " AND SEA.D_E_L_E_T_= '' "
	query += " RIGHT JOIN " + cTableTemporary + " TMP ON
	query += " SE1.E1_CLIENTE = TMP.CLIENTE
	query += " AND SE1.E1_LOJA = TMP.LOJA
	query += " AND TMP.D_E_L_E_T_ = ' '
	query += " WHERE "
	query += " SE1." + BranchesToCustomerForTable("SE1")
	query += " AND SE1.E1_TIPO NOT IN (?)"
	query += " AND SE1.D_E_L_E_T_ = ' '"
	query += " AND NOT EXISTS (SELECT FI7_FILIAL "
	query += " FROM "  + RetSqlName("FI7") + " FI7 "
	query += " WHERE "
	query += " FI7_FILIAL = SE1.E1_FILIAL  AND "
	query += " FI7_PRFORI = SE1.E1_PREFIXO AND "
	query += " FI7_NUMORI = SE1.E1_NUM     AND "
	query += " FI7_PARORI = SE1.E1_PARCELA AND "
	query += " FI7_TIPORI = SE1.E1_TIPO    AND "
	query += " FI7_CLIORI = SE1.E1_CLIENTE AND "
	query += " FI7_LOJORI = SE1.E1_LOJA AND "
	query += " SE1.D_E_L_E_T_ = '' )	
	If(EMPTY(cOrder))
		query += " ORDER BY SE1.E1_VENCREA, SE1.E1_PREFIXO, SE1.E1_NUM, SE1.E1_PARCELA, SE1.E1_TIPO"
	Else 
		query += cOrder
	EndIf

	query := ChangeQuery(query)
	statement := FwPreparedStatement():New(query)
return statement

//-------------------------------------------------------------------
/*/{Protheus.doc } createPrepareBillsFiltered
Cria o cache da query de títulos financeiros filtrada

@author Alison Lemes
@since aug|2020
/*/
//-------------------------------------------------------------------
static function createPrepareBillsFiltered(customers As Array, filter as character, cOrder as character, cTableTemporary As Character) As Object
	local statement     as object
	local query         as character
	local filterContent as array

	filterContent := {}

	query := " SELECT SE1.E1_FILIAL, SE1.E1_FILORIG, SE1.E1_NOMCLI, SE1.E1_PREFIXO, SE1.E1_NUM, "
	query += " SE1.E1_PARCELA, SE1.E1_TIPO, SE1.E1_EMISSAO, SE1.E1_BAIXA, SE1.E1_CLIENTE, "
	query += " SE1.E1_LOJA, SE1.E1_NUMBOR, SE1.E1_MOEDA, SE1.E1_VENCREA, SE1.E1_VALOR, SE1.E1_SALDO, SE1.E1_CODBAR, "
	query += " SEA.EA_FILORIG, SEA.EA_NUMBOR, SEA.EA_PREFIXO, SEA.EA_FILORIG, SEA.EA_NUM, SEA.EA_TRANSF, SEA.EA_BORAPI "
	query += " FROM " + RetSqlName('SE1') + " SE1 "
	query += " LEFT JOIN " + RetSqlName('SEA') + " SEA "
	query += " ON SE1.E1_NUMBOR = SEA.EA_NUMBOR "
	query += " AND SE1.E1_PREFIXO = SEA.EA_PREFIXO "
	query += " AND SE1.E1_FILIAL = SEA.EA_FILORIG "
	query += " AND SE1.E1_NUM = SEA.EA_NUM "
	query += " AND SE1.E1_PARCELA = SEA.EA_PARCELA "
	query += " AND SE1.E1_TIPO = SEA.EA_TIPO "
	query += " AND SEA.EA_CART = 'R' "
	query += " AND SEA.D_E_L_E_T_= '' "
	query += " RIGHT JOIN " + cTableTemporary + " TMP ON
	query += " SE1.E1_CLIENTE = TMP.CLIENTE
	query += " AND SE1.E1_LOJA = TMP.LOJA
	query += " AND TMP.D_E_L_E_T_ = ' '
	query += " WHERE "
	query += " SE1." + BranchesToCustomerForTable("SE1")
	query += " AND SE1.E1_TIPO NOT IN (?)"
	query += filter
	query += " AND SE1.D_E_L_E_T_ = ' '"
	If(EMPTY(cOrder))
		query += " ORDER BY SE1.E1_VENCREA, SE1.E1_PREFIXO, SE1.E1_NUM, SE1.E1_PARCELA, SE1.E1_TIPO"
	Else 
		query += cOrder
	EndIf
	
	query := ChangeQuery(query)

	statement := FwPreparedStatement():New(query)
return statement

//-------------------------------------------------------------------
/*/{Protheus.doc } transformQueryFilter
Avalia o filtro enviado e retorna no formato de query

@author Renato Ito
@since 19/08/2020
/*/
//-------------------------------------------------------------------
static function transformQueryFilter(filter as array) as character

	local nX			as numeric
	local queryAux		as character
	local query			as character
	local filterContent	as array
	Local nTitleSize := 0 As Numeric
	Local nSalesSize := 0 As numeric
	Local cSubs := "SUBSTRING" As Character
	Local cBDName := AllTrim(tcGetdb()) As Character

	nTitleSize := Len(AllTrim(FWxFilial('SE1')))
	nSalesSize := Len(AllTrim(FWxFilial('SF2')))		
	
	query := ""
	filterContent := {}
	
	If cBDName $ "ORACLE|POSTGRES"
		cSubs := "SUBSTR"
	Endif

	for nX := 1 to len(filter)
		queryAux := ""
		do case
			case Lower(filter[nX][1]) == 'invoicenumber'
				queryAux := "E1_NUM"
				AADD(filterContent, filter[nX][3])
			case Lower(filter[nX][1]) == 'invoiceserie'
				queryAux := "E1_PREFIXO"
				AADD(filterContent, filter[nX][3])
			case Lower(filter[nX][1]) == 'invoicebranch'
				queryAux := "E1_FILIAL"
				AADD(filterContent, filter[nX][3])
			case Lower(filter[nX][1]) == 'billnumber'
				queryAux := "E1_NUM "
				AADD(filterContent, filter[nX][3])
			case Lower(filter[nX][1]) == 'issuedate'
				queryAux := "E1_EMISSAO "
				AADD(filterContent, StrTran(filter[nX][3], '-'))
			case Lower(filter[nX][1]) == 'duedate'
				queryAux := "E1_VENCREA "
				AADD(filterContent, StrTran(filter[nX][3], '-'))
			case Lower(filter[nX][1]) == 'status'
				queryAux := getQueryStatus(filter[nX][3], "R")
		endcase

		if (!empty(queryAux))
			query += " AND " + queryAux
			
			if (!empty(filter[nX][2]))
				do case 
					case Lower(filter[nX][2]) == 'ge'
						query += ">= ?"
					case Lower(filter[nX][2]) == 'le'
						query += "<= ?"
					case Lower(filter[nX][2]) == 'gt'
						query += "> ?"
					case Lower(filter[nX][2]) == 'lt'
						query += "< ?"
					case Lower(filter[nX][2]) == 'eq'
						query += "= ?"
					case Lower(filter[nX][2]) == 'in'
						query += "in (?)"
					case Lower(filter[nX][2]) == 'contains'
						If(queryAux == "E1_FILIAL")
							If (nTitleSize == nSalesSize) 
								query += " = ? "
							ElseIf (nSalesSize > nTitleSize) 
								query += " = " + cSubs + "(?, 1," + cValToChar(nTitleSize) + ") "
							EndIf
						Else
							query += " like ? "
							filterContent[len(filterContent)] := '%' + filter[nX][3] + '%'
						EndIf
					otherwise 
						query += "= ?"
				endcase 
			endif
		endif
	next
	filter := filterContent
return query

//-------------------------------------------------------------------
/*/{Protheus.doc } transformOrder
Avalia a ordem enviada e retorna no formato de query

@author Luiz Nai
@since 25/03/2022
/*/
//-------------------------------------------------------------------
static function transformOrder(order as character) as character
	local query	as character
	query := ""
	
	If(!EMPTY(order))
		do case
			case Lower(order) == 'branch asc'
				query := " ORDER BY E1_FILIAL ASC "
			case Lower(order) == 'branch desc'
				query := " ORDER BY E1_FILIAL DESC "
			case Lower(order) == 'customer asc'
				query := " ORDER BY E1_CLIENTE ASC "
			case Lower(order) == 'customer desc'
				query := " ORDER BY E1_CLIENTE DESC"
			case Lower(order) == 'code asc'
				query := " ORDER BY E1_NUM ASC "
			case Lower(order) == 'code desc'
				query := " ORDER BY E1_NUM DESC "
			case Lower(order) == 'parcel asc'
				query := " ORDER BY E1_PARCELA ASC "
			case Lower(order) == 'parcel desc'
				query := " ORDER BY E1_PARCELA DESC "
			case Lower(order) == 'type asc'
				query := " ORDER BY E1_TIPO ASC "
			case Lower(order) == 'type desc'
				query := " ORDER BY E1_TIPO DESC "
			case Lower(order) == 'issuedate asc'
				query := " ORDER BY E1_EMISSAO ASC "
			case Lower(order) == 'issuedate desc'
				query := " ORDER BY E1_EMISSAO DESC "
			case Lower(order) == 'realduedate asc'
				query := " ORDER BY E1_VENCREA ASC "
			case Lower(order) == 'realduedate desc'
				query := " ORDER BY E1_VENCREA DESC "
			case Lower(order) == 'amountwithsymbol asc'
				query := " ORDER BY E1_VALOR ASC "
			case Lower(order) == 'amountwithsymbol desc'
				query := " ORDER BY E1_VALOR DESC "
			case Lower(order) == 'balancewithsymbol asc'
				query := " ORDER BY E1_SALDO ASC "
			case Lower(order) == 'balancewithsymbol desc'
				query := " ORDER BY E1_SALDO DESC "																																			
		endcase
	EndIf
return query
