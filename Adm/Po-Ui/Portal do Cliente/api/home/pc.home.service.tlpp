#include 'tlpp-core.th'

#DEFINE STR0001 "Parametrização obrigatória não foi encaminada ou inválida no body"
#DEFINE STR0002 "é esperado = {customerId: string, storeId: string, date: string, branchId: array, periods: number}"

namespace portal.cliente.home
using namespace gfin.util
using namespace portal.cliente.util

Static __instance	 As Object
Static __oActiveData As Object

Class HomeService
	Public Method new()
	Public Method getCustomerMovements()
	Public Method getCustomerBalances()
	Static Method getInstance() As Object
	Static Method getProtheusInstance() As Object
EndClass


Method new() Class HomeService
Return


//-------------------------------------------------------------------
/*/{Protheus.doc }getInstance
retorna a o instância ativa, se não exitir será criada uma nova.

@author Renato Ito
@since 03/08/2020
/*/
//-------------------------------------------------------------------
Method getInstance() Class HomeService
	If (__instance == nil)
		__instance := HomeService():new()
	EndIf
Return	__instance


//-------------------------------------------------------------------
/*/{Protheus.doc} getCustomerMovements
Regra de negócio para os movimentos do cliente.

@param	json com os atributos
		{
			customerId: Character,
			storId: Character,
			date: Character,
			branchId: array,
			periods: numeric
		}

@Return json com os tributos
		{
			"result" : true ou false 
			"response" : json de resposta
			"statusCode": código http de resposta quando necessário
		}
@author Renato Ito
@since 03/08/2020
/*/
//-------------------------------------------------------------------
Method getCustomerMovements(request As Json) Class HomeService
	Local dataObj 			As Object
	Local response 			As Json
	Local customers			As Array
	Local periods			As Numeric
	Local dateRef			As Date

	customers := request['customers']
	periods	  := request['periods']
	
	If (request['date'] <> Nil)
		dateRef := StoD(request['date'])
	EndIf

	// avalia se a parametrização obrigatório foi encaminhada
	If (!validCustomers(customers) .Or. Empty(periods) .Or. Empty(dateRef))
		response := answerErrorFormat(412, STR0001, STR0002)
	else
		dataObj := HomeService():getProtheusInstance()
		response := dataObj:getDataMovements(customers, periods, dateRef)
	EndIf
Return response


//-------------------------------------------------------------------
/*/{Protheus.doc }getProtheusInstance
Retorna a isntancia ativa de acesso aos dados do Protheus

*implementar no futuro a factory se existir mais provedores de dados
@author Renato Ito
@since 03/08/2020
/*/
//-------------------------------------------------------------------
Method getProtheusInstance() Class HomeService
	If (__oActiveData == nil)
		__oActiveData := HomeDataProtheus():new()
	EndIf
Return __oActiveData


//-------------------------------------------------------------------
/*/{Protheus.doc} getCustomerBalances
Regra de negócio para compor os saldos do cliente

@param	json com os atributos
		{
			customerId: Character,
			storId: Character,
			date: Character,
			branchId: array
		}

@Return json com os tributos
		{
			"result" : true ou false 
			"response" : json de resposta
			"statusCode": código http de resposta quando necessário
		}
@author Renato Ito
@since 03/08/2020
/*/
//-------------------------------------------------------------------
Method getCustomerBalances(request As Json) Class HomeService
	Local dataObj 			As Object
	Local response 			As Json
	Local dateRef			As Date
	Local customers			As Array

	customers := request['customers']
	
	If (request['date'] <> nil)
		dateRef := StoD(request['date'])
	EndIf

	// avalia se a parametrização obrigatório foi encaminhada
	If (!validCustomers(customers) .Or. Empty(dateRef))
		response := answerErrorFormat(412, STR0001, "Parametrização obrigatória não foi encaminhada no body")
	Else
		dataObj  := HomeService():getProtheusInstance()
		response := dataObj:getDataBalances(customers, dateRef)
	EndIf
Return response
