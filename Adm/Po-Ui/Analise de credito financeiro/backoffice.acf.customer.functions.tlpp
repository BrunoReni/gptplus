#include 'tlpp-core.th'
#include 'totvs.ch'
#INCLUDE "FWLIBVERSION.CH"

NAMESPACE totvs.protheus.backoffice.acf.customer
USING NAMESPACE totvs.protheus.backoffice.fin.functions

Static __lCacheQry := FwLibVersion() >= "20211116"

/*/{Protheus.doc} customerBills
	Retorna a regra de titulo por cliente de acordo com a regra especificada no parametro cType
	essa função deve ser usada juntamente com a utilização da classe FwExecStatement (Passada por parametro)
	@type  Function
	@author Vitor Duca
	@since 24/10/2022
	@version 1.0
	@param cType, Character, Define qual tipo de query sera executada
		Opções disponiveis no cType
			- pendente, titulos do clientes que estão pendentes de pagamento na base
			- vencidos, titulos do clientes que estão vencidos na base
			- pagos, titulos que foram pagos pelo cliente
			- pagos_atraso, Titulos que foram pagos em atraso
	@param oStatement, Object, FwExecStatement que será responsavel por realizar o cache e execução da query
	@param cCustomer, Character, Codigo do cliente 
	@param cStore, Character, Loja do cliente
	@param cBranch, Character, Filial que deve ser considerada para o filtro dos titulos
	@return oStatement:ExecScalar('VALUERET'), Any, Resultado da query executada
/*/
Function customerBills(cType As Character, oStatement As Object, cCustomer As Character, cStore As Character, cBranchSA1 As Character, cSelect As Character) as Numeric
	Local cQuery  	  := "" 								as Character
	Local cWhere      := ""									as Character
	Local cBranchSE1 := Alltrim(cBranchSA1)					as Character
	Local nSizeFilSE1 := len(AllTrim(FwxFilial("SE1")))		as Numeric
	Local nSizeFilSA1 := Len(Alltrim(cBranchSA1))			as Numeric
	Local nValue	  := 0                  				as Numeric
	Local lExecCalcValue := .F.								as Logical
	Local lSE1Shared := nSizeFilSA1 >= nSizeFilSE1 			as Logical
	Local dDataDe := MonthSub(dDatabase, 12) 				as Date

	If lSE1Shared
		cBranchSE1 := FwXFilial("SE1", cBranchSA1)
	Endif

	If Empty(cSelect)
		cSelect := " COUNT(SE1.E1_NUM) "
	Endif

	If oStatement == NIL .OR. Empty(oStatement:cBaseQuery) 

		If !lSE1Shared
			cSubs   := totvs.protheus.backoffice.fin.functions.FunctionToDb("SUBSTRING")
			cIsNull := totvs.protheus.backoffice.fin.functions.FunctionToDb("ISNULL")
			cE1_filial := cIsNull + "(" + cSubs + "(SE1.E1_FILIAL, 1, " + cValToChar(nSizeFilSA1) +"),'" + Space(FwSizeFilial()) + "')"
		Else
			cE1_filial := "SE1.E1_FILIAL"
		EndIf
		
		Do Case 
			Case cType == "pendente"
				cWhere := " SE1.E1_SALDO > 0  AND SE1.E1_VENCREA >= '" + Dtos(dDatabase) + "' "		

			Case cType == "vencido"
				cWhere := " SE1.E1_SALDO > 0  AND SE1.E1_VENCREA < '" + Dtos(dDatabase) + "' "

			Case cType == "total_aberto"
				cWhere := " SE1.E1_SALDO > 0 "

			Case cType == "pagos"
				cWhere := " SE1.E1_SALDO = 0 "
				cWhere += " AND SE1.E1_BAIXA BETWEEN '"+DTos(dDataDe)+"' AND '"+DTos(dDataBase)+"' "
				cWhere +=     " AND NOT EXISTS (SELECT FI7.FI7_NUMORI "
				cWhere +=                     " FROM "+RetSqlName("FI7")+" FI7 "
				cWhere +=                     " WHERE  FI7.FI7_FILIAL = SE1.E1_FILIAL "
				cWhere +=                             " AND FI7.FI7_PRFORI = SE1.E1_PREFIXO "
				cWhere +=                             " AND FI7.FI7_NUMORI = SE1.E1_NUM "
				cWhere +=                             " AND FI7.FI7_PARORI = SE1.E1_PARCELA "
				cWhere +=                             " AND FI7.FI7_TIPORI = SE1.E1_TIPO "
				cWhere +=                             " AND FI7.FI7_CLIORI = SE1.E1_CLIENTE "
				cWhere +=                             " AND FI7.FI7_LOJORI = SE1.E1_LOJA "
				cWhere +=                             " AND FI7.D_E_L_E_T_ = ' ' ) "

			Case cType == "pagos_atraso"
				cWhere := " SE1.E1_SALDO = 0 AND SE1.E1_BAIXA > SE1.E1_VENCREA "	
				cWhere += " AND SE1.E1_BAIXA BETWEEN '"+DTos(dDataDe)+"' AND '"+DTos(dDataBase)+"' "
				cWhere +=     " AND NOT EXISTS (SELECT FI7.FI7_NUMORI "
				cWhere +=                     " FROM "+RetSqlName("FI7")+" FI7 "
				cWhere +=                     " WHERE  FI7.FI7_FILIAL = SE1.E1_FILIAL "
				cWhere +=                             " AND FI7.FI7_PRFORI = SE1.E1_PREFIXO "
				cWhere +=                             " AND FI7.FI7_NUMORI = SE1.E1_NUM "
				cWhere +=                             " AND FI7.FI7_PARORI = SE1.E1_PARCELA "
				cWhere +=                             " AND FI7.FI7_TIPORI = SE1.E1_TIPO "
				cWhere +=                             " AND FI7.FI7_CLIORI = SE1.E1_CLIENTE "
				cWhere +=                             " AND FI7.FI7_LOJORI = SE1.E1_LOJA "
				cWhere +=                             " AND FI7.D_E_L_E_T_ = ' ' ) "

			Case cType == "vencido_saldo_moeda"
				lExecCalcValue := .T.

				cWhere := " SE1.E1_TIPO NOT IN " + FormatIn(MVABATIM +"|"+ MVCOFINS +"|"+ MVPIS +"|"+ MVCS +"|"+ MVRECANT +"|"+ MV_CRNEG +"|"+ MVPROVIS,"|")
				cWhere += " AND SE1.E1_CLIENTE = '"+cCustomer+"' "
				cWhere += " AND SE1.E1_LOJA = '"+cStore+"' "
				cWhere += " AND " + cE1_filial + " = '"+cBranchSE1+"' "
				cWhere += " AND SE1.E1_SALDO > 0  AND SE1.E1_VENCREA < '" + Dtos(dDatabase) + "' "	
				nValue := totvs.protheus.backoffice.fin.functions.currencyBills("SE1", cWhere)	

			Case cType == "pendente_saldo_moeda"
				lExecCalcValue := .T.

				cWhere := " SE1.E1_TIPO NOT IN " + FormatIn(MVABATIM +"|"+ MVCOFINS +"|"+ MVPIS +"|"+ MVCS +"|"+ MVRECANT +"|"+ MV_CRNEG +"|"+ MVPROVIS,"|")
				cWhere += " AND SE1.E1_CLIENTE = '"+cCustomer+"' "
				cWhere += " AND SE1.E1_LOJA = '"+cStore+"' "
				cWhere += " AND " + cE1_filial + " = '"+cBranchSE1+"' "
				cWhere += " AND SE1.E1_SALDO > 0  AND SE1.E1_VENCREA >= '" + Dtos(dDatabase) + "' "
				nValue := totvs.protheus.backoffice.fin.functions.currencyBills("SE1", cWhere)

			Case cType == "pagos_valor_moeda"
				lExecCalcValue := .T.

				cWhere := " SE1.E1_TIPO NOT IN " + FormatIn(MVABATIM +"|"+ MVCOFINS +"|"+ MVPIS +"|"+ MVCS +"|"+ MVRECANT +"|"+ MV_CRNEG +"|"+ MVPROVIS,"|")
				cWhere += " AND SE1.E1_CLIENTE = '"+cCustomer+"' "
				cWhere += " AND SE1.E1_LOJA = '"+cStore+"' "
				cWhere += " AND " + cE1_filial + " = '"+cBranchSE1+"' "
				cWhere += " AND SE1.E1_SALDO = 0 "	
				cWhere += " AND SE1.E1_BAIXA BETWEEN '"+DTos(dDataDe)+"' AND '"+DTos(dDataBase)+"' "
				nValue := totvs.protheus.backoffice.fin.functions.currencyMovements("R", cWhere)

			Case cType == "pagos_atraso_valor_moeda"
				lExecCalcValue := .T.

				cWhere := " SE1.E1_TIPO NOT IN " + FormatIn(MVABATIM +"|"+ MVCOFINS +"|"+ MVPIS +"|"+ MVCS +"|"+ MVRECANT +"|"+ MV_CRNEG +"|"+ MVPROVIS,"|")
				cWhere += " AND SE1.E1_CLIENTE = '"+cCustomer+"' "
				cWhere += " AND SE1.E1_LOJA = '"+cStore+"' "
				cWhere += " AND " + cE1_filial + " = '"+cBranchSE1+"' "
				cWhere += " AND SE1.E1_SALDO = 0 AND SE1.E1_BAIXA > SE1.E1_VENCREA "	
				cWhere += " AND SE1.E1_BAIXA BETWEEN '"+DTos(dDataDe)+"' AND '"+DTos(dDataBase)+"' "
				nValue := totvs.protheus.backoffice.fin.functions.currencyMovements("R", cWhere)

		End Case
		
		If !lExecCalcValue
			cQuery := "SELECT ? VALUERET "
			cQuery += " FROM " + RetSqlName('SE1') + " SE1 "
			cQuery += " WHERE "
			cQuery += " SE1.E1_TIPO NOT IN " + FormatIn(MVABATIM +"|"+ MVCOFINS +"|"+ MVPIS +"|"+ MVCS +"|"+ MVRECANT +"|"+ MV_CRNEG +"|"+ MVPROVIS,"|")
			cQuery += " AND SE1.D_E_L_E_T_ = ' ' "
			cQuery += " AND SE1.E1_CLIENTE = ? "
			cQuery += " AND SE1.E1_LOJA = ? "
			cQuery += " AND " + cE1_filial + " = ? "

			If !Empty(cWhere)
				cQuery += " AND " + cWhere
			Endif

			cQuery += " GROUP BY " + cE1_filial + ", SE1.E1_CLIENTE, SE1.E1_LOJA "

			If oStatement == NIL
				If __lCacheQry
					oStatement := FwExecStatement():new(cQuery)
				Else
					oStatement := FWPreparedStatement():New(cQuery)
				Endif	
			Else
				oStatement:SetQuery(cQuery) 
			Endif
		Endif	
	Endif	

	If !lExecCalcValue .and. oStatement <> NIL
		oStatement:SetUnSafe(1, cSelect)
		oStatement:SetString(2, cCustomer)
		oStatement:SetString(3, cStore)
		oStatement:SetString(4, cBranchSE1)

		If __lCacheQry
			nValue := oStatement:ExecScalar('VALUERET')
		Else
			nValue := MPSysExecScalar(oStatement:GetFixQuery(), "VALUERET")
		Endif	
	Endif	
			
Return nValue

/*/{Protheus.doc} customerLimitCredit
	Função que verifica o saldo e valor do limite de credito do cliente
	@type  Function
	@author Vitor Duca
	@since 14/11/2022
	@version 1.0
	@param cBranch, Character, Filial do cadastro do cliente
	@param cCustomer, Character, Codigo do cliente
	@param cStore, Character, Filial do cadastro do cliente
	@return return_var, return_type, return_description
	@example
	customerLimitCredit("D MG ", "000001", "01")
/*/
Function customerLimitCredit(cBranch As Character, cCustomer As Character, cStore As Character) As Array
	Local cCredCli	:= GetMv("MV_CREDCLI",,"L")	As Character
	Local aLimitCredit := {} As Array 
	Local cQuery := ""	As Character
	Local cAliasTmp := "" As Character
	Local aArea := FwGetArea() As Array
	Local aAreaSA1 := SA1->(FwGetArea()) As Array
	Local cIsNull := totvs.protheus.backoffice.fin.functions.FunctionToDb("ISNULL") As Character

	If cCredCli == "L"
		SA1->(DbSetOrder(1))
		SA1->(MsSeek(Padr(cBranch, TamSx3("A1_FILIAL")[1]) + Padr(cCustomer, TamSx3("A1_COD")[1]) + Padr(cStore, TamSx3("A1_LOJA")[1])))

		Aadd(aLimitCredit, SA1->A1_LC)
		Aadd(aLimitCredit, SA1->(A1_LC - (Abs(A1_SALDUPM) + Abs(A1_SALPEDL))))
	Else
		cQuery += "SELECT "+cIsNull+"(SUM(A1_LC),0) LIMITE, "+cIsNull+"(SUM(A1_LC),0) - (" +cIsNull+"(SUM(A1_SALDUPM),0) + "+cIsNull+"(SUM(A1_SALPEDL),0) ) SALDO "
		cQuery += " FROM " + RetSqlName("SA1")
		cQuery += " WHERE "
		cQuery += " A1_FILIAL = '" + Padr(cBranch, TamSx3("A1_FILIAL")[1]) + "' "
		cQuery += " AND A1_COD = '" + Padr(cCustomer, TamSx3("A1_COD")[1]) + "' "
		cQuery += " AND D_E_L_E_T_ = ' ' "

		cAliasTmp := MPSysOpenQuery(cQuery)

		If (cAliasTmp)->(!Eof())
			Aadd(aLimitCredit, (cAliasTmp)->LIMITE)
			Aadd(aLimitCredit, (cAliasTmp)->SALDO)
		Endif
		(cAliasTmp)->(DbCloseArea())
	Endif

	FwRestArea(aAreaSA1)
	FwRestArea(aArea)

Return AClone(aLimitCredit)
