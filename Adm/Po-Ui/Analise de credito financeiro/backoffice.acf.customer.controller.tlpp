#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'backoffice.acf.customer.controller.ch'

NAMESPACE totvs.protheus.backoffice.acf.customer
USING NAMESPACE totvs.protheus.backoffice.fin.apiutil

/*/{Protheus.doc} getVersion
	Retorna a versão da API
	@type  Function
	@author Vitor Duca
	@since 07/11/2022
	@version 1.0
	@return nVersion, Numeric, Versão atual da API
/*/
Function getVersion()
Return 1

/*/{Protheus.doc} creditCustomerById
	EndPoint para retorna os valores que serão utilizados na analise de credito do cliente
	@type  Function
	@author Vitor Duca
	@since 26/10/2022
	@version 1.0
/*/
@GET('/api/fin/v1/customers/:id/credit')
Function creditCustomerById()
	Local cId       := "" as Character
	Local jResponse := NIL as Json
	Local oService  := NIL as Object
	Local oError    := NIL as Object
	Local oHeader   := NIL As Json

	BEGIN SEQUENCE
		oHeader   := oRest:getHeaderRequest()
		cId       := oRest:getPathParamsRequest()['id'] 
		jResponse := JsonObject():new() 
		oService  := CreditCustomer():new() 
		oError    := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})

		If !Empty(Alltrim(cId))
			oService:setKeyCustomer(cId)
			oService:setHeaderRequest(oHeader)   
			jResponse := oService:getById()
		Else
            jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0001, STR0002) //"Não foi possivel verificar o crédito do cliente"#"Para o correto funcionamento o id do cliente(A1_FILIAL|A1_COD|A1_LOJA) deve ser informado"
        Endif

		If jResponse:HasProperty("result")	
			totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)
		Else
			oRest:setStatusCode(200)	
			oRest:setResponse(jResponse)
			oRest:setKeyHeaderResponse("Content-Type", "application/json; charset=utf-8")
			oRest:setKeyHeaderResponse("Accept-Encoding", "UTF-8")
		Endif
		
	END SEQUENCE

	ErrorBlock(oError)
	oService:destroy()
Return

/*/{Protheus.doc} postAnalysisVadu
	EndPoint para realizar a consulta de credito no VADU 
	@type  Function
	@author Vitor Duca
	@since 01/11/2022
	@version 1.0
/*/
@POST('/api/fin/v1/customers/vadu/analysis')
Function postAnalysisVadu()
	Local jResponse := JsonObject():new() as Json
	Local oService  := NIL as Object
	Local oError    := NIL  as Object
	Local oBody		:= JsonObject():new() As Json
	Local cErrorParse := "" As Character

	BEGIN SEQUENCE
		oError := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})
		cErrorParse := oBody:FromJson(oRest:GetBodyRequest())
		oService  := CreditCustomer():new() 
		If oService:IsLicenseActive() 
			If Empty(cErrorParse)
				oService:setBodyRequest(oBody)
				jResponse := oService:postVadu()
			Else
				jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0003, cErrorParse) //"Erro na sintaxe do body"
			Endif
		Else
			jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 412, STR0013, STR0014) //"Não foi possivel obter a licença" # "Verificamos que não foi realizado no ambiente o processo de contratação da licença, para utilização dos serviços do CreditBox da Dimensa"
		Endif

		If jResponse:HasProperty("result")	
			totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)
		Else
			oRest:setStatusCode(200)	
			oRest:setResponse(jResponse)
			oRest:setKeyHeaderResponse("Content-Type", "application/json; charset=utf-8")
			oRest:setKeyHeaderResponse("Accept-Encoding", "UTF-8")
		Endif

	END SEQUENCE

	ErrorBlock(oError)
	oService:destroy()
Return

/*/{Protheus.doc} getAnalysisVadu
	EndPoint para realizar a consulta de credito no VADU 
	@type  Function
	@author Vitor Duca
	@since 01/11/2022
	@version 1.0
/*/
@GET('/api/fin/v1/customers/:idcustomer/vadu/analysis/:idvadu')
Function getAnalysisVadu()
	Local jResponse := JsonObject():new() as Json
	Local oService  := NIL as Object
	Local oError    := NIL  as Object
	Local cIdVadu   := "" As Character
	Local cIdCustomer := "" As Character

	BEGIN SEQUENCE
		oError := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})
		cIdVadu    := oRest:getPathParamsRequest()['idvadu']
		cIdCustomer := oRest:getPathParamsRequest()['idcustomer']
		oService  := CreditCustomer():new() 
		If oService:IsLicenseActive()
			If !Empty(Alltrim(cIdVadu))
				oService:setPathParam(cIdVadu)
				oService:setKeyCustomer(cIdCustomer)
				jResponse := oService:getVaduByID()
			Else
				jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0004, STR0005) //"Não foi possivel realizar a requisição"#"PathParam não foi informada"
			Endif
		Else
			jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 412, STR0013, STR0014) //"Não foi possivel obter a licença" # "Verificamos que não foi realizado no ambiente o processo de contratação da licença, para utilização dos serviços do CreditBox da Dimensa"
		Endif	
		
		If jResponse:HasProperty("result")	
			totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)
		Else
			oRest:setStatusCode(200)	
			oRest:setResponse(jResponse)
			oRest:setKeyHeaderResponse("Content-Type", "application/json; charset=utf-8")
			oRest:setKeyHeaderResponse("Accept-Encoding", "UTF-8")
		Endif	
	END SEQUENCE

	ErrorBlock(oError)
	oService:destroy()
Return

/*/{Protheus.doc} postHistoryLimit
	EndPoint para gravar as informações de alteração do limite no cliente
	@type  Function
	@author Vitor Duca
	@since 26/10/2022
	@version 1.0
/*/
@POST('/api/fin/v1/customers/historylimit')
Function postHistoryLimit()
	Local jResponse := NIL as Json
	Local oService  := NIL as Object
	Local oError    := NIL as Object
	Local oBody		:= NIL As Json
	Local cErrorParse := "" As Character

	BEGIN SEQUENCE
		jResponse := JsonObject():new() 
		oBody	  := JsonObject():new()
		oError    := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})
		cErrorParse := oBody:FromJson(DecodeUTF8(oRest:GetBodyRequest()))
		If AliasInDic("F7F")
			If Empty(cErrorParse)
				oService  := CreditCustomer():new() 
				oService:setBodyRequest(oBody)
				jResponse := oService:postHistory()
				oService:destroy()
			Else
				jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0003, cErrorParse) //"Erro na sintaxe do body"
			Endif
		Else
			jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0006, STR0007)//"Erro de dicionario" # "Tabela F7F não existe no dicionario"
		Endif	

		totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)
	END SEQUENCE
	
	ErrorBlock(oError)
Return

/*/{Protheus.doc} putBloqCustomer
	EndPoint para realizar o bloqueio do cliente
	@type  Function
	@author Vitor Duca
	@since 17/11/2022
	@version 1.0
/*/
@PUT('/api/fin/v1/customers/:id/block')
Function putBloqCustomer()
	Local jResponse := NIL as Json
	Local oService  := NIL as Object
	Local oError    := NIL as Object
	Local oBody		:= NIL As Json
	Local cErrorParse := "" As Character
	Local cId := "" As Character

	BEGIN SEQUENCE
		oError    := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})

		If VerSenha(143)
			jResponse := JsonObject():new() 
			oBody	  := JsonObject():new()
			cErrorParse := oBody:FromJson(DecodeUTF8(oRest:GetBodyRequest()))
			cId       := oRest:getPathParamsRequest()['id'] 
			If AliasInDic("F7F")
				If Empty(cErrorParse)
					oService  := CreditCustomer():new() 
					oService:setBodyRequest(oBody)
					oService:setHeaderRequest(oRest:getHeaderRequest())
					oService:setKeyCustomer(cId)
					jResponse := oService:putBlockCustomer()
					oService:destroy()
				Else
					jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0003, cErrorParse) //"Erro na sintaxe do body"
				Endif
			Else
				jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0006, STR0007) //"Erro de dicionário" # "Tabela F7F não existe no dicionário"
			Endif
		Else
			jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 401, STR0010, STR0011) //"Não será possivel bloquear o cliente"#"Usuário sem permissão para alterar o cadastro de cliente (opção 143 do configurador)"
		Endif		

		totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)

	END SEQUENCE

	ErrorBlock(oError)
Return

/*/{Protheus.doc} putCreditCustomer
	EndPoint para realizar o ajuste de crédito do cliente
	@type  Function
	@author Vitor Duca
	@since 18/11/2022
	@version 1.0
/*/
@PUT('/api/fin/v1/customers/:id/newcredit')
Function putCreditCustomer()
	Local jResponse := NIL as Json
	Local oService  := NIL as Object
	Local oError    := NIL as Object
	Local oBody		:= NIL As Json
	Local cErrorParse := "" As Character
	Local oHeader   := NIL As Json
	Local cId := "" As Character

	BEGIN SEQUENCE
		oError    := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})

		If VerSenha(143)
			jResponse := JsonObject():new() 
			oBody	  := JsonObject():new()
			cErrorParse := oBody:FromJson(DecodeUTF8(oRest:GetBodyRequest()))
			oHeader   := oRest:getHeaderRequest()
			cId       := oRest:getPathParamsRequest()['id'] 
			If AliasInDic("F7F")
				If Empty(cErrorParse)
					oService  := CreditCustomer():new() 
					oService:setBodyRequest(oBody)
					oService:setHeaderRequest(oHeader)
					oService:setKeyCustomer(cId)
					jResponse := oService:putNewCreditCustomer()
					oService:destroy()
				Else
					jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0003, cErrorParse) //"Erro na sintaxe do body"
				Endif
			Else
				jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0006, STR0007) //"Erro de dicionário" # "Tabela F7F não existe no dicionário"
			Endif
		Else
			jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 401, STR0012, STR0011) //"Não será possivel ajustar o crédito do cliente"#"Usuário sem permissão para alterar o cadastro de cliente (opção 143 do configurador)"
		Endif

		totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)

	END SEQUENCE
		
	ErrorBlock(oError)
Return

/*/{Protheus.doc} getCustomerAttachments
	EndPoint para retornar os anexos do historico de credito do cliente
	@type  Function
	@author Vitor Duca
	@since 16/12/2022
	@version 1.0
/*/
@GET('/api/fin/v1/customers/history/:id/attachments')
Function getCustomerAttachments()
	Local jResponse := JsonObject():new() as Json
	Local oService  := NIL as Object
	Local oError    := NIL  as Object
	Local cId   := "" As Character

	BEGIN SEQUENCE
		oError := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})
		cId    := oRest:getPathParamsRequest()['id']
		oService  := CreditCustomer():new() 
		
		jResponse := oService:getAttachments(cId)
		
		If jResponse == NIL	
			jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0008, STR0009) //"Não foi possivel baixar os anexos"#"Não foram encontrados os anexos para o histórico"
			totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)
		Else
			oRest:setStatusCode(200)	
			oRest:setResponse(jResponse)
			oRest:setKeyHeaderResponse("Content-Type", "application/json; charset=utf-8")
			oRest:setKeyHeaderResponse("Accept-Encoding", "UTF-8")
		Endif

	END SEQUENCE

	ErrorBlock(oError)
	oService:destroy()
Return
