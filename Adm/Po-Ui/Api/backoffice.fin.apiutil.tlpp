#include 'tlpp-core.th'

NAMESPACE totvs.protheus.backoffice.fin.apiutil

/*/{Protheus.doc} normalizeIndex
	tratamento do indice para remover caracteres não utilizados fora do protheus
	@type  Function
	@author renato.ito
	@since 20/10/2022
	@param cIndex, character, indice do protheus
	@return cIndex, character, indece tratado
/*/
Function normalizeIndex(cIndex as Character) as Character
	cIndex := StrTran(cIndex, 'DTOS', '')
	cIndex := StrTran(cIndex, '(', '')
	cIndex := StrTran(cIndex, ')', '')
	cIndex := StrTran(cIndex, '+', ',')
Return cIndex

/*/{Protheus.doc} internalError
	tratamento de erro para o retorno
	@type  Static Function
	@author rento.ito
	@since 12/10/2022
	@param oError, object, objeto ErrorBlock
	@return oRest, object, objeto oRest
/*/
Function internalError(oError as Object, oRest as Object)
	Local jResponse := JsonObject():new()

	jResponse[ 'code' ]            := '500'
	jResponse[ 'message' ]         := oError:description
	jResponse[ 'detailedMessage' ] := oError:errorStack 
	oRest:setKeyHeaderResponse("Content-Type", "application/json")
	oRest:setStatusCode(500)
	oRest:setFault(jResponse:toJson())
	BREAK
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} AnswerRest
Envio o resultado de sucesso ou falha para o serviço rest,
fazendo ja o tratamento do statusCode
@param jServiceResponse Objeto json de resposta. Deve conter os seguintes atributos:
    - {
        "result" : true ou false 
        "response" : json de resposta
        "statusCode": código http de resposta quando necessário

    }
@author Renato Ito
@since 03/08/2020
/*/
//-------------------------------------------------------------------
Function AnswerRest(jServiceResponse As Json)

	oRest:setKeyHeaderResponse("Accept-Encoding", "UTF-8")
	oRest:setKeyHeaderResponse("Content-Type", "application/json; charset=utf-8")
	
    If ( jServiceResponse["result"] )
        oRest:setResponse( jServiceResponse[ "response" ] ) 
    Else
        oRest:setFault(jServiceResponse[ "response" ]:toJson())
    Endif

	If ( jServiceResponse[ "statusCode" ] != nil )
		oRest:setStatusCode( jServiceResponse[ "statusCode" ] )  
	Endif
	FreeObj(jServiceResponse)
	jServiceResponse := nil
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} answerFormat
Formata a respota que será enviada via API

@param 	lSucess, Logical, define se é uma mensagem de sucesso ou falha
		statusCode, numeric, status code
		message, character, mensagem de erro
		detailed, character, mensagem detalhada

@return jRet, Json, json com os atributos de acordo com a 
documentação https://po-ui.io/documentation/po-http-interceptor - topico estrutura das mensagens

@author Vitor Duca
@since 10/01/2021
/*/
//-------------------------------------------------------------------
Function answerFormat(lSucess As Logical, nStatusCode As Numeric, cMessage As Character, cDetailed As Character) As Json
	Local jRet As Json
	Local aResponse := {} As Array

	If lSucess 
		Aadd(aResponse, {"type":"success","code": cValToChar(nStatusCode),"message": FwHttpEncode(cMessage),"detailedMessage": FwHttpEncode(cDetailed)})

		jRet := {;
					"result": lSucess ,;
					"statusCode": nStatusCode,;
					"response": {;
						"_messages": aResponse;
					};
				}
	Else
		jRet := {;
			"result": lSucess , ;
			"statusCode": nStatusCode,;
			"response": {;
				"code": cValToChar(nStatusCode),;
				"message": FwHttpEncode(cMessage),;
				"detailedMessage": FwHttpEncode(cDetailed);
			};
		}
	Endif

return jRet

/*/
{Protheus.doc} jsonStringToDate
	Converte string no formato json (yyyy-M-d ou yyyy-MM-d ou yyyy-M-dd ou yyyy-MM-dd) para o formato utilizado no Banco de Dados.

	@param json date as Character, data em string formato json de uma API
	@Return Character, data formatada (yyyyMMdd)

	@author Daniel Muniz (daniel.muniz)
	@since 22/08/2022
/*/
Function jsonStringToIso(cData As Character) As Character 
Return SubStr(cData, 1, 4) + PadL(StrTran(SubStr(cData, 6, 2), '-', ''), 2, '0') + PadL(StrTran(SubStr(cData, 8, 3), '-', ''), 2, '0')

/*/
{Protheus.doc} stringIsoToDate
	Converte string no formato ISO (yyyy-MM-dd) para o tipo Date.

	@param cDateIso as Character, data em string formato ISO
	@Return dNewDate as Date, data formatada

	@author Vinicius do Prado
	@since 14/03/2022
/*/
Function stringIsoToDate(cDateIso As Character) As Date
  Local aMatriz := {} As Array
  Local dNewDate As Date

  aMatriz := fwDateTimeToLocal(cDateIso)
  dNewDate := aMatriz[1]
Return dNewDate


/*/{Protheus.doc} formatFilterIn
	Função que possui o mesmo conceito da FormatIn, a diferença é que 
	não sera montado uma expressão em SQL e sim uma expressão de filtro oData
	para ser usado nas API's
	@type  Function
	@author Vitor Duca
	@since 01/12/2022
	@version 1.0
	@param cField, Character, Campo que deve ser considerado no filtro
	@param cString, Character, String contendo as informação que serão avaliadas
	@param cSeparator, Character, Separador que esta contido em cString utilizado para cortar as informações
	@return return_var, return_type, return_description
	@example
	formatFilterIn("e1_tipo", "NF|BOL", "|")
/*/
Function formatFilterIn(cField as Character, cString as Character, cSeparator as Character) As Character
   	Local cRet := "" As Character 
    Local nPoSeparator := 0 As Numeric

   While .T.
      	// localiza a posicao do separador e separa a string encontrada
		nPoSeparator := AT(cSeparator, cString)
		If nPoSeparator <> 0
			cRet += "and " + cField + " ne '" + LEFT(cString, nPoSeparator - 1) + "' "
			cString := SUBSTR(cString, nPoSeparator + 1)

			If Empty(cString)
				Exit
			Endif	
		Else
			cRet += "and " + cField + " ne '" + cString + "' "
			Exit
		Endif			
   EndDo

Return cRet
