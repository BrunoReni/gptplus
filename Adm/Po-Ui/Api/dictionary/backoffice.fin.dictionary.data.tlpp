#include 'tlpp-core.th'
#include 'backoffice.fin.dictionary.data.ch'

NAMESPACE totvs.protheus.backoffice.fin.dictionary

/*/{Protheus.doc} getDictionary
	funÃ§Ã£o principal para acionar as funÃ§Ãµes necessÃ¡rias para o retorno
	@type  Function
	@author renato.ito
	@since 20/10/2022
	@param cId, Character, alias
	@return jDictionary, Json, json
	{
		title: string,
		folders: Array,
		fields: Array
	}
/*/
Function getDictionary(cId as Character) as Json
	Local aTables     := STRTOKARR(UPPER(cId), ',' ) as Array
	Local nTable      := 0                           as Numeric
	Local jDictionary := JsonObject():New()          as Json
	Local cName       := ""                          as Character
	Local cTable      := ""                          as Character

	For nTable := 1 To Len(aTables)
		cTable := aTables[nTable]
		cName := FwSX2Util():GetX2Name(cTable)
		If !Empty(cName)
			jDictionary[cTable]                 := JsonObject():new()
			jDictionary[cTable]['title']        := cName
			jDictionary[cTable]['fields']       := fields(cTable)
			jDictionary[cTable]['folders']      := folders(cTable)
			jDictionary[cTable]['modeAccess']   := modeAccess(cTable)         
		EndIf
	Next nTable
Return jDictionary

/*/{Protheus.doc} indexFields
	verifica os campos que fazem parte dos indices
	@type  Function
	@author renato.ito
	@since 20/10/2022
	@version version
	@param cTable, Character, nome da tabela
	@return aFields, array, lista de campos que fazem parte de indices
/*/
Function indexFields(cTable as Character) as Array
	Local aIndex  := FWSIXUtil():GetAliasIndexes(cTable) as Array
	Local nIndex  := 1                                   as Numeric
	Local nField  := 1                                   as Numeric
	Local cField  := ""                                  as Character
	Local aFields := {}                                  as Array

	For nIndex := 1 To Len(aIndex)
		For nField := 1 To Len(aIndex[nIndex])
			cField := aIndex[nIndex][nField]
			cField := StrTran(cField, "DTOS(", "")
			cField := StrTran(cField, ")", "")
			If !AScan(aFields, cField) > 0
				Aadd(aFields, cField)
			EndIf
		Next nField
	Next nIndex
Return aFields

/*/{Protheus.doc} fields
	retorna a estrutura dos campos
	@type  Function
	@author renato.ito
	@since 20/10/2022
	@version version
	@param cTable, Character, nome da tabela
	@return aFields, array, lista de campos com suas propriedades
/*/
Function fields(cTable as Character) as Array
	Local aResponse  := {}                                    as Array
	Local aFields    := FWSX3Util():GetAllFields(cTable, .F.) as Array
	Local nField     := 1                                     as Numeric
	Local cField     := ""                                    as Character
	Local aStruct    := {}                                    as Array
	Local aSortables := indexFields(cTable)                   as Array

	For nField := 1 To Len(aFields)
		cField  := aFields[nField]
		aStruct := FWSX3Util():GetFieldStruct(cField)
		Aadd(aResponse, {;
			"field"         : Lower(cField),;
			"type"          : aStruct[2],;
			"size"          : aStruct[3],;
			"decimal"       : aStruct[4],;
			"title"         : AllTrim(FwX3Titulo(cField)),;
			"description"   : AllTrim(FWSX3Util():GetDescription(cField)),;
			"order"         : GetSX3Cache(cField, 'X3_ORDEM'),;
			"usado"         : X3Uso(GetSX3Cache(cField, 'X3_USADO'), 6),;
			"folder"        : AllTrim(GetSX3Cache(cField, 'X3_FOLDER')),;
			"browser"       : GetSX3Cache(cField, 'X3_BROWSE' ) == 'S',;
			"options"       : getOptionsField(cField),;
			"required"      : X3Obrigat(cField),;
			"standardQuery" : AllTrim(GetSX3Cache(cField, 'X3_F3')),;
			"sortable"      : AScan(aSortables, cField) > 0;
		})
	Next nField
Return aResponse

/*/{Protheus.doc} getOptionsField
	retorna as opÃ§oes do campo (X3_CBOX)
	@type  Function
	@author renato.ito
	@since 20/10/2022
	@version version
	@param cField, Character, campo que serÃ¡ consultado
	@return aOptions, array, lista de opÃ§Ãµes
/*/
Function getOptionsField(cField as Character) as Array
	Local aOptions := {} as Array
	Local aX3CBOX  := {} as Array
	Local nOption  := 1  as Numeric

	If !Empty(AllTrim(GetSX3Cache(cField, 'X3_CBOX' )))
		aX3CBOX := RetSX3Box(GetSX3Cache(cField, "X3_CBOX" ),,,1)
		For nOption := 1 To Len(aX3CBOX)
			If !Empty(aX3CBOX[nOption][1])
				AAdd(aOptions, {;
					"value": aX3CBOX[nOption][2],;
					"label": AllTrim(aX3CBOX[nOption][3]);
				})
			EndIf
		Next nOption
	EndIf
Return aOptions

/*/{Protheus.doc} getOptionsField
	retorna as folders da tabela
	@type  Function
	@author renato.ito
	@since 20/10/2022
	@version version
	@param cField, Character, campo que serÃ¡ consultado
	@return aFolders, array, lista de falders da tabela
/*/
Function folders(cTable as Character) as Array
	Local oStruct  := FWFormStruct(2, cTable, {||.F.}, .F., .F., .F.) as Object
	Local nFolder  := 1                                               as Numeric
	Local aFolders := {}                                              as Array

	For nFolder := 1 To Len(oStruct:aFolders)
		Aadd(aFolders, {;
			'value' : oStruct:aFolders[nFolder]['CID'],;
			'label' : oStruct:aFolders[nFolder]['CTITULO'];
		})
	Next nFolder

	If Empty(aFolders) // Se não existe folder adiciona Detalhes como default
		Aadd(aFolders, {;
			'value' : '',;
			'label' : STR0001; // Detalhes
		})
	Else
		Aadd(aFolders, {;
			'value' : '',;
			'label' : STR0002; // Outros
		})
	EndIf
Return aFolders

/*/{Protheus.doc} modeAccess
	Retorna as informações de compartilhamento da tabela passada por parametro
	@type  Function
	@author Vitor Duca
	@since 08/11/2022
	@version 1.0
	@param cTable, Character, Prefixo da tabela que sera validada (Ex: SE1)
	@return jModeAccess, Json, Json que contem as informações do compartilhamento da tabela
/*/
Function modeAccess(cTable As Character) As Json
	Local jModeAccess := JsonObject():new()

	jModeAccess['company']     := FWModeAccess(cTable, 01)
	jModeAccess['companySize'] := Len(FWSM0Layout(, 1))
	jModeAccess['unit']        := FWModeAccess(cTable, 02)
	jModeAccess['unitSize']    := Len(FWSM0Layout(, 2))
	jModeAccess['branch']      := FWModeAccess(cTable, 03)
	jModeAccess['branchSize']  := Len(FWSM0Layout(, 3))

Return jModeAccess
