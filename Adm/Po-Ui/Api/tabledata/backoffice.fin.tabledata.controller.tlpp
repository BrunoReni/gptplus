#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'backoffice.fin.tabledata.controller.ch'

NAMESPACE totvs.protheus.backoffice.fin.tabledata
USING NAMESPACE totvs.protheus.backoffice.fin.apiutil

/*/{Protheus.doc} getVersion
	Retorna a versão da API
	@type  Function
	@author user
	@since 07/11/2022
	@version version
	@return nVersion, Numeric, Versão atual da API
	@see (links_or_references)
/*/
Function getVersion()
Return 1

/*/{Protheus.doc} apiTableDataAlias
	EndPoint para retorna lista de registros de tabelas do sistema
	@type  Function
	@author renato.ito
	@since 11/10/2022
	@version version
/*/
@GET('/api/fin/v1/tabledata/alias/:id')
Function apiTableDataAlias()
	Local cId       := oRest:getPathParamsRequest()['id'] as Character
	Local jResponse := JsonObject():new() as Json
	Local oService  := TableData():new() as Object
	Local oError    := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})

	BEGIN SEQUENCE
		If !Empty(cId)
			If AliasInDic(cId)
				If !IsModuleRH(cId)
					oService:prepareItems(cId, oRest:getQueryRequest() , oRest:getHeaderRequest())
					jResponse := oService:getResponse()
				Else
					jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0001, STR0002 + cId + STR0003) //"Não foi possivel realizar a consulta"#"Tabela "#" não está disponivel para consulta"
				Endif	
			Else
				jResponse := totvs.protheus.backoffice.fin.apiutil.answerFormat(.F., 400, STR0005, STR0002 + cId + STR0004)//"Erro de dicionário"#"Tabela "#" não existe no dicionário de dados"
			Endif	
		EndIf
		
		If ValType(jResponse) == "J" .and. jResponse:HasProperty("result")	
			totvs.protheus.backoffice.fin.apiutil.AnswerRest(jResponse)
		Else
			oRest:setResponse(jResponse)
			oRest:setKeyHeaderResponse("Content-Type", "application/json")
		Endif

	END SEQUENCE
	ErrorBlock(oError)

	oService:destroy()
Return

/*/{Protheus.doc} apiTableDataCustom
	EndPoint para retorna lista de registros com customizações
	@type  Function
	@author renato.ito
	@since 11/10/2022
	@version version
/*/
@GET('/api/fin/v1/tabledata/custom/:id')
Function apiTableDataCustom()
	Local cId       := oRest:getPathParamsRequest()['id'] as Character
	Local jResponse := JsonObject():new() as Json
	Local oService  := TableData():new() as Object
	Local oError    := ErrorBlock({|e| totvs.protheus.backoffice.fin.apiutil.internalError(e, oRest)})

	BEGIN SEQUENCE
		If !Empty(cId)
			oService:prepareItemsCustom(cId, oRest:getQueryRequest() , oRest:getHeaderRequest())
			jResponse := oService:getResponse()
		EndIf
		oRest:setResponse(jResponse)
		oRest:setKeyHeaderResponse("Content-Type", "application/json")
	END SEQUENCE
	ErrorBlock(oError)

	oService:destroy()
Return

/*/{Protheus.doc} isModuleRH
	Verifica se a tabela que esta sendo consultada pertence ao modulo RH
	@type  Function
	@author Vitor Duca
	@since 02/12/2022
	@version 1.0
	@param cTable, Character, Prefixo da tabela
	@return lIsRH, Logical, Retorna se a tabela pertence ao modulo RH 
/*/
Function isModuleRH(cTable As Character) As Logical
	Local aModulos := {7, 16, 20, 40, 53, 61, 75} As Array
	Local nX := 0 As Numeric
	Local lIsRH := .F. As Logical

	For nX := 1 to Len(aModulos)
		lIsRH := FwSX2Util():GetX2Module(cTable) == aModulos[nX]

		If lIsRH
			Exit
		Endif	
	Next nX 
	
Return lIsRH
