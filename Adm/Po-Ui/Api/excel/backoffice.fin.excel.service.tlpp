#include 'tlpp-core.th'
#include 'backoffice.fin.excel.service.ch'

NAMESPACE totvs.protheus.backoffice.fin.excel
USING NAMESPACE totvs.protheus.backoffice.fin.tabledata
USING NAMESPACE totvs.protheus.backoffice.fin.apiutil

Class FINDTEXCELREPORT 
    Private Data cTable As Character
    Private Data cError As Character
    Private Data aBind As Array
    Public Data cNameArq As Character
    Private Data cDirectory As Character
    Private Data oServiceTable As Object
    Private Data jQueryParams As Json

    Public Method new() CONSTRUCTOR

    Public Method setTable(cTable)
    Public Method setQueryParams(jQueryParams)
    Public Method getError()
    Public Method getDirectory()

    Public Method execute()
    Private Method createItems()
End Class

/*/{Protheus.doc} new
    Construtor da classe
    @author Vitor Duca
    @since 06/12/2022
    @version 1.0
    @param cNameArq, Character, Nome do arquivo que sera gerado
/*/
Method new(cNameArq As Character) Class FINDTEXCELREPORT
    ::cTable := ""
    ::jQueryParams := JsonObject():new()
    ::cError := ""
    ::aBind := {}
    ::cNameArq := cNameArq
    ::oServiceTable := totvs.protheus.backoffice.fin.tabledata.TableData():new()
Return

/*/{Protheus.doc} setTable
    Adiciona a tabela que sera utilizada para consulta
    @author Vitor Duca
    @since 06/12/2022
    @version 1.0
    @param cTable, Character, Prefixo da tabela
    @return lRet, Logical, Retorna se a tabela existe no sistema
/*/
Method setTable(cTable As Character) Class FINDTEXCELREPORT
    Local lRet := .T. As Logical

    ::cTable := cTable

    If !AliasInDic(cTable)
        ::cError := STR0001 + cTable + " " + STR0002 //"Tabela "#"não existe no dicionário"
        lRet := .F.
    Endif
    
Return lRet

/*/{Protheus.doc} setQueryParams
    Configura a classe de acordo com o queryparams informado
    @author Vitor Duca
    @since 06/12/2022
    @version 1.0
    @param jQueryParams, Json, params da requisição
/*/
Method setQueryParams(jQueryParams as Json) Class FINDTEXCELREPORT
    If ValType(jQueryParams) == "J"
        ::jQueryParams:FromJson(jQueryParams:ToJson())    
    Endif
Return 

/*/{Protheus.doc} getError
    Retorna os erros da classe
    @author Vitor Duca
    @since 06/12/2022
    @version 1.0
/*/
Method getError() Class FINDTEXCELREPORT
Return ::cError

/*/{Protheus.doc} getDirectory
    Retorna o diretorio onde o arquivo foi gerado
    @author Vitor Duca
    @since 06/12/2022
    @version 1.0
    @return cDirectory, Character, Diretorio onde o arquivo foi gerado
/*/
Method getDirectory() Class FINDTEXCELREPORT  
Return ::cDirectory

/*/{Protheus.doc} execute
    Criação do excel
    @author Vitor Duca
    @since 06/12/2022
    @version 1.0
/*/
Method execute() Class FINDTEXCELREPORT
    
	Local oFwMsEx    := NIL As Object
	Local cWorkSheet := ""  As Character
	Local cTable     := ""  As Character
    Local lRet       := .T. As Logical
    Local aStruct    := {} As Array
    Local nTypeColumn := 0  As Numeric
    Local aValuesRow := {}  As Array
    Local jItems     := JsonObject():new() As Json
    Local cField     := "" As Character
    Local nItems     := 0 As Numeric
    Local nStruct    := 0 As Numeric

    If ::createItems(@jItems)

        aStruct := STRTOKARR(::oServiceTable:cAddFields, ',') 
        
        oFwMsEx := FWMsExcelEx():New()  
        cTable     := FwSX2Util():GetX2Name(::cTable)
        cWorkSheet := cTable + " - " + DtoC( Date() )
        oFwMsEx:AddWorkSheet( cWorkSheet )
        oFwMsEx:AddTable( cWorkSheet, cTable, .F. )

        For nStruct := 1 to Len(aStruct)
            cField := Upper(aStruct[nStruct])
            Do Case
                Case FWSX3Util():GetFieldType(cField) == "C"
                    nTypeColumn := 1
                Case FWSX3Util():GetFieldType(cField) == "N"
                    nTypeColumn := 2
                Case FWSX3Util():GetFieldType(cField) == "D"
                    nTypeColumn := 4
            End Case

            oFwMsEx:AddColumn( cWorkSheet, cTable , Alltrim(Upper(FwX3Titulo(cField))), 1, nTypeColumn, /*lTotal*/)
        Next nStruct
        
        For nItems := 1 To len(jItems["items"])
            aValuesRow := {}

            For nStruct := 1 to Len(aStruct)
                If  FWSX3Util():GetFieldType(aStruct[nStruct]) == "D"
                    Aadd(aValuesRow, Stod(totvs.protheus.backoffice.fin.apiutil.jsonStringToIso(jItems["items"][nItems][lower(aStruct[nStruct])])))
                Else
                    Aadd(aValuesRow, jItems["items"][nItems][lower(aStruct[nStruct])])
                Endif
            Next nStruct

            oFwMsEx:AddRow( cWorkSheet, cTable, aValuesRow)

        Next nItems

        oFwMsEx:Activate()

        ::cNameArq += ".xml"
        ::cDirectory := Iif(IsSrvUnix(), "/spool/", "\spool\") + ::cNameArq
        oFwMsEx:GetXMLFile( ::cDirectory )
        
    Else
        lRet := .F.
    Endif  

Return lRet

/*/{Protheus.doc} createItems
    Cria o json que sera utilizado para gravar os valores das linhas no
    Excel
    @author Vitor Duca
    @since 06/12/2022
    @version 1.0
    @param jItems, Json, Json contendo o response da TableData
    @return lRet, Logical, Se tem registros para serem impressos
/*/
Method createItems(jItems As Json) Class FINDTEXCELREPORT
    Local lRet := .T. As Logical

    ::oServiceTable:prepareItems(::cTable, ::jQueryParams , JsonObject():new())
    jItems:FromJson(::oServiceTable:getResponse())

    If jItems:HasProperty("items") .and. Len(jItems["items"]) == 0
        ::cError := STR0003 //"Não existem registros para o filtro solicitado"
        lRet := .F.
    Endif
    
Return lRet
