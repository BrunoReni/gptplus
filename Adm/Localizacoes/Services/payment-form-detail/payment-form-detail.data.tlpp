#include 'tlpp-core.th'

namespace tr.paymentFormDetail

/*/{Protheus.doc} paymentFormDetailData
Declaraciones de metodos de la clase
@type class
@version  1
@author José González
@since 07/05/2021
/*/
Class paymentFormDetailData
	Data tableNick As Character

	Public Method new()
	Public Method getpaymentFormDetailAdapter()
	
EndClass

/*/{Protheus.doc} paymentFormDetailData::new
Inicializacion de la clase
@type method
@version  1
@author José González
@since 07/05/2021
/*/
Method new() class paymentFormDetailData
return 

/*/{Protheus.doc} paymentFormDetailData::getpaymentFormDetailAdapter
Prepara y retorna la forma de pago  del titulo seleccionado
@type method
@version  1
@author José González
@since 07/05/2021
/*/
method getpaymentFormDetailAdapter(cBranch,cClient,cLoja,cReceipt,cVersion,cSerie,oCoins) class paymentFormDetailData
	Local oPaymentFormDetail := JsonObject():New()
	Local cQueryFields As Character
	Local cQueryWhere As Character
	Local cQuery As  Character
	Local cAlias As  Character
	Local aCoins := {} As Array
	Local aPaymentF := {}
	Local aDoctos := {}
	Local atotal := {}
	Local nPos 	:= 1 As Numeric
	Local nCont := 1 As Numeric
	Local nDecs := 0
	Local nMoeda := 0 As Numeric
	Local cTipos := MVRECANT+"/"+MV_CRNEG

	//Se genera un array donde se almacenaran las monedas, su estructura es aCoins[moneda,nombre moneda,nTB,nComp,nRec,tasa]
	While nCont <= LEN(oCoins)
		Aadd(aCoins,{oCoins[nCont]['moneda'],oCoins[nCont]['property'],0,0,0,0})
		nCont ++
	ENDDO

	cAlias := GetNextAlias()
	cQueryFields := " EL_TIPO,EL_TIPODOC,EL_PREFIXO,EL_NUMERO,EL_VALOR, EL_VLMOED1,EL_EMISSAO, EL_DTVCTO,EL_MOEDA,EL_TPCRED,EL_BANCO,EL_AGENCIA,EL_CONTA,EL_CLIENTE,EL_SERIE,EL_PARCELA,EL_DESCONT,EL_JUROS,EL_MULTA,EL_FILIAL "
	If cPaisloc == "ARG" 
		cQueryFields += " ,EL_TIPODOC,EL_BCOCHQ ,EL_AGECHQ ,EL_CTACHQ ,EL_POSTAL ,EL_PARCELA,EL_TERCEIR,EL_ENDOSSA, EL_CGC ,EL_SELDOC "
	EndIf 

	FOR nCont:= 1 TO LEN(aCoins)
		If aCoins[nCont][1] != 1
			cQueryFields += ", EL_TXMOE0"+ALLTRIM(STR(aCoins[nCont][1]))
		ENDIF
	NEXT

	cQueryWhere := " EL_FILIAL ='"		+ xFilial("SEL",cBranch)  	+"' "
	cQueryWhere += " AND EL_SERIE ='"	+ cSerie	+"' "
	cQueryWhere += " AND EL_RECIBO ='"	+ cReceipt 	+"' "
	If cPaisloc == "ARG"
		cQueryWhere += " AND EL_VERSAO ='"	+ cVersion 	+"' "
	ENDIF
	cQueryWhere += " AND D_E_L_E_T_ = ' ' "
	cQuery := "SELECT "+ cQueryFields +" FROM "+ RetSqlName("SEL") +" WHERE "+ cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		nDecs:= MsDecimais(VAL((cAlias)->EL_MOEDA))
		IF Alltrim((cAlias)->EL_TIPODOC)  $ "EF|CH|TF|RI|RG|RS|RB|RR|CC|DC|RM|CO"
			Aadd(aPaymentF,JsonObject():new())
			nPos := Len(aPaymentF)
			aPaymentF[nPos]['type'			] 	:= Alltrim((cAlias)->EL_TIPO )
			aPaymentF[nPos]['tipo'			] 	:= Alltrim((cAlias)->EL_TIPO )
			aPaymentF[nPos]['tipodoc'		] 	:= Alltrim((cAlias)->EL_TIPODOC )
			aPaymentF[nPos]['prefix'		] 	:= Alltrim((cAlias)->EL_PREFIXO )
			aPaymentF[nPos]['prefixo'		] 	:= Alltrim((cAlias)->EL_PREFIXO )
			aPaymentF[nPos]['number'		] 	:= Alltrim((cAlias)->EL_NUMERO )
			aPaymentF[nPos]['numero'		] 	:= Alltrim((cAlias)->EL_NUMERO )
			aPaymentF[nPos]['value'			] 	:= IIF(cPaisloc=="PAR" .AND. VAL((cAlias)->EL_MOEDA) == 1 ,ROUND((cAlias)->EL_VALOR,nDecs) ,(cAlias)->EL_VALOR )  
			aPaymentF[nPos]['valor'			] 	:= IIF(cPaisloc=="PAR" .AND. VAL((cAlias)->EL_MOEDA) == 1 ,ROUND((cAlias)->EL_VALOR,nDecs) ,(cAlias)->EL_VALOR )  
			aPaymentF[nPos]['issueDate'		] 	:= Alltrim((cAlias)->EL_EMISSAO )
			aPaymentF[nPos]['emissao'		] 	:= Alltrim((cAlias)->EL_EMISSAO )
			aPaymentF[nPos]['dueDate'		] 	:= Alltrim((cAlias)->EL_DTVCTO )
			aPaymentF[nPos]['dtvcto'		] 	:= Alltrim((cAlias)->EL_DTVCTO )
			aPaymentF[nPos]['moeda'			] 	:= (cAlias)->EL_MOEDA 
			aPaymentF[nPos]['creditType'	]	:= Alltrim((cAlias)->EL_TPCRED )
			aPaymentF[nPos]['bank'			] 	:= Alltrim((cAlias)->EL_BANCO )
			aPaymentF[nPos]['branch'		] 	:= Alltrim((cAlias)->EL_AGENCIA )
			aPaymentF[nPos]['bankAccount'	]	:= Alltrim((cAlias)->EL_CONTA )

			IF  cPaisloc == "ARG" 
				aPaymentF[nPos]['bcochq'		]	:= Alltrim((cAlias)->EL_BCOCHQ )
				aPaymentF[nPos]['agechq'		] 	:= Alltrim((cAlias)->EL_AGECHQ )
				aPaymentF[nPos]['ctachq'		] 	:= Alltrim((cAlias)->EL_CTACHQ )
				aPaymentF[nPos]['postal'		]	:= Alltrim((cAlias)->EL_POSTAL )
				aPaymentF[nPos]['parcela'		] 	:= Alltrim((cAlias)->EL_PARCELA )
				aPaymentF[nPos]['terceir'		]	:= Alltrim((cAlias)->EL_TERCEIR )
				aPaymentF[nPos]['endossa'		] 	:= Alltrim((cAlias)->EL_ENDOSSA )
				aPaymentF[nPos]['cgc'			] 	:= Alltrim((cAlias)->EL_CGC )
				aPaymentF[nPos]['seldoc'		]	:= Alltrim((cAlias)->EL_SELDOC )
			Endif
		Else 
			Aadd(aDoctos,JsonObject():new())
			nPos := Len(aDoctos) 
			aDoctos[nPos]['customer'		] := Alltrim((cAlias)->EL_CLIENTE ) 
			aDoctos[nPos]['series'			] := Alltrim((cAlias)->EL_PREFIXO )
			aDoctos[nPos]['billnumber'		] := Alltrim((cAlias)->EL_NUMERO  ) 
			aDoctos[nPos]['installment'		] := Alltrim((cAlias)->EL_PARCELA ) 
			aDoctos[nPos]['type'			] := Alltrim((cAlias)->EL_TIPO    ) 
			aDoctos[nPos]['issueDate'		] := Alltrim((cAlias)->EL_EMISSAO ) 
			aDoctos[nPos]['dueDate'			] := Alltrim((cAlias)->EL_DTVCTO  ) 
			If Alltrim((cAlias)->EL_TIPO) $ cTipos
				aDoctos[nPos]['billvalue'		] := -(cAlias)->EL_VALOR
			Else
				aDoctos[nPos]['billvalue'		] := (cAlias)->EL_VALOR
			EndIf
			aDoctos[nPos]['currency'		] := (cAlias)->EL_MOEDA    
			aDoctos[nPos]['discount'		] := (cAlias)->EL_DESCONT 
			aDoctos[nPos]['interest'		] := (cAlias)->EL_JUROS   
			aDoctos[nPos]['fine'			] := (cAlias)->EL_MULTA   
			aDoctos[nPos]['branch'			] := Alltrim((cAlias)->EL_FILIAL  ) 
		Endif

		//Obtendra la pocisión de la moneda
		nMoeda := AScanx(aCoins,{|x,y| y = VAL((cAlias)->EL_MOEDA)})

		If Subs((cAlias)->EL_TIPODOC,1,2)=="TB"
			If (cAlias)->EL_TIPO $ MVRECANT+"/"+MV_CRNEG
				//Se asigna nComp a la moneda correspondiente
				aCoins[nMoeda][4]+=(cAlias)->EL_VALOR
			Else
				//Se asigna nTb a la moneda 
				aCoins[nMoeda][3]+=(cAlias)->EL_VALOR
			Endif
		ElseIf   Subs((cAlias)->EL_TIPODOC,1,2)$"RI|RG|RB|RS|RM|RR|CO"
			//Se asigna nRec a la moneda correspondiente
			aCoins[nMoeda][5]+=(cAlias)->EL_VALOR
		ElseIf Alltrim((cAlias)->EL_TIPODOC)  $ "EF|CH|TF|CC|DC"
			//Se asigna nComp y nRec a la moneda correspondiente
			aCoins[nMoeda][4]+=(cAlias)->EL_VALOR //nComp
			aCoins[nMoeda][5]+=(cAlias)->EL_VALOR //nRec
		Endif

		//Se asigna la tasa
		DO CASE	
			CASE VAL((cAlias)->EL_MOEDA) == 2 
				aCoins[nMoeda][6] := (cAlias)->EL_TXMOE02
			CASE VAL((cAlias)->EL_MOEDA) == 3 
				aCoins[nMoeda][6] := (cAlias)->EL_TXMOE03
			CASE VAL((cAlias)->EL_MOEDA) == 4 
				aCoins[nMoeda][6] := (cAlias)->EL_TXMOE04
			CASE VAL((cAlias)->EL_MOEDA) == 5
				aCoins[nMoeda][6] := (cAlias)->EL_TXMOE05
			OTHERWISE
				aCoins[nMoeda][6] :=  1
		ENDCASE
		
		(cAlias)->(DbSkip())
	EndDo
		oPaymentFormDetail ['payments'	]:= aPaymentF
		oPaymentFormDetail ['titles'	]:= aDoctos

		FOR nCont:= 1 TO LEN(aCoins)
			nDecs:= MsDecimais(aCoins[nCont][1])
			Aadd(atotal,JsonObject():new()) 
			atotal[LEN(atotal)]['coin'		] := UPPER(aCoins[nCont][2])
			atotal[LEN(atotal)]['valuation'	] := aCoins[nCont][6]
			atotal[LEN(atotal)]['received'	] := Round(aCoins[nCont][5],nDecs) 
			atotal[LEN(atotal)]['balance'	] := Round(aCoins[nCont][4]-aCoins[nCont][3],nDecs) 
			oPaymentFormDetail ['totals'	]:= atotal
		NEXT
	(cAlias)->(DbCloseArea())
 
Return oPaymentFormDetail
