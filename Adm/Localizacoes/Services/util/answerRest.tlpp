#include 'tlpp-core.th'

namespace tr.util

/*/{Protheus.doc} AnswerRest
Imprime el json en caso de respuesta correcta
@type function
@version  1
@author luis.aboytes
@since 17/3/2021
@param jServiceResponse, Jobject, json con la respuesta
/*/
Function AnswerRest(jServiceResponse)

	oRest:setKeyHeaderResponse("Content-Type", "application/json")

	If ( jServiceResponse["result"] )
		oRest:setResponse( jServiceResponse[ "response" ] )
	Else
		oRest:setFault(jServiceResponse[ "response" ]:toJson())
	Endif

	If ( jServiceResponse[ "statusCode" ] != nil )
		oRest:setStatusCode( jServiceResponse[ "statusCode" ] )
	Endif
	FreeObj(jServiceResponse)
	jServiceResponse := nil
Return

/*/{Protheus.doc} AnswerErrorFormat
Formato de respuesta en caso de error
@type function
@version  1
@author luis.aboytes
@since 17/3/2021
@param statusCode, numeric, codigo de error
@param message, character, mensaje de error
@param detailed, character, detalle de error
@input JObject, detalles del error
/*/
Function AnswerErrorFormat(statusCode As Numeric, message As Character, detailed As Character)

	Local jRet := JsonObject():New()

	jRet := {;
		"result": .F. , ;
		"statusCode": statusCode,;
		"response": {;
		"success": .F.,;
		"code": cValToChar(statusCode),;
		"message": message,;
		"detailedMessage": detailed;
		};
		}

Return jRet
