#include 'tlpp-core.th'
#include 'SYSTEMPROFILE.CH'

namespace tr.systemProfile

/*/{Protheus.doc} systemProfileAdapter
Clase en donde se consultaran los valores de los parametros a travez de la clase FWSX1Util
@type class
@version  1
@author luis.aboytes
@since 15/4/2021
/*/
Class systemProfileAdapter
	data oFwsx1 as Object
	data oFwprofile as Object
	data aQuestion as Array
	data lLogic as Logical
	data cContent as Character

	Public Method new()
	Public Method getParameters()
	Public Method addProfileSystem()
	Public Method getContentProfile()
	Public Method getProfileSystem()
EndClass

/*/{Protheus.doc} systemProfileAdapter::new
Clase donde se inicializan las variables o objetos
@type method
@version  1
@author luis.aboytes
@since 15/4/2021
/*/
Method new() Class systemProfileAdapter
	//Clase FWSX1Util() Clase que retorna los campos de la SX1
	Self:oFwsx1 := FWSX1Util():New()
	Self:oFwprofile := FWPROFILE():New()
	Self:cContent := ''
Return Self

/*/{Protheus.doc} systemProfileAdapter::getParameters(cGroup As Character, cTitle As Character) As JsonObject
Metodo que recibe dos parametros cGroup como el nombre del grupo de preguntas y el cTitle que es el nombre con elq ue se regresara el json
@type method
@version  1
@author luis.aboytes
@since 15/4/2021
@return JsonObject, retorna los valores de las preguntas uno a uno en un array json
/*/
Method getParameters(cGroup, cTitle ) Class systemProfileAdapter
	Local aJsx1 	:= {} As Array
	Local aJson 	:= {} As Array
	Local aColumns 	:= {} As Array
	Local cTemp	As Character
	Local nPos 	As Numeric
	Local nX 	As Numeric
	local Ny := 0 As Numeric
	Local oResponse := JsonObject():New()
	local lSerie := SuperGetMv("MV_SERREC",.F.,.F.)  As Logical
	
	::oFwsx1:AddGroup(cGroup)
	::oFwsx1:SearchGroup()
	::aQuestion := ::oFwsx1:GetGroup(cGroup)
	If LEN(::aQuestion) > 0
		For nX := 1 To len(::aQuestion[2])
			IF lSerie 
				If nX==5
					loop
				EndIf
			else
				If nX==4
					loop
				EndIf
			EndIf
			aAdd( aJSx1,  JsonObject():New() )
			nY ++
			cTemp := ::aQuestion[2][nx]:cX1_VAR01
			aJSx1[nY]['property'] := AllTrim(Lower(cTemp))
			aJSx1[nY]['value'] := ::aQuestion[2][nx]:nX1_PRESEL
			aJSx1[nY]['typeElement'] := ::aQuestion[2][nx]:cX1_TIPO
			aJSx1[nY]['type'] := ""
			aJSx1[nY]['disabled'] := IIF(ALLTRIM(::aQuestion[2][nx]:cX1_GSC)=='S',.T.,.F.) //Si el parametro en el campo X1_GSC esta configurado con S (Texto) sera bloqueado el parametro para evitar su edición
			//DynamicForm
			aJSx1[nY]['gridColumns'] := 7
			aJSx1[nY]['label'] := AllTrim(::aQuestion[2][nx]:cX1_PERGUNT)
			aJSx1[nY]['searchService' ]  := ""
			IF nX == 6 .and. SEL->(ColumnPos("EL_FACTOR"))
				aJSx1[nY]['required' ]  := .T.
			ELSE
				aJSx1[nY]['required' ]  := .F.
			ENDIF
			
			//Obtener los help del grupo de preguntas fin998
			Help("",1,"."+cGroup+IIF(nX>9,ALLTRIM(STR(nX)),"0"+ALLTRIM(STR(nX)))+".")
			aHelp := FwGetUltHlp()
			aJSx1[nY]['stringHelp'] := aHelp[2][1]
		
			IF cPaisloc == "MEX" .and. cGroup=="FIN998" 
				IF nX == 4 
					aJSx1[nY]['searchService' ]  := "/api/v1/totvsRecibos/catalogs/" +"SERSUS"
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "value"
					aColumns[nPos]["label"]		:= STR0006 //Nro Recibo	
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "label"
					aColumns[nPos]["label"]		:= STR0007 //Recibo	
				ElseIf nX == 5
					aJSx1[nY]['searchService' ]  := "/api/v1/totvsRecibos/catalogs/" +"RECSUS"	
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "value"
					aColumns[nPos]["label"]		:= STR0006 //Nro Recibo	
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "label"
					aColumns[nPos]["label"]		:= STR0007 //Recibo	
				ElseIf nX == 7
					aJSx1[nY]['searchService' ]  := "/api/v1/totvsRecibos/catalogs/" +"CECCD"
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "filial"
					aColumns[nPos]["label"]		:= STR0001 //Filial
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "date"
					aColumns[nPos]["label"]		:= STR0002 //Fecha
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "compen"
					aColumns[nPos]["label"]		:= STR0003 //Compensación
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "coinCompen"
					aColumns[nPos]["label"]		:= STR0004 //Moneda Comp
					AADD(aColumns,JsonObject():new())
					nPos := LEN(aColumns)
					aColumns[nPos]["property"]	:= "valueCompen" 
					aColumns[nPos]["label"]		:= STR0005 //Valor Comp
				ENDIF
			ENDIF

			If !VAZIO(AllTrim(::aQuestion[2][nX]:CX1_DEF01))
				AADD(aJson,JsonObject():new())
				nPos := LEN(aJson)
				aJson[nPos]["value"]:= 1
				aJson[nPos]["label"]:= AllTrim(::aQuestion[2][nX]:CX1_DEF01)
			EndIf
			If !VAZIO(AllTrim(::aQuestion[2][nX]:CX1_DEF02))
				AADD(aJson,JsonObject():new())
				nPos := LEN(aJson)
				aJson[nPos]["value"]:= 2
				aJson[nPos]["label"]:= AllTrim(::aQuestion[2][nX]:CX1_DEF02)
			EndIf
			If !VAZIO(AllTrim(::aQuestion[2][nX]:CX1_DEF03))
				AADD(aJson,JsonObject():new())
				nPos := LEN(aJson)
				aJson[nPos]["value"]:= 3
				aJson[nPos]["label"]:= AllTrim(::aQuestion[2][nX]:CX1_DEF03)
			EndIf
			If !VAZIO(AllTrim(::aQuestion[2][nX]:CX1_DEF04))
				AADD(aJson,JsonObject():new())
				nPos := LEN(aJson)
				aJson[nPos]["value"]:= 4
				aJson[nPos]["label"]:= AllTrim(::aQuestion[2][nX]:CX1_DEF04)
			EndIf
			If !VAZIO(AllTrim(::aQuestion[2][nX]:CX1_DEF05))
				AADD(aJson,JsonObject():new())
				nPos := LEN(aJson)
				aJson[nPos]["value"]:= 5
				aJson[nPos]["label"]:= AllTrim(::aQuestion[2][nX]:CX1_DEF05)
			EndIf
			IF nX == 6 .and. SEL->(ColumnPos("EL_FACTOR"))
				AADD(aJson,JsonObject():new())
				nPos := LEN(aJson)
				aJson[nPos]["value"]:= ""
				aJson[nPos]["label"]:= ""
			ENDIF
			aJSx1[nY]['options'] := aJson
			aJson := {}
			aJSx1[nY]['columns'] := aColumns
			aColumns := {}
		Next
		oResponse[lower(cTitle)] := aJSx1
	EndIf
Return oResponse

/*/{Protheus.doc} systemProfileAdapter::addProfileSystem
Metodo encargado de agregar o modificar un registro en la tabla system-profile
@type method
@version  1
@author luis.aboytes
@since 16/4/2021
@param cCodeUser, character, codigo de usuario
@param cPrograma, character, nombre del programa
@param cTask, character, nombre de la tarea
@param cType, character, tipo del registro
@param aProfile, array, datos a guardar
/*/
Method addProfileSystem(cCodeUser As Character ,cPrograma As Character, cTask As Character, cType As Character, aProfile As Array) Class systemProfileAdapter
	::oFwprofile:Activate()
	::oFwprofile:SetUser(cCodeUser)
	::oFwprofile:SetProgram(cPrograma)
	::oFwprofile:SetTask(cTask)
	::oFwprofile:SetType(cType)

	::oFwProfile:SetProfile(aProfile)
	::oFwProfile:Save(.T.)
	::oFwProfile:DeActivate()
Return Nil


/*/{Protheus.doc} systemProfileAdapter::getProfileSystem
Este metodo hace la consulta a la tabla System-profile 
@type method
@version  1
@author luis.aboytes
@since 16/4/2021
@param cCodeUser, character, codigo de usuario
@param cPrograma, character, nombre del programa
@param cTask, character, nombre de la tarea
@param cType, character, tipo del registro
/*/
Method getProfileSystem(cCodeUser ,cPrograma, cTask , cType ) Class systemProfileAdapter
	Local aValues As Array
	Local aTemp As Array

	aValues := {}
	aTemp := {}

	::oFwprofile:Activate()
	::oFwprofile:SetUser(cCodeUser)
	::oFwprofile:SetProgram(cPrograma)
	::oFwprofile:SetTask(cTask)
	::oFwprofile:SetType(cType)

	::oFwprofile:Load(.T.)

	aTemp := ::oFwProfile:GetProfile(.T.)

	IF VAZIO(aTemp)
		AADD(aValues,{"not found",cTask,.f.})
	Else
		AADD(aValues,{aTemp[1],cTask,.t.})
	EndIf

Return aValues
