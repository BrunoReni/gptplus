#include 'tlpp-core.th'

namespace tr.viewcheque

Static __instance As Object
/*/{Protheus.doc} viewchequeService
Class viewchequeService
@type class
@version  1
@author José González
@since 25/10/2021
/*/
Class viewchequeService
	Public Method new()
	Public Method getInstance()
	Public Method getviewcheque()
EndClass

/*/{Protheus.doc} viewchequeService::new
Constructor de la clase
@type method
@version  1
@author José González
@since 25/10/2021
/*/
Method new() Class viewchequeService
Return

/*/{Protheus.doc} viewchequeService::getInstance
Obtener la instancia
@type method
@version  1
@author José González
@since 25/10/2021
@return variant, return_retorna la instancia
/*/
Method getInstance() Class viewchequeService
	If(__instance == Nil)
		__instance := viewchequeService():new()
	EndIf
Return __instance

/*/{Protheus.doc} viewchequeService::getviewcheque
Obtiene el contenido de los campos de la tabla SEL que se modifican 
@type method
@version  1
@author José González
@since 25/10/2021
/*/
Method getviewcheque () Class viewchequeService

Local oStruSEL1:= FWFormStruct( 2, 'SEL' )
Local response := JsonObject():New()
Local viewcheque := JsonObject():new()
Local aOptions := {}
Local aJson := {}
Local array1 := {}
Local aCposSEL :={}
Local nItens := 1
Local i := 1
Local j := 1
Local nOptions := 0
Local cValid := ''
Local cValidUser := ''
Local cCampo := ''
Local ctipo := ''
local cTamanho := ''
Local cFormatd := ""
Local cTitulo := ''
Local npos := 0
Local nPosArr := 0
Local cFordat := GetPvProfString(GetEnvServer(), "DateFormat", "undefined", GetAdv97())

aAdd(aCposSEL, {"EL_TIPO"	,	.F.	}	)
aAdd(aCposSEL, {"EL_TIPODOC",	.F.	}	)
aAdd(aCposSEL, {"EL_NUMERO" ,	.T.	}	)
aAdd(aCposSEL, {"EL_BCOCHQ" ,	.T.	}	)
aAdd(aCposSEL, {"EL_AGECHQ"	,	.F.	}	)
aAdd(aCposSEL, {"EL_CTACHQ"	,	.T.	}	)
aAdd(aCposSEL, {"EL_POSTAL" ,	.F.	}	)
aAdd(aCposSEL, {"EL_PREFIXO",	.F.	} 	)
aAdd(aCposSEL, {"EL_PARCELA",	.F.	} 	)
aAdd(aCposSEL, {"EL_VALOR" 	,	.F.	}	)
aAdd(aCposSEL, {"EL_MOEDA" 	,	.F.	}	)
aAdd(aCposSEL, {"EL_TERCEIR",	.T.	} 	)
aAdd(aCposSEL, {"EL_ENDOSSA",	.T.	} 	)
aAdd(aCposSEL, {"EL_CGC" 	,	.T.	}	)
aAdd(aCposSEL, {"EL_EMISSAO",	.T.	} 	)
aAdd(aCposSEL, {"EL_DTVCTO" ,	.T.	}	)
aAdd(aCposSEL, {"EL_SELDOC" ,	.T.	}	)

nItens := Len(oStruSEL1:AFIELDS)

For i := 1 to nItens
	
	cValid:=''
	cValidUser:=''
	ctipo:=''
	cTamanho:=''
	cTitulo := ''
	aOptions :={}
	array1 := {}
	cCampo := oStruSEL1:AFIELDS[i][1]
	nOptions := 0
	nPosArr := Ascan(aCposSEL,  {|x| x[1] == cCampo })
	cFormatd	:=""
	If nPosArr < 1
		LOOP
	EndIF

	If !X3Uso(GetSx3Cache(cCampo,"X3_USADO"))
		LOOP
	EndIf
    
	Aadd(aJson,JsonObject():new())
    
	nPos := Len(aJson)
	
	If Getsx3Cache( cCampo,'X3_TIPO' ) == 'C'
		ctipo 		:= 'string'
		cTamanho 	:= Getsx3Cache( cCampo,'X3_TAMANHO' )
	ElseIf Getsx3Cache( cCampo,'X3_TIPO' ) == 'D'
		ctipo 		:= 'date'
		IF cFordat == "AMERICAN"
			cFormatd := 'mm/dd/yyyy' 
		EndIF
		IF cFordat == "DEFAULT"
			cFormatd := 'dd/mm/yyyy'
		EndIF
	ElseIf Getsx3Cache( cCampo,'X3_TIPO' ) == 'N'
		ctipo 		:= 'currency'
		cTamanho 	:= Getsx3Cache( cCampo,"X3_TAMANHO" ) - ( Getsx3Cache( cCampo,"X3_DECIMAL" ) +1)
	EndIf
	
	cTitulo := Alltrim(FWX3Titulo( cCampo ))	 	
	

	nOptions := len(oStruSEL1:AFIELDS[i][13])
	
	If nOptions > 1
		For j:=1 to nOptions
			Aadd(aOptions,JsonObject():new())
			If Alltrim(oStruSEL1:AFIELDS[i][13][j])<>''
				aadd( array1 ,separa(oStruSEL1:AFIELDS[i][13][j], "=") )	
				aOptions[j]['value'] := array1[j][1]
				aOptions[j]['label'] := array1[j][2]
			Else
				//aOptions[j]['value'] := ""
				//aOptions[j]['label'] := ""
			EndIf	
		Next
		If aCposSEL[nPosArr][2] 
			aJson[nPos]['options' ]				:=  aOptions
    	EndIf
	EndIf 
	
	aJson[nPos]['property' ] 			:=	lower(Alltrim(substr(cCampo,at("_",cCampo)+1)))
                                                                                                                                                                                                                       
	aJson[nPos]['disabled' ]				:= 	!aCposSEL[nPosArr][2] 
	If aCposSEL[nPosArr][2] 
		If oStruSEL1:AFIELDS[i][6] == "COMBO" 
			aJson[nPos]['value' ] 				:= Alltrim(InitPad(GetSX3Cache(cCampo,"X3_RELACAO")))
		EndiF
	EndIF
	aJson[nPos]['maxLength' ] 			:= 	cTamanho
	aJson[nPos]['decimalsLength' ] 		:= 	Getsx3Cache( cCampo,"X3_DECIMAL" )
	aJson[nPos]['thousandMaxlength' ] 	:= 	cTamanho
	aJson[nPos]['gridColumns' ] 		:= 3	
	aJson[nPos]['label' ] 				:=	cTitulo
    aJson[nPos]['campo' ] 				:=  cCampo
 	aJson[nPos]['type' ] 				:= ctipo
	aJson[nPos]['format' ] 			 	:= cFormatd
	
	aJson[nPos]['required' ] 			:=	X3Obrigat(cCampo)
	IF cCampo == "EL_BCOCHQ"
		aJson[nPos]['required' ] 			:= .T.
	ENDiF
	If Alltrim(Getsx3Cache( cCampo,'X3_F3' )) <> ''  
		IF aCposSEL[nPosArr][2] .And. cCampo $ ("EL_BCOCHQ")   .And. validTamTab(cCampo) 
			aJson[nPos]['searchService' ]  := "/api/v1/totvsRecibos/catconpag/" +Alltrim(Getsx3Cache( cCampo,'X3_F3' ))
		Else
			aJson[nPos]['optionsService' ]  := "/api/v1/totvsRecibos/catalogs/" +Alltrim(Getsx3Cache( cCampo,'X3_F3' )) 
		EndIf
	EndIf
Next                

	viewcheque:set(aJson)     
	response['result'] := .T.
	response[ 'response' ] := viewcheque
	   
Return response


/*/{Protheus.doc} validTamTab
Valida el tamaño de la tabla a consultar para regresar paginado
@type Function
@version  1
@author José González
@since 13/07/2022
/*/
Function validTamTab(cCampo)

Local cQuery 
Local cAlias
Local lRet := .F.
	
If cCampo == "EL_BCOCHQ"
	
	cAlias := GetNextAlias()
	cQuery := " SELECT  COUNT(FJN_COD) AS TOTALES"
	cQuery += " FROM " + RetSqlName("FJN")
	cQuery += " Where D_E_L_E_T_ = ' ' "
	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)
 	
	IF (cAlias)->(!EOF())
		If (cAlias)->TOTALES > 100			
			lRet	:= .T.
		EndIF
	EndIf
	(cAlias)->(DbCloseArea())
EndIf

Return lRet
