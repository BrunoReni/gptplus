#include 'tlpp-core.th'

namespace tr.collector

////////////////////////////////////////////////////////////////////
/*{Protheus.doc} collectorAdapter
	Clase que obtiene los querys para obtener los datos que se necesitan
	para las reglas de negocio
*/
////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------
/*/
{Protheus.doc} Class  collectorAdapter con FWAdapterBaseV2
Clase generada para usar las caracteristicas de paginacion y tamaño de pagina
de la clase FWAdapterBaseV2

@author Luis Aboytes
@since 18/02/2020
/*/
//-------------------------------------------------------------------
Class collectorAdapter From FWAdapterBaseV2
	Data tableNick As Character

	Public Method new()
	Public Method getCollectorsAdapter()
	Public Method getCollectorAdapter()
	Public Method getCollectorsAdapter2()
	Public Method verifyCollectorAdapter()
EndClass

//-------------------------------------------------------------------
/*/
{Protheus.doc} new
Constructor de la clase

@author Luis Aboytes
@since 18/02/2020
/*/
//-------------------------------------------------------------------
Method new(resMethod As Character) Class collectorAdapter
	_Super:new(resMethod)
Return

//-------------------------------------------------------------------
/*/
	{Protheus.doc} AddMapFields
	Agrega los campos que se usaran en la consulta y devuelve el objeto

	@Input 	oSelf As Object, oSelf
	metodo, nombre del metodo para agregar o quitar campos de la consulta
	@author Luis Aboytes
	@since 18/02/2021
/*/
//-------------------------------------------------------------------
Static Function AddMapFields(oSelf As Object, metodo As Character)
	fieldNick := 'AQ'

	oSelf:AddMapFields("code",fieldNick+'_COD',.T.,.T.,{fieldNick + '_COD', 'C',GetSx3Cache("AQ_COD","X3_TAMANHO"),0})
	oSelf:AddMapFields("name",fieldNick+'_NOME',.T.,.T.,{fieldNick + '_NOME', 'C',GetSx3Cache("AQ_NOME","X3_TAMANHO"),0})

	DO CASE
	CASE metodo == 'getCollectorAdapter'
		oSelf:AddMapFields("recType",fieldNick+'_TIPOREC',.T.,.T.,{fieldNick + '_TIPOREC', 'C',GetSx3Cache("AQ_TIPOREC","X3_TAMANHO"),0})
	ENDCASE
Return Nil

//-------------------------------------------------------------------
/*/
	{Protheus.doc} getQuery
	Agregamos los campos que seran utilizados en el query y el retorno del objeto

	@Input 	tableNick As Character, SAQ Clientes

	@Return query As Character, query formateada para el uso en la clase

	@author Luis Aboytes
	@since 18/02/2021
/*/
//-------------------------------------------------------------------
Static Function getQuery(tableNick As Character) As Character
	Local query As Character
	query := " SELECT #QueryFields# "
	query += " FROM " + RetSqlName(tableNick)
	query += " WHERE #QueryWhere#"
Return query

//-------------------------------------------------------------------
/*/
	{Protheus.doc} getCollectorsAdapter
	Prepara y retorna todos los cobradores

	@Input 	table As Character, SAQ Cobradores

	@author Luis Aboytes
	@since 18/02/2021
/*/
//-------------------------------------------------------------------
Method getCollectorsAdapter(table As Character) Class collectorAdapter
	Local queryWhere As Character
	Local queryFields As Character
	Local activedArea As Array

	queryWhere = ""

	//Asignamos el nombre de la tabla a utilizar
	::tableNick := table

	activedArea   := FwGetArea()

	//Agregamos los campos Json/ResultSet
	AddMapFields(self,"getCollectors")

	//Informamos el query a utilizar en la API
	::SetQuery(getQuery(table))

	queryWhere += "D_E_L_E_T_ = ' '"
	queryFields := "AQ_COD,AQ_NOME"

	//Configuramos los campos para el query
	::SetWhere(queryWhere)
	::SetFields(queryFields)

	//Informamos el ordenamiento a ser utilizado en la Query
	::SetOrder("AQ_NOME,AQ_LOJA")

	If ::Execute()
		//Genera un archivo Json
		::FillGetResponse()
	EndIf

	FwrestArea(activedArea)
Return Nil

//-------------------------------------------------------------------
/*/
	{Protheus.doc} getCollectorAdapter
	Prepara y retorna los datos de un cobrador especifico

	@Input 	table As Character, SAQ Cobradores

	@author Luis Aboytes
	@since 18/02/2021
/*/
//-------------------------------------------------------------------
Method getCollectorAdapter(table As Character,collector As Character) Class collectorAdapter
	Local queryWhere As Character
	Local queryFields As Character
	Local activedArea As Array

	queryWhere = ""

	//Asignamos el nombre de la tabla a utilizar
	::tableNick := table

	//Agregamos los campos Json/ResultSet
	AddMapFields(self,"getCollectorAdapter")

	activedArea   := FwGetArea()

	//Informamos el query a utilizar en la API
	::SetQuery(getQuery(table))

	//Informamos los campos a obtener de la consulta
	queryFields := "AQ_COD,AQ_NOME,AQ_TIPOREC"

	//Informamos los where de la consulta
	queryWhere += " AQ_FILIAL = '"+xFilial("SAQ")+"' AND "
	queryWhere += " AQ_COD = '"+collector+"' AND "
	queryWhere += " D_E_L_E_T_ = ' ' "

	//Configuramos los campos para el query
	::SetWhere(queryWhere)
	::SetFields(queryFields)

	//Informamos el ordenamiento a ser utilizado en la Query
	::SetOrder("AQ_COD,AQ_NOME,AQ_TIPOREC")

	If ::Execute()
		//Genera un archivo Json
		::FillGetResponse()
	EndIf

	FwrestArea(activedArea)
Return Nil

//-------------------------------------------------------------------
/*/
	{Protheus.doc} verifyCollectorAdapter
	Prepara y retorna los datos de un cobrador especifico

	@Input 	table As Character, SAQ Cobradores

	@author Luis Aboytes
	@since 18/02/2021
/*/
//-------------------------------------------------------------------
Method verifyCollectorAdapter(branch As Character, code As Character) Class collectorAdapter
	Local oCollector := JsonObject():New()

	cAlias := GetNextAlias()

	cQuery := " SELECT "
	cQuery += " AQ_COD, "
	cQuery += " AQ_NOME, "
	cQuery += " AQ_TIPOREC "
	cQuery += " FROM " + RetSqlName("SAQ")
	cQuery += " WHERE AQ_FILIAL = '"+branch+"' AND AQ_COD = '"+code+"' AND D_E_L_E_T_ = ' '"

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())

		oCollector['code'] := (cAlias)->AQ_COD
		oCollector['name'] := (cAlias)->AQ_NOME
		oCollector['recType'] := (cAlias)->AQ_TIPOREC
		(cAlias)->(DbSkip())
	END

	(cAlias)->(DbCloseArea())

Return oCollector

//-------------------------------------------------------------------
/*/
	{Protheus.doc} getCollectorsAdapter2
	Prepara y retorna todos los cobradores con SQL directo

	@Input 	table As Character, SAQ Cobradores

	@author Luis Aboytes
	@since 18/02/2021
/*/
//-------------------------------------------------------------------
Method getCollectorsAdapter2(table)  Class collectorAdapter

	Local cResult := '{ "items": ['

	cAlias := GetNextAlias()

	cQuery := " SELECT AQ_COD, AQ_NOME FROM "+ RetSqlName("SAQ") + " WHERE  D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())

		cResult += ' { "code": "'+(cAlias)->AQ_COD+'" , "description": "'+(cAlias)->AQ_NOME+'" }'

		(cAlias)->(DbSkip())

		If(cAlias)->(!EOF())
			cResult += ","
		EndIf
	END

	cResult += ']}'

Return cResult
