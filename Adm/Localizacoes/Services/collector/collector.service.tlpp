#include 'tlpp-core.th'

namespace tr.collector

////////////////////////////////////////////////////////////////////
/*{Protheus.doc} collectorService
	Servicio que contiene la regla de negocio y es el que comunica 
	el controlador con el data
*/
////////////////////////////////////////////////////////////////////

Static __instance As Object

Class collectorService
	Public Method new()
	Public Method getInstance()
	Public Method getCollectorsService()
	Public Method getCollectorsService2()
	Public Method getCollectorService()
	Public Method verifyCollectorService()
	Public Method getcollectorPE()
EndClass

//-------------------------------------------------------------------
/*/
{Protheus.doc} new
Constructor de la clase

@author Luis Aboytes
@since 18/02/2021
/*/
//-------------------------------------------------------------------
Method new() Class collectorService
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} getInstance
Retorna una instancia activa, si no existe crea una nueva

@author Luis Aboytes
@since 18/02/2021
/*/
//-------------------------------------------------------------------
Method getInstance() Class collectorService
	If(__instance == Nil)
		__instance := collectorService():new()
	EndIf
Return __instance

//-------------------------------------------------------------------
/*/{Protheus.doc} getCollectorsService con FWAdapterBaseV2 (Paginacion)
retorna todos los cobradores de la tabla SAQ con paginacion

@Input  tableNick, nombre de la tabla a obtener los datos

@Return response As Jobject, retorna todos los cobradores

@author Luis Aboytes
@since 18/02/2021
/*/
//-------------------------------------------------------------------
Method getCollectorsService(tableNick As Character,paramsRequest,queryRequestParams) Class collectorService
	Local oCollectorAdapter 
	Local response As Object

	oCollectorAdapter := collectorAdapter():New('GET')

	//Indica cual pagina debemos retornar
	If !(Empty(queryRequestParams['page']))
		oCollectorAdapter:setPage(Val(queryRequestParams['page']))
	EndIf

	//Indica el tamaño de la pagina
	If !(Empty(queryRequestParams['pagesize']))
		oCollectorAdapter:setPageSize(Val(queryRequestParams['pagesize']))
	EndIf

	oCollectorAdapter:getCollectorsAdapter(tableNick)

	response := JsonObject():New()
	If oCollectorAdapter:lOk
		response["result"] := .T.
		response["response"] := oCollectorAdapter:getJSONResponse()
	Else
		response := answerErrorFormat(oCollectorAdapter:GetCode(), oCollectorAdapter:GetMessage(), oCollectorAdapter:GetMessage())
	EndIf

	oCollectorAdapter:DeActivate()
	oCollectorAdapter := nil

Return response

//-------------------------------------------------------------------
/*/{Protheus.doc} getCollectorsService2
retorna todos los cobradores de la tabla SAQ sin paginacion

@Input  tableNick, nombre de la tabla a obtener los datos

@Return response As Jobject, retorna todos los cobradores

@author Luis Aboytes
@since 22/02/2021
/*/
//-------------------------------------------------------------------
Method getCollectorsService2(tableNick As Character) Class collectorService
	Local oCollectorAdapter 
	Local cTemp := ""
	Local response As Object

	oCollectorAdapter := collectorAdapter():New('GET')

	cTemp := oCollectorAdapter:getCollectorsAdapter2(tableNick)

	response := JsonObject():New()
	If oCollectorAdapter:lOk
		response["result"] := .T.
		response["response"] := cTemp
	Else
		response := answerErrorFormat(oCollectorAdapter:GetCode(), oCollectorAdapter:GetMessage(), oCollectorAdapter:GetMessage())
	EndIf

	oCollectorAdapter:DeActivate()
	oCollectorAdapter := nil

Return response

//-------------------------------------------------------------------
/*/{Protheus.doc} getCollectorService
Retorna los datos de un cobrador en especifico

@Input  collector, id del cobrador 

@Return response As Jobject, retorna un objeto con la respuesta

@author Luis Aboytes
@since 19/02/2021
/*/
//-------------------------------------------------------------------
Method getCollectorService(tableNick As Character,paramsRequest) Class collectorService
	Local oCollectorAdapter
	Local response As Object

	oCollectorAdapter := collectorAdapter():New('GET')

	If !(Empty(paramsRequest['collector']))
		oCollectorAdapter:getCollectorAdapter(tableNick,paramsRequest['collector'])

		response := JsonObject():New()
		If oCollectorAdapter:lOk
			response["result"] := .T.
			response["response"] := oCollectorAdapter:getJSONResponse()
		Else
			response := answerErrorFormat(oCollectorAdapter:GetCode(), oCollectorAdapter:GetMessage(), oCollectorAdapter:GetMessage())
		EndIf
	Else
		response["result"] := .T.
		response["response"] := '{ "success": "false", "message": "No se permite valores vacios, verifique los parametros en el endpoint" }'
	EndIf

	oCollectorAdapter:DeActivate()
	oCollectorAdapter := nil

Return response

//-------------------------------------------------------------------
/*/{Protheus.doc} verifyCollectorService
Verifica un cobrador basandose en la logica de la rutina FINA087A
metodo FA087Cob

@Input  collector, id del cobrador

@Return response As Jobject, retorna un objeto con la respuesta

@author Luis Aboytes
@since 19/02/2021
/*/
//-------------------------------------------------------------------
Method verifyCollectorService(tableNick As Character,paramsRequest) Class collectorService
	Local response As Object
	Local oCollector  := JsonObject():New()

	oCollectorAdapter := collectorAdapter():New('GET')

	oCollector = oCollectorAdapter:verifyCollectorAdapter(xFilial(tableNick),paramsRequest['collector'])

	If oCollector['code'] != ""
		response := JsonObject():New()
		If oCollector['recType']=="3"
			response["result"] := .T.
			response["response"] := '{ "success": true , "value": true }'
		Else
			response["result"] := .T.
			response["response"] := '{ "success": true , "value": "false" }'
		EndIf
	EndIf

	oCollectorAdapter:DeActivate()
	oCollectorAdapter := nil
Return response


//-------------------------------------------------------------------
/*/{Protheus.doc} verifyCollectorService
Validación para Punto de Entrada

@Input  collector, id del cobrador

@Return response As Jobject, retorna un objeto con la respuesta

@author Jose.Gonzalez
@since 14/02/2022
/*/
//-------------------------------------------------------------------
Method getcollectorPE(paramsRequest) Class collectorService
	Local response As Object
	Local cCobrador := ""
	local lPeCob := .F.
	Local oCollector  := JsonObject():New()

	Local cCliente 	:= paramsRequest['client']
	Local cLoja 	:= paramsRequest['loja']
 

	If ExistBlock("F998NRDCOB") 
		cCobrador := ExecBlock("F998NRDCOB",.F.,.F.,{cCliente,cLoja})
		If Valtype(cCobrador) <> "C"
		 cCobrador := ""
		EndIf
		lPeCob := .T.
	EndIf

	oCollector['isActive'] := lPeCob
	oCollector['code'] := cCobrador

	response := JsonObject():New()
	response["result"] := .T.
	response["response"] := oCollector

Return response
