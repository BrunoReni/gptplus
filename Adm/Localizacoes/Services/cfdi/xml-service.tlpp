#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'xmlserviceservice.ch'

namespace tr.xml
using namespace tr.util

Static __instance As Object

/*/{Protheus.doc} xmlService
Clase que contiene la regla de negocio para la generación del XML y la generación del PDF para México y otros paises
@type class
@version  1
@author luis.aboytes
@since 27/4/2021
/*/
Class xmlService
	Public Method new()
	Public Method getInstance()
	Public Method validCDFService()
	Public Method generateXML()
EndClass

/*/{Protheus.doc} xmlService::new
Genera una nueva clase 
@type method
@version  1
@author luis.aboytes
@since 27/4/2021
/*/
Method new() Class xmlService
Return Nil

/*/{Protheus.doc} xmlService::getInstance
Retorna una instancia activa, si no existe crea una nueva
@type method
@version  1
@author luis.aboytes
@since 27/4/2021
@return Object, instancia
/*/
Method getInstance() Class xmlService
	If(__instance == Nil)
		__instance := xmlService():new()
	EndIf
Return __instance

/*/{Protheus.doc} xmlService::validCDFService
Metodo para validar el timbrado de México
@type method
@version  1
@author luis.aboytes
@since 23/6/2022
/*/
Method validCDFService(jBody) Class xmlService
	Local nImpAuto		As Numeric
	Local aRegPro 		As Array
	Local jErrorCFDI	As Object
	Local aResponse		As Array
	Local nY,nZ			As Numeric
	Local jResponse
	Local jTemp			As Object
	Local aTempCFDI		As Array
	Local nPos,nCont	As Numeric
	Local aValues		As Array
	Local aTitulos		As Array
	Local aFormasPago	As Array
	Local lHasError		As Logical
	Local lHora			As Logical
	Local nX			As Numeric
	Local cAvisoE		As Character
	Local lTimVld		As Logical
	Local cId 			As Character
	Local jData			As Object
	Local jRecibos		As Object
	Local aJsonCFDI		As Array
	Local nTemp			As Numeric
	Local dFechDigit    := ""
	Local dIssueDate    := ""

	nImpAuto	:= SuperGetMv("MV_CFDREC",.T.,0) //Generacion automatica complemneto de pago
	jResponse 	:= JsonObject():New()
	aValues 	:= {}
	lHora 		:= SEL->(ColumnPos("EL_HORA")) > 0
	cSaltoL		:= Chr(10)+ Chr(13)
	cAvisoE 	:= ""
	jData		:= JsonObject():New()
	jTemp		:= JsonObject():New()
	aJsonCFDI	:= {}
	aRegPro		:= {}
	aResponse	:= {}
	aTempCFDI 	:= {}
	nTemp		:= 0

	If cPaisLoc == "MEX"
		For nY := 1 To LEN(jBody['items'])
			aRegPro := {}
			For nCont := 1 To LEN(jBody['items'][nY]['files'])
				If (nImpAuto == 0 .Or. nImpAuto == 1)
					nTemp := AScanx(aRegPro,{|x| x[1]==jBody['items'][nY]['values']['receipt']}) //Si ya existe el recibo
					//Validacion para mexico que valida si existen recibos sin timbrar que afectan los documentos incluidos en el recibo a timbrar
					If FindFunction("F815VldTim") .and. nTemp == 0
						jData['origin']	:= "FINA998"//Se asigna un nombre de origen
						jData['receipt'] := jBody['items'][nY]['values']['receipt']
						dFechDigit := jBody['items'][nY]['values']['issueDate']
						if !Empty(dFechDigit)
							dIssueDate:= Substr(jBody['items'][nY]['values']['issueDate'],7,2)+"/"+Substr(jBody['items'][nY]['values']['issueDate'],5,2)+"/"+Substr(jBody['items'][nY]['values']['issueDate'],3,2)
							dIssueDate := CTod(dIssueDate)
						else
							dIssueDate := dDatabase
						Endif
						aAdd(aRegPro,{jBody['items'][nY]['values']['receipt'],jBody['items'][nY]['values']['serie'],dIssueDate,IIF(VAZIO(jBody['items'][nY]['saveTime']),jBody['items'][nY]['values']['broadcastTime'],jBody['items'][nY]['saveTime'])})
						lTimVld := F815VldTim(aRegPro,@aResponse, jData)
					EndIf
				EndIf
				IF nCont==LEN(jBody['items'][nY]['files'])
					aTempCFDI	:= {}	
					jErrorCFDI	:= JsonObject():New()
					//Validación para mexico que verifica si el recibo recibo generara CFDI (PPD Y/O PUE)
					//tr.saveReceiptDetail.ValidCfdiReceipts Funcion en el fuente save-receipt
					If FindFunction("tr.saveReceiptDetail.ValidCfdiReceipts")
						aTitulos	:= {}
						aFormasPago	:= {}
						jData['origin']	:= "xmlservice"
						aTitulos	:= {}
						aFormasPago	:= {}
						jRecibos  :=	JsonObject():New()
						FOR nZ := 1 To LEN(jBody['items'][nY]['files'])
							//Se separan las formas de pago de los titulos a cobrar del recibo
							IF !jBody['items'][nY]['files'][nZ]['typebill'] $ "EF|CH|TF|RI|RG|RS|RB|RR"
								AADD(aTitulos,JsonObject():new())
								nPos := Len(aTitulos)
								aTitulos[nPos]['customer']      := jBody['items'][nY]['files'][nZ]['clientorigin']
								aTitulos[nPos]['type'] 			:= jBody['items'][nY]['files'][nZ]['typebill']
								aTitulos[nPos]['typeDoc'] 		:= jBody['items'][nY]['files'][nZ]['valuetype']
								aTitulos[nPos]['cobrar']		:= jBody['items'][nY]['files'][nZ]['valueBx']
								aTitulos[nPos]['currency']		:= jBody['items'][nY]['files'][nZ]['tasaBx']
								aTitulos[nPos]['billnumber']	:= jBody['items'][nY]['files'][nZ]['numberreceipt']
								aTitulos[nPos]['branch']		:= jBody['items'][nY]['files'][nZ]['branch']
								aTitulos[nPos]['prefix']		:= jBody['items'][nY]['files'][nZ]['prefix']
								aTitulos[nPos]['unit']			:= jBody['items'][nY]['files'][nZ]['storecode']
							ELSE
								AADD(aFormasPago,JsonObject():new())
								nPos := Len(aFormasPago)
								aFormasPago[nPos]['type'] := jBody['items'][nY]['files'][nZ]['typebill']
								aFormasPago[nPos]['billnumber']	:= jBody['items'][nY]['files'][nZ]['numberreceipt']
							ENDIF
						NEXT

						//Asignamos los titulos y formas de pago al json
						jRecibos['cliente'] 	:= jBody['items'][nY]['values']['client']
						jRecibos['titulos'] 	:= aTitulos
						jRecibos['formaspago']	:= aFormasPago

						AADD(aTempCFDI,JsonObject():new())
						nPos := Len(aTempCFDI)
						aTempCFDI[nPos]:= jRecibos
						//Validamos
						jErrorCFDI:=tr.saveReceiptDetail.ValidCfdiReceipts(aTempCFDI,jData)
						//Json con los errores y datos del recibo en un array de jsons
						AADD(aJsonCFDI,JsonObject():new())
						aJsonCFDI[LEN(aJsonCFDI)]['receipt']	:= jBody['items'][nY]['values']['receipt']
						aJsonCFDI[LEN(aJsonCFDI)]['client']		:= jBody['items'][nY]['values']['client']
						aJsonCFDI[LEN(aJsonCFDI)]['timbrar']	:= lTimVld
						aJsonCFDI[LEN(aJsonCFDI)]['errors'] 	:= jErrorCFDI
						aJsonCFDI[LEN(aJsonCFDI)]['id'] 		:= jBody['items'][ny]['id']
					ENDIF
				EndIf
			Next
		Next
	Else
		For nY := 1 To LEN(jBody['items'])
			cId		:= jBody['items'][ny]['id']
			lHasError	:= .F.
			lTimVld		:= .T.
			jAux := JsonObject():new()
			jAux['aviso']:= ''

			AADD(aJsonCFDI,JsonObject():new())
			aJsonCFDI[LEN(aJsonCFDI)]['receipt']	:= jBody['items'][ny]['values']['receipt']
			aJsonCFDI[LEN(aJsonCFDI)]['client']		:= jBody['items'][nY]['values']['client']
			aJsonCFDI[LEN(aJsonCFDI)]['timbrar']	:= lTimVld
			aJsonCFDI[LEN(aJsonCFDI)]['id'] 		:= jBody['items'][ny]['id']
			aJsonCFDI[LEN(aJsonCFDI)]['errors']		:= jAux
		NEXT
	EndIf

	For nCont := 1 To LEN(aJsonCFDI)
		//Se genera el json final del proceso de xml-timbrado
		AADD(aValues,JsonObject():new())
		nPos := Len(aValues)

		lHasError := .F.
		aValues[nPos]["error"] := ""

		If !VAZIO(aResponse)
			For nX := 1 To LEN(aResponse)
				IF aResponse[nX][5] == aJsonCFDI[nCont]['receipt']
					lHasError := .T.
					aValues[nPos]["error"]  := answerErrorFormat(aResponse[LEN(aResponse)][2],"Solución" ,aResponse[nX][3]+" "+aResponse[nX][4])
					nX := LEN(aResponse)
				ENDIF
			Next
		ELSEIF !VAZIO(aJsonCFDI[nCont]['errors']['aviso'])
			lHasError 	:= .T.
			lTimVld		:= .F.
			aValues[nPos]["error"]  := answerErrorFormat(404,"Solución" ,aJsonCFDI[nCont]['errors']['aviso'])
		Else
			lHasError := .F.
			aValues[nPos]["error"] 		:= ""						//¿Cuales son los errores?
		EndIf
		aValues[nPos]["hasError"]	:= lHasError					//¿Hubo errores?
		aValues[nPos]['receipt'] 	:= aJsonCFDI[nCont]['receipt']	//Numero de recibo
		aValues[nPos]["timvld"] 	:= aJsonCFDI[nCont]['timbrar']
		aValues[nPos]["success"] 	:= .T.
		aValues[nPos]["id"] 		:= aJsonCFDI[nCont]['id']
		aValues[nPos]['process']	:= "VALIDACION TIMBRADO"	//Proceso
	Next

	//Se prepara el json final
	jTemp:set(aValues)
	jResponse["result"] 	:= .T.
	jResponse["response"]	:= jTemp
Return jResponse
