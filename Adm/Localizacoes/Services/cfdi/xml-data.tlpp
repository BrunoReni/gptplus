#include 'tlpp-core.th'
#include 'tlpp-rest.th'

namespace tr.xml

/*/{Protheus.doc} xmlAdapter
Clase xmlAdapter donde se declaran los metodos que formaran parte de la clase
@type class
@version  1
@author luis.aboytes
@since 29/4/2021
/*/
Class xmlAdapter From FWAdapterBaseV2

	Public Method new()
	Public Method getConPag()
	Public Method getMenSAT()
EndClass

/*/{Protheus.doc} financialTitlesAdapter::new
Constructor de la clase financialTitlesAdapter
@type method
@version  1
@author luis.aboytes
@since 28/02/2020
@param cResMethod, character, Nombre del metodo REST
/*/
Method new(cResMethod As Character) Class xmlAdapter
	_Super:new(cResMethod)
Return Nil

/*/{Protheus.doc} xmlAdapter::getConPag(cFilOri As Character,cNumDoc As Character,cSerie As Character,cCliente As Character,cLoja As Character) As Character
Retorna la condicion registrada en la tabla SF2 ("Tipos de entradas y salidas") dado las condiciones mandadas como parametros
@type method
@version  1
@author luis.aboytes
@since 28/4/2021
@return Character, Condicion del SAT
/*/
Method getConPag(cFilOri ,cNumDoc,cSerie,cCliente,cLoja ) Class xmlAdapter
	Local cQueryFields  As Character
	Local cQueryWhere   As Character
	Local cQuery        As Character
	Local cRet          As Character
	Local cAlias		As Character

	cAlias := GetNextAlias()

	//Se agregan las condiciones Where
	cQueryWhere := " D_E_L_E_T_ = ' ' "
	cQueryWhere += " AND F2_FILIAL ='"+cFilOri+"' "
	cQueryWhere += " AND F2_DOC ='"+cNumDoc+"' "
	cQueryWhere += " AND F2_SERIE ='"+cSerie+"' "
	cQueryWhere += " AND F2_CLIENTE ='"+cCliente+"' "
	cQueryWhere += " AND F2_LOJA ='"+cLoja+"' "

	//Campo a obtener el valor dadas las condiciones where
	cQueryFields := "F2_COND"

	//Se genera la consulta SQL
	cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SF2") +" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	//Se asigna el valor obtenido a cRet
	cRet :=  (cAlias)->F2_COND

	(cAlias)->(DbCloseArea())

Return cRet

/*/{Protheus.doc} xmlAdapter::getMenSAT(cFil As Character, cCondPag As Character) As Character
Retorna un metodo de pago del SAT registrado en la tabla SE4 ("Condiciones de pago")dado  las condiciones mandadas como parametros
@type method
@version  1
@author luis.aboytes
@since 28/4/2021
@return Character, metodo de pago del SAT
/*/
Method getMenSAT(cFil, cCondPag)  Class xmlAdapter
	Local cQueryFields  As Character
	Local cQueryWhere   As Character
	Local cQuery        As Character
	Local cRet          As Character
	Local cAlias		As Character

	cAlias := GetNextAlias()

	//Se agregan las condiciones Where
	cQueryWhere := " D_E_L_E_T_ = ' ' "
	cQueryWhere += " AND E4_FILIAL ='"+cFil+"' "
	cQueryWhere += " AND E4_CODIGO ='"+cCondPag+"' "

	//Campo a obtener el valor dadas las condiciones where
	cQueryFields := "E4_MPAGSAT"

	//Se genera la consulta SQL
	cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SE4") +" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	//Se asigna el valor obtenido a cRet
	cRet :=  (cAlias)->E4_MPAGSAT

	(cAlias)->(DbCloseArea())

Return cRet
