#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "FWMVCDEF.CH"
#include "savereceipt.service.CH"
 
namespace tr.saveReceiptDetail
 
/*/{Protheus.doc} saveReceiptDetailService
Declaracion de los metodos de la clase
@type class
@version  1
@author José González
@since 19/05/2021
/*/
Class saveReceiptDetailService
	Public Method new()
	Public Method getsaveReceiptDetailService()
EndClass

/*/{Protheus.doc} saveReceiptDetailService::new
Constructor de la clase
@type method
@version  1
@author José González
@since 19/05/2021
/*/
Method new() Class saveReceiptDetailService
Return

/*/{Protheus.doc} saveReceiptDetailService::getsaveReceiptDetailService
retorna el detalle del titulo seleccionado
@type method
@version  1
@author  José González
@since 19/05/2021
/*/
Method getsaveReceiptDetailService (oJParams ) class  saveReceiptDetailService
	Local oReceiptDetaiAdapter As Object
	Local aTemp := {} As Array
	Local cTemp	:= "" As Character
	Local oResponse := JsonObject():New()
	Local jValidate	:= JsonObject():new()
	Local jValid	:= JsonObject():new()
	Local oMdlTab
	local i	 := 0 As Numeric
	Local jx := 0 As Numeric
	Local nV := 0 As Numeric
	Local nX := 0 As Numeric
	local cCampo 	:= "" As Character
	Local cTable 	:= "EL_" As Character
	local cTitulo 	:= ""	As Character
	Local cValue 	:= ""	As Character
	Local cCampoTipo As Character
	Local dValue	As Date
	Local nEmissao	As Numeric
	Local nCodFis	As Numeric
	Local nAliq		As Numeric
	Local nValbase	As Numeric
	Local nProvin	As Numeric
	Local nConcsus	As Numeric
	Local nDtvcto	As Numeric
	Local nEmisrec	As Numeric
	Local nTipo		As Numeric
	Local nTipoOri	As Numeric
	Local nHora		As Numeric
	Local nAdmFin	As Numeric
	Local nSerret := 0
	Local aError	As Array
	Local nRI := 0
	Local a998ok  := {}	As Array
	local lRet 	
	local lRecAnu 
	local cRecSus 
	local cRec 	
	local cSer 	
	local nSertam := GetSx3Cache("EL_SERIE","X3_TAMANHO")
	local aRec := {}
	Local lCompen := .F. As Logical 
	Local cHourSave := ""
	Local cTabEnc	:= "FJT_" 	As Character
	Local aEncab	:= {}		As array
	Local cRecAux	:= ""		As character
	Local aAreaRec	:= {}		As array
	Local nFJTTamSer:= 0		As numeric
	Local nFJTTamNum:= 0		As numeric
	local nA := 1
	Local nB := 1
	Local nAtesp := 1
	jData := JsonObject():New()

	oMdlTab  := FwLoadModel("FINA887")
	oMdlTab:SetOperation(MODEL_OPERATION_INSERT)
	oMdlTab:Activate()
	jValidate['enableRA'] := oMdlTab:GetModel("FJT_MASTER"):GetValue("RAGENER")
	oMdlTab:DeActivate()
		
		If  oJParams["params"]:TOJSON() == "{}"
			jValidate['success']		:=  .F.
			jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
			jValidate['hasError']		:=  .T.
			jValidate['message']		:=	STR0022
			jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
			jValidate['compensation'] := .F.
			jValid['validations'] 		:= jValidate

			oResponse["result"] := .T.
			oResponse["response"] := jValid
			return oResponse
									
		EndIf
		
		If oJParams['encabezado']:tojson() <> ""
			nAtesp := AT("|", oJParams['encabezado']:tojson())
			If nAtesp > 0
				jValidate['success']		:=  .F.
				jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
				jValidate['hasError']		:=  .T.
				jValidate['message']		:=	STR0029 + " " + STR0032   //STR0029 El Encabezado   STR0032 contiene caracteres especiales que generan un error en el grabado.
				jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
				jValidate['compensation'] := .F.
				jValid['validations'] 		:= jValidate
				oResponse["result"] := .T.
				oResponse["response"] := jValid
				return oResponse
			EndIF
		EndIf
		IF len(oJParams['formasPago']) > 0
			for nA := 1 to len(oJParams['formasPago'])
				For nB=1 to len(oJParams['formasPago'][nA])
					nAtesp := AT("|",oJParams['formasPago'][nA][nB]:tojson())
					If nAtesp > 0
						jValidate['success']		:=  .F.
						jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
						jValidate['hasError']		:=  .T.
						jValidate['message']		:=	STR0031 + " " +  STR0032 + "  -> "+ oJParams['formasPago'][nA][nB]["property"]  //STR0031 "La forma de pago"  STR0032 "contiene caracteres especiales que generan un error en el grabado." "--> Campo"
						jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
						jValidate['compensation'] := .F.
						jValid['validations'] 		:= jValidate
						oResponse["result"] := .T.
						oResponse["response"] := jValid
						return oResponse
					EndIF
				Next nB
			Next nA
		EndIf
		IF len(oJParams['titulos']) > 0
			for nA := 1 to len(oJParams['titulos'])
				nAtesp := AT("|",oJParams['titulos'][nA]:tojson())
				If nAtesp > 0
					jValidate['success']		:=  .F.
					jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
					jValidate['hasError']		:=  .T.
					jValidate['message']		:=	STR0030 +  " " + oJParams['titulos'][nA]["billnumber"] + " " +  STR0032  // STR0030 "El título seleccionado"   STR0032 "contiene caracteres especiales que generan un error en el grabado."
					jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
					jValidate['compensation'] := .F.
					jValid['validations'] 		:= jValidate
					oResponse["result"] := .T.
					oResponse["response"] := jValid
					return oResponse
				EndIF
			Next	
		EndIf
		
		IF cPaisLoc == "MEX"
			jData['origin'] = 'savereceipt'
			aTemp := ValidCfdiReceipt(oJParams,jData)
			If !VAZIO(aTemp)
				If aTemp[1][1] == .T.
					cTemp := aTemp[1][2]
					IF aTemp[1][4] .and. oJParams['generateCfdi']  
						jValidate['success']		:=  .F.
						jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
						jValidate['hasError']		:=  .T.
						jValidate['message']		:=	STR0023  //"No es posible timbrar un recibo con compensaciones."
						jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
						jValidate['compensation'] := .F.

						jValid['validations'] 		:= jValidate

						oResponse["result"] := .T.
						oResponse["response"] := jValid
						return oResponse
					Endif 
				elseif aTemp[1][1] == .F.

					jValidate['success']		:=  .F.
					jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
					jValidate['hasError']		:=  .T.
					jValidate['message']		:=	aTemp[1][2]
					jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
					If cPaisLoc == "MEX"
						If !VAZIO(aTemp)
							jValidate['compensation']	:=  aTemp[1][4]
						Else
							jValidate['compensation'] := .F.
						ENDIF
					EndIf
					jValid['validations'] 		:= jValidate

					oResponse["result"] := .T.
					oResponse["response"] := jValid
					return oResponse
				EndIf
			EndIF
		EndIf
		If alltrim(oJParams['params']['mv_par04']) <>"" .or. alltrim(oJParams['params']['mv_par05']) <>""
			lRet 	:= .F.
			lRecAnu := SEL->(ColumnPos("EL_RETGAN")) > 0
			cRecSus := ""
			If SuperGetMv("MV_SERREC",.F.,.F.) 
			aRec := separa(oJParams['params']['mv_par04'],"-")
			cSer 	:=aRec[1]
			cRec 	:= aRec[2]
			else 
				cSer 	:= PadR( "",nSertam)
				cRec 	:=  oJParams['params']['mv_par05']
			EndIf
			
			If !Empty(cSer) .Or. !Empty(cRec)
				DbSelectArea("SEL")
				SEL->(DbSetorder(8)) //EL_FILIAL+EL_SERIE+EL_RECIBO+EL_TIPODOC+EL_PREFIXO+EL_NUMERO+EL_PARCELA+EL_TIPO
				If SEL->(dbSeek(xFilial("SEL") + cSer + cRec))
					If SEL->EL_CANCEL .And. !Empty(SEL->EL_UUID) .And. !Empty(SEL->EL_FECTIMB)
						lRet := .T.
						If lRecAnu 
							If !(SEL->EL_RETGAN == "S")
							
								jValidate['success']		:=  .F.
								jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
								jValidate['hasError']		:=  .T.
								jValidate['message']		:=	STR0018
								jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
								jValidate['compensation'] := .F.
								jValid['validations'] 		:= jValidate

								oResponse["result"] := .T.
								oResponse["response"] := jValid
								return oResponse
								
							Else
								If F998VldSus(cSer,cRec,@cRecSus)
									jValidate['success']		:=  .F.
									jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
									jValidate['hasError']		:=  .T.
									jValidate['message']		:=	STR0019
									jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
									jValidate['compensation'] := .F.
									jValid['validations'] 		:= jValidate

									oResponse["result"] := .T.
									oResponse["response"] := jValid
									return oResponse
									
								EndIf
							EndIf
						EndIf
					Else
						jValidate['success']		:=  .F.
						jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
						jValidate['hasError']		:=  .T.
						jValidate['message']		:=	STR0020
						jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
						jValidate['compensation'] := .F. 
						jValid['validations'] 		:= jValidate
						oResponse["result"] := .T.
						oResponse["response"] := jValid
						return oResponse
					EndIf
				Else
					jValidate['success']		:=  .F.
					jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
					jValidate['hasError']		:=  .T.
					jValidate['message']		:=	STR0021
					jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
					jValidate['compensation'] := .F.
					jValid['validations'] 		:= jValidate
					oResponse["result"] := .T.
					oResponse["response"] := jValid
					return oResponse
				EndIf
			EndIf
		EndIF

		If ExistBlock("F998NRG3")
			ExecBlock("F998NRG3",.F.,.F.)
		Endif
		
		lCompen := chekcCompen(oJParams,@jValidate)  //Si es compensación

		IF jValidate['success'] == .F.  //Muestra el mensaje de error que se retorna en jValidate 
			jValid['validations'] 	:= jValidate
			oResponse["result"] 	:= .T.
			oResponse["response"] 	:= jValid
			RETURN oResponse
		ENDIF

		If  oJParams['validations']['responseRA'] == "" .AND. !lCompen
			If len(oJParams['formasPago']) == 0 .and. len(oJParams['titulos']) == 0
				jValidate['success']		:=  .F.
				jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
				jValidate['requestRA']		:= ""
				jValidate['message']		:=	STR0002
				jValidate['difference']		:= 0
				jValidate['responseRA']		:=	""
				jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
				If cPaisLoc == "MEX"
					If !VAZIO(aTemp)
						jValidate['compensation']	:=  aTemp[1][4]
					Else
						jValidate['compensation'] := .F.
					ENDIF
				EndIf
				jValid['validations'] 		:= jValidate

				oResponse["result"] := .T.
				oResponse["response"] := jValid
				return oResponse
			EndIf
			For i := 1 to len(oJParams['monedas'])
				If oJParams['monedas'][i]['balance'] < 0
					jValidate['success']		:=  .F.
					jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
					jValidate['requestRA']		:= ""
					jValidate['message']		:=	STR0003 +" "+ upper(oJParams['monedas'][i]['coin'])+" " + STR0004
					jValidate['difference']		:=	oJParams['monedas'][i]['balance']
					jValidate['responseRA']		:=	""
					jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
					jValidate['hasError']		:=  .T.
					If cPaisLoc == "MEX"
						If !VAZIO(aTemp) 
							jValidate['compensation']	:=  aTemp[1][4]
						Else
							jValidate['compensation'] := .F.
						ENDIF
					EndIf
					jValid['validations'] := jValidate

					oResponse["result"] := .T.
					oResponse["response"] := jValid

					return oResponse
				ElseIf oJParams['monedas'][i]['balance'] > 0
					IF checkRetPaymentForm(oJParams) 
						jValidate['success']		:=  .F.
						jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
						jValidate['requestRA']		:= .F.
						jValidate['message']		:=	 STR0016 +" "+ STR0014 +" "+ STR0017
						jValidate['difference']		:=	oJParams['monedas'][i]['balance']
						jValidate['responseRA']		:=	""
						jValidate['saveTime'] 		:= SubStr(GetRmtTime(),1,8)
						jValidate['hasError']		:=  .T.
						jValid['validations'] 		:= jValidate

						oResponse["result"] := .T.
						oResponse["response"] := jValid
						
						return oResponse
					Else
						jValidate['success']		:= .F.
						jValidate['cancelcfdi']		:= .T. //True = no solicitara Timbrado y False = solicitara timbrado
						jValidate['requestRA']		:= .T.
						jValidate['message']		:=	STR0016  //"Existen diferencias en el recibo"
						jValidate['message2']		:=	cTemp + STR0005 + ALLTRIM(TRANSFORM(oJParams['monedas'][i]['balance'], "@E 999,999,999,999.99") ) + "?"   //"¿Generar anticipo por $"
						jValidate['difference']		:=	oJParams['monedas'][i]['balance']
						jValidate['responseRA']		:=	""
						jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
						If cPaisLoc == "MEX"
							If !VAZIO(aTemp)
								jValidate['compensation']	:=  aTemp[1][4]
							Else
								jValidate['compensation'] := .F.
							ENDIF
						EndIf

						jValid['validations'] := jValidate
						oResponse["result"] := .T.
						oResponse["response"] := jValid

						return oResponse
					EndIf					
				EndIf
			Next
		EndIf

		SetFunName("FINA887")
		oMdlTab  := FwLoadModel("FINA887")

		oMdlTab:SetOperation(MODEL_OPERATION_INSERT)
		oMdlTab:Activate()
		
		// se Limpia el Arrreglo de Triggers para el Guardados
		oMdlTab:Getmodel('SEL_DETAIL'):OFORMMODELSTRUCT:ATRIGGERS:= {}
		
		//Encabezado - FJT
		//Campos grabados que no son considerados en los datos enviados.
		oMdlTab:SetValue('FJT_MASTER', "FJT_FILIAL" , xFilial("FJT"))
		oMdlTab:SetValue('FJT_MASTER', "FJT_DTDIGI" ,	dDataBase )

		aEncab := oJParams['encabezado']:GetNames()
		If oJParams['encabezado']:hasproperty('emissa') .and. Len(aEncab) > 0
			For i := 1 To Len(aEncab)
				cCampo := cTabEnc + UPPER(aEncab[i])
				cValue := oJParams['encabezado'][aEncab[i]]
				If !Empty(cValue) .and. oMdlTab:GetModel('FJT_MASTER'):HasField(cCampo) //Verifica si el campo existe en el modelo.
					If Getsx3Cache( cCampo,'X3_VISUAL' ) <> 'V' //Verifica si el campo no es visual.
						If Getsx3Cache( cCampo,'X3_TIPO' ) == 'D'
							cValue := STOD(StrTran(cValue,"-",""))
						EndIf

						oMdlTab:SetValue('FJT_MASTER', cCampo , cValue)
					EndIf
				EndIf
			Next
		else
			oMdlTab:SetValue('FJT_MASTER', "FJT_RECIBO" , oJParams['encabezado']['recibo'])
			oMdlTab:SetValue('FJT_MASTER', "FJT_SERIE" , Alltrim(oJParams['encabezado']['serie']))
			oMdlTab:SetValue('FJT_MASTER', "FJT_EMISSA" , CTOD(oJParams['encabezado']['fechaEmision']))
			oMdlTab:SetValue('FJT_MASTER', "FJT_NATURE" , oJParams['encabezado']['modalidad'])
			oMdlTab:SetValue('FJT_MASTER', "FJT_CLIENT" , oJParams['encabezado']['cliente'])
			oMdlTab:SetValue('FJT_MASTER', "FJT_LOJA" 	, oJParams['encabezado']['tienda'])
			oMdlTab:SetValue('FJT_MASTER', "FJT_COBRAD" , oJParams['encabezado']['cobrador'])
			oMdlTab:SetValue('FJT_MASTER', "FJT_RECPRV" ,IIF(cPaisLoc=="PAR",oJParams['encabezado']['recprov'],""))
		EndIf
	
		//Campos del modelo considerados en otros apartados del objeto oJParams.
		oMdlTab:SetValue('FJT_MASTER', "GERANCC" 	, oJParams['validations']['responseRA'])
		oMdlTab:SetValue('FJT_MASTER', "DOCUMEN" 	,  "RA")
		oMdlTab:SetValue('FJT_MASTER', "ASIENTO" 	, oJParams['params']['mv_par01'])
		oMdlTab:SetValue('FJT_MASTER', "AGRUPA" 	, oJParams['params']['mv_par02'])
		oMdlTab:SetValue('FJT_MASTER', "ONLINE" 	, oJParams['params']['mv_par03'])
		cCampo := ""
		cValue := ""

		For i := 1 to len(oJParams['monedas'])
			If len(oJParams['monedas']) > 1 .and. i > 1
				oMdlTab:GetModel('MOE_DETAIL' ):AddLine()
			EndIF
			oMdlTab:SetValue('MOE_DETAIL',"MOEDA" 		, alltrim(str(oJParams['monedas'][i]['moneda'] )))
			oMdlTab:SetValue('MOE_DETAIL',"TASA" 		, oJParams['monedas'][i]['tasa'] )
			oMdlTab:SetValue('MOE_DETAIL',"RECIBIDO"	, oJParams['monedas'][i]['received'] )
			oMdlTab:SetValue('MOE_DETAIL',"SALDO" 		, oJParams['monedas'][i]['balance'] )
		Next

		//Detalle - SEL
		For i := 1 to len(oJParams['formasPago'])

			nEmissao := 	AScan(oJParams['formasPago'][i],{|x|x['property'] == "emisionDate"})
			nDtvcto  :=  	AScan(oJParams['formasPago'][i],{|x|x['property'] == "vencimientoDate"})
			nEmisrec :=   	AScan(oJParams['formasPago'][i],{|x|x['property'] == "emisrecDate"})
			nTipoOri :=		AScan(oJParams['formasPago'][i],{|x|x['property'] == "tipo"})
			nTipo  :=   	AScan(oJParams['formasPago'][i],{|x|x['property'] == "tipodoc"})
			nHora  :=   	AScan(oJParams['formasPago'][i],{|x|x['property'] == "hora"})
			nAdmFin:=	    AScan(oJParams['formasPago'][i],{|x|x['property'] == "admin"})
			If len(oJParams['formasPago']) > 1 .and. i > 1
				oMdlTab:GetModel('SEL_DETAIL' ):AddLine()
			EndIF

			oMdlTab:SetValue('SEL_DETAIL',"EL_CLIENTE" 		, oMdlTab:GetValue('FJT_MASTER',"FJT_CLIENT")) 
			oMdlTab:SetValue('SEL_DETAIL',"EL_NATUREZ" 		, oMdlTab:GetValue('FJT_MASTER',"FJT_NATURE"))
			oMdlTab:SetValue('SEL_DETAIL',"EL_LOJA" 		, oMdlTab:GetValue('FJT_MASTER',"FJT_LOJA"))
			oMdlTab:SetValue('SEL_DETAIL',"EL_DTDIGIT" 		, dDataBase)
			IF nTipoOri > 0 
				oMdlTab:SetValue('SEL_DETAIL',"EL_TIPO" 		, ALLTRIM(oJParams['formasPago'][i][nTipoOri]["value"]))
			ELSE
				oMdlTab:SetValue('SEL_DETAIL',"EL_TIPO" 		, ALLTRIM(oJParams['formasPago'][i][nTipo]["value"]))
			ENDIF
			oMdlTab:SetValue('SEL_DETAIL',"EL_FILIAL"		, xFilial("SEL"))
			oMdlTab:SetValue('SEL_DETAIL',"EL_TIPODOC" 		, ALLTRIM(oJParams['formasPago'][i][nTipo]["value"]))

			IF !VAZIO(oJParams['params']['mv_par07'])
				oMdlTab:SetValue('SEL_DETAIL',"EL_IDENTEE"		, oJParams['params']['mv_par07'])
				oMdlTab:SetValue('SEL_DETAIL',"EL_FCHIDEN"		, STOD(oJParams['params']['compensationDate'])) 
			ENDIF

			//Se registran en el submodelo ADM_DETAIL los datos de la administradora financiera
			If nAdmFin > 0 .AND. !VAZIO(oJParams['formasPago'][i][nAdmFin]['value'])
				If len(oJParams['formasPago']) > 1 .AND. i > 1
					oMdlTab:GetModel('ADM_DETAIL' ):AddLine()
				ENDIF
				oMdlTab:SetValue('ADM_DETAIL',"CODE" , oJParams['formasPago'][i][nAdmFin]["value"])
			ENDIF

			If ALLTRIM(oJParams['formasPago'][i][nTipo]["value"]) = "RI"
				nRI := i
			EndIf

			//Retenciones argentina
			IF cPaisLoc == "ARG" .AND. ALLTRIM(oJParams['formasPago'][i][nTipo]["value"]) $ 'RS|RG|RB|RI|RM'
				nCodFis	:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "cfo"})
				nAliq	:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "aliq"})
				nValbase:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "valbase"})
				nProvin	:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "provin"})
				nConcsus:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "concsus"})
				nAgregan:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "agregan"})
				oMdlTab:SetValue('SEL_DETAIL',"EL_ALIQ" 		, oJParams['formasPago'][i][nAliq]["value"])
				oMdlTab:SetValue('SEL_DETAIL',"EL_VALBASE" 		, oJParams['formasPago'][i][nValbase]["value"])
				oMdlTab:SetValue('SEL_DETAIL',"EL_PROVIN" 			, IIF(nProvin!=0,oJParams['formasPago'][i][nProvin]["value"],""))
				oMdlTab:SetValue('SEL_DETAIL',"EL_CFO" 			, IIF(nCodFis!=0,oJParams['formasPago'][i][nCodFis]["value"],""))
				oMdlTab:SetValue('SEL_DETAIL',"EL_CONCSUS" 		, IIF(nConcsus!=0,oJParams['formasPago'][i][nConcsus]["value"],""))
				oMdlTab:SetValue('SEL_DETAIL',"EL_AGREGAN" 		, IIF(nAgregan!=0,oJParams['formasPago'][i][nAgregan]["value"],""))
			ENDIF

			//Retenciones
			IF cPaisLoc == "PAR" .AND. ALLTRIM(oJParams['formasPago'][i][nTipo]["value"]) $ "RI|RR"
				nAliq	:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "alqimp1"})
				nValbase:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "valimp1"})
				oMdlTab:SetValue('SEL_DETAIL',"EL_ALQIMP1" 		, oJParams['formasPago'][i][nAliq]["value"])
				oMdlTab:SetValue('SEL_DETAIL',"EL_VALIMP1" 		, oJParams['formasPago'][i][nValbase]["value"])
			ENDIF
			IF cPaisLoc == "PER" .AND. ALLTRIM(oJParams['formasPago'][i][nTipo]["value"]) $ "RI"
				nSerret	:=AScan(oJParams['formasPago'][i],{|x|x['property'] == "serret"})
				oMdlTab:SetValue('SEL_DETAIL',"EL_SERRET" 			, oJParams['formasPago'][i][nSerret]["value"])
			ENDIF


			If alltrim(oJParams['params']['mv_par04']) <>"" .or. alltrim(oJParams['params']['mv_par05']) <>""
				oMdlTab:SetValue('SEL_DETAIL',"EL_SERSUS" 			, cSer )
				oMdlTab:SetValue('SEL_DETAIL',"EL_RECSUS" 			, cRec )
			ENDIF
			
			jx := 1
			WHILE  jx < Len(oJParams['formasPago'][i])
				if oJParams['formasPago'][i][jx]["property"] $ ("emisionDate|vencimientoDate|emisrecDate|id|factoraje")
					jx++
					loop
				EndIF
				cCampo := cTable + UPPER(oJParams['formasPago'][i][jx]["property"])

				//Campos especuales en argentina
				IF cPaisLoc== "ARG" .AND. cCampo$'EL_ALIQ|EL_VALBASE'
					If cCampo == "EL_ALIQ"
						cCampo := "EL_ALQIMP1"
					ElseIf cCampo == "EL_VALBASE"
						cCampo := "EL_VALIMP1"
					ENDIF
				EndIF

				cTitulo :=   Getsx3Cache( cCampo,'X3_TITULO' )
				cCampoTipo := Getsx3Cache( cCampo,'X3_TIPO' )

				If cCampoTipo == 'D'
					IF cCampo == "EL_EMISSAO"
						dValue := ctod(oJParams['formasPago'][i][nEmissao]["value"])
						oMdlTab:SetValue('SEL_DETAIL',cCampo ,dValue)
					EndIf
					IF cCampo == "EL_DTVCTO"
						dValue := ctod(oJParams['formasPago'][i][nDtvcto]["value"])
						oMdlTab:SetValue('SEL_DETAIL',cCampo ,dValue)
					EndIf
					IF cCampo == "EL_EMISREC" .And. nEmisrec > 1
						dValue := ctod(oJParams['formasPago'][i][nEmisrec]["value"])
						oMdlTab:SetValue('SEL_DETAIL',cCampo ,dValue)
					EndIf
				EndIF
				IF cCampoTipo == 'N'
					nValue := oJParams['formasPago'][i][jx]["value"]
					oMdlTab:SetValue('SEL_DETAIL',cCampo ,nValue)
				EndIF
				IF cCampoTipo == 'C'
						cValue := ALLTRIM(oJParams['formasPago'][i][jx]["value"])
						oMdlTab:SetValue('SEL_DETAIL',cCampo ,cValue)
				EndIF
				IF cCampoTipo == 'M'
					cValue := oJParams['formasPago'][i][jx]["value"]
					oMdlTab:SetValue('SEL_DETAIL',cCampo ,cValue)
				EndIF
				cTitulo := ""
				jx++
			EndDo

		NEXT
		//Detalle de los titulos
		DbSelectArea("SE1")
		For i := 1 to len(oJParams['titulos'])

			If len(oJParams['titulos']) > 1 .and. i > 1
				oMdlTab:GetModel('SE1_DETAIL' ):AddLine()
			EndIF
			oMdlTab:SetValue('SE1_DETAIL',"E1_FILIAL" 		, xFilial("SE1"))
			oMdlTab:SetValue('SE1_DETAIL',"E1_PREFIXO" 		, oJParams['titulos'][i]['prefix']	)
			oMdlTab:SetValue('SE1_DETAIL',"E1_NUM" 			, oJParams['titulos'][i]['billnumber']	)
			oMdlTab:SetValue('SE1_DETAIL',"E1_PARCELA" 		, oJParams['titulos'][i]['installment'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_TIPO" 		, oJParams['titulos'][i]['type'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_CLIENTE" 		, oJParams['titulos'][i]['customer'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_LOJA" 		, oJParams['titulos'][i]['unit'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_NATUREZ" 		, oJParams['titulos'][i]['class']) 
			oMdlTab:SetValue('SE1_DETAIL',"E1_DESCONT" 		, oJParams['titulos'][i]['discount'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_MULTA" 		, oJParams['titulos'][i]['fine'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_JUROS" 		, oJParams['titulos'][i]['interest'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_SALDO" 		, oJParams['titulos'][i]['balance'])
			oMdlTab:SetValue('SE1_DETAIL',"E1_MOEDA" 		, oJParams['titulos'][i]['currency'])
			oMdlTab:SetValue('SE1_DETAIL',"BAIXAR" , (oJParams['titulos'][i]['cobrar']+oJParams['titulos'][i]['discount']-oJParams['titulos'][i]['fine']-oJParams['titulos'][i]['interest']))
			oMdlTab:SetValue('SE1_DETAIL',"RECNO" ,  oJParams['titulos'][i]['recno'])

			oMdlTab:SetValue('SE1_DETAIL',"E1_MOTIVO" 		, "NOR")
			//Desbloqueo de registros
			nRecno :=  oJParams['titulos'][i]['recno']
			SE1->(MsRUnlock(nRecno))
			
			IF !oMdlTab:GetModel('SE1_DETAIL'):VldLineData() //Validacion de linea
				   aError := oMdlTab:GetErrorMessage()
				   jValidate['success']        :=  .F.
                   jValidate['cancelcfdi']     :=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
                   jValidate['requestRA']      :=  ""
                   jValidate['message']        :=  aError[6] //Se retorna mensaje de error
                   jValidate['difference']     :=  0
                   jValidate['responseRA']     :=  ""
                   jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
                   jValid['validations'] := jValidate
                   oResponse["result"] := .T.
                   oResponse["response"] := jValid
                   RETURN oResponse
			ENDIF
		Next	
		
		IF SEL->(ColumnPos("EL_FACTOR"))
			If oJParams['params']['mv_par06'] == 1 .AND. !(ValType(oJParams['compensations']) == "U").And.  !VAZIO(oJParams['compensations'][1]['items'])
				oMdlTab:GetModel('FAC_DETAIL' )
				oMdlTab:SetValue('SEL_DETAIL','EL_FACTOR' , "1") 
				oMdlTab:SetValue('FAC_DETAIL','FACTOR',"1") 
				oMdlTab:SetValue('FAC_DETAIL','VALUE',oJParams['compensations'][1]['compensation']) 
				FOR nX := 1 TO LEN(oJParams['compensations'])
					FOR nV := 1 TO LEN(oJParams['compensations'][nX]['items'])
						If len(oJParams['compensations'][nX]['items']) > 1 .and. nV > 1 .Or. nX > 1
							oMdlTab:GetModel('COM_DETAIL'):AddLine()
						EndIF
						oMdlTab:SetValue('COM_DETAIL','RECNO',oJParams['compensations'][nX]['items'][nV]['recno']) 
					NEXT
				NEXT
			Else
				oMdlTab:SetValue('FAC_DETAIL','FACTOR',"2") 
			EndIf
		ENDIF

		cHourSave := SubStr(GetRmtTime(),1,8)
		IF SEL->(ColumnPos("EL_HORA"))
			oMdlTab:SetValue('GEN_DETAIL',"HOURSAVERECEIPT" 	, cHourSave )
		ENDIF
		
		If oMdlTab:VldData()
			//Punto de entrada que permite validar el recibo, en caso de retornar falso no se guardara el recibo.
			IF ExistBlock("F998NROK")
				a998ok := ExecBlock("F998NROK",.F.,.F.,{oJParams['formasPago'],oJParams['titulos'],oJParams['encabezado']})

				IF a998ok[1][1] == .F.
					jValidate['success']		:=  .F.
					jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
					jValidate['requestRA']		:= ""
					jValidate['message']		:=	a998ok[1][2] //Se retorna mensaje de error
					jValidate['difference']		:=	0
					jValidate['responseRA']		:=	""
					jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
					jValid['validations'] := jValidate

					oResponse["result"] := .T.
					oResponse["response"] := jValid

					RETURN oResponse
				ENDIF
			EndIf
			oMdlTab:CommitData()

			IF ExistBlock("F998NRG2")
				ExecBlock('F998NRG2',.F.,.F.)	
			ENDIF

			jValidate['success']		:=  .T.
			IF cPaisLoc == "MEX"
				//Validacion si aTemp esta vacio por default no timbre
				If !VAZIO(aTemp)
					jValidate['cancelcfdi']		:=  IIF(aTemp[1][4],.F.,aTemp[1][3] ) //True = no solicitara Timbrado y False = solicitara timbrado
				else
					jValidate['cancelcfdi']		:=  .F.
				ENDIF
			Else
				jValidate['cancelcfdi']		:=  .T.
			EndIf
			jValidate['message']		:=	IIF(!VAZIO(cTemp),cTemp+ "   " +STR0001  ,STR0001)
			jValidate['receipt']		:= oJParams['encabezado']['recibo']
			If cPaisLoc == "MEX"
				If !VAZIO(aTemp)
					jValidate['compensation']	:=  aTemp[1][4]
				Else
					jValidate['compensation'] := .F.
				ENDIF
			EndIf
			jValidate['serie']		:= oJParams['encabezado']['serie']
			jValidate['client']		:= Iif(oJParams['encabezado']:hasproperty('client'), oJParams['encabezado']['client'], oJParams['encabezado']['cliente']) 
			jValidate['store']		:= Iif(oJParams['encabezado']:hasproperty('loja'), oJParams['encabezado']['loja'], oJParams['encabezado']['tienda']) 
			jValidate['date']		:=	dtos(dDataBase)
			jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
			jValid['validations'] := 	jValidate
		Else
			aError := oMdlTab:GetErrorMessage()
			jValidate['success']		:=  .F.
			jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
			jValidate['message']		:=	aError[6]
			If aError[5] == 'FJTNUMEXIS' 									//El número ya existe.
				aAreaRec := GetArea()
				cRecAux := oJParams['encabezado']['recibo'] 				//Numero de recibo actual
				nFJTTamNum := Getsx3Cache( "FJT_RECIBO", 'X3_TAMANHO' )
				nFJTTamSer := Getsx3Cache( "FJT_SERIE" , 'X3_TAMANHO' ) 
				DbSelectArea("FJT")
				FJT->(DbSetOrder(1))
				While .T. //Se busca el siguiente número no usado
					cRecAux := StrZero(Val(cRecAux)+1,nFJTTamNum)	//Aumenta la numeración del recibo.
					If !(FJT->(DbSeek(xFilial("FJT") + PADR(oJParams['encabezado']['serie'], nFJTTamSer) + cRecAux )))
						Exit
					EndIf
				Enddo
				RestArea(aAreaRec)
				jValidate['nextReceipt'] := cRecAux
				cRecAux := Iif(!Empty(oJParams['encabezado']['serie']), AllTrim(oJParams['encabezado']['serie'])+"-","") + cRecAux
				jValidate['message2'] := StrTran(STR0028, "#recibo#", cRecAux)
			Else
				jValidate['hasError']		:=  .T.
				If alltrim(aError[7]) <> "" .AND. !VAZIO(FwCutOff(aError[7],.T.)) //FwCutOff -> Funcao de apoio para retirar CR/LF/TAB de strings
					jValidate['message']		+=	Chr(10)+ Chr(13)  + STR0027 +" " +aError[7]    //Solución: 
				Endif
			EndIf
			jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
			jValid['validations'] := jValidate

		EndIf

		oMdlTab:DeActivate()
		oReceiptDetaiAdapter := saveReceiptDetailData():new()

		oResponse["result"] := .T.
		oResponse["response"] := jValid

return oResponse

/*/{Protheus.doc} ValidCfdiReceipts
Metodo exclusivo de mexico que verificara si es una compensacion o PUE O PPD desde la opcion desde la opción de BUSCAR RECIBO 
@type function
@version  1
@author luis.aboytes
@since 16/6/2021
/*/
Function ValidCfdiReceipts(jBody,jData)
	Local lRet 		:= .T. As Logical
	Local lCompen 	:= .F. As Logical
	Local nX		As Numeric
	Local nA		As Numeric
	Local nDocSonPUE := 0 As Numeric
	Local nDocSonPPD := 0 As Numeric
	Local nImpSum 	:= 0  As Numeric
	Local nImpRes 	:= 0  As Numeric
	Local valueBx	:= 0 As Numeric
	Local tasaBx	:= 0 As Numeric
	Local cMetPagSAT := "" As Character
	Local cMensaje	 := "" As Character
	Local cAviso	 := "" As Character
	Local cUnit		:= "" As Character
	Local cClientBx	 As Character
	Local cPrefix	:= "" As Character
	Local cDocument	:= "" As Character
	Local cTipo		:= "" As Character
	Local cBranch	:= "" As Character
	Local jResponse	As 	Object
	Local lActSEL 	:= .F. As Logical
	Local cSaltoLin	:= Chr(10)+ Chr(13) As Character
	Local lCancelTim:= .F. As Logical
	Local cCompensacion := "NCC|RA" As Character
	Local aCompensacion := {} As Array
	Local nType		:= 0 As Numeric

	aCompensacion := StrTokArr(cCompensacion, "|")
	jResponse := JsonObject():new()

	For nA := 1 To Len(jBody)
		nDocSonPUE := 0 
		nDocSonPPD := 0

		For nX := 1 To Len(jBody[nA]['titulos'])
			cClientBx 	:= jBody[nA]['titulos'][nX]['customer']
			cTipo		:= jBody[nA]['titulos'][nX]['type']
			cTipoDoc	:= jBody[nA]['titulos'][nX]['typeDoc']
			valueBx		:= jBody[nA]['titulos'][nX]['cobrar']
			tasaBx		:= jBody[nA]['titulos'][nX]['currency']
			cDocument	:= jBody[nA]['titulos'][nX]['billnumber']
			cBranch		:= jBody[nA]['titulos'][nX]['branch']
			cPrefix		:= jBody[nA]['titulos'][nX]['prefix']
			cUnit		:= jBody[nA]['titulos'][nX]['unit']

			nType := AScanx(aCompensacion,{|x| ALLTRIM(x) == cTipo})
		
			If AllTrim(cTipo) $ "NF|NDC" //Si el documento es tipo NF o NDC
				nImpSum+= valueBx * tasaBx
				cMetPagSAT := ""

				//Obtenemos la  informacion de Condición de Pago para documentos tipo NF y NDC, seleccionados en Cobros Diversos.
				fObtInfCon(cBranch,cDocument,cPrefix,cClientBx,cUnit, AllTrim(cTipo), @cMetPagSAT)

				If AllTrim(cMetPagSAT) != "PUE"
					nDocSonPPD += 1 //Incrementa contador de NF/NDC que tienen Metodo Pago PPD
				Else
					nDocSonPUE += 1 //Incrementa contador de NF/NDC que tienen Metodo Pago PUE
				EndIf
			ElseIf nType != 0 .AND. cTipoDoc == "TB" //Si el documento es tipo NCC o RA
				nImpRes += valueBx * tasaBx
				lCompen := .T.
			EndIf
		Next

		//Si el usuario no ingreso una forma de pago indica que se realizara una compensación
		If LEN(jBody[nA]['formaspago'])>0
			lActSEL := .T.
		End

		GetMensa(@nImpRes,@lCompen,@lActSEL,@lCancelTim,@cMensaje,@cSaltoLin,@nDocSonPUE,@nDocSonPPD,@lRet,@nImpSum)

		If !Empty(cMensaje) //Si hay mensaje para mostrar
			If lRet
				cAviso += STR0011 + cSaltoLin + cMensaje //"No se solicitará el timbrado del recibo, por las siguientes características:"
				jResponse['lret'] := lRet
				jResponse['aviso'] := cAviso
				jResponse['canceltimb'] := lCancelTim
				jResponse['compensation'] := lCompen
			Else
				cAviso += STR0013 + cSaltoLin + cMensaje //"No se permitirá el grabado del recibo, por las siguientes características:"
				jResponse['lret'] := lRet
				jResponse['aviso'] := cAviso
				jResponse['canceltimb'] := lCancelTim
				jResponse['compensation'] := lCompen
			EndIf
		ELSE	
			jResponse['lret'] := lRet
			jResponse['aviso'] := ""
			jResponse['canceltimb'] := lCancelTim
			jResponse['compensation'] := lCompen
		ENDIF
	Next

Return jResponse

/*/{Protheus.doc} ValidCfdiReceipt
Metodo exclusivo de mexico que verificara si es una compensacion o PUE O PPD desde la opcion desde la opción de NUEVO RECIBO
@type function
@version  1
@author luis.aboytes
@since 23/6/2022
/*/
Function ValidCfdiReceipt(jBody,jData) AS Array
	Local lRet 		:= .T. As Logical
	Local lCompen 	:= .F. As Logical
	Local nX		As Numeric
	Local nDocSonPUE := 0 As Numeric
	Local nDocSonPPD := 0 As Numeric
	Local nImpSum 	:= 0  As Numeric
	Local nImpRes 	:= 0  As Numeric
	Local valueBx	:= 0 As Numeric
	Local tasaBx	:= 0 As Numeric
	Local cMetPagSAT := "" As Character
	Local cMensaje	 := "" As Character
	Local cAviso	 := "" As Character
	Local cUnit		:= "" As Character
	Local cClientBx	 As Character
	Local cPrefix	:= "" As Character
	Local cReceipt	:= "" As Character
	Local cTipo		:= "" As Character
	Local cBranch	:= "" As Character
	Local aResponse	:= {}  As Array
	Local lActSEL 	:= .F. As Logical
	Local cSaltoLin	:= Chr(10)+ Chr(13) As Character
	Local lCancelTim:= .F. As Logical
	Local cCompensacion := "NCC|RA" As Character
	Local aCompensacion := {} As Array
	Local nType		:= 0 As Numeric

	aCompensacion := StrTokArr(cCompensacion, "|")

	For nX := 1 To Len(jBody['titulos'])
		cClientBx   := jBody['titulos'][nX]['customer']
		cTipo		:= jBody['titulos'][nX]['type']
		valueBx		:= jBody['titulos'][nX]['cobrar']
		tasaBx		:= jBody['titulos'][nX]['currency']
		cReceipt	:= jBody['titulos'][nX]['billnumber']
		cBranch		:= jBody['titulos'][nX]['branch']
		cPrefix		:= jBody['titulos'][nX]['prefix']
		cUnit		:= jBody['titulos'][nX]['unit']

		nType := AScanx(aCompensacion,{|x| ALLTRIM(x) == cTipo})
		
		If AllTrim(cTipo) $ "NF|NDC" //Si el documento es tipo NF o NDC
			nImpSum+= valueBx * tasaBx
			cMetPagSAT := ""

			//Obtenemos la  informacion de Condición de Pago para documentos tipo NF y NDC, seleccionados en Cobros Diversos.
			fObtInfCon(cBranch,cReceipt,cPrefix,cClientBx,cUnit, AllTrim(cTipo), @cMetPagSAT)

			If AllTrim(cMetPagSAT) != "PUE"
				nDocSonPPD += 1 //Incrementa contador de NF/NDC que tienen Metodo Pago PPD
			Else
				nDocSonPUE += 1 //Incrementa contador de NF/NDC que tienen Metodo Pago PUE
			EndIf
		ElseIf nType != 0 //Si el documento es tipo NCC o RA
			nImpRes += valueBx * tasaBx
			lCompen := .T.
		EndIf
	Next

	//Si el usuario no ingreso una forma de pago indica que se realizara una compensación
	If LEN(jBody['formasPago'])>0
		lActSEL := .T.
	End

	GetMensa(@nImpRes,@lCompen,@lActSEL,@lCancelTim,@cMensaje,@cSaltoLin,@nDocSonPUE,@nDocSonPPD,@lRet,@nImpSum)

	If !Empty(cMensaje) //Si hay mensaje para mostrar
		If lRet
			cAviso += STR0011 + cSaltoLin + cMensaje //"No se solicitará el timbrado del recibo, por las siguientes características:"
			AADD(aResponse,{lRet,cAviso,lCancelTim,lCompen})
		Else
			cAviso += STR0013 + cSaltoLin + cMensaje //"No se permitirá el grabado del recibo, por las siguientes características:"
			AADD(aResponse,{lRet,cAviso,lCancelTim,lCompen})
		EndIf
	EndIf
Return aResponse


/*/{Protheus.doc} GetMensa
Funcion que obtiene mensajes para compensaciones, PUE, PPD
@type function
@version  1
@author luis.aboytes
@since 23/6/2022
/*/
Static Function GetMensa(nImpRes,lCompen,lActSEL,lCancelTim,cMensaje,cSaltoLin,nDocSonPUE,nDocSonPPD,lRet,nImpSum)
	If nImpRes > 0
		If lCompen .and. !lActSEL//Compensaciones
			lCancelTim := .T.
			cMensaje += STR0006 + cSaltoLin //" - Es una compensación de documentos."
		ElseIf nDocSonPUE > 0 .And. nDocSonPPD == 0
			lCancelTim := .T.
			cMensaje += STR0006 + cSaltoLin //" - Es una compensación de documentos."
			cMensaje += STR0007 + cSaltoLin //" - Existen documentos seleccionados que fueron pagados en una sola exhibición (PUE)."
		ElseIf nDocSonPUE == 0 .And. nDocSonPPD > 0
			cMensaje += STR0006 + cSaltoLin //" - Es una compensación de documentos."
			cMensaje += STR0008 + cSaltoLin //" - Existen documentos seleccionados que requieren generación de complemento de pago (con condición de pago en cuotas - PPD)."
			cMensaje += STR0009 + cSaltoLin //"   Solución: Realizar procesos por separado en diferentes recibos."
			lCancelTim := .T.
			lRet := .F.
		Else
			If nImpSum > 0
				lCancelTim := .T.
				cMensaje += STR0006 + cSaltoLin//" - Es una compensación de documentos."
				cMensaje += STR0007 + cSaltoLin//" - Existen documentos seleccionados que fueron pagados en una sola exhibición (PUE)."
			EndIf
		EndIf
	Else
		If nDocSonPUE > 0 .And. nDocSonPPD == 0
			cMensaje += STR0007 + cSaltoLin //" - Existen documentos seleccionados que fueron pagados en una sola exhibición (PUE)."
			lCancelTim := .T.
		ElseIf nDocSonPUE > 0 .And. nDocSonPPD > 0
			cMensaje += STR0010 + cSaltoLin//"Se está intenando dar de baja documentos con forma de pago en una sola exhibición (PUE) y Parcialidades (PPD)."
			lCancelTim := .T.
			lRet := .F.
		EndIf
	EndIf
Return

/*/{Protheus.doc} fObtInfCon
Obtiene infomracion de condicion de pago para documentos tipo NF y NDC, seleccionados en cobros diversos
@type function
@version  1
@author luis.aboytes
@since 16/06/2021
@param cFilOri, character, Filial origen
@param cNumDoc, character, Folio de documento
@param cSerie, character, Serie
@param cCliente, character, Cliente
@param cLoja, character, Tienda
@param cTipoDoc, character, Tipo de Documento
@param cMetPagSAT, character, Metodo de pago SAT
/*/
Static Function fObtInfCon(cFilOri , cNumDoc, cSerie  , cCliente , cLoja , cTipoDoc, cMetPagSAT )
	Local aArea			:= GetArea() As Array
	Local cCondPag 		:= "" As Character
	Local lModComp		:= IIf(FWSizeFilial() > 2, FWModeAccess("SE4", 1) == "E", FWModeAccess("SE4", 3) == "E") As Logical //Verifica el acceso a nivel empresa o a nivel filial
	Local cFilSE4 		:= xFilial("SE4") As Character
	Local oSaveAdapter 	:= saveReceiptDetailData():new('GET') As Object

	/*Se declaran los default en caso de mandar vacios unos parametros*/
	Default cFilOri		:= xFilial("SF2")
	Default cNumDoc		:= ""
	Default cSerie		:= ""
	Default cCliente	:= ""
	Default cLoja		:= ""

	If AllTrim(cTipoDoc) $ "NF|NDC|"
		cCondPag := oSaveAdapter:getConPag(cFilOri,cNumDoc,cSerie,cCliente,cLoja)
		cMetPagSAT := oSaveAdapter:getMenSAT(IIf(!lModComp, cFilSE4, cFilOri), cCondPag)
	EndIf

	RestArea(aArea)
Return Nil

/*/{Protheus.doc} GetUUID
Metodo que consulta si los titulos estan timbrados y retorna un logico true si todos estan timbrados, false si hay por lo menos un titulo no timbrado
@type function
@version  1
@author luis.aboytes
@since 20/8/2021
@param jBody, json, titulos en formato json
@param aResponse, array, retorna los datos de documentos no timbrados
/*/
Static Function GetUUID ( jBody , aResponse)
	Local lRet 			:= .T. As Logical
	Local oSaveAdapter 	As Object
	Local nCont			As Numeric

	IF cPaisLoc == "MEX"
		oSaveAdapter:= saveReceiptDetailData():new('GET')

		For nCont := 1 to LEN (jBody['titulos'])
			oSaveAdapter:checkTitleTimb(jBody['titulos'][nCont], @aResponse)
		Next

		If !VAZIO(aResponse)
			lRet := .F.
		EndIf

	ENDIF

Return lRet

/*/{Protheus.doc} checkRetPaymentForm
Funcion para verificar si existe una IR-Retencion
@type function
@version  1
@author Jose Gonzalez
@since 28/01/2022
@param jBody, json, datos de las formas de pago
/*/
Static Function checkRetPaymentForm(jBody)
	Local lIr 	:= .F. As Logical
	Local nX,nTipo As Numeric
	Local cTipo := "" As Character

	IF cPaisLoc=="PER"
		FOR nX := 1 To LEN(jBody['formasPago'])
			nTipo := AScan(jBody['formasPago'][nX],{|x|x['property'] == "tipodoc"})
			cTipo := ALLTRIM(jBody['formasPago'][nX][nTipo]['value'])
			IF cTipo $ "RI" 
				lIr := .T.
			ENDIF
		NEXT
	ENDIF
Return lIr

/*/{Protheus.doc} F998VldSus
Función que e recibo a sustituir no se encuentre relacionado a otro Cobro Diverso.
@type function
@author Jose Gonzalez
@since 10/03/2022
@version 1.0
@param cSerSus, caracter, Serie el Recibo cancelado.
@param cRecSus, caracter, Folio de Recibo cancelado.
/*/
Function F998VldSus(cSerSus, cRecSus, cRecEx)
	Local cAliasSus := getNextAlias()
	Local lRet := .F.
	Local nCount := 0
	Local lUsoSer := SuperGetMV('MV_SERREC')
	
	Default cSerSus := ""
	Default cRecSus := ""
	Default cRecEx  := ""

	BeginSql alias cAliasSus
		SELECT EL_SERIE, EL_RECIBO
		FROM %table:SEL% SEL
		WHERE 
		EL_SERSUS = %exp:cSerSus%
		AND EL_RECSUS = %exp:cRecSus%
		AND SEL.%notDel%
	EndSql

	count to nCount

	If nCount > 0
		lRet := .T.
		DBSelectArea(cAliasSus)
		(cAliasSus)->(DbGoTop())
		While (cAliasSus)->(!Eof())
			If lUsoSer
				cRecEx := Alltrim((cAliasSus)->EL_SERIE) + "/" + Alltrim((cAliasSus)->EL_RECIBO)
			Else
				cRecEx :=  Alltrim((cAliasSus)->EL_RECIBO)
			EndIf
			(cAliasSus)->(DbSkip())
		EndDo
	EndIf

	(cAliasSus)->(dbCloseArea())
Return lRet

/*/{Protheus.doc} chekcCompen
Verifica si es una compensación y realiza validaciones correspondientes
@type function
@version  1
@author luis.aboytes
@since 1/10/2022
/*/
Static Function chekcCompen(jBody,jValidate) 
	Local lRet 	:= .F. As Logical
	Local lCompen := .F. As Logical
	Local nX	As Numeric
	Local nTipo As Numeric
	Local cTipo := "" As Character
	Local nTotCom 		:= 0
	Local nTotForPAg 	:= 0

	IF cPaisLoc=="MEX" 
		FOR nX := 1 To LEN(jBody['formasPago'])
			nTipo := AScan(jBody['formasPago'][nX],{|x|x['property'] == "tipodoc"})
			cTipo := ALLTRIM(jBody['formasPago'][nX][nTipo]['value'])
			IIf(ALLTRIM(jBody['formasPago'][nX][nTipo]['value']) == "CO", nTotCom++, nTotForPag++)
			IF cTipo == "CO"  //Si hay una compensación en las formas de pago
				lRet	:= .T.
				lCompen := .T.
			ENDIF
		NEXT
		If nTotCom == 0 .And. !VAZIO(jBody['params']['mv_par07']) 
			jValidate['success']		:=  .F.
			jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
			jValidate['requestRA']		:= 	""
			jValidate['message']		:=	STR0024 //"Se han informado los datos de la Compensación en los parametros, pero no existe una forma de pago de tipo Compensación. Debe informar una forma de pago de tipo Compensación."
			jValidate['difference']		:= 	0
			jValidate['responseRA']		:=	""
			jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
			Return lRet
		EndIf
		If lCompen .And. nTotCom > 0 .And. VAZIO(jBody['params']['mv_par07']) 
			jValidate['success']		:=  .F.
			jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
			jValidate['requestRA']		:= 	""
			jValidate['message']		:=	STR0025 //"Se ha informado una forma de pago de tipo Compensación, pero no existe la información de la Compensación en los parametros. Debe informar en los parametros la Compensación."
			jValidate['difference']		:= 	0
			jValidate['responseRA']		:=	""
			jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
			Return lRet
		EndIf
		If lCompen .And. ((nTotCom > 1 .And. nTotForPag == 0) .Or. (nTotCom > 0 .And. nTotForPag > 0))
			jValidate['success']		:=  .F.
			jValidate['cancelcfdi']		:=  .T. //True = no solicitara Timbrado y False = solicitara timbrado
			jValidate['requestRA']		:= 	""
			jValidate['message']		:=	STR0026 //"Solo se permite realizar el uso de la Forma de Pago de tipo Compensación de manera individual."
			jValidate['difference']		:= 	0
			jValidate['responseRA']		:=	""
			jValidate['saveTime'] := SubStr(GetRmtTime(),1,8)
			Return lRet
		EndIf
	ENDIF
Return lRet
