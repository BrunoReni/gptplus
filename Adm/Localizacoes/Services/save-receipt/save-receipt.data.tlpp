#include 'tlpp-core.th'

namespace tr.saveReceiptDetail

/*/{Protheus.doc} saveReceiptDetailData
Inicializador de la clase
@type class
@version  1
@author José González
@since 19/05/2021
/*/
Class saveReceiptDetailData
	Data tableNick As Character

	Public Method new()
	Public Method getConPag()
	Public Method getMenSAT()
	Public Method checkTitleTimb()
EndClass
 
/*/{Protheus.doc} saveReceiptDetailData::new
inicializador
@type method
@version  1
@author José González
@since 19/05/2021
/*/
Method new() class saveReceiptDetailData
return

/*/{Protheus.doc} xmlAdapter::getConPag(cFilOri As Character,cNumDoc As Character,cSerie As Character,cCliente As Character,cLoja As Character) As Character
Retorna la condicion registrada en la tabla SF2 ("Tipos de entradas y salidas") dado las condiciones mandadas como parametros
@type method
@version  1
@author luis.aboytes
@since 16/06/2021
@return Character, Condicion del SAT
/*/
Method getConPag(cFilOri,cNumDoc,cSerie,cCliente ,cLoja )Class saveReceiptDetailData
	Local cQueryFields  As Character
	Local cQueryWhere   As Character
	Local cQuery        As Character
	Local cRet          As Character
	Local cAlias		As Character

	cAlias := GetNextAlias()

	//Se agregan las condiciones Where
	cQueryWhere := " D_E_L_E_T_ = ' ' "
	cQueryWhere += " AND F2_FILIAL ='"+cFilOri+"' "
	cQueryWhere += " AND F2_DOC ='"+cNumDoc+"' "
	cQueryWhere += " AND F2_SERIE ='"+cSerie+"' "
	cQueryWhere += " AND F2_CLIENTE ='"+cCliente+"' "
	cQueryWhere += " AND F2_LOJA ='"+cLoja+"' "

	//Campo a obtener el valor dadas las condiciones where
	cQueryFields := "F2_COND"

	//Se genera la consulta SQL
	cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SF2") +" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	//Se asigna el valor obtenido a cRet
	cRet :=  (cAlias)->F2_COND

	(cAlias)->(DbCloseArea())

Return cRet

/*/{Protheus.doc} xmlAdapter::getMenSAT(cFil As Character, cCondPag As Character) As Character
Retorna un metodo de pago del SAT registrado en la tabla SE4 ("Condiciones de pago")dado  las condiciones mandadas como parametros
@type method
@version  1
@author luis.aboytes
@since 16/06/2021
@return Character, metodo de pago del SAT
/*/
Method getMenSAT(cFil , cCondPag)  Class saveReceiptDetailData
	Local cQueryFields  As Character
	Local cQueryWhere   As Character
	Local cQuery        As Character
	Local cRet          As Character
	Local cAlias		As Character

	cAlias := GetNextAlias()

	//Se agregan las condiciones Where
	cQueryWhere := " D_E_L_E_T_ = ' ' "
	cQueryWhere += " AND E4_FILIAL ='"+cFil+"' "
	cQueryWhere += " AND E4_CODIGO ='"+cCondPag+"' "

	//Campo a obtener el valor dadas las condiciones where
	cQueryFields := "E4_MPAGSAT"

	//Se genera la consulta SQL
	cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SE4") +" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	//Se asigna el valor obtenido a cRet
	cRet :=  (cAlias)->E4_MPAGSAT

	(cAlias)->(DbCloseArea())

Return cRet

/*/{Protheus.doc} saveReceiptDetailData::checkTitleTimb
Metodo que verifica de acuerdo a los parametros si un titulo esta timbrado o no
@type method
@version  1
@author luis.aboytes
@since 20/8/2021
@param jTitle, json, titulos a verificar
@param aResponse, array, retorna en un array datos de documentos no timbrados
/*/
Method checkTitleTimb( jTitle , aResponse)  Class saveReceiptDetailData
	Local cQueryFields  As Character
	Local cQueryWhere   As Character
	Local cQuery        As Character
	Local cAlias		As Character
	Local cCliente		As Character
	Local cTienda		As Character
	Local cDocumento	As Character
	Local cTipo			As Character
	Local cPrefijo		As Character
	Local cFil			As Character
	Local cOrigen 		AS Character
	Local cTipoDoc 	    := "NF|NDC"
	Local lRet			:= .F.

	cCliente	:= jTitle['client']
	cTienda		:= jTitle['unit']
	cDocumento	:= jTitle['billnumber']
	cTipo		:= jTitle['type']
	cPrefijo	:= jTitle['prefix']
	cFil		:= jTitle['originbranch']
	cOrigen		:= jTitle['origin']

	If ExistBLock('A087TIPTI')
		cTipoDoc +=	ExecBlock('A087TIPTI',.F.,.F.)
	EndIf

	cAlias := GetNextAlias()

	If AllTrim(cTipo) $ cTipoDoc
		//Campos a obtener
		cQueryFields := " F2_UUID "

		//Se condiciona
		cQueryWhere := " D_E_L_E_T_ = ' ' "
		cQueryWhere += " AND F2_FILIAL = '"+cFil+"'"
		cQueryWhere += " AND F2_DOC = '"+cDocumento+"'"
		cQueryWhere += " AND F2_SERIE = '"+cPrefijo+"'"
		cQueryWhere += " AND F2_CLIENTE = '"+cCliente+"'"
		cQueryWhere += " AND F2_LOJA = '"+cTienda+"'"
		cQueryWhere += " AND F2_ESPECIE = '"+cTipo+"'"

		//Se genera la consulta SQL
		cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SF2") +" WHERE "+cQueryWhere

		cQuery := ChangeQuery(cQuery)
		MPSysOpenQuery(cQuery, cAlias)

		lRet := !VAZIO(AllTrim((cAlias)->F2_UUID))

		If !lRet .And. AllTrim(cTipo) $ "DGA"
			lRet := .T.
		Endif

		//Se prepara el array de respuesta en caso de estar vazio el timbrado
		IF VAZIO(AllTrim((cAlias)->F2_UUID))
			AADD(aResponse,{cDocumento,AllTrim((cAlias)->F2_UUID),lRet})
		EndIf

		(cAlias)->(DbCloseArea())
	Else
		If AllTrim(cTipo) $ "NCC"
			//Campos a obtener
			cQueryFields := " F1_UUID "

			//Se condiciona
			cQueryWhere := " D_E_L_E_T_ = ' ' "
			cQueryWhere += " AND F1_FILIAL = '"+cFil+"'"
			cQueryWhere += " AND F1_DOC = '"+cDocumento+"'"
			cQueryWhere += " AND F1_SERIE = '"+cPrefijo+"'"
			cQueryWhere += " AND F1_FORNECE = '"+cCliente+"'"
			cQueryWhere += " AND F1_LOJA = '"+cTienda+"'"
			cQueryWhere += " AND F1_ESPECIE = '"+cTipo+"'"

			//Se genera la consulta SQL
			cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SF1") +" WHERE "+cQueryWhere

			cQuery := ChangeQuery(cQuery)
			MPSysOpenQuery(cQuery, cAlias)

			lRet := !VAZIO(AllTrim((cAlias)->F1_UUID))

			//Se prepara el array de respuesta en caso de estar vazio el timbrado
			IF VAZIO(AllTrim((cAlias)->F1_UUID))
				AADD(aResponse,{cDocumento,AllTrim((cAlias)->F1_UUID),lRet})
			EndIf

			(cAlias)->(DbCloseArea())
		Else
			lRet := .T.
		EndIf
	EndIf
Return Nil

