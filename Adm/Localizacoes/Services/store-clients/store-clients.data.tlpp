#include 'tlpp-core.th'

namespace tr.store.client

/*/{Protheus.doc} storeClientsAdapter
Clase que contiene las reglas de negocio de las tiendas de los clientes
@type class
@version  1
@author luis.aboytes
@since 11/02/2020
/*/
Class storeClientsAdapter From FWAdapterBaseV2
	Data cTableNick As Character

	Public Method new()
	Public Method getStoreAdapter()
	Public Method getEmailClientAdapter()

EndClass

/*/{Protheus.doc} storeClientsAdapter::new
Constructor de la clase
@type method
@version  1
@author luis.aboytes
@since 11/02/2020
@param cResMethod, character, metodo Rest
/*/
Method new(cResMethod As Character) Class storeClientsAdapter
	_Super:new(cResMethod)
Return

/*/{Protheus.doc} AddMapFields
Agrega los campos que se usaran en la consulta y devuelve el objeto
@type function
@version  1
@author luis.aboytes
@since 11/02/2020
@param oSelf, object, objecto de la clase
/*/
Static Function AddMapFields(oSelf As Object, cMetodo As Character)
	cFieldNick := 'A1'

	If cMetodo == "getStoreAdapter"
		oSelf:AddMapFields("code",cFieldNick+'_COD',.T.,.T.,{cFieldNick + '_COD', 'C',GetSx3Cache("A1_COD","X3_TAMANHO"),0})
		oSelf:AddMapFields("name",cFieldNick+'_NOME',.T.,.T.,{cFieldNick + '_NOME', 'C',GetSx3Cache("A1_NOME","X3_TAMANHO"),0})
		oSelf:AddMapFields("store",cFieldNick+'_LOJA',.T.,.T.,{cFieldNick + '_LOJA', 'C',GetSx3Cache("A1_LOJA","X3_TAMANHO"),0})
	EndIf

Return Nil

/*/{Protheus.doc} getQuery
Agregamos los campos que seran utilizados en el query y el retorno del objeto
@type function
@version  1
@author luis.aboytes
@since 11/02/2021
@param cTableNick, character, nombre de la tabla a consultar
@return character, cQuery de la consulta
/*/
Static Function getQuery(cTableNick As Character) As Character
	Local cQuery As Character
	cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " + RetSqlName(cTableNick)
	cQuery += " WHERE #QueryWhere#"
Return cQuery

/*/{Protheus.doc} storeClientsAdapter::getStoreAdapter
Prepara y retorna todas las tiendas
@type method
@version  1
@author luis.aboytes
@since 11/02/2021
@param cTable, character, nombre de la tabla a consultar
@param cClient, character, codigo de cliente
/*/

Method getStoreAdapter(cTable As Character, cClient As Character, cFil As Character) Class storeClientsAdapter
	Local cQueryFields As Character
	Local cQueryWhere As Character
	Local cQuery As  Character
	Local cAlias As  Character
	Local oValues := JsonObject():new()
	Local aSA1item 	:= {}
	Local nPos		:= 0

	Default cTable 			:= ""
	Default cClient 		:= ""
	Default cFil 			:= ""

	If !Empty(cClient)
		cAlias := GetNextAlias()

		cQueryFields := "A1_COD,A1_NOME,A1_LOJA"
		cQueryWhere  := ""
		//Configuramos el query de Where y los campos a retornar la consulta
		If !Empty(cClient)
			cQueryWhere += " A1_COD ='"+cClient+"' AND"
		EndIf
		If !Empty(cFil)
			cQueryWhere += " A1_FILIAL = '" + xFilial("SA1",cFil) + "' AND"
		EndIf
		cQueryWhere += " D_E_L_E_T_ = ' ' AND A1_MSBLQL <> '1'  "

		cQuery := "SELECT "+ cQueryFields +" FROM "+ RetSqlName("SA1") +" WHERE "+ cQueryWhere

		cQuery := ChangeQuery(cQuery)
		MPSysOpenQuery(cQuery, cAlias)

		WHILE (cAlias)->(!EOF())
			aAdd(aSA1item,JsonObject():new())
			nPos := Len(aSA1item)
			aSA1item[nPos]['code'] := Alltrim((cAlias)->A1_COD	)
			aSA1item[nPos]['name'] := Alltrim((cAlias)->A1_NOME		)
			aSA1item[nPos]['store'] := Alltrim((cAlias)->A1_LOJA	)

			(cAlias)->(DbSkip())
		EndDo
		(cAlias)->(DbCloseArea())
	EndIf
	If Len(aSA1item) == 0
		aAdd(aSA1item,JsonObject():new())
		nPos := Len(aSA1item)
		aSA1item[nPos]['code'] := ""
		aSA1item[nPos]['name'] := ""
		aSA1item[nPos]['store'] := ""
	EndIf

	oValues['items'] := aSA1item


Return oValues


/*/{Protheus.doc} storeClientsAdapter::getEmailClientAdapter
Prepara y retorna el email del cliente
@type method
@version  1
@author luis.aboytes
@since 19/3/2021
@param cCliente, character, codigo de cliente
@param cTienda, character, codigo de tienda
@param cTable, character, tabla a consultar
@return JsonObject, oEmail['E1_EMAIL']
/*/
Method getEmailClientAdapter(cTable,cCliente, cTienda )  Class storeClientsAdapter
	Local cQueryWhere As Character
	Local cQueryFields As Character
	Local cQuery As Character
	Local oEmail := JsonObject():New()

	Default cCliente 	:= ""
	Default cTienda		:= ""

	cAlias := GetNextAlias()
	cQueryWhere = ""

	//Configuramos el query de Where y los campos a retornar la consulta
	If !Empty(cCliente) .and. !Empty(cTienda)
		cQueryWhere += " A1_COD ='"+cCliente+"' AND  A1_LOJA ='"+cTienda+"' AND "
	EndIf
	cQueryWhere += " D_E_L_E_T_ = ' ' "

	cQueryFields := "A1_EMAIL"

	cQuery := " SELECT "+cQueryFields+" FROM "+RetSqlName(cTable)+" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	oEmail['email'] := AllTrim((cAlias)->A1_EMAIL)
	oEmail['client'] := cCliente

	(cAlias)->(DbCloseArea())

Return oEmail
