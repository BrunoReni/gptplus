#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'receiptcontroller.ch'

namespace tr.receipt
using namespace tr.util

/*/{Protheus.doc} receiptVisible
EndPoint para obtener true o false dependiendo el valor en el parametro
@type function
@version  1
@author luis.aboytes
@since 14/02/2021
@input Json, {
   				 "success": true,
    			 "value": true
			 }
/*/
@GET('/api/v1/totvsRecibos/receipt/visible')
Function receiptVisible()
	Local oResponse 
	Local lValor 	
	Local jTemp 	
	Local lTemp		
	Local cReceipt	

	oResponse 	:= JsonObject():New()
	jTemp		:= JsonObject():New()

	//Se obtiene True o False del parametro serie de recibo
	lValor := getValueParam("MV_SERREC")
	cReceipt := ""

	If lValor
		lTemp := .T.
	Else 
		lTemp := .F.    
		If !Empty(GetSx3Cache("EL_RECIBO","X3_RELACAO"))
			cReceipt := Alltrim(InitPad(GetSX3Cache("EL_RECIBO","X3_RELACAO")))
			RollBackSX8()
		EndIf
	EndIf 

	jTemp["success"] := .T.
	jTemp["isEnable"] := lTemp
	jTemp["receipt"] := cReceipt

	oResponse["result"] := .T.
	oResponse["response"] := JTemp
	AnswerRest(oResponse)
Return

/*/{Protheus.doc} receiptNumber
EndPoint para validar si el numero de recibo es valido y no esta repetido
obteniento del url el numero de recivo
@type function
@version  1
@author luis.aboytes
@since 14/02/2021
/*/
@Get('/api/v1/totvsRecibos/receipt/:receiptnumber')
Function receiptNumber()
	Local oResponse 		As Object
	Local oReceiptService 	As Object

	oReceiptService := receiptService():getInstance()
	oResponse := oReceiptService:receiptNumberService(oRest:getPathParamsRequest())
	AnswerRest(oResponse)
Return

/*/{Protheus.doc} receiptNumberSerie
EndPoint para validar si el numero de recibo y la serie es valido y no esta repetido
obteniento del url el numero de recivo y serie
@type function
@version  1
@author luis.aboytes
@since 14/02/2021
/*/
@Get('/api/v1/totvsRecibos/receipt/:serie/:receiptnumber')
Function receiptNumberSerie()
	Local oResponse 		As Object
	Local oReceiptService 	As Object

	oReceiptService := receiptService():getInstance()
	oResponse := oReceiptService:receiptNumberSerieService(oRest:getPathParamsRequest())
	AnswerRest(oResponse)
Return

/*/{Protheus.doc} lastNumberSerie
EndPoint para obtener el ultimo numero de recibo  segun la serie
registrado en la SX5  tabla RN
@type function
@version  1
@author luis.aboytes
@since 16/02/2021
/*/
@Get('/api/v1/totvsRecibos/receipt/last/:serie')
Function lastNumberSerie()
	Local oResponse 		As Object
	Local oReceiptService 	As Object

	oReceiptService := receiptService():getInstance()
	oResponse := oReceiptService:lastNumberSerieService(oRest:getPathParamsRequest())
	AnswerRest(oResponse)
Return

/*/{Protheus.doc} receipts
Endpoint para obtener los recibos que pertenecen de acuerdo a los filtros mandados en json
@type function
@version  1
@author luis.aboytes
@since 31/3/2021
@input json, {
			  "origBranch":"",
			  "serie": "",
			  "initialReceipt": "",
			  "finalReceipt": "",
			  "code": "",
			  "store": "",
			  "ofDate": "",
			  "toDate": "",
			  "status": ""
			}
@input json, {
			  "origBranch":"",
			  "serie": "",
			  "initialReceipt": "",
			  "finalReceipt": "",
  			  "code": [
    					{
      					 "codeClient": ""
    					},
    					{
      					 "codeClient": ""
    					}
  					  ],receiptsService
			  "store": "",
			  "ofDate": "",
			  "toDate": "",
			  "status": ""
			}
/*/
@POST('/api/v1/totvsRecibos/receipt/receipts')
Function receipts()
	Local oReceiptService 	As Object
	Local jBody 			As Character
	Local jResponse 		As Character
	Local oResponse 		As Object
	Local aArray 			As Array

	jBody 			:= JsonObject():New()
	cBodyContent 	:= jBody:fromJson(oRest:GetBodyRequest())
	aArray 			:= {}
	jResponse 		:= JsonObject():New()

	//Validamos si recibio un Json
	If ( cBodyContent <> nil )
		oRest:setStatusCode ( 400 )
		oRest:setResponse( STR0001 + cBodyContent )//STR0001 "Objeto Json invalido."
	Else
		//Obtenemos los recibos
		oReceiptService := receiptService():getInstance()
		oResponse := oReceiptService:receiptsService(jBody, oRest:getQueryRequest())//Obtenemos un Objeto con los recibos en un JSON identificados por medio de un ID

		//Obtenemos los campos Status, Total Bruto, Retenciones, RC anticipados, Total neto por ID y status del recibo envicnado como parametro la respuesta anterior que trae la informacion de todos los recibos (oResponse['response'])
		jResponse:fromJson(oResponse["response"])
		jBody:fromJson(oRest:GetBodyRequest())
		oResponse := oReceiptService:receiptsDataService(jResponse,jBody)
		AnswerRest(oResponse)
	EndIf
Return

/*/{Protheus.doc} receiptStatus
Endpoint para ontemer los status de los recibos
@type function
@version  1
@author luis.aboytes
@since 7/4/2021
/*/
@GET('/api/v1/totvsRecibos/receipt/status')
Function receiptStatus()
	Local oResponse 		As Object
	Local oReceiptService 	As Object

	oReceiptService := receiptService():getInstance()
	oResponse := oReceiptService:receiptStatusService()
	AnswerRest(oResponse)
Return

/*/{Protheus.doc} receiptCheckTimb
Endpoint que verificara si un recibo esta timbrado y en su caso tambien verificara la existencia del XML
@type function
@version  1
@author luis.aboytes
@since 4/6/2021
/*/
@POST('/api/v1/totvsRecibos/receipt/validTimbrado')
Function timbradoReceipt()
	Local jBody 		
	Local jResponse 	

	jBody 			:= JsonObject():New()
	cBodyContent 	:= jBody:fromJson(oRest:GetBodyRequest())

	//Validamos si recibio un Json
	If ( cBodyContent <> nil )
		oRest:setStatusCode ( 400 )
		oRest:setResponse( STR0001 + cBodyContent )//STR0001 "Objeto Json invalido."
	Else
		oReceiptService := receiptService():getInstance()
		jResponse := oReceiptService:timbradoPdfService(jBody)
		AnswerRest(jResponse)
	EndIf
Return


/*/{Protheus.doc} getCompenFactoraje
Endpoint que retornara los documentos cuando el parametro de factoraje este en si y haya documentos a compensar
@type function
@version  1
@author luis.aboytes
@since 4/4/2022
/*/
@POST('/api/v1/totvsRecibos/receipt/getCompenFactoraje')
Function getCompenFactoraje()
	Local jBody 		
	Local jResponse 	

	jBody 			:= JsonObject():New()
	cBodyContent 	:= jBody:fromJson(oRest:GetBodyRequest())

	//Validamos si recibio un Json
	If ( cBodyContent <> nil )
		oRest:setStatusCode ( 400 )
		oRest:setResponse( STR0001 + cBodyContent )//STR0001 "Objeto Json invalido."
	Else
		oReceiptService := receiptService():getInstance()
		jResponse := oReceiptService:getCompenFactService(jBody)
		AnswerRest(jResponse)
	EndIf
Return

/*/{Protheus.doc} compensaValid
Funcion para realizar las validaciones en las compensaciones
@type function
@version  1
@author luis.aboytes
@since 4/4/2022
/*/
@POST('/api/v1/totvsRecibos/receipt/compensaValid')
Function compensaValid()
	Local jBody 		
	Local jResponse 	

	jBody 			:= JsonObject():New()
	cBodyContent 	:= jBody:fromJson(oRest:GetBodyRequest())

	//Validamos si recibio un Json
	If ( cBodyContent <> nil )
		oRest:setStatusCode ( 400 )
		oRest:setResponse( STR0001 + cBodyContent )//STR0001 "Objeto Json invalido."
	Else
		oReceiptService := receiptService():getInstance()
		jResponse := oReceiptService:compensaValidService(jBody)
		AnswerRest(jResponse)
	EndIf
Return

/*/{Protheus.doc} reciptForm
EndPoint para obtener los campos de la tabla FJT Usados
@type function
@author Raúl Ortiz
@since 05/12/2022
/*/
@GET('/api/v1/totvsRecibos/receipt/receiptForm')
Function receiptForm()
Local oResponse 		As Object
Local oReceiptService 	As Object

	oReceiptService := receiptService():getInstance()
	oResponse := oReceiptService:getreceiptForm()
	AnswerRest(oResponse)
Return

/*/{Protheus.doc} receiptController
Funcion utilizada para el controller del receiptform
@type class
@author Raúl Ortiz
@since 26/12/2022
/*/
class receiptController

	@Get('/api/v1/totvsRecibos/receipt/getReceiptForm')
	public method getReceiptFormController()

	@Get('/api/v1/totvsRecibos/receipt/getRollBackreceipt')
	public method getRollBackreceipt()

endclass

/*/{Protheus.doc} getReceiptFormController
Metodo utilizado para inicializar realizar el llamado al service el receiptform y regresar por medio de la funcion jstoadvpl
@type Method
@author Raúl Ortiz
@since 26/12/2022
/*/
Method getReceiptFormController(jResponse) Class receiptController
Local oReceiptService 	As Object

	oReceiptService := receiptService():getInstance()
	jResponse := oReceiptService:getreceiptForm()

Return Nil

/*/{Protheus.doc} getRollBackreceipt
Metodo utilizado para inicializar realizar el llamado al service el RollBackreceipt y regresar por medio de la funcion jstoadvpl
@type Method
@author Raúl Ortiz
@since 26/12/2022
/*/
Method getRollBackreceipt(cContent, jResponse) Class receiptController
Local oReceiptService 	As Object

	oReceiptService := receiptService():getInstance()
	jResponse := oReceiptService:receiptRollBack()

Return Nil

