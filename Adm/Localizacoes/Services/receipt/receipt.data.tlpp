#include 'tlpp-core.th'
#include 'receiptdata.ch'

namespace tr.receipt

/*/{Protheus.doc} receiptAdapter
Clase que obtiene las consultas a la base de datos
@type class
@version  1
@author luis.aboytes 
@since 14/02/2021
/*/
Class receiptAdapter From FWAdapterBaseV2
	Data cTableNick As Character

	Public Method new()
	Public Method valRecNumber()
	Public Method lastRN()
	Public Method receiptsAdapter()
	Public Method getTotalReceiptsAdapter()
	Public Method getCuentasPorCobrar()
	Public Method getLeyendaFJT()
	Public Method isTimbDB()
	Public Method getCompenData()
EndClass

/*/{Protheus.doc} receiptAdapter::new
Constructor de la clase
@type method
@version  1
@author luis.aboytes
@since 14/02/2020
@param cResMethod, character, nombre del metodo rest
/*/
Method new(cResMethod As Character) Class receiptAdapter
	_Super:new(cResMethod)
Return

/*/{Protheus.doc} getQuery
Agregamos los campos que seran utilizados en el query y el retorno del objeto
@type function
@version  1
@author luis.aboytes
@since 06/04/2021
@param cTableNick, character, nombre de la tabla
@output cQuery, query 
/*/
Static Function getQuery(cTableNick As Character, lGroup As logical, cOrigBranch As character)
	Local cQuery As Character
	Local cbd	 As Character
	Local cConc  As Character

	Default lGroup := .F.
	Default cOrigBranch := ""

	cbd		:= Upper(TCGetDB())
	cConc	:= Iif(cbd  $ ("ORACLE|POSTGRES"), "||", "+" )

	cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " + RetSqlName(cTableNick) +" SEL "
	If !lGroup
		//Nombre de cliente
		cQuery += "LEFT JOIN " + RetSqlName("SA1") + " SA1 "
		cQuery += "ON A1_FILIAL = '" + xFilial("SA1",cOrigBranch) + "' AND SA1.A1_COD = SEL.EL_CLIORIG AND SA1.A1_LOJA =SEL.EL_LOJA AND SA1.D_E_L_E_T_= ' ' "
		//Encabezado ARG
		If cPaisLoc == "ARG"
			cQuery += "LEFT JOIN " + RetSqlName("FJT") + " FJT "
			cQuery += "ON FJT_FILIAL = '" + xFilial("FJT",cOrigBranch) + "' AND FJT.FJT_RECIBO = SEL.EL_RECIBO AND FJT.FJT_SERIE = SEL.EL_SERIE "
			cQuery += "AND FJT.FJT_CLIENT = SEL.EL_CLIENTE AND FJT.FJT_LOJA = SEL.EL_LOJA AND FJT.FJT_VERSAO = SEL.EL_VERSAO AND FJT.D_E_L_E_T_= ' ' "
		EndIf
		//Titulos de las formas de pago
		cQuery += "LEFT JOIN " + RetSqlName("SE1") + " SE1 "
		cQuery += "ON SE1.E1_FILIAL = '" + xFilial("SE1",cOrigBranch) + "' AND SE1.E1_NUM = SEL.EL_NUMERO AND SE1.E1_PREFIXO = SEL.EL_PREFIXO AND "
		cQuery += "SE1.E1_PARCELA = SEL.EL_PARCELA AND SE1.E1_CLIENTE = SEL.EL_CLIENTE AND SE1.E1_LOJA = SEL.EL_LOJA "
		cQuery += "AND SEL.EL_TIPODOC NOT IN ('TB', 'RI', 'RG', 'RB', 'RS', 'RR') AND SE1.D_E_L_E_T_= ' ' "
		//Verifica la diferencia de cambio
		If cPaisLoc $ "ARG|URU"
			cQuery += "LEFT JOIN " + RetSqlName("SFR") + " SFR "
			cQuery += "ON SFR.FR_FILIAL = '" + xFilial("SFR",cOrigBranch) + "' AND SFR.FR_CHAVOR = EL_CLIENTE"+cConc+"EL_LOJA"+cConc+"EL_PREFIXO"+cConc+"EL_NUMERO"+cConc+"EL_PARCELA"+cConc+"EL_TIPO "
			cQuery += "AND SFR.FR_CARTEI = '1' AND SFR.FR_RECIBO = SEL.EL_RECIBO AND SEL.EL_TIPODOC = 'TB' AND SFR.D_E_L_E_T_ = ' ' "
		EndIf
		//Hitorico de cheques
		If cPaisLoc == "ARG"
			cQuery += "LEFT JOIN " + RetSqlName("SEF") + " SEF "
			cQuery += "ON SEF.EF_FILIAL = '" + xFilial("SEF",cOrigBranch) + "' AND SEF.EF_CART = 'R' AND SEF.EF_BANCO = SEL.EL_BCOCHQ AND SEF.EF_AGENCIA = SEL.EL_AGECHQ AND SEF.EF_CONTA = SEL.EL_CTACHQ "
			cQuery += "AND SEF.EF_NUM = SEL.EL_NUMERO AND SEF.EF_PREFIXO = SEL.EL_PREFIXO AND SEL.EL_TIPODOC = 'CH' AND SEF.D_E_L_E_T_ = ' ' "
		EndIf
		//Conciliación bancaria.
		cQuery += "LEFT JOIN " + RetSqlName("SE5") + " SE5 "
		cQuery += "ON SE5.E5_FILIAL = '" + xFilial("SE5",cOrigBranch) + "' AND SE5.E5_PREFIXO = SEL.EL_PREFIXO AND SE5.E5_NUMERO = SEL.EL_NUMERO "
		cQuery += "AND SE5.E5_PARCELA = SEL.EL_PARCELA AND SE5.E5_TIPO  = SEL.EL_TIPO AND SE5.E5_CLIFOR = SEL.EL_CLIENTE " 
		cQuery += "AND SE5.E5_LOJA = SEL.EL_LOJA AND SE5.E5_RECONC = 'x' AND SE5.D_E_L_E_T_= ' ' "
	EndIf
	cQuery += " WHERE #QueryWhere#"
	If lGroup
		If cPaisLoc == "ARG"
			cQuery += " Group by EL_FILIAL, EL_RECIBO, EL_SERIE, EL_CLIENTE, EL_LOJA, EL_VERSAO"
		Else
			cQuery += " Group by EL_FILIAL, EL_RECIBO, EL_SERIE, EL_CLIENTE, EL_LOJA"
		EndIf
	EndIf 
Return cQuery

/*/{Protheus.doc} AddMapFields
Agrega los campos que se usaran en la consulta y devuelve el objeto
@type function
@version  1
@author luis.aboytes
@since 7/4/2021
@param oSelf, object, oSelf
/*/
Static Function AddMapFields(oSelf As Object, lGroup As logical)
	Local cFieldNick := "EL"
	Local cbd			:= Upper(TCGetDB())
	Default lGroup := .F.
	If  cbd  == "MSSQL"
		If cPaisLoc == "ARG"
			oSelf:AddMapFields("id",'IDKEY',.T.,.T.,{'IDKEY','C',0,0},'EL_FILIAL+EL_SERIE+EL_RECIBO+EL_CLIENTE+EL_VERSAO')
		Else
			oSelf:AddMapFields("id",'IDKEY',.T.,.T.,{'IDKEY','C',0,0},'EL_FILIAL+EL_SERIE+EL_RECIBO+EL_CLIENTE')
		END
	ElseIf cbd  $ ("ORACLE|POSTGRES") 
		If cPaisLoc == "ARG"
			oSelf:AddMapFields("id",'IDKEY',.T.,.T.,{'IDKEY','C',0,0},'EL_FILIAL||EL_SERIE||EL_RECIBO||EL_CLIENTE||EL_VERSAO')
		Else
			oSelf:AddMapFields("id",'IDKEY',.T.,.T.,{'IDKEY','C',0,0},'EL_FILIAL||EL_SERIE||EL_RECIBO||EL_CLIENTE')
		END
	EndIf
	//oSelf:AddMapFields("id",'IDKEY',.T.,.T.,{'IDKEY','C',0,0},'EL_FILIAL+EL_SERIE+EL_RECIBO+EL_CLIORIG')
	If lGroup
		oSelf:AddMapFields("branch",cFieldNick+'_FILIAL',.T.,.T.,{cFieldNick + '_FILIAL', 'C',GetSx3Cache("EL_FILIAL","X3_TAMANHO"),0})
		oSelf:AddMapFields("serie",cFieldNick+'_SERIE',.T.,.T.,{cFieldNick + '_SERIE', 'C',GetSx3Cache("EL_SERIE","X3_TAMANHO"),0})
		oSelf:AddMapFields("receipt",cFieldNick+'_RECIBO',.T.,.T.,{cFieldNick + '_RECIBO', 'C',GetSx3Cache("EL_RECIBO","X3_TAMANHO"),0})
		oSelf:AddMapFields("client",cFieldNick+'_CLIENTE',.T.,.T.,{cFieldNick + '_CLIENTE', 'C',GetSx3Cache("EL_CLIENTE","X3_TAMANHO"),0})
		oSelf:AddMapFields("store",cFieldNick+'_LOJA',.T.,.T.,{cFieldNick + '_LOJA', 'C',GetSx3Cache("EL_LOJA","X3_TAMANHO"),0})
		IF cPaisLoc == "ARG"
			oSelf:AddMapFields("version",cFieldNick+'_VERSAO',.T.,.T.,{cFieldNick + '_VERSAO', 'C',GetSx3Cache("EL_VERSAO","X3_TAMANHO"),0})
		ENDIF
	Else
		oSelf:AddMapFields("storeCode",cFieldNick+'_LOJORIG',.T.,.T.,{cFieldNick + '_LOJORIG', 'C',GetSx3Cache("EL_LOJORIG","X3_TAMANHO"),0})
		oSelf:AddMapFields("branch",cFieldNick+'_FILIAL',.T.,.T.,{cFieldNick + '_FILIAL', 'C',GetSx3Cache("EL_FILIAL","X3_TAMANHO"),0})
		oSelf:AddMapFields("value",cFieldNick+'_VALOR',.T.,.T.,{cFieldNick + '_VALOR', 'N',GetSx3Cache("EL_VALOR","X3_TAMANHO"),0})
		oSelf:AddMapFields("serie",cFieldNick+'_SERIE',.T.,.T.,{cFieldNick + '_SERIE', 'C',GetSx3Cache("EL_SERIE","X3_TAMANHO"),0})
		oSelf:AddMapFields("numberreceipt",cFieldNick+'_NUMERO',.T.,.T.,{cFieldNick + '_NUMERO', 'C',GetSx3Cache("EL_NUMERO","X3_TAMANHO"),0})
		oSelf:AddMapFields("receipt",cFieldNick+'_RECIBO',.T.,.T.,{cFieldNick + '_RECIBO', 'C',GetSx3Cache("EL_RECIBO","X3_TAMANHO"),0})
		oSelf:AddMapFields("client",cFieldNick+'_CLIENTE',.T.,.T.,{cFieldNick + '_CLIENTE', 'C',GetSx3Cache("EL_CLIENTE","X3_TAMANHO"),0})
		oSelf:AddMapFields("clientorigin",cFieldNick+'_CLIORIG',.T.,.T.,{cFieldNick + '_CLIORIG', 'C',GetSx3Cache("EL_CLIORIG","X3_TAMANHO"),0})
		oSelf:AddMapFields("store",cFieldNick+'_LOJA',.T.,.T.,{cFieldNick + '_LOJA', 'C',GetSx3Cache("EL_LOJA","X3_TAMANHO"),0})
		oSelf:AddMapFields("typingdate",cFieldNick+'_DTDIGIT',.T.,.T.,{cFieldNick + '_DTDIGIT', 'C',GetSx3Cache("EL_DTDIGIT","X3_TAMANHO"),0})
		oSelf:AddMapFields("installment",cFieldNick+'_PARCELA',.T.,.T.,{cFieldNick + '_PARCELA', 'C',GetSx3Cache("EL_PARCELA","X3_TAMANHO"),0})
		oSelf:AddMapFields("cancelled",cFieldNick+'_CANCEL',.T.,.T.,{cFieldNick + '_CANCEL', 'L',GetSx3Cache("EL_CANCEL","X3_TAMANHO"),0})
		oSelf:AddMapFields("collector",cFieldNick+'_COBRAD',.T.,.T.,{cFieldNick + '_COBRAD', 'C',GetSx3Cache("EL_COBRAD","X3_TAMANHO"),0})
		oSelf:AddMapFields("class",cFieldNick+'_NATUREZ',.T.,.T.,{cFieldNick + '_NATUREZ', 'C',GetSx3Cache("EL_NATUREZ","X3_TAMANHO"),0})
		oSelf:AddMapFields("valuetype",cFieldNick+'_TIPODOC',.T.,.T.,{cFieldNick + '_TIPODOC', 'C',GetSx3Cache("EL_TIPODOC","X3_TAMANHO"),0})
		oSelf:AddMapFields("typebill",cFieldNick+'_TIPO',.T.,.T.,{cFieldNick + '_TIPO', 'C',GetSx3Cache("EL_TIPO","X3_TAMANHO"),0})
		oSelf:AddMapFields("valcurr1",cFieldNick+'_VLMOED1',.T.,.T.,{cFieldNick + '_VLMOED1', 'N',GetSx3Cache("EL_VLMOED1","X3_TAMANHO"),0})
		oSelf:AddMapFields("currency",cFieldNick+'_MOEDA',.T.,.T.,{cFieldNick + '_MOEDA', 'C',GetSx3Cache("EL_MOEDA","X3_TAMANHO"),0})
		oSelf:AddMapFields("prefix",cFieldNick+'_PREFIXO',.T.,.T.,{cFieldNick + '_PREFIXO', 'C',GetSx3Cache("EL_PREFIXO","X3_TAMANHO"),0})
		oSelf:AddMapFields("bank",cFieldNick+'_BANCO',.T.,.T.,{cFieldNick + '_BANCO', 'C',GetSx3Cache("EL_BANCO","X3_TAMANHO"),0})
		oSelf:AddMapFields("agency",cFieldNick+'_AGENCIA',.T.,.T.,{cFieldNick + '_AGENCIA', 'C',GetSx3Cache("EL_AGENCIA","X3_TAMANHO"),0})
		oSelf:AddMapFields("bankaccount",cFieldNick+'_CONTA',.T.,.T.,{cFieldNick + '_CONTA', 'C',GetSx3Cache("EL_CONTA","X3_TAMANHO"),0})
		oSelf:AddMapFields("date",cFieldNick+'_EMISSAO',.T.,.T.,{cFieldNick + '_EMISSAO', 'C',GetSx3Cache("EL_EMISSAO","X3_TAMANHO"),0})
		oSelf:AddMapFields("chkbank",cFieldNick+'_BCOCHQ',.T.,.T.,{cFieldNick + '_BCOCHQ', 'C',GetSx3Cache("EL_BCOCHQ","X3_TAMANHO"),0})
		oSelf:AddMapFields("chqbranch",cFieldNick+'_AGECHQ',.T.,.T.,{cFieldNick + '_AGECHQ', 'C',GetSx3Cache("EL_AGECHQ","X3_TAMANHO"),0})
		oSelf:AddMapFields("chkaccount",cFieldNick+'_CTACHQ',.T.,.T.,{cFieldNick + '_CTACHQ', 'C',GetSx3Cache("EL_CTACHQ","X3_TAMANHO"),0})
		If SEL->(ColumnPos("EL_RETGAN")) > 0
			oSelf:AddMapFields("retgan",cFieldNick+'_RETGAN',.T.,.T.,{cFieldNick + '_RETGAN', 'C',GetSx3Cache("EL_RETGAN","X3_TAMANHO"),0})
		EndIf 
		If SEL->(ColumnPos("EL_SERSUS")) > 0
			oSelf:AddMapFields("sersus",cFieldNick+'_SERSUS',.T.,.T.,{cFieldNick + '_SERSUS', 'C',GetSx3Cache("EL_SERSUS","X3_TAMANHO"),0})
		EndIf
		If SEL->(ColumnPos("EL_RECSUS")) > 0
			oSelf:AddMapFields("recsus",cFieldNick+'_RECSUS',.T.,.T.,{cFieldNick + '_RECSUS', 'C',GetSx3Cache("EL_RECSUS","X3_TAMANHO"),0})
		EndIf
		//Se realiza la separacion de estos campos ya que son exclusivos del timbrado de México
		If cPaisLoc == "MEX"
			oSelf:AddMapFields("stampdate",cFieldNick+'_FECTIMB',.T.,.T.,{cFieldNick + '_FECTIMB', 'C',GetSx3Cache("EL_FECTIMB","X3_TAMANHO"),0})
			if	SEL->(ColumnPos("EL_HORA")) > 0
				oSelf:AddMapFields("time",cFieldNick+'_HORA',.T.,.T.,{cFieldNick + '_HORA', 'C',GetSx3Cache("EL_HORA","X3_TAMANHO"),0})
			EndIf
			oSelf:AddMapFields("taxsheet",cFieldNick+'_UUID',.T.,.T.,{cFieldNick + '_UUID', 'C',GetSx3Cache("EL_UUID","X3_TAMANHO"),0})
			oSelf:AddMapFields("generatecfd",cFieldNick+'_GENCFD',.T.,.T.,{cFieldNick + '_GENCFD', 'C',GetSx3Cache("EL_GENCFD","X3_TAMANHO"),0})
		EndIf
		IF cPaisLoc == "ARG"
			oSelf:AddMapFields("version",cFieldNick+'_VERSAO',.T.,.T.,{cFieldNick + '_VERSAO', 'C',GetSx3Cache("EL_VERSAO","X3_TAMANHO"),0})
			oSelf:AddMapFields("cancel",'FJT_CANCEL',.T.,.T.,{'FJT_CANCEL', 'C',GetSx3Cache("FJT_CANCEL","X3_TAMANHO"),0})
			oSelf:AddMapFields("versionatu",'FJT_VERATU',.T.,.T.,{'FJT_VERATU', 'C',GetSx3Cache("FJT_VERATU","X3_TAMANHO"),0})
		ENDIF
		//Campos SA1
		oSelf:AddMapFields("clientname",'A1_NREDUZ',.T.,.T.,{'A1_NREDUZ', 'C',GetSx3Cache("A1_NREDUZ","X3_TAMANHO"),0})
		//Campos SE1
		oSelf:AddMapFields("situationtit",'E1_SITUACA',.T.,.T.,{'E1_SITUACA', 'C',GetSx3Cache("E1_SITUACA","X3_TAMANHO"),0})
		oSelf:AddMapFields("balancetit",'E1_SALDO',.T.,.T.,{'E1_SALDO', 'N',GetSx3Cache("E1_SALDO","X3_TAMANHO"),0})
		oSelf:AddMapFields("valuetit",'E1_VALOR',.T.,.T.,{'E1_VALOR', 'N',GetSx3Cache("E1_VALOR","X3_TAMANHO"),0})
		oSelf:AddMapFields("statustit",'E1_STATUS',.T.,.T.,{'E1_STATUS', 'C',GetSx3Cache("E1_STATUS","X3_TAMANHO"),0})
		If cPaisLoc $ "ARG|URU"
			//Diferencia de cambio
			oSelf:AddMapFields("origkey",'FR_CHAVDE',.T.,.T.,{'FR_CHAVDE', 'C',GetSx3Cache("FR_CHAVDE","X3_TAMANHO"),0})
		EndIf
		If cPaisLoc == "ARG"
			//Historico de cheques
			oSelf:AddMapFields("statuschq",'EF_STATUS',.T.,.T.,{'EF_STATUS', 'C',GetSx3Cache("EF_STATUS","X3_TAMANHO"),0})
			oSelf:AddMapFields("bankchq",'EF_BANCO',.T.,.T.,{'EF_BANCO', 'C',GetSx3Cache("EF_BANCO","X3_TAMANHO"),0})
			oSelf:AddMapFields("agencychq",'EF_AGENCIA',.T.,.T.,{'EF_AGENCIA', 'C',GetSx3Cache("EF_AGENCIA","X3_TAMANHO"),0})
			oSelf:AddMapFields("accountchq",'EF_CONTA',.T.,.T.,{'EF_CONTA', 'C',GetSx3Cache("EF_CONTA","X3_TAMANHO"),0})
			oSelf:AddMapFields("prefixchq",'EF_PREFIXO',.T.,.T.,{'EF_PREFIXO', 'C',GetSx3Cache("EF_PREFIXO","X3_TAMANHO"),0})
			oSelf:AddMapFields("numberchq",'EF_NUM',.T.,.T.,{'EF_NUM', 'C',GetSx3Cache("EF_NUM","X3_TAMANHO"),0})
		EndIf
		//Concilicación
		oSelf:AddMapFields("reconctit",'E5_RECONC',.T.,.T.,{'E5_RECONC', 'C',GetSx3Cache("E5_RECONC","X3_TAMANHO"),0})
		oSelf:AddMapFields("recpagtit",'E5_RECPAG',.T.,.T.,{'E5_RECPAG', 'C',GetSx3Cache("E5_RECPAG","X3_TAMANHO"),0})
		oSelf:AddMapFields("typetit",'E5_TIPO',.T.,.T.,{'E5_TIPO', 'C',GetSx3Cache("E5_TIPO","X3_TAMANHO"),0})
		oSelf:AddMapFields("banktit",'E5_BANCO',.T.,.T.,{'E5_BANCO', 'C',GetSx3Cache("E5_BANCO","X3_TAMANHO"),0})
		oSelf:AddMapFields("agencytit",'E5_AGENCIA',.T.,.T.,{'E5_AGENCIA', 'C',GetSx3Cache("E5_AGENCIA","X3_TAMANHO"),0})
		oSelf:AddMapFields("bankaccounttit",'E5_CONTA',.T.,.T.,{'E5_CONTA', 'C',GetSx3Cache("E5_CONTA","X3_TAMANHO"),0})
		oSelf:AddMapFields("chkbanktit",'E5_BCOCHQ',.T.,.T.,{'E5_BCOCHQ', 'C',GetSx3Cache("E5_BCOCHQ","X3_TAMANHO"),0})
		oSelf:AddMapFields("chqbranchtit",'E5_AGECHQ',.T.,.T.,{'E5_AGECHQ', 'C',GetSx3Cache("E5_AGECHQ","X3_TAMANHO"),0})
		oSelf:AddMapFields("chkaccounttit",'E5_CTACHQ',.T.,.T.,{'E5_CTACHQ', 'C',GetSx3Cache("E5_CTACHQ","X3_TAMANHO"),0})
		If  cbd  == "MSSQL"
			oSelf:AddMapFields("recnotit", 'R_E_C_N_O_',.T.,.T.,{'R_E_C_N_O_', 'N', ,0},"SE5.")
		ElseIf cbd  $ ("ORACLE|POSTGRES") 
			oSelf:AddMapFields("recnotit", 'R_E_C_N_O_',.T.,.T.,{'R_E_C_N_O_', 'N', ,0},"SE5.R_E_C_N_O_")
		EndIf
	EndIf

Return Nil

/*/{Protheus.doc} receiptAdapter::valRecNumber( var As Character, numFatAut As Character, serie As Character)As Character
El metodo tiene la funcion de recibir un numero de recibe y verificar si este esta o no en uso
@type method
@version  1
@author luis.aboytes
@since 14/02/2021
@return Character, {
					"success": true
					"message": ""
				   }
/*/
Method valRecNumber( cVar, cNumFatAut , cSerie ) Class receiptAdapter
	Local lOk 		As Logical
	Local cMensaje 	As Character
	Local jRetorno 	
	Local cSerie 	As Character

	lOk 		:= .T.
	cMensaje 	:= STR0001 //STR0001 "Valor no localizado, se puede utilizar este numero"
	jRetorno 	:= JsonObject():New()
	cSerie 		:= PadR(cSerie,TamSX3("EL_SERIE")[1])

	jRetorno['success']	:=lOk
	jRetorno['message']	:= cMensaje

	If cVar =="cRecibo"
		If Empty(cNumFatAut)
			lOk 		:= .F.
			cMensaje 	:= STR0002 //STR0002 "No se permite un campo vacio"
			jRetorno['success']	:= lOk
			jRetorno['message']	:= cMensaje
			Return (cRetorno)
		EndIf
		DbSelectArea("SEL")
		DbSetorder(8)
		If MsSeek(xFilial("SEL")+cSerie+cNumFatAut)
			lOk 		:= .F.
			cMensaje 	:= STR0003  //STR0003 "El numero de recibo ya existe"
			jRetorno['success']	:= lOk
			jRetorno['message']	:= cMensaje
		EndIf
	EndIf

Return (jRetorno)

/*/{Protheus.doc} receiptAdapter::lastRN
El metodo tiene la funcion de obtener el ultimo numero de recibo registrado en la tabla SX5 RN
@type method
@version  1
@author luis.aboytes
@since 14/02/2021
@param cSerie, character, serie
@param cRecibo, character, recibo
@return JsonObject, [cSerie,cRecibo, cResponse]
/*/
Method lastRN(cSerie ,cRecibo) Class receiptAdapter
	Local jTemp 	
	Loca  jDetail	
	Local aValues	
	Local cMensaje 	
	Local lOk 		

	aValues		:= {}
	lOk 		:= .T.
	cMensaje 	:= STR0004 //STR0004 "Consulta correcta"
	jTemp 		:= JsonObject():New()
	jDetail		:= JsonObject():New()

	//Se asignan los valores y los campos del Json
	jTemp["success"] 	:= .T.
	jTemp["serie"]  	:= cSerie
	jTemp["receipt"] 	:= cRecibo
	jDetail["success"] 	:= lOk
	jDetail["message"]	:= cMensaje
	jTemp["details"] 	:= jDetail

	DbSelectArea("SX5")
	DbSetOrder(1)
	If DbSeek( xFilial("SX5")+"RN"+cSerie )
		AADD( aValues,{ Padr( X5_CHAVE, 3 ), StrZero( Val( X5Descri() ),GetSx3Cache("EL_RECIBO","X3_TAMANHO")) } )
		jTemp["serie"]  := aValues[1,1]
		jTemp["receipt"] := aValues[1,2]
	Else
		lOk := .F.
		cMensaje := STR0005 //STR0005 "Error en los valores de la consulta, verifique los datos"
		jDetail["success"] 	:= lOk
		jDetail["message"]	:= cMensaje
		jTemp["details"] 	:= jDetail
	EndIf

Return jTemp

/*/{Protheus.doc} receiptAdapter::receiptsAdapter
Metodo que consulta la base de datos y obtiene los recibos dependiendo los filtros mandados en el jBody
@type method
@version  1
@author luis.aboytes
@since 6/4/2021
@param jBody, Jobject, filtros mandados del front-end
@param cTableNick, character, nombre de la tabla a usar
/*/
Method receiptsAdapter(jBody, cTableNick, lGroup As logical ) Class receiptAdapter
	Local cQueryFields As Character
	Local cQueryWhere As Character
	Local aActivedArea As Array

	Default lGroup := .F.

	//Asignamos el nombre de la tabla a utilizar
	::cTableNick := cTableNick

	aActivedArea   := FwGetArea()

	//Agregamos los campos Json/ResultSet
	AddMapFields(self, lGroup)
	
	cQueryWhere := getQueryWhereReceipts(jBody, lGroup)
	If !lGroup
		cQueryFields := "ID, EL_LOJORIG, EL_CLIORIG, EL_VALOR, EL_EMISSAO,EL_VERSAO "
	Else
		cQueryFields := "ID, EL_FILIAL, EL_RECIBO, EL_SERIE, EL_CLIENTE, EL_LOJA, EL_VERSAO"
	EndIf

	IF ExistBlock("F998BRFLT") .and. !lGroup
		cQueryWhere := ExecBlock("F998BRFLT",.F.,.F.,{cQueryFields,cQueryWhere,"where"})
	ENDIF

	//Informamos el query a utilizar en la API
	::SetQuery(getQuery(cTableNick, lGroup, jBody['origBranch']))

	//Configuramos los campos para el query
	::SetWhere(cQueryWhere)
	::SetFields(cQueryFields)

	//Informamos el ordenamiento a ser utilizado en la Query
	If !lGroup
		::SetOrder("EL_SERIE, EL_RECIBO,EL_VERSAO,SEL.R_E_C_N_O_")
	Else
		::SetOrder("EL_RECIBO")
	EndIf

	//Ejecuta la consulta, retorna .T. si todo ocurre conforme a lo esperado
	If ::Execute()
		//Genera un archivo Json
		::FillGetResponse()
	EndIf

	FwrestArea(aActivedArea)

Return Nil

/*/{Protheus.doc} receiptAdapter::getTotalReceiptsAdapter(cTableNick As Character, jBody As Jobject) As Numeric
Metodo que obtiene el numero de recibos total registrados en la tabla SEL junto con sus respectivos filtros
@type method
@version  1
@author luis.aboytes
@since 13/4/2021
/*/
Method getTotalReceiptsAdapter(cTableNick, jBody ) Class receiptAdapter
	Local cQueryFields 	As Character
	Local cQueryWhere 	As Character
	Local cAlias 		As Character
	Local cQuery 		As Character
	Local cNumber 		As Numeric

	cAlias := GetNextAlias()

	cQueryWhere := getQueryWhereReceipts(jBody)
	cQueryFields := "COUNT (EL_FILIAL)"

	IF ExistBlock("F998BRFLT")
		cQuery := ExecBlock("F998BRFLT",.F.,.F.,{cQueryFields,cQueryWhere,'complete'})
	else
		cQuery := " SELECT "+cQueryFields+" AS totalreceipts FROM "+ RetSqlName(cTableNick) +" SEL WHERE "+cQueryWhere
	EndIf

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	cNumber := (cAlias)->totalreceipts

Return cNumber

/*/{Protheus.doc} receiptAdapter::getQueryWhereReceipts(jBody As Jobject) As character
Metodo que retorna el queryWhere de la consulta a la tabla SEL para obtener los recibos
@type Function
@version  1
@author luis.aboytes
@since 13/4/2021
@return character, retorna el query where dependiendo los filtros agregados
/*/
Static Function getQueryWhereReceipts(jBody, lGroup) As character
	Local cQueryWhere 	As Character
	Local nCont 		As Numeric
	Local cFinalReceipt As Character

	Default lGroup := .F.

	//Si viene nulo le asigna una z para que muestre todos los recibos
	cFinalReceipt := IIF(VAZIO(jBody['finalReceipt']), "z", jBody['finalReceipt'])

	cQueryWhere := "  SEL.D_E_L_E_T_ = ' ' AND SEL.EL_RECIBO BETWEEN '"+jBody['initialReceipt']+"' AND '"+cFinalReceipt+"' AND SEL.EL_FILIAL = '"+xFilial("SEL",jBody['origBranch'])+"' "
	If !lGroup
		cQueryWhere += "AND  SEL.EL_TIPODOC <> 'TJ' "
	EndIf

	//Compara si el Json trae mas de un codigo de cliente o es un solo cliente en el filtro
	If VALTYPE(jBody['code']) == "A"
		cQueryWhere += " AND EL_CLIENTE IN ("

		For nCont := 1 to LEN(jBody['code'])
			cQueryWhere += "'"+jBody['code'][nCont]['client']+"'"
			If nCont != LEN(jBody['code'])
				cQueryWhere += ","
			EndIf
		Next
		cQueryWhere += ")"
	Else
		//Agregamos filtros si solo viene un solo cliente
		cQueryWhere += If(jBody['code']!=""," AND EL_CLIENTE  = '"+jBody['code']+"'","")
	EndIf

	////Agregamos el filtro de serie si viene diferente de vacio
	If jBody['serie'] != ""
		cQueryWhere += " AND SEL.EL_SERIE = '"+jBody['serie']+"'"
	EndIf

	//Agregamos el filtro de tienda si viene diferente de vacio
	If jBody['store'] != ""
		cQueryWhere += " AND EL_LOJA = '"+jBody['store']+"'"
	EndIf

	cQueryWhere += If(jBody['ofDate']!=""," AND EL_DTDIGIT  >= '"+jBody['ofDate']+"'","")
	cQueryWhere += If(jBody['toDate']!=""," AND EL_DTDIGIT  <= '"+jBody['toDate']+"'","")

Return cQueryWhere

/*/{Protheus.doc} receiptAdapter::getCuentasPorCobrar( cCliente As Character, cLoja AS character, cPrefixo As Character, cNumero As Character,cParcela As Character, cTipo As Character) As JsonObject
Metodo que consulta la tabla SE1 para obtener el saldo, la situacion, el saldo y el estado de esta cuenta por cobrar
@type method
@version  1	
@author luis.aboytes
@since 30/5/2021
@return JsonObject, {	
	"E1_SITUACA" := "",
	"E1_SALDO" := "",
	"E1_VALOR" := "",
	"E1_STATUS" := "",
}
/*/
Method getCuentasPorCobrar( cCliente , cLoja , cPrefixo , cNumero ,cParcela , cTipo )  Class receiptAdapter
	Local cQueryFields 	As Character
	Local cQueryWhere 	As Character
	Local cAlias 		As Character
	Local cQuery 		As Character
	Local oResponse		As Object

	cAlias := GetNextAlias()
	oResponse	:= JsonObject():New()

	oResponse['E1_SITUACA']	:= ""
	oResponse['E1_SALDO']	:= 0
	oResponse['E1_VALOR']	:= 0
	oResponse['E1_STATUS']	:= ""

	//Se genera el where de la consulta
	cQueryWhere := " E1_FILIAL = '"+xFilial("SE1")+"' AND E1_CLIENTE = '"+cCliente+"' AND E1_LOJA = '"+cLoja+"' AND E1_PREFIXO = '"+cPrefixo+"' AND E1_NUM = '"+cNumero+"' AND E1_PARCELA = '"+cParcela+"' AND E1_TIPO ='"+cTipo+"' "
	//Se definen los campos a obtener
	cQueryFields 	:= "E1_SITUACA,E1_SALDO,E1_VALOR,E1_STATUS"
	//Se unifica la consulta
	cQuery := " SELECT "+cQueryFields+" FROM "+ RetSqlName("SE1") + " WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		oResponse['E1_SITUACA']	:= (cAlias)->E1_SITUACA
		oResponse['E1_SALDO']	:= (cAlias)->E1_SALDO
		oResponse['E1_VALOR']	:= (cAlias)->E1_VALOR
		oResponse['E1_STATUS']	:= (cAlias)->E1_STATUS
		(cAlias)->(DbSkip())
	END

	(cAlias)->(DbCloseArea())

Return oResponse

/*/{Protheus.doc} receiptAdapter::getLeyendaFJT( cDate As Character, cClient As Character, cLoja As Character, cNumero As Character)As JsonObject
Metodo que obtiene por medio de una consulta los campos FJT_CANCEL y FJT_VERATU para la cancelacion o el estatus del recibo para paises diferentes de mexico
@type method
@version  2
@author luis.aboytes
@since 2/6/2021
@return JsonObject, {	
	"FJT_CANCEL" := "",
	"FJT_VERATU" := ""
}
/*/
Method getLeyendaFJT( cDate , cClient , cLoja , cNumero,cver,cSerie) Class receiptAdapter
	Local cQueryFields 	As Character
	Local cQueryWhere 	As Character
	Local cAlias 		As Character
	Local cQuery 		As Character
	Local oResponse		As Object

	cAlias := GetNextAlias()
	oResponse	:= JsonObject():New()

	oResponse["FJT_CANCEL"] := ""
	oResponse["FJT_VERATU"] := ""

	//Se genera el where de la consulta
	cQueryWhere := " FJT_FILIAL = '"+xFilial("FJT")+"' AND FJT_EMISSA >= '"+cDate+"' AND FJT_CLIENT = '"+cClient+"' AND FJT_LOJA = '"+cLoja+"' AND FJT_RECIBO ='"+cNumero+"'  AND FJT_VERSAO ='"+cver+"' AND FJT_SERIE ='"+cSerie+"'    "
	//Se definen los campos a obtener
	cQueryFields := "FJT_CANCEL,FJT_VERATU"
	//Se unifica la consulta
	cQuery := " SELECT "+cQueryFields+" FROM "+ RetSqlName("FJT") + " WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		oResponse["FJT_CANCEL"] := (cAlias)->FJT_CANCEL
		oResponse["FJT_VERATU"] := (cAlias)->FJT_VERATU
		(cAlias)->(DbSkip())
	END

	(cAlias)->(DbCloseArea())

Return oResponse

/*/{Protheus.doc} receiptAdapter::isTimbDB (cCliente As Character, cRecibo As Character, cLoja As Character, cSerie As Character) As Logical
Metodo que verifica dado los parametros ingresados en el query, si dicho recibo tiene un timbre registrado en la DB
@type method
@version  1
@author luis.aboytes
@since 7/6/2021
@return Logical, .T. si esta timbrado o .F. si no esta timbrado
/*/
Method isTimbDB (cCliente, cRecibo , cLoja , cSerie ) Class receiptAdapter
	Local lResponse 	As Logical
	Local cQueryFields 	As Character
	Local cQueryWhere 	As Character
	Local cAlias 		As Character
	Local cQuery 		As Character
	cAlias 		:= GetNextAlias()
	lResponse	:= .F.

	//Se genera el where de la consulta
	cQueryWhere := " EL_FILIAL = '"+xFilial("SEL")+"' AND EL_CLIORIG = '"+cCliente+"' AND EL_RECIBO = '"+cRecibo+"' AND EL_LOJORIG = '"+cLoja+"' AND EL_SERIE = '"+cSerie+"' "
	//Se definen los campos a obtener
	cQueryFields := " EL_FECTIMB, EL_UUID "
	//Se unifica la consulta
	cQuery := " SELECT "+cQueryFields+" FROM "+ RetSqlName("SEL") + " WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		//Si los campos fecha de timbrado  y el uuid estan vacios no esta timbrado
		IF !VAZIO((cAlias)->EL_FECTIMB) .AND. !VAZIO((cAlias)->EL_UUID)
			lResponse := .T.
		EndIf
		(cAlias)->(DbSkip())
	END

Return lResponse

/*/{Protheus.doc} receiptAdapter::getCompenData
Metodo encargado de buscar registros generados por compensación entre carteras (E5_ORIGEM = 'FINA450')
@type method
@version  1
@author luis.aboytes
@since 1/4/2022
@param jData, json, informaciión necesaria para la coménsación
/*/
Method getCompenData (jData, cMensaje) Class receiptAdapter
	Local aResponse 	:= {} As Array
	Local cQueryFields 	As Character
	Local cCamposExtr   As Character
	Local cQueryWhere 	As Character
	Local cAlias 		As Character
	Local cQuery 		As Character
	cAlias 		:= GetNextAlias()

	// Cliente que paga y el de la factura es el mismo, no procede
	IF jData['receiptData']['cliente'] == jData['title']['client']
		cMensaje := " Los titulos seleccionados deben de ser de un cliente diferente al del encabezado del recibo "
		Return aResponse
	ENDIF

	//Campos extras para obtener las compensaciónes
	cCamposExtr := 	" CMP.E5_FILIAL =  SE5.E5_FILIAL AND CMP.E5_TIPO = SE5.E5_TIPO AND CMP.E5_RECPAG = 'P' AND CMP.E5_TIPODOC = SE5.E5_TIPODOC AND CMP.E5_MOTBX =  SE5.E5_MOTBX AND CMP.E5_SITUACA = SE5.E5_SITUACA AND CMP.E5_ORIGEM = SE5.E5_ORIGEM AND CMP.E5_IDENTEE = SE5.E5_IDENTEE "

	//Se definen los campos a obtener
	cQueryFields := " SE5.E5_DATA, SE5.E5_MOEDA, SE5.E5_TXMOEDA, CMP.E5_VALOR, CMP.E5_VLMOED2, CMP.E5_IDENTEE, CMP.E5_BENEF, CMP.E5_PREFIXO, CMP.E5_NUMERO, CMP.E5_PARCELA, SE5.R_E_C_N_O_ "

	//Se genera el where de la consulta
	cQueryWhere := " SE5.D_E_L_E_T_=' ' AND SE5.E5_FILIAL = '"+xFilial("SE5")+"' AND SE5.E5_TIPO = '"+jData['title']['type']+"' AND SE5.E5_RECPAG = 'R' AND SE5.E5_TIPODOC = 'BA' AND SE5.E5_MOTBX = 'CEC' AND SE5.E5_SITUACA = '' AND SE5.E5_ORIGEM = 'FINA450' AND SE5.E5_CLIFOR = '"+jData['title']['client']+"' AND SE5.E5_LOJA = '"+jData['title']['unit']+"' AND SE5.E5_PREFIXO = '"+jData['title']['series']+"' AND SE5.E5_NUMERO = '"+jData['title']['billnumber']+"' AND SE5.E5_PARCELA = '"+jData['title']['installment']+"' AND SE5.E5_RECCMP = ' ' ORDER BY SE5.E5_IDENTEE "

	//Se unifica la consulta
	cQuery := " SELECT "+cQueryFields+" FROM "+ RetSqlName("SE5") + " SE5 INNER JOIN "+RetSqlName("SE5") +" CMP ON CMP.D_E_L_E_T_=' ' AND "+cCamposExtr+" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		Aadd(aResponse,JsonObject():new())
		nPos := Len(aResponse)
		aResponse[nPos]['data']			:= (cAlias)->E5_DATA
		aResponse[nPos]['coin']			:= (cAlias)->E5_MOEDA
		aResponse[nPos]['value']		:= (cAlias)->E5_VALOR
		aResponse[nPos]['compensation']	:= (cAlias)->E5_IDENTEE
		aResponse[nPos]['beneficiary']	:= (cAlias)->E5_BENEF
		aResponse[nPos]['prefix']		:= (cAlias)->E5_PREFIXO
		aResponse[nPos]['title']		:= (cAlias)->E5_NUMERO
		aResponse[nPos]['parcela']		:= (cAlias)->E5_PARCELA
		aResponse[nPos]['recno']		:= (cAlias)->R_E_C_N_O_
		(cAlias)->(DbSkip())
	END

	(cAlias)->(DbCloseArea())

Return aResponse
