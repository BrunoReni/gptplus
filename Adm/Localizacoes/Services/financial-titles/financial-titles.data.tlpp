#include 'tlpp-core.th'
#INCLUDE "TOTVS.CH"

namespace tr.financialTitles
using namespace tr.util.tiposTitulos

/*/{Protheus.doc} financialTitlesAdapter
Clase que obtiene los querys para obtener los datos que se necesitan para las reglas de negocio
@type class
@version 1  
@author luis.aboytes
@since 01/3/2021
/*/
Class financialTitlesAdapter From FWAdapterBaseV2
	Data cTableNick As Character

	Public Method new()
	Public Method financialTitlesAdapter()
	Public Method totalsFinancialTitlesAdapter()
	Public Method financialTitlesClientAdapter()
	Public Method replacesCharacter()
	Public Method financialTitlesOthersAdapter()
	Public Method getTotalTitlesAdapter()
	Public Method checkSF2()
	Public Method checkSF1()
EndClass

/*/{Protheus.doc} financialTitlesAdapter::new
Constructor de la clase financialTitlesAdapter
@type method
@version  1
@author luis.aboytes
@since 24/02/2020
@param cResMethod, character, Nombre del metodo REST
/*/
Method new(cResMethod As Character) Class financialTitlesAdapter
	_Super:new(cResMethod)
Return

/*/{Protheus.doc} AddMapFields
Agrega los campos que se usaran en la consulta y devuelve el objeto
@type function
@version  1 
@author luis.aboytes
@since 24/02/2021
@param oSelf, object, oSelf
@param cMethod, character, nombre del metodo
/*/
Static Function AddMapFields(oSelf As Object,cMethod As Character,cfield As Character,aCampos As Array,lGeneral)
	Local cFieldNick := cfield 
	Local cbd 		 := Upper(TCGetDB())
	local nI		 := 1
	Local aChave 	 := {}
	Local aTitCred   := {} As Array
	Local cTitCred   := "" As Character
	Local nX 		 := 1
	Default lGeneral := .F.
	Default aCampos  := {}

	aTitCred := StrTokArr(MV_CRNEG+"|"+MVRECANT,"|")
	FOR nX := 1 To LEN(aTitCred)
		cTitCred += ALLTRIM("'"+aTitCred[nX]+"'")
		IIF(nX<LEN(aTitCred),cTitCred+=",","")
	Next

	If cFieldNick == "E1"
		oSelf:AddMapFields("branch",cFieldNick+'_FILIAL',.T.,.T.,{cFieldNick + '_FILIAL', 'C',GetSx3Cache("E1_FILIAL","X3_TAMANHO"),0})
		oSelf:AddMapFields("billNumber",cFieldNick+'_NUM',.T.,.T.,{cFieldNick + '_NUM', 'C',GetSx3Cache("E1_NUM","X3_TAMANHO"),0})
		oSelf:AddMapFields("type",cFieldNick+'_TIPO',.T.,.T.,{cFieldNick + '_TIPO', 'C',GetSx3Cache("E1_TIPO","X3_TAMANHO"),0})
		oSelf:AddMapFields("actualDueDt",cFieldNick+'_VENCREA',.T.,.T.,{cFieldNick + '_VENCREA', 'C',GetSx3Cache("E1_VENCREA","X3_TAMANHO"),0})
		oSelf:AddMapFields("currency",cFieldNick+'_MOEDA',.T.,.T.,{cFieldNick + '_MOEDA', 'N',GetSx3Cache("E1_MOEDA","X3_TAMANHO"),0})
		oSelf:AddMapFields("unit",cFieldNick+'_LOJA',.T.,.T.,{cFieldNick + '_LOJA', 'C',GetSx3Cache("E1_LOJA","X3_TAMANHO"),0})
		oSelf:AddMapFields("installment",cFieldNick+'_PARCELA',.T.,.T.,{cFieldNick + '_PARCELA', 'C',GetSx3Cache("E1_PARCELA","X3_TAMANHO"),0})
		oSelf:AddMapFields("billvalue",cFieldNick+'_VALOR',.T.,.T.,{cFieldNick + '_VALOR', 'N',GetSx3Cache("E1_VALOR","X3_TAMANHO"),0})
		oSelf:AddMapFields("customer",cFieldNick+'_CLIENTE',.T.,.T.,{cFieldNick + '_CLIENTE', 'C',,0})
		oSelf:AddMapFields("custName",cFieldNick+'_NOMCLI',.T.,.T.,{cFieldNick + '_NOMCLI', 'C',GetSx3Cache("E1_NOMCLI","X3_TAMANHO"),0})
		oSelf:AddMapFields("class",cFieldNick+'_NATUREZ',.T.,.T.,{cFieldNick + '_NATUREZ', 'C',GetSx3Cache("E1_NATUREZ","X3_TAMANHO"),0})
		IF lGeneral 
			oSelf:AddMapFields("balance",cFieldNick+'_SALDO',.T.,.T.,{cFieldNick + '_SALDO', 'N',GetSx3Cache("E1_SALDO","X3_TAMANHO"),0},"case when E1_TIPO IN("+cTitCred+") THEN E1_SALDO*-1 ELSE E1_SALDO END AS ")
		ELSE
			oSelf:AddMapFields("balance",cFieldNick+'_SALDO',.T.,.T.,{cFieldNick + '_SALDO', 'N',GetSx3Cache("E1_SALDO","X3_TAMANHO"),0})
		ENDIF
		If cMethod == "financialTitlesAdapter"
			oSelf:AddMapFields("currencyRat",cFieldNick+'_TXMOEDA',.T.,.T.,{cFieldNick + '_TXMOEDA', 'N',GetSx3Cache("E1_TXMOEDA","X3_TAMANHO"),0})
		elseif cMethod == "financialTitlesClientAdapter" .Or. cMethod == "financialTitlesOthersAdapter"
			oSelf:AddMapFields("prefix",cFieldNick+'_PREFIXO',.T.,.T.,{cFieldNick + '_PREFIXO', 'C',GetSx3Cache("E1_PREFIXO","X3_TAMANHO"),0})
			oSelf:AddMapFields("issueDt",cFieldNick+'_EMISSAO',.T.,.T.,{cFieldNick + '_EMISSAO', 'C',GetSx3Cache("E1_EMISSAO","X3_TAMANHO"),0})
			oSelf:AddMapFields("writeoffne",cFieldNick+'_VALLIQ',.T.,.T.,{cFieldNick + '_VALLIQ', 'N',GetSx3Cache("E1_VALLIQ","X3_TAMANHO"),0})
			oSelf:AddMapFields("discount",cFieldNick+'_DESCONT',.T.,.T.,{cFieldNick + '_DESCONT', 'N',GetSx3Cache("E1_DESCONT","X3_TAMANHO"),0})
			oSelf:AddMapFields("interest",cFieldNick+'_JUROS',.T.,.T.,{cFieldNick + '_JUROS', 'N',GetSx3Cache("E1_JUROS","X3_TAMANHO"),0})
			oSelf:AddMapFields("fine",cFieldNick+'_MULTA',.T.,.T.,{cFieldNick + '_MULTA', 'N',GetSx3Cache("E1_MULTA","X3_TAMANHO"),0})
			oSelf:AddMapFields("series",cFieldNick+'_SERIE',.T.,.T.,{cFieldNick + '_SERIE', 'C',GetSx3Cache("E1_SERIE","X3_TAMANHO"),0})
			oSelf:AddMapFields("origin",cFieldNick+'_ORIGEM',.T.,.T.,{cFieldNick + '_ORIGEM', 'C',GetSx3Cache("E1_ORIGEM","X3_TAMANHO"),0})
			If  cbd  == "MSSQL"
				oSelf:AddMapFields("recno", 'R_E_C_N_O_',.T.,.T.,{'R_E_C_N_O_', 'N', ,0},"SE1.")
			ElseIf cbd  $ ("ORACLE|POSTGRES") 
				oSelf:AddMapFields("recno", 'R_E_C_N_O_',.T.,.T.,{'R_E_C_N_O_', 'N', ,0},"SE1.R_E_C_N_O_")
			EndIf
			oSelf:AddMapFields("client",cFieldNick+'_CLIENTE',.T.,.T.,{cFieldNick + '_CLIENTE', 'C',GetSx3Cache("E1_CLIENTE","X3_TAMANHO"),0})
			oSelf:AddMapFields("originbranch",cFieldNick+'_FILORIG',.T.,.T.,{cFieldNick + '_FILORIG', 'C',GetSx3Cache("E1_FILORIG","X3_TAMANHO"),0})
			If (SF2->(ColumnPos("F2_SERIE2")) >0 .AND. SF1->(ColumnPos("F1_SERIE2")) >0 ) 
				oSelf:AddMapFields("serie2f2",'F2_SERIE2',.T.,.T.,{'F2_SERIE2', 'C',GetSx3Cache("F2_SERIE2","X3_TAMANHO"),0})
				oSelf:AddMapFields("serie2f1",'F1_SERIE2',.T.,.T.,{'F1_SERIE2', 'C',GetSx3Cache("F1_SERIE2","X3_TAMANHO"),0})
			ENDIF
			IF  Len(aCampos) > 0 
				For nI := 1 To Len(aCampos)
					aChave:=Separa(aCampos[nI][1],"_")
					oSelf:AddMapFields(aCampos[nI][1],cFieldNick+'_'+aChave[2],.T.,.T.,{cFieldNick + '_'+aChave[2], 'C',GetSx3Cache(aCampos[nI][1],"X3_TAMANHO"),0})
				Next
			EndIF
		EndIf
	EndIf

Return Nil

/*/{Protheus.doc} getQuery
Agregamos los campos que seran utilizados en el query y el retorno del objeto
@type function
@version  1
@author luis.aboytes
@since 25/3/2021
@param cTableNick, character, nombre de la tabla
@output cQuery, query 
/*/
Static Function getQuery(cTableNick As Character) As Character
	Local cQuery As Character
	cQuery := " SELECT #QueryFields# "
	cQuery += " FROM " + RetSqlName(cTableNick) + " SE1 "
	cQuery += " WHERE #QueryWhere#"
Return cQuery

/*/{Protheus.doc} getQuery2
Se define un nuevo metodo para obtener un query y poder obtener los campos F2_SERIE2 Y F1_SERIE2 para mostrarlos en la seccion de titulos a cobrar o compensar en nuevo recibo de totvs recibo
@type function
@version  1
@author luis.aboytes
@since 3/6/2022
/*/
Static Function getQuery2(cTableNick As Character) As Character
	Local cQuery As Character

    cQuery := " SELECT #QueryFields#"
    cQuery +=   " FROM " + RetSqlName( 'SE1' ) + " SE1 "
    cQuery +=   " FULL JOIN " + RetSqlName( 'SF2' ) + " SF2 "
    cQuery +=       " ON SE1.E1_FILIAL=SF2.F2_FILIAL  AND SE1.E1_NUM=SF2.F2_DOC AND SE1.E1_SERIE=SF2.F2_SERIE AND SE1.E1_CLIENTE=SF2.F2_CLIENTE  AND SE1.E1_LOJA=SF2.F2_LOJA and SE1.D_E_L_E_T_=SF2.D_E_L_E_T_ "
	cQuery += 	" FULL JOIN "+RetSqlName( 'SF1' )+" SF1 "
	cQuery += 		" ON  SE1.E1_FILIAL=SF1.F1_FILIAL AND SE1.E1_NUM=SF1.F1_DOC AND SE1.E1_SERIE=SF1.F1_SERIE AND SE1.E1_CLIENTE=SF1.F1_FORNECE  AND SE1.E1_LOJA=SF1.F1_LOJA and SE1.D_E_L_E_T_=SF1.D_E_L_E_T_ "
    cQuery += " WHERE #QueryWhere#"
Return cQuery

/*/{Protheus.doc} financialTitlesAdapter::financialTitlesAdapter
Prepara y retorna todas los titulos financieros
@type method
@version  1
@author luis.aboytes
@since 25/02/2021
@param cTableNick, character, nombre de la tabla
@param cfil, character, filial
@param cCliente, character, cliente
@param cModalidad, character, modalidad
@param cTienda, character, tienda
@param jParamsRequest, jObject, parametros en la Url
/*/
Method financialTitlesAdapter( cTableNick , cfil, cCliente , cModalidad , cTienda  ,jParamsRequest, jParams ) Class financialTitlesAdapter
	Local cQueryWhere As Character
	Local aActivedArea As Array
	Local cNumber As Character
	Local aFil	:= {}
	Local nX := 0
	Local cFiliales	:= ""
	Local lGeneral As Logical

	lGeneral := IIF(!VAZIO(jParams["general"]),jParams["general"],.F.)

	//Asignamos el nombre de la tabla a utilizar
	::cTableNick := cTableNick

	aActivedArea   := FwGetArea()

	//Agregamos los campos Json/ResultSet
	AddMapFields(self, "financialTitlesAdapter","E1",/*Array*/,lGeneral)

	//Informamos el query a utilizar en la API
	::SetQuery(getQuery(cTableNick))

	cQueryWhere := " D_E_L_E_T_ = ' ' "

	cQueryWhere += " AND E1_SALDO > 0 "

	If cfil != ''
		cQueryWhere += " AND E1_FILIAL ='"+xFilial("SE1",cfil)+"' "
	Else
		aFil	:= FWLoadSM0( .T. , .T. )
		For nX := 1 To Len(aFil)
			If afil[nX][SM0_USEROK]
				If !Empty(cFiliales)
					cFiliales += ','
				EndIf
				cFiliales += " '" + xFilial("SE1",afil[nX][SM0_CODFIL]) + "' "
			EndIf
		Next
		cQueryWhere += " AND E1_FILIAL IN ("
		If !Empty(cFiliales)
			cQueryWhere += cFiliales
		Else
			cQueryWhere += "''"
		EndIf
		cQueryWhere += ")"
	EndIf

	cQueryWhere += "AND E1_TIPO NOT IN ('AB-' , 'FB-' , 'FC-' , 'FU-' , 'FP-' , 'IR-' , 'IN-' , 'IS-' , 'PI-' , 'CF-' , 'CS-' , 'FE-' , 'IV-' , 'I2-' , 'IM-', 'CH')"

	If cCliente != ''
		cQueryWhere += " AND E1_CLIENTE ='"+cCliente+"' "
	EndIf

	If cModalidad != ''
		cQueryWhere += " AND E1_NATUREZ ='"+cModalidad+"' "
	EndIf

	If cTienda != ''
		cQueryWhere += " AND E1_LOJA ='"+cTienda+"' "
	EndIf

	//1 -Total cartera 2 -Vencidos 3 -Por vencer
	cNumber := jParamsRequest['number']
	If (cNumber == "2" .or. cNumber == "3")
		If cNumber == "2"
			cQueryWhere += " AND E1_VENCREA <'"+jParams['dateSystem']+"' "
		Else
			cQueryWhere += " AND E1_VENCREA >='"+jParams['dateSystem']+"' "
		EndIf
	EndIf

	//Configuramos los campos para el query
	::SetWhere(cQueryWhere)

	//Informamos el ordenamiento a ser utilizado en la Query
	::SetOrder("E1_FILIAL")

	//Ejecuta la consulta, retorna .T. si todo ocurre conforme a lo esperado
	If ::Execute()
		//Genera un archivo Json
		::FillGetResponse()
	EndIf

	FwrestArea(aActivedArea)
Return Nil

/*/{Protheus.doc} financialTitlesAdapter::totalsFinancialTitlesAdapter
Prepara y retorna los totales de los titulos financieros
@type method
@version  1
@author luis.aboytes
@since 25/02/2021
@param cTableNick, character, nombre de la tabla
@param cfil, character, filial
@param cCliente, character, cliente
@param cModalidad, character, modalidad
@param cTienda, character, tienda
/*/
Method totalsFinancialTitlesAdapter( cTableNick As Character, cfil As Character, cCliente As Character, cModalidad As Character, cTienda As Character ) Class financialTitlesAdapter
	Local oCollector := JsonObject():New()
	Local cQueryFields As Character
	Local cQueryWhere As Character
	Local cQuery As  Character
	Local aResponse := {}
	Local aFil	:= {}
	Local nX := 0
	Local cFiliales	:= ""

	cAlias := GetNextAlias()

	cQueryWhere := " D_E_L_E_T_ = ' ' "

	If cTableNick == 'SE1'       //Titulos por cobrar
		cQueryFields := "E1_FILIAL,E1_LOJA,E1_CLIENTE,E1_NUM,E1_PARCELA,E1_VALOR,E1_MOEDA,E1_TXMOEDA,E1_VENCREA,"
		cQueryFields += "E1_NOMCLI,E1_TIPO,E1_SALDO,E1_NATUREZ,E1_EMISSAO"

		If cfil != ''
			cQueryWhere += " AND E1_FILIAL ='"+xFilial("SEL",cfil)+"' "
		Else
			aFil	:= FWLoadSM0( .T. , .T. )
			For nX := 1 To Len(aFil)
				If afil[nX][SM0_USEROK]
					If !Empty(cFiliales)
						cFiliales += ','
					EndIf
					cFiliales += " '" + xFilial("SE1",afil[nX][SM0_CODFIL]) + "' "
				EndIf
			Next
			cQueryWhere += " AND E1_FILIAL IN ("
			If !Empty(cFiliales)
				cQueryWhere += cFiliales
			Else
				cQueryWhere += "''"
			EndIf
			cQueryWhere += ")"
		EndIf
		If cCliente != ''
			cQueryWhere += " AND E1_CLIENTE ='"+cCliente+"' "
		EndIf
		If cModalidad != ''
			cQueryWhere += " AND E1_NATUREZ ='"+cModalidad+"' "
		EndIf
		If cTienda != ''
			cQueryWhere += " AND E1_LOJA ='"+cTienda+"' "
		EndIf

		cQueryWhere += " AND E1_SALDO > 0 "

		cQueryWhere += "AND E1_TIPO NOT IN ('AB-' , 'FB-' , 'FC-' , 'FU-' , 'FP-' , 'IR-' , 'IN-' , 'IS-' , 'PI-' , 'CF-' , 'CS-' , 'FE-' , 'IV-' , 'I2-' , 'IM-', 'CH')"

	ElseIf cTableNick == 'SEL'  //Recibos de cobranza
		cQueryFields := "EL_FILIAL,EL_PREFIXO,EL_NUMERO,EL_PARCELA,EL_TIPO,EL_CLIENTE,EL_LOJA,EL_CANCEL,EL_MOEDA,EL_VLMOED1,EL_DTDIGIT,EL_TIPODOC,EL_VALOR,EL_DTVCTO "

		If cfil != ''
			cQueryWhere += " AND EL_FILIAL ='"+xFilial("SEL",cfil)+"' "
		EndIf
		If cCliente != ''
			cQueryWhere += " AND EL_CLIENTE ='"+cCliente+"' "
		EndIf
		If cModalidad != ''
			cQueryWhere += " AND EL_NATUREZ ='"+cModalidad+"' "
		EndIf
		If cTienda != ''
			cQueryWhere += " AND EL_LOJA ='"+cTienda+"' "
		EndIf
	EndIf

	cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName(cTableNick) +" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		If cTableNick == 'SE1'
			oCollector['E1_FILIAL'] := (cAlias)->E1_FILIAL
			oCollector['E1_LOJA'] := (cAlias)->E1_LOJA
			oCollector['E1_CLIENTE'] := (cAlias)->E1_CLIENTE
			oCollector['E1_NUM'] := (cAlias)->E1_NUM
			oCollector['E1_PARCELA'] := (cAlias)->E1_PARCELA
			oCollector['E1_VALOR'] := (cAlias)->E1_VALOR
			oCollector['E1_MOEDA'] := (cAlias)->E1_MOEDA
			oCollector['E1_TXMOEDA'] := (cAlias)->E1_TXMOEDA
			oCollector['E1_VENCREA'] := (cAlias)->E1_VENCREA
			oCollector['E1_NOMCLI'] := (cAlias)->E1_NOMCLI
			oCollector['E1_TIPO'] := (cAlias)->E1_TIPO
			oCollector['E1_SALDO'] := (cAlias)->E1_SALDO
			oCollector['E1_NATUREZ'] := (cAlias)->E1_NATUREZ
			oCollector['E1_EMISSAO'] := (cAlias)->E1_EMISSAO
		ElseIf cTableNick == 'SEL'
			oCollector['EL_FILIAL'] := (cAlias)->EL_FILIAL
			oCollector['EL_PREFIXO'] := (cAlias)->EL_PREFIXO
			oCollector['EL_NUMERO'] := (cAlias)->EL_NUMERO
			oCollector['EL_PARCELA'] := (cAlias)->EL_PARCELA
			oCollector['EL_TIPO'] := (cAlias)->EL_TIPO
			oCollector['EL_CLIENTE'] := (cAlias)->EL_CLIENTE
			oCollector['EL_LOJA'] := (cAlias)->EL_LOJA
			oCollector['EL_CANCEL'] := (cAlias)->EL_CANCEL
			oCollector['EL_MOEDA'] := (cAlias)->EL_MOEDA
			oCollector['EL_VLMOED1'] := (cAlias)->EL_VLMOED1
			oCollector['EL_DTDIGIT'] := (cAlias)->EL_DTDIGIT
			oCollector['EL_TIPODOC'] := (cAlias)->EL_TIPODOC
			oCollector['EL_VALOR'] := (cAlias)->EL_VALOR
			oCollector['EL_DTVCTO'] := (cAlias)->EL_DTVCTO
		EndIf
		AADD(aResponse,oCollector)
		oCollector := JsonObject():New()
		(cAlias)->(DbSkip())
	END

	(cAlias)->(DbCloseArea())

Return aResponse

/*/{Protheus.doc} financialTitlesAdapter::financialTitlesClientAdapter
Prepara y retorna todas los titulos financieros
@type method
@version  1
@author luis.aboytes
@since 01/03/2021
@param cTableNick, character, nombre de la tabla
@param cfil, character, filial
@param cCliente, character, cliente
@param cTienda, character, tienda
/*/
Method financialTitlesClientAdapter( cTableNick , cfil , cCliente , cTienda  , cDataBase, aCampos) Class financialTitlesAdapter
	Local cQueryWhere As Character
	Local aActivedArea As Array
	Local cTipos As Character
	Local cTemp As Character

	cTemp := "'"

	cTipos := tiposTitulosValidosFINA087A()

	//Asignamos el nombre de la tabla a utilizar
	::cTableNick := cTableNick

	cTemp := getQueryASCII(cTipos)

	cTemp	:=	IIf(Right(cTemp,2)==",'",Substr(cTemp,1,Len(cTemp)-2),cTemp)

	aActivedArea   := FwGetArea()

	//Agregamos los campos Json/ResultSet
	AddMapFields(self,"financialTitlesClientAdapter","E1",aCampos)

	cQueryWhere := " SE1.D_E_L_E_T_ = ' ' "
	cQueryWhere += " AND E1_FILIAL = '" + xFilial("SE1",cfil) +"' AND E1_CLIENTE = '"+cCliente+"' AND E1_LOJA = '"+cTienda+"'"
	cQueryWhere += " AND E1_EMISSAO <= '"+cDataBase+"' AND E1_TIPO IN ("+cTemp+") AND E1_SALDO > 0 AND E1_NUM <> ' '"
	
	//Informamos el query a utilizar en la API
	::SetQuery(getQuery2(cTableNick))

	//Configuramos los campos para el query
	::SetWhere(cQueryWhere)

	//Informamos el ordenamiento a ser utilizado en la Query
	::SetOrder("E1_FILIAL")

	//Ejecuta la consulta, retorna .T. si todo ocurre conforme a lo esperado
	If ::Execute()
		//Genera un archivo Json
		::FillGetResponse()
	EndIf

	FwrestArea(aActivedArea)
Return Nil

/*/{Protheus.doc} financialTitlesAdapter::financialTitlesOthersAdapter
Metodo que consulta la base de datos y obtiene los titulos que no pertenecen a un cierto cliente 
e incluye filtos si se agregaron datos en el cuerpo del json
@type method
@version  1
@author luis.aboytes
@since 29/3/2021
@param jBody, Jobject, cuerpo del json
@param cFilial, character, filial del que hay que excluir en la consulta
@param cCliente, character, cliente del que hay que excluir en la consulta
@param cTienda, character, tienda del que hay que excluir en la consulta
@param cTableNick, character, nombre de la tabla a consultar
/*/
Method financialTitlesOthersAdapter (jBody,cFil, cClien, cTien, cTableNick) Class financialTitlesAdapter
	Local cQueryWhere As Character
	Local aActivedArea As Array
	Local nCont As Numeric
	Local aFil	:= {}
	Local nX := 0
	Local cFiliales	:= ""
	Local cTipos	As Character
	Local cTemp 	As Character

	//Asignamos el nombre de la tabla a utilizar
	::cTableNick := cTableNick

	aActivedArea   := FwGetArea()

	//Obtenemos los tipos de documentos permitidos
	cTipos := tiposTitulosValidosFINA087A()

	cTemp := getQueryASCII(cTipos)

	cTemp	:=	IIf(Right(cTemp,2)==",'",Substr(cTemp,1,Len(cTemp)-2),cTemp)

	//Agregamos los campos Json/ResultSet
	AddMapFields(self,"financialTitlesOthersAdapter","E1")

	//Se incluye una consulta con el operador NOT IT el cual excluira al cliente
	cQueryWhere := " SE1.D_E_L_E_T_ = ' ' AND E1_NUM NOT IN ("
	cQueryWhere += " SELECT E1_NUM FROM "+ RetSqlName(cTableNick)+""
	cQueryWhere += " WHERE "

	//Agregamos el cliente que se va a excluir
	If cFil != ""
		cQueryWhere += " E1_FILIAL = '"+xFilial("SE1",cfil)+"'"
	EndIf
	//Agregamos el tienda que se va a excluir
	If cClien != ""
		cQueryWhere += " AND E1_CLIENTE = '"+cClien+"'"
	EndIf
	//Agregamos el tienda que se va a excluir
	If cTien != ""
		cQueryWhere += " AND E1_LOJA = '"+cTien+"'"
	EndIf

	cQueryWhere += " AND D_E_L_E_T_ = ' ' )"

	//Agregamos los filtros
	If jBody['branch'] <> NIL .and. !Empty(jBody['branch'])
		cQueryWhere += " AND E1_FILIAL  = '" + xFilial("SE1",jBody['branch']) + "'"
	Else
		aFil	:= FWLoadSM0( .T. , .T. )
		For nX := 1 To Len(aFil)
			If afil[nX][SM0_USEROK]
				If !Empty(cFiliales)
					cFiliales += ','
				EndIf
				cFiliales += " '" + xFilial("SE1",afil[nX][SM0_CODFIL]) + "' "
			EndIf
		Next
		cQueryWhere += " AND E1_FILIAL IN ("
		If !Empty(cFiliales)
			cQueryWhere += cFiliales
		Else
			cQueryWhere += "''"
		EndIf
		cQueryWhere += ")"
	EndIf
	cQueryWhere += If(jBody['prefix']!=""," AND E1_PREFIXO  = '"+jBody['prefix']+"'","")
	cQueryWhere += If(jBody['ofDate']!=""," AND E1_EMISSAO  >= '"+jBody['ofDate']+"'","")
	cQueryWhere += If(jBody['toDate']!=""," AND E1_EMISSAO  <= '"+jBody['toDate']+"'","")
	cQueryWhere += " AND E1_SALDO > 0"
	IF !Alltrim(jBody['toNumber'] ) == ""
		cQueryWhere += " AND E1_NUM BETWEEN '" +jBody['ofNumber']+ "' AND '"+ jBody['toNumber']+"'"
	EndIf
	//Compara si el Json trae mas de un codigo de cliente o es un solo cliente en el filtro
	If  len(jBody['code']) >1
		
			//Si vienen varios clientes  en forma de array se agrega el filtro con el operador IN
			cQueryWhere += " AND E1_CLIENTE IN ("

			For nCont := 1 to LEN(jBody['code'])
				cQueryWhere += "'"+jBody['code'][nCont]['client']+"'"
				If nCont != LEN(jBody['code'])
					cQueryWhere += ","
				EndIf
			Next
			cQueryWhere += ")"
		
	Else
		//Agregamos filtros si solo viene un solo cliente
		cQueryWhere += IIf (len(jBody['code']) < 1 , "", " AND E1_CLIENTE  = '"+jBody['code'][1]['client'] +"'")
		cQueryWhere += IIf (jBody['store']<> ""," AND E1_LOJA     = '"+jBody['store']+"'","")
	EndIf
	
	cQueryWhere += "AND E1_TIPO IN ("+cTemp+")"

	IF ExistBlock("F998NRIOFLT")
		cQueryWhere := ExecBlock("F998NRIOFLT",.F.,.F.,{cQueryWhere})
		If Valtype(cQueryWhere) <> "C"
			cQueryWhere := ""
		EndIf
	ENDIF

	//Informamos el query a utilizar en la API
	::SetQuery(getQuery2(cTableNick))

	//Configuramos los campos para el query
	::SetWhere(cQueryWhere)

	//Informamos el ordenamiento a ser utilizado en la Query
	::SetOrder("E1_FILIAL")

	//Ejecuta la consulta, retorna .T. si todo ocurre conforme a lo esperado
	If ::Execute()
		//Genera un archivo Json
		::FillGetResponse()
	EndIf

	FwrestArea(aActivedArea)
Return Nil

/*/{Protheus.doc} receiptAdapter::getTotalReceiptsAdapter(cTableNick As Character) As Numeric
Metodo que obtiene el numero de titulos total registrados en la tabla SE1 junto con sus respectivos filtros
@type method
@version  1
@author José González
@since 02/06/2021
/*/
Method getTotalTitlesAdapter (cTableNick As Character, cfil As Character, cCliente As Character, cTienda  As Character) Class financialTitlesAdapter
	Local cQueryFields 	As Character
	Local cQueryWhere 	As Character
	Local cAlias 		As Character
	Local cQuery 		As Character
	Local cNumber 		As Numeric

	cAlias := GetNextAlias()

	cQueryWhere := " D_E_L_E_T_ = ' ' "
	cQueryWhere += " AND E1_FILIAL = '" +xFilial("SE1",cfil) +"' AND E1_CLIENTE = '"+cCliente+"' AND E1_LOJA = '"+cTienda+"'"
	cQueryFields := "COUNT (E1_FILIAL)"

	cQuery := ' SELECT '+cQueryFields+' AS TOTALTITLES FROM '+ RetSqlName(cTableNick) +' WHERE '+cQueryWhere
	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	cNumber := (cAlias)->TOTALTITLES

	(cAlias)->(DbCloseArea())


Return cNumber

/*/{Protheus.doc} financialTitlesAdapter::checkSF2( cTableNick As Character, cfil As Character, cCliente As Character, cModalidad As Character, cTienda As Character )As logical
Metodo que verifica la existencia del archivo en la tabla SF2 (encabezado de la factura de salida)
@type method
@version  1
@author luis.aboytes
@since 14/6/2021
@return logical, true o false
/*/
Method checkSF2(cFil,cNum,cSerie,nOrden,cClient,cLoja,oTemp) Class financialTitlesAdapter
	Local cQueryFields 	:= "" As Character
	Local cQueryWhere 	:= "" As Character
	Local cQuery 		:= "" As  Character
	Local cAlias		:= GetNextAlias() As  Character
	Local lExist		:= .F. As  Logical

	Default cFil		:= ""
	Default cNum		:= ""
	Default cSerie		:= ""
	Default nOrden		:= ""
	Default cClient		:= ""
	Default cLoja		:= ""

	If nOrden == 1
		cQueryWhere := " F2_FILIAL = '"+cFil+"' AND F2_DOC = '"+cNum+"' AND F2_SERIE = '"+cSerie+"' "
	ElseIf nOrden == 6
		cQueryWhere := " F2_FILIAL = '"+cFil+"' AND F2_SERIORI = '"+cSerie+"' AND F2_NFORI = '"+cNum+"' "
	elseif nOrden == 2
		cQueryWhere := " F2_FILIAL = '"+cFil+"' AND F2_CLIENTE = '"+cClient+"' AND F2_LOJA = '"+cLoja+"' AND F2_DOC = '"+cNum+"'    AND F2_SERIE = '"+cSerie+"' "
	EndIf
	cQueryFields := "F2_UUID"

	cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SF2") +" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		lExist := .T.
		If !VAZIO((cAlias)->F2_UUID)
			oTemp['F2_UUID'] = (cAlias)->F2_UUID
		else
			oTemp['F2_UUID'] = ""
		EndIf
		(cAlias)->(DbSkip())
	END

	(cAlias)->(DbCloseArea())

Return lExist

/*/{Protheus.doc} financialTitlesAdapter::checkSF2( cTableNick As Character, cfil As Character, cCliente As Character, cModalidad As Character, cTienda As Character )As logical
Metodo que verifica la existencia del archivo en la tabla SF1 (encabezado de la factura de Entrada)
@type method
@version  1
@author luis.aboytes
@since 14/6/2021
@return logical, true o false
/*/
Method checkSF1(cFil,cNum,cSerie,cClient,cLoja,oTemp) Class financialTitlesAdapter
	Local cQueryFields 	:= "" As Character
	Local cQueryWhere 	:= "" As Character
	Local cQuery 		:= "" As  Character
	Local cAlias		:= GetNextAlias() As  Character
	Local lExist		:= .F. As  Logical

	Default cFil		:= ""
	Default cNum		:= ""
	Default cSerie		:= ""
	Default nOrden		:= ""
	Default cClient		:= ""
	Default cLoja		:= ""

	cQueryWhere := " F1_FILIAL = '"+cFil+"' AND F1_DOC = '"+cNum+"' AND F1_SERIE = '"+cSerie+"' AND F1_FORNECE = '"+cClient+"' AND F1_LOJA = '"+cLoja+"' "
	cQueryFields := "F1_UUID"

	cQuery := "SELECT "+cQueryFields+" FROM "+ RetSqlName("SF1") +" WHERE "+cQueryWhere

	cQuery := ChangeQuery(cQuery)
	MPSysOpenQuery(cQuery, cAlias)

	WHILE (cAlias)->(!EOF())
		lExist := .T.
		If !VAZIO((cAlias)->F1_UUID)
			oTemp['F1_UUID'] = (cAlias)->F1_UUID
		else
			oTemp['F1_UUID'] = ""
		EndIf
		(cAlias)->(DbSkip())
	END

	(cAlias)->(DbCloseArea())

Return lExist

/*/{Protheus.doc} financialTitlesAdapter::getQueryASCII
Convertimos por medio del codigo ASCII valores en "," para su consulta correcta en el query
@type method
@version  1
@author luis.aboytes
@since 11/2/2022
@return character,cTemp, formato query
/*/
Static Function getQueryASCII(cTipos) 
	Local nI As Numeric
	Local nCAsc As Numeric
	Local cTemp As Character

	cTemp := "'"
	
	For nI := 1 To Len(cTipos)
		nCAsc := Asc(SubStr(cTipos,nI,1))
		If (nCAsc == 32) .Or. (nCAsc == 45) .Or.;
				(nCAsc >= 48 .And. nCAsc <= 57 ) .Or.;
				(nCAsc >= 65 .And. nCAsc <= 90 ) .Or.;
				(nCAsc >= 97 .And. nCAsc <= 122)

			cTemp += (SubStr(cTipos,nI,1)+Iif(nI==Len(cTipos),	"'",""))
		Else
			cTemp += "','"
		EndIf
	Next
Return cTemp
