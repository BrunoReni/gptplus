#include 'tlpp-core.th'
#include 'financialtitlesservice.ch'

namespace tr.financialTitles
using namespace tr.util

/*/{Protheus.doc} financialTitlesService
Clase que contiene la regla de negocios de los titulos financieros
@type class
@version  1 
@author luis.aboytes
@since 24/02/2021
/*/
Class financialTitlesService
	Public Method new()
	Public Method financialTitlesServices()
	Public Method totalsFinancialTitlesService()
	Public Method financialTitlesClientService()
	Public Method validTitlePagoService()
	Public Method validTitleLockService()
	Public Method totalsTitlesService()
	Public Method financialTitlesOthersService()
	Public Method totalsTitlesFinancialService()
	Public Method financialTitlesCheckTimb()
	Public Method financialTitleCheckTimb()
	Public Method descFin()
	Public Method jurosFin()
EndClass

/*/{Protheus.doc} financialTitlesService::new
Constructor de la clase financialTitlesService
@type method
@version  1
@author luis.aboytes
@since 24/02/2021
/*/
Method new() Class financialTitlesService
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} financialTitlesService::financialTitlesService
Metodo que retorna los titulos financieros
@type method
@version  1
@author luis.aboytes
@since 24/02/2021
@param jParams, Jobject, body de json
@param jQueryRequestParams, Jobject, parametros del url
@param jParamsRequest, Jobject, body de json
@return JsonObject, 
					{
        			    "customer": "",
        			    "class": "",
        			    "actualduedt": "",
        			    "type": "",
        			    "unit": "",
        			    "currency": 0,
        			    "currencyrat": 0,
        			    "billnumber": "",
        			    "installment": "",
        			    "billvalue": 0,
        			    "custname": "",
        			    "branch": ""
					}
/*/
Method financialTitlesServices(jParams,jQueryRequestParams,jParamsRequest ) Class financialTitlesService
	Local oFinancialTitlesAdapter As Object
	Local oResponse As Object
	Local cFil As Character
	Local cCliente As Character
	Local cModalidad As Character
	Local cTienda As Character
	Local nTipoCambio As Numeric

	oFinancialTitlesAdapter := financialTitlesAdapter():new('GET')

	//Indica cual pagina debemos retornar
	If !(Empty(jQueryRequestParams['page']))
		oFinancialTitlesAdapter:setPage(Val(jQueryRequestParams['page']))
	EndIf

	//Indica el tamaño de la pagina
	If !(Empty(jQueryRequestParams['pagesize']))
		oFinancialTitlesAdapter:setPageSize(Val(jQueryRequestParams['pagesize']))
	EndIf

	//Se asignan los valores del parametros jParams a variables
	cFil := If(jParams['origBranch']==Nil,'',jParams['origBranch'])
	cCliente := If(jParams['customer']==Nil,'',jParams['customer'])
	cModalidad := If(jParams['modalidad']==Nil,'',jParams['modalidad'])
	cTienda := If(jParams['unit']==Nil,'',jParams['unit'])
	nTipoCambio := If(jParams['exchangeRate']==Nil,1,jParams['exchangeRate'])

	oFinancialTitlesAdapter:financialTitlesAdapter("SE1", cFil,cCliente,cModalidad,cTienda,jParamsRequest, jParams)

	oResponse := JsonObject():New()
	If oFinancialTitlesAdapter:lOk
		oResponse["result"] := .T.
		oResponse["response"] := oFinancialTitlesAdapter:getJSONResponse()
	Else
		oResponse := answerErrorFormat(oFinancialTitlesAdapter:GetCode(), oFinancialTitlesAdapter:GetMessage(), oStoreAdapter:GetMessage())
	EndIf

	oFinancialTitlesAdapter:DeActivate()
	oFinancialTitlesAdapter := nil
Return oResponse

/*/{Protheus.doc} financialTitlesService::totalsFinancialTitlesService
Metodo que retorna los totales de los titulos financieros
@type method
@version  1
@author luis.aboytes
@since 25/02/2021
@param jParams, Jobject, body de json
@param jParamsRequest, Jobject, body de json
@Return JsonObject,
	{
  	 	 "success": true,
   		 "totalOverdue": 0.0,
   		 "totalExpire": 0.0,
   		 "totalPortfolio": 0.0
	}
/*/
Method totalsFinancialTitlesService(jParams,jQueryRequestParams) Class financialTitlesService
	Local oFinancialTitlesAdapter As Object
	Local jResponse := JsonObject():New()
	Local jErrorResponse := JsonObject():New()
	Local jTemp  := JsonObject():New()
	Local aJson
	Local aObjetosSE1
	Local nCont
	Local nTasa
	Local nRoundDigits
	Local nCreditoTotal
	Local nDebitoTotal
	Local nCreditoVencido
	Local nDebitoVencido
	Local nCreditoPorVencer
	Local nDdebitoPorVencer
	Local nTotalCartera
	Local nTotalVencido
	Local nTotalPorVencer
	Local dDia
	Local cCliente
	Local cTienda
	Local cFil
	Local nTipoCambio
	Local lMoeda1
	Local aValues

	aValues := JsonObject():new()
	aJson := {}
	aObjetosSE1 := {}
	nCont := 1
	nTasa := 0
	nRoundDigits := SuperGetMv("MV_CENT")
	nCreditoTotal := 0.0
	nDebitoTotal := 0.0
	nCreditoVencido := 0.0
	nDebitoVencido := 0.0
	nCreditoPorVencer := 0.0
	nDdebitoPorVencer := 0.0
	nTotalCartera := 0.0
	nTotalVencido := 0.0
	nTotalPorVencer := 0.0
	dDia := STOD(jParams['dateSystem'])
	lMoeda1 := .T.

	oFinancialTitlesAdapter := financialTitlesAdapter():new('POST')

	//Se asignan los valores del parametros jParams a variables
	cFil := If(jParams['origBranch']==Nil,'',jParams['origBranch'])
	cCliente := If(jParams['customer']==Nil,'',jParams['customer'])
	cModalidad :=  If(jParams['modalidad']==Nil,'',jParams['modalidad'])
	cTienda := If(jParams['unit']==Nil,'',jParams['unit'])
	nTipoCambio := If(jParams['exchangeRate']==Nil,1,jParams['exchangeRate'])

	aObjetosSE1 := oFinancialTitlesAdapter:totalsFinancialTitlesAdapter("SE1",cFil,cCliente,cModalidad,cTienda)

	//SE1 VALIDACIONES (REGLAS DE NEGOCIO)
	For nCont := 1 to LEN(aObjetosSE1)
		nTasa:=1
		lMoeda1 := .T.

		If aObjetosSE1[nCont]['E1_MOEDA'] != 1
			If nTipoCambio == 1 //1 - Del Dia
				nTasa:= RecMoeda(STOD(jParams['dateSystem']),aObjetosSE1[nCont]['E1_MOEDA'])
				If nTasa == 0
					//No es moneda uno y no tiene registrado una tasa
					lMoeda1 := .F.
					jErrorResponse := answerErrorFormat(400,STR0012 , STR0001  + STR0025  + STR0026  + STR0027) //STR0012 "Tasa no localizada" STR0001 "El tipo de cambio del día de una o varias monedas está en ceros, y los importes mostrados pueden estar incorrectos. Recomendamos usar el tipo de cambio de la operación o actualizar los tipos de cambio del día."
				EndIf
			Else
				//2 - Del movimiento
				nTasa:=Iif(!Empty(aObjetosSE1[nCont]['E1_TXMOEDA']),aObjetosSE1[nCont]['E1_TXMOEDA'],RecMoeda(aObjetosSE1[nCont]['E1_EMISSAO'],aObjetosSE1[nCont]['E1_MOEDA']))
				If nTasa == 0
					jErrorResponse := answerErrorFormat(400,STR0012 , STR0002)//STR0012 "Tasa no localizada" STR0002 "El tipo de cambio del movimiento está en ceros o nulo."
					Return jErrorResponse
				EndIf
			Endif
		EndIf

		//Si es moneda uno
		If lMoeda1 == .T.
			//nTotalCartera
			If (AllTrim(aObjetosSE1[nCont]['E1_TIPO']) $ MV_CRNEG+","+MVRECANT)
				nCreditoTotal += ROUND((aObjetosSE1[nCont]['E1_SALDO']*nTasa),nRoundDigits)
			Else
				nDebitoTotal += ROUND((aObjetosSE1[nCont]['E1_SALDO']*nTasa),nRoundDigits)
			EndIf
			//Vencidos
			If  aObjetosSE1[nCont]['E1_VENCREA'] < jParams['dateSystem']
				If (AllTrim(aObjetosSE1[nCont]['E1_TIPO']) $ MV_CRNEG+","+MVRECANT)
					nCreditoVencido += ROUND((aObjetosSE1[nCont]['E1_SALDO']*nTasa),nRoundDigits)
				Else
					nDebitoVencido += ROUND((aObjetosSE1[nCont]['E1_SALDO']*nTasa),nRoundDigits)
				EndIf
			EndIf
			//Por vencer
			If  aObjetosSE1[nCont]['E1_VENCREA'] >= jParams['dateSystem']
				If (AllTrim(aObjetosSE1[nCont]['E1_TIPO']) $ MV_CRNEG+","+MVRECANT)
					nCreditoPorVencer += ROUND((aObjetosSE1[nCont]['E1_SALDO']*nTasa),nRoundDigits)
				Else
					nDdebitoPorVencer += ROUND((aObjetosSE1[nCont]['E1_SALDO']*nTasa),nRoundDigits)
				EndIf
			EndIf
		EndIF
	Next

	//Se obtienen los totales
	nTotalCartera :=  ROUND((nDebitoTotal-nCreditoTotal),nRoundDigits)
	nTotalVencido :=  ROUND((nDebitoVencido-nCreditoVencido),nRoundDigits)
	nTotalPorVencer :=  ROUND((nDdebitoPorVencer-nCreditoPorVencer),nRoundDigits)

	//Se genera un Json con los totales
	aJson := JsonObject():new()
	aJson['success'] := .T.
	aJson['totalPortfolio'] := nTotalCartera
	aJson['totalOverdue'] := nTotalVencido
	aJson['totalExpire'] := nTotalPorVencer

	//Se asigna el json  con los valores y el posible error de moneda diferente de 1 no registrada en el mismo json
	aValues["totals"]:= aJson
	aValues["hasError"]:= lMoeda1
	aValues["hasError"]:=If(lMoeda1==.F.,.T.,.F.)
	aValues["error"]:=jErrorResponse

	jTemp:set(aValues)

	jResponse["result"] := .T.
	jResponse["response"] := jTemp

Return jResponse

/*/{Protheus.doc} financialTitlesService::financialTitlesClientService
Metodo que retorna los titulos financieros de un cliente y tienda en especificp
@type method
@version  1
@author luis.aboytes
@since 01/03/2021
@param cTableNick, character, nombre de tabla
@param jQueryRequestParams, Jobject, parametros del url
@param jParamsRequest, Jobject, body de json
@output JsonObject,  {
          			  "series": "",
          			  "actualduedt": "",
          			  "unit": "",
          			  "fine": 0,
          			  "issuedt": "",
          			  "prefix": "",
          			  "currency": 1,
         			  "custname": "",
         			  "branch": "",
        			  "customer": "",
					  "class": "",
            		  "discount": 0,
            		  "type": "",
            		  "write-offne": 0,
            		  "interest": 0,
            		  "billnumber ": "",
            		  "installment": "",
                	  "billvalue": ,
                	  "balance": ,
                	  "origin": ""
       		    	}
/*/
Method financialTitlesClientService(cTableNick,jParamsRequest ,jQueryRequestParams, jParams )  Class financialTitlesService
	Local oFinancialTitlesAdapter As Object
	Local oResponse As Object
	Local cCiente As Character
	Local cTienda As Character
	Local cFil As Character
	Local nNumberTitles 	As Numeric
	Local aCampos := {}
	local aJsoncpos := {}
	Local nI := 1
	local nPos := 1
	local oTemp 
	local oResp
	Local jTemp
	local cJson1 
	local lF998NRMCOL := ExistBlock("F998NRMCOL")
	Local dDataRef	 As date
	Local aArea		 As Array
	
	cCiente := ""
	cTienda := ""
	cFil := ""
	
	If lF998NRMCOL
		aCampos := ExecBlock("F998NRMCOL",.F.,.F.,)
		If Valtype(aCampos) <> "A"
			aCampos := {}
		EndIf
	EndIf

	If !(Empty(jParamsRequest['customer']))
		cCiente := jParamsRequest['customer']
	Else
		cCiente := Iif(jParams:hasProperty('form'), jParams['form']['client'], '')
	EndIf

	If !(Empty(jParamsRequest['unit']))
		cTienda := jParamsRequest['unit']
	Else
		cTienda := Iif(jParams:hasProperty('form'), jParams['form']['loja'], '')
	EndIf

	If !(Empty(jParamsRequest['origBranch']))
		cFil := jParamsRequest['origBranch']
	Else
		cFil := Iif(jParams:hasProperty('filial'), jParams['filial'], '')
	EndIf

	dDataRef := Iif(jParams:hasProperty('form'), STOD(StrTran(jParams['form']['emissa'], "-", "")), ddatabase)

	oFinancialTitlesAdapter := financialTitlesAdapter():New('GET')

	nNumberTitles := oFinancialTitlesAdapter:getTotalTitlesAdapter(cTableNick, cFil, cCiente, cTienda)


	//Indica cual pagina debemos retornar
	oFinancialTitlesAdapter:setPage(1)
	//Indica el tamaño de la pagina
	oFinancialTitlesAdapter:setPageSize(nNumberTitles)

	oFinancialTitlesAdapter:financialTitlesClientAdapter(cTableNick, cFil, cCiente, cTienda, Iif(jParams:hasProperty('dateSystem'), jParams['dateSystem'], jParamsRequest['datebase']), aCampos)
	
	If lF998NRMCOL	
		for nI := 1 to Len(aCampos)
			Aadd(aJsoncpos,JsonObject():new())
			nPos := Len(aJsoncpos)
			aJsoncpos[nPos]["property"] 	:= lower(aCampos[nI][1])
			aJsoncpos[nPos]["label"]		:= aCampos[nI][2]
			aJsoncpos[nPos]["visible"] 		:= aCampos[nI][3]			
		next
	EndIf
	cJson1 := oFinancialTitlesAdapter:getJSONResponse()
	oTemp := JsonObject():New()
    oTemp:fromJson( cJson1 )

	jTemp := JsonObject():New()
	jTemp := oTemp:GetJsonObject("items")

	aArea := GetArea()

	//Tratamiento para unificar en un solo campo el campo F2_SERIE2 Y F1_SERIE2 
	For nI := 1 To Len(jTemp)
		DO CASE 
			CASE VAZIO(jTemp[nI]['serie2f2']) .AND. VAZIO(jTemp[nI]['serie2f1'])
			 	jTemp[nI]['serie2']	:= ""
			CASE !VAZIO(jTemp[nI]['serie2f2']) .AND. VAZIO(jTemp[nI]['serie2f1'])
			 	jTemp[nI]['serie2']	:= jTemp[nI]['serie2f2']
			CASE VAZIO(jTemp[nI]['serie2f2']) .AND. !VAZIO(jTemp[nI]['serie2f1'])
			 	jTemp[nI]['serie2']	:= jTemp[nI]['serie2f1']
		ENDCASE
		SE1->(MsGoto(jTemp[nI]['recno']))
		jTemp[nI]['discount'] := self:descFin("SE1", dDataRef, jTemp[nI]['balance'], jTemp[nI]['currency'])
		jTemp[nI]['interest'] := self:jurosFin(Max(jTemp[nI]['currency'],1), dDataRef)
	Next

	RestArea(aArea)

	oResp:= JsonObject():New()	
	oResp["items"] := jTemp
	oResp["hasNext"] := oTemp:GetJsonObject("hasNext")
	
	If lF998NRMCOL
		oResp["columns"] := aJsoncpos 
	EndIf

	oResponse := JsonObject():New()
	If oFinancialTitlesAdapter:lOk
		oResponse["result"] := .T. 
		oResponse["response"] :=oResp
	Else
		oResponse := answerErrorFormat(oFinancialTitlesAdapter:GetCode(), oFinancialTitlesAdapter:GetMessage(), oFinancialTitlesAdapter:GetMessage())
	EndIf

	oFinancialTitlesAdapter:DeActivate()
	oFinancialTitlesAdapter := nil

Return oResponse

/*/{Protheus.doc} financialTitlesService::validTitlePagoService
Metodo que contiene las validaciones que son parte de la funcion A087aPagtos de la Fina087a.PRW
@type method
@version  1
@author luis.aboytes
@since 11/3/2021
@param jBody, Jobject, cuerpo del POST
@input JsonObject, {
   				"success": "true",
    			"message": "Documento valido"
			 }
/*/
Method validTitlePagoService ( jBody ) Class financialTitlesService
	Local jResponse := JsonObject():New()
	Local cTipo As Character
	Local cTipos As Character
	Local cModalidad As Character
	Local cOrigen As Character
	Local cDocRA As Character
	Local nQtdDGA As Numeric
	Local nQtdDifDGA As Numeric
	Local nCont As Numeric
	Local nRoundDigits As Numeric

	Local nDesc As Numeric 					//Descuento
	Local nMult As Numeric					//Multa
	Local nInteres As Numeric				//Interes
	Local nTotalCobrar As Numeric 			//Por cobrar
	Local nSaldoPendiente As Numeric		//Saldo pendiente
	Local nTotal As Numeric					//Total base

	cTipos := MVRECANT+"/"+MV_CRNEG
	cTipo := If(jBody['type']==Nil,'',jBody['type']) 		//E1_TIPO
	cModalidad := If(jBody['modalidad']==Nil,'',jBody['modalidad']) //E1_NATUREZ
	cOrigen := If(jBody['origin']==Nil,'',jBody['origin']) 	//E1_ORIGEM
	cDocRA := SubStr(MVRECANT,1,3)
	nQtdDGA := 0
	nQtdDifDGA := 0
	nRoundDigits := SuperGetMv("MV_CENT")

	jResponse["result"] := .T.
	jResponse["response"] := '{ "success": "true", "message": "Documento válido" }'

	nDesc 		:= If(jBody['values']['descuento']==Nil,0,jBody['values']['descuento'])
	nMult 		:= If(jBody['values']['multa']==Nil,0,jBody['values']['multa'])
	nInteres	:= If(jBody['values']['interes']==Nil,0,jBody['values']['interes'])
	nTotalCobrar:= If(jBody['values']['totalCobrar']==Nil,0,jBody['values']['totalCobrar'])
	nSaldoPendiente:= If(jBody['values']['saldoPendiente']==Nil,0,jBody['values']['saldoPendiente'])

	If (nDesc < 0) .or. (nMult < 0) .or. (nInteres < 0) .or. (nTotalCobrar < 0) .or. (nSaldoPendiente < 0)
		jResponse := answerErrorFormat(406,STR0022,STR0021) //STR0022 "Existen valores negativos"  STR0021 "Valores negativos"
		Return jResponse
	ElseIf (nTotalCobrar == 0)
		jResponse := answerErrorFormat(400,STR0024 ,STR0023) //STR0024 "Total a cobrar no informado" STR0023 "Total a cobrar"
	EndIf


	//Validacion de valores de front-end con back-end
	If jBody['validateValues'] == .T.
		nTotalCobrar := jBody['values']['totalReceivable']
		nSaldoPendiente := jBody['values']['outstandingBalance']
		nDesc := jBody['values']['discount']
		nMult := jBody['values']['fine']
		nInteres := jBody['values']['interest']
		nTotal := jBody['values']['total']

		If LEN(jBody['coins']) != 0
			nTotalCobrarTemp := 0
			For nCont := 1 to LEN(jBody['coins'])
				nTotalCobrarTemp += ROUND(jBody['coins'][nCont]['value']*jBody['coins'][nCont]['currency'],nRoundDigits)
			Next
			If nTotalCobrarTemp != nTotalCobrar
				jResponse := answerErrorFormat(406,STR0013 ,STR0011) //STR0011 "Los valores del frontend y backend en el campo total a cobrar no coinciden" STR0013 "No coinciden los valores de la operacion"
				Return jResponse
			EndIF
		Else
			jResponse := answerErrorFormat(400,STR0014 ,STR0010) //STR0010 "El campo monedas no puede ir vacio" STR0014 "Error en monedas"
			Return jResponse
		EndIf

		nSaldoPendienteTemp := ROUND((nTotal -nDesc + nMult + nInteres),nRoundDigits)

		If nSaldoPendienteTemp != nSaldoPendiente
			jResponse := answerErrorFormat(406,STR0010 ,STR0009) //STR0010 "El campo monedas no puede ir vacio" STR0009 "Los valores del frontend y backend en el campo saldo pendiente no coinciden"
			Return jResponse
		EndIF
	EndIf
	//No permite la selección de valores tipo RA con operación avanzada habilitada
	If cTipo == cDocRA .And. GetAdvFVal("SED","ED_OPERADT",xFilial("SED")+cModalidad,1,"")== "1"
		jResponse := answerErrorFormat(406,STR0015 ,STR0003)//STR0015 "Error en tipo registro" STR0003 "No es posible seleccionar registros de cobranza anticipada que tengan la modalidad con operación de anticipo habilitada."
		Return jResponse
	EndIF
	//Validación para los DGA generados de manera directa desde Cuentas por Cobrar (FINA040)
	If cOrigen == "FINA040" .And. cTipo == "DGA"
		nQtdDGA++  //Qtd de DGA generados desde FINA040 (Cuentas por cobrar)
	EndIf
	//Validación para los DGA
	If cOrigen == "FINA040" .And. !cTipo == "DGA"
		nQtdDifDGA++
	EndIf

	If (nQtdDGA > 0 .And. !cOrigen == "FINA040" .And. cTipo == "DGA") .Or. (nQtdDifDGA>0 .And. cOrigen=="FINA040" .And. cTipo =="DGA")
		jResponse := answerErrorFormat(406,STR0016,STR0004)//STR0016 "Error en tipo titulo" STR0004 "No se permite la selección de títulos de tipo DGA generados a partir de la rutina de Cuentas por Cobrar (FINA040), con otros tipos de títulos."
		Return jResponse
	EndIf

Return jResponse

/*/{Protheus.doc} financialTitlesService::validTitleLockService
Metodo que contiene las validaciones para bloquear y desbloquear un titulo seleccionado
@type method
@version  1
@author eduardo.manriquez
@since 06/09/2022
@param jBody, Jobject, cuerpo del POST
@input JsonObject, {
   				"success": "true",
    			"message": "Documento valido"
			 }
/*/
Method validTitleLockService ( jBody ) Class financialTitlesService
	Local jResponse := JsonObject():New() As Object
	Local aDocuments := {}  As Array
	Local jTemp		:= JsonObject():New() As Object
	Local lLock 	:= .T.
	Local lCheck := .F.
	Local lBlock := .F.
	Local nRecno := 0
	Local nSaldo := 0
	Local nCont	 As Numeric
	Local nPos	 As Numeric 
	Local dDataRef	As date

	IF SEL->(ColumnPos("EL_FACTOR"))//Si es México
		IF !VAZIO(jBody['parameters']['mv_par07']) //Si es una compensación no se permite la seleccion de titulos
			jTemp["success"] 		:= .F.
			jTemp["validCompen"] 	:= .T.
			jTemp["message"] 		:= STR0030 //"No se permite realizar la seleccion de títulos adicionales para formas de pago de tipo Compensación."
			jTemp['saldo'] 			:= 0

			jResponse := jTemp
			Return jResponse
		ENDIF
	ENDIF

	dDataRef := Iif(jBody:hasProperty('dateSelected'), STOD(StrTran(jBody['dateSelected'], "-", "")), ddatabase)

	IF jBody['receipt'] != Nil
		lCheck := jBody['receipt']['$selected']
		nRecno := jBody['receipt']['recno']
		nSaldo := jBody['receipt']['balance']
		DbSelectArea("SE1")
		SE1->(DbGoTo(nRecno))
		IF lCheck
			lLock:= SE1->(MsRLock(nRecno))
		ELSE
			SE1->(MsRUnlock(nRecno))
		ENDIF
		
		jTemp["success"] 	 := lLock
		jTemp["validCompen"] := .T.
		jTemp["message"] 	 :=IIF(jTemp["success"] ,STR0028,STR0029) //"Documento Válido" - "No es posible seleccionar el título debido a que esta siendo usado en otra sesión."
	
		//Se asignan los valores del parametros params a variables
		If jTemp["success"] .and. lCheck
			prefix		:=	jBody['receipt']['prefix']
			bill_Number	:=	jBody['receipt']['billnumber']
			installment	:=	jBody['receipt']['installment']
			type		:=	jBody['receipt']['type']
			nSaldo 		:= getSaldo('SE1',prefix,bill_Number,installment,type)
		Endif
		jTemp['saldo'] := nSaldo
		jTemp['discount'] := self:descFin("SE1", dDataRef, nSaldo, jBody['receipt']['currency'])
		jTemp['interest'] := self:jurosFin(Max(jBody['receipt']['currency'],1), dDataRef)
		jTemp['fine'] 	  := 0
		jTemp['cuota'] 	  := jBody['receipt']['installment']
		jTemp['toReceive']:= Iif(lCheck,nSaldo - jTemp['discount'] + jTemp['interest'] + jTemp['fine'], 0)
		jResponse := jTemp
	ELSE
		FOR nCont := 1 TO LEN(jBody['receipts'])
			lCheck := jBody['receipts'][nCont]['$selected']
			nRecno := jBody['receipts'][nCont]['recno']
			nSaldo := jBody['receipts'][nCont]['balance']
			DbSelectArea("SE1")
			SE1->(DbGoTo(nRecno))
			IF lCheck
				lLock:= SE1->(MsRLock(nRecno))
				IF lLock == .F.
				 lBlock := .T.
				ENDIF
			ELSE
				SE1->(MsRUnlock(nRecno))
			ENDIF
		
			//Se asignan los valores del parametros params a variables
			If lLock .and. lCheck
				prefix		:=	jBody['receipts'][nCont]['prefix']
				bill_Number	:=	jBody['receipts'][nCont]['billnumber']
				installment	:=	jBody['receipts'][nCont]['installment']
				type		:=	jBody['receipts'][nCont]['type']
				nSaldo 		:= 	getSaldo('SE1',prefix,bill_Number,installment,type)
			Endif
			AADD(aDocuments,JsonObject():new())
			nPos := Len(aDocuments)
			aDocuments[nPos]['saldo']	:= nSaldo
			aDocuments[nPos]['prefix']	:= jBody['receipts'][nCont]['prefix']
			aDocuments[nPos]['document']:= jBody['receipts'][nCont]['billnumber']
			aDocuments[nPos]['type']	:= jBody['receipts'][nCont]['type']
			aDocuments[nPos]['discount']:= self:descFin("SE1", dDataRef, nSaldo, jBody['receipts'][nCont]['currency'])
			aDocuments[nPos]['interest']:= self:jurosFin(Max(jBody['receipts'][nCont]['currency'],1), dDataRef)	
			aDocuments[nPos]['fine']	:= 0
			aDocuments[nPos]['cuota']   := jBody['receipts'][nCont]['installment']
			aDocuments[nPos]['toReceive']:= Iif(lCheck,nSaldo - aDocuments[nPos]['discount'] + aDocuments[nPos]['interest'] + aDocuments[nPos]['fine'], 0)
			aDocuments[nPos]["success"] := lLock
		Next
		jTemp["lMessage"] := lBlock	
		jTemp["message"]  := IIF(!lBlock ,STR0028,STR0029) //"Documento Válido" - "No es posible seleccionar el título debido a que esta siendo usado en otra sesión."
		jTemp['documents']:= aDocuments
		jResponse:= jTemp
	ENDIF 

Return jResponse

/*/{Protheus.doc} financialTitlesService::totalsTitlesService
Metodo que retorna el total de los titulos mandados en el Json
@type method
@version 1 
@author luis.aboytes
@since 11/3/2021
@param jBody, Jobject, cuerpo del json
@return JsonObject, Totales
/*/
Method totalsTitlesService (jBody ) Class financialTitlesService
	Local cType As Character
	Local nTotalDoc As Numeric
	Local nCreditoTotal As Numeric
	Local nDebitoTotal As Numeric
	Local nRoundDigits As Numeric
	Local nTotal As Numeric
	Local nCont As Numeric
	Local nCont2 As Numeric
	Local aJson As Array
	Local jTemp  := JsonObject():New()
	Local jResponse := JsonObject():New()
	Local aMonedas As Array
	Local cMoneda As Character
	Local cResponse As Character

	aJson := {}
	aMonedas := {}
	nTotal := 0
	nRoundDigits := SuperGetMv("MV_CENT")
	cResponse := ""

	For nCont := 1 to LEN(jBody)
		nTotalDoc := 0
		cMoneda := ""
		cType := ""
		nCreditoTotal := 0
		nDebitoTotal := 0

		//El campo tipo de titulo no debe ser nulo o vacio
		If jBody[nCont]['type']==Nil .Or. jBody[nCont]['type']==""
			jResponse := answerErrorFormat(400,STR0018,STR0006) //STR0018 "Error en campo tipo" STR0006 "El campo tipo no puede ir vacío."
			Return jResponse
		Else
			cType := jBody[nCont]['type']
		EndIf

		//El campo total no debe ser nulo
		If jBody[nCont]['total']==Nil
			jResponse := answerErrorFormat(400,STR0019,STR0007)//STR0019 "Error en campo total" STR0007 "El campo total no puede ir vacío."
			Return jResponse
		Else
			nTotalDoc := jBody[nCont]['total']
		EndIf

		//El campo moneda no debe ser nulo ni vacio
		If jBody[nCont]['coin']==Nil .Or. jBody[nCont]['coin']==""
			jResponse := answerErrorFormat(400,STR0020,STR0008)//STR0020 "Error en campo moneda" STR0008 "El campo moneda no puede ir vacío."
			Return jResponse
		Else
			cMoneda := jBody[nCont]['coin']
		EndIf

		//Comparamos el tipo de documento con los registrados en las variables MV_CRNEG y MVRECANT
		If cType $ MV_CRNEG+","+MVRECANT
			nCreditoTotal += ROUND(nTotalDoc,nRoundDigits)
		Else
			nDebitoTotal += ROUND(nTotalDoc,nRoundDigits)
		EndIf

		//Agregamos las monedas a aMonedas que sera mostrado
		If !VAZIO(aMonedas)
			For nCont2 := 1 to LEN(aMonedas)
				If aMonedas[nCont2][nCont2] == cMoneda
					aMonedas[nCont2][2] += nCreditoTotal
					aMonedas[nCont2][3] += nDebitoTotal
				Endif

				If nCont2 == LEN(aMonedas) .And. aMonedas[nCont2][nCont2] != cMoneda
					AADD(aMonedas,{cMoneda,nCreditoTotal,nDebitoTotal})
				EndIf
			Next
		Else
			AADD(aMonedas,{cMoneda,nCreditoTotal,nDebitoTotal})
		EndIf
	Next

	For nCont := 1 to LEN(aMonedas)
		Aadd(aJson,JsonObject():new())
		nPos := Len(aJson)
		//nTotal = Debito menos Credito
		nTotal:=ROUND((aMonedas[nCont][3]-aMonedas[nCont][2]),nRoundDigits)
		aJson[nPos]["coin"] := aMonedas[nCont][1]
		aJson[nPos]["total"] := nTotal
	Next
	jTemp:set(aJson)
	jResponse["result"] := .T.
	jResponse["response"]:= jTemp

Return jResponse

/*/{Protheus.doc} financialTitlesService::financialTitlesOthersService
Metodo que regresa los titulos financieros que no forman parte del cliente mandando por pathparams
@type method
@version  1
@author luis.aboytes
@since 23/3/2021
@param jBody, Jobject, cuerpo del json
@return JsonObject, {
          			  "series": "",
          			  "actualduedt": "",
          			  "unit": "",
          			  "fine": 0,
          			  "issuedt": "",
          			  "prefix": "",
          			  "currency": 1,
         			  "custname": "",
         			  "branch": "",
        			  "customer": "",
					  "class": "",
            		  "discount": 0,
            		  "type": "",
            		  "write-offne": 0,
            		  "interest": 0,
            		  "billnumber ": "",
            		  "installment": "",
                	  "billvalue": ,
                	  "balance": ,
                	  "origin": ""
       		    	}
/*/
Method financialTitlesOthersService (jBody , jParamsRequest , jQueryRequestParams )  Class financialTitlesService
	Local oFinancialTitlesAdapter As Object
	Local oResponse As Object
	Local cFil As Character
	Local cCliente As Character
	Local cTienda As Character
	Local jTemp 
	Local oTemp
	Local nI As Numeric
	Local aArea	As array
	Local dDataRef As date

	oFinancialTitlesAdapter := financialTitlesAdapter():new('GET')

	//Indica cual pagina debemos retornar
	If !(Empty(jQueryRequestParams['page']))
		oFinancialTitlesAdapter:setPage(Val(jQueryRequestParams['page']))
	EndIf

	//Indica el tamaño de la pagina
	If !(Empty(jQueryRequestParams['pagesize']))
		oFinancialTitlesAdapter:setPageSize(Val(jQueryRequestParams['pagesize']))
	EndIf

	//Se asignan los valores del parametros jParamsRequest a variables
	If jBody:hasProperty('formHeader')
		cFil 	:= jBody['formHeader']['filial']
		cCliente := jBody['formHeader']['code']
		cTienda := jBody['formHeader']['store']
		dDataRef :=  STOD(StrTran(jBody['formHeader']['dateSelected'], "-", ""))
	Else
		cFil := If(jParamsRequest['origBranch']==Nil,'',jParamsRequest['origBranch'])
		cCliente := If(jParamsRequest['customer']==Nil,'',jParamsRequest['customer'])
		cTienda := If(jParamsRequest['unit']==Nil,'',jParamsRequest['unit'])
	EndIf

	oFinancialTitlesAdapter:financialTitlesOthersAdapter(Iif(jBody:hasProperty('form'),jBody['form'],jBody),cFil,cCliente,cTienda,"SE1")

	oResponse := JsonObject():New()
	If oFinancialTitlesAdapter:lOk
		oTemp := JsonObject():New()
   		oTemp:fromJson( oFinancialTitlesAdapter:getJSONResponse() )

		jTemp := JsonObject():New()
		jTemp := oTemp['items']

		aArea := GetArea()

	//Tratamiento para unificar en un solo campo el campo F2_SERIE2 Y F1_SERIE2 
		For nI := 1 To Len(jTemp)
			DO CASE 
				CASE VAZIO(jTemp[nI]['serie2f2']) .AND. VAZIO(jTemp[nI]['serie2f1'])
			 		jTemp[nI]['serie2']	:= ""
				CASE !VAZIO(jTemp[nI]['serie2f2']) .AND. VAZIO(jTemp[nI]['serie2f1'])
			 		jTemp[nI]['serie2']	:= jTemp[nI]['serie2f2']
				CASE VAZIO(jTemp[nI]['serie2f2']) .AND. !VAZIO(jTemp[nI]['serie2f1'])
			 		jTemp[nI]['serie2']	:= jTemp[nI]['serie2f1']
				ENDCASE
			SE1->(MsGoto(jTemp[nI]['recno']))
			jTemp[nI]['discount'] := self:descFin("SE1", dDataRef, jTemp[nI]['balance'], jTemp[nI]['currency'])
			jTemp[nI]['interest'] := self:jurosFin(Max(jTemp[nI]['currency'],1), dDataRef)
		Next
		oTemp['items'] := jTemp

		RestArea(aArea)
		
		oResponse["result"] := .T.
		oResponse["response"] := oTemp
	Else
		oResponse := answerErrorFormat(oFinancialTitlesAdapter:GetCode(), oFinancialTitlesAdapter:GetMessage(), oFinancialTitlesAdapter:GetMessage())
	EndIf

	oFinancialTitlesAdapter:DeActivate()
	oFinancialTitlesAdapter := nil

Return oResponse

/*/{Protheus.doc} financialTitles::totalsTitlesFinancialService (jBody As Jobject) As JsonObject
Metodo que retorna los totales dependiendo la moneda y cumpliemdo con las reglas de negocio
@type method
@version  1
@author luis.aboytes
@since 24/3/2021
@return JsonObject, [
						{
						    "value": 0,
						    "coin": "peso"
						},
						{
						    "value": 0,
						    "coin": "dolar"
						}
					]
/*/
Method totalsTitlesFinancialService (jBody)  Class financialTitlesService
	Local nRoundDigits As Numeric
	Local aCoins As Array
	Local nCont As Numeric
	Local nCont2 As Numeric
	Local cTipos As Character
	Local aTipos As Array
	Local nType	As Numeric
	Local cTipo As Character
	Local aJson As Array
	Local jResponse := JsonObject():New()
	Local jTemp  := JsonObject():New()

	nRoundDigits := SuperGetMv("MV_CENT")
	aCoins := {}
	aJson := {}
	cTipos := MVRECANT+"/"+MV_CRNEG

	//Se obtienen las monedas ingresadas en un array
	For nCont := 1 to LEN(jBody['received'])
		AADD(aCoins,{jBody['received'][nCont]['moneda'],jBody['received'][nCont]['quantity']})
	Next

	//Recorre los titulos enviados en el json
	For nCont := 1 to LEN(jBody['titles'])
		cTipo := jBody['titles'][nCont]['type']

		//Determina si debe sumar o restar dependiendo el tipo de documento
		If cTipo $ cTipos
			For nCont2 := 1 to LEN(aCoins)
				If jBody['titles'][nCont][aCoins[nCont2][1]] > 0
					aCoins[nCont2][2] += jBody['titles'][nCont][aCoins[nCont2][1]]
				EndIf
			Next
		Else
			For nCont2 := 1 to LEN(aCoins)
				If jBody['titles'][nCont][aCoins[nCont2][1]] > 0
					aCoins[nCont2][2] -= jBody['titles'][nCont][aCoins[nCont2][1]]
				EndIf
			Next
		EndIf
	Next

	//Llenamos el arreglo json
	For nCont := 1 to LEN(aCoins)
		Aadd(aJson,JsonObject():new())
		nPos := LEN(aJson)
		aJson[nPos]["coin"]:= aCoins[nPos][1]
		aJson[nPos]["value"]:= aCoins[nPos][2]
	Next
	jTemp:set(aJson)
	jResponse["result"] := .T.
	jResponse["response"] := jTemp

Return jResponse

/*/{Protheus.doc} financialTitlesService::financialTitlesCheckTimb (jBody As Jobject) As JsonObject
Metodo que obtiene dependiendo los parametros mandados en un json si el documento esta timbrado o no
@type method
@version  1
@author luis.aboytes
@since 14/6/2021
@return jsonobject, @return jsonobject, {
	'success': true
	'isTmb': true
}
/*/
Method financialTitlesCheckTimb (jBody )  Class financialTitlesService
	Local jResponse 	As Object
	Local jTemp			As Object
	Local cCliente 		As Character
	Local cNum			AS Character
	Local cLoja			As Character
	Local cSerie 		As Character
	Local cTipo 		As Character
	Local cFil			As Character
	Local cOrigen		As Character
	Local lTimb			As Logical
	Local nCont			As Numeric
	Local aJson			As Array

	jResponse := JsonObject():New()
	jTemp     := JsonObject():New()
	aJson	  := {}

	For nCont := 1 To Len(jbody)
		//Se asignan los valores del parametros jParamsRequest a variables
		cCliente := jBody[nCont]['client']
		cNum	 := jBody[nCont]['billnumber']
		cLoja	 := jBody[nCont]['unit']
		cSerie 	 := jBody[nCont]['prefix']
		cTipo 	 := jBody[nCont]['type']
		cFil	 := jBody[nCont]['originbranch']
		cOrigen	 := jBody[nCont]['origin']

		lTimb := financialTitlesIsTmb(cCliente,cLoja,cNum,cTipo,cSerie,cFil,cOrigen)

		Aadd(aJson,JsonObject():new())
		aJson[LEN(aJson)]["isTmb"]	:= lTimb
		aJson[LEN(aJson)]["number"]	:= cNum
		aJson[LEN(aJson)]["serie"]	:= cSerie
	Next
	jTemp:set(aJson)
	jResponse["result"] := .T.
	jResponse["response"] := jTemp

Return jResponse

/*/{Protheus.doc} financialTitlesIsTmbAdapter
Metodo que regresa true si esta timbrado y false si no esta timbrado
@type function
@version  1
@author luis.aboytes
@since 14/6/2021
@param cClient, character, cliente
@param cLoja, character, tienda
@param cNum, character, numero de documento
@param cTipo, character, tipo de documento
@param cSerie, character, serie del documento
@param cFil, character, filial del documento
@param cOrigen, character, origen del documento
/*/
Function financialTitlesIsTmb(cClient,cLoja,cNum,cTipo,cSerie,cFil,cOrigen)
	Local oFinancialTitlesAdapter := financialTitlesAdapter():new('GET') As Object
	Local lRet 		:= .F. 		As Logical
	Local cTipoDoc 	:= "NF|NDC" As Character
	Local oResTemp 	:= JsonObject():New() As Object
	Local lMvCFDI 	:= SuperGetMV("MV_CFDI33")

	Default cClient		:= ""
	Default cLoja		:= ""
	Default cNum		:= ""
	Default cTipo		:= ""
	Default cSerie		:= ""
	Default cFil	    := ""
	Default cOrigen	    := ""

	If ExistBLock('F998FLOTIT')
		cTipoDoc +=	ExecBlock('F998FLOTIT',.F.,.F.)
	EndIf

	If lMvCFDI == .F.
		Return !lRet
	ENDIF

	If AllTrim(cTipo) $ cTipoDoc
		If Alltrim(cOrigen) == "LOJA701" //	Documentos generados desde Ventas Asistidas (SIGALOJA)
			If oFinancialTitlesAdapter:checkSF2(cFil,cNum,cSerie,1,,,@oResTemp)
				lRet := !Empty(oResTemp['F2_UUID'])
			EndIf
			If !lRet
				If oFinancialTitlesAdapter:checkSF2(cFil,cNum,cSerie,6,,,@oResTemp)
					lRet := !Empty(oResTemp['F2_UUID'])
				EndIf
			EndIf
		Else
			If oFinancialTitlesAdapter:checkSF2(cFil,cNum,cSerie,2,cClient,cLoja,@oResTemp)
				lRet := !Empty(oResTemp['F2_UUID'])
			EndIf
		EndIf
		If !lRet .And. AllTrim(cTipo) $ "DGA"
			lRet := .T.
		EndIf
	Else
		If AllTrim(cTipo) $ "NCC"
			If oFinancialTitlesAdapter:checkSF1(cFil,cNum,cSerie,cClient,cLoja,@oResTemp)
				lRet := !Empty(oResTemp['F1_UUID'])
			EndIf
		Else
			lRet := .T.
		EndIf
	EndIf
Return lRet

/*/{Protheus.doc} financialTitlesService::financialTitleCheckTimb
Metodo que tiene la funcionalidad de checar el timbrado de un titulo financiero
@type method
@version  1
@author luis.aboytes
@since 22/9/2021
@param jBody, json, datos enviados por front-end
/*/
Method financialTitleCheckTimb (jBody)  Class financialTitlesService
	Local jResponse := JsonObject():New() 	As Object
	Local jTemp		:= JsonObject():New() 	As Object
	Local cCliente 	:= ""	As Character
	Local cNum		:= ""	As Character
	Local cLoja		:= ""	As Character
	Local cSerie 	:= ""	As Character
	Local cTipo 	:= ""	As Character
	Local cFil		:= ""	As Character
	Local cOrigen	:= ""	As Character
	Local lTimb		:= .F.	As Logical

	cCliente := jBody['client']
	cNum	 := jBody['billnumber']
	cLoja	 := jBody['unit']
	cSerie 	 := jBody['prefix']
	cTipo 	 := jBody['type']
	cFil	 := jBody['originbranch']
	cOrigen	 := jBody['origin']

	lTimb := financialTitlesIsTmb(cCliente,cLoja,cNum,cTipo,cSerie,cFil,cOrigen)

	jTemp["isTmb"]	:= lTimb
	jTemp["number"]	:= cNum
	jTemp["serie"]	:= cSerie

	jResponse["result"] := .T.
	jResponse["response"] := jTemp

Return jResponse

/*/{Protheus.doc} financialTitlesService::descFin
Metodo que tiene la funcionalidad de checar realizar la consulta de descuentos
@type method
@version  1
@author raul.medina
@since 03/01/2022
@param cTable, tabla, tabla de los títulos "SE1"
	   dDataRef, fecha, fecha de referencia usada para el calculo de intereses
	   nBalance, numerico, saldo del título
	   nCurrency, numerico, moneda del título
@Retorno nDesc, numerico, valor de los descuentos
/*/
Method descFin(cTable, ddataRef, nBalance, nCurrency) Class financialTitlesService
Local nDesc := 0 As numeric

Default cTable 		:= "SE1"
Default ddataRef	:= ddatabase
Default nBalance 	:= 0
Default nCurrency	:= 1

	nDesc := FaDescFin(cTable, ddataRef, nBalance, nCurrency)

Return nDesc

/*/{Protheus.doc} financialTitlesService::jurosFin
Metodo que tiene la funcionalidad de checar realizar la consulta de intereses
@type method
@version  1
@author raul.medina
@since 03/01/2022
@param nCurrency, numerico, moneda del título
	   dDataRef, fecha, fecha de referencia usada para el calculo de intereses
@Retorno nJuros, numerico, valor de los intereses
/*/
Method jurosFin(nCurrency, dDataRef) Class financialTitlesService
Local nJuros := 0 As numeric

Private dBaixa 		//Variable utilizada únicamente para el calculo de intereses, no debe ser utilizada para nada más.

Default nCurrency	:= 0
Default dDataRef	:= ddatabase

	dBaixa := dDataRef
	nJuros := fa070Juros(Max(nCurrency,1))

Return nJuros
	

/*/{Protheus.doc} getSaldo
	Función que permite recuperar el saldo actual de un título seleccionado
	@type  Function
	@author eduardo.manriquez
	@since 13/09/2022
	@version 1.0
	@param tableNick,caracter, Tabla SE1
	@param prefix,caracter, Prefijo del título
	@param bill_Number,caracter, Número de título
	@param installment,caracter, Serie del título
	@param type,caracter, Tipo de título(NF | NCC | NDC)
	@return nSaldo,númerico, Saldo actual del título.
	@example
	getSaldo(tableNick,prefix,bill_Number,installment,type)
	@see (links_or_references)
	/*/
Function getSaldo(tableNick,prefix,bill_Number,installment,type)
	
	Local queryFields As Character
	Local queryWhere As Character
	Local query As  Character
	Local nSaldo := 0

	Local cAlias := GetNextAlias()

	queryFields := "E1_NUM,E1_SERIE,E1_PARCELA, E1_TIPO,E1_NATUREZ,E1_CLIENTE,E1_LOJA,E1_VLCRUZ,E1_NOMCLI,E1_EMISSAO,E1_VENCTO,E1_VENCREA,E1_VALOR,E1_SALDO,E1_TXMOEDA,E1_VALOR,E1_MOEDA,E1_FILORIG,E1_HIST"
	queryWhere := " E1_FILIAL ='"+ xFilial("SE1") +"' "
	queryWhere += " AND E1_PREFIXO 	='"+ PadR( prefix		,GetSx3Cache("E1_PREFIXO"	,"X3_TAMANHO")) +"' "
	queryWhere += " AND E1_NUM 		='"+ PadR( bill_Number	,GetSx3Cache("E1_NUM"		,"X3_TAMANHO")) +"' "
	queryWhere += " AND E1_PARCELA 	='"+ PadR( installment	,GetSx3Cache("E1_PARCELA"	,"X3_TAMANHO")) +"' "
	queryWhere += " AND E1_TIPO		='"+ PadR( type			,GetSx3Cache("E1_TIPO"		,"X3_TAMANHO")) +"' "
	queryWhere += " AND D_E_L_E_T_ 	= ' ' "
	query := "SELECT "+ queryFields +" FROM "+ RetSqlName(tableNick) +" WHERE "+ queryWhere

	query := ChangeQuery(query)
	MPSysOpenQuery(query, cAlias)
	(cAlias)->(DbGoTop())
	While (cAlias)->(!Eof())
		nSaldo := (cAlias)->E1_SALDO
		 (cAlias)->(DbSkip())
	ENDDO

	(cAlias)->(DbCloseArea())
 
Return nSaldo
