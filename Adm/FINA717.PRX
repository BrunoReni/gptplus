#INCLUDE "FINA717.ch"
#INCLUDE "TOTVS.ch"

/*/{Protheus.doc} FINA717
	Job para transmissão de contas a pagar via api
	@type function
	@version 12.1.2210
	@author jailton.urbano
	@since 13/23/2022
/*/
Function FINA717()
	Local cLockName As Character
	cLockName := cEmpAnt + ' - FINA717'
	If F717VldUso()
		If LockByName(cLockName, .T./*lEmpresa*/, .F./*lFilial*/ ) // uma execução por vez
			F717Pagar()
			UnLockByName(cLockName, .T./*lEmpresa*/, .F./*lFilial*/ )
		EndIf
	EndIf
Return

/*/{Protheus.doc} F717VldUso
	Verifica se o sistema está preparado para uso da api de bancos
	@type function
	@version 12.1.33
	@author jailton.urbano
	@since 15/12/2022
	@return logical, true para o ambiente configurado
/*/
Function F717VldUso() As Logical
	Local lRet As Logical
	lRet := .F.
	If cPaisloc <> 'BRA' .Or. GetRPORelease() < '12.1.033'
		lRet := .F.
	Else
		lRet := SA6->(FieldPos("A6_CFGBOLP")) > 0 .And. SA6->(FieldPos("A6_CFGAPIP")) > 0;
			.And. SEA->(FieldPos("EA_BORAPI")) > 0 .And. SEA->(FieldPos("EA_APIMSG")) > 0;
			.And. SEA->(FieldPos("EA_APILOG")) > 0 .And. SEA->(FieldPos('EA_SUBCTA')) > 0;
			.And. SEA->(FieldPos('EA_ESPECIE')) > 0 .And. SEA->(FieldPos('EA_IDTRANS')) > 0;
			.And. SEE->(FieldPos('EE_IDTRANS')) > 0 .And. SEE->(FieldPos('EE_LIBEAUT')) > 0;
			.And. AliasInDic("F7A") .and. F7A->(FieldPos('F7A_FORNEC')) > 0
	EndIf
Return lRet

/*/{Protheus.doc} SchedDef
	Execucao da rotina via Schedule.
	@return  aParam
/*/
Static Function SchedDef()
	Local aParam := {}

	aParam := {"P",; //Tipo R para relatorio P para processo
		"",;     //Nome do grupo de perguntas (SX1)
		Nil,;    //cAlias (para Relatorio)
		Nil,;    //aArray (para Relatorio)
		Nil}     //Titulo (para Relatorio)
Return aParam

/*/{Protheus.doc} F717PosInd
	Posiciona os indices da tabelas que serão utilizadas no processo
	@type  Function
	@author Vitor Duca
	@since 08/03/2023
/*/
Function F717PosInd()
	DbSelectArea('SA6')
	DbSetOrder(1)   // A6_FILIAL, A6_COD, A6_AGENCIA, A6_NUMCON, R_E_C_N_O_, D_E_L_E_T_
	DbSelectArea('SEA')
	DbSetOrder(2)   //EA_FILIAL, EA_NUMBOR, EA_CART, EA_PREFIXO, EA_NUM, EA_PARCELA, EA_TIPO, EA_FORNECE, EA_LOJA, R_E_C_N_O_, D_E_L_E_T_
	DbSelectArea('SE2')
	DbSetOrder(1)   // E2_FILIAL, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO, R_E_C_N_O_, D_E_L_E_T_
	DbSelectArea('SA2')
	DbSetOrder(1)   // A1_FILIAL, A1_COD, A1_LOJA, R_E_C_N_O_, D_E_L_E_T_
	DbSelectArea('SEE')
	DbSetOrder(1)   // EE_FILIAL, EE_CODIGO, EE_AGENCIA, EE_CONTA, EE_SUBCTA, R_E_C_N_O_, D_E_L_E_T_
Return 

/*/{Protheus.doc} F717DbArea
	Posiciona as tabelas do título e gera o IDCNAB
	@type function
	@version 12.1.33
	@author renato.ito
	@since 14/04/2021
	@param cSEAFil, character, EA_FILIAL
	@param cSEANumBor, character, EA_NUMBOR
	@param cSEAPref, character, EA_PREFIXO
	@param cSEANum, character, EA_NUM
	@param cSEAParc, character, EA_PARCELA
	@param cSEATipo, character, EA_TIPO
	@return logical, True se conseguiu posicionar em todas as tabelas
/*/
Function F717DbArea(cSEAFil As Character, cSEANumBor As Character, cSEAPref As Character, cSEANum As Character, cSEAParc As Character, cSEATipo As Character, cSEAFor As Character, cSEALoja As Character) As Logical
	Local lRet As Logical
	Local cCart := 'P'

	lRet := .T.
	//EA_FILIAL, EA_NUMBOR, EA_CART, EA_PREFIXO, EA_NUM, EA_PARCELA, EA_TIPO, EA_FORNECE, EA_LOJA, R_E_C_N_O_, D_E_L_E_T_
	If lRet .And. (SEA->(DbSeek(cSEAFil + cSEANumBor + cCart + cSEAPref + cSEANum + cSEAParc + cSEATipo + cSEAFor + cSEALoja)))
		cFilAnt := SEA->EA_FILORIG
	Else
		lRet := .F.
	Endif

	// A6_FILIAL, A6_COD, A6_AGENCIA, A6_NUMCON, R_E_C_N_O_, D_E_L_E_T_
	If lRet .And. !(SA6->(DbSeek(xFilial('SA6') + SEA->EA_PORTADO + SEA->EA_AGEDEP + SEA->EA_NUMCON)))
		lRet := .F.
	Endif

	//EE_FILIAL, EE_CODIGO, EE_AGENCIA, EE_CONTA, EE_SUBCTA, R_E_C_N_O_, D_E_L_E_T_
	If (lRet .And. !(SEE->(DbSeek(xFilial('SEE') + SEA->EA_PORTADO + SEA->EA_AGEDEP + SEA->EA_NUMCON + SEA->EA_SUBCTA))))
		lRet := .F.
	Endif

	// E2_FILIAL, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO, E2_FORNECE, E2_LOJA, R_E_C_N_O_, D_E_L_E_T_
	If lRet .And. SE2->(DbSeek(xFilial('SE2') + cSEAPref + cSEANum + cSEAParc + cSEATipo + cSEAFor + cSEALoja))
		If SE2->E2_NUMBOR <> cSEANumBor
			lRet := .F.
		ElseIf Empty(SE2->E2_IDCNAB)
			RecLock('SE2', .F.)
			SE2->E2_IDCNAB := getIDCNAB2()
			SE2->(MsUnlock())
		EndIf
	Else
		lRet := .F.
	EndIf

	If lRet .And. !SA2->(DbSeek(xFilial('SA2') + SE2->E2_FORNECE + SE2->E2_LOJA))
		lRet := .F.
	EndIf

Return lRet

/*/{Protheus.doc} getIDCNAB2
	Próximo IDCNAB SE2
	@type function
	@version 12.1.33
	@author renato.ito
	@since 27/12/2022
	@return character, Próximo IDCNAB
/*/
Function getIDCNAB2() As Character
	Local cIDCNAB   As Character
	Local cQuery    As Character

	cQuery := "SELECT COUNT(E2_IDCNAB) IDCNAB FROM " + RetSQLName('SE2') + " SE2 "
	cQuery += " WHERE "
	cQuery += " SE2.D_E_L_E_T_ = ' ' "
	cQuery += " AND SE2.E2_IDCNAB = '"
	cQuery := changeQuery(cQuery)
	While .T.
		cIDCNAB := GetSxENum("SE2", "E2_IDCNAB", "E2_IDCNAB" + cEmpAnt, 13)
		ConfirmSX8()
		If !MpSysExecScalar(cQuery + cIDCNAB + "'", 'IDCNAB') > 0
			Exit
		EndIf
	EndDo
Return cIDCNAB

/*/{Protheus.doc} F717QrySEA
	query para listar os títulos com determinados status
	@type function
	@author jailton.urbano
	@since 14/12/2022
	@param cStatus, character, status separados com |
	@return character, query
/*/
Static Function F717QrySEA(cStatus as Character, aRecnos As Array) As Character
	Local cQuery As Character
	Local nX	As Numeric
	Local nLenRecno As Numeric

	Default aRecnos := {}

	cQuery := ""
	nX := 0
	nLenRecno := Len(aRecnos)

	cQuery := " SELECT SEA.EA_FILIAL, SEA.EA_PORTADO, SEA.EA_AGEDEP, SEA.EA_NUMCON,"
	cQuery += " SEA.EA_NUMBOR, SEA.EA_FILORIG, SEA.EA_PREFIXO, SEA.EA_NUM, SEA.EA_PARCELA, SEA.EA_TIPO, SEA.EA_CART, "
	cQuery += " SEA.EA_MODELO, SEA.EA_TIPOPAG, SEA.EA_IDTRANS, SEA.EA_FORNECE, SEA.EA_LOJA "
	cQuery += " FROM " + RetSqlName("SEA") + " SEA "
	cQuery += " WHERE "
	cQuery += " SEA.D_E_L_E_T_ = ' ' "
	cQuery += " AND SEA.EA_CART = 'P' "
	cQuery += " AND SEA.EA_BORAPI = 'S' "
	cQuery += " AND SEA.EA_TRANSF IN " + FormatIn(cStatus, "|")

	If ExistBlock("NGFAPIQRY")
		cQuery += " AND " + ExecBlock("NGFAPIQRY", .F., .F.)
  	Endif
	
	If nLenRecno > 0
		cQuery += " AND SEA.R_E_C_N_O_ IN " + FormatIn(ArrTokStr(aRecnos, "|"), "|")
	Endif

	cQuery += " ORDER BY SEA.EA_FILIAL, SEA.EA_PORTADO, SEA.EA_AGEDEP, SEA.EA_NUMCON, SEA.EA_NUMBOR "
Return ChangeQuery(cQuery)

/*/{Protheus.doc} F717Pagar
	Transmite os boletos a pagar
	@type function
	@version 12.2210
	@author jailton.urbano
	@since 13/12/2022
/*/
Function F717Pagar(aRecnos As Array, lAutomato As Logical, jRespMock As Json)
	Local cBolAlias  as Character
	Local cBorFil    as Character
	Local cBorBco    as Character
	Local cBorAge    as Character
	Local cBorCnt    as Character
	Local cBorSub    as Character
	Local cApiMsg    as Character
	Local cFebrabran as Character
	Local oLayout    as Object
	Local oApiMsg    as Object
	Local oBills     as Object
	Local oApiLog    as Object
	Local lRet       as Logical
	Local nIdRegApi  as Numeric
	Local oBlock     as Object

	Default aRecnos := {}
	Default lAutomato := .F.
	Default jRespMock := JsonObject():new()

	cBorFil     := ""
	cBorBco     := ""
	cBorAge     := ""
	cBorCnt     := ""
	cBorSub     := ""

	cFebrabran  := ""

	//Posiciona as tabelas nos indices corretos
	F717PosInd()
	
	oBills  := &("totvs.protheus.backoffice.ngf.bills.payments.payments():new()")
	oBills:setAutomato(lAutomato, jRespMock) //Configura a classe para automação caso necessario

	oLayout     := JsonObject():new()
	oApiLog     := JsonObject():new()
	oApiMsg     := JsonObject():new()
	//busca os borderos
	cBolAlias := MpSysOpenQuery(F717QrySEA(" |F|V", aRecnos))
	(cBolAlias)->(DbGoTop())
	While (cBolAlias)->(!EOF())
		oBlock := ErrorBlock( { |e| F717Err(e, 'registroPagar', @cApiMsg, @lRet) } )
		// Se der erro limpa as variáveis para gerar log de erro do próximo título
		If !lRet
			cBorFil := ""
			cBorBco := ""
			cBorAge := ""
			cBorCnt := ""
			cBorSub := ""
		EndIf
		lRet        := .T.
		nIdRegApi   := 0
		cApiMsg     := ""
		cBody       := ""

		Begin Sequence

			// Posiciona as tabelas
			If F717DbArea((cBolAlias)->EA_FILIAL, (cBolAlias)->EA_NUMBOR, (cBolAlias)->EA_PREFIXO, (cBolAlias)->EA_NUM, (cBolAlias)->EA_PARCELA, (cBolAlias)->EA_TIPO, (cBolAlias)->EA_FORNECE, (cBolAlias)->EA_LOJA)
				// verifica se mudou o banco, senão mudou a configuração continua a mesma
				If cBorFil <> SEA->EA_FILIAL .Or. cBorBco <> SEA->EA_PORTADO .Or. cBorAge <> SEA->EA_AGEDEP .Or. cBorCnt <> SEA->EA_NUMCON .Or. cBorSub <> SEA->EA_SUBCTA
					cBorFil := SEA->EA_FILIAL
					cBorBco := SEA->EA_PORTADO
					cBorAge := SEA->EA_AGEDEP
					cBorCnt := SEA->EA_NUMCON
					cBorSub := SEA->EA_SUBCTA

					cFebrabran := SA6->A6_BCOOFI

					If SA6->A6_CFGAPIP $ '1|3'
						If !Empty(oLayout:FromJson(SA6->A6_CFGBOLP))
							lRet     := .F.
							cApiMsg  := STR0001 //"Problema na configuração do layout na conta (A6_CFGBOLP)."
						Else
							// configura as credenciais do banco
							If oLayout:hasProperty("credentials") .And. !oBills:setCredentials(oLayout["credentials"]:toJSON(), cFebrabran)
								lRet := .F.
								cApiMsg := STR0002 + SA6->A6_FILIAL +"|"+ SA6->A6_COD +"|"+ SA6->A6_AGENCIA +"|"+ SA6->A6_NUMCON //"Não foi possíver obter as credenciais do layout. "
								FwLogMsg('ERROR',, "FINA717", "FINA717", "", "CREDENTIALS", cApiMsg )
							EndIf
						EndIf
						If oLayout:hasProperty("beneficiarioFilial")
							oLayout["layout"]["filial"] := oLayout["beneficiarioFilial"]
						EndIf
					Else
						lRet := .F.
						cApiMsg := STR0003 + SA6->A6_FILIAL +"|"+ SA6->A6_COD +"|"+ SA6->A6_AGENCIA +"|"+ SA6->A6_NUMCON //"Conta não está configurada para envio de pagamentos. "
						(cBolAlias)->(DbSkip())
						FwLogMsg("ERROR",, "FINA717", "FINA717", "", "A6_CFGAPIP ", cApiMsg)
					EndIf
				EndIf
			Else
				lRet := .F.
				cApiMsg := STR0004 + (cBolAlias)->EA_FILIAL +"|"+ (cBolAlias)->EA_NUMBOR +"|"+ (cBolAlias)->EA_PREFIXO +"|"+ (cBolAlias)->EA_NUM +"|"+ (cBolAlias)->EA_PARCELA +"|"+ (cBolAlias)->EA_TIPO +"|"+ (cBolAlias)->EA_FORNECE +"|"+ (cBolAlias)->EA_LOJA //"Não foi possível posicionar as tabelas para o título:"
				(cBolAlias)->(DbSkip())
				FwLogMsg("ERROR",, "FINA717", "FINA717", "", "SEEK_TABLES", cApiMsg)
			EndIf

			//Só deve transmitir titulos com o EA_TRANSF = F ou vazio
			If lRet .and. SEA->EA_TRANSF <> "V"
				// pega o id de transmissão atual e armazena o próximo
				nIdRegApi := SEE->EE_IDTRANS
				Reclock("SEE",.F.)
					SEE->EE_IDTRANS := nIdRegApi + 1
				SEE->(MSunlock())
				RecLock("SEA", .F.)
					SEA->EA_IDTRANS  := nIdRegApi
				SEA->(MsUnlock())

				// todas as tabelas precisam estar posicionadas, a classe não pode alterar as tabelas
				cBody := oBills:getBody(oLayout["layout"]:toJSON())
				If Empty(cBody)
					lRet := .F.
					cApiMsg := oBills:getLog()
				EndIf
			EndIf

			If lRet
				//Verifica se o titulo em questão esta aguardando a consulta para concluir a transmissão
				If SEA->EA_TRANSF == "V"
					lRet := oBills:consult()
				Else
					lRet := oBills:send(cBody)
				Endif	
				cApiMsg := oBills:getLog()
			EndIf

			oApiLog["date"]    := FWTimeStamp(2, DATE(), TIME())
			oApiLog["message"] := cApiMsg

			oApiMsg["bank"]    := cFebrabran
			oApiMsg["log"]     := oBills:getResult() // {"request", "response"}

			// Atualiza a SEA
			RecLock('SEA', .F.)
				SEA->EA_APIMSG  := oApiMsg:ToJSON()
				SEA->EA_TRANSF  := IIF(lRet, oBills:getStatus(), "F")
				SEA->EA_APILOG  := oApiLog:ToJSON()
			SEA->(MsUnlock())

			RECOVER

				oApiLog["date"]    := FWTimeStamp(2, DATE(), TIME())
				oApiLog["message"] := cApiMsg

				oApiMsg["bank"]    := cFebrabran
				oApiMsg["log"]     := oBills:getResult() // {"request", "response"}

				// Atualiza a SEA
				RecLock('SEA', .F.)
					SEA->EA_APIMSG  := oApiMsg:ToJSON()
					If SEA->EA_TRANSF <> "V"
						SEA->EA_TRANSF  := "F"
					Endif	
					SEA->EA_APILOG  := oApiLog:ToJSON()
				SEA->(MsUnlock())

		End Sequence
		ErrorBlock(oBlock)
		(cBolAlias)->(DbSkip())
	EndDo

	(cBolAlias)->(DbCloseArea())
	FreeObj(oBills)
	FreeObj(oApiLog)
	FreeObj(oApiMsg)
Return

/*/{Protheus.doc} F717LayErr
	Carrega o erro da macroexecução do layout
	@type function
	@author renato.ito
	@since 18/05/2021
	@param e   , Object   , objeto do erro
	@param cErr, Character, mensagem de erro
/*/
Static Function F717Err(e As Object, cErr As Character, cMsg as Character, lRet as Logical)
	cMsg := (e:errorStack + ' - ' + cErr)
	FwLogMsg("ERROR",, "FINA717", "FINA717", "", e:description , e:errorStack )
	lRet := .F.
	BREAK
Return
