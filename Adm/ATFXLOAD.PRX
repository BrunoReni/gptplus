#Include "PROTHEUS.CH"
#Include "ATFXLOAD.CH"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ ATFLOAD  ºAutor  ³ARNALDO RAYMUNDO JR º Data ³  15/01/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Função de carregamento das configuracoes módulo ATF        º±±
±±º          ³ executada na primeira vez que o usuário entra no módulo    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ATFLoadDef()
Local lRet	:= .T.

MsgRun(OemToAnsi(STR0001),OemToAnsi(STR0002),{|| ATFXTabela() }) // "Carregando as configurações do Módulo Ativo Fixo" ## "Aguarde"

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ATFXTabela ºAutor  ³Alvaro Camillo Neto º Data ³  01/12/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Realiza o carregamento das tabelas auxiliares CTB           º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ATFXTabela()
Local aArea := GetArea()

// Ajuste pontual do SX6 em função de problemas na ferramenta ATUSX
// Deverá ser removido deste ponto após normalizacao da ferramenta
ATFAtuSX6()

//---------------------------------------------------------------------------------------------
// A carga da SN0 foi migrada para o RUP_ATF por questao de performance na abertura do módulo.
// Caso a tabela nao tenha todos os dados, a funcao é chamada diretamente.
//---------------------------------------------------------------------------------------------
If ChkFile("SN0")
	SN0->(DBSetOrder(1)) //N0_FILIAL+N0_TABELA+N0_CHAVE
	// É verificado a tabela 16, porque é o ultimo elemento do array e por conta de performance.
	// Se acrescentado algo nessa função, necessário remover o 16 
	// ou mudar a condição para executa-lo.
	If FindFunction("ATFLOADSN0") .and. !SN0->(MSSeek(XFilial("SN0")+"16"))  
		ATFLOADSN0()
	EndIf
EndIf

//chamada reprocessamento do desmembra ativo.
If AliasIndic("SNU")
    AFLJb103()
EndIf

RestArea(aArea)
Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ATFAtuSX6 ³ Autor ³ --------------------- ³ Data ³ 23/05/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao de processamento da gravacao do SX6                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ ATUALIZACAO SIGAATF                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function ATFAtuSX6()
//  X6_FIL   X6_VAR     X6_TIPO    X6_DESCRIC X6_DSCSPA  X6_DSCENG  X6_DESC1 X6_DSCSPA1 X6_DSCENG1
//  X6_DESC2 X6_DSCSPA2 X6_DSCENG2 X6_CONTEUD X6_CONTSPA X6_CONTENG X6_PROPRI

Local aSX6   	:= {}
Local aEstrut	:= {}
Local i      	:= 0
Local j      	:= 0
Local lSX6	 	:= .F.
Local cAlias 	:= ''

If (cPaisLoc == "BRA")
	aEstrut:= { "X6_FIL","X6_VAR","X6_TIPO",;
	"X6_DESCRIC","X6_DSCSPA","X6_DSCENG",;
	"X6_DESC1","X6_DSCSPA1","X6_DSCENG1",;
	"X6_DESC2","X6_DSCSPA2","X6_DSCENG2",;
	"X6_CONTEUD","X6_CONTSPA","X6_CONTENG","X6_PROPRI"}
Else
	aEstrut:= { "X6_FIL","X6_VAR","X6_TIPO",;
	"X6_DESCRIC","X6_DSCSPA","X6_DSCENG",;
	"X6_DESC1","X6_DSCSPA1","X6_DSCENG1",;
	"X6_DESC2","X6_DSCSPA2","X6_DSCENG2",;
	"X6_CONTEUD","X6_CONTSPA","X6_CONTENG","X6_PROPRI"}
EndIf

// Realiza o tratamento dos parametros conforme configuracao do ambiente
ATFAtuParam( @aSX6 )

dbSelectArea("SX6")
dbSetOrder(1)
For i:= 1 To Len(aSX6)
	If !Empty(aSX6[i][2])
		If !MsSeek(aSX6[i,1]+aSX6[i,2])
			lSX6	:= .T.
			If !(aSX6[i,2]$cAlias)
				cAlias += aSX6[i,2]+"/"
			EndIf
			RecLock("SX6",.T.)
			For j:=1 To Len(aSX6[i])
				If !Empty(FieldName(FieldPos(aEstrut[j])))
					FieldPut(FieldPos(aEstrut[j]),aSX6[i,j])
				EndIf
			Next j
			
			dbCommit()
			MsUnLock()
		EndIf
	EndIf
Next i   

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ATFAtuParam³ Autor ³ Totvs                ³ Data ³ 16/07/10 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao para a criacao dos parametros de calculo da deprec. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAATF                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function ATFAtuParam( aSX6 )
Local aAreaSX6	:= SX6->( GetArea() )
Local aSM0Atv	:= {}
Local aDataBkp	:= {}
Local cData		:= "19800101"
Local nInc		:= 0
Local nX		:= 0

//---------------------------------------------------------------------------------------
// Caso nao encontre o MV_ULTDEPR com o compartilhamento da filial, recria os parâmetros
//---------------------------------------------------------------------------------------
DBSelectArea("SX6")
SX6->(DBSetOrder(1)) //X6_FIL+X6_VAR
If !SX6->(MSSeek(XFilial("SN1") + "MV_ULTDEPR"))

	//--------------------------------------------------------------
	// Exclui o(s) MV_ULTDEPR com compartilhamento diferente da SN1
	//--------------------------------------------------------------
	DbSelectArea("SX6")
	SX6->(DbSetOrder(1))
	SX6->(DbGoTop())

	While SX6->(!Eof())

		If AllTrim( SX6->X6_VAR ) == "MV_ULTDEPR"
		

		   if ( FwRetIdiom()=="es" )
			  cData := AllTrim( SX6->X6_CONTSPA )
		   else
			  if ( FwRetIdiom()=="en" )
				  cData := AllTrim( SX6->X6_CONTENG )
			  else
				  cData := AllTrim( SX6->X6_CONTEUD )
			  endif
		   endif 

			AAdd(aDataBkp,{SX6->X6_FIL,cData})

			RecLock("SX6")
			SX6->(DBDelete())
			SX6->(MSUnLock())

		EndIf

	SX6->(DbSkip())
	EndDo

	//-----------------------------------------------------
	// Obtem as filiais conforme o compartilhamento da SN1
	//-----------------------------------------------------
	aSM0Atv := AdmAbreSM0()

	//---------------------------------------------------------
	// Cria o(s) MV_ULTDEPR conforme o compartilhamento da SN1
	//---------------------------------------------------------
	For nInc := 1 To Len( aSM0Atv )

		//--------------------------------------------------------------------------------------------------------------
		// Mantem a data do parametro anterior caso alterado de Exclusivo para Parcialmente Compartilhado ou vice-versa
		// Ex: D MG 01 -> D MG ou D MG -> D MG 01
		//--------------------------------------------------------------------------------------------------------------
		For nX := 1 To Len(aDataBkp)

			If AllTrim(aSM0Atv[nInc]) $ aDataBkp[nX,1] .Or. AllTrim(aDataBkp[nX,1]) $ aSM0Atv[nInc]
				cData := aDataBkp[nX,2]
				Exit
			EndIf

		Next nX

		//---------------------------------------
		// Alimenta array utilizado para geracao
		//---------------------------------------
		AAdd( aSX6, {	aSM0Atv[nInc], "MV_ULTDEPR", "D",;
						"Data da ultimo calculo da depreciacao de ativos ",;
						"Fecha del ultimo calculo de la depreciacion de ",;
						"Fixed assets depreciation last calculation ",;
						"imobilizados. ",;
						"activos fijos. ",;
						"date. ",;
						"",;
						"",;
						"",;
						cData, cData, cData, "S" } )
	Next nInc

EndIf

RestArea(aAreaSX6)

//--------------------
// Limpeza dos arrays
//--------------------
ASize(aAreaSX6,0)
aAreaSX6 := Nil

ASize(aSM0Atv,0)
aSM0Atv := Nil

ASize(aDataBkp,0)
aDataBkp := Nil

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AdmAbreSM0³ Autor ³ Orizio                ³ Data ³ 22/01/10 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna um array com as informacoes das filias das empresas ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function AdmAbreSM0()
Local aRetSM0	:= FWLoadSM0()
Local aFilAtv	:= {}
Local nX		:= 0
Local cFilAux	:= ""
Local cFilConv	:= ""

For nX := 1 To Len(aRetSM0)

	If aRetSM0[nX][1] == cEmpAnt

		cFilConv := XFilial("SN1",aRetSM0[nX][2])

		If cFilConv <> cFilAux

			Aadd(aFilAtv, cFilConv)

			cFilAux := cFilConv

		EndIf

	EndIf

Next nX

Return aFilAtv

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ ATFLoad    ³ Autor ³ Marcelo Akama         ³ Data ³ 28/07/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Validacao dos parametros na entrada do modulo                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Gen‚rico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ATFLoad()

Local cCalcDep	:= GetNewPar("MV_CALCDEP",'0')
Local cTipDepr	:= GetMV("MV_TIPDEPR",.F.,"0")
Local lOk		:= .F.
Local cHelp

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Disponibilizado tipo 9 para exercicio completo e proximo trimestre³
//³Localizacao Argentina                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
lOk:=(cCalcDep=='0' .And. cTipDepr$"0|1|2") .Or. (cCalcDep=='1' .And. cTipDepr$"3|4|5")  .or. cTipDepr == "9"

If !lOk
	Help("  ",1,"ATFWRTDEPR")
	cHelp := Ap5GetHelp("ATFWRTDEPR")
	cHelp := replace(cHelp,CRLF,' ')
	Final(cHelp)
EndIf

// Verifica se as rotinas do novo kernel do ativo estão presentes
If lOk
	//Verifica se o Ativo está atualizado
	lOk := ATFXKERNEL()
EndIf

If lOk
	//"Carregando as configurações do Módulo Ativo Fixo"
	ATFLoadDef()
EndIf

Return lOk


/*/{Protheus.doc} AFLJb103
    @description Load criado para reprocessamento do desmembra ativo caso 
    exista pendencias a serem processadas
    @type Function
    @author Felipe Mayer
    @since 23/09/2022
/*/
Function AFLJb103()

Local nX   		 := 0
Local nY   		 := 0
Local nPos 		 := 0
Local aHeader103 := {}
Local aCols103   := {}
Local aDocPend   := {}
Local aDadosAux  := {}
Local cQuery     := ''
Local cAliasSQL  := ''
Local cFilterD1  := ''
Local lCriaCols  := .T.

Private cNFiscal := ''
Private cSerie 	 := ''
Private cA100For := ''
Private cLoja 	 := ''
Private cTipo 	 := ''

    Conout('Entrou no Lock via ATFXLOAD')
    cAliasSQL := GetNextAlias()

    cQuery := " SELECT NU_FILIAL,NU_DOC,NU_SERIE,NU_FORNECE,NU_LOJA,NU_TIPO,NU_NPROC,NU_QTPROC "
    cQuery += " FROM "+RetSqlName('SNU')+" SNU "
    cQuery += " WHERE SNU.D_E_L_E_T_=' ' "
    cQuery += " AND SNU.NU_QTPROC > 0 "
    cQuery := ChangeQuery(cQuery)

	MPSysOpenQuery(cQuery,cAliasSQL)

    While (cAliasSQL)->(!EoF())
        nY++
        Aadd(aDadosAux, {;
            (cAliasSQL)->NU_FILIAL,;
            (cAliasSQL)->NU_DOC,;
            (cAliasSQL)->NU_SERIE,;
            (cAliasSQL)->NU_FORNECE,;
            (cAliasSQL)->NU_LOJA,;
            (cAliasSQL)->NU_TIPO,;
            (cAliasSQL)->NU_NPROC,;
            (cAliasSQL)->NU_QTPROC;
        })
        
        If Len(aDocPend) > 0
            nPos := aScan(aDocPend, {|x| AllTrim(x[2]) == Alltrim((cAliasSQL)->NU_DOC)})
        EndIf

        If nPos == 0
            Aadd(aDocPend, {aDadosAux[nY,1],aDadosAux[nY,2],aDadosAux[nY,3],aDadosAux[nY,4],aDadosAux[nY,5],aDadosAux[nY,6]})
        EndIf

        (cAliasSQL)->(dbSkip())
    EndDo

    (cAliasSQL)->(dbCloseArea())

If Len(aDadosAux) == 0 
    UnLockByName('JOBMULTATF',.T.,.T.,.T.)
    
EndIf

If LockByName("JOBMULTATF", .T., .T.,.T.)

    If Len(aDocPend) > 0 
    
        DbSelectArea('SD1')
        SD1->(DbSetOrder(1))
        
        DbSelectArea("SX3")
        SX3->(dbSetOrder(1))
        SX3->(dbSeek('SD1'))

        While SX3->(!EoF()) .And. SX3->X3_ARQUIVO == 'SD1'
            If X3USO(SX3->X3_USADO) .And. Alltrim(SX3->X3_CONTEXT) != 'V'
                aAdd(aHeader103,{;
                    AllTrim(X3Titulo()),; 		// 01 - Titulo
                    SX3->X3_CAMPO	,;			// 02 - Campo
                    SX3->X3_Picture	,;			// 03 - Picture
                    SX3->X3_TAMANHO	,;			// 04 - Tamanho
                    SX3->X3_DECIMAL	,;			// 05 - Decimal
                    SX3->X3_Valid  	,;			// 06 - Valid
                    SX3->X3_USADO  	,;			// 07 - Usado
                    SX3->X3_TIPO   	,;			// 08 - Tipo
                    SX3->X3_F3		,;			// 09 - F3
                    SX3->X3_CONTEXT ,;       	// 10 - Contexto
                    SX3->X3_CBOX	,; 	  		// 11 - ComboBox
                    SX3->X3_RELACAO  ;			// 12 - Relacao
                })
            
                For nX := 1 To Len(aDocPend)
                    If lCriaCols
                        Aadd(aCols103, {})
                        Aadd(aDocPend[nX], {})
                    EndIf

                    cFilterD1 := AvKey(aDocPend[nX,1],'D1_FILIAL');
                        +AvKey(aDocPend[nX,2],'D1_DOC');
                        +AvKey(aDocPend[nX,3],'D1_SERIE');
                        +AvKey(aDocPend[nX,4],'D1_FORNECE');
                        +AvKey(aDocPend[nX,5],'D1_LOJA')

                    nY := 0
                    If SD1->(MsSeek(cFilterD1))
                        While SD1->(!EoF()) .And. SD1->(D1_FILIAL+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA) == cFilterD1
                            nY++
                            If lCriaCols
                                Aadd(aCols103[nX], {})
                            EndIf
                            
                            Aadd(aCols103[nX,nY], &('SD1->'+SX3->X3_CAMPO))
                            SD1->(dbSkip())
                        EndDo
                    EndIf
                Next nX

                lCriaCols := .F.
            EndIf

            SX3->(dbSkip())
        EndDo

        For nX := 1 To Len(aDocPend)
            aDocPend[nX,7] := aClone(aCols103[nX])

            cNFiscal := PadR(aDocPend[nX,2],TamSx3("D1_DOC")[1])
            cSerie 	 := PadR(aDocPend[nX,3],TamSx3("D1_SERIE")[1])
            cA100For := PadR(aDocPend[nX,4],TamSx3("D1_FORNECE")[1])
            cLoja 	 := PadR(aDocPend[nX,5],TamSx3("D1_LOJA")[1])
            cTipo 	 := PadR(aDocPend[nX,6],TamSx3("D1_TIPO")[1])

            cAliasSQL := GetNextAlias()

            cQuery := " SELECT DISTINCT "
            cQuery += " 	N1_PRODUTO PRD, "
            cQuery += " 	COUNT(N1_CBASE) QTDN1, "
            cQuery += " 	D1_QUANT QTDD1, "
            cQuery += " 	(D1_QUANT-COUNT(N1_CBASE)) QTDIF "
            cQuery += " FROM " + RetSQLName("SN1") + " SN1 "
            cQuery += " INNER JOIN " + RetSQLName("SD1") + " SD1 "
            cQuery += " 	ON D1_FILIAL=N1_FILIAL "
            cQuery += " 	AND D1_DOC=N1_NFISCAL "
            cQuery += " 	AND D1_SERIE=N1_NSERIE "
            cQuery += " 	AND D1_FORNECE=N1_FORNEC "
            cQuery += " 	AND D1_LOJA=N1_LOJA "
            cQuery += " 	AND D1_COD=N1_PRODUTO "
            cQuery += " 	AND D1_TIPO='"+cTipo+"' "
            cQuery += " 	AND SD1.D_E_L_E_T_=' ' "
            cQuery += " WHERE SN1.D_E_L_E_T_=' ' "
            cQuery += " 	AND N1_FILIAL='"+xFilial('SN1')+"' "
            cQuery += " 	AND N1_NFISCAL='"+cNFiscal+"' "
            cQuery += " 	AND N1_NSERIE='"+cSerie+"' "
            cQuery += " 	AND N1_FORNEC='"+cA100For+"' "
            cQuery += " 	AND N1_LOJA='"+cLoja+"' "
            cQuery += " GROUP BY N1_PRODUTO,D1_QUANT "
            cQuery := ChangeQuery(cQuery)

            MPSysOpenQuery(cQuery,cAliasSQL)
            
            While (cAliasSQL)->(!EoF())
                For nY := 1 To Len(aDocPend[nX,7])
                    If aScan(aDocPend[nX,7,nY],{|x|AllTrim(x) == AllTrim((cAliasSQL)->PRD)}) > 0
                        nPos := aScan(aHeader103,{|x|AllTrim(Upper(x[2])) == "D1_QUANT"})
                        aDocPend[nX,7,nY,nPos] := (cAliasSQL)->QTDIF
                    EndIf
                Next nY

                (cAliasSQL)->(dbSkip())
            EndDo

            (cAliasSQL)->(dbCloseArea())

            cQryDelete := " DELETE FROM " + RetSqlName('SNU') + " "
            cQryDelete += " WHERE NU_FILIAL= '"+xFilial('SNU')+"' "
            cQryDelete += " AND NU_DOC= '"+cNFiscal+"' "
            cQryDelete += " AND NU_SERIE= '"+cSerie+"' "
            cQryDelete += " AND NU_FORNECE= '"+cA100For+"' "
            cQryDelete += " AND NU_LOJA= '"+cLoja+"' "
            cQryDelete += " AND NU_TIPO= '"+cTipo+"' "

            TCSqlExec(cQryDelete)

            DbSelectArea('SF1')
            SF1->(DbSetOrder(1))

            UnLockByName('JOBMULTATF',.T.,.T.,.T.)
            JobMultATF(aHeader103,aDocPend[nX,7],.T.)

            SF1->(DbCloseArea())
        Next nX
    Else
        UnLockByName('JOBMULTATF',.T.,.T.,.T.)
    EndIf

EndIf

Return
