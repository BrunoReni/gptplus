#Include 'Protheus.ch'

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSGlosaValid

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
class PLSGlosaValid 

    public data oJson as object
    public data oRest as object

    public method New(oRest) constructor
    // // @Get("/api/healthcare/hat/:apiVersion/recurso")
    public method get()
    public method protocolo()
    public method guia()
    public method evento()
    public method retorno()
    public method retEvento()
    public method valida()

endclass

method New(oRest) class PLSGlosaValid 
    ::oRest := oRest
    ::oJson := jsonObject():new()

	if !empty(::oRest:formNumber)
        ::oRest:formNumber := strzero(val(::oRest:formNumber),8)
    endif

    if !empty(::oRest:protocol)
        ::oRest:protocol := strzero(val(::oRest:protocol),8)
    endif
return self

//-------------------------------------------------------------------
/*/{Protheus.doc} get

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
method get() class PLSGlosaValid 
local cJson 	as Character

if ::valida()
	if empty(::oRest:formNumber)
		::protocolo()
	else
		::guia()
	endif
endif

cJson := FWJsonSerialize(::oJson)
::oRest:setResponse(cJson)

return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} protocolo

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
method protocolo() class PLSGlosaValid
local lOk := .f.
aRet := callPegExi(::oRest:protocol, ::oRest:healthProviderCode, .t., "2")
if len(aRet[1]) > 0 
	lOk := aRet[2] <> 0
	//0- Erro
	//1- PEG Glosada 
	//2- Tem glosa mas não é no nivel da PEG
	::retorno(!lOk,aRet[1][2],iif(aRet[2]==2,"2","1"),iif(lOk,aRet[3],""),iif(lOk,aRet[4],0))
else
	::retorno(.t., "Internal Error" )
endif

return 

//-------------------------------------------------------------------
/*/{Protheus.doc} guia

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
method guia() class PLSGlosaValid
local cAlias	as Character
local cSql 		as Character
local lOk 		:= .f.

aRet := callGuiExi(::oRest:protocol, ::oRest:formNumber, .t., "2",.f.)	

//3- Glosa na guia
//4- erro
//5- Glosa nos itens
if aRet[2] <> 5
	if len(aRet[1]) > 0 
		lOk := aRet[2] <> 4
		::retorno(!lOk,aRet[1][2],"2",iif(lOk,aRet[3],""),iif(lOk,aRet[5],0))		
	else
		::retorno(.t.,"Internal Error")
	endif
else
	cSql := " SELECT BCI_CODOPE, BCI_CODLDP, BCI_TIPGUI FROM " + retsqlname("BCI") + " BCI " 
	cSql += " WHERE BCI_FILIAL 	=  '" + xfilial("BCI") + "' " 
	cSql += " AND BCI_CODPEG = '" + ::oRest:protocol + "' "
	cSql += " AND D_E_L_E_T_ = ' ' "
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSql),"TrbP",.F.,.T.)

	cAlias := iif(TrbP->BCI_TIPGUI=="05","BE4","BD5")

	cSql := " SELECT "+cAlias+"_VLRGLO VLRGLO, "+cAlias+"_CODGLO CODGLO FROM " + retsqlname(cAlias) + " " + cAlias 
	cSql += " WHERE "+cAlias+"_FILIAL 	=  '" + xfilial(cAlias) + "' " 
	cSql += " AND "+cAlias+"_CODOPE = '" + TrbP->BCI_CODOPE + "' "
	cSql += " AND "+cAlias+"_CODLDP = '" + TrbP->BCI_CODLDP + "' "
	cSql += " AND "+cAlias+"_CODPEG = '" + ::oRest:protocol + "' "
	cSql += " AND "+cAlias+"_NUMERO = '" + ::oRest:formNumber + "' "
	cSql += " AND "+cAlias+"_FASE = '4' "
	cSql += " AND D_E_L_E_T_ = ' ' "
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSql),"TrbG",.F.,.T.)

	if !TrbG->(eof())	
		::evento(TrbP->BCI_CODOPE,TrbP->BCI_CODLDP)		
	else
		::retorno(.t.,"Guia " + ::oRest:protocol + "-" + ::oRest:formNumber + " não encontrada ou ainda não foi paga.")
	endif

	TrbG->(dbclosearea())
	TrbP->(dbclosearea())
endif

return 

//-------------------------------------------------------------------
/*/{Protheus.doc} retorno

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
method retorno(cHasError,cMsg,cNivel,cDesc,nValue) class PLSGlosaValid
default cNivel 	:= ""
default cDesc 	:= ""
default nValue 	:= 0
::oJson['hasError'] 	:= cHasError
::oJson['nivel'] 		:= cNivel
::oJson['message'] 		:= cMsg
::oJson['description'] 	:= cDesc
::oJson['value'] 		:= nValue
::oJson['items'] 		:= {}
return

//-------------------------------------------------------------------
/*/{Protheus.doc} evento

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
method evento(cCodOpe,cCodLdp) class PLSGlosaValid
local cSql 	as Character
local nEv 	:= 1

::retorno(.f., "", "3" )

cSql := " SELECT BD6_SEQUEN, BD6_CODPAD, BD6_CODPRO, BD6_DESPRO, BD6_VLRGLO, BD6_VLRAPR, BD6_CODOPE, BD6_CODLDP, BD6_CODPEG, BD6_NUMERO FROM " + retsqlname("BD6") + " BD6 " 
cSql += " WHERE BD6_FILIAL 	=  '" + xfilial("BD6") + "' " 
cSql += " AND BD6_CODOPE = '" + cCodOpe + "' "
cSql += " AND BD6_CODLDP = '" + cCodLdp + "' "
cSql += " AND BD6_CODPEG = '" + ::oRest:protocol + "' "
cSql += " AND BD6_NUMERO = '" + ::oRest:formNumber + "' "
cSql += " AND BD6_VLRGLO > 0 "
cSql += " AND BD6.D_E_L_E_T_ = ' ' "
dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSql),"TrbE",.F.,.T.)

if TrbE->(eof())
	::retorno(.t., "Guia " + ::oRest:protocol + "-" + ::oRest:formNumber + " sem glosa.")
else
	::oJson['items']			:= {}	
endif

while !TrbE->(eof())
	cSql := " SELECT BDX_CODGLO, BDX_DESGLO FROM " + retsqlname("BDX") + " BDX " 
	cSql += " WHERE BDX_FILIAL = '" + xfilial("BDX") + "' " 
	cSql += " AND BDX_CODOPE = '" + TrbE->BD6_CODOPE + "' "
	cSql += " AND BDX_CODLDP = '" + TrbE->BD6_CODLDP + "' "
	cSql += " AND BDX_CODPEG = '" + TrbE->BD6_CODPEG + "' "
	cSql += " AND BDX_NUMERO = '" + TrbE->BD6_NUMERO + "' "
	cSql += " AND BDX_CODPAD = '" + TrbE->BD6_CODPAD + "' "
	cSql += " AND BDX_CODPRO = '" + TrbE->BD6_CODPRO + "' "
	cSql += " AND BDX_SEQUEN = '" + TrbE->BD6_SEQUEN + "' "
	cSql += " AND BDX_TIPREG = '1' "
	cSql += " AND BDX.D_E_L_E_T_ = ' ' "
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSql),"TrbBDX",.F.,.T.)	
	if !TrbBDX->(eof())
		::retEvento('TrbE','TrbBDX',nEv)
	endif
	TrbBDX->(dbclosearea())
	TrbE->(dbskip())
	nEv++
enddo

TrbE->(dbclosearea())

return 

//-------------------------------------------------------------------
/*/{Protheus.doc} valida

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
method valida() class PLSGlosaValid
local lRet := .t.

if empty(::oRest:protocol)
	::retorno(.t., "Necessário informar o campo 'protocol' obrigatório." )
	lRet := .f.
endif

if empty(::oRest:healthProviderCode)
	::retorno(.t., "Necessário informar o campo 'healthProviderCode' obrigatório." )
	lRet := .f.
endif

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} retEvento

@author    Lucas Nonato
@version   V12
@since     01/03/2021
/*/
method retEvento(cAliasEV,cAliasBDX,nEv) class PLSGlosaValid
local cCodPro 	:= ""
local cCodPad 	:= ""
local cCode 	:= ""
local cDesc 	:= ""
local nX 		:= 1
local aProced 	:= {}

aProced		:= PLGETPROC((cAliasEV)->BD6_CODPAD,(cAliasEV)->BD6_CODPRO)
cCodPad 	:= aProced[2]
cCodPro 	:= aProced[3]

aadd(::oJson['items'], jsonObject():new())
::oJson['items'][nEv]['glossValue']		:= (cAliasEV)->BD6_VLRGLO
::oJson['items'][nEv]['sequential']		:= (cAliasEV)->BD6_SEQUEN
::oJson['items'][nEv]['description']	:= alltrim((cAliasEV)->BD6_DESPRO)
::oJson['items'][nEv]['tableCode']		:= cCodPad
::oJson['items'][nEv]['eventCode'] 		:= cCodPro
::oJson['items'][nEv]['gloss']			:= ""
while !(cAliasBDX)->(eof())
	cCode := deParaSimpl("38", (cAliasBDX)->BDX_CODGLO, "BCT")
	cDesc := descTissSp("38", cCode)
	::oJson['items'][nEv]['gloss']	+= iif(nX>1," / ","") + cCode + " - " + cDesc
	nX++
	(cAliasBDX)->(dbskip())
enddo

return