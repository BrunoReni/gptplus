#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.attendanceNetwork.professional

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} ProfessionalAdapter
Classe adaptadora de collenction de Profissionais de Saúde - Base de dados

@type class
@author Vinicius Queiros Teixeira
@since 14/03/2023
@version Protheus 12
/*/
Class ProfessionalAdapter From BaseAdapter

	Public Method new() Constructor
	Public Method getPageProfessionals() As Logical

	Private Method mapFieldsProfessionals() As Logical
	Private Method getQueryProfessionals() As Character
	Private Method getWhereProfessionals() As Character
	Private Method getOrderProfessionals() As Character

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 14/03/2023
@version Protheus 12
/*/
Method new() class ProfessionalAdapter

	_Super:new()

Return Self

/*/{Protheus.doc} getPageProfessionals
Método responsavel por retornar a pagina de Profissionais de Saúde

@type method
@author Vinicius Queiros Teixeira
@since 14/03/2023
@version Protheus 12
/*/
Method getPageProfessionals() As Logical Class ProfessionalAdapter

	Local lSucess := .F. As Logical
    Local cQuery := Self:getQueryProfessionals() As Character
    Local cWhere := Self:getWhereProfessionals() As Character
    Local cOrder := Self:getOrderProfessionals() As Character
	
	Self:mapFieldsProfessionals()

	If Self:executeQueryAdapter(cQuery, cWhere, cOrder)
		lSucess := .T.
	EndIf

Return lSucess

/*/{Protheus.doc} mapFieldsProfessionals
Método responsavel por mapear os atributos do json com os campos da tabela de profissionais de saúde

@type method
@author Vinicius Queiros Teixeira
@since 14/03/2023
@version Protheus 12
/*/
Method mapFieldsProfessionals() As Logical Class ProfessionalAdapter

	Self:oAdapterBase:addMapFields("id-on-health-insurer", "BB0_CODIGO", .T., .F., {"BB0_CODIGO", "C", TamSX3("BB0_CODIGO")[1], 0})
	Self:oAdapterBase:addMapFields("name", "BB0_NOME", .T., .F., {"BB0_NOME", "C", TamSX3("BB0_NOME")[1], 0})
	Self:oAdapterBase:addMapFields("professional-council", "BB0_CODSIG", .T., .F., {"BB0_CODSIG", "C", TamSX3("BB0_CODSIG")[1], 0})
	Self:oAdapterBase:addMapFields("professional-council-number", "BB0_NUMCR", .T., .F., {"BB0_NUMCR", "C", TamSX3("BB0_NUMCR")[1], 0})
	Self:oAdapterBase:addMapFields("state-abbreviation", "BB0_ESTADO", .T., .F., {"BB0_ESTADO", "C", TamSX3("BB0_ESTADO")[1], 0})
	Self:oAdapterBase:addMapFields("professional-identifier", "BB0_CGC", .T., .F., {"BB0_CGC", "C", TamSX3("BB0_CGC")[1], 0})
    Self:oAdapterBase:addMapFields("health-insurer-code-origem", "BB0_CODORI", .T., .F., {"BB0_CODORI", "C", TamSX3("BB0_CODORI")[1], 0})
    Self:oAdapterBase:addMapFields("is-Part-attendance-network", "BB0_VINC", .T., .F., {"BB0_VINC", "C", TamSX3("BB0_VINC")[1], 0})
    Self:oAdapterBase:addMapFields("blocking-reason", "BB0_CODBLO", .T., .F., {"BB0_CODBLO", "C", TamSX3("BB0_CODBLO")[1], 0})
    Self:oAdapterBase:addMapFields("blocking-date", "BB0_DATBLO", .T., .F., {"BB0_DATBLO", "C", TamSX3("BB0_DATBLO")[1], 0}, Self:getFormatDate("BB0_DATBLO"))                                                                                                                                        

Return .T.

/*/{Protheus.doc} getQueryProfessionals
Método responsavel por retornar o corpo da query que busca os profissionais

@type Method
@author Vinicius Queiros Teixeira
@since 14/03/2023
@version Protheus 12
/*/
Method getQueryProfessionals() As Character Class ProfessionalAdapter

	Local cQuery As Character

	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BB0")+" BB0 "
    cQuery += " WHERE #QueryWhere#"

Return cQuery

/*/{Protheus.doc} getWhereProfessionals
Método responsavel por retornar o WHERE da query que busca os profissionais

@type Method
@author Vinicius Queiros Teixeira
@since 14/03/2023
@version Protheus 12
/*/
Method getWhereProfessionals() As Character Class ProfessionalAdapter

	Local cQuery As Character
	
	cQuery := " BB0.BB0_FILIAL = '"+xFilial("BB0")+"' AND "

    // Filtros simples da api (propriedade=valor)
	If Self:jParams:hasProperty("state-abbreviation")
		cQuery += " BB0.BB0_ESTADO = '"+Self:jParams["state-abbreviation"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("professional-council-number")
		cQuery += " BB0.BB0_NUMCR = '"+Self:jParams["professional-council-number"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("professional-council")
		cQuery += " BB0.BB0_CODSIG = '"+Self:jParams["professional-council"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("id-on-health-insurer")
		cQuery += " BB0.BB0_CODIGO = '"+Self:jParams["id-on-health-insurer"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("name")
		cQuery += " UPPER(BB0.BB0_NOME) LIKE '%"+Upper(Self:jParams["name"])+"%' AND "
	EndIf

    If Self:jParams:hasProperty("professional-identifier")
		cQuery += " BB0.BB0_CGC = '"+Self:jParams["professional-identifier"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("health-insurer-code-origem")
		cQuery += " BB0.BB0_CODORI = '"+Self:jParams["health-insurer-code-origem"]+"' AND "
	EndIf

    cQuery += " BB0.BB0_CODOPE = '"+Self:jParams["health-insurer-code"]+"' AND "
	cQuery += " BB0.D_E_L_E_T_ = ' ' "

Return cQuery

/*/{Protheus.doc} getOrderProfessionals
Método responsavel por retornar a ORDEM da query que busca os profissionais

@type Method
@author Vinicius Queiros Teixeira
@since 14/03/2023
@version Protheus 12
/*/
Method getOrderProfessionals() As Character Class ProfessionalAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BB0.BB0_CODIGO"

Return cOrdemQuery
