#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.attendanceNetwork.unreferencedNetwork

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} UnreferencedNetworkAdapter
Classe adaptadora de collenction de Redes não referenciadas - Base de dados

@type class
@author Vinicius Queiros Teixeira
@since 31/03/2023
@version Protheus 12
/*/
Class UnreferencedNetworkAdapter From BaseAdapter

	Public Method new() Constructor
	Public Method getPageUnreferencedNetworks() As Logical

	Private Method mapFieldsUnreferencedNetworks() As Logical
	Private Method getQueryUnreferencedNetworks() As Character
	Private Method getWhereUnreferencedNetworks() As Character
	Private Method getOrderUnreferencedNetworks() As Character

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 31/03/2023
@version Protheus 12
/*/
Method new() class UnreferencedNetworkAdapter

	_Super:new()

Return Self

/*/{Protheus.doc} getPageUnreferencedNetworks
Método responsavel por retornar a pagina de Redes não Referenciadas

@type method
@author Vinicius Queiros Teixeira
@since 31/03/2023
@version Protheus 12
/*/
Method getPageUnreferencedNetworks() As Logical Class UnreferencedNetworkAdapter

	Local lSucess := .F. As Logical
    Local cQuery := Self:getQueryUnreferencedNetworks() As Character
    Local cWhere := Self:getWhereUnreferencedNetworks() As Character
    Local cOrder := Self:getOrderUnreferencedNetworks() As Character
	
	Self:mapFieldsUnreferencedNetworks()

	If Self:executeQueryAdapter(cQuery, cWhere, cOrder)
		lSucess := .T.
	EndIf

Return lSucess

/*/{Protheus.doc} mapFieldsUnreferencedNetworks
Método responsavel por mapear os atributos do json com os campos das redes não
referenciadas

@type method
@author Vinicius Queiros Teixeira
@since 31/03/2023
@version Protheus 12
/*/
Method mapFieldsUnreferencedNetworks() As Logical Class UnreferencedNetworkAdapter

	Self:oAdapterBase:addMapFields("code", "BK6_CODIGO", .T., .F., {"BK6_CODIGO", "C", TamSX3("BK6_CODIGO")[1], 0})
	Self:oAdapterBase:addMapFields("name", "BK6_NOME", .T., .F., {"BK6_NOME", "C", TamSX3("BK6_NOME")[1], 0})
	Self:oAdapterBase:addMapFields("council", "BK6_SIGLA", .T., .F., {"BK6_SIGLA", "C", TamSX3("BK6_SIGLA")[1], 0})
	Self:oAdapterBase:addMapFields("council-number", "BK6_CONREG", .T., .F., {"BK6_CONREG", "C", TamSX3("BK6_CONREG")[1], 0})
    Self:oAdapterBase:addMapFields("council-state-abbreviation", "BK6_ESTCR", .T., .F., {"BK6_ESTCR", "C", TamSX3("BK6_ESTCR")[1], 0})
    Self:oAdapterBase:addMapFields("identifier", "BK6_CGC", .T., .F., {"BK6_CGC", "C", TamSX3("BK6_CGC")[1], 0})
    Self:oAdapterBase:addMapFields("city-code", "BK6_MUNCR", .T., .F., {"BK6_MUNCR", "C", TamSX3("BK6_MUNCR")[1], 0})
    Self:oAdapterBase:addMapFields("city-code-residence", "BID_DESCRI", .T., .F., {"BID_DESCRI", "C", TamSX3("BID_DESCRI")[1], 0})

Return .T.

/*/{Protheus.doc} getQueryUnreferencedNetworks
Método responsavel por retornar o corpo da query que busca as redes não referenciadas

@type Method
@author Vinicius Queiros Teixeira
@since 31/03/2023
@version Protheus 12
/*/
Method getQueryUnreferencedNetworks() As Character Class UnreferencedNetworkAdapter

	Local cQuery As Character

	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BK6")+" BK6 "
    cQuery += " LEFT JOIN "+RetSqlName("BID")+" BID "
	cQuery += "   ON BID.BID_FILIAL = '"+xFilial("BID")+"' "
	cQuery += "  AND BID.BID_EST = BK6.BK6_ESTCR "
	cQuery += "  AND BID.BID_CODMUN = BK6.BK6_MUNCR "
	cQuery += "  AND BID.D_E_L_E_T_ = ' ' "
    cQuery += " WHERE #QueryWhere#"

Return cQuery

/*/{Protheus.doc} getWhereUnreferencedNetworks
Método responsavel por retornar o WHERE da query que busca as redes não referenciadas

@type Method
@author Vinicius Queiros Teixeira
@since 31/03/2023
@version Protheus 12
/*/
Method getWhereUnreferencedNetworks() As Character Class UnreferencedNetworkAdapter

	Local cQuery As Character
	
	cQuery := " BK6.BK6_FILIAL = '"+xFilial("BK6")+"' AND "

    // Filtros simples da api (propriedade=valor)
	If Self:jParams:hasProperty("code")
	    cQuery += " BK6.BK6_CODIGO = '"+Self:jParams["code"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("name")
	    cQuery += " UPPER(BK6.BK6_NOME) LIKE '%"+Upper(Self:jParams["name"])+"%' AND "
	EndIf

    If Self:jParams:hasProperty("identifier")
	    cQuery += " BK6.BK6_CGC = '"+Self:jParams["identifier"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("council")
	    cQuery += " BK6.BK6_SIGLA = '"+Self:jParams["council"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("council-number")
	    cQuery += " BK6.BK6_CONREG = '"+Self:jParams["council-number"]+"' AND "
	EndIf

    If Self:jParams:hasProperty("council-state-abbreviation")
	    cQuery += " BK6.BK6_ESTCR = '"+Self:jParams["council-state-abbreviation"]+"' AND "
	EndIf
                                                                                                                            
	cQuery += " BK6.D_E_L_E_T_ = ' ' "

Return cQuery

/*/{Protheus.doc} getOrderUnreferencedNetworks
Método responsavel por retornar a ORDEM da query que busca as redes não referenciadas

@type Method
@author Vinicius Queiros Teixeira
@since 31/03/2023
@version Protheus 12
/*/
Method getOrderUnreferencedNetworks() As Character Class UnreferencedNetworkAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BK6.BK6_CODIGO"

Return cOrdemQuery
