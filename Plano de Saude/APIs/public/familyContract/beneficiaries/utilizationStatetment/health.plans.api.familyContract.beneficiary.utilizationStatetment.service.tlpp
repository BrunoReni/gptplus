#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.familyContract.beneficiary.utilizationStatetment

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} UtilizationStatetmentService
Classe de serviço de Titulos - Regra de Negócio

@type class
@author Cesar Almeida
@since 27/04/2023
@version Protheus 12
/*/
Class UtilizationStatetmentService From BaseService // teste

    Private Data oService As Object
    Private Data nMaximumData As Numeric

    Public Method new() Constructor
    Public Method getUtilizationStatetmentBase64() As Logical
    Public Method checkDate() As Logical

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Cesar Almeida
@since 27/04/2023
@version Protheus 12
/*/
Method new() Class UtilizationStatetmentService

    _Super:new()

    Self:nMaximumData := 180

Return Self

/*/{Protheus.doc} getUtilizationStatetmentBase64
Método responsavel por retornar o boleto bancário do título em Base 64

@type method
@author Cesar Almeida
@since 27/04/2023
@version Protheus 12
/*/
Method getUtilizationStatetmentBase64() As Logical Class UtilizationStatetmentService

    Local lSucess := .F. As Logical
    Local aFields := {} As Array
    Local aRet := {} As Array
    Local cDiretory := PLSMUDSIS(getWebDir() + getSkinPls() + "\relatorios\") As Character

    aAdd(aFields, {"field" : "subscriberId", "required" : .T., "type" : "C", "size" : tamSX3("BA1_CODINT")[1]+tamSX3("BA1_CODEMP")[1]+tamSX3("BA1_MATRIC")[1]+tamSX3("BA1_TIPREG")[1]+tamSX3("BA1_DIGITO")[1]})
    
    If Self:checkBodyFields(aFields, "E001",self:jPath) 

        aFields := {} 

        aAdd(aFields, {"field" : "date-of", "required" : .T., "type" : "D"})
        aAdd(aFields, {"field" : "until-date", "required" : .T., "type" : "D"})

        If Self:checkBodyFields(aFields, "E001",self:jParams) 

            If !Self:checkDate()
      
                BA1->(DbSetOrder(2))
                If BA1->(MsSeek(xFilial("BA1")+Self:jPath["subscriberId"]))

                    aRet := PLSR022( BA1->BA1_CODINT,BA1->BA1_CODEMP,BA1->BA1_CONEMP,BA1->BA1_SUBCON,'',Self:jPath["subscriberId"],;
                    Self:convertDateFormat(Self:jParams["date-of"]),Self:convertDateFormat(Self:jParams["until-date"]),'','','ZZZZ','ZZ',.T., cDiretory )

                    If  aRet[1]
                        Self:setAttributeJson({"attribute" : "fileName", "value" : Lower(aRet[3]), "type" : "C"})
                        Self:setAttributeJson({"attribute" : "file", "value" : Self:convertFileToBase64(cDiretory+aRet[3]), "type" : "C"})                  
                        lSucess := .T.
                        Self:nCodeStatus := 200 // Ok      
                    Else
                        Self:SetError("E002", "Extrato não disponível.",;
                                            "Não foi possível realizar a impressão do Extrato de Utilização. Verificar o período informado.",;
                                            400) // Bad Request
                    EndIf
                Else
                    Self:SetError("E003", "Usuário não encontrado",;
                                        "Não foi possível retornar os dados do beneficiário através da matrícula informada.",;
                                        404) // Not found
                EndIf

            EndIf 

        EndIf

    EndIf

Return lSucess

/*/{Protheus.doc} checkDate
Método responsavel por verificar a data informada

@type method
@author Cesar Almeida
@since 28/04/2023
@version Protheus 12
/*/
Method checkDate() As Logical Class UtilizationStatetmentService

    Local lCheck := .F. As Logical
    Local nDiffDay := 0 As Numeric 
    Local dDateOf := Self:convertDateFormat(Self:jParams["date-of"]) As Date
    Local dUntilDate := Self:convertDateFormat(Self:jParams["until-date"]) As Date

    nDiffDay := DateDiffDay(dDateOf, dUntilDate)

    If Year(dDateOf) != Year(dUntilDate)

        lCheck := .T.
        Self:SetError("E004", "Periodo informado não permitido",;
                        "Período permitido somente para o mesmo ano. Ex: De 01/01/2023 a 31/12/2023.",;
                        400)

    ElseIf nDiffDay > Self:nMaximumData

        lCheck := .T.
        Self:SetError("E005", "Intervalo de dias não permitido",;
                        "Permitido somente intervalo de no máximo " + cValToChar(Self:nMaximumData) + " dia(s).",;
                        400)

    EndIf

Return lCheck
