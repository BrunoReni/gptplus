#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.familyContract.beneficiary.financeStatetment

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} FinanceStatetmentService
Classe de serviço - Regra de Negócio

@type class
@author Guilherme Carreiro
@since 29/05/2023
@version Protheus 12
/*/
Class FinanceStatetmentService From BaseService

    Private Data oService As Object
    Private Data nMaximumData As Numeric

    Public Method new() Constructor
    Public Method getFinanceStatetmentBase64() As Logical
    
EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Guilherme Carreiro
@since 29/05/2023
@version Protheus 12
/*/
Method new() Class FinanceStatetmentService

    _Super:new()

Return Self

/*/{Protheus.doc} getFinanceStatetmentBase64
Método responsavel por retornar o extrato financeiro em Base 64

@type method
@author Guilherme Carreiro
@since 29/05/2023
@version Protheus 12
/*/
Method getFinanceStatetmentBase64() As Logical Class FinanceStatetmentService

    Local lSucess := .F. As Logical
    Local aFields := {} As Array
    Local cRet := {} As Character
    Local cDiretory := lower(getMV("MV_RELT")) As Character

    aAdd(aFields, {"field" : "subscriberId", "required" : .T., "type" : "C", "size" : tamSX3("BA1_CODINT")[1]+tamSX3("BA1_CODEMP")[1]+tamSX3("BA1_MATRIC")[1]+tamSX3("BA1_TIPREG")[1]+tamSX3("BA1_DIGITO")[1]})
    
    If Self:checkBodyFields(aFields, "E001",self:jPath) 

        aFields := {}

        aAdd(aFields, {"field" : "dateOf", "required" : .T., "type" : "D"})
        aAdd(aFields, {"field" : "untilDate", "required" : .T., "type" : "D"})
        aAdd(aFields, {"field" : "expenseType", "required" : .T., "type" : "C"})

        If Self:checkBodyFields(aFields, "E001",self:jParams) 

            BFQ->(DbSetOrder(1))
            If BFQ->(MsSeek(xFilial("BFQ")+SUBSTR(Self:jPath["subscriberId"],1,4)+Self:jParams["expenseType"])) .And. BFQ->BFQ_EXTFIN == "1"
      
                BA1->(DbSetOrder(2))
                If BA1->(MsSeek(xFilial("BA1")+Self:jPath["subscriberId"]))

                    cRet := U_PLSR001(.T., {STOD(Replace(Self:jParams["dateOf"],"-","")), STOD(Replace(Self:jParams["untilDate"],"-","")),;
                            Self:jPath["subscriberId"], Self:jParams["expenseType"], ""},cDiretory)

                    If  !Empty(cRet)
                        Self:setAttributeJson({"attribute" : "fileName", "value" : Lower(cRet), "type" : "C"})
                        Self:setAttributeJson({"attribute" : "file", "value" : Self:convertFileToBase64(cDiretory+cRet), "type" : "C"})                  
                        lSucess := .T.
                        Self:nCodeStatus := 200 // Ok      
                    Else
                        Self:SetError("E002", "Extrato não disponível.",;
                                            "Não foi possível realizar a impressão do Extrato Financeiro. Verificar o período informado e tipo de despesa.",;
                                            400) // Bad Request
                    EndIf
                Else
                    Self:SetError("E003", "Usuário não encontrado",;
                                        "Não foi possível retornar os dados do beneficiário através da matrícula informada.",;
                                        404) // Not found
                EndIf

            Else
                Self:SetError("E004", "Tipo de lançamento não encontrado",;
                                    "Não foi possível retornar os dados do lançamento através do código informado.",;
                                    404) // Not found
            EndIf 

        EndIf

    EndIf

Return lSucess
