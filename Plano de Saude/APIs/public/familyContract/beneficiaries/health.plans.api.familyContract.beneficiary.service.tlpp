#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.familyContract.beneficiary

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} BeneficiaryService
Classe de serviço de Beneficiarios - Regra de Negócio

@type class
@author Vinicius Queiros Teixeira
@since 09/02/2023
@version Protheus 12
/*/
Class BeneficiaryService From BaseService

    Private Data oAdapter As Object

    Public Method new() Constructor
    Public Method getBeneficiaries() As Logical

    Public Method getSupplementaryHealth() As Logical
    private Method processSupplementaryHealth() As Logical
   
    Public Method getEligibility() As Logical
    Private Method processEligibilityData(jPath As Json) As Logical

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 09/02/2023
@version Protheus 12
/*/
Method new() Class BeneficiaryService

    _Super:new()

Return Self

/*/{Protheus.doc} getBeneficiaries
Método responsavel por retornar as paginas de beneficiarios

@type method
@author Vinicius Queiros Teixeira
@since 09/02/2023
@version Protheus 12
/*/
Method getBeneficiaries() As Logical Class BeneficiaryService

    Local lSucess := .F. As Logical
    Local aKeys := {} As Array

    // Chaves do query param obrigatórios na api
    aAdd(aKeys, {"type" : "queryParams", "key" : "health-insurer-code"})

    If Self:checkRequiredKeys(aKeys, "E001")
        Self:oAdapter := BeneficiaryAdapter():New()
        Self:oAdapter:setQueryParams(Self:jParams)

        If Self:oAdapter:getPageBeneficiaries()
            lSucess := .T.
            Self:nCodeStatus := 200
            Self:jResult := Self:oAdapter:getJsonResult()
        EndIf
    EndIf

Return lSucess

/*/{Protheus.doc} getSupplementaryHealth
Método responsavel por retornar os Dados Pessoais

@type method
@author José Paulo de Azevedo
@since 20/02/2023
@version Protheus 12
/*/
Method getSupplementaryHealth() As Logical Class BeneficiaryService

    Local lSucess := .F. As Logical
    Local aKeys := {} As Array

    BA1->(DbSetOrder(2))

    // Chaves do path Params obrigatórios na api
    aAdd(aKeys, {"type" : "pathParams", "key" : "subscriberId"})

    If Self:checkRequiredKeys(aKeys, "E001")

        If !BA1->(MsSeek(xFilial("BA1")+Padr(Self:jPath["subscriberId"],tamSX3("BA1_CODINT")[1]+tamSX3("BA1_CODEMP")[1]+tamSX3("BA1_MATRIC")[1]+tamSX3("BA1_TIPREG")[1]+tamSX3("BA1_DIGITO")[1])))
            lRetorno := .F.
            Self:setError("E003","Usuário não encontrado", "Não foi possível retornar os dados do beneficiário através da matrícula informada.",404)
        Else
            Self:processSupplementaryHealth()
            Self:nCodeStatus:= 200
            lSucess := .T.
        EndIf

    EndIf

Return lSucess

/*/{Protheus.doc} getEligibility
Método responsavel por retornar os dados da Elegibilidade do Beneficiario

@type method
@author Cesar Almeida
@since 13/02/2023
@version Protheus 12
/*/
Method getEligibility() As Logical Class BeneficiaryService

    Local lSucess := .F. As Logical
    Local aKeys := {} As Array

    BA1->(DbSetOrder(2))

    // Chaves do path Params obrigatórios na api
    aAdd(aKeys, {"type" : "pathParams", "key" : "subscriberId"})

    If Self:checkRequiredKeys(aKeys, "E001")

        If !BA1->(MsSeek(xFilial("BA1")+Padr(Self:jPath["subscriberId"],tamSX3("BA1_CODINT")[1]+tamSX3("BA1_CODEMP")[1]+tamSX3("BA1_MATRIC")[1]+tamSX3("BA1_TIPREG")[1]+tamSX3("BA1_DIGITO")[1])))
            lRetorno := .F.
            Self:setError("E002","Usuário não encontrado", "Não foi possível retornar os dados do beneficiário através da matrícula informada.",404)
        Else
            Self:processEligibilityData()
            Self:nCodeStatus:= 200
            lSucess := .T.
        EndIf   

    EndIf
   
Return lSucess

/*/{Protheus.doc} processSupplementaryHealth
Método responsavel por processar os Dados Pessoais

@type method
@author José Paulo de Azevedo
@since 14/02/2023
@version Protheus 12
/*/
Method processSupplementaryHealth() As Logical Class BeneficiaryService

    Local aRetorno := {} As Array
    Local lRetorno := .T. As Logical

    aRetorno := PLSA271(Self:jPath["subscriberId"],"","","1")

    Self:setAttributeJson({"attribute":"name","value":aRetorno[1,1],"type":"C"})                                            // Nome
    Self:setAttributeJson({"attribute":"subscriberId","value":aRetorno[1,2],"type":"C"})                                    // 2 Matricula
    Self:setAttributeJson({"attribute":"birthdate","value":CTOD(aRetorno[1,3]),"type":"D"})                                 // 3 Data de Nascimento
    Self:setAttributeJson({"attribute":"nationalHealthCard","value":aRetorno[1,4],"type":"C"})                              // 4 Numero do cartão Nacional de Saúde
    Self:setAttributeJson({"attribute":"registrationPlanAns","value":aRetorno[1,5],"type":"C"})                             // 5 Numero do registro do Plano na ANS
    Self:setAttributeJson({"attribute":"assistSegmentationPlan","value":aRetorno[1,6],"type":"C"})                          // 6 Segmentação Assistencial do Plano
    Self:setAttributeJson({"attribute":"operatorRegistrationAns","value":aRetorno[1,7],"type":"C"})                         // 7 Código do registro da operadora na ANS
    Self:setAttributeJson({"attribute":"carrierContactInformation","value":aRetorno[1,8],"type":"C"})                       // 8 Informação de contato com a operadora
    Self:setAttributeJson({"attribute":"ansContactInformation","value":aRetorno[1,9],"type":"C"})                           // 9 Informação de contato com a ANS
    Self:setAttributeJson({"attribute":"TemporaryPartialCoverageEndDate","value":CTOD(aRetorno[1,10]),"type":"D"})          // 10 Data de termino da cobertura parcial temporária
    Self:setAttributeJson({"attribute":"AccommodationStandard","value":aRetorno[1,11],"type":"C"})                          // 11 Padrão de acomodação
    Self:setAttributeJson({"attribute":"hiringType","value":aRetorno[1,12],"type":"C"})                                     // 12 Tipo de Contratação
    Self:setAttributeJson({"attribute":"geographicCoverageArea","value":aRetorno[1,13],"type":"C"})                         // 13 Área de abrangência geográfica
    Self:setAttributeJson({"attribute":"productName","value":aRetorno[1,14],"type":"C"})                                    // 14 Nome do produto
    Self:setAttributeJson({"attribute":"carrierTradeName","value":aRetorno[1,15],"type":"C"})                               // 15 Nome fantasia da operadora
    Self:setAttributeJson({"attribute":"benefitAdministratorTradeName","value":aRetorno[1,16],"type":"C"})                  // 16 Nome fantasia da administradora de benefícios
    Self:setAttributeJson({"attribute":"nameLegalEntityContractingCollectivePlan","value":aRetorno[1,17],"type":"C"})       // 17 Nome da Pessoa Jurídica contratante do plano coletivo
    Self:setAttributeJson({"attribute":"effectiveDatePlan","value":CTOD(aRetorno[1,18]),"type":"D"})                        // 18 Data de inicio da vigência do plano
    Self:setAttributeJson({"attribute":"contractPolicyNumber","value":aRetorno[1,19],"type":"C"})                           // 19 Numero do contrato/apólice
    Self:setAttributeJson({"attribute":"dateContractingHealthPlan","value":CTOD(aRetorno[1,20]),"type":"D"})                // 20 Data de contratação do plano de saúde
    Self:setAttributeJson({"attribute":"maximumPeriodProvidedContractGracePeriod","value":CTOD(aRetorno[1,21]),"type":"D"}) // 21 Prazo máximo previsto no contrato para carência
    Self:setAttributeJson({"attribute":"planInformation","value":aRetorno[1,22],"type":"C"})                                // 22 Informações do Plano
    Self:setAttributeJson({"attribute":"information","value":aRetorno[1,23],"type":"C"})                                    // 23 Informações
    Self:setAttributeJson({"attribute":"timeOutpatientProcedures","value":aRetorno[1,24],"type":"C"})                       // 24 Carência Procedimentos Ambulatorias
    Self:setAttributeJson({"attribute":"waitingHospitalProcedures","value":aRetorno[1,25],"type":"C"})                      // 25 Carência Procedimentos Hospitalares
    Self:setAttributeJson({"attribute":"termDeliveryProcedures","value":aRetorno[1,26],"type":"C"})                         // 26 Carência Procedimentos Parto a Termo
    Self:setAttributeJson({"attribute":"deficiencyDentalProcedures","value":aRetorno[1,27],"type":"C"})                     // 27 Carência Procedimentos Odontológicos
    Self:setAttributeJson({"attribute":"socialName","value":aRetorno[1,28],"type":"C"})                                     // 28 Nome Social

    Self:nCodeStatus:= 200

Return lRetorno

/*/{Protheus.doc} processEligibilityData
Método responsavel por processar os dados da Elegibilidade do Beneficiario

@type method
@author Cesar Almeida
@since 14/02/2023
@version Protheus 12
/*/
Method processEligibilityData(jPath As Json) As Logical Class BeneficiaryService

    Local aRetorno := {} As Array
    Local aRetCri := {} As Array
    Local lRetorno := .T. As Logical
    Local nDiasBloq := GetNewPar("MV_PLDIABL", 0) As Integer
   
    aRetorno := PLVLDUSRP(Self:jPath["subscriberId"],"","","1")

    Self:setAttributeJson({"attribute" : "subscriberId", "value": aRetorno[3,1,1],"type":"C"})
    Self:setAttributeJson({"attribute" : "oldSubscriberId", "value": aRetorno[3,1,2],"type":"C"})
    Self:setAttributeJson({"attribute" : "name", "value": aRetorno[3,1,3],"type":"C"})
    Self:setAttributeJson({"attribute" : "socialName", "value": aRetorno[3,1,38],"type":"C"})
    Self:setAttributeJson({"attribute" : "interChange", "value": Iif(aRetorno[3,1,4] == .T., "SIM","NAO"),"type":"C"})
    Self:setAttributeJson({"attribute" : "originHealthInsurerCode", "value": aRetorno[3,1,5],"type":"C"})
    Self:setAttributeJson({"attribute" : "healthPlan", "value": aRetorno[3,1,6],"type":"C"})
    Self:setAttributeJson({"attribute" : "cardValidity", "value": aRetorno[3,1,7],"type":"D"})
    Self:setAttributeJson({"attribute" : "nationalHealthCard", "value": aRetorno[3,1,8],"type":"C"})
    Self:setAttributeJson({"attribute" : "cardCopy", "value": cValToChar(aRetorno[3,1,9]),"type":"C"})
    Self:setAttributeJson({"attribute" : "coverage", "value": aRetorno[3,1,11],"type":"C"})
    Self:setAttributeJson({"attribute" : "holder", "value": aRetorno[3,1,14],"type":"C"})
    Self:setAttributeJson({"attribute" : "company", "value": aRetorno[3,1,15],"type":"C"})
    Self:setAttributeJson({"attribute" : "blockDate", "value": aRetorno[3,1,22],"type":"D"})
    Self:setAttributeJson({"attribute" : "ansHealthInsurerCode", "value": aRetorno[3][1][24],"type":"C"})
    Self:setAttributeJson({"attribute" : "eligible", "value": Iif(Len(aRetorno[4]) > 0 .Or. (!Empty(Self:jResult["blockDate"]) .And. ;
                         (DaySum(aRetorno[3,1,22],nDiasBloq)) <= dDataBase), "NAO", "SIM"),"type":"C"})

    //Retorna críticas do usuário
    If Len(aRetorno[4]) > 0
        If !Empty( AllTrim( aRetorno[4,1,1] ) )
            aRetCri := PLSRETCRI( AllTrim( aRetorno[4,1,1] ) )
            Self:setAttributeJson({"attribute" : "negativeReasonCode", "value": aRetCri[1,1],"type":"C"})
            Self:setAttributeJson({"attribute" : "negativeReasonDescription", "value": aRetCri[1,2],"type":"C"})
        EndIf
    EndIf

Return lRetorno
