#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.familyContract.beneficiary.incomeTax

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} IncomeTaxService
Classe de serviço de Titulos - Regra de Negócio
@type class
@author Gabriela Cattin Gomes
@since 18/04/2023
@version Protheus 12
/*/
Class IncomeTaxService From BaseService

  	Public Method new() Constructor
    Public Method getIncomeTaxBase64() As Logical

EndClass

/*/{Protheus.doc} new
Método construtor da classe
@type method
@author Gabriela Cattin Gomes
@since 18/04/2023
@version Protheus 12
/*/
Method new() Class IncomeTaxService

    _Super:new()

Return Self

/*/{Protheus.doc} getIncomeTaxBase64
Método responsavel por retornar o demonstrativo de imposto de renda em Base 64

@type method
@author Gabriela Cattin Gomes
@since 16/02/2023
@version Protheus 12
/*/
Method getIncomeTaxBase64() As Logical Class IncomeTaxService

    Local lSucess := .F. As Logical
    Local aFields := {} As Array
    Local aRet := {} As Array
    Local cDiretory := GetMV("MV_RELT")

    aAdd(aFields, {"field" : "subscriberId", "required" : .T., "type" : "C", "size" : tamSX3("BA1_CODINT")[1]+tamSX3("BA1_CODEMP")[1]+tamSX3("BA1_MATRIC")[1]+tamSX3("BA1_TIPREG")[1]+tamSX3("BA1_DIGITO")[1]})

    If Self:checkBodyFields(aFields, "E001", Self:jPath)

        aFields := {} 

        aAdd(aFields, {"field" : "year", "required" : .T., "type" : "C"})

        If Self:checkBodyFields(aFields, "E001",self:jParams) 
      
            BA1->(DbSetOrder(2))
            If BA1->(MsSeek(xFilial("BA1")+Self:jPath["subscriberId"]))

                aRet := PLSR997(BA1->BA1_CODINT, BA1->BA1_CODEMP, BA1->BA1_CODEMP, " ", "ZZZZZZZZZZ", " ", "ZZZZZZZZ",;
                                    BA1->BA1_MATRIC, BA1->BA1_MATRIC, Self:jParams["year"], 1, .T.)

                If  aRet[1]
                    Self:setAttributeJson({"attribute" : "fileName", "value" : Lower(aRet[3]), "type" : "C"})
                    Self:setAttributeJson({"attribute" : "file", "value" : Self:convertFileToBase64(cDiretory+aRet[3]), "type" : "C"})                  
                    lSucess := .T.
                    Self:nCodeStatus := 200 // Ok      
                Else
                    Self:SetError("E002", "Demonstrativo não disponível.",;
                                        "Não encontrado imposto de renda referente ano informado.",;
                                        400) // Bad Request
                EndIf
            Else
                Self:SetError("E003", "Usuário não encontrado",;
                                "Não foi possível retornar os dados do beneficiário através da matrícula informada.",;
                                404) // Not found
            EndIf

        EndIf

    EndIf

Return lSucess
