#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.familyContract.company.contract.subcontract

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} SubcontractAdapter
Classe adaptadora de collenction de SubContratos - Base de dados

@type class
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Class SubcontractAdapter From BaseAdapter

	Public Method new() Constructor
	Public Method getPageSubcontracts() As Logical

	Private Method mapFieldsSubcontracts() As Logical
	Private Method getQuerySubcontracts() As Character
	Private Method getWhereSubcontracts() As Character
	Private Method getOrderSubcontracts() As Character

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method new() class SubcontractAdapter

	_Super:new()

Return Self

/*/{Protheus.doc} getPageSubcontracts
Método responsavel por retornar a pagina de subContratos do contrato da empresa

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method getPageSubcontracts() As Logical Class SubcontractAdapter

	Local lSucess := .F. As Logical
    Local cQuery := Self:getQuerySubcontracts() As Character
    Local cWhere := Self:getWhereSubcontracts() As Character
    Local cOrder := Self:getOrderSubcontracts() As Character
	
	Self:mapFieldsSubcontracts()

	If Self:executeQueryAdapter(cQuery, cWhere, cOrder)
		lSucess := .T.
	EndIf

Return lSucess

/*/{Protheus.doc} mapFieldsSubcontracts
Método responsavel por mapear os atributos do json com os campos da tabela de subcontratos

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method mapFieldsSubcontracts() As Logical Class SubcontractAdapter

    Self:oAdapterBase:addMapFields("subcontract-code", "BQC_SUBCON", .T., .F., {"BQC_SUBCON", "C", TamSX3("BQC_SUBCON")[1], 0})
    Self:oAdapterBase:addMapFields("subcontract-version-code", "BQC_VERSUB", .T., .F., {"BQC_VERSUB", "C", TamSX3("BQC_VERSUB")[1], 0})
	Self:oAdapterBase:addMapFields("description", "BQC_DESCRI", .T., .F., {"BQC_DESCRI", "C", TamSX3("BQC_DESCRI")[1], 0})
	Self:oAdapterBase:addMapFields("subcontract-date", "BQC_DATCON", .T., .F., {"BQC_DATCON", "C", TamSX3("BQC_DATCON")[1], 0}, Self:getFormatDate("BQC_DATCON"))
	Self:oAdapterBase:addMapFields("expiration-date", "BQC_VALID", .T., .F., {"BQC_VALID", "C", TamSX3("BQC_VALID")[1], 0}, Self:getFormatDate("BQC_VALID"))

Return .T.

/*/{Protheus.doc} getQuerySubcontracts
Método responsavel por retornar o corpo da query que busca os subcontratos

@type Method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method getQuerySubcontracts() As Character Class SubcontractAdapter

	Local cQuery As Character
	
	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BQC")+" BQC "

	If Self:jParams:hasProperty("login-user")
		// Usuario Portal x Empresa
		cQuery += " INNER JOIN "+RetSqlName("B40")+" B40 "
		cQuery += "   ON B40.B40_FILIAL = '"+xFilial("B40")+"' "
		cQuery += "  AND B40.B40_CODINT = BQC.BQC_CODINT "
		cQuery += "  AND B40.B40_CODEMP = BQC.BQC_CODEMP "
		cQuery += "  AND B40.B40_NUMCON = BQC.BQC_NUMCON "
		cQuery += "  AND B40.B40_VERCON = BQC.BQC_VERCON "
		cQuery += "  AND ((B40.B40_SUBCON = BQC.BQC_SUBCON AND B40.B40_VERSUB = BQC.BQC_VERSUB) OR B40.B40_SUBCON = ' ')" // Subcontrato vazio (B40_SUBCON), será retornado todos os subcontratos
		cQuery += "  AND B40.D_E_L_E_T_ = ' ' "
		// Usuarios do Portal
		cQuery += " INNER JOIN "+RetSqlName("BSW")+" BSW "
		cQuery += "   ON BSW.BSW_FILIAL = '"+xFilial("BSW")+"' "
		cQuery += "  AND BSW.BSW_CODUSR = B40.B40_CODUSR "
		cQuery += "  AND BSW.D_E_L_E_T_ = ' ' "
	EndIf

  	cQuery += " WHERE #QueryWhere#"

Return cQuery

/*/{Protheus.doc} getWhereSubcontracts
Método responsavel por retornar o WHERE da query que busca os subcontratos

@type Method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method getWhereSubcontracts() As Character Class SubcontractAdapter

	Local cQuery As Character
	Local nSizeFieldContract := TamSX3("BQC_NUMCON")[1] As Numeric
	
	cQuery := " BQC.BQC_FILIAL = '"+xFilial("BQC")+"' AND "
	cQuery += " BQC.BQC_CODIGO = '"+Self:jParams["health-insurer-code"]+Self:jPath["companyCode"]+"' AND "
	cQuery += " BQC.BQC_NUMCON = '"+Substr(Self:jPath["contractCode"], 1, nSizeFieldContract)+"' AND "

	If Len(Self:jPath["contractCode"]) > nSizeFieldContract
		cQuery += " BQC.BQC_VERCON = '"+Substr(Self:jPath["contractCode"], nSizeFieldContract+1)+"' AND "
	EndIf

	If Self:jParams:hasProperty("login-user")
		cQuery += " UPPER(BSW.BSW_LOGUSR) = '"+Upper(Self:jParams["login-user"])+"' AND "
	EndIf

	cQuery += " BQC.D_E_L_E_T_ = ' '"

Return cQuery

/*/{Protheus.doc} getOrderSubcontracts
Método responsavel por retornar a ORDEM da query que busca os contratos

@type Method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method getOrderSubcontracts() As Character Class SubcontractAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BQC.BQC_CODIGO, BQC.BQC_NUMCON, BQC.BQC_VERCON, BQC.BQC_SUBCON, BQC.BQC_VERSUB"

Return cOrdemQuery
