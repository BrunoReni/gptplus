#include "tlpp-core.th"

namespace totvs.protheus.health.plans.api.attendance.refund.expense

using namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} ExpenseAdapter
Classe que monta a collection das despesas do protocolo de reembolso

@type class
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 02/05/2023
/*/
class ExpenseAdapter from BaseAdapter

	public method new() Constructor
	public method getPageExpenses() as logical

	private method mapFieldsExpenses() as logical
	private method getQueryExpenses() as character
	private method getWhereExpenses() as character
	private method getOrderExpenses() as character
    
endclass

/*/{Protheus.doc} new
Contrutor da classe

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 02/05/2023
@return object, objecto da classe ExpenseAdapter
/*/
method new() class ExpenseAdapter

	_Super:new()

return self

/*/{Protheus.doc} getPageExpenses
Monta os dados (query, where, order e fields) para buscar as despesas do protocolo
de reembolo na base de dados

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 02/05/2023
@return logical, se houve sucesso na montagem da pagina das despesas
/*/
method getPageExpenses() as logical class ExpenseAdapter

	local lSucess := .F. as logical
    local cQuery := self:getQueryExpenses() as character
    local cWhere := self:getWhereExpenses() as character
    local cOrder := self:getOrderExpenses() as character
	
	self:mapFieldsExpenses()

	If self:executeQueryAdapter(cQuery, cWhere, cOrder)
		lSucess := .T.
	endif

return lSucess

/*/{Protheus.doc} mapFieldsExpenses
Mapea os campos do json de retorno com os campos do Protheus (SX3)

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 02/05/2023
@return logical, sempre será retornado verdadeiro
/*/
method mapFieldsExpenses() as logical class ExpenseAdapter

	self:oAdapterBase:addMapFields("status", "B1N_IMGSTA", .T., .F., {"B1N_IMGSTA", "C", tamSX3("B1N_IMGSTA")[1], 0}, " CASE WHEN B1N.B1N_IMGSTA = 'ENABLE' THEN '1' ELSE '0' END ")
    self:oAdapterBase:addMapFields("subscriber-id", "B1N_MATRIC", .T., .F., {"B1N_MATRIC", "C", tamSX3("B1N_MATRIC")[1], 0})
    self:oAdapterBase:addMapFields("beneficiary-name", "BA1_NOMUSR", .T., .F., {"BA1_NOMUSR", "C", tamSX3("BA1_NOMUSR")[1], 0})
    self:oAdapterBase:addMapFields("protocol", "B1N_PROTOC", .T., .F., {"B1N_PROTOC", "C", tamSX3("B1N_PROTOC")[1], 0})
    self:oAdapterBase:addMapFields("sequential", "B1N_SEQUEN", .T., .F., {"B1N_SEQUEN", "C", tamSX3("B1N_SEQUEN")[1], 0})
    self:oAdapterBase:addMapFields("procedure-class", "B1N_TIPSER", .T., .F., {"B1N_TIPSER", "C", tamSX3("B1N_TIPSER")[1], 0})
    self:oAdapterBase:addMapFields("table-code", "B1N_CODPAD", .T., .F., {"B1N_CODPAD", "C", tamSX3("B1N_CODPAD")[1], 0})
    self:oAdapterBase:addMapFields("procedure-code", "BR8_CODPSA", .T., .F., {"BR8_CODPSA", "C", tamSX3("BR8_CODPSA")[1], 0})
    self:oAdapterBase:addMapFields("procedure-description", "BR8_DESCRI", .T., .F., {"BR8_DESCRI", "C", tamSX3("BR8_DESCRI")[1], 0})
    self:oAdapterBase:addMapFields("continuous-use", "B1N_USOCON", .T., .F., {"B1N_USOCON", "C", tamSX3("B1N_USOCON")[1], 0})
    self:oAdapterBase:addMapFields("quantity", "B1N_QTDPRO", .T., .F., {"B1N_QTDPRO", "N", tamSX3("B1N_QTDPRO")[1], 0})
    self:oAdapterBase:addMapFields("expense-amount", "B1N_VLRAPR", .T., .F., {"B1N_VLRAPR", "N", tamSX3("B1N_VLRAPR")[1], 0})
    self:oAdapterBase:addMapFields("total-expense-amount", "B1N_VLRTOT", .T., .F., {"B1N_VLRTOT", "N", tamSX3("B1N_VLRTOT")[1], 0})
    self:oAdapterBase:addMapFields("refunded-amount", "B1N_VLRREE", .T., .F., {"B1N_VLRREE", "N", tamSX3("B1N_VLRREE")[1], 0})
    self:oAdapterBase:addMapFields("unreferenced-network-identifier", "B1N_CODREF", .T., .F., {"B1N_CODREF", "C", tamSX3("B1N_CODREF")[1], 0})
    self:oAdapterBase:addMapFields("unreferenced-network-name", "B1N_NOMREF", .T., .F., {"B1N_NOMREF", "C", tamSX3("B1N_NOMREF")[1], 0})
    self:oAdapterBase:addMapFields("state-abbreviation", "B1N_EST", .T., .F., {"B1N_EST", "C", tamSX3("B1N_EST")[1], 0})
    self:oAdapterBase:addMapFields("city-code", "B1N_CODMUN", .T., .F., {"B1N_CODMUN", "C", tamSX3("B1N_CODMUN")[1], 0})
    self:oAdapterBase:addMapFields("document-code", "BBS_COD", .T., .F., {"BBS_COD", "C", tamSX3("BBS_COD")[1], 0})
    self:oAdapterBase:addMapFields("document-description", "B1N_TIPDOC", .T., .F., {"B1N_TIPDOC", "C", tamSX3("B1N_TIPDOC")[1], 0})
    self:oAdapterBase:addMapFields("document-number", "B1N_NUMDOC", .T., .F., {"B1N_NUMDOC", "C", tamSX3("B1N_NUMDOC")[1], 0})
    self:oAdapterBase:addMapFields("document-date", "B1N_DATDOC", .T., .F., {"B1N_DATDOC", "C", tamSX3("B1N_DATDOC")[1], 0}, self:getFormatDate("B1N_DATDOC"))
    self:oAdapterBase:addMapFields("execution-date", "B1N_DATPRO", .T., .F., {"B1N_DATPRO", "C", tamSX3("B1N_DATPRO")[1], 0}, self:getFormatDate("B1N_DATPRO"))
    
return .T.

/*/{Protheus.doc} getQueryExpenses
Retorna corpo da query que busca as despesas do protocolo de reembolso

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 03/05/2023
@return character, corpo da query das despesas
/*/
method getQueryExpenses() as character class ExpenseAdapter

	local cQuery as character
    local cDatabaseInUse := upper(TCGetDB())
    local cSubstrOperatorSQL := iif(cDatabaseInUse $ "ORACLE|DB2|POSTGRES|INFORMIX", "SUBSTR", "SUBSTRING") as character

	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("B1N")+" B1N "
    // Beneficiário
    cQuery += " INNER JOIN "+RetSqlName("BA1")+" BA1 "
    cQuery += "   ON BA1.BA1_FILIAL = '"+xFilial("BA1")+"' "
    cQuery += "  AND BA1.BA1_CODINT = "+cSubstrOperatorSQL+"(B1N.B1N_MATRIC, 1, 4) "
    cQuery += "  AND BA1.BA1_CODEMP = "+cSubstrOperatorSQL+"(B1N.B1N_MATRIC, 5, 4) "
    cQuery += "  AND BA1.BA1_MATRIC = "+cSubstrOperatorSQL+"(B1N.B1N_MATRIC, 9, 6) "
    cQuery += "  AND BA1.BA1_TIPREG = "+cSubstrOperatorSQL+"(B1N.B1N_MATRIC, 15, 2) "
    cQuery += "  AND BA1.BA1_DIGITO = "+cSubstrOperatorSQL+"(B1N.B1N_MATRIC, 17, 1) "
    cQuery += "  AND BA1.D_E_L_E_T_ = ' ' "
    // Procedimento
    cQuery += " INNER JOIN "+RetSqlName("BR8")+" BR8 "
    cQuery += "   ON BR8.BR8_FILIAL = '"+xFilial("BR8")+"' "
    cQuery += "  AND BR8.BR8_CODPAD = B1N.B1N_CODPAD "
    cQuery += "  AND BR8.BR8_CODPSA = B1N.B1N_CODPRO "
    cQuery += "  AND BR8.D_E_L_E_T_ = ' ' "
    // Documento
    cQuery += " INNER JOIN "+RetSqlName("BBS")+" BBS "
    cQuery += "   ON BBS.BBS_FILIAL = '"+xFilial("BBS")+"' "
    cQuery += "  AND BBS.BBS_DESCRI = B1N.B1N_TIPDOC "
    cQuery += "  AND BBS.D_E_L_E_T_ = ' ' "

    cQuery += " WHERE #QueryWhere#"
 
return cQuery

/*/{Protheus.doc} getWhereExpenses
Retorna a parte do where da query que busca as despesas do protocolo de reembolso

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 03/05/2023
@return character, where da query das despesas do reembolso
/*/
method getWhereExpenses() as character class ExpenseAdapter

	local cWhere as character
	
	cWhere := " B1N.B1N_FILIAL = '"+xFilial("B1N")+"' "
    cWhere += " AND B1N.B1N_PROTOC = '"+self:jPath["protocol"]+"' "    
    cWhere += " AND B1N.D_E_L_E_T_ = ' ' "

return cWhere

/*/{Protheus.doc} getOrderExpenses
Retorna a parte do order da query que busca as despesas do reembolso

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 03/05/2023
@return character, order da query das despesas do protocolo de reembolso
/*/
method getOrderExpenses() as character class ExpenseAdapter

	local cOrder as character
	
	cOrder := "B1N.B1N_SEQUEN"

return cOrder
