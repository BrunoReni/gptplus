#include "tlpp-core.th"

namespace totvs.protheus.health.plans.api.attendance.refund

using namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} RefundAdapter
Classe que monta a collection dos protocolos de reembolsos do
beneficiário

@type class
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
/*/
class RefundAdapter from BaseAdapter

	public method new() constructor
	public method getPageRefunds() as logical

	private method mapFieldsRefunds() as logical
	private method getQueryRefunds() as character
	private method getWhereRefunds() as character
	private method getOrderRefunds() as character
    
    private method getStatusProtheus() as character
    private method getStatusAPIQuery() as character
    private method getFormatPaymentDate() as character

endclass

/*/{Protheus.doc} new
Contrutor da classe

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@return object, objecto da classe RefundAdapter
/*/
method new() class RefundAdapter

	_Super:new()

return self

/*/{Protheus.doc} getPageRefunds
Monta os dados (query, where, order e fields) para buscar os protocolos de reembolso na
base de dados

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@return logical, se houve sucesso na montagem da pagina
/*/
method getPageRefunds() as logical class RefundAdapter

	local lSucess := .F. as logical
    local cQuery := self:getQueryRefunds() as character
    local cWhere := self:getWhereRefunds() as character
    local cOrder := self:getOrderRefunds() as character
	
	self:mapFieldsRefunds()

	if self:executeQueryAdapter(cQuery, cWhere, cOrder)
		lSucess := .T.
	endif

return lSucess

/*/{Protheus.doc} mapFieldsRefunds
Mapea os campos do json de retorno com os campos do Protheus (SX3)

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@return logical, sempre será retornado verdadeiro
/*/
method mapFieldsRefunds() as logical class RefundAdapter

	self:oAdapterBase:addMapFields("status", "BOW_STATUS", .T., .F., {"BOW_STATUS", "C", TamSX3("BOW_STATUS")[1], 0}, self:getStatusAPIQuery())
	self:oAdapterBase:addMapFields("protocol", "BOW_PROTOC", .T., .F., {"BOW_PROTOC", "C", TamSX3("BOW_PROTOC")[1], 0})
	self:oAdapterBase:addMapFields("request-date", "BOW_DTDIGI", .T., .F., {"BOW_DTDIGI", "C", TamSX3("BOW_DTDIGI")[1], 0}, self:getFormatDate("BOW_DTDIGI"))
	self:oAdapterBase:addMapFields("presented-amount", "BOW_VLRAPR", .T., .F., {"BOW_VLRAPR", "N", TamSX3("BOW_VLRAPR")[1], 0})
    self:oAdapterBase:addMapFields("refunded-amount", "BOW_VLRREE", .T., .F., {"BOW_VLRREE", "N", TamSX3("BOW_VLRREE")[1], 0})
    self:oAdapterBase:addMapFields("payment-date", "BOW_PGMTO", .T., .F., {"BOW_PGMTO", "C", TamSX3("BOW_PGMTO")[1], 0}, self:getFormatPaymentDate())
    self:oAdapterBase:addMapFields("beneficiary-name", "BOW_NOMUSR", .T., .F., {"BOW_NOMUSR", "C", TamSX3("BOW_NOMUSR")[1], 0})
    self:oAdapterBase:addMapFields("observation", "BOW_OBS", .T., .F., {"BOW_OBS", "M", TamSX3("BOW_OBS")[1], 0})

return .T.

/*/{Protheus.doc} getQueryRefunds
Retorna corpo da query que busca os protocolos de reembolso

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@return character, corpo da query dos protocolos de reembolso
/*/
method getQueryRefunds() as character class RefundAdapter

	local cQuery as character

	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BOW")+" BOW "
    // Título no contas a pagar (MV_PLRESE1 = 0)
    cQuery += " LEFT JOIN "+RetSqlName("SE2")+" SE2 "
    cQuery += "   ON SE2.E2_FILIAL = '"+xFilial("SE2")+"' "
    cQuery += "  AND SE2.E2_PREFIXO = BOW.BOW_PREFIX "
    cQuery += "  AND SE2.E2_NUM = BOW.BOW_NUM "
    cQuery += "  AND SE2.E2_PARCELA = BOW.BOW_PARCEL "
    cQuery += "  AND SE2.E2_TIPO = BOW.BOW_TIPO "
    cQuery += "  AND SE2.D_E_L_E_T_ = ' ' "
    // Título no contas a receber (MV_PLRESE1 = 1)
    cQuery += " LEFT JOIN "+RetSqlName("SE1")+" SE1 "
    cQuery += "   ON SE1.E1_FILIAL = '"+xFilial("SE1")+"' "
    cQuery += "  AND SE1.E1_PREFIXO = BOW.BOW_PREFIX "
    cQuery += "  AND SE1.E1_NUM = BOW.BOW_NUM "
    cQuery += "  AND SE1.E1_PARCELA = BOW.BOW_PARCEL
    cQuery += "  AND SE1.E1_TIPO = BOW.BOW_TIPO "
    cQuery += "  AND SE1.D_E_L_E_T_ = ' ' "
    cQuery += " WHERE #QueryWhere#"
 
return cQuery

/*/{Protheus.doc} getWhereRefunds
Retorna a parte do where da query que busca os protocolos de reembolso

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@return character, where da query dos protocolos de reembolso
/*/
method getWhereRefunds() as character class RefundAdapter

	local cWhere as character
    local cStatus as character
    local cFamilyTrackingCode as character
    local cFamilyCode := Substr(self:jParams["subscriber-id"], 1, 14) as character
    local cFamilyCodeList as character
	
	cWhere := " BOW.BOW_FILIAL = '"+xFilial("BOW")+"' "

    cFamilyTrackingCode := Posicione("BA3", 1, xFilial("BA3")+cFamilyCode, "BA3_CODRAS")
    if !Empty(cFamilyTrackingCode)
        cFamilyCodeList := PLSRETRAS(cFamilyTrackingCode, cFamilyCode) // Busca outras familias com o código de rastreio

        cWhere += " AND "+self:substrOperator()+"(BOW.BOW_USUARI, 1, 14) IN ("+cFamilyCodeList+") "
    else
        cWhere += " AND "+self:substrOperator()+"(BOW.BOW_USUARI, 1, 14) = '"+cFamilyCode+"' "
    endif

    if self:jParams:hasProperty("protocol")
        cWhere += " AND BOW.BOW_PROTOC = '"+self:jParams["protocol"]+"' "
    else
        if self:jParams:hasProperty("request-date-initial") .And. self:jParams:hasProperty("request-date-final")
            cWhere += " AND BOW.BOW_DTDIGI >= '"+self:convertDateFormat(self:jParams["request-date-initial"], "S")+"' "
            cWhere += " AND BOW.BOW_DTDIGI <= '"+self:convertDateFormat(self:jParams["request-date-final"], "S")+"' "
        endif

        if self:jParams:hasProperty("status")
            cStatus := self:getStatusProtheus(self:jParams["status"])

            if !Empty(cStatus)
                cWhere += " AND BOW.BOW_STATUS IN ("+self:breakValueQuery(cStatus)+") "
            endif
        endif
    endif
    
    cWhere += " AND BOW.D_E_L_E_T_ = ' ' "

return cWhere

/*/{Protheus.doc} getOrderRefunds
Retorna a parte do order da query que busca os protocolos de reembolso

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@return character, order da query dos protocolos de reembolso
/*/
method getOrderRefunds() as character class RefundAdapter

	local cOrder as character
	
	cOrder := "BOW.BOW_PROTOC"

return cOrder

/*/{Protheus.doc} getStatusProtheus
Retorna os status do protheus de acordo com os status da api de
protocolo de reembolso

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@param cStatus, character, status enviado pela api
@return character, Status do Protheus (BOW_STATUS)
/*/
method getStatusProtheus(cStatusAPI as character) as character class RefundAdapter

	local cStatusProtheus as character
    local aStatusAPI := {} as array
    local cStatus as character
    local nX as numeric

    aStatusAPI := StrToKarr(cStatusAPI, ",")

    if Len(aStatusAPI) > 0
        for nX := 1 to Len(aStatusAPI)
            cStatus := ""

            do case
                case aStatusAPI[nX] == "0" // Solicitação não concluída
                    cStatus += "A"
                
                case aStatusAPI[nX] == "1" // Protocolado
                    cStatus += "0,1"
                
                case aStatusAPI[nX] == "2" // Em analise
                    cStatus += "2,3,5,9"
                
                case aStatusAPI[nX] == "3" // Reembolso aprovado
                    cStatus += "6"

                case aStatusAPI[nX] == "4" // Reembolso rejeitado
                    cStatus += "4,7,8"

                case aStatusAPI[nX] == "5" // Aguardando informação do Beneficiário
                    cStatus += "B"

                case aStatusAPI[nX] == "6" // Aprovado Parcialmente
                    cStatus += "C"

                case aStatusAPI[nX] == "7" // Cancelado
                    cStatus += "D"

                case aStatusAPI[nX] == "8" // Reembolso revertido
                    cStatus += "E"
            endcase

            if !Empty(cStatus)
                cStatusProtheus += iif(Empty(cStatusProtheus), cStatus, ","+cStatus)
            endif

        next nX
    endif
	
return cStatusProtheus

/*/{Protheus.doc} getStatusAPIQuery
Retorna os status da api x Protheus para a query de busca dos protocolos

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@return character, Campo status da query com os case de de/para
/*/
method getStatusAPIQuery() as character class RefundAdapter

    local cQuery as character

    cQuery := " CASE WHEN BOW.BOW_STATUS = 'A' THEN '0' " // Solicitação não concluída
    cQuery += "      WHEN BOW.BOW_STATUS = '0' OR BOW.BOW_STATUS = '1' THEN '1' " // Protocolado
    cQuery += "      WHEN BOW.BOW_STATUS = '2' OR BOW.BOW_STATUS = '3' OR BOW.BOW_STATUS = '5' OR BOW.BOW_STATUS = '9' THEN '2' " // Em analise
    cQuery += "      WHEN BOW.BOW_STATUS = '6' THEN '3' " // Reembolso aprovado
    cQuery += "      WHEN BOW.BOW_STATUS = '4' OR BOW.BOW_STATUS = '7' OR BOW.BOW_STATUS = '8' THEN '4' " // Reembolso rejeitado
    cQuery += "      WHEN BOW.BOW_STATUS = 'B' THEN '5' " // Aguardando informação do Beneficiário
    cQuery += "      WHEN BOW.BOW_STATUS = 'C' THEN '6' " // Aprovado Parcialmente
    cQuery += "      WHEN BOW.BOW_STATUS = 'D' THEN '7' " // Cancelado
    cQuery += "      WHEN BOW.BOW_STATUS = 'E' THEN '8' " // Reembolso revertido
	cQuery += " ELSE BOW.BOW_STATUS "
    cQuery += " END "

return cQuery

/*/{Protheus.doc} getFormatPaymentDate
Retorna o campo da query no formato YYYY-MM-DD da data de pagamento, sendo do 
contas a pagar (SE2) ou contas a receber (SE1)

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 27/04/2023
@return character, Campo da data de pagamento da query
/*/
method getFormatPaymentDate() as character class RefundAdapter

	local cQuery as character

	cQuery :=  " CASE WHEN SE2.E2_VENCTO <> '' THEN "+;
				self:substrOperator()+"(SE2.E2_VENCTO, 1, 4)"+self:concatOperator()+"'-'"+self:concatOperator()+;
				self:substrOperator()+"(SE2.E2_VENCTO, 5, 2)"+self:concatOperator()+"'-'"+self:concatOperator()+;
				self:substrOperator()+"(SE2.E2_VENCTO, 7, 2) "+;
                " WHEN SE1.E1_VENCTO <> '' THEN "+;
                self:substrOperator()+"(SE1.E1_VENCTO, 1, 4)"+self:concatOperator()+"'-'"+self:concatOperator()+;
				self:substrOperator()+"(SE1.E1_VENCTO, 5, 2)"+self:concatOperator()+"'-'"+self:concatOperator()+;
				self:substrOperator()+"(SE1.E1_VENCTO, 7, 2) "+;
				" ELSE '' END "

return cQuery
