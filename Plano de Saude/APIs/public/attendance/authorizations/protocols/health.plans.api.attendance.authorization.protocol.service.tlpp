#Include "tlpp-core.th"
#Include "fwmvcdef.ch"

Namespace totvs.protheus.health.plans.api.attendance.authorization.protocol

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} AuthorizationProtocolService
Classe de serviço de protocolo de autorização - Regra de Negócio

@type class
@author Vinicius Queiros Teixeira
@since 21/03/2023
@version Protheus 12
/*/
Class AuthorizationProtocolService From BaseService

    Private Data cProtocolNumber As Character
    Private Data oAdapter As Object

    Public Method new() Constructor
    Public Method postAuthorizationProtocol() As Logical
    Public Method getAuthorizationProtocol() As Logical
    Public Method getInteractionsProtocol() As Logical
    Public Method postProtocolsAttachment() As Logical

    Private Method addAuthorizationProtocol() As Logical
    Private Method addProtocolsAttachment() As Logical
    Private Method setJsonResponse() As Logical


EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 21/03/2023
@version Protheus 12
/*/
Method new() Class AuthorizationProtocolService

    _Super:new()

Return Self

/*/{Protheus.doc} postAuthorizationProtocol
Método responsavel por cadastrar o protocolo de autorização do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 21/03/2023
@version Protheus 12
/*/
Method postAuthorizationProtocol() As Logical Class AuthorizationProtocolService

    Local lSucess := .F. As Logical
    Local aFields := {} As Array

    // Verifica se os campos do body estão validos
    aAdd(aFields, {"field" : "subscriberId", "required" : .T., "type" : "C", "size" : tamSX3("BA1_CODINT")[1]+tamSX3("BA1_CODEMP")[1]+tamSX3("BA1_MATRIC")[1]+tamSX3("BA1_TIPREG")[1]+tamSX3("BA1_DIGITO")[1]})
    aAdd(aFields, {"field" : "stateAbbreviation", "required" : .F., "type" : "C"})
    aAdd(aFields, {"field" : "professionalCouncil", "required" : .F., "type" : "C"})
    aAdd(aFields, {"field" : "professionalCouncilNumber", "required" : .F., "type" : "C"})
    aAdd(aFields, {"field" : "professionalName", "required" : .T., "type" : "C"})
    aAdd(aFields, {"field" : "attachments", "required" : .T., "type" : "A"})

    If Self:checkBodyFields(aFields, "E002")
        BA1->(DBSetOrder(2)) // BA1_FILIAL + BA1_CODINT + BA1_CODEMP + BA1_MATRIC + BA1_TIPREG + BA1_DIGITO
        If BA1->(MsSeek(xFilial("BA1")+Self:jBody["subscriberId"]))
            If Self:addAuthorizationProtocol()
                lSucess := .T.
                Self:nCodeStatus := 201 // Create 
            EndIf
        Else	
            Self:setError("E003", "Beneficiário não encontrado",;
                                  "Não foi encontrado nenhum beneficiário com a matricula "+Self:jBody["subscriberId"],;
                                  404) // Not Found
        EndIf        
    EndIf

Return lSucess

/*/{Protheus.doc} addAuthorizationProtocol
Método responsavel por incluir um novo protocolo de autorização
para o beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 21/03/2023
@version Protheus 12
/*/
Method addAuthorizationProtocol() As Logical Class AuthorizationProtocolService

    Local lAdd := .F. As Logical
    Local oModel As Object
    Local oModelBKU As Object
    Local nX := 0 As Numeric
    Local aFields := {} As Array
    Local aDetailsErro := {} As Array
    Local jDownload As Json
    Local aAttachments := {} As Array

    Self:cProtocolNumber := P773GerPro("")

    oModel := FWLoadModel("PLSA09U")
	oModel:setOperation(MODEL_OPERATION_INSERT)
	oModel:activate()

	oModelBKU := oModel:getModel("BKUMASTER")

	oModelBKU:setValue("BKU_NRPRO", Self:cProtocolNumber)
    oModelBKU:setValue("BKU_MATUSR", Self:jBody["subscriberId"])
    oModelBKU:setValue("BKU_NOMUSR", Substr(Posicione("BA1", 2, xFilial("BA1")+Self:jBody["subscriberId"], "BA1_NOMUSR"), 1, tamSX3("BKU_NOMUSR")[1]))
    oModelBKU:setValue("BKU_UF", Self:jBody["stateAbbreviation"])
	oModelBKU:setValue("BKU_SIGLA", Self:jBody["professionalCouncil"])
    oModelBKU:setValue("BKU_REGSOL", Self:jBody["professionalCouncilNumber"])   
    oModelBKU:setValue("BKU_NOMSOL", Self:jBody["professionalName"])
    oModelBKU:setValue("BKU_STATUS", "7") // 7 = Solicitação em Analise

    If !oModelBKU:vldData(.F.)
        aAdd(aDetailsErro, {"code" : "E004-A",;
                            "message" : AllTrim(oModel:getErrorMessage()[6]),;
                            "detailedMessage" : "Id do campo de erro: "+AllTrim(oModel:getErrorMessage()[4])+"; Id do erro: "+AllTrim(oModel:getErrorMessage()[5])})
    EndIf

    aAdd(aFields, {"field" : "href", "required" : .T., "type" : "C"})

    For nX := 1 To Len(Self:jBody["attachments"])   
        // Verifica se os campos do attachments do json estão validos 
        If Self:checkBodyFields(aFields, "E004-"+cValToChar(nX), Self:jBody["attachments"][nX], @aDetailsErro, .F.)
            jDownload := Self:fileDownload(Self:jBody["attachments"][nX]["href"])

            If jDownload["sucess"]
                aAdd(aAttachments, {"fileDirectory" : jDownload["fileDirectory"]})
            Else
                aAdd(aDetailsErro, {"code" : "E004-"+cValToChar(nX),;
                                    "message" : jDownload["message"],;
                                    "detailedMessage" : jDownload["detailedMessage"]})
            EndIf
        EndIf
    Next nX 

    If Len(aDetailsErro) == 0 .And. oModel:vldData()
        oModel:commitData()
        // Anexa no banco de conhecimento os arquivos recebidos
        Self:addknowledgeBank(aAttachments, "BKU", xFilial("BKU")+Self:cProtocolNumber)
        
        lAdd := Self:setJsonResponse()
    Else
        // Exclui os downloads realizados com sucesso
        If Len(aAttachments) > 0
            For nX := 1 To Len(aAttachments)
                FErase(aAttachments[nX]["fileDirectory"])
            Next nX
        EndIf

        Self:setError("E004", "Erro ao incluir protocolo de autorização",;
                              "Verifique a lista de erros para mais detalhes",;
                              400,; // Bad Request
                              aDetailsErro)
    EndIf

    oModel:deActivate()
	oModel:destroy()
	freeObj(oModel)
	oModel := Nil
	 
Return lAdd

/*/{Protheus.doc} setJsonResponse
Método responsavel por setar o json de resposta do protocolo de autorização

@type method
@author Vinicius Queiros Teixeira
@since 21/03/2023
@version Protheus 12
/*/
Method setJsonResponse() As Logical Class AuthorizationProtocolService

    Local lOk := .F. As Logical

    BKU->(DbSetOrder(1))
    If BKU->(MsSeek(xFilial("BKU")+Self:cProtocolNumber))
        lOk := .T.
        Self:setAttributeJson({"attribute" : "protocol", "value" : BKU->BKU_NRPRO , "type" : "C", "setResponse" : .T.})
        Self:setAttributeJson({"attribute" : "name", "value" : BKU->BKU_NOMUSR, "type" : "C", "setResponse" : .T.})
        Self:setAttributeJson({"attribute" : "subscriberId", "value" : BKU->BKU_MATUSR, "type" : "C", "setResponse" : .T.}) 
        Self:setAttributeJson({"attribute" : "professionalName", "value" : BKU->BKU_NOMSOL, "type" : "C", "setResponse" : .T.})
        Self:setAttributeJson({"attribute" : "stateAbbreviation", "value" : BKU->BKU_UF, "type" : "C", "setResponse" : .T.})
        Self:setAttributeJson({"attribute" : "professionalCouncil", "value" : BKU->BKU_SIGLA, "type" : "C", "setResponse" : .T.})
        Self:setAttributeJson({"attribute" : "professionalCouncilNumber", "value" : BKU->BKU_REGSOL, "type" : "C", "setResponse" : .T.})    
        Self:setAttributeJson({"attribute" : "status", "value" : BKU->BKU_STATUS, "type" : "C", "setResponse" : .T.})
        Self:setAttributeJson({"attribute" : "idOnHealthInsurer", "value" : BKU->BKU_NUMAUT, "type" : "C", "setResponse" : .T.})
        Self:setAttributeJson({"attribute" : "authType", "value" : BKU->BKU_TIPO, "type" : "C", "setResponse" : .T.})
    EndIf

Return lOk


/*/{Protheus.doc} getAuthorization
Método responsavel por retornar os dados das Solicitações de Autorização

@type method
@author Gabriela Cattin
@since 14/03/2023
@version Protheus 12
/*/
Method getAuthorizationProtocol() As Logical Class AuthorizationProtocolService

    Local lSucess := .F. As Logical
    Local aKeys := {} As Array

    BA1->(DbSetOrder(2))

    // Chaves do path Params obrigatórios na api
    aAdd(aKeys, {"type" : "pathParams", "key" : "subscriberId"})

    If Self:checkRequiredKeys(aKeys, "E001")
        //Verifica se a matricula do beneficiário está correta
        If !BA1->(MsSeek(xFilial("BA1")+Padr(Self:jPath["subscriberId"],tamSX3("BA1_CODINT")[1]+tamSX3("BA1_CODEMP")[1]+tamSX3("BA1_MATRIC")[1]+tamSX3("BA1_TIPREG")[1]+tamSX3("BA1_DIGITO")[1])))
            Self:setError("E001","Usuário não encontrado", "Não foi possível retornar os dados do beneficiário através da matrícula informada.",404)
        Else
            Self:oAdapter := AuthorizationProtocolAdapter():New()
            Self:oAdapter:setQueryParams(Self:jParams)
            Self:oAdapter:setPathParams(Self:jPath)

            If Self:oAdapter:getPageAuthorization()
                lSucess := .T.
                Self:nCodeStatus := 200
                Self:jResult := Self:oAdapter:getJsonResult()
            EndIf

        EndIf  

    EndIf
   
Return lSucess

/*/{Protheus.doc} getInteractions
Método responsavel por retornar as interações que houveram na solicitação de autorização

@type method
@author Gabriela Cattin
@since 17/03/2023
@version Protheus 12
/*/
Method getInteractionsProtocol() As Logical Class AuthorizationProtocolService

    Local lSucess := .F. As Logical
    Local aKeys := {} As Array

    // Chaves do path Params obrigatórios na api
    aAdd(aKeys, {"type" : "pathParams", "key" : "protocolId"})

    If Self:checkRequiredKeys(aKeys, "E001")
        BKU->(DbSetOrder(1))
        // verifica se existe dados com o numero de protocolo
        If !BKU->(MsSeek(xFilial("BKU")+Padr(Self:jPath["protocolId"],tamSX3("BKU_NRPRO")[1])))
            Self:setError("E002","Protocolo não encontrado", "Não foi possível retornar os dados da interação através do protocolo informado.",404)
        Else
            Self:oAdapter := AuthorizationProtocolAdapter():New()
            Self:oAdapter:setQueryParams(Self:jParams)
            Self:oAdapter:setPathParams(Self:jPath)

            If Self:oAdapter:getPageInteraction()
                lSucess := .T.
                Self:nCodeStatus := 200
                Self:jResult := Self:oAdapter:getJsonResult()
            EndIf
        EndIf   

    EndIf
   
Return lSucess

/*/{Protheus.doc} postProtocolsAttachment
Método responsavel por incluir anexos no protocolo enviado

@type method
@author Gabriela 
@since 23/03/23
@version Protheus 12
/*/
Method postProtocolsAttachment() As Logical Class AuthorizationProtocolService

    Local lSucess := .F. As Logical
    Local aFields := {} As Array

    // Verifica se os campos do body estão validos
    aAdd(aFields, {"field" : "protocol", "required" : .T., "type" : "C", "size" : tamSX3("BKU_NRPRO")[1]})
    aAdd(aFields, {"field" : "attachments", "required" : .T., "type" : "A"})

    If Self:checkBodyFields(aFields, "E002")                                                                                                               
        BKU->(DBSetOrder(1)) // BKU_FILIAL + BKU_NRPRO
        If BKU->(MsSeek(xFilial("BKU")+Self:jBody["protocol"]))
            If BKU->BKU_STATUS != "9"
                Self:setError("E003", "Status inválido","O Status do protocolo não permite o envio de anexos",400) // Not Found
            Else
                If Self:addProtocolsAttachment()
                    lSucess := .T.
                    Self:nCodeStatus := 201 // Create 
                EndIf
            EndIf
        Else	
            Self:setError("E004", "Protocolo nâo encontrado", "Não foi encontrado nenhum protocolo, informe um protocolo válido",404) // Not Found
        EndIf 
    EndIf

Return lSucess

/*/{Protheus.doc} addProtocolsAttachment
Método responsavel por adicionar novos anexos no registro do usuario com o status 9 - aguardando documento

@type method
@author Gabriela Cattin Gomes
@since 24/03/2023
@version Protheus 12
/*/
Method addProtocolsAttachment() As Logical Class AuthorizationProtocolService

    Local nX := 0 As Numeric
    Local lAdd := .F. As Logical
    Local aDetailsErro := {} As Array
    Local aFields := {} As Array
    Local jDownload As Json
    Local aAttachments := {} As Array
    Local oModel As Object

    aFields := {}
    aAdd(aFields, {"field" : "href", "required" : .T., "type" : "C"})

    For nX := 1 To Len(Self:jBody["attachments"])   
        // Verifica se os campos do attachments do json estão validos 
        If Self:checkBodyFields(aFields, "E006-"+cValToChar(nX), Self:jBody["attachments"][nX], @aDetailsErro, .F.)
            jDownload := Self:fileDownload(Self:jBody["attachments"][nX]["href"])

            If jDownload["sucess"]
                aAdd(aAttachments, {"fileDirectory" : jDownload["fileDirectory"]})
            Else
                aAdd(aDetailsErro, {"code" : "E006-"+cValToChar(nX),;
                                    "message" : jDownload["message"],;
                                    "detailedMessage" : jDownload["detailedMessage"]})
            EndIf
        EndIf
    Next nX 

    If Len(aDetailsErro) == 0 
        // Anexa no banco de conhecimento os arquivos recebidos
        Self:addknowledgeBank(aAttachments, "BKU", xFilial("BKU")+Self:jBody["protocol"])
        
        BKU->(DBSetOrder(1))
        If BKU->(MsSeek(xFilial("BKU")+Self:jBody["protocol"]))

            oModel := FWLoadModel("PLSA09U")
            oModel:setOperation(MODEL_OPERATION_UPDATE)
            oModel:activate()

            oModel:setValue("BKUMASTER","BKU_STATUS", "7")  

            If oModel:vldData()
                oModel:commitData()
            EndIf  

            oModel:deActivate()

	        freeObj(oModel)
	        oModel := Nil

        EndIf
        
        Self:cProtocolNumber := Self:jBody["protocol"]
        lAdd := Self:setJsonResponse()
    Else
        // Exclui os downloads realizados com sucesso
        If Len(aAttachments) > 0
            For nX := 1 To Len(aAttachments)
                FErase(aAttachments[nX]["fileDirectory"])
            Next nX
        EndIf

        Self:setError("E007", "Erro ao incluir um anexo",;
                              "Verifique a lista de erros para mais detalhes",;
                              400,; // Bad Request
                              aDetailsErro)
    EndIf

	 
Return lAdd
