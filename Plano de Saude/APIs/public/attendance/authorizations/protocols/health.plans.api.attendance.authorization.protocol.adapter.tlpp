#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.attendance.authorization.protocol

Using Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} AuthorizationProtocolAdapter
Classe adaptadora de collenction de Beneficiarios - Base de dados

@type class
@author Gabriela Cattin
@since 14/03/2023
@version Protheus 12
/*/
Class AuthorizationProtocolAdapter From BaseAdapter

	Public Method new() Constructor
	Public Method getPageAuthorization() As Logical
	Public Method getPageInteraction() As Logical

	Private Method mapFieldsAuthorization() As Logical
	Private Method getQueryAuthorization() As Character
	Private Method getWhereAuthorization() As Character
	Private Method getOrderAuthorization() As Character

	Private Method mapFieldsInteraction() As Logical
	Private Method getQueryInteraction() As Character
	Private Method getWhereInteraction() As Character
	Private Method getOrderInteraction() As Character

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Gabriela Cattin
@since 14/03/2023
@version Protheus 12
/*/
Method new() class AuthorizationProtocolAdapter

	_Super:new()

Return Self

/*/{Protheus.doc} getPageAuthorization
Método responsavel por retornar a pagina de Solicitações de Autorização

@type method
@author Gabriela Cattin
@since 14/03/2023
@version Protheus 12
/*/
Method getPageAuthorization() As Logical Class AuthorizationProtocolAdapter

	Local lSucess := .F. As Logical
    Local cQuery := Self:getQueryAuthorization() As Character
    Local cWhere := Self:getWhereAuthorization() As Character
	Local cOrder := Self:getOrderAuthorization() As Character
	
	Self:mapFieldsAuthorization()

	If Self:executeQueryAdapter(cQuery, cWhere, cOrder)
		lSucess := .T.
	EndIf

Return lSucess

/*/{Protheus.doc} mapFieldsAuthorization
Método responsavel por mapear os atributos do json com os campos da tabela de Solicitações de autorização

@type method
@author Gabriela Cattin
@since 14/03/2023
@version Protheus 12
/*/
Method mapFieldsAuthorization() As Logical Class AuthorizationProtocolAdapter

	Self:oAdapterBase:addMapFields("protocol", "BKU_NRPRO", .T., .F., {"BKU_NRPRO", "C", TamSX3("BKU_NRPRO")[1], 0})
	Self:oAdapterBase:addMapFields("name", "BKU_NOMUSR", .T., .F., {"BKU_NOMUSR", "C", TamSX3("BKU_NOMUSR")[1], 0})
	Self:oAdapterBase:addMapFields("subscriber-id", "BKU_MATUSR", .T., .F., {"BKU_MATUSR", "C", TamSX3("BKU_MATUSR")[1], 0})
	Self:oAdapterBase:addMapFields("professional-name", "BKU_NOMSOL", .T., .F., {"BKU_NOMSOL", "C", TamSX3("BKU_NOMSOL")[1], 0})
	Self:oAdapterBase:addMapFields("professional-council", "BKU_SIGLA", .T., .F., {"BKU_SIGLA", "C", TamSX3("BKU_SIGLA")[1], 0})
	Self:oAdapterBase:addMapFields("professional-council-number", "BKU_REGSOL", .T., .F., {"BKU_REGSOL", "C", TamSX3("BKU_REGSOL")[1], 0})
    Self:oAdapterBase:addMapFields("status", "BKU_STATUS", .T., .F., {"BKU_STATUS", "C", TamSX3("BKU_STATUS")[1], 0})
	Self:oAdapterBase:addMapFields("id-on-health-insurer", "BKU_NUMAUT", .T., .F., {"BKU_NUMAUT", "C", TamSX3("BKU_NUMAUT")[1], 0})
	Self:oAdapterBase:addMapFields("auth-type", "BKU_TIPO", .T., .F., {"BKU_TIPO", "C", TamSX3("BKU_TIPO")[1], 0})

Return .T.

/*/{Protheus.doc} getQueryAuthorization
Método responsavel por retornar o corpo da query que busca as solicitações de autorização

@type Method
@author Gabriela Cattin
@since 15/03/2023
@version Protheus 12
/*/
Method getQueryAuthorization() As Character Class AuthorizationProtocolAdapter

	Local cQuery As Character
	
	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BKU")+" BKU "

  	cQuery += " WHERE #QueryWhere#"

Return cQuery

/*/{Protheus.doc} getWhereAuthorization
Método responsavel por retornar o WHERE da query que busca as solicitações de autorizaçao

@type Method
@author Gabriela Cattin

@since 15/03/2023
@version Protheus 12
/*/
Method getWhereAuthorization() As Character Class AuthorizationProtocolAdapter

	Local cQuery As Character
	
	cQuery := " BKU.BKU_FILIAL = '"+FWxFilial("BKU")+"' AND "
	cQuery += " BKU.BKU_MATUSR = '"+Self:jPath["subscriberId"]+"' AND "

	If Self:jParams:hasProperty("protocol")
		cQuery += " BKU.BKU_NRPRO = '"+Self:jParams["protocol"]+"' AND "		
	EndIf
	If Self:jParams:hasProperty("status")
		cQuery += " BKU.BKU_STATUS IN ("+Self:breakValueQuery(Self:jParams["status"])+") AND "
	EndIf
	cQuery += " BKU.D_E_L_E_T_ = ' '"

Return cQuery

/*/{Protheus.doc} getOrderAuthorization
Método responsavel por retornar a ORDEM da query que busca as solicitações de autorização

@type Method
@author Gabriela Cattin
@since 15/03/2023
@version Protheus 12
/*/
Method getOrderAuthorization() As Character Class AuthorizationProtocolAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BKU.BKU_MATUSR"

Return cOrdemQuery


/*/{Protheus.doc} mapFieldsInteraction
Método responsavel por mapear os atributos do json com os campos da tabela de interações da solicitação de autorização

@type method
@author Gabriela Cattin
@since 17/03/2023
@version Protheus 12
/*/
Method mapFieldsInteraction() As Logical Class AuthorizationProtocolAdapter

	Self:oAdapterBase:addMapFields("sector", "BBR_SETOR", .T., .F., {"BBR_SETOR", "C", TamSX3("BBR_SETOR")[1], 0})
	Self:oAdapterBase:addMapFields("name", "BKU_NOMUSR", .T., .F., {"BKU_NOMUSR", "C", TamSX3("BKU_NOMUSR")[1], 0})
	Self:oAdapterBase:addMapFields("interaction-date", "BBR_DTITER", .T., .F., {"BBR_DTITER", "C", TamSX3("BBR_DTITER")[1], 0}, self:getFormatDate("BBR_DTITER"))
	Self:oAdapterBase:addMapFields("default-reason", "BBP_DESMOT", .T., .F., {"BBP_DESMOT", "C", TamSX3("BBP_DESMOT")[1], 0})
	Self:oAdapterBase:addMapFields("observation", "BBP_OBSERV", .T., .F., {"BBP_OBSERV", "M", TamSX3("BBP_OBSERV")[1], 0})

Return .T.

/*/{Protheus.doc} getPageInteraction
Método responsavel por retornar a pagina de interações da solicitação de autorização

@type method
@author Gabriela Cattin
@since 17/03/2023
@version Protheus 12
/*/
Method getPageInteraction() As Logical Class AuthorizationProtocolAdapter

	Local lSucess := .F. As Logical
    Local cQuery := Self:getQueryInteraction() As Character
    Local cWhere := Self:getWhereInteraction() As Character
	Local cOrder := Self:getOrderInteraction() As Character
	
	Self:mapFieldsInteraction()

	If Self:executeQueryAdapter(cQuery, cWhere, cOrder)
		lSucess := .T.
	EndIf

Return lSucess

/*/{Protheus.doc} getQueryinteraction
Método responsavel por retornar o corpo da query que busca as interações da solicitação de autorização

@type Method
@author Gabriela Cattin
@since 17/03/2023
@version Protheus 12
/*/
Method getQueryInteraction() As Character Class AuthorizationProtocolAdapter

	Local cQuery As Character
	
	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BBR")+" BBR "
	cQuery += "INNER JOIN " +RetSqlName("BBP")+" BBP "
	cQuery += " ON BBP.BBP_FILIAL = '"+FWxFilial("BBP")+"' "
	cQuery += " AND BBP.BBP_SEQUEN = BBR.BBR_SEQMOP"
	cQuery += " AND BBP.BBP_OBSERV = BBR.BBR_OBSERV "
	cQuery += " INNER JOIN " +RetSqlName("BKU")+ " BKU "
	cQuery += " ON BKU.BKU_FILIAL = '"+FWxFilial("BKU")+"' "
	cQuery += " AND BKU.BKU_NRPRO = BBR.BBR_NRPRO"
  	cQuery += " WHERE #QueryWhere#"

Return cQuery

/*/{Protheus.doc} getWhereInteraction
Método responsavel por retornar o WHERE da query que busca as interações da solicitação de autorização

@type Method
@author Gabriela Cattin

@since 17/03/2023
@version Protheus 12
/*/
Method getWhereInteraction() As Character Class AuthorizationProtocolAdapter

	Local cQuery As Character
	
	cQuery := " BBR.BBR_FILIAL = '"+FWxFilial("BBR")+"' AND "
	cQuery += " BBR.BBR_NRPRO = '"+Self:jPath["protocolId"]+"' AND "
	cQuery += " BBR.D_E_L_E_T_ = ' '"

Return cQuery

/*/{Protheus.doc} getOrderInteractions
Método responsavel por retornar a ORDEM da query que busca as interações da solicitação de autorização

@type Method
@author Gabriela Cattin
@since 17/03/2023
@version Protheus 12
/*/
Method getOrderInteraction() As Character Class AuthorizationProtocolAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BBR.BBR_DTITER"

Return cOrdemQuery