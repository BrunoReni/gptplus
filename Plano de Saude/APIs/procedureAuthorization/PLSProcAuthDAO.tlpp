#INCLUDE "TOTVS.CH"

#define ELEGIVEL "S"
#define NAO_ELEGIVEL "N"

#define SOLICITACAO "S"
#define EXECUCAO    "E"

#define AUTORIZADO 1
#define NEGADO 0
#define AUDITORIA 2
#define PENDENTE 9

//Tipo de guias HAT
#define CONSULTA "1"

//Sadt no PLS
#define EXAME "2"
#define EXEC "3"
#define PRONTOSOCORRO "10"
#define TRATSERIADO "11" 	

#define RESUMO_INTERNACAO "5"
#define HONORARIO "6"
#define PRORROGACAO "8"
#define TRATODONTO "9" 	
#define INTERNACAO "4" 		
#define OPME "12" 			
#define QUIMIOTERAPIA "13" 	
#define RADIOTERAPIA "14" 

//Tipo de guias PLS
#DEFINE G_CONSULTA  "01"
#DEFINE G_SADT_ODON "02"
#DEFINE G_SOL_INTER "03"
#DEFINE G_REEMBOLSO "04" //nao usada no HAT
#DEFINE G_RES_INTER "05"
#DEFINE G_HONORARIO "06"
#DEFINE G_ANEX_QUIM "07"
#DEFINE G_ANEX_RADI "08"
#DEFINE G_ANEX_OPME "09"
#DEFINE G_REC_GLOSA "10" //nao usada no hat
#DEFINE G_PROR_INTE "11"

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSProcAuthDao

@author    PLSTEAM
@version   V12
@since     12/05/2022
/*/
//-------------------------------------------------------------------
class PLSProcAuthDao

    public data oJson as object

    public data cProcedureId
    public data aRejectionCauses as array

    public method new(cProcedureId, oJson) constructor
    public method authorization()

    protected method getValue(xTag, xValue)
    protected method vldLibReg(cAuthtype, cMainAuthorizationCode, cTableCode, cProcCode, lDigGui, dRequestDate, aProcAuto, aVldGen, cPrimaryICD, cNumLibe2)
    protected method vldExecOff(lSolict, lDigGui, nRecnoBD5, cChaveBD6, nRecBD6, cTableCode, cProcCode)
    protected method makeProcedure(aRet, cAuthtype, dRequestDate, cHospType, cTableCode, cProcCode, dDatNas, nReqQuantity, cTissVer, cOriTableCode, cOriProcCode, cOptionOrder, cMes, cAno, aDadUsr, aDadRda, cRegAte, cProcedureHour, cSpecialtyCode, cLocationCode, cTipPre, cPrimaryICD, cToothRegion, cSurfaces )
    protected method responseProcedure(lAuth, nStatus, lAto, lAuditoria, nReqQuantity, cTpProc, cDesProc, cClasse, cLembrete, cOriTableCode, cOriProcCode, cTableCode, cProcCode, cOptionOrder, nQtdUs, nVlrCon, nVlrTPF, nVlrApr, aRet, aCritica, aAlerta, cTissVer)
    protected method checkInter(cSolInterna, aProrInt, lProrInt) 
    protected method getRdaProf(lTrtExe, lSolict, cOpeMov, cIdOnHealthInsurer, cHealthProviderId, cLocationCode, cBillingAddress)
    protected method getOpeProf(cIdOnHealthInsurer)
    protected method getProcedures(dRequestDate, cSequen, cTableCode, cProcCode, nReqQuantity, cProcedureHour, cToothRegion, cSurfaces, cOptionOrder)
    protected method checkTiss(cHealthProviderId, cTableCode, cProcCode, cTissVer)
    protected method rejectionCauses(cError, aCritica, aAlerta, cTissVer)
    protected method guideType(cJourney)
    protected method isExec()

endClass

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} new
    construtor

    @type  class
    @author PLSTEAM
    @since 12/05/2022
/*/
//------------------------------------------------------------------------------------------
method new(cProcedureId, oJson) class PLSProcAuthDao

    ::cProcedureId      := cProcedureId
    ::oJson             := oJson
    ::aRejectionCauses  := {}

return self

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} authorization
    return authorization from makeProcedure

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method authorization() class PLSProcAuthDao

    local aArea    	                := getArea()

    local nLimitePTU                := getNewPar("MV_PLLIPTU", 50)
    local nRecnoBD5	                := ::getValue(::oJson["recnobd5"], 0)
    local nRecBD6                   := 0
    local nReqQuantity              := 0

    local cAuthtype                 := ::guideType(::getValue(::oJson["journey"], '0'))
    local cSequen                   := ''
    local cTableCode	            := ''
    local cProcCode                 := ''
    local cOriTableCode	            := ''
    local cOriProcCode              := ''
    local cProcedureHour            := ''
    local cToothRegion              := ''
    local cSurfaces                 := ''
    local cTipoProc                 := self:isExec(cAuthtype)
    local cMes                      := ''
    local cAno                      := ''
    local cTissVer                  := ''
    local cCodOpeProf	            := ''
    local cTpAcom                   := ''
    local cPadCon                   := ''
    local cRegAte                   := ''
    local cTipPre                   := ''
    local cAreaAbr                  := ''
    local cOutDesp                  := '0' //TODO - na implementacao da guia de outras despesas alimentar este campo com '1' quando for outras despesas.
    local cNewbornAttendance        := iIf( ::getValue(::oJson["newbornAttendance"], .f.) ,'1','0')
    local cHealthProviderId         := ::getValue(::oJson["healthProvider"]["healthProviderId"], '') 
    local cIdOnHealthInsurer        := ::getValue(::oJson["professional"]["idOnHealthInsurer"], '') 
    local cAttendanceLocation	    := ::getValue(::oJson["attendanceLocation"], '')
    local cLocationCode             := ::getValue(::oJson["locationCode"], '')
    local cHospType                 := ::getValue(::oJson["hospType"], '')
    local cOpeMov	                := plsIntPad()
    local cSpecialtyCode            := ::getValue(::oJson["professional"]["cbos"]["specialtyCode"], '')
    local cEspSol 	                := iIf(cTipoProc == SOLICITACAO, cSpecialtyCode, '')
    local cEspExe 	                := iIf(!cTipoProc == SOLICITACAO, cSpecialtyCode, '')
    local cSolInterna               := ::getValue(::oJson["attendanceProtocol"], '')   // TODO na prorrogacao verificar o numero da solicitacao de internacao
    local cMainAuthorizationCode    := ::getValue(::oJson["mainAuthorizationCode"], '') // TODO enviar esta informacao na validacao do evento na execucao.
    local cSubscriberId             := ::getValue(::oJson["beneficiary"]["subscriberId"], '')
    local cHospRegime               := ::getValue(::oJson["hospRegime"], '')
    local cBillingAddress           := ::getValue(::oJson["billingAddress"], '')
    local cTipo		                := "1"
    local cChaveBD6                 := ''
    local cPrimaryICD               := ::getValue(::oJson["primaryICD"], '')
    local cNumLibe2	                := ''
    local cResponse                 := ''
    local cOptionOrder              := ''
    local cAliasCab                 := iIf(cAuthtype $ "2", "BE1", iIf(cAuthtype $ "3", "BE4", ''))
    local cTipAdm                   := ::getValue(::oJson["attendanceModel"], '')
    local cMV_PLSMODA               := getNewPar("MV_PLSMODA", "1")
    
    local lSolict                   := cTipoProc == SOLICITACAO
    local lNegProPac                := .f.
    local lRetorno                  := .t.
    local lTrtExe                   := .f.
    local lProrInt	                := .f.
    local lDigGui	                := ::getValue(::oJson["digitacaoOff"], .f.)
    local lTratEXEOROFF             := .t.
    local lMV_PLATURG               := getNewPar("MV_PLATURG", .f.)
    local lRegPagAto                := iIf( ::getValue(::oJson["journey"], '0') == TRATODONTO, .t., .f. )

    local aRet                      := {}
    local aQtdBrw                   := {}
    local aRetPtoEnt                := {}
    local aProrInt                  := {}
    local aDadRda                   := {}
    local aDadUsr                   := {}
    local aProcAuto	                := {}
    local aVldGen	                := nil

    local dDatNas                   := stod('')
    local dRequestDate              := stod(strTran( ::getValue( iIf( at(cAuthtype, G_ANEX_QUIM + "|" + G_ANEX_OPME) > 0, ::oJson["requestedDate"], ::oJson["requestDate"] ), dtos(dDataBase)) ,'-','')) 			

    aRet := ::getProcedures( dRequestDate, cAuthtype, @cSequen, @cTableCode, @cProcCode, @nReqQuantity, @cProcedureHour, @cToothRegion, @cSurfaces, @cOptionOrder)

    lRetorno := aRet[1]
    aQtdBrw  := aRet[2]
    
    cOriTableCode := cTableCode
    cOriProcCode  := cProcCode
    
    aRet := {}
    
    if lRetorno

        //Ponto de entrada para troca de dados na aut do portal
        if existBlock("PLCHEDAD")

            aRetPtoEnt := execBlock("PLCHEDAD", .f.,.f., { cTableCode,	cProcCode, cTipoProc } )

            cTableCode 	:= aRetPtoEnt[1]
            cProcCode	:= aRetPtoEnt[2]
            cTipoProc	:= aRetPtoEnt[3]

        endIf

        //Pega o ano e o mes de pagamento
        aRet := PLSXVLDCAL( dRequestDate, plsIntPad(), .f., "", "" )

        if aRet[1]

            cMes := aRet[5]
            cAno := aRet[4]

        elseIf len(aRet[2]) > 0

            lRetorno := .f.
            ::rejectionCauses( aRet[2,1,1] + " - " + aRet[2,1,2] )

        endIf

        aRet := {}

    endIf

    if lRetorno
        lRetorno := ::checkTiss(cHealthProviderId, @cTableCode, @cProcCode, @cTissVer)
    endIf

    //vld rda
    if lRetorno

        cCodOpeProf := iIf( lSolict, ::getOpeProf(cIdOnHealthInsurer), '' )
        lTrtExe     := .t. //Mesma regra do PLSA090, se for execução deve tratar as regras de execução

        ::getRdaProf(lTrtExe, lSolict, cOpeMov, cIdOnHealthInsurer, @cHealthProviderId, @cLocationCode, cBillingAddress)

        if cAuthtype == G_PROR_INTE
            ::checkInter(cSolInterna, @aProrInt, @lProrInt)
        endIf

        //Tratamento para Rda
        aRet := PLSDADRDA(cOpeMov, cHealthProviderId, "1", iIf(lProrInt, aProrInt[1], dRequestDate), cLocationCode,;
                          cSpecialtyCode, cTableCode, cProcCode, nil, nil, cEspSol, cEspExe,, lProrInt)

        if aRet[1]

            aDadRda := PLSGETRDA()

            cTipPre := aDadRda[27]

        else

            lRetorno := .f.
            ::rejectionCauses( nil, aRet[2] )

        endIf
        
        aRet := {}

    endIf

    //vld Usr
    if lRetorno

        cSubscriberId := PPLTROMAT(cSubscriberId)

        //Dados do usuario
        aRet := PLSDADUSR(cSubscriberId, cTipo, .f., dRequestDate)

        if aRet[1]

            aDadUsr := PLSGETUSR()

            cTpAcom  := aDadUsr[17]
            cPadCon  := aDadUsr[20]
            cRegAte  := aDadUsr[92]
            cAreaAbr := aDadUsr[65]
            dDatNas  := aDadUsr[26]

        else

            lRetorno := .f.
            ::rejectionCauses( nil, aRet[2] )

        endIf

        aRet := {}

    endIf

    //Verifica se alcancou o limite de itens PTU Online
    if lRetorno .and. aDadUsr[45] <> plsIntPad() .and. allTrim( getNewPar("MV_PLSUNI","1") ) == "1" .and. len(aQtdBrw) >= nLimitePTU

        if ascan(aQtdBrw, {|x| allTrim(x[1]) == allTrim(cTableCode) .and. allTrim(x[2]) == allTrim(cProcCode) }) == 0

            lRetorno := .f.

            ::rejectionCauses( "O limite para solicitacoes PTU Online e de " + allTrim( str(nLimitePTU) ) + " itens. " )

        endIf

    endIf

    //Se Execucao Odonto ou Sadt, verifica se a quantidade informada e superior ao saldo
    if lRetorno .and. (cAuthtype == G_SADT_ODON) .and. ! empty(cMainAuthorizationCode)

        BE2->(dbSetOrder(6)) //BE2_FILIAL+BE2_OPEMOV+BE2_ANOAUT+BE2_MESAUT+BE2_NUMAUT+BE2_CODPAD+BE2_CODPRO+BE2_DENREG+BE2_FADENT
        if BE2->( msSeek( xFilial("BE2") + cMainAuthorizationCode + cTableCode + padR( allTrim(cProcCode), tamSX3("BR8_CODPSA")[1] ) ) ) .and. nReqQuantity > BE2->BE2_SALDO

            lRetorno := .f.

            ::rejectionCauses( "A quantidade informada e maior que o saldo disponivel na Liberacao para este evento (" + cValtoChar(BE2->BE2_SALDO) + ")." )

        endIf

    endIf

    //conceito execucao de uma solicitacao
    if lRetorno

        if lTratEXEOROFF
            ::vldExecOff( lSolict, lDigGui, nRecnoBD5, @cChaveBD6, @nRecBD6, cTableCode, cProcCode )
        endIf

        lRetorno := ::vldLibReg(cAuthtype, cMainAuthorizationCode, cTableCode, cProcCode, lDigGui, dRequestDate, aProcAuto, @aVldGen, @cPrimaryICD, @cNumLibe2)

        if lRetorno
            
            aRet := { .t. }
            
            //Checa a regra para um determinado procedimento
            if ! ( lMV_PLATURG .and. cTipAdm == '2')

                if cAuthtype <> G_RES_INTER

                    aRet := PLSAUTP(dRequestDate,;
                                    cProcedureHour,;
                                    cTableCode,;
                                    cProcCode,;
                                    nReqQuantity - iIf(nRecBD6 > 0 .and. lDigGui .and. nRecnoBD5 > 0, BD6->BD6_QTDPRO, 0),;
                                    aDadUsr,;
                                    nRecBD6,;
                                    aDadRDA,;
                                    "1",;
                                    iIf( cMV_PLSMODA == "0", .f., .t.),;
                                    cPrimaryICD,;
                                    .t.,;
                                    "1",;
                                    lSolict,;
                                    cCodOpeProf,;
                                    iIf( lSolict, cIdOnHealthInsurer, ''),;
                                    cAno,;
                                    cMes,;
                                    cTpAcom,;
                                    cPadCon,;
                                    cRegAte,;
                                    .t.,; //vai calcular o valor de pagamento no ato
                                    '',; // nao considero mais o solicitante como executante, esse conceito foi retirado do HAT
                                    nil,;
                                    0,;
                                    iIf(! lSolict, cCodOpeProf, ''),;
                                    nil,;
                                    cNewbornAttendance,;
                                    nil,nil,;
                                    cSequen,;
                                    cMainAuthorizationCode,;
                                    lRegPagAto,;
                                    "2",;
                                    cSurfaces,;
                                    nil,nil,;
                                    cTipPre,;
                                    cHospType,;
                                    nil,nil,;
                                    cMainAuthorizationCode,;
                                    cAreaAbr,;
                                    nil,nil,;
                                    cToothRegion,;
                                    nil,;
                                    nil,;
                                    iIf( lSolict, .f., lTrtExe),;
                                    .f.,;
                                    cTipoProc,;
                                    cSpecialtyCode,;
                                    aQtdBrw,;
                                    aVldGen,;
                                    cLocationCode,;
                                    nil,nil,nil,;
                                    .t.,;
                                    cAliasCab,;
                                    cHospRegime,;
                                    nil,;
                                    lNegProPac,;
                                    nil,nil,nil,nil,nil,nil,;
                                    cEspSol,;
                                    cEspExe,;
                                    nil,nil,;
                                    iIf( !empty(cAuthtype), PADL(cAuthtype, 2, "0"), "" ),;
                                    nil,nil,;
                                    .t.,;
                                    nil,nil,nil,nil,nil,nil,nil,nil,;
                                    iIf(nRecBD6 > 0 .and. lDigGui .and. nRecnoBD5 > 0, BD6->BD6_QTDPRO, 0),;
                                    nil,;
                                    iIf( cOutDesp == "1", .t., .f. ),;
                                    cNumLibe2,;
                                    cTipAdm,;
                                    ,,;
                                    aProrInt,;
                                    iIf(cAuthtype == "3", .t., .f.) )

                endIf

            endIf

        endIf

    endIf
    
    cResponse := ::makeProcedure(aRet, cAuthtype, dRequestDate, cHospType, cTableCode, cProcCode, dDatNas, nReqQuantity, cTissVer, cOriTableCode, cOriProcCode, cOptionOrder,;
                                cMes, cAno, aDadUsr, aDadRda, cRegAte, cProcedureHour, cSpecialtyCode, cLocationCode, cTipPre, cPrimaryICD, cToothRegion, cSurfaces )

    restArea( aArea )

return(cResponse)

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} makeProcedure

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method makeProcedure(aRet, cAuthtype, dRequestDate, cHospType, cTableCode, cProcCode, dDatNas, nReqQuantity, cTissVer, cOriTableCode, cOriProcCode, cOptionOrder,;
                    cMes, cAno, aDadUsr, aDadRda, cRegAte, cProcedureHour, cSpecialtyCode, cLocationCode, cTipPre, cPrimaryICD, cToothRegion, cSurfaces ) class PLSProcAuthDao
    
    local nI         := 0
    local nQtdUs	 := 0
    local nVlrCon	 := 0
    local nVlrTPF	 := 0
    local nVlrApr    := 0
    local nFor       := 0
    local lAto		 := .f.
    local lAuditoria := .f.
    local lAuth      := .f.
    local cTpAten    := ''
    local cResponse  := ''
    local aCritica	 := {}
    local aAlerta    := {}
    local aValor	 := {}
    local aCliente	 := {}
    local aRetUs	 := {}
    local lRetorno   := len(aRet) > 0

    //Retorno
    if lRetorno
        BCT->(DbSetOrder(1))
        if len(aRet) >= 2 .and. valtype(aRet[2]) == "A"
            lAuditoria := ascan( aRet[2], {|x| x[1] == "025" } ) > 0
            if !lAuditoria               
				For nFor := 1 To len(aRet[2])
					if !Empty(aRet[2][nFor][1]) .and. BCT->(MsSeek(xfilial('BCT')+PlsIntPad()+aRet[2][nFor][1])) 
						lAuditoria := Iif(BCT->BCT_AUDITO == "1",.T.,.F.)
						if lAuditoria
							Exit
						endif
					endif
				Next				
            endif
        endIf

        //Verifica se procedimento em auditoria se enquandra na exceção cadastrada
        //Caso esteja na exceção retira o procedimento da auditoria.
        if lAuditoria

            //Internação ou Resumo de Internação
            if cAuthtype $ G_SOL_INTER + '|' + G_RES_INTER

                cTpaten := PLSRetAut("3")[1]

                //Anexos
            elseIf cAuthtype $ G_ANEX_OPME + '|' + G_ANEX_QUIM + '|' + G_ANEX_RADI

                cTpaten := PLSRetAut("7")[1]

            else
                cTpaten := PLSRetAut()[1]
            endIf

            //B1O_CODPRO+B1O_TPGUIA+B1O_IDADE+B1O_QTDPRO
            if PLSVLDEX( cProcCode + cTpaten, dDatNas, nReqQuantity )

                if len(aRet[2]) == 2
                    aRet[1] := .t.
                    aRet[2] := {}
                    aRet[3] := "B1O"
                else
                    aRet[2][ ascan( aRet[2],{|x| x[1] == "025" } ) ][2] := ""
                    aRet[2][ ascan( aRet[2],{|x| x[1] == "025" } ) ][1] := ""
                endIf

            endIf

        endIf

        aCritica := iIf( len(aRet) >= 2, aRet[2], {})

        //Separa o que é critica negativa do que é alerta
        PLSALERTA( @aCritica, @aRet, @aAlerta )

        lAuth   := aRet[1]
        lAto    := iIf( len(aRet) >= 5, aRet[5], .f. )
        aValor 	:= iIf( len(aRet) >= 6 .and. lAto , aRet[6], {} )

        if len(aRet) >= 7 .and. len(aRet[7]) > 0
            ::rejectionCauses(nil, {}, { aRet[7] }, cTissVer)
        endIf

        //Se foi autorizado e pagamento no ato
        if lAuth .and. lAto

            lAto := .f.
            
            if aValor[1] .and. aValor[16] == "1" .and. iIf( len(aValor) >= 27, ! aValor[27], .t. )

                aCliente := PlBuscaClien(iIf(aDadUsr[90] == "1", "1", "2"), "1", aDadUsr)

                lAto := ( aCliente[1] .or. ( aValor[12] > 0 .and. BR8->BR8_PODDIG == "1" ) )

            endIf

        endIf

        //Pega os valores do procedimento caso seja odonto ou pagamento no ato
        if len(aValor) > 0 .and. aValor[1]

            if len(aValor) >= 17 .and. len(aValor[17]) > 0

                aRetUs := aValor[17][1]

                for nI := 1 to len(aRetUs)

                    if len(aRetUs[nI]) >= 9

                        nQtdUs += aRetUs[nI,9] //US usada para calculo do evento

                    endIf

                next

            endIf

            nVlrCon	:= aValor[06] //Valor contratado
            nVlrTPF	:= aValor[12] //Valor Total da participacao

        endIf

    endIf

    if BR8->(allTrim(BR8_CODPAD) + allTrim(BR8_CODPSA)) != allTrim(cTableCode) + allTrim(cProcCode)
        BR8->(dbSetOrder(3))//BR8_FILIAL+BR8_CODPSA+BR8_CODPAD                                                                                                                                                                                                                                                
        BR8->( msSeek( xFilial("BR8") + padR( allTrim(cProcCode), tamSX3("BR8_CODPSA")[1] ) + cTableCode ) )
    endIf

    cResponse := ::responseProcedure(lAuth, iIf(lAuth, AUTORIZADO, NEGADO), lAto, lAuditoria, nReqQuantity, BR8->BR8_TPPROC, allTrim(BR8->BR8_DESCRI), BR8->BR8_CLASSE, BR8->BR8_LEMBRE,;
                                     cOriTableCode, allTrim(cOriProcCode), cTableCode, cProcCode, cOptionOrder, nQtdUs, nVlrCon, nVlrTPF, nVlrApr, aRet, aCritica, aAlerta, cTissVer)

return(cResponse)

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} responseProcedure

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method responseProcedure(lAuth, nStatus, lAto, lAuditoria, nReqQuantity, cTpProc, cDesProc, cClasse, cLembrete,;
                        cOriTableCode, cOriProcCode, cTableCode, cProcCode, cOptionOrder, nQtdUs, nVlrCon, nVlrTPF, nVlrApr,;
                        aRet, aCritica, aAlerta, cTissVer) class PLSProcAuthDao

    local oResponse         := jsonObject():new()
    local oProcedure        := jsonObject():new()
    local aMedicalTeam      := {}
 
    if len(aCritica) > 0 .or. len(aAlerta) > 0
        ::rejectionCauses(nil, aCritica, aAlerta, cTissVer)
    endIf
    
    oProcedure["status"]                := iIf(lAuditoria, AUDITORIA, nStatus )
    oProcedure["paymentOnSpot"]         := lAto
    oProcedure["auditing"]              := lAuditoria
    oProcedure["requestedQuantity"]     := nReqQuantity
    oProcedure["procedureType"]	        := cTpProc
    oProcedure["procedureDescription"]  := cDesProc
    oProcedure["tableCode"]	            := cOriTableCode
    oProcedure["procedureCode"]	        := cOriProcCode

    if ! empty(cOptionOrder)
        oProcedure["optionOrder"] := cOptionOrder
    endIf
  
    if len(aRet) >= 3 .and. len(aRet) >= 4 

        oProcedure["authLevel"]	 := aRet[3]
        oProcedure["authLevelKey"] := allTrim(aRet[4])

        if ! empty(aRet[3])
            oProcedure["authLevelDesc"] := 'Nivel: ' + allTrim(posicione("SX2",1,AllTrim(aRet[3]),"SX2->X2_NOME"))
        endIf

    endIf

    oProcedure["rejectionCauses"]      := ::aRejectionCauses
    oProcedure["medicalTeam"]          := aMedicalTeam

    oProcedure["authorizedQuantity"]   := iIf(lAuth, nReqQuantity, 0)
    oProcedure["inSerie"]              := iIf( ! empty(cClasse), posicione("BJE",1, xFilial("BJE") + cClasse,"BJE->BJE_TIPO") == '2', .f.)
    oProcedure["obsNegative"]          := ""
    oProcedure["obsAudito"]            := ""
    oProcedure["justification"]        := ""

    oProcedure["balance"]              := 0 //quando for executar retornar a quantidade restante
    oProcedure["usQuantity"]           := nQtdUs
    oProcedure["vlrCon"]               := nVlrCon
    oProcedure["franchise"]            := nVlrTPF
    oProcedure["unitaryWorth"]         := nVlrApr

    oProcedure['lembrete'] := "0"
    
    if PLSLEMBRE(.f., .t., cTableCode, cProcCode)
        oProcedure['lembrete'] := allTrim(cLembrete)
    endIf

    oProcedure['_expandables'] := { "medicalTeam", "rejectionCauses" }

    oResponse['procedure']       := oProcedure
    oResponse['serviceResponse'] := .t.  

return(oResponse:toJSon())

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} rejectionCauses

    @type  Class
    @author PLSTEAM
    @since 12/05/2022
/*/
//------------------------------------------------------------------------------------------
method rejectionCauses(cError, aCritica, aAlerta, cTissVer) class PLSProcAuthDao
    local nI                := 0
    local nY                := 0
    local nPos              := 0
    local cAlerta           := "0"
    local cDetail           := ""
    local cCodGlo           := ""
    local cDesGlo           := ""
    local cCodTis           := ""
    local cDesTis           := ""
    local aRetCri           := {}

    default aCritica := {}
    default aAlerta  := {}
    default cTissVer := ''

    if ! empty(cError)

        aadd(::aRejectionCauses, jsonObject():new())
        nPos := len(::aRejectionCauses)

        ::aRejectionCauses[nPos]['code']            := '026'
        ::aRejectionCauses[nPos]['idTiss']          := '1801'
        ::aRejectionCauses[nPos]['description']     := FwNoAccent(cError)
        ::aRejectionCauses[nPos]['alert']           := '0'
        ::aRejectionCauses[nPos]['detail']          := ''
        ::aRejectionCauses[nPos]['interchangeCode'] := '224'

    else

        for nI := 1 to len(aCritica)

            cCodGlo := aCritica[nI, 1]

            if ! empty(cCodGlo)

                cAlerta := '0'
                cDesGlo := allTrim(aCritica[nI,2])

                aRetCri := PLSRETCRI( allTrim(cCodGlo), cTissVer )
                cCodTis := allTrim( aRetCri[1,1] )
                cDesTis := allTrim( aRetCri[1,2] )

                cDetail := ''
                for nY := (nI+1) to len(aCritica)

                    if empty(aCritica[nY, 1])
                        cDetail += allTrim( aCritica[nY, 2] ) + '&nbsp' + allTrim( aCritica[nY, 3] ) + '<br>'
                    endIf
                   
                next
                nI := --nY

            endIf

            aadd(::aRejectionCauses, jsonObject():new())
            nPos := len(::aRejectionCauses)

            ::aRejectionCauses[nPos]['code']            := cCodGlo
            ::aRejectionCauses[nPos]['idTiss']          := cCodTis
            ::aRejectionCauses[nPos]['description']     := cDesTis
            ::aRejectionCauses[nPos]['alert']           := cAlerta
            ::aRejectionCauses[nPos]['detail']          := allTrim(FwNoAccent(cDetail))
            ::aRejectionCauses[nPos]['interchangeCode'] := posicione("BCT", 1, xFilial('BCT') + plsintPad() + cCodGlo,"BCT->BCT_CODEDI")

        next

        for nI := 1 to len(aAlerta)

            cCodGlo := aAlerta[nI, 1]

            if ! empty(cCodGlo)

                cAlerta := '1'
                cDesGlo := allTrim(aAlerta[nI,2])

                aRetCri := PLSRETCRI( allTrim(cCodGlo), cTissVer )
                cCodTis := allTrim( aRetCri[1,1] )
                cDesTis := allTrim( aRetCri[1,2] )

                cDetail := ''
                for nY := (nI+1) to len(aAlerta)

                    if empty(aAlerta[nY, 1])
                        cDetail += allTrim( aAlerta[nY, 2] ) + '&nbsp' + allTrim( aAlerta[nY, 3] ) + '<br>'
                    endIf

                next
                nI := --nY

            endIf

            aadd(::aRejectionCauses, jsonObject():new())
            nPos := len(::aRejectionCauses)

            ::aRejectionCauses[nPos]['code']            := cCodGlo
            ::aRejectionCauses[nPos]['idTiss']          := cCodTis
            ::aRejectionCauses[nPos]['description']     := cDesTis
            ::aRejectionCauses[nPos]['alert']           := cAlerta
            ::aRejectionCauses[nPos]['detail']          := AllTrim(FwNoAccent(cDetail))
            ::aRejectionCauses[nPos]['interchangeCode'] := posicione("BCT", 1, xFilial('BCT') + plsintPad() + cCodGlo,"BCT->BCT_CODEDI")

        next

    endIf

return

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} guideType

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method guideType(cJourney) class PLSProcAuthDao
	
    local cAuthtype := ''

    do case

        case cJourney == CONSULTA
            cAuthtype := G_CONSULTA

        case cJourney == EXAME
            cAuthtype := G_SADT_ODON

        case cJourney == EXEC
            cAuthtype := G_SADT_ODON

        case cJourney == PRONTOSOCORRO 
            cAuthtype := G_SADT_ODON       

        case cJourney == TRATSERIADO
            cAuthtype := G_SADT_ODON

        case cJourney == TRATODONTO
            cAuthtype := G_SADT_ODON

        case cJourney == RESUMO_INTERNACAO
            cAuthtype := G_RES_INTER

        case cJourney == HONORARIO
            cAuthtype := G_HONORARIO

        case cJourney == PRORROGACAO
            cAuthtype := G_PROR_INTE

        case cJourney == INTERNACAO
             cAuthtype := G_SOL_INTER

        case cJourney == OPME 
            cAuthtype := G_ANEX_OPME

        case cJourney == QUIMIOTERAPIA
            cAuthtype := G_ANEX_QUIM 

        case cJourney == RADIOTERAPIA    
            cAuthtype := G_ANEX_RADI     
    endCase

return cAuthtype

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} vldLibReg

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method vldLibReg(cAuthtype, cMainAuthorizationCode, cTableCode, cProcCode, lDigGui, dRequestDate, aProcAuto, aVldGen, cPrimaryICD, cNumLibe2) class PLSProcAuthDao

    local lRetorno      := .t.
    local lVerAud       := .t.
    local lMV_PLSCKLB   := getNewPar("MV_PLSCKLB", .t.)

    //se teve liberacao nao preciso mais checar as regras idade, sexo, etc etc
    if ! empty(cMainAuthorizationCode)

        BE2->(dbSetOrder(6))
        if BE2->( msSeek(xFilial("BE2") + cMainAuthorizationCode + cTableCode + padR( allTrim(cProcCode), tamSX3("BR8_CODPSA")[1] ) ))

            cPrimaryICD := BE2->BE2_CID

            if BE2->BE2_STATUS == "1"

                if ! lDigGui .and. dRequestDate < BE2->BE2_DATPRO

                    lRetorno := .f.

                    ::rejectionCauses( "A data de atendimento e anterior a data da solicitacao" )

                endIf

            endIf

            if BE2->BE2_AUDITO == "0"
                lVerAud := .f.
            endIf

        //TODO - 11/04/2018 - OSCAR ficou de rever este ponto.
        elseIf BE2->( msSeek( xFilial("BE2") + cMainAuthorizationCode ))

            if !empty(BE2->BE2_NRLBOR)

                cNumLibe2 := BE2->BE2_NRLBOR
                lVerAud   := !( PLBYEPU( PADL( cAuthtype, 2, "0"), BE2->BE2_NRLBOR, aProcAuto, cTableCode, cProcCode,,,,cMainAuthorizationCode)[1])

            endIf

        endIf

        aVldGen := { .t., .t., .f., .f., iIf( ! lVerAud, .t., .f.), .f., .f., .f., .f., lVerAud, .f. }

    else

        if ! lMV_PLSCKLB
            aVldGen := { .f., .f., nil, nil, nil, nil, nil, nil, nil, nil, nil }
        endIf

    endIf

return(lRetorno)

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} vldExecOff

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method vldExecOff(lSolict, lDigGui, nRecnoBD5, cChaveBD6, nRecBD6, cTableCode, cProcCode) class PLSProcAuthDao

    //Recno do BD6
    if ! lSolict .and. ! lDigGui

        if nRecnoBD5 == 0 .and. empty( subStr(cChaveBD6, 5, 4) ) .and. ! empty( subStr(BEA->(BEA_OPEMOV+BEA_CODLDP+BEA_CODPEG+BEA_NUMGUI+BEA_ORIMOV), 5, 4))
            cChaveBD6 := BEA->(BEA_OPEMOV+BEA_CODLDP+BEA_CODPEG+BEA_NUMGUI+BEA_ORIMOV)
        endIf

        if ! empty(cChaveBD6)

            BD6->( dbSetOrder(6) ) //BD6_FILIAL + BD6_CODOPE + BD6_CODLDP + BD6_CODPEG + BD6_NUMERO + BD6_ORIMOV + BD6_CODPAD + BD6_CODPRO
            if BD6->( msSeek( xFilial("BD6") + cChaveBD6 + cTableCode + cProcCode) )
                nRecBD6 := BD6->( recno() )
            endIf

        endIf

    elseIf ! lSolict .and. lDigGui .and. nRecnoBD5 > 0

        BD5->(dbGoTo(nRecnoBD5))
        BD6->(dbSetOrder(6))
        if BD6->( msSeek( xfilial("BD6") + BD5->(BD5_CODOPE + BD5_CODLDP + BD5_CODPEG + BD5_NUMERO + BD5_ORIMOV) + cTableCode + cProcCode) )
            nRecBD6 := BD6->( Recno() )
        endIf

    endIf

return
//------------------------------------------------------------------------------------------
/*/{Protheus.doc} checkInter
    Tratamento para quando a RDA estiver bloqueado mas o beneficiario foi internado
    Antes do bloqueio, nesse tipo de situação é permitido realizar a prorrogação.

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method checkInter(cSolInterna, aProrInt, lProrInt) class PLSProcAuthDao

    BE4->(dbSetOrder(2))//BE4_FILIAL+BE4_CODOPE+BE4_ANOINT+BE4_MESINT+BE4_NUMINT
    if !Empty(cSolInterna) .And. BE4->( msSeek(xFilial("BE4") + cSolInterna ) )
        aProrInt 	:= { BE4->BE4_DATPRO, subStr(BE4->BE4_HORPRO,1,4) }
        lProrInt 	:= .t.
    endIf

return

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} getRdaProf

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method getRdaProf(lTrtExe, lSolict, cOpeMov, cIdOnHealthInsurer, cHealthProviderId, cLocationCode, cBillingAddress) class PLSProcAuthDao

    local cRdaProf := ''
    local lRdaProf := .f.
    local lAchou   := .f.
    local lFiltPRF := getNewPar("MV_PLSPRFS", .t.)

    //Pega a Rda do Profissional
    BAU->( dbSetOrder(5) ) //BAU_FILIAL + BAU_CODBB0
    if BAU->( msSeek( xFilial("BAU") + cIdOnHealthInsurer ) )
        cRdaProf := BAU->BAU_CODIGO
    endIf

    //Rda contratada diference da rda do profissional
    lRdaProf := ( cHealthProviderId <> cRdaProf .and. ! empty(cRdaProf) )

    if ! empty(cRdaProf) .and. ! empty(cBillingAddress) .and. lRdaProf .and. lTrtExe

        BB8->( dbSetOrder(5) )//BB8_FILIAL + BB8_TIPLOG + BB8_CEP + BB8_NR_END + BB8_EST + BB8_CODIGO + BB8_CODINT                                          //sempre procuro um local na rda que eu vou gerar a guia
        if BB8->( msSeek( xFilial("BB8") + cBillingAddress + cRdaProf + cOpeMov ) )

            while  ! BB8->(Eof()) .and. BB8->(BB8_FILIAL+BB8_TIPLOG+BB8_CEP+BB8_NR_END+BB8_EST+BB8_CODIGO+BB8_CODINT) == ;
                    xFilial("BB8") + cBillingAddress + cRdaProf + cOpeMov

                if empty(BB8->BB8_DATBLO)
                    lAchou        := .t.
                    cLocationCode := BB8->BB8_CODLOC
                    exit
                endIf

                BB8->(dbSkip())
            enddo

        endIf

    endIf

    if ! lAchou
        cLocationCode := ""
    endIf

return

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} getOpeProf

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method getOpeProf(cIdOnHealthInsurer) class PLSProcAuthDao

    local lRetorno := .t.
    local cCodOpe  := plsintPad()

    //Operadora do profissional
    BB0->( dbSetOrder(1) ) //BB0_FILIAL + BB0_CODIGO
    lRetorno := BB0->( msSeek( xFilial( "BB0" ) + cIdOnHealthInsurer) )

    if lRetorno
        cCodOpe := BB0->BB0_CODOPE
    endIf

return(cCodOpe)

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} getValue

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method getValue(xTag, xValue) class PLSProcAuthDao
return iIf(xTag != nil, xTag, xValue)

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} getProcedures

    @type  class
    @author PLSTEAM
    @since 29/03/2022
/*/
//------------------------------------------------------------------------------------------
method getProcedures(dRequestDate, cAuthtype, cSequen, cTableCode, cProcCode, nReqQuantity, cProcedureHour, cToothRegion, cSurfaces, cOptionOrder) class PLSProcAuthDao

    local nPos       := 1
    local nTCODPAD   := tamSX3("BR8_CODPAD")[1]
    local nTCODPSA   := tamSX3("BR8_CODPSA")[1]
    local nTCODIGO   := tamSX3("B04_CODIGO")[1]
    local nTFADENT   := tamSX3("B09_FADENT")[1]
    local nTSEQUEN   := tamSx3("BD6_SEQUEN")[1]
    local cTime      := ''
    local aSolicited := {}
    local lFound     := .f.

    for nPos := 1 to len(::oJson["procedures"])
        
        cTime := strTran(time(),':','')

        if ::oJson["procedures"][nPos]["status"] == -1 .and. at(allTrim(::oJson["procedures"][nPos]['tableCode'] + ::oJson["procedures"][nPos]['procedureCode']),allTrim(::cProcedureId)) > 0

            cSequen             := strZero(nPos, nTSEQUEN )
            cTableCode          := padR( ::oJson["procedures"][nPos]['tableCode'], nTCODPAD )
            cProcCode           := padR( ::oJson["procedures"][nPos]['procedureCode'], nTCODPSA )
            nReqQuantity        := iIf(cAuthtype == G_ANEX_QUIM, ::oJson["procedures"][nPos]['totalCycleDosage'], ::oJson["procedures"][nPos]['requestedQuantity'])
            cProcedureHour      := cTime
            cToothRegion        := padR( ::oJson["procedures"][nPos]['toothRegion'], nTCODIGO )
            cSurfaces           := padR( strtran(cvaltochar(self:oJson["procedures"][nPos]['surfaces']),",",""), nTFADENT )
            cOptionOrder        := iIf(cAuthtype == G_ANEX_OPME, iIf(::oJson["procedures"][nPos]['optionOrder'] != nil, ::oJson["procedures"][nPos]['optionOrder'], ''), '' )
            lFound              := .t.

        endIf

        aadd(aSolicited, {  padR( ::oJson["procedures"][nPos]['tableCode'], nTCODPAD ),;
                            padR( ::oJson["procedures"][nPos]['procedureCode'], nTCODPSA ),;
                            iIf(cAuthtype == G_ANEX_QUIM, ::oJson["procedures"][nPos]['totalCycleDosage'], ::oJson["procedures"][nPos]['requestedQuantity']),;
                            dRequestDate,;
                            cTime,;
                            padR( ::oJson["procedures"][nPos]['toothRegion'], nTCODIGO ),;
                            padR( ::oJson["procedures"][nPos]['surfaces'], nTFADENT ),;
                            strZero(nPos, nTSEQUEN ) } )

    next

    if ! lFound
        ::rejectionCauses( "Procedimento informado nao encontrado no body da requisicao" )
    endIf

return( { lFound, aSolicited } )

//------------------------------------------------------------------------------------------
/*/{Protheus.doc} checkTiss

    @type  Class
    @author PLSTEAM
    @since 12/05/2022
/*/
//------------------------------------------------------------------------------------------
method checkTiss(cHealthProviderId, cTableCode, cProcCode, cTissVer) class PLSProcAuthDao

    local lRetorno      := .t.
    local cCodPro       := ''
    local cCodPad       := ''

    private aTabDup     := PlsBusTerDup( superGetMv("MV_TISSCAB",.f.,"87") )
    private aErrVarVin  := { .f., "", "", "" }

    BAU->(dbSetOrder(1))
    if (BAU->(msSeek(xFilial("BAU") + cHealthProviderId)))
        cTissVer := BAU->BAU_TISVER
    endIf

    cCodPad := allTrim( PLSVARVINC('87','BR4', allTrim(cTableCode)) )
    cCodPro := allTrim( PLSVARVINC(cTableCode, 'BR8', cProcCode, cCodPad + cProcCode,, aTabDup, @cCodPad) )
        
    if  ! PChkTabDup(@cCodPad, cCodPro, cTableCode)
        ::rejectionCauses( "De/Para nao realizado para -> (" + cTableCode + ") " + cProcCode )
        lRetorno := .f.
    endIf

    if lRetorno
        cTableCode := cCodPad
        cProcCode  := padR( allTrim(cCodPro), tamSX3("BR8_CODPSA")[1] ) 
    endIf

return(lRetorno)

method isExec(cAuthtype) class PLSProcAuthDao
local cRet := SOLICITACAO

if cAuthtype $ G_SADT_ODON + "|" + G_CONSULTA 
    cRet := EXECUCAO
endif

if self:getValue(self:oJson["journey"],'') == '2' .and. empty(self:getValue(self:oJson["mainAuthorizationCode"],''))
    cRet := SOLICITACAO
endif

return cRet