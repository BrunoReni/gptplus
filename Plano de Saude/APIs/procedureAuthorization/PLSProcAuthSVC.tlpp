#INCLUDE "TOTVS.CH"

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSProcAuthSvc

@author    PLSTEAM
@version   V12
@since     12/05/2022
/*/
//-------------------------------------------------------------------
class PLSProcAuthSvc

    public data oRest as object
    public data oJson as object

    public method new(oRest) constructor

    public method authorization()
    public method valida()

endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} new

@author    PLSTEAM
@version   V12
@since     12/05/2022
/*/
//-------------------------------------------------------------------
method new(oRest) class PLSProcAuthSvc

    ::oRest := oRest
    ::oJson := jsonObject():new()

return self
//-------------------------------------------------------------------
/*/{Protheus.doc} valida

@author    PLSTEAM
@version   V12
@since     12/05/2022
/*/
//-------------------------------------------------------------------
method valida() class PLSProcAuthSvc
 
    local lRet    := .f.
    local nI      := 1
    local oError  := jsonObject():new()
    local cError  := ::oJson:fromJson(::oRest:getContent())
    local cProper := ''
    local aBody   := {  "ansRegistry", "journey", "authorizationStatus", "locationCode", "attendanceLocation", "beneficiary",;
                        "healthProvider", "professional", "procedures" }

    if empty(::oRest:procedureId)
        cError := iIf( ! empty(cError) , cError + chr(13) + chr(10), '') + "Não foi informado o procedimento"
    endif
    
    lRet := iIf( empty(cError), .t., .f.)

    if lRet

        for nI := 1 to len(aBody)
            
            if ::oJson[aBody[nI]] == nil
                cProper += aBody[nI] + ', '
            endIf

        next

        if ! empty(cProper)
            cError  := 'Verifique o BODY da api [' + left(cProper, len(cProper) - 2) + ']' 
            lRet    := .f.
        else   
            if len(::oJson['procedures']) == 0
                cError  := 'Infome ao menos um evento'
                lRet    := .f.
            endIf 
        endIf

    endIf

    if ! lRet

        oError['hasError']     := .t.
        oError['errorMessage'] := cError

        ::oRest:setResponse(encodeUTF8(oError:toJSon()))

    endIf

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} authorization

@author    PLSTEAM
@version   V12
@since     12/05/2022
/*/
//-------------------------------------------------------------------
method authorization() class PLSProcAuthSvc

    local lRet    := .t.
    local nSecond := seconds()
    local oDao    := PLSProcAuthDao():new(::oRest:procedureId, ::oJson)
    
    ::oRest:setResponse(encodeUTF8(oDao:authorization()))

    coNout('Busca realizada (' + dToc(date()) + ' - ' + time() + ') - procedimento [' + ::oRest:procedureId + '] | Tempo gasto: [' + cValToChar(seconds() - nSecond) + ']')

return lRet


