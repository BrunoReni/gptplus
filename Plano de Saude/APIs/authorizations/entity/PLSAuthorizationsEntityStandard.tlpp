#INCLUDE 'protheus.ch'
#INCLUDE 'restful.ch'
#DEFINE _tgProc 'procedures'
#DEFINE _tgRejec 'rejectionCauses'

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSAuthorizationsEntityStandard

@author  sakai
@version P12
@since   06/09/22
/*/
//------------------------------------------------------------------- 
class PLSAuthorizationsEntityStandard from PLSAuthorizationsEntityLib

    public method new()
    public method montaCab()
    public method montaEve()
    public method montaCri()

endClass

method new(cGuia) class PLSAuthorizationsEntityStandard
    
    _Super:New(cGuia)
    self:cGuia   := cGuia
    self:oDaoCab := PLSAuthorizationsDaoBEA():new(self:cGuia)
    self:oDaoEve := PLSAuthorizationsDaoBE2():new(self:cGuia)
    self:oDaoCri := PLSAuthorizationsDaoBEG():new(self:cGuia)

Return self

method montaCab() class PLSAuthorizationsEntityStandard

    Local cAliTrb := ''

    self:getDao('CAB'):buscaGuia()
    cAliTrb := self:getAliasTemp('CAB')

    //Campos BEA
    self:oResult["subscriberId"]             := self:maskField( (cAliTrb)->(BEA_OPEUSR+BEA_CODEMP+BEA_MATRIC+BEA_TIPREG+BEA_DIGITO) )
    self:oResult["primaryICD"]               := self:maskField( (cAliTrb)->BEA_CID )
    self:oResult["attendanceLocation"]       := self:maskField( (cAliTrb)->BEA_LOCAL )
    self:oResult["password"]                 := self:maskField( (cAliTrb)->BEA_SENHA )
    self:oResult["accidentIndication"]       := self:maskField( (cAliTrb)->BEA_INDACI )
    self:oResult["attendanceModel"]          := self:maskField( iif(PLSISURG((cAliTrb)->BEA_TIPADM),"2","1") )
    self:oResult["attendanceProtocol"]       := self:maskField( (cAliTrb)->BEA_PROATE )
    self:oResult["attendanceType"]           := self:maskField( (cAliTrb)->BEA_TIPATE )
    self:oResult["authorizationDate"]        := self:maskField( (cAliTrb)->BEA_DATPRO, .T. )
    self:oResult["authorizationStatus"]      := self:maskField( (cAliTrb)->BEA_STATUS )
    self:oResult["authorizationType"]        := self:maskField( (cAliTrb)->BEA_TIPGUI )
    self:oResult["billingType"]              := self:maskField( (cAliTrb)->BEA_TIPFAT )
    self:oResult["clinicalCondition"]        := self:maskField( (cAliTrb)->BEA_INDCLI )
    self:oResult["closingReason"]            := self:maskField( (cAliTrb)->BEA_TIPSAI )
    self:oResult["consultationType"]         := self:maskField( (cAliTrb)->BEA_TIPCON )
    self:oResult["endTreatmentDate"]         := self:maskField( (cAliTrb)->BEA_DPTETA, .T. )
    self:oResult["healthProviderId"]         := self:maskField( (cAliTrb)->BEA_CODRDA )
    self:oResult["idAuthOnHealthProvider"]   := self:maskField( (cAliTrb)->BEA_GUIPRE )
    self:oResult["locationCode"]             := self:maskField( (cAliTrb)->BEA_CODLOC )
    self:oResult["mainAuthorizationCode"]    := self:maskField( (cAliTrb)->BEA_GUIPRI )
    self:oResult["newbornAttendance"]        := self:maskField( (cAliTrb)->BEA_ATERNA )
    self:oResult["passwordExpireDate"]       := self:maskField( (cAliTrb)->BEA_VALSEN, .T. )
    self:oResult["priorAuthorization"]       := self:maskField( (cAliTrb)->BEA_LIBERA )
    self:oResult["priorAuthorizationStatus"] := self:maskField( (cAliTrb)->BEA_STALIB )
    self:oResult["professionalRequestorId"]  := self:maskField( (cAliTrb)->BEA_CDPFSO )
    self:oResult["professionalExecutorId"]   := self:maskField( (cAliTrb)->BEA_CDPFRE )
    self:oResult["requestDate"]              := self:maskField( (cAliTrb)->BEA_DATSOL, .T. )
    self:oResult["attendanceToken"]          := self:maskField( (cAliTrb)->BEA_TOKEDI )
    self:oResult["missingValidationCode"]    := self:maskField( (cAliTrb)->BEA_AUSVLD )
    self:oResult["specialtyCode"]            := self:maskField( (cAliTrb)->BEA_CODESP )

    //Campos que nao existem no mapper
    self:oResult["professionalRequestorCouncil"]       := self:maskField( (cAliTrb)->BEA_SIGLA )
    self:oResult["professionalRequestorState"]         := self:maskField( (cAliTrb)->BEA_ESTSOL )
    self:oResult["professionalRequestorCouncilNumber"] := self:maskField( (cAliTrb)->BEA_REGSOL )
    self:oResult["professionalRequestorSpecialtyCode"] := self:maskField( (cAliTrb)->BEA_ESPSOL )
    self:oResult["professionalExecutorCouncil"]        := self:maskField( (cAliTrb)->BEA_SIGEXE )
    self:oResult["professionalExecutorState"]          := self:maskField( (cAliTrb)->BEA_ESTEXE )
    self:oResult["professionalExecutorCouncilNumber"]  := self:maskField( (cAliTrb)->BEA_REGEXE )

    //Campos BE4
    self:oResult["dischargedType"]              := self:maskField( (cAliTrb)->BE4_TIPALT )
    self:oResult["dischargedDate"]              := self:maskField( (cAliTrb)->BE4_DTALTA, .T. )
    self:oResult["dischargedHour"]              := self:maskField( (cAliTrb)->BE4_HRALTA )
    self:oResult["expectedHospitalizationDate"] := self:maskField( (cAliTrb)->BE4_PRVINT, .T. )
    self:oResult["hospType"]                    := self:maskField( (cAliTrb)->BE4_TIPINT )

    self:getDao('CAB'):closeQuery()

return

method montaEve() class PLSAuthorizationsEntityStandard

    local nX := 0
    local cAliTrb := ''
    local nVlrApr := 0

    self:oResult[_tgProc] := {}

    if self:getDao('EVE'):buscaEve()

        cAliTrb := self:getAliasTemp('EVE')        
        while !self:getDao('EVE'):isEof()
            nX ++
            aAdd(self:oResult[_tgProc], JsonObject():new())

            self:oResult[_tgProc,nX,'authLevel']          := self:maskField( (cAliTrb)->BE2_NIVAUT )
            self:oResult[_tgProc,nX,'sequence']           := self:maskField( (cAliTrb)->BE2_SEQUEN )
            self:oResult[_tgProc,nX,'status']             := self:maskField( (cAliTrb)->BE2_STATUS )
            self:oResult[_tgProc,nX,'requestedQuantity']  := self:maskField( (cAliTrb)->BE2_QTDSOL )
            self:oResult[_tgProc,nX,'authorizedQuantity'] := self:maskField( (cAliTrb)->BE2_QTDPRO )
            self:oResult[_tgProc,nX,'balance']            := self:maskField( (cAliTrb)->BE2_SALDO )
            self:oResult[_tgProc,nX,'unitaryWorth']       := self:maskField( (cAliTrb)->BE2_VLRAPR )
            self:oResult[_tgProc,nX,'executionDate']      := self:maskField( (cAliTrb)->BE2_DATPRO, .T. )
            self:oResult[_tgProc,nX,'startingTime']       := self:maskField( (cAliTrb)->BE2_HORPRO )
            self:oResult[_tgProc,nX,'endingTime']         := self:maskField( (cAliTrb)->BE2_HORFIM )
            self:oResult[_tgProc,nX,'accessWay']          := self:maskField( (cAliTrb)->BE2_VIA )
            self:oResult[_tgProc,nX,'usedTechnique']      := self:maskField( (cAliTrb)->BE2_TECUTI )            
            self:oResult[_tgProc,nX,'authLevelKey']       := self:maskField( (cAliTrb)->BE2_CHVNIV )
            self:oResult[_tgProc,nX,'auditing']           := self:maskField( (cAliTrb)->BE2_AUDITO )
            self:oResult[_tgProc,nX,'teethRegion']        := self:maskField( (cAliTrb)->BE2_DENREG )
            self:oResult[_tgProc,nX,'surface']            := self:maskField( (cAliTrb)->BE2_FADENT )
            self:oResult[_tgProc,nX,'priorAuthorization'] := self:maskField( (cAliTrb)->BE2_LIBERA )
            self:oResult[_tgProc,nX,'priorAuthorizationStatus'] := self:maskField( (cAliTrb)->BE2_STALIB )
                        
            cCodPad     := Alltrim((cAliTrb)->BE2_CODPAD)
            cCodPro     := Alltrim((cAliTrb)->BE2_CODPRO)
            cCodTabela 	:= PLSGETVINC("BTU_CDTERM", "BR4", .F., "87",  cCodPad,.T.)
			cCodProc 	:= PLSGETVINC("BTU_CDTERM", "BR8", .F., cCodPad, cCodPad+cCodPro, .F. ,self:aTabDup, @cCodTabela)

            self:oResult[_tgProc,nX,'tableCode'] := self:maskField( cCodTabela )
            self:oResult[_tgProc,nX,'procedureCode'] := self:maskField( cCodProc )
            
            nVlrApr := iif(ValType((cAliTrb)->BD6_VLRPAG) == 'N' .And. ValType((cAliTrb)->BD6_VLRGLO) == 'N',(cAliTrb)->BD6_VLRPAG + (cAliTrb)->BD6_VLRGLO, 0)
            self:oResult[_tgProc,nX,'unitaryWorth'] := nVlrApr

            self:montaCri(nX,(cAliTrb)->BE2_SEQUEN)         
                     
            self:getDao('EVE'):dbSkip()
        endDo

    endIf
    self:getDao('EVE'):closeQuery()

return


method montaCri(nItem,cSequen) class PLSAuthorizationsEntityStandard

    local nX := 0
    local cAliTrb := ''

    self:oResult[_tgProc,nItem,_tgRejec] := {}

    if self:getDao('CRI'):buscaCrit(cSequen)
        
        cAliTrb := self:getAliasTemp('CRI')
        while !self:getDao('CRI'):isEof()

            nX ++
            aAdd(self:oResult[_tgProc,nItem,_tgRejec], JsonObject():new())

            self:oResult[_tgProc,nItem,_tgRejec,nX,'procedureSequence'] := self:maskField( (cAliTrb)->BEG_SEQUEN )
            self:oResult[_tgProc,nItem,_tgRejec,nX,'code']              := self:maskField( (cAliTrb)->BEG_CODGLO )
            self:oResult[_tgProc,nItem,_tgRejec,nX,'rejectionSequence'] := self:maskField( (cAliTrb)->BEG_SEQCRI )
            self:oResult[_tgProc,nItem,_tgRejec,nX,'description']       := Upper(self:maskField( (cAliTrb)->BEG_DESGLO ))

            self:getDao('CRI'):dbSkip()
        endDo

    endIf
    self:getDao('CRI'):closeQuery()

return