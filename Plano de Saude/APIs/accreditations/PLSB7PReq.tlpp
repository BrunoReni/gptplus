#INCLUDE 'protheus.ch'
#INCLUDE 'restful.ch'

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSB7PReq
Realiza a manutencao de profissinais de saude - Request - Servico

@author  sakai
@version P12
@since   08/02/2023
/*/
class PLSB7PReq from CenRequest 

    Public Method new()
    Public Method valida()
    Public Method procGet()    
    
endClass

Method New(oRest) class PLSB7PReq
    _Super:new(oRest)
Return self

Method valida() class PLSB7PReq
    if empty(self:oRest:healthProviderCode)        
        self:cFaultDetail   := "Parametro obrigatório não preechido 'healthProviderCode' "
    endif

    if !empty(self:cFaultDetail)
        self:lSuccess       := .f.
        self:nFault         := 400
        self:cFaultDesc     := "Nenhum registro localizado"
    endif

Return self:lSuccess

Method procGet() class PLSB7PReq
    local cSql      := ""
    local cCodRda   := self:oRest:healthProviderCode
    local cCodLoc   := self:oRest:locationCode
    local nX        := 1

    cSql := " SELECT B7P_CODACR, B7P_NIVACR, B7P_CODLOC "
	cSql += "   FROM " + retsqlname("B7P")
	cSql += "  WHERE B7P_FILIAL = '" + xFilial("B7P") + "' "
	cSql += "   AND B7P_CODIGO = '" + alltrim(cCodRda) + "'  "
    if !empty(cCodLoc)
	    cSql += "   AND B7P_CODLOC = '" + alltrim(cCodLoc) + "'  "
    endif
	cSql += " 	AND (B7P_DATINI = '        ' OR B7P_DATFIM = '        ' OR (B7P_DATINI <= '" + dtos(date()) + "' AND B7P_DATFIM >= '" + dtos(date()) + "'))  "	
	cSql += "   AND D_E_L_E_T_ = ' ' "
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cSql),"TrbB7P",.T.,.F.)
    self:oRespBody["items"] := {}

    if !TrbB7P->(eof())
	    while !TrbB7P->(eof())
	    	aadd(self:oRespBody["items"], jsonObject():new())
            self:oRespBody["items"][nX]['code']             := TrbB7P->B7P_CODACR
            self:oRespBody["items"][nX]['description']      := PlRetSX5("ZJ",TrbB7P->B7P_CODACR)
            self:oRespBody["items"][nX]['type']             := TrbB7P->B7P_NIVACR
            self:oRespBody["items"][nX]['typeDescription']  := PlsNIVACR(TrbB7P->B7P_NIVACR)
	    	TrbB7P->(dbSkip())
            nX++
	    enddo
        self:cResponse := self:oRespBody:toJson()
    else
        self:lSuccess            := .f.
        self:nFault         := 400
        self:cFaultDesc     := "Nenhum registro localizado"
        self:cFaultDetail   := "O prestador não possui acreditações cadastradas, entre em contato com a operadora para realizar o cadastro."
    endif
    TrbB7P->(dbCloseArea())   
Return 

