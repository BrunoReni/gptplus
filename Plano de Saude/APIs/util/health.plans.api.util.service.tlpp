#include "tlpp-core.th"
#include "fileio.ch"

namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} BaseService
Classe responsavel por auxiliar as demais classes de services das APIs

@type class
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
class BaseService

    public Data jParams as json
    public Data jHeaders as json
    public Data jPath as json
    public Data jBody as json
    public Data jResult as json
    public Data nCodeStatus as numeric
    public Data aExpandables as character
    public Data aLinks as array
  
  	public method new() Constructor
    public method getStatusCode() as numeric
    public method getJsonResult() as json 
    public method setQueryParams(jQueryParams as json) as logical
    public method setHeaders(jHeaders as json) as logical
    public method setPathParams(jPathParams as json) as logical
    public method setBody(jBody as json) as logical
    public method setBodyString(cBody as character, cErro as character) as logical
    
    public method setAttributeJson(jAttribute as json, jResult as json) as Variant
    public method setError(cCode as character, cMessage as character, cDetailMessage as character, nStatusCode as numeric, aDetails as array) as logical
    public method checkRequiredKeys(aKeys as array, cErro as character) as logical
    public method convertFileToBase64(cFileDirectory as character) as character
    public method removeSpecialChar(cValue as character) as character
    public method breakArrayString(aString as array) as character
    public method addExpandables(cAttribute as character) as logical
    public method checkBodyFields(aFields as array, cErro as character, jBody as json, aDetailsErro as array, lSetError as logical, cMessage as character) as logical
    public method convertDateFormat(cDate as character) as Date
    public method fileDownload(cFile as character, cDirectory as character) as json
    public method addknowledgeBank(aAttachments as array, cAlias as character, cChave as character) as logical
    public method getKnowledgeBank(cAlias as character, cChave as character) as json
    public method addLinkJson(jHateoas as json) as logical
    
EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method new() class BaseService
    
    self:jParams := JsonObject():New()  
    self:jHeaders := JsonObject():New()
    self:jPath := JsonObject():New()
    self:jResult := JsonObject():New()   
    self:jBody := JsonObject():New()   
    self:nCodeStatus := 400 // Bad Request
    self:aExpandables := {}
    self:aLinks := {}

return self

/*/{Protheus.doc} getStatusCode
Método responsavel por retornar o status code de retorno da API

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method getStatusCode() as numeric class BaseService
return self:nCodeStatus

/*/{Protheus.doc} getJsonResult
Método responsavel por retornar o json de api

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method getJsonResult() as json class BaseService

    // Defini os atributos expansiveis quando tiver
    if Len(self:aExpandables) > 0
        self:jResult["_expandables"] := self:aExpandables
    endif

return self:jResult:toJson()

/*/{Protheus.doc} SetQueryParam
Método responsavel por definir os dados do Query Param recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method setQueryParams(jQueryParams as json) as logical class BaseService

    self:jParams := jQueryParams

    if self:jParams:hasProperty("fields")
        self:jParams["fieldsArray"] := StrToKarr(jQueryParams["fields"], ",")
    endif

    if !self:jParams:hasProperty("page")
        self:jParams["page"] := 1
    endif

    if !self:jParams:hasProperty("pageSize")
        self:jParams["pageSize"] := 20
    endif

return .T.

/*/{Protheus.doc} setHeaders
Método responsavel por definir os dados do headers recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 07/02/2023
@version Protheus 12
/*/
method setHeaders(jHeaders as json) as logical class BaseService

    self:jHeaders := jHeaders

return .T.

/*/{Protheus.doc} setPathParams
Método responsavel por definir os dados do Path Param recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method setPathParams(jPathParams as json) as logical class BaseService

    self:jPath := jPathParams

return .T.

/*/{Protheus.doc} setBody
Método responsavel por definir os dados do body recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method setBody(jBody as json) as logical class BaseService

    self:jBody := jBody

return .T.

/*/{Protheus.doc} setBodyString
Método responsavel por definir os dados do body recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method setBodyString(cBody as character, cErro as character) as logical class BaseService

    local jBody := JsonObject():new() as json
    local cErroJson := "" as character
    local lOk := .T. as logical

    cErroJson := jBody:fromJson(cBody)

    if !Empty(cErroJson)
        lOk := .F.
        self:SetError(cErro, "JSON inválido",;
                             cErroJson,;
                             406) // Not Acceptable
    else
        self:jBody := jBody
    endif
  
return lOk

/*/{Protheus.doc} setAttributeJson
Método responsavel atribuir no json o atributos informado

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
method setAttributeJson(jAttribute as json, jResult as json) as Variant class BaseService

    local xValue as Variant
    local lAddJsonResult as logical
    local lFieldsJson as logical
    local lExpandable as logical
    local lSetResponse as logical

    Default jResult := self:jResult

    lAddJsonResult := !jAttribute:hasProperty("addJsonResult") .Or. (jAttribute:hasProperty("addJsonResult") .And. jAttribute["addJsonResult"])
    lFieldsJson := !self:jParams:hasProperty("fieldsArray") .Or. Len(self:jParams["fieldsArray"]) == 0 .Or. Ascan(self:jParams["fieldsArray"], jAttribute["attribute"]) > 0
    lExpandable := !jAttribute:hasProperty("expandable") .Or. !jAttribute:hasProperty("expandable") .Or. Ascan(self:aExpandables, jAttribute["attribute"]) == 0
    lSetResponse := jAttribute:hasProperty("setResponse") .And. jAttribute["setResponse"]
    
    xValue := jAttribute["value"]

    Do Case
        Case jAttribute["type"] == "C" .And. ValType(xValue) == "C"
            xValue := Alltrim(xValue)

            if jAttribute:hasProperty("removeSpecialChar") .And. jAttribute["removeSpecialChar"]
                xValue := self:removeSpecialChar(xValue)
            endif

        Case jAttribute["type"] == "D" .And. ValType(xValue) == "D"
            xValue := IIf(Empty(xValue), Alltrim(xValue), Transform(DToS(xValue), "@R 9999-99-99"))
    EndCase

    if (lAddJsonResult .And. lFieldsJson .And. lExpandable) .Or. (lSetResponse .And. lAddJsonResult)
        jResult[jAttribute["attribute"]] := xValue
    endif

return xValue

/*/{Protheus.doc} setError
Define retorno de erro no json de retorno da api

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2022
@version Protheus 12
/*/
method setError(cCode as character, cMessage as character, cDetailMessage as character, nStatusCode as numeric, aDetails as array) as logical class BaseService

    local nX := 0 as numeric

    Default nStatusCode := 404
    Default aDetails := {}

    self:nCodeStatus := nStatusCode
    self:jResult["code"] := cCode
    self:jResult["message"] := cMessage
    self:jResult["detailedMessage"] := cDetailMessage
    
    if Len(aDetails) > 0
        self:jResult["details"] := {}

        For nX := 1 To Len(aDetails)
            aAdd(self:jResult["details"], aDetails[nX])
        Next nX
    endif

return .T.

/*/{Protheus.doc} checkRequiredKeys
Verifica os dados obrigatórios do query param e path param da api

@type method
@author Vinicius Queiros Teixeira
@since 07/02/2023
@version Protheus 12
/*/
method checkRequiredKeys(aKeys as array, cErro as character) as logical class BaseService

    local lCheck := .T. as logical
    local lOk := .T. as logical
    local nX := 0 as numeric
    local aDetailsErro := {} as array

    Default aKeys := {}

    For nX := 1 To Len(aKeys)
        lCheck := .T.

        Do Case
            Case aKeys[nX]["type"] == "queryParams"
                lCheck := self:jParams:hasProperty(aKeys[nX]["key"]) .And. !Empty(self:jParams[aKeys[nX]["key"]])
            
            Case aKeys[nX]["type"] == "pathParams"
                lCheck := self:jPath:hasProperty(aKeys[nX]["key"]) .And. !Empty(self:jPath[aKeys[nX]["key"]])
            
            Case aKeys[nX]["type"] == "body"
                lCheck := self:jBody:hasProperty(aKeys[nX]["key"]) .And. !Empty(self:jBody[aKeys[nX]["key"]])          
        EndCase

        if !lCheck
            aAdd(aDetailsErro, {"code" : cErro+"-406",; // Not Acceptable
                                "message" : "Chave "+aKeys[nX]["key"]+" obrigatória",;
                                "detailedMessage" : "Não foi informado no "+aKeys[nX]["type"]+" da requisição a chave "+aKeys[nX]["key"]+"."})
        endif
    Next nX

    if Len(aDetailsErro) > 0
        lOk := .F.
        self:setError(cErro, "Existem chaves obrigatórias que não foram informadas.",;
                             "Verifique a lista de erros no campo details para mais detalhes.",;
                             406,; // Not Acceptable
                             aDetailsErro) 
    endif

return lOk

/*/{Protheus.doc} convertFileToBase64
Método responsavel por converter arquivo em string base 64

@type method
@author Vinicius Queiros Teixeira
@since 18/02/2023
@version Protheus 12
/*/
method convertFileToBase64(cFileDirectory as character) as character class BaseService

    local cStringBase64 as character
	local aDirectory := {} as array
	local nHandle := 0 as numeric
	local cString as character

	aDirectory := Directory(cFileDirectory)

	if Len(aDirectory) >= 1
		nHandle := fOpen(cFileDirectory, FO_READWRITE + FO_SHARED)	
		FRead(nHandle, @cString, aDirectory[1][2]) 	
		cStringBase64 := Encode64(cString) 
		
		fClose(nHandle)
	Endif

return cStringBase64

/*/{Protheus.doc} removeSpecialChar
Método responsavel por remover os caracteres especias da string informada

@type method
@author Vinicius Queiros Teixeira
@since 20/02/2023
@version Protheus 12
/*/
method removeSpecialChar(cValue as character) as character class BaseService

    cValue := StrTran(cValue, "/", "")
	cValue := StrTran(cValue, '.', "")
	cValue := StrTran(cValue, "-", "")
	
return cValue

/*/{Protheus.doc} breakArrayString
Método responsavel por quebrar as strings do array em uma única string

@type method
@author Vinicius Queiros Teixeira
@since 20/02/2023
@version Protheus 12
/*/
method breakArrayString(aString as array) as character class BaseService

    local cStringResult as character
    local nX := 0 as numeric

    if ValType(aString) == "A" .And. Len(aString) > 0 .And. !Empty(aString[1])
        For nX := 1 To Len(aString)
            cStringResult += Alltrim(aString[nX])+" "    
        Next nX
    endif

return cStringResult

/*/{Protheus.doc} addExpandables
Método responsavel por definir os atributos expansíveis do json de retorno

@type method
@author Vinicius Queiros Teixeira
@since 23/02/2023
@version Protheus 12
/*/
method addExpandables(cAttribute as character) as logical class BaseService

    local lSucess := .F. as logical

    if !self:jParams:hasProperty("expand") .Or. !(cAttribute $ self:jParams["expand"]) // Define no expandables os atributos não expandido no query param (expand)
        aAdd(self:aExpandables, cAttribute)
        lSucess := .T.
    Endif

return lSucess

/*/{Protheus.doc} checkBodyFields
Verifica se os dados informado do body request da api estão válidos

@type method
@author Vinicius Queiros Teixeira
@since 17/03/2023
@version Protheus 12
/*/
method checkBodyFields(aFields as array, cErro as character, jBody as json, aDetailsErro as array, lSetError as logical, cMessage as character) as logical class BaseService

    local lCheck := .T. as logical
    local nX := 0 as numeric
    local nY := 0 as numeric
    local cOptions as character

    Default aFields := {}
    Default jBody := self:jBody
    Default aDetailsErro := {}
    Default lSetError := .T.
    Default cMessage := "Os campos do json no body estão inválidos"

    For nX := 1 To Len(aFields)
        if aFields[nX]:hasProperty("field")
            // Validação de campo não informado
            if !jBody:hasProperty(aFields[nX]["field"])
                if aFields[nX]:hasProperty("required") .And. aFields[nX]["required"]
                    lCheck := .F.
                    aAdd(aDetailsErro, {"code" : cErro+"A-406",; // Not Acceptable
                                        "message" : "Campo "+aFields[nX]["field"]+" não informado",;
                                        "detailedMessage" : "Não foi informado o campo "+aFields[nX]["field"]+"."})
                else
                    if aFields[nX]:hasProperty("default")
                        jBody[aFields[nX]["field"]] := aFields[nX]["default"]
                    endif
                endif
            else
                // Validação de campo obrigatório
                if aFields[nX]:hasProperty("required") .And. aFields[nX]["required"] .And. Empty(jBody[aFields[nX]["field"]])
                    lCheck := .F.
                    aAdd(aDetailsErro, {"code" : cErro+"B-406",; // Not Acceptable
                                        "message" : "Campo "+aFields[nX]["field"]+" obrigatório",;
                                        "detailedMessage" : "Não foi informado valor do campo "+aFields[nX]["field"]+"."})
                endif

                // Validação do tipo do campo
                if aFields[nX]:hasProperty("type") .And. ValType(jBody[aFields[nX]["field"]]) <> aFields[nX]["type"]
                    if aFields[nX]["type"] == "D"
                        if Empty(self:convertDateFormat(jBody[aFields[nX]["field"]]))
                            lCheck := .F.
                            aAdd(aDetailsErro, {"code" : cErro+"C-406",; // Not Acceptable
                                                "message" : "Tipo inválido para o campo "+aFields[nX]["field"],;
                                                "detailedMessage" : "O valor do campo "+aFields[nX]["field"]+" deve ser tipo data, no formato: yyyy-mm-dd."})
                        endif
                    else
                        if ValType(jBody[aFields[nX]["field"]]) <> aFields[nX]["type"]
                            lCheck := .F.
                            aAdd(aDetailsErro, {"code" : cErro+"D-406",; // Not Acceptable
                                                "message" : "Tipo inválido para o campo "+aFields[nX]["field"],;
                                                "detailedMessage" : "O valor do campo "+aFields[nX]["field"]+" deve ser do tipo ("+aFields[nX]["type"]+")."})
                        endif
                    endif
                endif

                // Validação do tamanho do campo
                if aFields[nX]:hasProperty("size") .And. ValType(jBody[aFields[nX]["field"]]) == "C" .And. Len(jBody[aFields[nX]["field"]]) <> aFields[nX]["size"]
                    lCheck := .F.
                    aAdd(aDetailsErro, {"code" : cErro+"E-406",; // Not Acceptable
                                        "message" : "Tamanho inválido para o campo "+aFields[nX]["field"],;
                                        "detailedMessage" : "O valor do campo "+aFields[nX]["field"]+" deve ter o tamanho "+cValToChar(aFields[nX]["size"])+"."})
                endif

                // Validação das opções do campo
                if aFields[nX]:hasProperty("options") .And. jBody:hasProperty(aFields[nX]["field"]) .And. Ascan(aFields[nX]["options"], jBody[aFields[nX]["field"]]) == 0
                    cOptions := ""
                    For nY := 1 To Len(aFields[nX]["options"])
                        cOptions += IIf(Empty(cOptions), aFields[nX]["options"][nY], ";"+aFields[nX]["options"][nY])
                    Next nY

                    lCheck := .F.
                    aAdd(aDetailsErro, {"code" : cErro+"F-406",; // Not Acceptable
                                        "message" : "Valor inválido para o campo "+aFields[nX]["field"],;
                                        "detailedMessage" : "O valor do campo "+aFields[nX]["field"]+" deve ser: "+cOptions})
                endif
            endif
        endif
    Next nX

    if !lCheck
        if lSetError
            self:setError(cErro, cMessage,;
                                 "Verifique a lista de erros no campo details para mais detalhes.",;
                                 406,; // Not Acceptable
                                 aDetailsErro)
        endif
    endif

return lCheck

/*/{Protheus.doc} convertDateFormat
Converte string de data do json (YYYY-MM-DD) para variavel do tipo Date (DD/MM/YYYY)

@type method
@author Vinicius Queiros Teixeira
@since 20/03/2023
@version Protheus 12
/*/
method convertDateFormat(cDate as character) as Date class BaseService

return SToD(StrTran(cDate, "-", ""))

/*/{Protheus.doc} fileDownload
Realiza o download do arquivo para o diretório no servidor (/protheusData/...)

@type method
@author Vinicius Queiros Teixeira
@since 22/03/2023
@version Protheus 12
/*/
method fileDownload(cFileURL as character, cDirectory as character) as json class BaseService

    local jDownload := JsonObject():new() as json
    local cExtension as character
    local cFileName as character
    local cErro as character
	local nStatusCode := 0 as numeric
    local cDateTime := FWTimeStamp(1)

    Default cDirectory := PLSMUDSIS(PLSMUDSIS(GetNewPar("MV_TISSDIR", "\TISS\"))+"UPLOAD\")

    cDateTime := Substr(cDateTime, 1, 4)+"_"+Substr(cDateTime, 5, 2)+"_"+Substr(cDateTime, 7, 2)+"_"+;
                 Substr(cDateTime, 9, 2)+"_"+Substr(cDateTime, 11, 2)+"_"+Substr(cDateTime, 13, 11) // Formato: YYYY_MM_DD_HH_MM_SS

    jDownload["sucess"] := .F.
    jDownload["message"] := ""
    jDownload["detailedMessage"] := ""
    jDownload["fileDirectory"] := ""

    splitPath(cFileURL, Nil, Nil, @cFileName, @cExtension)

    cFileName += "_"+cDateTime

    if At("?", cExtension) > 0
        cExtension := Substr(cExtension, 1, At("?", cExtension)-1)
    endif

    MemoWrite(cDirectory+cFileName+cExtension, HttpGet(cFileURL))
    nStatusCode := HTTPGetStatus(@cErro)
    
    if nStatusCode == 200 .And. File(cDirectory+cFileName+cExtension)
        jDownload["sucess"] := .T.
        jDownload["message"] := "Download realizado com sucesso!"
        jDownload["fileDirectory"] := cDirectory+cFileName+cExtension
    else
        jDownload["sucess"] := .F.
        jDownload["message"] := "Erro ao realizar download do arquivo."
        jDownload["detailedMessage"] := "Status code: "+cValToChar(nStatusCode)+"; Erro: "+cErro+"; Url: "+cFileURL
        
        FErase(cDirectory+cFileName+cExtension) // Apaga arquivo baixado com erro
    endif	

return jDownload

/*/{Protheus.doc} addknowledgeBank
Adiciona arquivos dentro do protheusData para o banco de conhecimento

@type method
@author Vinicius Queiros Teixeira
@since 22/03/2023
@version Protheus 12
/*/
method addknowledgeBank(aAttachments as array, cAlias as character, cChave as character) as logical class BaseService

    local nX := 0 as numeric
    local lAdd := .F. as logical

    if !Empty(cAlias) .And. !Empty(cChave)
		For nX := 1 To Len(aAttachments)
			PLSINCONH(aAttachments[nX]["fileDirectory"], cAlias, cChave, .T.)

			fErase(aAttachments[nX]["fileDirectory"])
			lAdd := .T.
		Next nX
	endif

return lAdd

/*/{Protheus.doc} getKnowledgeBank
Retorna os anexos no banco de conhecimento da tabela e chave informada

@type method
@version Protheus 12.1.2310
@author vinicius.queiros
@since 03/05/2023
@param cAlias, character, Tabela de referencia no banco de conhecimento
@param cChave, character, chave unica da tabela de referencia no banco de conhecimento
@return json, json com os anexos no banco de conhecimento
/*/
method getKnowledgeBank(cAlias as character, cChave as character) as json class BaseService

    local oBaseAdapter := BaseAdapter():new()
    local jResult as json

    oBaseAdapter:setQueryParams(self:jParams)
    jResult := oBaseAdapter:getPageKnowledgeBank(cAlias, cChave)
  
return jResult

/*/{Protheus.doc} addLinkJson
Adiciona link padrão Hateoas no json result 

@type method
@version Protheus 12.1.2310
@author vinicius.queiros
@since 29/05/2023
@param jHateoas, json, Link a ser adicionado com os campos rel e href
@return logical, se o link foi adicionado com sucesso no json result
/*/
method addLinkJson(jHateoas) as logical class BaseService

    local lAddLink := .f. as logical

    if !self:jResult:hasProperty("links")
        self:jResult["links"] := {}
    endif

    if jHateoas:hasProperty("rel") .and. jHateoas:hasProperty("href")
        aAdd(self:jResult["links"], jHateoas)

        lAddLink := .t.
    endif

return lAddLink
