#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.api.util

/*/{Protheus.doc} BaseAdapter
Classe responsavel por auxiliar as demais classes de adapter

@type class
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Class BaseAdapter

	Protected Data oAdapterBase As Object
	Protected Data jParams As Json
    Protected Data jHeaders As Json
    Protected Data jPath As Json
	Protected Data cDatabaseInUse As Character
	Protected Data aLinks As Array

  	Public Method new() Constructor
	Public Method getJsonResult() As Json
	Public Method setQueryParams(jQueryParams As Json) As Logical
    Public Method setHeaders(jHeaders As Json) As Logical
    Public Method setPathParams(jPathParams As Json) As Logical
	Public Method setLinks(jHateoas As Json) As Logical
	Public Method getPageKnowledgeBank() As Json

	Protected Method executeQueryAdapter(cQuery As Character, cWhere As Character, cOrder As Character) As Logical
	Protected Method breakValueQuery(cValue As Character) As Character
	Protected Method concatOperator() As Character
	Protected Method substrOperator() As Character
	Protected Method getFormatDate(cTableField As Character) As Character
	Protected Method addLinksJson(jResult As Json) As Json
	Protected Method convertDateFormat(cDate As Character, cType As Character) As Variant 

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method new() Class BaseAdapter

	Self:oAdapterBase := FWAdapterBaseV2():new("GET", .T.)
	Self:jParams := JsonObject():New()  
    Self:jHeaders := JsonObject():New()
    Self:jPath := JsonObject():New()
	Self:cDatabaseInUse := Upper(TCGetDB())
	Self:aLinks := {}

Return Self

/*/{Protheus.doc} getJsonResult
Retorna o Json de resposta da query executada

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method getJsonResult() As Json Class BaseAdapter

	Local jResult := JsonObject():new() As Json
		
	jResult:FromJson(Self:oAdapterBase:getJSONResponse())

	jResult := Self:addLinksJson(jResult)
	
Return jResult

/*/{Protheus.doc} SetQueryParam
Método responsavel por definir os dados do Query Param recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 16/02/2023
@version Protheus 12
/*/
Method setQueryParams(jQueryParams As Json) As Logical Class BaseAdapter

    Self:jParams := jQueryParams

Return .T.

/*/{Protheus.doc} setHeaders
Método responsavel por definir os dados do headers recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 16/02/2023
@version Protheus 12
/*/
Method setHeaders(jHeaders As Json) As Logical Class BaseAdapter

    Self:jHeaders := jHeaders

Return .T.

/*/{Protheus.doc} setPathParams
Método responsavel por definir os dados do Path Param recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 16/02/2023
@version Protheus 12
/*/
Method setPathParams(jPathParams As Json) As Logical Class BaseAdapter

    Self:jPath := jPathParams

Return .T.

/*/{Protheus.doc} setLinks
Método responsavel por adicionar link - HATEOAS

@type method
@author Vinicius Queiros Teixeira
@since 05/04/2023
@version Protheus 12
/*/
Method setLinks(jHateoas As Json) As Logical Class BaseAdapter

	Local lAddLink := .T. As Logical
	Local nX As Numeric
	Local nY As Numeric

	For nX := 1 To Len(jHateoas["paths"])
		For nY := 1 To Len(jHateoas["paths"][nX]["path"])
			If Self:jParams:hasProperty("fieldsArray") .And. Len(Self:jParams["fieldsArray"]) > 0 .And. Ascan(Self:jParams["fieldsArray"], jHateoas["paths"][nX]["path"][nY]) == 0
				lAddLink := .F.
				Exit
			EndIf				
		Next nY
		
		If !lAddLink
			Exit
		EndIf
	Next nX

	If lAddLink
    	aAdd(Self:aLinks, jHateoas)
	EndIf

Return lAddLink

/*/{Protheus.doc} getPageKnowledgeBank
Retorna o json com a pagina dos anexos da chave e tabela informada

@type method
@version Protheus 12.1.2310
@author vinicius.queiros
@since 04/05/2023
@param cAlias, character, Tabela de referencia no banco de conhecimento (AC9_ENTIDA)
@param cChave, character, chave unica da tabela de referencia no banco de conhecimento (AC9_CODENT)
@return json, json com o array items (anexos)
/*/
method getPageKnowledgeBank(cAlias as character, cChave as character) as json class BaseAdapter

	local cQuery as character
	local cWhere as character
	local cOrder as character
	local jResult as json

	// Mapea os campos de retorno da api
	self:oAdapterBase:addMapFields("code", "ACB_CODOBJ", .T., .F., {"ACB_CODOBJ", "C", tamSX3("ACB_CODOBJ")[1], 0})
	self:oAdapterBase:addMapFields("file", "ACB_OBJETO", .T., .F., {"ACB_OBJETO", "C", tamSX3("ACB_OBJETO")[1], 0})
	self:oAdapterBase:addMapFields("description", "ACB_DESCRI", .T., .F., {"ACB_DESCRI", "C", tamSX3("ACB_DESCRI")[1], 0})

	// Corpo da query
	cQuery := "SELECT #QueryFields# FROM "+retSqlName("AC9")+" AC9 "
	cQuery += "INNER JOIN "+retSqlName("ACB")+" ACB " 
	cQuery += "  ON ACB.ACB_FILIAL = '"+xFilial("ACB")+"'
	cQuery += " AND ACB.ACB_CODOBJ = AC9.AC9_CODOBJ "
	cQuery += " AND ACB.D_E_L_E_T_ = ' ' "
    cQuery += " WHERE #QueryWhere#"

	// Condição da query (where)
	cWhere := " AC9.AC9_FILIAL = '"+xFilial("AC9")+"' AND "
	cWhere += " AC9.AC9_ENTIDA = '"+cAlias+"' AND "
	cWhere += " AC9.AC9_FILENT = '"+xFilial(cAlias)+"' AND "
	cWhere += " AC9.AC9_CODENT = '"+cChave+"' AND "
	cWhere += " AC9.D_E_L_E_T_ = ' ' "

	// Ordernação dos dados
	cOrder := "ACB.ACB_CODOBJ"

	if self:executeQueryAdapter(cQuery, cWhere, cOrder)
		jResult := self:getJsonResult()
	endif
	
return jResult

/*/{Protheus.doc} executeQueryAdapter
Método responsavel por executar query com paginação, ordernação, filtro
através da classe FWAdapterBaseV2

@type method
@author Vinicius Queiros Teixeira
@since 08/02/2023
@version Protheus 12
/*/
Method executeQueryAdapter(cQuery As Character, cWhere As Character, cOrder As Character) As Logical Class BaseAdapter

	Local aFilter := {} As Array
	
	Self:oAdapterBase:setQuery(cQuery)
	Self:oAdapterBase:setWhere(cWhere)
	Self:oAdapterBase:setOrder(cOrder)

	// Define os dados recebidos pelo Query Param
	Self:oAdapterBase:setPage(Self:jParams["page"])
	Self:oAdapterBase:setPageSize(Self:jParams["pageSize"])

	If Self:jParams:hasProperty("order")       
        Self:oAdapterBase:setOrderQuery(Self:jParams["order"])        
    EndIf

	If Self:jParams:hasProperty("filter")
		aAdd(aFilter, {"FILTER", Self:jParams["filter"]}) // Filtro padrão oData                  
    EndIf

	If Len(aFilter) > 0
		Self:oAdapterBase:setUrlFilter(aFilter)
	EndIf

	If Self:jParams:hasProperty("fields")        
        Self:oAdapterBase:setFields(Self:jParams["fields"])        
    EndIf

	If Self:oAdapterBase:execute()
		Self:oAdapterBase:fillGetResponse()
	EndIf

Return Self:oAdapterBase:lOk

/*/{Protheus.doc} breakStringQuery
Método responsavel por quebrar o valor da string separada por virgula para ser
utilizada na query

@type method
@author Vinicius Queiros Teixeira
@since 14/02/2023
@version Protheus 12
/*/
Method breakValueQuery(cValue As Character) As Character Class BaseAdapter

	Local cResult As Character
	Local nX := 0 As Numeric
	Local aValue := {} As Array

	aValue := StrToKarr(cValue, ",")

	For nX := 1 To Len(aValue)
		cResult += "'"+aValue[nX]+"'"

		cResult += IIf(nX < Len(aValue), ",", "")
	Next nX

Return cResult

/*/{Protheus.doc} concatOperator
Método responsavel por retornar o operador de concatenação de acordo com
o banco de dados em uso

@type method
@author Vinicius Queiros Teixeira
@since 27/03/2023
@version Protheus 12
/*/
Method concatOperator() As Character Class BaseAdapter

Return IIf(Self:cDatabaseInUse $ "ORACLE|DB2|POSTGRES|INFORMIX", "||", "+")

/*/{Protheus.doc} substrOperator
Método responsavel por retornar o operador de substring de acordo com
o banco de dados em uso

@type method
@author Vinicius Queiros Teixeira
@since 27/03/2023
@version Protheus 12
/*/
Method substrOperator() As Character Class BaseAdapter

Return IIf(Self:cDatabaseInUse $ "ORACLE|DB2|POSTGRES|INFORMIX", "SUBSTR", "SUBSTRING")

/*/{Protheus.doc} getFormatDate
Método responsavel por retornar o campo da query no formato YYYY-MM-DD

@type method
@author Vinicius Queiros Teixeira
@since 27/03/2023
@version Protheus 12
/*/
Method getFormatDate(cTableField As Character) As Character Class BaseAdapter

	Local cQuery As Character

	cQuery := " CASE WHEN "+cTableField+" <> '' THEN "+;
				Self:substrOperator()+"("+cTableField+", 1, 4)"+Self:concatOperator()+"'-'"+Self:concatOperator()+;
				Self:substrOperator()+"("+cTableField+", 5, 2)"+Self:concatOperator()+"'-'"+Self:concatOperator()+;
				Self:substrOperator()+"("+cTableField+", 7, 2) "+;
				" ELSE '' END " 

Return cQuery

/*/{Protheus.doc} addLinksJson
Método responsavel por adicionar o links no json de resultado

@type method
@author Vinicius Queiros Teixeira
@since 12/04/2023
@version Protheus 12
/*/
Method addLinksJson(jResult As Json) As Json Class BaseAdapter

	Local nX As Numeric
	Local nY As Numeric
	Local nZ As Numeric
	Local nW As Numeric
	Local jLink As Json
	Local lLoop As Logical
	Local cCondition As Character

	If Len(Self:aLinks) > 0 .And. Len(jResult["items"]) > 0
		If !Self:jParams:hasProperty("fieldsArray") .Or. Len(Self:jParams["fieldsArray"]) == 0 .Or. Ascan(Self:jParams["fieldsArray"], "links") > 0
			For nX := 1 To Len(jResult["items"])
				
				For nY := 1 To Len(Self:aLinks)
					// Verifica condição para adicionar o link
					If Self:aLinks[nY]:hasProperty("conditions")
						lLoop := .F.
						For nZ := 1 To Len(Self:aLinks[nY]["conditions"])
							cCondition := IIf(Valtype(jResult["items"][nX][Self:aLinks[nY]["conditions"][nZ]["field"]]) == "C",;
											  "'"+jResult["items"][nX][Self:aLinks[nY]["conditions"][nZ]["field"]]+"'",;
											  jResult["items"][nX][Self:aLinks[nY]["conditions"][nZ]["field"]])

							cCondition += " "+Self:aLinks[nY]["conditions"][nZ]["operation"]+" "+Self:aLinks[nY]["conditions"][nZ]["value"] 
							If !(&cCondition)
								lLoop := .T.
								Loop
							EndIf
						Next nZ

						If lLoop
							Loop
						EndIf
					EndIf
					
					If !jResult["items"][nX]:hasProperty("links")
						jResult["items"][nX]["links"] := {}
					EndIf
					
					jLink := {"rel" : Self:aLinks[nY]["rel"], "href" : Self:aLinks[nY]["url"]}

					// Adiciona no Endpoint o path params
					For nZ := 1 To Len(Self:aLinks[nY]["paths"])
						jLink["href"] += "/"
						
						For nW := 1 To Len(Self:aLinks[nY]["paths"][nZ]["path"])
							jLink["href"] += jResult["items"][nX][Self:aLinks[nY]["paths"][nZ]["path"][nW]]
						Next nW

						jLink["href"] += "/"+Self:aLinks[nY]["paths"][nZ]["resource"]
					Next nZ

					// Adiciona no Endpoint o query params
					if Self:aLinks[nY]:hasProperty("queryParams")
						for nZ := 1 to len(Self:aLinks[nY]["queryParams"])

							jLink["href"] += iif(nZ == 1, "?", "&")					
							jLink["href"] += Self:aLinks[nY]["queryParams"][nZ]["key"]+"="+Self:aLinks[nY]["queryParams"][nZ]["value"]

						next nZ
					endif

					aAdd(jResult["items"][nX]["links"], jLink)
				Next nY
			Next nX
		EndIf
	EndIf

Return jResult

/*/{Protheus.doc} convertDateFormat
Converte string de data do json (YYYY-MM-DD) para data no tlpp

@type method
@version Protheus 12.1.2310  
@author vinicius.queiros
@since 26/04/2023
@param cDate, date, data no formato da api
@param cType, character, tipo para converter a data: S ("20230426"), C ("26/04/2023") e D (26/04/2023)
@return variant, data convertida no formato do tlpp
/*/
Method convertDateFormat(cDate As Character, cType As Character) As Variant Class BaseAdapter

	Local cStringDate := StrTran(cDate, "-", "")
	Local xDateFormat As Variant

	Do Case
		Case cType == "C"
			xDateFormat := DToC(SToD(cStringDate))
		Case cType == "S"
			xDateFormat := cStringDate
		Case cType == "D"
			xDateFormat := SToD(cStringDate)
	EndCase

Return xDateFormat
