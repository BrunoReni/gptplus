#INCLUDE 'protheus.ch'
#INCLUDE 'restful.ch'
#DEFINE SQLSERVER "MSSQL"
#DEFINE ORACLE "ORACLE"
#DEFINE POSTGRES "POSTGRES"

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSDaoAux
  Dao Auxiliar 

@author  sakai
@version P12
@since   06/09/22
/*/
//------------------------------------------------------------------- 
class PLSDaoAux
    
    Data cAliasTemp As Character
    Data cQuery as Character
    Data cDb as Character
    Data cPageSize as Character
    Data cNumPage as Character
    Data cAlias as Character
    
    Public Method New()
    Public Method getAliasTemp()
    Public Method closeQuery()
    Public Method dbSkip()
    Public Method isEof()
    Public Method getRowControl(cAlias,cFieldOrder)
    Public Method getWhereRow()
    Public Method setAlias()
    Public Method hasNext()
    Public Method setPageSize(cPageSize)
	Public Method setNumPage(cNumPage)

    Method executaQuery()
    Method aliasSelected()
    Method setQuery(cQuery)
    Method getQuery()

EndClass

Method New() class PLSDaoAux
    
    self:cAliasTemp  := ""
    self:cQuery      := ""
    self:cDB 		 := TcGetDB()
    self:cAlias      := ""
    self:cPageSize   := "10"
    self:cNumPage    := "1"

Return self

Method setAlias(cAlias) Class PLSDaoAux
    self:cAlias := cAlias
Return

Method setPageSize(cPageSize) Class PLSDaoAux
	self:cPageSize := cPageSize
Return

Method setNumPage(cNumPage) Class PLSDaoAux
	self:cNumPage := cNumPage
Return

Method getAliasTemp() Class PLSDaoAux
	if empty(self:cAliasTemp)
		self:cAliasTemp := getNextAlias()
	endif
Return self:cAliasTemp

Method setQuery(cQuery) Class PLSDaoAux
	self:cQuery := cQuery
Return

Method getQuery() Class PLSDaoAux
Return self:cQuery

Method executaQuery() Class PLSDaoAux
	Local lFound := .F.

	self:closeQuery()
	self:setQuery(self:getQuery())
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,self:getQuery()),self:getAliasTemp(),.F.,.T.)

	lFound := (self:getAliasTemp())->(!Eof())
	If !lFound
		self:closeQuery()
	EndIf

Return lFound

Method closeQuery() Class PLSDaoAux
	if self:aliasSelected()
		(self:getAliasTemp())->(dbCloseArea())
	endIf
Return

Method aliasSelected() Class PLSDaoAux
Return Select(self:getAliasTemp()) > 0

Method dbSkip() Class PLSDaoAux
    (self:getAliasTemp())->(DbSkip())
Return

Method isEof() Class PLSDaoAux
Return (self:getAliasTemp())->(Eof())

Method getRowControl(cFieldOrder) Class PLSDaoAux

	Local cQuery := ""

	// Para fazer o controle da paginação em SQL, usado dessa maneira porque OFFSET e FETCH não funciona em versões sql menor que 2012
	cQuery += iif(SQLSERVER $ self:cDB .Or. ORACLE  $ self:cDB, " WITH " + self:cAlias + " AS ( SELECT ROW_NUMBER() OVER(ORDER BY " + cFieldOrder + " ) AS ROW#, ", " SELECT ")
	
Return cQuery

Method getWhereRow() Class PLSDaoAux

	Local cQuery := ""
	Local cNumIni := alltrim(str((val(self:cNumPage ) - 1) * val(self:cPageSize)))
	Local cNumFim := alltrim(str(((val(self:cNumPage )) * val(self:cPageSize)) + 1))

	// Para fazer o controle da paginação em SQL, usado dessa maneira porque OFFSET e FETCH não funciona em versões sql menor que 2012
	If self:cDB <> "POSTGRES"
		cQuery += " ) SELECT * FROM " + self:cAlias
		If val(self:cPageSize) > 0
			cQuery += " WHERE ROW# > " + cNumIni
			cQuery += "  AND ROW# <= " + cNumFim
		EndIf
	EndIf

Return cQuery

Method hasNext() Class PLSDaoAux
    Local lTemProx := .F.
    If self:aliasSelected()
        lTemProx := !(self:getAliasTemp())->(Eof())
    EndIf
return lTemProx