#include 'Protheus.ch'
#include "Fileio.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSDtIntSvc

@author    Lucas Nonato
@version   V12
@since     05/09/2022
/*/
class PLSDtIntSvc from CenRequest 

public method New(oRest) constructor
public method put()
public method checkBody()

endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} new

@author    Lucas Nonato
@version   V12
@since     05/09/2022
/*/
method New(oRest) class PLSDtIntSvc 
_Super:New(oRest,'')
return self

//-------------------------------------------------------------------
/*/{Protheus.doc} put

@author    Lucas Nonato
@version   V12
@since     05/09/2022
/*/
method put() class PLSDtIntSvc
local dDate     := stod(strtran(self:jRequest['date'],"-",''))
local aRet      := {}
local cRet      := ''
local cDatVal   := ''
local oJson     := JsonObject():new()
//Internacao
if self:jRequest['type'] == "I"
    aRet := PLSA92DtIn(.T.,dDate,StrTran(self:jRequest['time'],":","") )
    if len(aRet) > 1 .and. !('SUCESSO' $ upper(aRet[1]))
        cRet := aRet[1]
    endIf

//Alta
elseif self:jRequest['type'] == "A"
    cRet := PLSADtAlt(.T.,dDate,StrTran(self:jRequest['time'],":",""), self:jRequest['dischargedType'] )   
endIf

if !empty(cRet)
    self:nFault       := 400
    self:nStatus      := 400
    self:cFaultDesc   := "Requisição invalida."
    self:cFaultDetail   := cRet
    self:lSuccess       := .f.
else
    oJson['password'] := BE4->BE4_SENHA
    cDatVal := dtos(BE4->BE4_DATVAL)
    oJson['passwordExpireDate'] := iif(!empty(cDatVal),SubStr(cDatVal,1,4)+"-"+SubStr(cDatVal,5,2)+"-"+SubStr(cDatVal,7,2),"")
    self:lSuccess   := .t.
    self:cResponse  := FWJsonSerialize(oJson, .F., .F.)
endif

return self:lSuccess

//-------------------------------------------------------------------
/*/{Protheus.doc} checkBody

@author    Lucas Nonato
@version   V12
@since     08/03/2021
/*/
method checkBody() class PLSDtIntSvc

_Super:checkBody()

if self:lSuccess .and. empty(self:jRequest['type']) .or. (!empty(self:jRequest['type']) .and. !(self:jRequest['type'] $ 'IA'))
    self:cFaultDetail := "Campo 'type' obrigatório."
    self:lSuccess     := .F.
endif

if self:lSuccess .and. empty(self:jRequest['date'])
    self:cFaultDetail := "Campo 'date' obrigatório."
    self:lSuccess     := .F.
endif

if self:lSuccess .and. empty(self:jRequest['time'])
    self:cFaultDetail := "Campo 'time' obrigatório."
    self:lSuccess     := .F.
endif

if self:lSuccess .and. self:jRequest['type'] == 'A' .and. empty(self:jRequest['dischargedType'])
    self:cFaultDetail := "Campo 'dischargedType' obrigatório para Alta."
    self:lSuccess     := .F.
endif

if self:lSuccess
    BE4->(dbsetOrder(2))//BE4_FILIAL+BE4_CODOPE+BE4_ANOINT+BE4_MESINT+BE4_NUMINT
    if !BE4->(msseek(xfilial("BE4")+self:oRest:authorizationId))
        self:cFaultDetail := "Internação ["+self:oRest:authorizationId+"] não localizada no sistema de gestão."
        self:lSuccess     := .F.
    endif
endif

if self:lSuccess .and. self:jRequest['type'] == 'A' 
    if empty(BE4->BE4_DATPRO)
        self:cFaultDetail := "Data de internação não informada"
        self:lSuccess     := .F.
    elseif !PlsDtGuias(stod(strtran(self:jRequest['date'],"-",'')),self:jRequest['time'])
        self:cFaultDetail := "Não será possível incluir uma data de alta, devido ter guias posteriores a essa data!"
        self:lSuccess     := .F.
    elseif !PLSVLDDAT(BE4->BE4_DATPRO,BE4->BE4_HORPRO,stod(strtran(self:jRequest['date'],"-",'')),strtran(self:jRequest['time'],':',''))
        self:cFaultDetail := "A Data/Hora de Alta deve ser maior que a Data/Hora de Internacao"
        self:lSuccess     := .F.
    endif
endif

if !self:lSuccess 
    self:nFault       := 400
    self:nStatus      := 400
    self:cFaultDesc   := "Requisição invalida."
endif

return self:lSuccess