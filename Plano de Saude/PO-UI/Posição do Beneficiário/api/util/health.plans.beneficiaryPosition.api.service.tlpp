#Include "tlpp-core.th"
#Include "fileio.ch"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} BaseService
Classe responsavel por auxiliar as demais classes de serviços

@type class
@author Vinicius Queiros Teixeira
@since 03/10/2022
@version Protheus 12
/*/
Class BaseService

    Protected Data jParam As Json
    Protected Data jResult As Json
    Protected Data nCodeStatus As Numeric
  
  	Public Method new() Constructor
    Public Method getCodeStatus() As Numeric
    Public Method getJsonResult() As Json
    
    Protected Method setQueryParam(jQueryParam As Json) As Logical
    Protected Method setFormStruct(cAlias As Character, cFields As Character, aVirtual As Array, lCleanJson As Logical, lAddFolders As Logical) As Logical
    Protected Method setAttribute(cBaseAtribute As Character, cNewAtribute As Character, xValue As Variant, cTipo As Character) As Json
    Protected Method setError(cCode As Character, cMessage As Character, cDetailMessage As Character, nCodeStatus As Numeric) As Logical
    Protected Method convertToBase64(cFileDirectory As Character) As Character
    Protected Method pageArrayItems(jQueryParam As Json, aItems As Array) As Logical
    
EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 03/10/2022
@version Protheus 12
/*/
Method new() Class BaseService

    Self:jResult := JsonObject():New()
    Self:nCodeStatus := 400 // Bad Request

Return Self

/*/{Protheus.doc} getCodeStatus
Método responsavel por retornar o status code de retorno da API

@type method
@author Vinicius Queiros Teixeira
@since 23/11/2022
@version Protheus 12
/*/
Method getCodeStatus() As Numeric Class BaseService
Return Self:nCodeStatus

/*/{Protheus.doc} getJsonResult
Método responsavel por retornar o json de api

@type method
@author Vinicius Queiros Teixeira
@since 23/11/2022
@version Protheus 12
/*/
Method getJsonResult() As Json Class BaseService
Return Self:jResult:toJson()

/*/{Protheus.doc} SetQueryParam
Método responsavel por definir os dados do Query Param recebidos pela requisição

@type method
@author Vinicius Queiros Teixeira
@since 03/10/2022
@version Protheus 12
/*/
Method SetQueryParam(jQueryParam As Json) As Logical Class BaseService

    Self:jParam := jQueryParam

    If Self:jParam:hasProperty("fields")
        Self:jParam["fieldsArray"] := StrToKarr(Self:jParam["fields"], ",")
    EndIf

    If !Self:jParam:hasProperty("page")
        Self:jParam["page"] := 1
    EndIf

    If !Self:jParam:hasProperty("pageSize")
        Self:jParam["pageSize"] := 20
    EndIf

Return .T.

/*/{Protheus.doc} setFormStruct
Método responsavel por definir os dados do JSON de acordo com a estrutura
do dicionário de dados.

@type method
@author Vinicius Queiros Teixeira
@since 03/10/2022
@version Protheus 12
@Obs Obrigatório que o registro do alias informado esteja posicionado
/*/
Method setFormStruct(cAlias As Character, cFields As Character, aVirtual As Array, lCleanJson As Logical, lAddFolders As Logical) As Logical Class BaseService

    Local nX := 0
    Local nY := 0
    Local oStruct As Object
    Local aBox As Array
    Local aItens As Array
    Local jField As Json
    Local jFolder As Json
    Local nPosVirtual As Numeric

    Default aVirtual := {}
    Default lCleanJson := .T.
    Default lAddFolders := .T.

    If lCleanJson
        Self:jResult["fields"] := JsonObject():new()
        Self:jResult["struct"] := {}
        Self:jResult["folders"] := {}
    EndIf

    oStruct := FWFormStruct(2, cAlias, {|cCampo| Alltrim(cCampo) $ cFields}, .F.) // Verifica quais campos serão retornados
    // Adiciona as estruturas dos campos (SX3) no JSON de retorno
    For nX := 1 To Len(oStruct["aFields"])
        aBox := {}

        If Len(oStruct["aFields"][nX][13]) > 0 // Tratamento para guardar o cBox do campo
            For nY := 1 To Len(oStruct["aFields"][nX][13])
                aItens := StrTokArr(oStruct["aFields"][nX][13][nY], "=")

                If Len(aItens) >= 2
                    aAdd(aBox, {"value" : Alltrim(aItens[1]), "description" : Alltrim(aItens[2])})
                EndIf			
            Next
        EndIf

        jField := {"field" : oStruct["aFields"][nX][1],;
                   "type" : TamSX3(oStruct["aFields"][nX][1])[3],;
                   "title" : oStruct["aFields"][nX][3],;
                   "description" : oStruct["aFields"][nX][4],;
                   "picture" : oStruct["aFields"][nX][7],;
                   "size" : TamSX3(oStruct["aFields"][nX][1])[1],;
                   "decimals" : TamSX3(oStruct["aFields"][nX][1])[2],;
                   "cbox" : aBox,;
                   "folder" : oStruct["aFields"][nX][11],;
                   "order" : oStruct["aFields"][nX][2]}
        
        aAdd(Self:jResult["struct"], jField)
        
        // Adiciona os valores dos campos no atributo fields
        nPosVirtual := Ascan(aVirtual, {|x| x["field"] == jField["field"]})
        If nPosVirtual > 0
            Self:setAttribute("fields", Lower(jField["field"]), Eval(aVirtual[nPosVirtual]["expression"]), jField["type"])
        Else
            Self:setAttribute("fields", Lower(jField["field"]), {|| &(cAlias+"->"+jField["field"])}, jField["type"])
        EndIf
    Next nX

    aSort(Self:jResult["struct"],,,{|x,y| x["folder"]+x["order"] < y["folder"]+y["order"]})

    // Adiciona as pastas (SXA) no JSON de retorno
    If lAddFolders
        For nX := 1 To Len(oStruct["aFolders"])
            jFolder := {"id" : oStruct["aFolders"][nX]["cId"], "title" : oStruct["aFolders"][nX]["cTitulo"]}
            
            aAdd(Self:jResult["folders"], jFolder)
        Next nX
    EndIf

Return .T.

/*/{Protheus.doc} setAttribute
Método responsavel por validar e atribuir no Json os atributos informados

@type method
@author Vinicius Queiros Teixeira
@since 03/10/2022
@version Protheus 12
/*/
Method setAttribute(cBaseAtribute As Character, cNewAtribute As Character, xValue As Variant, cTipo As Character) As Json Class BaseService

    Local xConteudo As Variant

    Default cBaseAtribute := ""

    If !Self:jParam:hasProperty("fieldsArray") .Or. Len(Self:jParam["fieldsArray"]) == 0 .Or. Ascan(Self:jParam["fieldsArray"], cNewAtribute)
        xConteudo := IIf(ValType(xValue) == "B", Eval(xValue), xValue)

        Do Case
            Case cTipo == "C" .And. ValType(xConteudo) == "C"
                xConteudo := Alltrim(xConteudo)
 
            Case cTipo == "D" .And. ValType(xConteudo) == "D"
                If Empty(xConteudo)
                    xConteudo := Alltrim(xConteudo)
                Else
                    xConteudo := Transform(DToS(xConteudo), "@R 9999-99-99")
                EndIf
        EndCase

        If !Empty(cBaseAtribute)
            Self:jResult[cBaseAtribute][cNewAtribute] := xConteudo
        Else
            Self:jResult[cNewAtribute] := xConteudo
        EndIf
    EndIf

Return Self:jResult

/*/{Protheus.doc} setError
Define erro no json de retorno da api

@type method
@author Vinicius Queiros Teixeira
@since 23/11/2022
@version Protheus 12
/*/
Method setError(cCode As Character, cMessage As Character, cDetailMessage As Character, nCodeStatus As Numeric) As Logical Class BaseService

    Default nCodeStatus := 400 // Bad Request
    
    Self:nCodeStatus := nCodeStatus
    Self:jResult["code"] := cCode
    Self:jResult["message"] := cMessage
    Self:jResult["detailedMessage"] := cDetailMessage

Return .T.

/*/{Protheus.doc} convertToBase64
Método responsavel por converter arquivo em string base 64

@type method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method convertToBase64(cFileDirectory As Character) As Character Class BaseService

    Local cStringBase64 As Character
	Local aDirectory := {} As Array
	Local nHandle := 0 As Numeric
	Local cString As Character

	aDirectory := Directory(cFileDirectory)

	If Len(aDirectory) >= 1
		nHandle := fOpen(cFileDirectory, FO_READWRITE + FO_SHARED)	
		FRead(nHandle, @cString, aDirectory[1][2]) 	
		cStringBase64 := Encode64(cString) 
		
		fClose(nHandle)
	Endif

Return cStringBase64

/*/{Protheus.doc} pageArrayItems
Método responsavel por paginar um array e adiciona no atributo 'items'

@type method
@author Vinicius Queiros Teixeira
@since 06/12/2022
@version Protheus 12
/*/
Method pageArrayItems(jQueryParam As Json, aItems As Array) As Logical Class BaseService

    Local lSucess := .T. As Logical
    Local nX := 0 As Numeric
    Local nPage := 0 As Numeric
    Local nPageSize := 0 As Numeric
    Local nPagInicio := 0 As Numeric
    Local nPagFinal := 0 As Numeric
    Local nLenItems := 0 As Numeric

    nPage := IIf(ValType(jQueryParam["page"]) == "C", Val(jQueryParam["page"]), jQueryParam["page"])
    nPageSize := IIf(ValType(jQueryParam["pageSize"]) == "C", Val(jQueryParam["pageSize"]), jQueryParam["pageSize"])

    Self:jResult["items"] := {}
    Self:jResult["hasNext"] := .F.
    Self:jResult["remainingRecords"] := 0

    nPagInicio := ((nPage - 1) * nPageSize) + 1
    nPagFinal := nPage * nPageSize
    nLenItems := Len(aItems)

    For nX := nPagInicio To nPagFinal
        If nX > nLenItems
            Exit
        EndIf

        aAdd(Self:jResult["items"], aItems[nX])
    Next nX

    If nLenItems > nPagFinal
        Self:jResult["hasNext"] := .T.
        Self:jResult["remainingRecords"] := nLenItems - nPagFinal
    EndIf

Return lSucess
