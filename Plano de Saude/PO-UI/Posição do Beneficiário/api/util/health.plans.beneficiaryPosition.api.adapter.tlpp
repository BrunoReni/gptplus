#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} BaseAdapter
Classe responsavel por auxiliar as demais classes de adapter

@type class
@author Vinicius Queiros Teixeira
@since 29/10/2022
@version Protheus 12
/*/
Class BaseAdapter

	Protected Data aStruct As Array
	Protected Data nTotalValues As Numeric
	Protected Data lTotalValues As Logical
	Protected Data oAdapterBase

  	Public Method new() Constructor
    Public Method mapDictionaryFields(cAlias As Character, aFieldsVirtual As Array, cFieldsReturn As Character) As Logical
	Public Method getListQueryParam(cQueryParam As Character) As Character
	Public Method getJsonResult() As Json

	Protected Method executeQueryAdapter(cQuery As Character, cWhere As Character, cOrder As Character, jParam As Json) As Logical
	Protected Method getTiposQuery(aTipos As Array) As Character
	Protected Method setTotalValues(nValue As Numeric) As Numeric
	Protected Method setStyleReturn(cPropItems As Character) As Logical

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 29/10/2022
@version Protheus 12
/*/
Method new() Class BaseAdapter

	Self:aStruct := {}
	Self:nTotalValues := 0
	Self:lTotalValues := .F.
	Self:oAdapterBase := FWAdapterBaseV2():new("GET", .T.)

Return Self

/*/{Protheus.doc} mapDictionaryFields
Método responsavel por mapear os atributos e campos da tabela de acordo com 
o dicionário de dados (SX3)

@type method
@author Vinicius Queiros Teixeira
@since 29/10/2022
@version Protheus 12
/*/
Method mapDictionaryFields(cAlias As Character, aFieldsVirtual As Array, cFieldsReturn As Character) As Logical Class BaseAdapter
   
	Local nX := 0 As Numeric
	Local nY := 0 As Numeric
	Local jField As Json
	Local lVirtual := .F.
    Local nFindVirtual := 0
	Local aBox := {} As Array
	Local aItens := {} As Array
	Local cValue As Character
	Local cDescription As Character
    Local oStruct As Object

    Default aFieldsVirtual := {}
	Default cFieldsReturn := "" 

    oStruct := FWFormStruct(2, cAlias, {|cCampo| Empty(cFieldsReturn) .Or. Alltrim(cCampo) $ cFieldsReturn}, .F.) // Verifica quais campos serão retornados

	For nX := 1 To Len(oStruct["aFields"])
		
		aBox := {}
		lVirtual := oStruct["aFields"][nX][16]

		// Tratamento para guardar o cBox do campo
		If Len(oStruct["aFields"][nX][13]) > 0
			For nY := 1 To Len(oStruct["aFields"][nX][13])
				aItens := StrTokArr(oStruct["aFields"][nX][13][nY], "=")

				If Len(aItens) >= 2
					cValue := Alltrim(aItens[1])
					cDescription := Alltrim(aItens[2])

					aAdd(aBox, {"value" : cValue, "description" : cDescription})
				EndIf			
			Next
		EndIf

		jField := {"field" : oStruct["aFields"][nX][1],;
				   "type" : TamSX3(oStruct["aFields"][nX][1])[3],;
				   "title" : oStruct["aFields"][nX][3],;
				   "description" : oStruct["aFields"][nX][4],;
				   "picture" : oStruct["aFields"][nX][7],;
				   "size" : TamSX3(oStruct["aFields"][nX][1])[1],;
				   "decimals" : TamSX3(oStruct["aFields"][nX][1])[2],;
				   "cbox" : aBox}
        
        nFindVirtual := Ascan(aFieldsVirtual, {|x| AllTrim(x["field"]) == Upper(jField["field"])})

		Do Case
			Case nFindVirtual > 0
				Self:oAdapterBase:AddMapFields(jField["field"], aFieldsVirtual[nFindVirtual]["fieldVirtual"], .T., .F.,;
                                     {aFieldsVirtual[nFindVirtual]["fieldVirtual"], aFieldsVirtual[nFindVirtual]["type"],;
                                      aFieldsVirtual[nFindVirtual]["size"], aFieldsVirtual[nFindVirtual]["decimals"]})

			Case !lVirtual // Demais campos virtuais não serão retornados
				Self:oAdapterBase:AddMapFields(jField["field"], jField["field"], .T., .F., {jField["field"], jField["type"], jField["size"], jField["decimals"]})
		EndCase

        aAdd(Self:aStruct, jField)
	Next nX

Return .T.

/*/{Protheus.doc} getListQueryParam
Retorna a lista com os itens informado no query param para serem utilizados na query

@type method
@author Vinicius Queiros Teixeira
@since 17/11/2022
@version Protheus 12
/*/
Method getListQueryParam(cQueryParam As Character) As Character Class BaseAdapter

	Local aList := {} As Array
	Local nX := 0 As Numeric
	Local cListReturn As Character

	Default cQueryParam := ""

	If !Empty(cQueryParam)
		aList := StrToKarr(Upper(cQueryParam), ",")
        
		For nX := 1 To Len(aList)
			If !Empty(aList[nX])
				If !Empty(cListReturn)
					cListReturn += ","
				EndIf
				cListReturn += "'"+aList[nX]+"'"
			EndIf
		Next
	EndIf

Return cListReturn

/*/{Protheus.doc} getJsonResult
Retorna o Json de resposta com os items, struct

@type method
@author Vinicius Queiros Teixeira
@since 01/11/2022
@version Protheus 12
/*/
Method getJsonResult() As Json Class BaseAdapter

	Local jResult := JsonObject():new() 
	
	jResult:FromJson(Self:oAdapterBase:getJSONResponse())

	If Len(Self:aStruct) > 0
		jResult["struct"] := Self:aStruct
	EndIf
	If Self:lTotalValues
		jResult["totalValues"] := Self:nTotalValues
	EndIf
	
Return jResult 

/*/{Protheus.doc} executeQueryAdapter
Método responsavel por executar query com paginação, ordernação, filtro
através da classe FWAdapterBaseV2

@type method
@author Vinicius Queiros Teixeira
@since 01/11/2022
@version Protheus 12
/*/
Method executeQueryAdapter(cQuery As Character, cWhere As Character, cOrder As Character, jParam As Json) As Logical Class BaseAdapter

	Local aFilter := {} As Array
	
	Self:oAdapterBase:setQuery(cQuery)
	Self:oAdapterBase:setWhere(cWhere)
	Self:oAdapterBase:setOrder(cOrder)

	// Define os dados recebidos pelo Query Param
	Self:oAdapterBase:setPage(jParam["page"])
	Self:oAdapterBase:setPageSize(jParam["pageSize"])

	If jParam:hasProperty("order")       
        Self:oAdapterBase:setOrderQuery(jParam["order"])        
    EndIf

	If jParam:hasProperty("filter")
		aAdd(aFilter, {"FILTER", jParam["filter"]}) // Filtro padrão oData                  
    EndIf

	If Len(aFilter) > 0
		Self:oAdapterBase:setUrlFilter(aFilter)
	EndIf

	If jParam:hasProperty("fields")        
        Self:oAdapterBase:setFields(jParam["fields"])        
    EndIf

	If Self:oAdapterBase:execute()
		Self:oAdapterBase:fillGetResponse()
	EndIf

Return Self:oAdapterBase:lOk

/*/{Protheus.doc} getTiposQuery
Retorna os tipos do array para serem utilizados na query

@type Method
@author Vinicius Queiros Teixeira
@since 14/10/2022
@version Protheus 12
/*/
Method getTiposQuery(aTipos As Array) As Character Class BaseAdapter

	Local cTipos As Character
	Local nX := 0 As Numeric

	For nX := 1 To Len(aTipos)
		cTipos += "'"+aTipos[nX]+"'"

		cTipos += IIf(nX < Len(aTipos), ",", "")
	Next nX
	
Return cTipos

/*/{Protheus.doc} setTotalValues
Define o atributo totalValues (valor total) para retornar no json

@type Method
@author Vinicius Queiros Teixeira
@since 14/10/2022
@version Protheus 12
/*/
Method setTotalValues(nValue As Numeric) As Numeric Class BaseAdapter

	Self:nTotalValues := nValue
	Self:lTotalValues := .T.

Return Self:nTotalValues

/*/{Protheus.doc} setStyleReturn
Permite configurar o nome da propriedade de retorno dos itens da listagem do verbo GET.

@type Method
@author Vinicius Queiros Teixeira
@since 24/11/2022
@version Protheus 12
/*/
Method setStyleReturn(cPropItems As Character) As Logical Class BaseAdapter

	Self:oAdapterBase:setStyleReturn(cPropItems)

Return .T.
