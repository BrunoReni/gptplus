#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.eligibleProcedure

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

#Define __aCdCri001 {"035", "Usuario nao possui cobertura para este procedimento."}
#Define __aCdCri003 {"002", "Procedimento em carencia para este usuario"}

/*/{Protheus.doc} EligibleProceduresBeneficiaryService
Classe responsavel por processar a busca de títulos de cobrança 
do beneficiário

@type class
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Class EligibleProceduresBeneficiaryService From BaseService

  	Public Method new() Constructor
    Public Method allEligibleProceduresPage(cSubscriberId As Character) As Logical
   
EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Method new() Class EligibleProceduresBeneficiaryService
    _Super:new()
Return Self

/*/{Protheus.doc} allEligibleProceduresPage
Método responsavel por retornar a pagina de procedimentos elegivies do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Method allEligibleProceduresPage(cSubscriberId As Character) As Logical Class EligibleProceduresBeneficiaryService

    Local aAreaBA1 := BA1->(FWGetArea()) As Array
    Local lSucess := .F. As Logical
    Local cAliasTemp As Character
    Local cDeProcedimento As Character
    Local cAteProcedimento As Character
    Local cTabProcedimento As Character
    Local aAutorizacao As Array
    Local aDadosBeneficiario As Array
    Local aDadosRDA As Array
    Local nX := 0 As Numeric
    Local cCarencia As Character
    Local cCobertura As Character
    Local aProcedimentos := {} As Array
    Local lAddProcedimento := .F. As Logical

    BA1->(DbSetOrder(2))
    If BA1->(MsSeek(FWXFilial("BA1")+Padr(cSubscriberId, TamSX3("BA1_CODINT")[1]+TamSX3("BA1_CODEMP")[1]+TamSX3("BA1_MATRIC")[1]+TamSX3("BA1_TIPREG")[1]+TamSX3("BA1_DIGITO")[1])))
        If Self:jParam:hasProperty("proceduresFrom") .And. Self:jParam:hasProperty("proceduresTo") .And. Self:jParam:hasProperty("proceduresTable") .And. Self:jParam:hasProperty("status")
            cAliasTemp := getNextAlias()
            cTabProcedimento := Self:jParam["proceduresTable"]
            cDeProcedimento := Self:jParam["proceduresFrom"]
            cAteProcedimento := Self:jParam["proceduresTo"]
            
            BeginSql Alias cAliasTemp	
                SELECT BR8_CODPAD, BR8_CODPSA, BR8_DESCRI FROM %table:BR8% BR8 
                WHERE BR8.BR8_FILIAL = %xFilial:BR8% 
                    AND BR8.BR8_CODPAD = %Exp:cTabProcedimento%
                    AND BR8.BR8_CODPSA >= %Exp:cDeProcedimento%
                    AND BR8.BR8_CODPSA <= %Exp:cAteProcedimento%
                    AND BR8.BR8_PROBLO <> '1'
                    AND BR8.BR8_ANASIN = '1'
                    AND BR8.%NotDel%
            EndSql

            If !(cAliasTemp)->(Eof())
                aDadosBeneficiario := PLSDADUSR(BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO), "1", .T., dDataBase)
                aDadosRDA := PLSGetRDA()

                While !(cAliasTemp)->(Eof())
                    cCarencia := "Sim"
                    cCobertura := "Sim"
                    lAddProcedimento := .F.

                    aAutorizacao := PLSAUTP(dDataBase, Time(), (cAliasTemp)->BR8_CODPAD, (cAliasTemp)->BR8_CODPSA, 1, aDadosBeneficiario, Nil, aDadosRDA, "1", .F., "", .T.)
                    
                    If  !aAutorizacao[1]
                        For nX := 1 To Len(aAutorizacao[2])
                            If aAutorizacao[2][nX][1] $ __aCdCri001[1]  // 035 - Usuario nao possui cobertura para este procedimento
                                cCobertura := "Não"
                                cCarencia := ""
                                Exit
                            Endif
                            
                            If aAutorizacao[2][nX][1] $ __aCdCri003[1]  // 002 - Procedimento em carencia para este usuario
                                cCarencia := "Não"
                            Endif   
                        Next   

                        If Self:jParam["status"] == "1" .Or. (Self:jParam["status"] == "2" .And. cCarencia == "Não") .Or. (Self:jParam["status"] == "3" .And. cCobertura == "Não") // 1 = Todos; 2 = Em Carência; 3 = Sem Cobertura
                            lAddProcedimento := .T.
                        Endif
                    Else
                        If Self:jParam["status"] == "1" // Todos
                            lAddProcedimento := .T.
                        Endif
                    Endif 

                    If lAddProcedimento
                        aAdd(aProcedimentos, {"tableCode" : Alltrim((cAliasTemp)->BR8_CODPAD),;
                                              "procedureCode" : Alltrim((cAliasTemp)->BR8_CODPSA),;
                                              "description" : Alltrim((cAliasTemp)->BR8_DESCRI),;
                                              "hasCoverage" : cCobertura,;
                                              "gracePeriodCompleted" : cCarencia})
                    EndIf  
                    
                    (cAliasTemp)->(DbSkip())
                EndDo          
            EndIf

            lSucess := .T.
            Self:nCodeStatus := 200 // Ok
            Self:pageArrayItems(Self:jParam, aProcedimentos)

            (cAliasTemp)->(DbCloseArea())   
        Else
            lSucess := .F.
            Self:SetError("E002", "Parâmetros obrigatórios",;
                                  "Obrigatório informar os códigos dos procedimentos, código da tabela e o status da consulta.",;
                                  400) // Bad Request
        EndIf
    Else
        lSucess := .F.
        Self:SetError("E001", "Beneficiário não encontrado.",;
                              "Não foi encontrado nenhum Beneficiário com a matricula "+cSubscriberId,;
                              404) // Not Found
    EndIf

    FWRestArea(aAreaBA1)
    
Return lSucess
