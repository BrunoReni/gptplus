#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.billing

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} BillingBeneficiaryService
Classe responsavel por processar o valor de cobrança do beneficiário

@type class
@author Vinicius Queiros Teixeira
@since 30/11/2022
@version Protheus 12
/*/
Class BillingBeneficiaryService From BaseService

  	Public Method new() Constructor
    Public Method billingBeneficiary(cSubscriberId As Character) As Logical

    Private Method respBillingValue(jValorCobranca As Json) As Logical
    Private Method getComposition(aComposicao As Array) As Array
    Private Method getAccumulated(aAcumulados As Array) As Array
 
EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 30/11/2022
@version Protheus 12
/*/
Method new() Class BillingBeneficiaryService
    _Super:new()
Return Self

/*/{Protheus.doc} contractBeneficiary
Método responsavel por retornar o valor de cobrança do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 30/11/2022
@version Protheus 12
/*/
Method billingBeneficiary(cSubscriberId As Character) As Logical Class BillingBeneficiaryService

    Local lSucess As Logical
    Local jCobranca As Json

    BA1->(DbSetOrder(2))
    If BA1->(MsSeek(FWXFilial("BA1")+Padr(cSubscriberId, TamSX3("BA1_CODINT")[1]+TamSX3("BA1_CODEMP")[1]+TamSX3("BA1_MATRIC")[1]+TamSX3("BA1_TIPREG")[1]+TamSX3("BA1_DIGITO")[1])))      
        If Self:jParam:hasProperty("baseMonth") .And. Self:jParam:hasProperty("baseYear") .And.;
           !Empty(Self:jParam["baseMonth"]) .And. !Empty(Self:jParam["baseYear"])

            jCobranca := PLSVLRCOB(Self:jParam["baseYear"], Self:jParam["baseMonth"], .T., .F., .T.)

            If Valtype(jCobranca) == "J"                
                Self:respBillingValue(jCobranca)
                lSucess := .T.
                Self:nCodeStatus := 200 // Ok
            Else
                lSucess := .F.
                Self:SetError("E003", "Falha ao processar a Cobrança",;
                                      "Não foi possivel processar o valor de cobrança do beneficiário, verifique as configurações de faturamento da cobrança.",;
                                      400) // Bad Request
            EndIf
        Else
            lSucess := .F.
            Self:SetError("E002", "Parâmetros obrigatórios",;
                                  "Obrigatório informar o ano base e mês base.",;
                                  400) // Bad Request
        EndIf
    Else
        lSucess := .F.
        Self:SetError("E001", "Beneficiário não encontrado.",;
                              "Não foi encontrado nenhum beneficiário com a matricula "+cSubscriberId,;
                              404) // Not Found
    EndIf

Return lSucess

/*/{Protheus.doc} respBillingValue
Método responsavel por processar o json de resposta do valor de cobrança 

@type method
@author Vinicius Queiros Teixeira
@since 30/11/2022
@version Protheus 12
/*/
Method respBillingValue(jValorCobranca As Json) As Logical Class BillingBeneficiaryService

    Local lSucess := .F. As Logical

    Self:setAttribute("", "baseMonth", Self:jParam["baseMonth"], "C")
    Self:setAttribute("", "baseYear", Self:jParam["baseYear"], "C")
    Self:setAttribute("", "billsToBill", JsonObject():new(), "J") 
    Self:setAttribute("", "billsAlreadyBilled", JsonObject():new(), "J")

    // A Faturar
    If Self:jResult:hasProperty("billsToBill") 
        Self:setAttribute("billsToBill", "credits", jValorCobranca["aFaturar"]["creditos"], "N") 
        Self:setAttribute("billsToBill", "debts", jValorCobranca["aFaturar"]["debitos"], "N")
        Self:setAttribute("billsToBill", "familyAmount", jValorCobranca["aFaturar"]["totalFamilia"], "N")
        Self:setAttribute("billsToBill", "employerCredits", jValorCobranca["aFaturar"]["creditosPatronal"], "N")
        Self:setAttribute("billsToBill", "employerDebts", jValorCobranca["aFaturar"]["debitosPatronal"], "N")
        Self:setAttribute("billsToBill", "employerAmount", jValorCobranca["aFaturar"]["totalPatronal"], "N")
        Self:setAttribute("billsToBill", "amount", jValorCobranca["aFaturar"]["total"], "N") 
        Self:setAttribute("billsToBill", "amountType", jValorCobranca["aFaturar"]["tipo"], "C")

        Self:setAttribute("billsToBill", "beneficiaries", {|| {}}, "A")
        Self:setAttribute("billsToBill", "accumulated", {|| {}}, "A")  

        If Self:jResult["billsToBill"]:hasProperty("beneficiaries")
            Self:jResult["billsToBill"]["beneficiaries"] := Self:getComposition(jValorCobranca["aFaturar"]["composicao"][2], "1")
        EndIf   

        If Self:jResult["billsToBill"]:hasProperty("accumulated")
            Self:jResult["billsToBill"]["accumulated"] := Self:getAccumulated(jValorCobranca["aFaturar"]["acumulados"])
        EndIf  
    EndIf

    // Já Faturado 
    If Self:jResult:hasProperty("billsAlreadyBilled")
        Self:setAttribute("billsAlreadyBilled", "collectionNumber", jValorCobranca["jaFaturado"]["loteCobranca"], "C") 
        Self:setAttribute("billsAlreadyBilled", "title", jValorCobranca["jaFaturado"]["titulo"], "C")

        Self:setAttribute("billsAlreadyBilled", "credits", jValorCobranca["jaFaturado"]["creditos"], "N") 
        Self:setAttribute("billsAlreadyBilled", "debts", jValorCobranca["jaFaturado"]["debitos"], "N")
        Self:setAttribute("billsAlreadyBilled", "employerCredits", jValorCobranca["jaFaturado"]["creditosPatronal"], "N")
        Self:setAttribute("billsAlreadyBilled", "employerDebts", jValorCobranca["jaFaturado"]["debitosPatronal"], "N")
        Self:setAttribute("billsAlreadyBilled", "amount", jValorCobranca["jaFaturado"]["total"], "N") 
        Self:setAttribute("billsAlreadyBilled", "amountType", jValorCobranca["jaFaturado"]["tipo"], "C")

        Self:setAttribute("billsAlreadyBilled", "beneficiaries", {|| {}}, "A")
        Self:setAttribute("billsAlreadyBilled", "accumulated", {|| {}}, "A")

        If Self:jResult["billsAlreadyBilled"]:hasProperty("beneficiaries")
            Self:jResult["billsAlreadyBilled"]["beneficiaries"] := Self:getComposition(jValorCobranca["jaFaturado"]["composicao"][2], "2")
        EndIf   

        If Self:jResult["billsAlreadyBilled"]:hasProperty("accumulated")
            Self:jResult["billsAlreadyBilled"]["accumulated"] := Self:getAccumulated(jValorCobranca["jaFaturado"]["acumulados"])
        EndIf
    EndIf

Return lSucess

/*/{Protheus.doc} getComposition
Método responsavel por retornar a composição dos beneficiários

@type method
@author Vinicius Queiros Teixeira
@since 01/12/2022
@version Protheus 12
/*/
Method getComposition(aComposicao As Array, cTipo As Character) As Array Class BillingBeneficiaryService

    Local nX := 1 As Numeric
    Local nPosBeneficiario As Numeric
    Local aRetorno := {} As Array
    Local lNotaFiscal := GetNewPar("MV_PLSNFBR","0") == "1" As Logical

    For nX := 1 To Len(aComposicao)
        nPosBeneficiario := 0

        If Len(aRetorno) > 0
            nPosBeneficiario := Ascan(aRetorno, {|x| x["subscriberId"] == Alltrim(aComposicao[nX][7])})
        EndIf

        If nPosBeneficiario == 0
            aAdd(aRetorno, JsonObject():new())
            nPosBeneficiario := Len(aRetorno)
            aRetorno[nPosBeneficiario]["subscriberId"] := Alltrim(aComposicao[nX][7])
            aRetorno[nPosBeneficiario]["name"] := Alltrim(aComposicao[nX][8])
            aRetorno[nPosBeneficiario]["amount"] := 0
            aRetorno[nPosBeneficiario]["compositions"] := {}
        EndIf

        aAdd(aRetorno[nPosBeneficiario]["compositions"], JsonObject():new())
        nPosComposicao := Len(aRetorno[nPosBeneficiario]["compositions"])

        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["typeCode"] := aComposicao[nX][3]
        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["typeDescription"] := Upper(Alltrim(aComposicao[nX][5]))
        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["type"] := IIf(aComposicao[nX][1] == "1", "Débito", "Crédito") 
        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["retroactive"] := IIf(aComposicao[nX][3] $ "118,146" .Or. aComposicao[nX][4] $ "118,146", "Sim", "Não")
        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["value"] := aComposicao[nX][2]
        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["observation"] := Alltrim(aComposicao[nX][6])
        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["product"] := IIf(lNotaFiscal, IIf(cTipo == "1", aComposicao[nX][37], aComposicao[nX][21]), "")
        aRetorno[nPosBeneficiario]["compositions"][nPosComposicao]["outputType"] := IIf(lNotaFiscal, IIf(cTipo == "1", aComposicao[nX][38], aComposicao[nX][22]), "")

        If aComposicao[nX][1] == "1" // Débito
            aRetorno[nPosBeneficiario]["amount"] += aComposicao[nX][2]
        Else
            aRetorno[nPosBeneficiario]["amount"] -= aComposicao[nX][2]
        EndIf
       
    Next nX                

Return aRetorno

/*/{Protheus.doc} getAccumulated
Método responsavel por retornar os acumuladosdos beneficiários

@type method
@author Vinicius Queiros Teixeira
@since 01/12/2022
@version Protheus 12
/*/
Method getAccumulated(aAcumulados As Array) As Array Class BillingBeneficiaryService

    Local aRetorno := {} As Array
    Local nPosAcumulado As Numeric
    Local nX As Numeric
    
    For nX := 1 To Len(aAcumulados)
        aAdd(aRetorno, JsonObject():new())
        nPosAcumulado := Len(aRetorno)

        aRetorno[nPosAcumulado]["type"] := Alltrim(aAcumulados[nX][1]) // Tipo de Lançamento
        aRetorno[nPosAcumulado]["balance1"] := Alltrim(aAcumulados[nX][2]) // Saldo 1
        aRetorno[nPosAcumulado]["balance2"] := Alltrim(aAcumulados[nX][3]) // Saldo 2
    Next nX

Return aRetorno
