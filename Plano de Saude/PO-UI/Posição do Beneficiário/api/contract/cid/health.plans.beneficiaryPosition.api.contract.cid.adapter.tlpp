#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.contract.cid

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} CIDBeneficiaryAdapter
Classe adaptadora de collenction das doenças preexistentes (CID)

@type class
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Class CIDBeneficiaryAdapter From BaseAdapter

	Public Method new() Constructor
	Public Method getBuildPageCID(jDadosBenef As Json, jParam As Json) As Logical
	Public Method getBuildPageProcedures(jDadosCID As Json, jParam As Json) As Logical

	Private Method mapFieldsCID() As Logical
	Private Method getQueryCID() As Character
	Private Method getWhereCID(jDadosBenef As Json) As Character
	Private Method getOrderCID() As Character
	Private Method getFieldsCID() As Character

	Private Method mapFieldsProcedures() As Logical
	Private Method getQueryProcedures() As Character
	Private Method getWhereProcedures(jDadosCID As Json) As Character
	Private Method getOrderProcedures() As Character
	Private Method getFieldsProcedures() As Character

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method new() class CIDBeneficiaryAdapter
	_Super:new()
return

/*/{Protheus.doc} getBuildPageCID
Método responsavel por retornar as paginas de doenças preexistentes

@type method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method getBuildPageCID(jDadosBenef As Json, jParam As Json) As Logical Class CIDBeneficiaryAdapter

	Local lReturn := .F. As Logical
	
	Self:mapFieldsCID()

	If Self:executeQueryAdapter(Self:getQueryCID(), Self:getWhereCID(jDadosBenef), Self:getOrderCID(), jParam)
		lReturn := .T.
	EndIf

Return lReturn

/*/{Protheus.doc} getBuildPageProcedures
Método responsavel por retornar as paginas de procedimentos do CID

@type method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method getBuildPageProcedures(jDadosCID As Json, jParam As Json) As Logical Class CIDBeneficiaryAdapter

	Local lReturn := .F. As Logical
	
	Self:mapFieldsProcedures()

	If Self:executeQueryAdapter(Self:getQueryProcedures(), Self:getWhereProcedures(jDadosCID), Self:getOrderProcedures(), jParam)
		lReturn := .T.
	EndIf
	
Return lReturn

/*/{Protheus.doc} mapFieldsCID
Método responsavel por mapear os atributos e campos (Tabela) para retorno na API de CID

@type method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method mapFieldsCID() As Logical Class CIDBeneficiaryAdapter

	Local aFieldsVirtual := {} As Array
	Local cFields := Self:getFieldsCID() As Character

	// Mapea campo de outra tabela - Inner join realizado na query com a tabela BA9
	aAdd(aFieldsVirtual, {"field" : "BF3_DESDOE", "fieldVirtual" : "BA9_DOENCA", "type" : "C", "size" : TamSX3("BA9_DOENCA")[1], "decimals" : TamSX3("BA9_DOENCA")[3]})

	Self:mapDictionaryFields("BF3", aFieldsVirtual, cFields)

Return .T.

/*/{Protheus.doc} getQueryCID
Método responsavel por retornar o corpo da query de CID

@type Method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method getQueryCID() As Character Class CIDBeneficiaryAdapter

	Local cQuery As Character
	
	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BF3")+" BF3 "
	cQuery += "INNER JOIN "+RetSqlName("BA9")+" BA9 "
	cQuery += " ON BA9.BA9_FILIAL = '"+FWxFilial("BA9")+"' "
	cQuery += " AND BA9.BA9_CODDOE = BF3.BF3_CODDOE "
	cQuery += " AND BA9.D_E_L_E_T_ = ' ' "
  	cQuery += " WHERE #QueryWhere#" "

Return cQuery

/*/{Protheus.doc} getWhereCID
Método responsavel por retornar o where da query de CID

@type Method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method getWhereCID(jDadosBenef As Json) As Character Class CIDBeneficiaryAdapter

	Local cQuery As Character

	cQuery += " BF3.BF3_FILIAL = '"+FWxFilial("BF3")+"' AND "
    cQuery += " BF3.BF3_CODINT = '"+jDadosBenef["operadora"]+"' AND "
    cQuery += " BF3.BF3_CODEMP = '"+jDadosBenef["empresa"]+"' AND "
    cQuery += " BF3.BF3_MATRIC = '"+jDadosBenef["matricula"]+"' AND "	
    cQuery += " BF3.BF3_TIPREG = '"+jDadosBenef["tipoRegistro"]+"' AND "
	cQuery += " BF3.D_E_L_E_T_ = ' '"

Return cQuery

/*/{Protheus.doc} getOrderCID
Método responsavel por retornar a ordem das doenças preexistens (CID) da query

@type Method
@author Vinicius Queiros Teixeira
@since 07/10/2022
@version Protheus 12
/*/
Method getOrderCID() As Character Class CIDBeneficiaryAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BF3.BF3_CODDOE"

Return cOrdemQuery

/*/{Protheus.doc} getFieldsCID
Método responsavel por retornar os campos dos CID (BF3) que serão 
apresentados na api.

@type method
@author Vinicius Queiros Teixeira
@since 23/11/2022
@version Protheus 12
/*/
Method getFieldsCID() As Character Class CIDBeneficiaryAdapter

    Local cFields As Character

	cFields := "BF3_CODDOE,BF3_DESDOE,BF3_PAGAGR,BF3_VALAGR,BF3_PERAGR,BF3_MESAGR,BF3_UNAGR,BF3_DATCPT"

Return cFields

/*/{Protheus.doc} mapFieldsProcedures
Método responsavel por mapear os atributos e campos (Tabela) para retorno na API de procedimentos

@type method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method mapFieldsProcedures() As Logical Class CIDBeneficiaryAdapter

	Local aFieldsVirtual := {}
	Local cFields := Self:getFieldsProcedures() As Character

	// Mapea campo de outra tabela - Inner join realizado na query com a tabela BR8
	aAdd(aFieldsVirtual, {"field" : "BYY_DESPRO", "fieldVirtual" : "BR8_DESCRI", "type" : "C", "size" : TamSX3("BR8_DESCRI")[1], "decimals" : TamSX3("BR8_DESCRI")[3]})

	Self:mapDictionaryFields("BYY", aFieldsVirtual, cFields)

Return .T.

/*/{Protheus.doc} getQueryProcedures
Método responsavel por retornar o corpo da query de procedimentos

@type Method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method getQueryProcedures() As Character Class CIDBeneficiaryAdapter

	Local cQuery As Character
	
	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("BYY")+" BYY "
	cQuery += "INNER JOIN "+RetSqlName("BR8")+" BR8 "
	cQuery += " ON BR8.BR8_FILIAL = '"+FWxFilial("BR8")+"' "
	cQuery += " AND BR8.BR8_CODPAD = BYY.BYY_CODPAD "
	cQuery += " AND BR8.BR8_CODPSA = BYY.BYY_CODPRO "
	cQuery += " AND BR8.D_E_L_E_T_ = ' ' "
  	cQuery += " WHERE #QueryWhere#" "

Return cQuery

/*/{Protheus.doc} getWhereProcedures
Método responsavel por retornar o where da query de procedimentos

@type Method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method getWhereProcedures(jDadosCID As Json) As Character Class CIDBeneficiaryAdapter

	Local cQuery As Character

	cQuery += " BYY.BYY_FILIAL = '"+FWxFilial("BF3")+"' AND "
    cQuery += " BYY.BYY_CODINT = '"+jDadosCID["operadora"]+"' AND "
    cQuery += " BYY.BYY_CODEMP = '"+jDadosCID["empresa"]+"' AND "
    cQuery += " BYY.BYY_MATRIC = '"+jDadosCID["matricula"]+"' AND "	
    cQuery += " BYY.BYY_TIPREG = '"+jDadosCID["tipoRegistro"]+"' AND "
	cQuery += " BYY.BYY_CODDOE = '"+jDadosCID["cid"]+"' AND "
	cQuery += " BYY.D_E_L_E_T_ = ' '"

Return cQuery

/*/{Protheus.doc} getOrderProcedures
Método responsavel por retornar a ordem dos procimentos da query

@type Method
@author Vinicius Queiros Teixeira
@since 07/10/2022
@version Protheus 12
/*/
Method getOrderProcedures() As Character Class CIDBeneficiaryAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BYY.BYY_CODPRO"

Return cOrdemQuery

/*/{Protheus.doc} getFieldsProcedures
Método responsavel por retornar os campos dos Procedimentos (BYY) que será 
apresentados na api.

@type method
@author Vinicius Queiros Teixeira
@since 23/11/2022
@version Protheus 12
/*/
Method getFieldsProcedures() As Character Class CIDBeneficiaryAdapter

    Local cFields As Character

	cFields := "BYY_CODPRO,BYY_DESPRO,BYY_CARENC,BYY_UNIDAD"

Return cFields
