#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.authorization

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} AuthorizationsBeneficiaryAdapter
Classe adaptadora de collenction das Autorizações

@type class
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Class AuthorizationsBeneficiaryAdapter From BaseAdapter

	Public Method new() Constructor
	Public Method getBuildPageAuthorizations(jDadosBeneficiario As Json, jParam As Json) As Logical
	Public Method getPageEventsAuthorization(jAlias As Json, jAuthorization As Character, jParam As Json) As Logical

	Private Method mapFieldsAuthorizations() As Logical
	Private Method getQueryAuthorizations(jDadosBeneficiario As json, jParam As Json) As Character
	Private Method getWhereAuthorizations(jDadosBeneficiario As json, jParam As Json) As Character
	Private Method getOrderAuthorizations() As Character
	Private Method getFieldsAuthorization() As Character

	Private Method mapFieldsEventsAuthorization() As Logical
	Private Method getQueryEventsAuthorization(jAlias As Json, jAuthorization As Json) As Character
	Private Method getWhereEventsAuthorization(jAlias As Json, jAuthorization As Json) As Character
	Private Method getOrderEventsAuthorization() As Character
	Private Method getFieldsEvents(cAliasItens As Character) As Character

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method new() Class AuthorizationsBeneficiaryAdapter
	_Super:new()
return

/*/{Protheus.doc} getBuildPageAuthorizations
Método responsavel por retornar as paginas de Autorizações do Beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method getBuildPageAuthorizations(jDadosBeneficiario As Json, jParam As Json) As Logical Class AuthorizationsBeneficiaryAdapter

	Local lReturn := .F. As Logical

	Self:mapFieldsAuthorizations(jParam)

	If Self:executeQueryAdapter(Self:getQueryAuthorizations(jDadosBeneficiario, jParam), Self:getWhereAuthorizations(jDadosBeneficiario, jParam), Self:getOrderAuthorizations(), jParam)
		lReturn := .T.
	EndIf
	
Return lReturn

/*/{Protheus.doc} getPageEventsAuthorization
Método responsavel por retornar as paginas de eventos da autorização

@type method
@author Vinicius Queiros Teixeira
@since 09/11/2022
@version Protheus 12
/*/
Method getPageEventsAuthorization(jAlias As Json, jAuthorization As Json, jParam As Json) As Logical Class AuthorizationsBeneficiaryAdapter

	Local lReturn := .F. As Logical

	Self:mapFieldsEventsAuthorization(jAlias)

	If Self:executeQueryAdapter(Self:getQueryEventsAuthorization(jAlias, jAuthorization), Self:getWhereEventsAuthorization(jAlias, jAuthorization), Self:getOrderEventsAuthorization(), jParam)
		lReturn := .T.
	EndIf
	
Return lReturn

/*/{Protheus.doc} mapFieldsAuthorizations
Método responsavel por mapear os atributos e campos (Tabela) para retorno na API

@type method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method mapFieldsAuthorizations() As Logical Class AuthorizationsBeneficiaryAdapter

	Local cFields := Self:getFieldsAuthorization() As Character
	// Mapea os campos do dicionário de dados
	Self:mapDictionaryFields("BD5", Nil, cFields)
	Self:mapDictionaryFields("BCL", Nil, "BCL_DESCRI")

	// Mapeamento de atributos não-dicionário para auxiliar o consumo das outras apis
	Self:oAdapterBase:AddMapFields("authorizationId", "GUIAKEY", .T., .F., {"GUIAKEY", "C", 28, 0},;
					  			   "ALIAS+'-'+BD5_CODOPE+BD5_CODLDP+BD5_CODPEG+BD5_NUMERO")
Return .T.

/*/{Protheus.doc} mapFieldsEventsAuthorization
Método responsavel por mapear os atributos e campos (Tabela) para retorno na API

@type method
@author Vinicius Queiros Teixeira
@since 09/11/2022
@version Protheus 12
/*/
Method mapFieldsEventsAuthorization(jAlias) As Logical Class AuthorizationsBeneficiaryAdapter

	Local cFields := Self:getFieldsEvents(jAlias["aliasIte"]) As Character
	// Mapea os campos do dicionário de dados
	Self:mapDictionaryFields(jAlias["aliasIte"], Nil, cFields)

Return .T.

/*/{Protheus.doc} getQueryAuthorizations
Método responsavel por retornar o corpo da query de Autorizações

@type Method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method getQueryAuthorizations(jDadosBeneficiario As json, jParam As Json) As Character Class AuthorizationsBeneficiaryAdapter
 
	Local cQuery As Character
	Local lPBWHEAUT := ExistBlock("PBWHEAUT") As Logical
	Local cSubStringQuery := IIf(Upper(TcGetDB()) == "MSSQL", "SUBSTRING", "SUBSTR")
	
	cQuery := "SELECT #QueryFields# FROM " 
	// Guias: SADT/Consulta/Reembolso/Odonto
	cQuery += "(SELECT BD5_CODLDP,BD5_CODPEG,BD5_NUMERO,BD5_TIPGUI,BD5_DATPRO,BD5_SITUAC,BD5_FASE,BD5_CODRDA,BD5_NOMRDA,BD5_LIBERA,BD5_CODOPE,BD5_ANOPAG,BD5_MESPAG, 'BD5' ALIAS "
	cQuery += " FROM "+RetSqlName("BD5")+" BD5 "
	cQuery += " WHERE BD5_FILIAL = '"+FWxFilial("BD5")+"'"
	cQuery += "   AND BD5_OPEUSR = '"+jDadosBeneficiario["operadora"]+"'"
	cQuery += "   AND BD5_CODEMP = '"+jDadosBeneficiario["empresa"]+"'"
	cQuery += "   AND BD5_MATRIC = '"+jDadosBeneficiario["matricula"]+"'"
	cQuery += "   AND BD5_TIPREG = '"+jDadosBeneficiario["tipoRegistro"]+"'"
	cQuery += "   AND BD5.D_E_L_E_T_ = ' ' "

	If lPBWHEAUT
		cQuery += ExecBlock("PBWHEAUT", .F., .F., {"BD5", jDadosBeneficiario})
	EndIf 

	cQuery += " UNION "
	// Guias: Internações
	cQuery += " SELECT BE4_CODLDP,BE4_CODPEG,BE4_NUMERO,BE4_TIPGUI,BE4_DTDIGI,BE4_SITUAC,BE4_FASE,BE4_CODRDA,BE4_NOMRDA, '' BD5_LIBERA,BE4_CODOPE,BE4_ANOPAG,BE4_MESPAG,'BE4' ALIAS "
	cQuery += " FROM "+RetSqlName("BE4")+" BE4 "
	cQuery += " WHERE BE4_FILIAL = '"+FWxFilial("BE4")+"'"
	cQuery += "   AND BE4_OPEUSR = '"+jDadosBeneficiario["operadora"]+"'"
	cQuery += "   AND BE4_CODEMP = '"+jDadosBeneficiario["empresa"]+"'"
	cQuery += "   AND BE4_MATRIC = '"+jDadosBeneficiario["matricula"]+"'"
	cQuery += "   AND BE4_TIPREG = '"+jDadosBeneficiario["tipoRegistro"]+"'"
	cQuery += "   AND BE4.D_E_L_E_T_ = ' ' "

	If lPBWHEAUT
		cQuery += ExecBlock("PBWHEAUT", .F., .F., {"BE4", jDadosBeneficiario})
	EndIf 

	// Guias: HAT - Portal Autorizador
	If GetNewPar("MV_PLSHAT", "0") == "1" .And. (!jParam:hasProperty("phases") .Or. (jParam:hasProperty("phases") .And. "3" $ Upper(jParam["phases"]))) // Guias do HAT, se a busca for pela Fase 3 = Pronta
		cQuery += " UNION "
		cQuery += " SELECT BEA_CODLDP,BEA_CODPEG,BEA_NUMGUI,BEA_TIPGUI,BEA_DATPRO,'1' BD5_SITUAC,'3' BD5_FASE,BEA_CODRDA,BEA_NOMRDA,BEA_LIBERA,BEA_OPEMOV,BEA_ANOPAG,BEA_MESPAG,'BEA' ALIAS "
		cQuery += " FROM "+RetSqlName("BEA")+" BEA "
		cQuery += " WHERE BEA_FILIAL = '"+FWxFilial("BEA")+"'"
		cQuery += "   AND BEA_OPEUSR = '"+jDadosBeneficiario["operadora"]+"'"
		cQuery += "   AND BEA_CODEMP = '"+jDadosBeneficiario["empresa"]+"'"
		cQuery += "   AND BEA_MATRIC = '"+jDadosBeneficiario["matricula"]+"'"
		cQuery += "   AND BEA_TIPREG = '"+jDadosBeneficiario["tipoRegistro"]+"'"
		cQuery += "   AND "+cSubStringQuery+"(BEA_NUMAUT,1,1) = '9' " // Guias do HAT, o numero de autorização inicia com 9
		cQuery += "   AND BEA_ORIMOV = '6' " // 6 = Origem HAT
		cQuery += "   AND BEA.D_E_L_E_T_ = ' ' "

		If lPBWHEAUT
			cQuery += ExecBlock("PBWHEAUT", .F., .F., {"BEA", jDadosBeneficiario})
		EndIf 
	EndIf
	cQuery += ") GUIAS "
	cQuery += " INNER JOIN "+RetSqlName("BCL")+" BCL " 
	cQuery += "   ON BCL_FILIAL = '"+FWxFilial("BCL")+"'
	cQuery += "  AND BCL_CODOPE = BD5_CODOPE"
	cQuery += "  AND BCL_TIPGUI = BD5_TIPGUI"
	cQuery += "  AND BCL.D_E_L_E_T_ = '' "
	cQuery += "WHERE #QueryWhere#""
	
Return cQuery

/*/{Protheus.doc} getWhereAuthorizations
Método responsavel por retornar o where da query de Autorizações

@type Method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method getWhereAuthorizations(jDadosBeneficiario As json, jParam As Json) As Character Class AuthorizationsBeneficiaryAdapter

	Local oBaseAdapter := BaseAdapter():new()
	Local cQuery As Character
    Local cFases := "'2','3','4'"  As Character // 2 = Conferencia; 3 = Pronto; 4 = Faturada
	Local cFormTypes AS Character
	Local cDtVencInicial As Character
	Local cDtVencFinal As Character

    If jParam:hasProperty("phases") .And. !Empty(jParam["phases"])
		cFases := oBaseAdapter:getListQueryParam(jParam["phases"])
	EndIf

	If jParam:hasProperty("formTypes") .And. !Empty(jParam["formTypes"])
		cFormTypes := oBaseAdapter:getListQueryParam(jParam["formTypes"])
	EndIf

	If jParam:hasProperty("initialDate") .And. !Empty(jParam["initialDate"])
		cDtVencInicial := StrTran(jParam["initialDate"], "-", "")
	EndIf

	If jParam:hasProperty("finalDate") .And. !Empty(jParam["finalDate"])
		cDtVencFinal := StrTran(jParam["finalDate"], "-", "")
	EndIf

    cQuery += "BD5_FASE IN ("+cFases+") AND "
    cQuery += "((BD5_SITUAC = '1') OR (BD5_SITUAC = '3' AND BD5_LIBERA = '1' AND BD5_TIPGUI <> '03')) "

	If !Empty(cDtVencInicial)
		cQuery += " AND BD5_DATPRO >= '"+cDtVencInicial+"' "
	EndIf

	If !Empty(cDtVencFinal)
		cQuery += " AND BD5_DATPRO <= '"+cDtVencFinal+"' "
	EndIf

	If !Empty(cFormTypes)
		cQuery += " AND BD5_TIPGUI IN ("+cFormTypes+") "
	EndIf

	If jParam:hasProperty("guideNumber") .And. !Empty(jParam["guideNumber"])
        cQuery += " AND BD5_CODOPE = '"+substr(jParam["guideNumber"],1,4)+"'"
        cQuery += " AND BD5_ANOPAG = '"+substr(jParam["guideNumber"],5,4)+"'"
        cQuery += " AND BD5_MESPAG = '"+substr(jParam["guideNumber"],9,2)+"'"
        cQuery += " AND BD5_NUMERO = '"+substr(jParam["guideNumber"],11,8)+"'"
    Endif

Return cQuery

/*/{Protheus.doc} getOrderAuthorizations
Método responsavel por retornar a ordem das movimentações da query

@type Method
@author Vinicius Queiros Teixeira
@since 07/10/2022
@version Protheus 12
/*/
Method getOrderAuthorizations() As Character Class AuthorizationsBeneficiaryAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := "BD5_DATPRO"

Return cOrdemQuery

/*/{Protheus.doc} getFieldsAuthorization
Método responsavel por retornar os campos da autorização que serão apresetandos no 
json da api

@type Method
@author Vinicius Queiros Teixeira
@since 24/11/2022
@version Protheus 12
/*/
Method getFieldsAuthorization() As Character Class AuthorizationsBeneficiaryAdapter

	Local cFields As Character
	
	cFields := "BD5_CODLDP,BD5_CODPEG,BD5_NUMERO,BD5_DATPRO,BD5_SITUAC,BD5_FASE,BD5_CODRDA,BD5_NOMRDA,BD5_TIPGUI,BD5_CODOPE,BD5_ANOPAG,BD5_MESPAG"

Return cFields

/*/{Protheus.doc} getQueryAuthorizations
Método responsavel por retornar o corpo da query dos eventos da autorização

@type Method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method getQueryEventsAuthorization(jAlias As Json, jAuthorization As Json) As Character Class AuthorizationsBeneficiaryAdapter

	Local cQuery As Character
	Local cCampoOperadora := IIf(jAlias["aliasCab"] == "BEA", "_OPEMOV", "_CODOPE") As Character
	Local cCampoNumero := IIf(jAlias["aliasCab"] == "BEA", "_NUMGUI", "_NUMERO") As Character
	
	cQuery := "SELECT #QueryFields# FROM "+RetSqlName(jAlias["aliasIte"])+" "+jAlias["aliasIte"]
	cQuery += " INNER JOIN "+RetSqlName(jAlias["aliasCab"])+" "+jAlias["aliasCab"]

	cQuery += "  ON "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_FILIAL = '"+FWxFilial(jAlias["aliasCab"])+"' "
	If jAlias["aliasCab"] == "BE4"
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_CODOPE = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_CODOPE"
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_ANOINT = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_ANOINT"
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_MESINT = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_MESINT"
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_NUMINT = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_NUMINT"

		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_CODLDP = '"+jAuthorization["codigoLocal"]+"' "
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_CODPEG = '"+jAuthorization["codigoPEG"]+"' "
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_NUMERO = '"+jAuthorization["numero"]+"' "
	Else
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+cCampoOperadora+" = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+cCampoOperadora
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_CODLDP = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_CODLDP"
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+"_CODPEG = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_CODPEG"
		cQuery += " AND "+jAlias["aliasCab"]+"."+jAlias["aliasCab"]+cCampoNumero+" = "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+IIf(jAlias["aliasIte"] == "BE2", "_NUMERO", cCampoNumero)
	EndIf
	cQuery += " AND "+jAlias["aliasCab"]+".D_E_L_E_T_ = ' ' "
  	cQuery += " WHERE #QueryWhere#" "
	
Return cQuery

/*/{Protheus.doc} getWhereAuthorizations
Método responsavel por retornar o where da query de Autorizações

@type Method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method getWhereEventsAuthorization(jAlias As Json, jAuthorization As Json) As Character Class AuthorizationsBeneficiaryAdapter

	Local cQuery As Character
	Local cCampoOperadora := IIf(jAlias["aliasCab"] == "BEA", "_OPEMOV", "_CODOPE") As Character

	cQuery += jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_FILIAL = '"+FWxFilial(jAlias["aliasIte"])+"' "
	cQuery += " AND "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+cCampoOperadora+" = '"+jAuthorization["operadora"]+"' "
	If jAlias["aliasCab"] <> "BE4" // Guias de Internações o filtro dos eventos será no INNER JOIN
		cQuery += " AND "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_CODLDP = '"+jAuthorization["codigoLocal"]+"' "
		cQuery += " AND "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_CODPEG = '"+jAuthorization["codigoPEG"]+"' "
		cQuery += " AND "+jAlias["aliasIte"]+"."+jAlias["aliasIte"]+"_NUMERO = '"+jAuthorization["numero"]+"' "
	EndIf
	cQuery += " AND "+jAlias["aliasIte"]+".D_E_L_E_T_ = ' ' "

Return cQuery

/*/{Protheus.doc} getOrderAuthorizations
Método responsavel por retornar a ordem das movimentações da query

@type Method
@author Vinicius Queiros Teixeira
@since 07/10/2022
@version Protheus 12
/*/
Method getOrderEventsAuthorization() As Character Class AuthorizationsBeneficiaryAdapter

	Local cOrdemQuery As Character
	
	cOrdemQuery := ""

Return cOrdemQuery

/*/{Protheus.doc} getFieldsEvents
Método responsavel por retornar os campos dos eventos que serão apresentados no
json da api

@type Method
@author Vinicius Queiros Teixeira
@since 24/11/2022
@version Protheus 12
/*/
Method getFieldsEvents(cAliasItens As Character) As Character Class AuthorizationsBeneficiaryAdapter

	Local cFields As Character

	Do Case
		Case cAliasItens == "BD6"
			cFields := "BD6_CODPAD,BD6_CODPRO,BD6_DESPRO,BD6_QTDPRO,BD6_DATPRO,BD6_STATUS,BD6_VLRBPR,BD6_VLRAPR,"+;
					   "BD6_VLRACB,BD6_VLRMAN,BD6_VLRGLO,BD6_VLRPAG,BD6_VLTXPG,BD6_VLRBPF,BD6_VLRPF,BD6_VLRPF,"+;
					   "BD6_PERCOP,BD6_VLRTAD,BD6_PERTAD,BD6_VLRTPF,BD6_VALOR,BD6_PRPRRL,BD6_VRPRDA"

		Case cAliasItens == "BEJ"
			cFields := "BEJ_CODPAD,BEJ_CODPRO,BEJ_DESPRO,BEJ_QTDPRO,BEJ_DATPRO,BEJ_STATUS,BEJ_VLRAPR,BEJ_VALORI"

		Case cAliasItens == "BE2"
			cFields := "BE2_CODPAD,BE2_CODPRO,BE2_DESPRO,BE2_QTDPRO,BE2_DATPRO,BE2_STATUS,BE2_VLRAPR,BE2_PRPRRL,BE2_VLCOMP"
	EndCase

	If ExistBlock("PBCMPEVE")
		cFields += ","+ExecBlock("PBCMPEVE", .F., .F., {cAliasItens})
	EndIf

Return cFields
