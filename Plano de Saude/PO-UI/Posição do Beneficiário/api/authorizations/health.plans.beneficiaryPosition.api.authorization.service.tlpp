#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.authorization

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} AuthorizationsBeneficiaryService
Classe responsavel por processar a busca de autorizações
do beneficiário

@type class
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Class AuthorizationsBeneficiaryService From BaseService

    Private Data oAdapter As Object

  	Public Method new() Constructor
    Public Method allAuthorizationsPage(cSubscriberId As Character) As Logical
    Public Method idAuthorizationPage(cAuthorizationId As Character) As Logical
    Public Method allEventsAuthorizationPage(cAuthorizationId As Character) As Logical

    Private Method getFieldsAuthorization() As Character

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method new() Class AuthorizationsBeneficiaryService
    _Super:new()
Return Self

/*/{Protheus.doc} allAuthorizationsPage
Método responsavel por retornar a pagina de Autorizações do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 07/11/2022
@version Protheus 12
/*/
Method allAuthorizationsPage(cSubscriberId As Character) As Logical Class AuthorizationsBeneficiaryService

    Local aAreaBA1 := BA1->(FWGetArea()) As Array
    Local lSucess := .F. As Logical
    Local jDadosBeneficiario := JsonObject():new() As Json

    BA1->(DbSetOrder(2))
    If BA1->(MsSeek(FWXFilial("BA1")+Padr(cSubscriberId, TamSX3("BA1_CODINT")[1]+TamSX3("BA1_CODEMP")[1]+TamSX3("BA1_MATRIC")[1]+TamSX3("BA1_TIPREG")[1]+TamSX3("BA1_DIGITO")[1])))
        Self:oAdapter := AuthorizationsBeneficiaryAdapter():New()

        jDadosBeneficiario := {"operadora" : BA1->BA1_CODINT, "empresa" : BA1->BA1_CODEMP,;
                               "matricula" : BA1->BA1_MATRIC, "tipoRegistro" : BA1->BA1_TIPREG}

        If Self:oAdapter:getBuildPageAuthorizations(jDadosBeneficiario, Self:jParam)
            lSucess := .T.
            Self:jResult := Self:oAdapter:getJsonResult()
            Self:nCodeStatus := 200 // Ok
        EndIf  
    Else
        lSucess := .F.
        Self:SetError("E001", "Beneficiário não encontrado.",;
                              "Não foi encontrado nenhum beneficiário na tabela BA1 com a matricula "+cSubscriberId,;
                              404) // Not Found
    EndIf

    FWRestArea(aAreaBA1)
    
Return lSucess

/*/{Protheus.doc} idAuthorizationPage
Método responsavel por retornar os dados da autorização

@type method
@author Vinicius Queiros Teixeira
@since 21/11/2022
@version Protheus 12
/*/
Method idAuthorizationPage(cAuthorizationId As Character) As Logical Class AuthorizationsBeneficiaryService

    Local aArea := FWGetArea()
    Local lSucess As Logical
    Local aAuthorization := {}
    Local cAlias As Character
    Local cIdAuthorization As Character
    Local aVirtual := {} As Array
    
    aAuthorization := StrToKarr(cAuthorizationId, "-")

    If Len(aAuthorization) >= 2
        cAlias := Alltrim(aAuthorization[1])
        cIdAuthorization := Alltrim(aAuthorization[2])

        (cAlias)->(DbSetOrder(IIf(cAlias == "BEA", 12, 1)))
        If (cAlias)->(MsSeek(FWXFilial(cAlias)+cIdAuthorization))
            // Campos Virtuais das tabelas de guias
            Do Case
                Case cAlias == "BD5"
                    
                    aAdd(aVirtual, {"field": "BD5_DESCID", "expression" : {|| Posicione("BA9", 1, FWXFilial("BA9")+BD5->BD5_CID, "BA9_DOENCA")}})
                    aAdd(aVirtual, {"field": "BD5_DESADM", "expression" : {|| Posicione("BDR", 1, FWXFilial("BDR")+BD5->(BD5_CODOPE+BD5_TIPADM), "BDR_DESCRI")}})
                     
                Case cAlias == "BE4"
                    aAdd(aVirtual, {"field": "BE4_DESADM", "expression" : {|| Posicione("BDR", 1, FWXFilial("BDR")+BE4->(BE4_CODOPE+BE4_TIPADM), "BDR_DESCRI")}})
                    aAdd(aVirtual, {"field": "BE4_DESPAD", "expression" : {|| Posicione("BI4", 1, FWXFilial("BI4")+BE4->BE4_PADINT, "BI4_DESCRI")}})
                    aAdd(aVirtual, {"field": "BE4_DESALT", "expression" : {|| Posicione("BIY", 1, FWXFilial("BIY")+BE4->(BE4_CODOPE+BE4_TIPALT), "BIY_DESCRI")}})
                    aAdd(aVirtual, {"field": "BE4_DESTIP", "expression" : {|| Posicione("BQR" ,1, FWXFilial("BQR")+BE4->(BE4_GRPINT+BE4_TIPINT), "BQR_DESTIP")}})                                    
            EndCase

            Self:setFormStruct(cAlias, Self:getFieldsAuthorization(cAlias), aVirtual)
            lSucess := .T.
            Self:nCodeStatus := 200 // Ok
        Else
            lSucess := .F.
            Self:SetError("E002", "Autorização não encontrada.",;
                                  "Autorização informada não encontrada na base de dados.",;
                                  404) // Not Found
        EndIf        
    Else
        lSucess := .F.
        Self:SetError("E003", "Autorização informada invalida.",;
                              "Dados da autorização informada estão invalidos.",;
                              400) // Bad Request
    EndIf

    FWRestArea(aArea)
    
Return lSucess

/*/{Protheus.doc} allEventsAuthorizationPage
Método responsavel por retornar a pagina de eventos da autorização

@type method
@author Vinicius Queiros Teixeira
@since 09/11/2022
@version Protheus 12
/*/
Method allEventsAuthorizationPage(cAuthorizationId As Character) As Logical Class AuthorizationsBeneficiaryService

    Local aArea := FWGetArea()
    Local lSucess As Logical
    Local aAuthorization := {}
    Local cAlias As Character
    Local cIdAuthorization As Character
    Local jAuthorization As Json
    Local jAlias As Json

    aAuthorization := StrToKarr(cAuthorizationId, "-")

    If Len(aAuthorization) >= 2
        cAlias := Alltrim(aAuthorization[1])
        cIdAuthorization := Alltrim(aAuthorization[2])

        (cAlias)->(DbSetOrder(IIf(cAlias == "BEA", 12, 1)))
        If (cAlias)->(MsSeek(FWXFilial(cAlias)+cIdAuthorization))
            Self:oAdapter := AuthorizationsBeneficiaryAdapter():New()

            Do Case
                Case cAlias == "BEA"
                    jAlias := {"aliasCab" : "BEA", "aliasIte" : "BE2"}
 
                Case cAlias == "BD5"
                    jAlias := {"aliasCab" : "BD5", "aliasIte" : "BD6"}

                Case cAlias == "BE4"
                    jAlias := {"aliasCab" : "BE4", "aliasIte" : "BEJ"}
            EndCase

            jAuthorization := JsonObject():new()
            jAuthorization["operadora"] := IIf(cAlias == "BEA", (cAlias)->&(cAlias+"_OPEMOV"), (cAlias)->&(cAlias+"_CODOPE"))
            jAuthorization["codigoLocal"] := (cAlias)->&(cAlias+"_CODLDP")
            jAuthorization["codigoPEG"] := (cAlias)->&(cAlias+"_CODPEG")
            jAuthorization["numero"] := IIf(cAlias == "BEA", (cAlias)->&(cAlias+"_NUMGUI"), (cAlias)->&(cAlias+"_NUMERO"))
            
            If Self:oAdapter:getPageEventsAuthorization(jAlias, jAuthorization, Self:jParam)
                lSucess := .T.
                Self:jResult := Self:oAdapter:getJsonResult()
                Self:nCodeStatus := 200 // Ok
            EndIf
        Else
            lSucess := .F.
            Self:SetError("E002", "Autorização não encontrada.",;
                                  "Autorização informada não encontrada na base de dados.",;
                                  404) // Not Found
        EndIf        
    Else
        lSucess := .F.
        Self:SetError("E003", "Autorização informada invalida.",;
                              "Dados da autorização informada estão invalidos.",;
                              400) // Bad Request
    EndIf

    FWRestArea(aArea)
    
Return lSucess

/*/{Protheus.doc} getFieldsAuthorization
Método responsavel por retornar os campos da autorização (BD5,BEA,BE4) que será 
apresentados na api.

@type method
@author Vinicius Queiros Teixeira
@since 23/11/2022
@version Protheus 12
/*/
Method getFieldsAuthorization(cAlias) As Character Class AuthorizationsBeneficiaryService

    Local cFields As Character

    Do Case
        Case cAlias == "BD5" // SADT/Consulta/Reembolso/Odonto
            cFields := "BD5_CODOPE,BD5_CODLDP,BD5_CODPEG,BD5_NUMERO,BD5_SITUAC,BD5_FASE,BD5_TIPADM,BD5_DESADM,BD5_DATPRO,"+;
                       "BD5_CODRDA,BD5_NOMRDA,BD5_REGSOL,BD5_NOMSOL,BD5_TIPATE,BD5_CID,BD5_DESCID,BD5_DATSOL,BD5_HORSOL,"+;
                       "BD5_ATERNA,BD5_INDACI,BD5_TIPCON,BD5_INDCLI,BD5_INDCL2,BD5_CIDSEC,BD5_CID3,BD5_CID4,BD5_CID5,"+;
                       "BD5_VALOR,BD5_VLRBPR,BD5_VLRMAN,BD5_VLRGLO,BD5_VLRPAG,BD5_VLRBPF,BD5_VLRPF,BD5_VLRTAD,BD5_VLRTPF"
                       
        Case cAlias == "BE4" // Internações
            cFields := "BE4_CODOPE,BE4_CODLDP,BE4_CODPEG,BE4_NUMERO,BE4_SITUAC,BE4_FASE,BE4_TIPADM,BE4_DESADM,BE4_DTDIGI,"+;
                       "BE4_CODRDA,BE4_NOMRDA,BE4_REGSOL,BE4_NOMSOL,BE4_CID,BE4_DESCID,BE4_CANCEL,BE4_ATERNA,BE4_INDACI,"+;
                       "BE4_TIPCON,BE4_INDCLI,BE4_INDCL2,BE4_PRVINT,BE4_HORPRO,BE4_DATPRO,BE4_DTALTA,BE4_HRALTA,BE4_TIPALT,"+;
                       "BE4_DESALT,BE4_TIPINT,BE4_DESTIP,BE4_REGINT,BE4_TPODOE,BE4_TIPDOE,BE4_CIDSEC,BE4_CID3,BE4_CID4,BE4_CID5,"+;
                       "BE4_PADINT,BE4_DESPAD,BE4_PREQUI,BE4_PREOPE,BE4_VLRAPR,BE4_VLRBPF,BE4_VLRBPR,BE4_VLRGLO,BE4_VLRMAN,BE4_VLRPAG,"+;
                       "BE4_VLRPF,BE4_VLRPAC,BE4_VLRTAD,BE4_VLRTPF"

        Case cAlias == "BEA" // HAT - Portal Autorizador
            cFields := "BEA_OPEMOV,BEA_CODLDP,BEA_CODPEG,BEA_NUMGUI,BEA_DATPRO,BEA_TIPADM,BEA_DATPRO,BEA_CODRDA,BEA_NOMRDA,"+;
                       "BEA_REGSOL,BEA_NOMSOL,BEA_TIPATE,BEA_CID,BEA_DESCID,BEA_CANCEL,BEA_DATSOL,BEA_HORSOL,BEA_ATERNA,BEA_INDACI,"+;
                       "BEA_TIPCON,BEA_INDCLI,BEA_INDCL2,BEA_CIDSEC,BEA_CID3,BEA_CID4,BEA_CID5,BEA_VLRPAC,BEA_VALOR "     
    EndCase

    If ExistBlock("PBCMPAUT")
		cFields += ","+ExecBlock("PBCMPAUT", .F., .F., {cAlias})
	EndIf

Return cFields
