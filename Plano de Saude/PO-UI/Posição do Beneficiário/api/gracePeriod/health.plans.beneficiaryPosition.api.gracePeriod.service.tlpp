#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.gracePeriod

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} GracePeriodBeneficiaryService
Classe responsavel por processar a busca das carências do Beneficiário

@type class
@author Vinicius Queiros Teixeira
@since 09/12/2022
@version Protheus 12
/*/
Class GracePeriodBeneficiaryService From BaseService

  	Public Method new() Constructor
    Public Method gracePeriodGroupPage(cSubscriberId As Character) As Logical
    Public Method gracePeriodClassPage(cSubscriberId As Character) As Logical

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 09/12/2022
@version Protheus 12
/*/
Method new() Class GracePeriodBeneficiaryService
    _Super:new()
Return Self

/*/{Protheus.doc} gracePeriodGroupPage
Método responsavel por retornar a pagina de grupo de carência do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 09/12/2022
@version Protheus 12
/*/
Method gracePeriodGroupPage(cSubscriberId As Character) As Logical Class GracePeriodBeneficiaryService

    Local aAreaBA1 := BA1->(FWGetArea()) As Array
    Local lSucess := .F. As Logical
    Local aGroup := {} As Array
    Local aRetorno := {} As Array
    Local nX As Numeric

    BA1->(DbSetOrder(2))
    If BA1->(MsSeek(FWXFilial("BA1")+Padr(cSubscriberId, TamSX3("BA1_CODINT")[1]+TamSX3("BA1_CODEMP")[1]+TamSX3("BA1_MATRIC")[1]+TamSX3("BA1_TIPREG")[1]+TamSX3("BA1_DIGITO")[1])))
        BA3->(DbSetOrder(1))
        BA3->(MsSeek(FWXFilial("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)))

        aRetorno := PLSLISMSGC(cSubscriberId, BA3->(BA3_CODINT+BA3_CODPLA), BA3->BA3_VERSAO, BA1->BA1_DATCAR, BA1->BA1_SEXO, "1")

        For nX := 1 To Len(aRetorno)
            aAdd(aGroup, {"groupCode" : aRetorno[nX][1],;
                          "description" : Alltrim(aRetorno[nX][2]),;
                          "date" : Transform(DToS(aRetorno[nX][3]), "@R 9999-99-99"),;
                          "status" : aRetorno[nX][4]})
        Next nX
 
        lSucess := .T.
        Self:nCodeStatus := 200 // Ok
        Self:pageArrayItems(Self:jParam, aGroup)
    Else
        lSucess := .F.
        Self:SetError("E001", "Beneficiário não encontrado.",;
                              "Não foi encontrado nenhum Beneficiário com a matricula "+cSubscriberId,;
                              404) // Not Found
    EndIf

    FWRestArea(aAreaBA1)
    
Return lSucess

/*/{Protheus.doc} gracePeriodClassPage
Método responsavel por retornar a pagina de classe de carência do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 09/12/2022
@version Protheus 12
/*/
Method gracePeriodClassPage(cSubscriberId As Character) As Logical Class GracePeriodBeneficiaryService

    Local aAreaBA1 := BA1->(FWGetArea()) As Array
    Local lSucess := .F. As Logical
    Local aClass := {} As Array
    Local nX As Numeric
    Local aRetorno := {} As Array
    Local jClass As Json

    BA1->(DbSetOrder(2))
    If BA1->(MsSeek(FWXFilial("BA1")+Padr(cSubscriberId, TamSX3("BA1_CODINT")[1]+TamSX3("BA1_CODEMP")[1]+TamSX3("BA1_MATRIC")[1]+TamSX3("BA1_TIPREG")[1]+TamSX3("BA1_DIGITO")[1])))
        aRetorno := PLSVSCLACAR(cSubscriberId, .T.)

        If aRetorno[1][1]
            For nX := 1 To Len(aRetorno[1][2])
                jClass := JsonObject():New()
                jClass["classCode"] := aRetorno[1][2][nX][1]
                jClass["description"] := Alltrim(aRetorno[1][2][nX][2])

                If Len(aRetorno[2]) > 4 // Posição 2 (Cabeçalho): Se houver mais de quatro colunas, houve transferência
                    jClass["finalDatePrevious"] := IIf(ValType(aRetorno[1][2][nX][3]) == "D", Transform(DToS(aRetorno[1][2][nX][3]), "@R 9999-99-99"), "") // Final Carência da Rede Migrada (Anterior)
                    jClass["statusPrevious"] := aRetorno[1][2][nX][4] // Status da Rede Migrada (Anterior)
                    jClass["finalDateCurrent"] := IIf(ValType(aRetorno[1][2][nX][5]) == "D", Transform(DToS(aRetorno[1][2][nX][5]), "@R 9999-99-99"), "") // Final da Carência da Nova Rede (Atual)
                    jClass["statusCurrent"] := aRetorno[1][2][nX][6] // Status da Nova Rede (Atual) 
                Else
                    jClass["finalDate"] := Transform(DToS(aRetorno[1][2][nX][3]), "@R 9999-99-99") 
                    jClass["status"] := aRetorno[1][2][nX][4]
                EndIf

                aAdd(aClass, jClass)
                FreeObj(jClass)
                jClass := Nil
            Next nX
        EndIf

        Self:jResult["beneficiaryTransfer"] := IIf(Len(aRetorno[2]) > 4, .T., .F.) // Se houver mais de quatro colunas, houve transferência

        lSucess := .T.
        Self:nCodeStatus := 200 // Ok
        Self:pageArrayItems(Self:jParam, aClass)
    Else
        lSucess := .F.
        Self:SetError("E001", "Beneficiário não encontrado.",;
                              "Não foi encontrado nenhum Beneficiário com a matricula "+cSubscriberId,;
                              404) // Not Found
    EndIf

    FWRestArea(aAreaBA1)
    
Return lSucess
