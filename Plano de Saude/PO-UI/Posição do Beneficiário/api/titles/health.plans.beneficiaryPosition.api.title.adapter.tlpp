#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.title

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} TitlesBeneficiaryAdapter
Classe adaptadora de collenction dos títulos de cobrança

@type class
@author Vinicius Queiros Teixeira
@since 06/10/2022
@version Protheus 12
/*/
Class TitlesBeneficiaryAdapter From BaseAdapter

	Private Data cFields As Character

	Public Method new() Constructor
	Public Method getPageTitles(jClients As Json, jParam As Json) As Logical
	
	Private Method mapFieldsTitles() As Logical
	Private Method getFieldsTitle() As Character
	Private Method getQueryTitles() As Character
	Private Method getWhereTitles(jClients As Json, jParam As Json) As Character
	Private Method getOrderTitles() As Character
	Private Method getTotalValueQuery(jClients As Json, jParam As Json) As Numeric
	
EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 06/10/2022
@version Protheus 12
/*/
Method new() CLASS TitlesBeneficiaryAdapter
	_Super:new()
return

/*/{Protheus.doc} getPageTitles
Método responsavel por retornar as paginas de títulos de cobrança

@type method
@author Vinicius Queiros Teixeira
@since 06/10/2022
@version Protheus 12
/*/
Method getPageTitles(jClients As Json, jParam As Json) As Logical Class TitlesBeneficiaryAdapter

	Local lReturn := .F. As Logical
	
	Self:mapFieldsTitles()

	If Self:executeQueryAdapter(Self:getQueryTitles(), Self:getWhereTitles(jClients, jParam), Self:getOrderTitles(), jParam)
		Self:setTotalValues(Self:getTotalValueQuery(jClients, jParam))
		lReturn := .T.
	EndIf

Return lReturn

/*/{Protheus.doc} mapFieldsTitles
Método responsavel por mapear os atributos e campos (Tabela) para retorno na API

@type method
@author Vinicius Queiros Teixeira
@since 06/10/2022
@version Protheus 12
/*/
Method mapFieldsTitles() As Logical Class TitlesBeneficiaryAdapter

	Self:cFields := Self:getFieldsTitle()

	// Mapea os campos do dicionário de dados
	Self:mapDictionaryFields("SE1", Nil, Self:cFields)

	// Mapeamento de atributos não-dicionário para auxiliar o front e o consumo das outras apis
	Self:oAdapterBase:AddMapFields("status", "STATUS", .T., .F., {"STATUS", "C", TamSX3("E1_STATUS")[1], 0},;
					  			   "CASE WHEN E1_SALDO = E1_VALOR THEN 'A' WHEN E1_SALDO > 0 AND E1_SALDO < E1_VALOR THEN 'P' WHEN E1_SALDO = 0 THEN 'B' ELSE '' END")
	Self:oAdapterBase:AddMapFields("lateDays", "LATEDAYS", .T., .F., {"LATEDAYS", "N", 5, 0},;
					  			   "CASE WHEN E1_BAIXA <> '' THEN "+;
								   "	CASE WHEN E1_VENCREA >= E1_BAIXA "+;
								   "		THEN 0 "+;
								   "	ELSE"+;
								   "		DATEDIFF(Day, E1_VENCREA, E1_BAIXA) "+;
								   "	END "+;
								   "ELSE "+;
								   "	CASE WHEN E1_VENCREA < '"+DToS(dDataBase)+"' "+;
								   "		THEN DATEDIFF(Day, E1_VENCREA, '"+DToS(dDataBase)+"') "+;
								   "	ELSE "+;
								   "		0 "+;
								   " 	END "+;
								   "END ")	
	Self:oAdapterBase:AddMapFields("titleId", "SE1KEY", .T., .F., {"SE1KEY", "C", TamSX3("E1_PREFIXO")[1]+TamSX3("E1_NUM")[1]+TamSX3("E1_PARCELA")[1]+TamSX3("E1_TIPO")[1], 0}, "E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO")

Return .T.

/*/{Protheus.doc} getFieldsTitle
Método responsavel por retornar os campos do título (SE1) que será 
apresentados na api.

@type method
@author Vinicius Queiros Teixeira
@since 23/11/2022
@version Protheus 12
/*/
Method getFieldsTitle() As Character Class TitlesBeneficiaryAdapter

    Local cFields As Character
	Local cAddFields := GetNewPar("MV_PLCPSE1", "")

	cFields := "E1_CLIENTE,E1_LOJA,E1_NOMCLI,E1_VENCREA,E1_PREFIXO,E1_NUM,E1_PARCELA,E1_TIPO,E1_VALOR,E1_SALDO,E1_VALLIQ,E1_BAIXA"

	If !Empty(cAddFields)
		cFields += cAddFields
	EndIf

Return cFields

/*/{Protheus.doc} getQueryTitles
Método responsavel por retornar o corpo da query de títulos

@type Method
@author Vinicius Queiros Teixeira
@since 06/10/2022
@version Protheus 12
/*/
Method getQueryTitles() As Character Class TitlesBeneficiaryAdapter

	Local cQuery As Character
	
	cQuery := "SELECT #QueryFields# FROM "+RetSqlName("SE1")+" E1 "
  	cQuery += "WHERE #QueryWhere#""

Return cQuery

/*/{Protheus.doc} getWhereTitles
Método responsavel por retornar o where da query de títulos

@type Method
@author Vinicius Queiros Teixeira
@since 06/10/2022
@version Protheus 12
/*/
Method getWhereTitles(jClients As Json, jParam As Json) As Character Class TitlesBeneficiaryAdapter

	Local cQuery As Character
	Local nX := 0 As Numeric
	Local aStatusTitulos := {} As Array
	Local lDemaisTitulos := .F. As Logical
	Local cDtVencInicial As Character
	Local cDtVencFinal As Character
	Local aTiposDemaisTitulos := StrToKarr(GetNewPar("MV_PLSEXTP", ""), ",") As Array
   	Local aNoTiposEmAberto := StrToKarr(GetNewPar("MV_PLTITAB", ""), ",") As Array
   	Local aNoTiposBaixados := StrToKarr(GetNewPar("MV_PLTITBX", ""), ",") As Array
	Local lAddStatus := .F. As Logical

	If jParam:hasProperty("status")
		aStatusTitulos := StrToKarr(Upper(jParam["status"]), ",")
	EndIf

	If Ascan(aStatusTitulos, {|x| Upper(x) $ "A/P/B" }) == 0
		aStatusTitulos := {"A", "P", "B"}
	EndIf

	If Ascan(aStatusTitulos, {|x| Upper(x) $ "D" }) > 0
		lDemaisTitulos := .T.
	EndIf

	If jParam:hasProperty("initialDate") .And. !Empty(jParam["initialDate"])
		cDtVencInicial := StrTran(jParam["initialDate"], "-", "")
	EndIf

	If jParam:hasProperty("finalDate") .And. !Empty(jParam["finalDate"])
		cDtVencFinal := StrTran(jParam["finalDate"], "-", "")
	EndIf

	cQuery += "E1_FILIAL = '"+IIf(ExistBlock("PLSXFILI"), ExecBlock("PLSXFILI", .F., .F., {"SE1"}), xFilial("SE1"))+"' AND "
	cQuery += "( "	
	For nX := 1 To Len(jClients["clients"])
		cQuery += "( "
		cQuery += "E1_CLIENTE = '"+jClients["clients"][nX]["client"]+"' AND E1_LOJA = '"+jClients["clients"][nX]["store"]+"' "
		cQuery += ") "
		cQuery += IIf(nX < Len(jClients["clients"]), " OR ", " ")
	Next nX
	cQuery += ") "

	If !lDemaisTitulos // Quando for informad o D (Demais Títulos) não realiza o filtro por nivel
		Do Case
			Case jClients["nivel"] == "1" // Nivel empresa
				cQuery += " AND E1_CODINT = '"+jClients["operadora"]+"'"
				cQuery += " AND E1_CODEMP = '"+jClients["empresa"]+"'"
				
			Case jClients["nivel"] == "2" // Nivel contrato
				cQuery += " AND E1_CODINT = '"+jClients["operadora"]+"'"
				cQuery += " AND E1_CODEMP = '"+jClients["empresa"]+"'"
				cQuery += " AND E1_CONEMP = '"+jClients["contrato"]+"'"
				cQuery += " AND E1_VERCON = '"+jClients["versaoContrato"]+"'"
				
			Case jClients["nivel"] == "3" // Nivel subcontrato
				cQuery += " AND E1_CODINT = '"+jClients["operadora"]+"'"
				cQuery += " AND E1_CODEMP = '"+jClients["empresa"]+"'"
				cQuery += " AND E1_CONEMP = '"+jClients["contrato"]+"'"
				cQuery += " AND E1_VERCON = '"+jClients["versaoContrato"]+"'"
				cQuery += " AND E1_SUBCON = '"+jClients["subcontrato"]+"'"
				cQuery += " AND E1_VERSUB = '"+jClients["versaoSubcontrato"]+"'"
				
			Case jClients["nivel"] == "4" // Nivel familia
				cQuery += " AND E1_CODINT = '"+jClients["operadora"]+"'"
				cQuery += " AND E1_CODEMP = '"+jClients["empresa"]+"'"
				cQuery += " AND E1_MATRIC = '"+jClients["matricula"]+"'"	
		EndCase
	EndIf

	If Ascan(aStatusTitulos, {|x|Upper(x) $ "A/P/B" }) > 0
		cQuery += " AND ( "
		For nX := 1 To Len(aStatusTitulos)
			Do Case
				Case aStatusTitulos[nX] == "A" // Em aberto
					cQuery += "( "
					cQuery += "E1_SALDO = E1_VALOR "
					
					If Len(aNoTiposEmAberto) > 0
						cQuery += " AND E1_TIPO NOT IN ("+Self:getTiposQuery(aNoTiposEmAberto)+")" // // Tipos que devem ser OCULTADOS nos títulos em aberto
					EndIf
					cQuery += ") "
					lAddStatus := .T.

				Case aStatusTitulos[nX] == "P" // Baixado Parcialmente
					cQuery += "( "
					cQuery += "E1_SALDO > 0 AND E1_SALDO < E1_VALOR "
					
					If Len(aNoTiposEmAberto) > 0
						cQuery += " AND E1_TIPO NOT IN ("+Self:getTiposQuery(aNoTiposEmAberto)+")" // // Tipos que devem ser OCULTADOS nos títulos em aberto
					EndIf
					cQuery += ") "
					lAddStatus := .T.

				Case aStatusTitulos[nX] == "B" // Baixado Totalmente
					cQuery += "( "
					cQuery += "E1_SALDO = 0 "
					
					If Len(aNoTiposBaixados) > 0
						cQuery += " AND E1_TIPO NOT IN ("+Self:getTiposQuery(aNoTiposBaixados)+")" // // Tipos que devem ser OCULTADOS nos títulos baixados
					EndIf
					cQuery += ") "
					lAddStatus := .T.
			EndCase

			If nX < Len(aStatusTitulos)
				If aStatusTitulos[nX+1] $ "A/P/B" .And. lAddStatus
					cQuery += " OR "
					lAddStatus := .F.
				EndIf 		
			EndIf

		Next nX
		cQuery += ") "
	EndIf

	If !Empty(cDtVencInicial)
		cQuery += " AND E1_VENCREA >= '"+cDtVencInicial+"' "
	EndIf

	If !Empty(cDtVencFinal)
		cQuery += " AND E1_VENCREA <= '"+cDtVencFinal+"' "
	EndIf

	// Tipos cujos títulos devem ser apresentados para os Demais Títulos.
	If lDemaisTitulos .And. Len(aTiposDemaisTitulos) > 0
		cQuery += " AND ((E1_TIPO IN ("+Self:getTiposQuery(aTiposDemaisTitulos)+") AND E1_CODINT = '') " // Títulos de outras origens
		cQuery += " OR (E1_CODINT <> '')) " // Títulos origem PLS
	EndIf

	cQuery += " AND E1.D_E_L_E_T_ = ' ' "

	If ExistBLock("PBWHETIT")
		cQuery := ExecBlock("PBWHETIT", .F., .F., {cQuery, jClients, jParam})
	EndIf

Return cQuery

/*/{Protheus.doc} getOrderTitles
Método responsavel por retornar a ordem dos títulos da query

@type Method
@author Vinicius Queiros Teixeira
@since 07/10/2022
@version Protheus 12
/*/
Method getOrderTitles(cFields As Character) As Character Class TitlesBeneficiaryAdapter

	Local cOrdemQuery As Character

	Default cFields := ""

	cOrdemQuery := IIf("E1_EMISSAO" $ Self:cFields, "E1_EMISSAO", "E1_VENCREA")

	If ExistBLock("PBORDTIT")
		cOrdemQuery := ExecBlock("PBORDTIT", .F., .F., {cOrdemQuery})
	EndIf
	
Return cOrdemQuery

/*/{Protheus.doc} getTotalValueQuery
Método responsavel por retornar o valor total (SUM) da query executada

@type Method
@author Vinicius Queiros Teixeira
@since 03/11/2022
@version Protheus 12
/*/
Method getTotalValueQuery(jClients As Json, jParam As Json) As Numeric Class TitlesBeneficiaryAdapter

	Local cQuery As Character

	cQuery := "SELECT SUM(E1_VALOR) SOMA FROM "+RetSQLName("SE1")+" E1 "
	cQuery += " WHERE "+Self:getWhereTitles(jClients, jParam)

Return MPSysExecScalar(cQuery, "SOMA")
