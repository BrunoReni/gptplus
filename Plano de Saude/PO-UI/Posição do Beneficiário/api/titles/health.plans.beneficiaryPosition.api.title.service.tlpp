#Include "tlpp-core.th"

Namespace totvs.protheus.health.plans.beneficiaryPosition.api.title

Using Namespace totvs.protheus.health.plans.beneficiaryPosition.api.util

/*/{Protheus.doc} TitlesBeneficiaryService
Classe responsavel por processar a busca de títulos de cobrança 
do beneficiário

@type class
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Class TitlesBeneficiaryService From BaseService

    Private Data oAdapter As Object
    Private Data jClients As Json

  	Public Method new() Constructor
    Public Method allTitlesPage(cSubscriberId As Character) As Logical
    Public Method titleCompositions(cTitleId As Character) As Logical
    Public Method titlePdf(cTitleId As Character) As Logical

    Private Method getClients() As Logical

EndClass

/*/{Protheus.doc} new
Método construtor da classe

@type method
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Method new() Class TitlesBeneficiaryService

    _Super:new()
    Self:jClients := JsonObject():New()

Return Self

/*/{Protheus.doc} allTitlesPage
Método responsavel por retornar a pagina de títulos de cobrança do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Method allTitlesPage(cSubscriberId As Character) As Logical Class TitlesBeneficiaryService

    Local aAreaBA1 := BA1->(FWGetArea()) As Array
    Local lSucess := .F. As Logical

    BA1->(DbSetOrder(2))
    If BA1->(MsSeek(FWXFilial("BA1")+Padr(cSubscriberId, TamSX3("BA1_CODINT")[1]+TamSX3("BA1_CODEMP")[1]+TamSX3("BA1_MATRIC")[1]+TamSX3("BA1_TIPREG")[1]+TamSX3("BA1_DIGITO")[1])))
        If Self:getClients()
            Self:oAdapter := TitlesBeneficiaryAdapter():New()

            If Self:oAdapter:getPageTitles(Self:jClients, Self:jParam)
                lSucess := .T.
                Self:jResult := Self:oAdapter:getJsonResult()
                Self:nCodeStatus := 200 // Ok
            EndIf
        Else
            lSucess := .F.
            Self:SetError("E005", "Cliente financeiro sem cobrança.",;
                                  "Não foi encontrado nenhuma cobrança para o cliente financeiro do beneficiário de matricula "+cSubscriberId,;
                                  400) // Bad Request
        EndIf
    Else
        lSucess := .F.
        Self:SetError("E001", "Beneficiário não encontrado.",;
                              "Não foi encontrado nenhum Beneficiário com a matricula "+cSubscriberId,;
                              404) // Not Found
    EndIf

    FWRestArea(aAreaBA1)
    
Return lSucess

/*/{Protheus.doc} titleCompositions
Método responsavel por retornar a composição do título

@type method
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Method titleCompositions(cTitleId As Character) As Logical Class TitlesBeneficiaryService

    Local nValorTotalDebito := 0 As Numeric
    Local nValorTotalCredito := 0 As Numeric
    Local nValorTotal := 0 As Numeric
    Local cTipoValorTotal As Character
    Local nPosBeneficiario := 0 As Numeric
    Local nPosComposicao := 0 As Numeric
    Local lSucess := .F. As Logical
    Local aAreaBM1 := BM1->(FWGetArea()) As Array

    cTitleId := StrTran(cTitleId, "+", " ")

    BM1->(DbSetOrder(4))
    If BM1->(MsSeek(FWXFilial("BM1")+Padr(cTitleId, TamSX3("BM1_PREFIX")[1]+TamSX3("BM1_NUMTIT")[1]+TamSX3("BM1_PARCEL")[1]+TamSX3("BM1_TIPTIT")[1])))
        lSucess := .T.

        Self:setAttribute("", "collectionNumber", {|| Substr(BM1->BM1_PLNUCO, 5)}, "C") 
        Self:setAttribute("", "month", {|| BM1->BM1_MES}, "C") 
        Self:setAttribute("", "year", {|| BM1->BM1_ANO}, "C")
        Self:setAttribute("", "debts", {|| 0}, "N")
        Self:setAttribute("", "credits", {|| 0}, "N")
        Self:setAttribute("", "amount", {|| 0}, "N")
        Self:setAttribute("", "amountType", {|| ""}, "C") 
        
        Self:setAttribute("", "beneficiaries", {|| {}}, "A")    

        If Self:jResult:hasProperty("beneficiaries")
            While !BM1->(Eof()) .And. Alltrim(BM1->(BM1_FILIAL+BM1_PREFIX+BM1_NUMTIT+BM1_PARCEL+BM1_TIPTIT)) == FWXFilial("BM1")+cTitleId
                nPosBeneficiario := 0

                If Len(Self:jResult["beneficiaries"]) > 0
                    nPosBeneficiario := Ascan(Self:jResult["beneficiaries"], {|x| x["subscriberId"] == Alltrim(BM1->BM1_MATUSU)})
                EndIf

                If nPosBeneficiario == 0
                    aAdd(Self:jResult["beneficiaries"], JsonObject():new())
                    nPosBeneficiario := Len(Self:jResult["beneficiaries"])
                    Self:jResult["beneficiaries"][nPosBeneficiario]["subscriberId"] := Alltrim(BM1->BM1_MATUSU)
                    Self:jResult["beneficiaries"][nPosBeneficiario]["name"] := Alltrim(BM1->BM1_NOMUSR)
                    Self:jResult["beneficiaries"][nPosBeneficiario]["compositions"] := {}
                EndIf
       
                aAdd(Self:jResult["beneficiaries"][nPosBeneficiario]["compositions"], JsonObject():new())
                nPosComposicao := Len(Self:jResult["beneficiaries"][nPosBeneficiario]["compositions"])

                Self:jResult["beneficiaries"][nPosBeneficiario]["compositions"][nPosComposicao]["typeCode"] := BM1->BM1_CODTIP
                Self:jResult["beneficiaries"][nPosBeneficiario]["compositions"][nPosComposicao]["typeDescription"] := Alltrim(BM1->BM1_DESTIP)
                Self:jResult["beneficiaries"][nPosBeneficiario]["compositions"][nPosComposicao]["type"] := If(BM1->BM1_TIPO == "1", "Débito", "Crédito")
                Self:jResult["beneficiaries"][nPosBeneficiario]["compositions"][nPosComposicao]["value"] := BM1->BM1_VALOR

                If BM1->BM1_TIPO == "1"
                    nValorTotalDebito += BM1->BM1_VALOR
                Else
                    nValorTotalCredito += BM1->BM1_VALOR
                EndIf
    
                BM1->(DbSkip())
            EndDo

            If Self:jResult:hasProperty("debts")
                Self:jResult["debts"] := nValorTotalDebito
            EndIf

            If Self:jResult:hasProperty("credits")
                Self:jResult["credits"] := nValorTotalCredito
            EndIf 

            If nValorTotalDebito >= nValorTotalCredito
                cTipoValorTotal := "Débito"
                nValorTotal := nValorTotalDebito - nValorTotalCredito
            Else
                cTipoValorTotal := "Crédito"
                nValorTotal := nValorTotalCredito - nValorTotalDebito
            Endif  

            If Self:jResult:hasProperty("amount")
                Self:jResult["amount"] := nValorTotal
            EndIf

            If Self:jResult:hasProperty("amountType")
                Self:jResult["amountType"] := cTipoValorTotal
            EndIf    
        EndIf
    Else
        lSucess := .F.
        Self:SetError("E002", "Composição do título não encontrado.",;
                              "Não foi encontrado nenhuma composição para o título "+cTitleId,;
                              404) // Not Found
    EndIf

    FWRestArea(aAreaBM1)
    
Return lSucess

/*/{Protheus.doc} titlePdf
Método responsavel por retornar o pdf em base64 do título

@type method
@author Vinicius Queiros Teixeira
@since 08/10/2022
@version Protheus 12
/*/
Method titlePdf(cTitleId As Character) As Logical Class TitlesBeneficiaryService

    Local lSucess := .T. As Logical
    Local cDiretorio := PLSMUDSIS(getWebDir() + getSkinPls() + "\relatorios\") As Character
    Local cFileName As Character
    Local aAreaSE1 As Array

    cTitleId := StrTran(cTitleId, "+", " ")

    SE1->(DbSetOrder(1))
    If SE1->(MsSeek(FWXFilial("SE1")+Padr(cTitleId, TamSX3("BM1_PREFIX")[1]+TamSX3("BM1_NUMTIT")[1]+TamSX3("BM1_PARCEL")[1]+TamSX3("BM1_TIPTIT")[1])))   
        aAreaSE1 := SE1->(FWGetArea())
        cFileName := PLSR580(Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil,;
							 Nil, Nil, Nil, Nil, Nil, Nil, 1, 1, Nil, 1, 2, 1, 1, 1, .T.,;
                             SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, cDiretorio)    
        FWRestArea(aAreaSE1)

        If !Empty(cFileName) .And. File(cDiretorio+cFileName)
            Self:setAttribute("", "documentNumber", {|| SE1->E1_NUM}, "C")
            Self:setAttribute("", "base64", {|| ""}, "C")

            If Self:jResult:hasProperty("base64")
                Self:jResult["base64"] := Self:convertToBase64(cDiretorio+cFileName)
            EndIf	
        Else
            lSucess := .F.
            Self:SetError("E003", "Não permitido a geração do PDF",;
                                  "Não é permitido gerar o pdf para o status atual do título "+cTitleId,;
                                  400) // Bad Request
        EndIf
    Else
        lSucess := .F.
        Self:SetError("E004", "Título não encontrado.",;
                              "Não foi encontrado no contas a receber (Financeiro) o título "+cTitleId,;
                              404) // Not Found
    EndIf
       
Return lSucess

/*/{Protheus.doc} getClients
Método responsavel por retornar os clientes de cobrança do beneficiário

@type method
@author Vinicius Queiros Teixeira
@since 04/10/2022
@version Protheus 12
/*/
Method getClients() As Logical Class TitlesBeneficiaryService

    Local aCliente As Array
    Local cWhere As Character
    Local cAliasTemp As Character
    Local cFilialSE1 As Character  
    Local lFindClients := .F. As Logical
    Local aArea := FWGetArea() As Array

    BA3->(DbSetOrder(1))
    BA3->(MsSeek(FWXFilial("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)))

    BG9->(DbSetOrder(1))
    BG9->(MsSeek(FWXFilial("BG9")+BA1->(BA1_CODINT+BA1_CODEMP)))

    aCliente := PLSRETNCB(BA1->BA1_CODINT, BA1->BA1_CODEMP, BA1->BA1_MATRIC)

    If Len(aCliente) > 0 .And. aCliente[1]
        Self:jClients["nivel"] := aCliente[5]
        Self:jClients["operadora"] := BA1->BA1_CODINT 
        Self:jClients["empresa"] := BA1->BA1_CODEMP
        Self:jClients["contrato"] := BA1->BA1_CONEMP
        Self:jClients["versaoContrato"] := BA1->BA1_VERCON
        Self:jClients["subcontrato"] := BA1->BA1_SUBCON
        Self:jClients["versaoSubcontrato"] := BA1->BA1_VERSUB
        Self:jClients["matricula"] := BA1->BA1_MATRIC

        Do Case
            Case Self:jClients["nivel"] == "1" // Nivel empresa
                cWhere += "%AND BBT_CODOPE = '"+Self:jClients["operadora"]+"'"
                cWhere += "AND BBT_CODEMP = '"+Self:jClients["empresa"]+"'%"

            Case Self:jClients["nivel"] == "2" // Nivel contrato
                cWhere += "%AND BBT_CODOPE = '"+Self:jClients["operadora"]+"'"
                cWhere += "AND BBT_CODEMP = '"+Self:jClients["empresa"]+"'"
                cWhere += "AND BBT_CONEMP = '"+Self:jClients["contrato"]+"'"
                cWhere += "AND BBT_VERCON = '"+Self:jClients["versaoContrato"]+"'%"
                
            Case Self:jClients["nivel"] == "3" // Nivel subcontrato
                cWhere += "%AND BBT_CODOPE = '"+Self:jClients["operadora"]+"'"
                cWhere += "AND BBT_CODEMP = '"+Self:jClients["empresa"]+"'"
                cWhere += "AND BBT_CONEMP = '"+Self:jClients["contrato"]+"'"
                cWhere += "AND BBT_VERCON = '"+Self:jClients["versaoContrato"]+"'"
                cWhere += "AND BBT_SUBCON = '"+Self:jClients["subcontrato"]+"'"
                cWhere += "AND BBT_VERSUB = '"+Self:jClients["versaoSubcontrato"]+"'%"

            Case Self:jClients["nivel"] == "4" // Nivel familia
                cWhere += "%AND BBT_CODOPE = '"+Self:jClients["operadora"]+"'"
                cWhere += "AND BBT_CODEMP = '"+Self:jClients["empresa"]+"'"
                cWhere += "AND BBT_MATRIC = '"+Self:jClients["matricula"]+"'%"
        EndCase

        If !Empty(cWhere)
            Self:jClients["clients"] := {}
            
            If ExistBlock("PLSXFILI")
                cFilialSE1 := ExecBlock("PLSXFILI", .F., .F., {"SE1"})
            Else
                cFilialSE1 := FWXFilial("SE1") 
            EndIf

            cAliasTemp := getNextAlias()
            BeginSql Alias cAliasTemp	
                SELECT E1.E1_CLIENTE, E1.E1_LOJA FROM %table:BBT% BBT 
                INNER JOIN %table:SE1% E1
                    ON E1.E1_FILIAL = %Exp:cFilialSE1%
                    AND E1.E1_PREFIXO = BBT.BBT_PREFIX
                    AND E1.E1_NUM = BBT.BBT_NUMTIT
                    AND E1.E1_PARCELA = BBT.BBT_PARCEL
                    AND E1.E1_TIPO = BBT.BBT_TIPTIT
                    AND E1.%NotDel%

                    WHERE BBT.BBT_FILIAL = %xFilial:BBT% 
                        %Exp:cWhere%
                        AND BBT.%NotDel%

                    GROUP BY E1.E1_CLIENTE, E1.E1_LOJA    
            EndSql

            If !(cAliasTemp)->(Eof())
                lFindClients := .T.

                While !(cAliasTemp)->(Eof())
                    aAdd(Self:jClients["clients"], {"client" : (cAliasTemp)->E1_CLIENTE, "store" : (cAliasTemp)->E1_LOJA})

                    (cAliasTemp)->(DbSkip())
                EndDo
            EndIf

            (cAliasTemp)->(DbCloseArea())
        EndIf
    EndIf

    FWRestArea(aArea)
	
Return lFindClients
