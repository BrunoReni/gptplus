#include "fileIO.ch"
#include "protheus.ch"
#include "xmlxfun.ch"
#include "totvs.ch"

#define CRLF chr( 13 ) + chr( 10 )
#define G_ANEX_QUIM "07"
#define G_ANEX_RADI "08"
#define G_ANEX_OPME "09"

//-------------------------------------------------------------------
/*/{Protheus.doc} PLSLoteAnexo
Serviço de montagem do TISS Online Lote Anexo WS

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
class PLSLoteAnexo

    public data oXml
    public data oJson
    public data lSuccess
    public data cError
    public data cXml
    public data cStrHash
    public data cNS
    public data cVersao
    public data cSoapResp
    public data cPath
    public data cTipGui
    public data cTagProc
    public data aCalend
    public data aTabDup
    public data aDadUsr

    public method new() constructor
    public method addNS()
    public method valida()
    public method gravaAnexo()
    public method hasNext()
    public method geraResposta()
    public method montaTag()
    public method motivoNegativa()
    public method geraGlosa()
    public method addProc()
    public method processa()
    public method dadosAutorizacao()
    public method medicoSolicitante()

endclass


//-------------------------------------------------------------------
/*/{Protheus.doc} new

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method new() class PLSLoteAnexo
self:cSoapResp	:= ''
self:cStrHash 	:= ''
self:cError 	:= ''
self:oJson		:= JsonObject():New()
self:lSuccess	:= .t.
self:aCalend 	:= {}
self:aDadUsr 	:= {}
self:aTabDup  	:= PlsBusTerDup(GetNewPar("MV_TISSCAB","87")) 

return self

//-------------------------------------------------------------------
/*/{Protheus.doc} addNS

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method addNS(cTag) class PLSLoteAnexo

if !empty(self:cNS)
    cTag := strtran(cTag, "/", "/" + self:cNS + ":")
endif

return cTag

//-------------------------------------------------------------------
/*/{Protheus.doc} gravaAnexo

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method gravaAnexo() class PLSLoteAnexo
local aDadB4A 	:= {}
local aCabProc	:= {}
local aDadProc	:= {}
local aVetProc	:= {0}
local aCabCri	:= {}
local aDadCri	:= {}
local aVetCri  	:= {0}
local aChaveGen	:= {}
local aRet		:= {}
local aRetFun	:= {}
local aHisCri	:= {}
local aCriticas	:= {}
local nProc		:= 1
local nFor		:= 1
local lRet		 := .F.
local lAuditoria := .F.
local cCodGloAud := '025'
local cSequen	:= ''
local cCodGlo	:= ''
local cDesGlo	:= ''
local cCodMot	:= ''
local cObsMot	:= ''
local cPartci	:= ''
local cUniMed	:= ''

private aAutForAnx := {} //Private obrigatória no PLSA09A :(

B4A->(dbsetorder(1))

//Monta cabecalho B4A 
aadd(aDadB4A,{"B4A_OPEMOV",self:oJson['opeMov'] })
aadd(aDadB4A,{"B4A_REGANS",Alltrim(self:oJson['regAns']) })
aadd(aDadB4A,{"B4A_GUIREF",self:oJson['guiRef'] })
aadd(aDadB4A,{"B4A_NUMIMP",self:oJson['guiPre'] })
if B4A->(fieldpos('B4A_LOTGUI')) > 0
	aadd(aDadB4A,{"B4A_LOTGUI",self:oJson['numeroLote'] })
endIf
aadd(aDadB4A,{"B4A_DATPRO",BEA->BEA_DATPRO })
aadd(aDadB4A,{"B4A_DATSOL",date() }) //Manter funcionalidade do tissOnline, não aceitar data retroativa
aadd(aDadB4A,{"B4A_GUIOPE",'' })
aadd(aDadB4A,{"B4A_MATANT",BA1->BA1_MATANT })
aadd(aDadB4A,{"B4A_OPEUSR",BA1->BA1_CODINT })
aadd(aDadB4A,{"B4A_CODEMP",BA1->BA1_CODEMP })
aadd(aDadB4A,{"B4A_CONEMP",BA1->BA1_CONEMP })
aadd(aDadB4A,{"B4A_SUBCON",BA1->BA1_SUBCON })
aadd(aDadB4A,{"B4A_VERCON",BA1->BA1_VERCON })
aadd(aDadB4A,{"B4A_VERSUB",BA1->BA1_VERSUB })
aadd(aDadB4A,{"B4A_MATRIC",BA1->BA1_MATRIC })
aadd(aDadB4A,{"B4A_TIPREG",BA1->BA1_TIPREG })
aadd(aDadB4A,{"B4A_DIGITO",BA1->BA1_DIGITO })
aadd(aDadB4A,{"B4A_NOMUSR",BA1->BA1_NOMUSR })
aadd(aDadB4A,{"B4A_CANCEL",'0' })
aadd(aDadB4A,{"B4A_PESO"  ,Val(cvaltochar(self:oJson['peso']))})
aadd(aDadB4A,{"B4A_ALTURA",Val(cvaltochar(self:oJson['altura']))})
aadd(aDadB4A,{"B4A_SUPCOR", Val(cvaltochar(self:oJson['superficieCorporal']))})
aadd(aDadB4A,{"B4A_IDADE" ,Val(cvaltochar(self:oJson['idade']))})
aadd(aDadB4A,{"B4A_SEXO"  ,cvaltochar(self:oJson['sexo']) })
aadd(aDadB4A,{"B4A_NOMSOL",cvaltochar(self:oJson['nomeSol']) })
aadd(aDadB4A,{"B4A_TELSOL",cvaltochar(self:oJson['telSol']) })
aadd(aDadB4A,{"B4A_EMASOL",cvaltochar(self:oJson['emailSol']) })
aadd(aDadB4A,{"B4A_TIPANE",Iif(self:cTipGui==G_ANEX_QUIM,'2',Iif(self:cTipGui==G_ANEX_RADI,'1','3'))})
aadd(aDadB4A,{"B4A_TIPGUI",self:cTipGui})
aadd(aDadB4A,{"B4A_DATDIA",stod(cvaltochar(self:oJson['dtDiagnostico']))})
aadd(aDadB4A,{"B4A_ESTADI",cvaltochar(self:oJson['estadiamento']  )})
aadd(aDadB4A,{"B4A_FINALI",cvaltochar(self:oJson['finalidade'] )})
aadd(aDadB4A,{"B4A_ECOG"  ,cvaltochar(self:oJson['ecog'] )})
aadd(aDadB4A,{"B4A_CIRURG",cvaltochar(self:oJson['cirurgia'])})
aadd(aDadB4A,{"B4A_DATCIR",stod(cvaltochar(self:oJson['dtCirurgia']))})
aadd(aDadB4A,{"B4A_CIDPRI",cvaltochar(self:oJson['cid'])})
aadd(aDadB4A,{"B4A_CIDSEC",cvaltochar(self:oJson['cid2'])})
aadd(aDadB4A,{"B4A_CIDTER",cvaltochar(self:oJson['cid3'])})
aadd(aDadB4A,{"B4A_CIDQUA",cvaltochar(self:oJson['cid4'])})

aadd(aDadB4A,{"B4A_ANOPAG",self:aCalend[4] })
aadd(aDadB4A,{"B4A_MESPAG",self:aCalend[5] })

aadd(aDadB4A,{"B4A_OBSERV",cvaltochar(self:oJson['observacao']) })

//Campos Quimio
aadd(aDadB4A,{"B4A_TUMOR", cvaltochar(self:oJson['tumor'])})
aadd(aDadB4A,{"B4A_NODULO",cvaltochar(self:oJson['nodulo'])})
aadd(aDadB4A,{"B4A_METAST",cvaltochar(self:oJson['metastase'])})
aadd(aDadB4A,{"B4A_TIPQUI",cvaltochar(self:oJson['tpQuimio'])})
aadd(aDadB4A,{"B4A_PLATER",cvaltochar(self:oJson['planoTerap'])}) 
aadd(aDadB4A,{"B4A_NROCIC",Val(cvaltochar(self:oJson['numeroCiclos']))})
aadd(aDadB4A,{"B4A_CICATU",Val(cvaltochar(self:oJson['cicloAtual']))})
aadd(aDadB4A,{"B4A_INTCIC",Val(cvaltochar(self:oJson['intervaloCiclos']))})
aadd(aDadB4A,{"B4A_DCICAT",Val(cvaltochar(self:oJson['diasCicloAtual']))}) 
aadd(aDadB4A,{"B4A_AREA",  cvaltochar(self:oJson['area'])})
aadd(aDadB4A,{"B4A_DATIRR",stod(cvaltochar(self:oJson['dtIrradiacao']))})

//Campos PTU Online
aadd(aDadB4A,{"B4A_NRAOPE",BEA->BEA_NRAOPE })
aadd(aDadB4A,{"B4A_NRTROL",BEA->BEA_NRTROL }) 

//Campos OPME
aadd(aDadB4A,{"B4A_JUSTTE",cvaltochar(self:oJson['jusTec']) })
aadd(aDadB4A,{"B4A_ESPMAT",cvaltochar(self:oJson['espMat']) }) 

//Campos Radio
aadd(aDadB4A,{"B4A_DIAIMG",cvaltochar(self:oJson['diagImag'] ) })
aadd(aDadB4A,{"B4A_DIAGCH",cvaltochar(self:oJson['diagHisp'] ) })
aadd(aDadB4A,{"B4A_INFREL",cvaltochar(self:oJson['infoRel'] ) })
aadd(aDadB4A,{"B4A_NROCAM",val(cvaltochar(self:oJson['numeroCampos'] )) })
aadd(aDadB4A,{"B4A_QUIMIO",cvaltochar(self:oJson['quimio'] ) })
aadd(aDadB4A,{"B4A_DATQUI",stod(cvaltochar(self:oJson['dtQuimio'] )) })
aadd(aDadB4A,{"B4A_NRODIA",val(cvaltochar(self:oJson['nrDias'] )) })
aadd(aDadB4A,{"B4A_DOSDIA",val(cvaltochar(self:oJson['doseCampo'] )) })
aadd(aDadB4A,{"B4A_DOSTOT",val(cvaltochar(self:oJson['doseTotal'] )) })
aadd(aDadB4A,{"B4A_DATPRE",stod(cvaltochar(self:oJson['dtPrevInicio'] )) })

//se for radioterapia não tem itens, portanto não cria a estrutura cabeçalho e nem dos dados do procedimento
if self:cTipGui <> G_ANEX_RADI
	aCabProc := PLSA09AHea(self:cTipGui)
	aDadProc := PLSA09AClB(aCabProc)
EndIf

aCabCri  := PLSA09HCHe()
aDadCri  := PLSA09HClB(aCabCri)

aQtdBrw := {}
For nProc:=1 to len(self:oJson['procedimentos'])
	AaDd( aQtdBrw, {padr(self:oJson['procedimentos'][nProc]['codPad'],  Len(BR8->BR8_CODPAD)),;
					padr(self:oJson['procedimentos'][nProc]['codProc'] ,Len(BR8->BR8_CODPSA)),;
					self:oJson['procedimentos'][nProc]['qtdApr'],;
					self:oJson['procedimentos'][nProc]['dtProc'],;
					'',;
					padr('',Len(B04->B04_CODIGO)),;
					padr('',Len(B09->B09_FADENT)),;
					strzero(nProc,3) } )
Next

For nProc:=1 to len(self:oJson['procedimentos'])
	cSequen := strzero(nProc,3)
	
	cCodPad := self:oJson['procedimentos'][nProc]['codPad'] 
	cCodPro := self:oJson['procedimentos'][nProc]['codProc']
	nQtdPro := self:oJson['procedimentos'][nProc]['qtdApr']
	dDatPro := self:oJson['procedimentos'][nProc]['dtProc']

	self:oJson['procedimentos'][nProc]['sequencial'] 		:= cSequen
	self:oJson['procedimentos'][nProc]['sequencialTiss'] 	:= strzero(nProc,4)
	self:oJson['procedimentos'][nProc]['qtdPro'] 			:= nQtdPro
	self:oJson['procedimentos'][nProc]['valorAut']			:= self:oJson['procedimentos'][nProc]['valorApr']

	aQtdBrw := {}
	aadd(aQtdBrw,{})

	aRetFun := PLSAUTP(	dDatPro,'',cCodPad,cCodPro,nQtdPro,self:aDadUsr,0,{},"1",.F.,cvaltochar(self:oJson['cid']),;
		.T.,"1",.F.,nil,nil,self:aCalend[4],self:aCalend[5],nil,nil,nil,.T.,;
		nil,nil,nil,nil,nil,nil,nil,nil,cSequen,nil,nil,"1",nil,.F.,NIL,NIL,NIL,nil,NIL,NIL,NIL,nil,nil,nil,nil,nil,;
		.F.,.T.,'S',NIL,aQtdBrw,nil,NIL,nil,nil,nil,.f.,'B4A',;
		nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,self:cTipGui,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,;
		nil,nil,nil,nil,self:oJson['guiRef'])

	aRet := aClone(aRetFun)
	lRet := aRet[1]
	lAuditoria := .F. 

	If !lRet
		aHisCri 	:= aClone( aRet[2] )
		lAuditoria	:= Ascan( aHisCri,{|x| x[1] == cCodGloAud } ) > 0
		// Verifico se a critica deve colocar o procedimento em auditoria
		if !lAuditoria .And. Len(aHisCri) > 0				
			If BCT->( MsSeek( xFilial("BCT")+self:oJson['opeMov']+aHisCri[1,1] ) )
				lAuditoria := Iif(BCT->BCT_AUDITO == "1",.T.,.F.)
			EndIf			
		endIf

		For nFor := 1 To Len(aHisCri)
			cCodGlo := aHisCri[nFor,1]
			cDesGlo := aHisCri[nFor,2]
			cCodMot := Iif(Len(aHisCri[nFor]) >= 9, aHisCri[nFor,9],"")
			cObsMot := Iif(Len(aHisCri[nFor]) >= 10, aHisCri[nFor,10],"")
			cPartci := Iif(Len(aHisCri[nFor]) >= 11, aHisCri[nFor,11],"")
			cUniMed := Iif(Len(aHisCri[nFor]) >= 12, aHisCri[nFor,12],"")

			If nFor==1 .OR. Len(aDadCri) == 0 // se não colocar esse Len aqui vem posição 2 no nI ai da erro de array out of bounds no aDadCri
				P09ABlank(aDadCri,aCabCri,aVetCri)
			Endif
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_SEQUEN",aCabCri)] := cSequen
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_CODGLO",aCabCri)] := cCodGlo
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_DESGLO",aCabCri)] := cDesGlo
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_CODMOT",aCabCri)] := cCodMot
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_OBSMOT",aCabCri)] := cObsMot
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_PARTIC",aCabCri)] := cPartci
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_UNIMED",aCabCri)] := cUniMed
			aDadCri[Len(aDadCri)][PLRETPOS("BEG_SEQCRI",aCabCri)] := P09ASEQCRI(1)

			aadd( aCriticas,{cSequen,cCodGlo,cDesGlo,cCodPad,cCodPro,'',''} )					

			nFor ++
			While nFor <= Len(aHisCri) .And. Empty(aHisCri[nFor,1])
				P09ABlank(aDadCri,aCabCri,aVetCri)
				aDadCri[Len(aDadCri)][PLRETPOS("BEG_SEQUEN",aCabCri)] := cSequen
				aDadCri[Len(aDadCri)][PLRETPOS("BEG_CODGLO",aCabCri)] := ""
				aDadCri[Len(aDadCri)][PLRETPOS("BEG_DESGLO",aCabCri)] := aHisCri[nFor,2]
				aDadCri[Len(aDadCri)][PLRETPOS("BEG_INFGLO",aCabCri)] := aHisCri[nFor,3]
				aDadCri[Len(aDadCri)][PLRETPOS("BEG_SEQCRI",aCabCri)] := P09ASEQCRI(1)
				
				nFor ++
			Enddo
			nFor--
		Next
	Endif

	BR8->(dbSetOrder(1))
	BR8->(msSeek(xFilial("BR8")+cCodPad+cCodPro))

	If nProc <> 1
		P09ABlank(aDadProc,aCabProc,aVetProc)
	Endif

	If !lRet
		self:oJson['procedimentos'][nProc]['qtdPro'] 	:= 0
		self:oJson['procedimentos'][nProc]['valorAut'] 	:= 0
	Endif

	aDadProc[Len(aDadProc)][PLRETPOS("B4C_SEQUEN",aCabProc)] := cSequen
	aDadProc[Len(aDadProc)][PLRETPOS("B4C_CODPAD",aCabProc)] := cCodPad
	aDadProc[Len(aDadProc)][PLRETPOS("B4C_CODPRO",aCabProc)] := cCodPro
	aDadProc[Len(aDadProc)][PLRETPOS("B4C_DESPRO",aCabProc)] := self:oJson['procedimentos'][nProc]['desProc']
	
	iif(PLRETPOS("B4C_QTDSOL",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_QTDSOL",aCabProc)] := nQtdPro,nil)
	iif(PLRETPOS("B4C_SALDO",aCabProc )>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_SALDO",aCabProc)]  := iif(lRet,nQtdPro,0),nil)
	iif(PLRETPOS("B4C_QTDPRO",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_QTDPRO",aCabProc)] := nQtdPro,nil)


	iif(PLRETPOS("B4C_OPCAO",aCabProc )>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_OPCAO",aCabProc)]  := self:oJson['procedimentos'][nProc]['opcFabric'],nil)
	iif(PLRETPOS("B4C_VLRUNT",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_VLRUNT",aCabProc)] := val(cvaltochar(self:oJson['procedimentos'][nProc]['valorApr'])),nil)
	iif(PLRETPOS("B4C_VLRUNA",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_VLRUNA",aCabProc)] := val(cvaltochar(self:oJson['procedimentos'][nProc]['valorApr'])),nil)
	iif(PLRETPOS("B4C_REGANV",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_REGANV",aCabProc)] := self:oJson['procedimentos'][nProc]['regAnv'],nil)
	iif(PLRETPOS("B4C_REFMAF",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_REFMAF",aCabProc)] := self:oJson['procedimentos'][nProc]['cofRefFab'],nil)
	iif(PLRETPOS("B4C_AUTFUN",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_AUTFUN",aCabProc)] := self:oJson['procedimentos'][nProc]['autFunc'],nil)

	iif(PLRETPOS("B4C_VIAADM",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_VIAADM",aCabProc)] := self:oJson['procedimentos'][nProc]['viaAdm'],nil)
	iif(PLRETPOS("B4C_FREQUE",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_FREQUE",aCabProc)] := val(cvaltochar(self:oJson['procedimentos'][nProc]['frequencia'])),nil)
	iif(PLRETPOS("B4C_DATPRO",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_DATPRO",aCabProc)] := dDatPro,nil)
	iif(PLRETPOS("B4C_IMGSTA",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_IMGSTA",aCabProc)] := iif(lRet,"ENABLE","DISABLE"),nil)
	iif(PLRETPOS("B4C_STATUS",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_STATUS",aCabProc)] := iif(lRet,"1","0"),nil)
	iif(PLRETPOS("B4C_AUDITO",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_AUDITO",aCabProc)] := iif(lAuditoria,'1','0'),nil)
	iif(PLRETPOS("B4C_NIVEL",aCabProc )>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_NIVEL",aCabProc)]  := BR8->BR8_NIVEL,nil)
	iif(PLRETPOS("B4C_NIVAUT",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_NIVAUT",aCabProc)] := iif(lRet,aRet[3],Space(03)),nil)
	iif(PLRETPOS("B4C_NIVCRI",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_NIVCRI",aCabProc)] := iif(!lRet,aRet[3],Space(03)),nil)
	iif(PLRETPOS("B4C_CHVNIV",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_CHVNIV",aCabProc)] := iif(Len(aRet)>=4 .And. ValType(aRet[4]) == "C",aRet[4],Space(60)),nil)
	iif(PLRETPOS("B4C_UNMED",aCabProc)>0,aDadProc[Len(aDadProc)][PLRETPOS("B4C_UNMED",aCabProc)]   := self:oJson['procedimentos'][nProc]['unidade'],nil)

Next

aRetorno := PLSA09AGRV(3,self:oJson['opeMov'],'B4C','B4A','BEG',aDadB4A,aCabProc,aDadProc,aVetProc,aCabCri,aDadCri,aVetCri,self:cTipGui,date(),self:aCalend[4],self:aCalend[5],aChaveGen)

self:lSuccess := aRetorno[1]

return 

method processa() class PLSLoteAnexo
self:oJson['opeMov'] := PlsIntPad()
self:oJson['regAns'] := posicione("BA0",1,xFilial("BA0")+self:oJson['opeMov'],"BA0_SUSEP")
if !empty(self:cTipGui)
	self:oJson['guiRef'] := self:oXML:XPathGetNodeValue( self:cPath + self:addNS("/cabecalhoAnexo/numeroGuiaReferenciada" ))
	self:oJson['guiPre'] := strtran(self:oXML:XPathGetNodeValue( self:cPath + self:addNS("/cabecalhoAnexo/numeroGuiaAnexo" )),'HAT','')
	self:oJson['matriculaBenef'] 	:= self:oXML:XPathGetNodeValue( self:cPath + self:addNS("/dadosBeneficiario/numeroCarteira" ))
else
	self:oJson['guiRef'] := self:oXML:XPathGetNodeValue( self:cPath + self:addNS("/numeroGuiaReferenciada" ))
	self:oJson['guiPre'] := strtran(self:oXML:XPathGetNodeValue( self:cPath + self:addNS("/numeroGuiaAnexo" )),'HAT','')
	self:oJson['matriculaBenef'] 	:= self:oXML:XPathGetNodeValue( self:cPath + self:addNS("/numeroCarteira" ))
endif
self:oJson['sequencial'] := self:oXML:XPathGetNodeValue( self:addNS("/loteAnexoWS/cabecalho/identificacaoTransacao/sequencialTransacao" ))
self:oJson['numeroLote'] := self:oXML:XPathGetNodeValue( self:addNS("/loteAnexoWS/loteAnexo/numeroLote" ))

if self:valida()
	self:processaGuia()
	self:oJson['observacao']		:= self:oXML:XPathGetNodeValue( self:cPath + self:addNS("/observacao" ))
endif

return

//-------------------------------------------------------------------
/*/{Protheus.doc} valida

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method valida() class PLSLoteAnexo
local cCgcRda 	:= ""
local cCodRda 	:= ""
local cLogin 	:= ""
local cSenha 	:= ""

BEA->(dbSetOrder(1))	//BEA_FILIAL + BEA_OPEMOV + BEA_ANOAUT + BEA_MESAUT + BEA_NUMAUT + DTOS(BEA_DATPRO) + BEA_HORPRO 
BA1->(dbSetOrder(2)) 	//BA1_FILIAL + BA1_CODINT + BA1_CODEMP + BA1_MATRIC+  BA1_TIPREG + BA1_DIGITO

if GetNewPar("MV_PLLGSN", .F.) 
			
	cLogin := self:oXML:XPathGetNodeValue( self:addNS("/loteAnexoWS/cabecalho/loginSenhaPrestador/loginPrestador" ))
	cSenha := self:oXML:XPathGetNodeValue( self:addNS("/loteAnexoWS/cabecalho/loginSenhaPrestador/senhaPrestador" ))
	
	if empty(cLogin) .Or. empty(cSenha)
		self:lSuccess := .f.
		self:cError := "Campos de login e senha nao informados na estrutura"

	else
		BSW->(dbSetOrder(1))
		If BSW->(MsSeek(xfilial("BSW") + Upper(cLogin) + Space( tamsx3("BSW_LOGUSR")[1] - Len(cLogin) ) ))
			If Alltrim(cSenha) <> Alltrim(BSW->BSW_SENHA)
				self:lSuccess := .f.
				self:cError := "Senha invalida"
			endIF
		else
			self:lSuccess := .f.
			self:cError := "Login nao existente"
		endIf
	endIf
endIf

cCodRda := self:oXML:XPathGetNodeValue( self:addNS("/loteAnexoWS/cabecalho/origem/identificacaoPrestador/codigoPrestadorNaOperadora" ))
cCgcRda := self:oXML:XPathGetNodeValue( self:addNS("/loteAnexoWS/cabecalho/origem/identificacaoPrestador/CPF" ))
cCgcRda +=self:oXML:XPathGetNodeValue( self:addNS("/loteAnexoWS/cabecalho/origem/identificacaoPrestador/CNPJ" ))

If !empty(cCodRda)
	BAU->(dbSetOrder(1))
	If !BAU->(MsSeek(xFilial("BAU") + alltrim(cCodRDA)))
		self:lSuccess := .f.
		self:cError := "Prestador não localizado com o código [" +cCodRDA+ "]"
	endIf
else
   	BAU->(dbSetOrder(4))
   	If !BAU->(MsSeek(xfilial("BAU") + alltrim(cCgcRda)))
		self:lSuccess := .f.
		self:cError := "Prestador não localizado com o CPF/CNPJ [" +cCgcRda+ "]"
   	EndIf
endIf

if self:lSuccess
	self:oJson['codRda'] := BAU->BAU_CODIGO
endif

if self:lSuccess .and. !BEA->(msSeek(xFilial("BEA")+self:oJson['guiRef']))
	self:lSuccess := .f.
	self:cError := "Guia referenciada não localizada [" +self:oJson['guiRef']+ "]"
endif

if self:lSuccess .and. !BA1->(msSeek(xFilial("BA1")+self:oJson['matriculaBenef']))
	BA1->(dbSetOrder(5)) 	//BA1_FILIAL + BA1_MATAND
	if !BA1->(msSeek(xFilial("BA1")+self:oJson['matriculaBenef']))
		self:lSuccess := .f.
		self:cError := "Beneficiario não localizado [" +self:oJson['matriculaBenef']+ "]"	
	endif
endif

self:aDadUsr := PLSDADUSR(self:oJson['matriculaBenef'],"1",.F.,date(),nil,nil,NIL)

If !self:aDadUsr[1]
	self:lSuccess := .f.
	self:cError := "Matricula informada não permitida [" +self:oJson['matriculaBenef']+ "]"	
Endif

if self:lSuccess .and. alltrim(BEA->(BEA_OPEUSR+BEA_CODEMP+BEA_MATRIC+BEA_TIPREG+BEA_DIGITO)) <> alltrim(BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO))
	self:lSuccess := .f.
	self:cError := "Guia referenciada não pertence ao beneficiario informado. [" +BEA->(BEA_OPEUSR+BEA_CODEMP+BEA_MATRIC+BEA_TIPREG+BEA_DIGITO)+ "]"	
endif

self:aCalend := PLSXVLDCAL(dDataBase,PLSINTPAD(),.f.,"","")
If !self:aCalend[1]
	self:lSuccess := .f.
	self:cError := "Calendario de pagamento bloqueado."	
Endif

return self:lSuccess

//-------------------------------------------------------------------
/*/{Protheus.doc} hasNext

@author  Lucas Nonato
@version P12
@since   06/08/2020
/*/
method hasNext(nX,cPath) class PLSLoteAnexo

cPath := self:cTagProc + "[" + cvaltochar(nX) + "]"

return self:oXML:XPathHasNode(cPath)

//-------------------------------------------------------------------
/*/{Protheus.doc} geraResposta

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method geraResposta() class PLSLoteAnexo
	local cData         := dtos(date())

	self:montaTag( 1,"cabecalho")
    self:montaTag( 2,"identificacaoTransacao" )
    self:montaTag( 3,"tipoTransacao","PROTOCOLO_RECEBIMENTO_ANEXO")
    self:montaTag( 3,"sequencialTransacao",self:oJson['sequencial']) 
    self:montaTag( 3,"dataRegistroTransacao",substr(cData,1,4)+"-"+substr(cData,5,2)+"-"+substr(cData,7,2))
    self:montaTag( 3,"horaRegistroTransacao",time())
    self:montaTag( 2,"identificacaoTransacao",,.T. )

    self:montaTag( 2,"origem")
	self:montaTag( 3,"registroANS",alltrim(self:oJson['regAns']))    
    self:montaTag( 2,"origem",,.T.)

    self:montaTag( 2,"destino")
	if !empty(self:oJson['codRda'])
		self:montaTag( 3,"identificacaoPrestador" )
    	self:montaTag( 4,"codigoPrestadorNaOperadora",self:oJson['codRda'])
    	self:montaTag( 3,"identificacaoPrestador",,.T. )
	else
		self:montaTag( 3,"registroANS",alltrim(self:oJson['regAns']))  
	endif
    self:montaTag( 2,"destino",,.T.)

    self:montaTag( 2,"Padrao",self:cVersao)

    self:montaTag( 1,"cabecalho",,.T.)

	self:montaTag( 1,"loteAnexo")

	if self:lSuccess
		self:montaTag( 2,"protocoloRecebimentoAnexo")
		self:montaTag( 3,"nrProtocoloRecebimento",self:oJson['sequencial'])
		self:montaTag( 3,"dataEnvioAnexo",substr(cData,1,4)+"-"+substr(cData,5,2)+"-"+substr(cData,7,2))
		self:montaTag( 3,"numeroLote",self:oJson['sequencial'])
		self:montaTag( 3,"registroANS",alltrim(self:oJson['regAns']))
		self:montaTag( 3,"dadosPrestador")
		self:montaTag( 4,"codigoPrestadorNaOperadora",self:oJson['codRda'])		
		self:montaTag( 3,"dadosPrestador",,.T.)
		self:montaTag( 3,"qtAnexosClinicos",'1')
		self:montaTag( 3,"anexosClinicos")
		self:guia()
		self:montaTag( 3,"anexosClinicos",,.T.)
		self:montaTag( 2,"protocoloRecebimentoAnexo",,.T.)
	else
		self:geraGlosa()
	endif

	self:montaTag( 1,"loteAnexo",,.T.)
	self:montaTag( 1,"hash",md5(self:cStrHash))		

return self:cSoapResp

//-------------------------------------------------------------------
/*/{Protheus.doc} montaTag
Formata a TAG XML a ser escrita no arquivo

@author  Lucas Nonato
@version P12
@since   11/10/2019
@param nSpc    = chaveamento
@param cTag    = nome tag
@param cVal    = valor campo
@param lFim    = fechamento da tag
@param lEncode = retira caracteres especiais
/*/
method montaTag(nSpc,cTag,cVal,lFim,lEncode) class PLSLoteAnexo
    local cRetTag   := ""
    local cNameSpace:= ""
    local lIni		:= .f.
    default nSpc    := 0
    default cTag    := ""
    default lFim    := .F.
    default lEncode := .F.

    if cVal == nil
        cVal    := ""
        lIni := !lFim
    endif

    if !Empty(self:cNS)
        cNameSpace := self:cNS+":"
    endif

    if !empty(cVal) .or. lIni
    	cRetTag += '<' + cNameSpace+ cTag + '>'
    	cVal 	:= alltrim(iif(lEncode,PlRetPonto(cVal),cVal))
    	cRetTag += cVal
    endif
    if !empty(cVal) .or. lFim 
    	cRetTag += '</' + cNameSpace + cTag + '>'
    endif

    if !empty(cVal) .and. cTag <> 'hash'	
    	self:cStrHash += cVal	
    endif

    if !empty(cRetTag)
    	self:cSoapResp  += Replicate( "	", nSpc ) + cRetTag + CRLF
    endif

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} geraGlosa

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method geraGlosa() class PLSLoteAnexo
self:montaTag( 2,"mensagemErro")
self:montaTag( 3,"codigoGlosa",'5007')
self:montaTag( 3,"descricaoGlosa",substr(alltrim(self:cError),1,500),,.t.)
self:montaTag( 2,"mensagemErro",,.T.)
return

//-------------------------------------------------------------------
/*/{Protheus.doc} motivoNegativa

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method motivoNegativa(cSequen) class PLSLoteAnexo
local cSql 		:= ""
local cCodGlo 	:= ""
default cSequen	:= ""
if B4A->B4A_STTISS != '1'
	cSql := " SELECT BEG_CODGLO "
	cSql += " FROM " + RetSqlName("BEG") + " BEG "
	cSql += " WHERE BEG_FILIAL = '" + xFilial("BEG") + "' "
	cSql += " AND BEG_OPEMOV = '" + B4A->B4A_OPEMOV + "' "
    cSql += " AND BEG_ANOAUT = '" + B4A->B4A_ANOAUT + "' "
    cSql += " AND BEG_MESAUT = '" + B4A->B4A_MESAUT + "' "
    cSql += " AND BEG_NUMAUT = '" + B4A->B4A_NUMAUT + "' "
	if !empty(cSequen)
    	cSql += " AND BEG_SEQUEN = '" + cSequen + "' "
	endif
    cSql += " AND BEG_CODGLO <> '   ' "
	cSql += " AND BEG.D_E_L_E_T_ = ' '  "
	cSql += " GROUP BY BEG_CODGLO "
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSql),"TMPBEG",.F.,.T.)
	lTemCritica := !TMPBEG->(eof())

	if lTemCritica
		self:montaTag( 5,"motivosNegativa")
	endif
	while !TMPBEG->(eof())
		cCodGlo := deParaSimpl('38', TMPBEG->BEG_CODGLO, 'BCT')
		self:montaTag( 6,"motivoNegativa")
		self:montaTag( 7,"codigoGlosa",cCodGlo)
		self:montaTag( 7,"descricaoGlosa",alltrim(descTissSp('38', cCodGlo)),,.t.)
		self:montaTag( 6,"motivoNegativa",,.T.)
		TMPBEG->(dbskip())
	enddo
	TMPBEG->(dbCloseArea())

	if lTemCritica
		self:montaTag( 5,"motivosNegativa",,.T.)
	endif	
endif

return

//-------------------------------------------------------------------
/*/{Protheus.doc} addProc

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method addProc(cTag,nProc) class PLSLoteAnexo
	local cCodPad := ""
	local cCodPro := ""

	cCodPad := self:oXML:XPathGetNodeValue( cTag + self:addNS("/codigoTabela" ))
	cCodPro := self:oXML:XPathGetNodeValue( cTag + self:addNS("/codigoProcedimento" ))
	self:oJson['procedimentos'][nProc]['codPadOri'] := cCodPad
	self:oJson['procedimentos'][nProc]['codProcOri']:= cCodPro
	self:oJson['procedimentos'][nProc]['desProc'] 	:= self:oXML:XPathGetNodeValue( cTag + self:addNS("/descricaoProcedimento" ))
	self:oJson['procedimentos'][nProc]['codPad'] 	:= allTrim( PLSVARVINC('87','BR4', allTrim(cCodPad)) )
	self:oJson['procedimentos'][nProc]['codProc'] 	:= allTrim( PLSVARVINC(cCodPad, 'BR8', cCodPro, self:oJson['procedimentos'][nProc]['codPad'] + cCodPro,, self:aTabDup,@self:oJson['procedimentos'][nProc]['codPad']) )

return

//-------------------------------------------------------------------
/*/{Protheus.doc} dadosAutorizacao

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method dadosAutorizacao() class PLSLoteAnexo
	self:montaTag( 5,"dadosAutorizacao")
	self:montaTag( 6,"numeroGuiaPrestador",ifPls(B4A->B4A_NUMIMP,B4A->(B4A_OPEMOV+B4A_ANOAUT+B4A_MESAUT+B4A_NUMAUT)))
	self:montaTag( 6,"numeroGuiaOperadora",B4A->(B4A_OPEMOV+B4A_ANOAUT+B4A_MESAUT+B4A_NUMAUT))
	self:montaTag( 6,"dataAutorizacao",FWDateTo8601(B4A->B4A_DATPRO))
	self:montaTag( 6,"senha",B4A->B4A_SENHA)
	self:montaTag( 6,"dataValidadeSenha",FWDateTo8601(B4A->B4A_DATPRO))
	self:montaTag( 5,"dadosAutorizacao",,.T.)
	
return

//-------------------------------------------------------------------
/*/{Protheus.doc} dadosAutorizacao

@author    Lucas Nonato
@version   V12
@since     24/10/2022
/*/
method medicoSolicitante() class PLSLoteAnexo
	self:montaTag( 5,"medicoSolicitante")
	self:montaTag( 6,"nomeProfissional",B4A->B4A_NOMSOL)
	self:montaTag( 6,"telefoneProfissional",B4A->B4A_TELSOL)
	self:montaTag( 6,"emailProfissional",B4A->B4A_EMASOL)
	self:montaTag( 5,"medicoSolicitante",,.T.)
return